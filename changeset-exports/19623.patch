# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422048626 18000
#      Fri Jan 23 16:30:26 2015 -0500
# Branch gui-release
# Node ID 6b2d7a5dc62af562c77660f898710f10c01baba6
# Parent  af0399a5aae0bb815419d3bc2ac62abcea5e084d
use xevent instead of ev to avoid shadowed warnings

diff --git a/libgui/graphics/BaseControl.cc b/libgui/graphics/BaseControl.cc
--- a/libgui/graphics/BaseControl.cc
+++ b/libgui/graphics/BaseControl.cc
@@ -142,34 +142,34 @@ void BaseControl::update (int pId)
     case uicontrol::properties::ID_KEYPRESSFCN:
       m_keyPressHandlerDefined = ! up.get_keypressfcn ().is_empty ();
       break;
     default:
       break;
     }
 }
 
-bool BaseControl::eventFilter (QObject* watched, QEvent* ev)
+bool BaseControl::eventFilter (QObject* watched, QEvent* xevent)
 {
-  switch (ev->type ())
+  switch (xevent->type ())
     {
     case QEvent::Resize:
       if (m_normalizedFont)
         {
           gh_manager::auto_lock lock;
 
           qWidget<QWidget> ()->setFont (Utils::computeFont<uicontrol>
                                         (properties<uicontrol> ()));
         }
       break;
     case QEvent::MouseButtonPress:
         {
           gh_manager::auto_lock lock;
 
-          QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
+          QMouseEvent* m = dynamic_cast<QMouseEvent*> (xevent);
           graphics_object go = object ();
           uicontrol::properties& up = Utils::properties<uicontrol> (go);
           graphics_object fig = go.get_ancestor ("figure");
 
           if (m->button () != Qt::LeftButton
               || ! up.enable_is ("on"))
             {
               gh_manager::post_set (fig.get_handle (), "selectiontype",
@@ -195,38 +195,38 @@ bool BaseControl::eventFilter (QObject* 
             }
         }
       break;
     case QEvent::MouseMove:
       if (qWidget<QWidget> ()->hasMouseTracking ())
         {
           gh_manager::auto_lock lock;
 
-          QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
+          QMouseEvent* m = dynamic_cast<QMouseEvent*> (xevent);
           graphics_object go = object ();
           graphics_object fig = go.get_ancestor ("figure");
 
           gh_manager::post_set (fig.get_handle (), "currentpoint",
                                 Utils::figureCurrentPoint (fig, m), false);
           gh_manager::post_callback (fig.get_handle (), "windowbuttonmotionfcn");
         }
       break;
     case QEvent::KeyPress:
       if (m_keyPressHandlerDefined)
         {
           gh_manager::auto_lock lock;
 
           octave_scalar_map keyData =
-            Utils::makeKeyEventStruct (dynamic_cast<QKeyEvent*> (ev));
+            Utils::makeKeyEventStruct (dynamic_cast<QKeyEvent*> (xevent));
           graphics_object fig = object ().get_ancestor ("figure");
 
           gh_manager::post_set (fig.get_handle (), "currentcharacter",
                                 keyData.getfield ("Character"), false);
           gh_manager::post_callback (m_handle, "keypressfcn", keyData);
         }
       break;
     default: break;
     }
 
-  return Object::eventFilter (watched, ev);
+  return Object::eventFilter (watched, xevent);
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -91,17 +91,17 @@ void Container::resizeEvent (QResizeEven
               obj->qWidget<QWidget> ()
                 ->setGeometry (xround (bb(0)), xround (bb(1)),
                                xround (bb(2)), xround (bb(3)));
             }
         }
     }
 }
 
-void Container::childEvent (QChildEvent* ev)
+void Container::childEvent (QChildEvent* xevent)
 {
-  if (ev->child ()->isWidgetType ())
+  if (xevent->child ()->isWidgetType ())
     {
-      qobject_cast<QWidget*> (ev->child ())->setMouseTracking (hasMouseTracking ());
+      qobject_cast<QWidget*> (xevent->child ())->setMouseTracking (hasMouseTracking ());
     }
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -488,102 +488,102 @@ void Figure::updateBoundingBox (bool int
   d->m_handle = m_handle;
   d->m_figure = this;
 
   //qDebug ("Figure::updateBoundingBox: internal=%d, bbox=[%g %g %g %g]",
   //        d->m_internal, d->m_bbox(0), d->m_bbox(1), d->m_bbox(2), d->m_bbox(3));
   gh_manager::post_function (Figure::updateBoundingBoxHelper, d);
 }
 
-bool Figure::eventNotifyBefore (QObject* obj, QEvent* ev)
+bool Figure::eventNotifyBefore (QObject* obj, QEvent* xevent)
 {
   if (! m_blockUpdates)
     {
       if (obj == m_container)
         {
           // Do nothing...
         }
       else if (obj == m_menuBar)
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::ActionRemoved:
                 {
-                  QAction* a = dynamic_cast<QActionEvent*> (ev)->action ();
+                  QAction* a = dynamic_cast<QActionEvent*> (xevent)->action ();
 
                   if (! a->isSeparator ()
                       && a->objectName () != "builtinMenu")
                     updateMenuBar ();
                 }
               break;
             default:
               break;
             }
         }
       else
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::Close:
-              ev->ignore ();
+              xevent->ignore ();
               gh_manager::post_callback (m_handle, "closerequestfcn");
               return true;
             default:
               break;
             }
         }
     }
 
   return false;
 }
 
-void Figure::eventNotifyAfter (QObject* watched, QEvent* ev)
+void Figure::eventNotifyAfter (QObject* watched, QEvent* xevent)
 {
   if (! m_blockUpdates)
     {
       if (watched == m_container)
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::Resize:
               updateBoundingBox (true, UpdateBoundingBoxSize);
               break;
             case QEvent::ChildAdded:
-              if (dynamic_cast<QChildEvent*> (ev)->child
+              if (dynamic_cast<QChildEvent*> (xevent)->child
                   ()->isWidgetType())
                 {
                   gh_manager::auto_lock lock;
                   const figure::properties& fp = properties<figure> ();
 
                   showFigureToolBar (! hasUiControlChildren (fp));
                 }
             default:
               break;
             }
         }
       else if (watched == m_menuBar)
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::ActionAdded:
                 {
-                  QAction* a = dynamic_cast<QActionEvent*> (ev)->action ();
+                  QAction* a = dynamic_cast<QActionEvent*> (xevent)->action ();
 
                   if (! a->isSeparator ()
                       && a->objectName () != "builtinMenu")
                     updateMenuBar ();
                 }
               break;
             default:
               break;
             }
         }
       else
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::Move:
               updateBoundingBox (false, UpdateBoundingBoxPosition);
               updateBoundingBox (true, UpdateBoundingBoxPosition);
               break;
             case QEvent::Resize:
               updateBoundingBox (false, UpdateBoundingBoxSize);
               break;
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -114,36 +114,36 @@ void GLCanvas::drawZoomBox (const QPoint
   glPopMatrix ();
 }
 
 void GLCanvas::paintGL (void)
 {
   canvasPaintEvent ();
 }
 
-void GLCanvas::mouseMoveEvent (QMouseEvent* ev)
+void GLCanvas::mouseMoveEvent (QMouseEvent* xevent)
 {
-  canvasMouseMoveEvent (ev);
+  canvasMouseMoveEvent (xevent);
 }
 
-void GLCanvas::mousePressEvent (QMouseEvent* ev)
+void GLCanvas::mousePressEvent (QMouseEvent* xevent)
 {
-  canvasMousePressEvent (ev);
+  canvasMousePressEvent (xevent);
 }
 
-void GLCanvas::mouseReleaseEvent (QMouseEvent* ev)
+void GLCanvas::mouseReleaseEvent (QMouseEvent* xevent)
 {
-  canvasMouseReleaseEvent (ev);
+  canvasMouseReleaseEvent (xevent);
 }
 
-void GLCanvas::keyPressEvent (QKeyEvent* ev)
+void GLCanvas::keyPressEvent (QKeyEvent* xevent)
 {
-  if (! canvasKeyPressEvent (ev))
-    QGLWidget::keyPressEvent (ev);
+  if (! canvasKeyPressEvent (xevent))
+    QGLWidget::keyPressEvent (xevent);
 }
 
-void GLCanvas::keyReleaseEvent (QKeyEvent* ev)
+void GLCanvas::keyReleaseEvent (QKeyEvent* xevent)
 {
-  if (! canvasKeyReleaseEvent (ev))
-    QGLWidget::keyReleaseEvent (ev);
+  if (! canvasKeyReleaseEvent (xevent))
+    QGLWidget::keyReleaseEvent (xevent);
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/Panel.cc b/libgui/graphics/Panel.cc
--- a/libgui/graphics/Panel.cc
+++ b/libgui/graphics/Panel.cc
@@ -139,23 +139,23 @@ Panel::Panel (const graphics_object& go,
   else
     frame->hide ();
 }
 
 Panel::~Panel (void)
 {
 }
 
-bool Panel::eventFilter (QObject* watched, QEvent* ev)
+bool Panel::eventFilter (QObject* watched, QEvent* xevent)
 {
   if (! m_blockUpdates)
     {
       if (watched == qObject ())
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::Resize:
                 {
                   gh_manager::auto_lock lock;
                   graphics_object go = object ();
 
                   if (go.valid_object ())
                     {
@@ -174,33 +174,33 @@ bool Panel::eventFilter (QObject* watche
                             }
                         }
                       updateLayout ();
                     }
                 }
               break;
             case QEvent::MouseButtonPress:
                 {
-                  QMouseEvent* m = dynamic_cast<QMouseEvent*> (ev);
+                  QMouseEvent* m = dynamic_cast<QMouseEvent*> (xevent);
 
                   if (m->button () == Qt::RightButton)
                     {
                       gh_manager::auto_lock lock;
 
                       ContextMenu::executeAt (properties (), m->globalPos ());
                     }
                 }
               break;
             default:
               break;
             }
         }
       else if (watched == m_container)
         {
-          switch (ev->type ())
+          switch (xevent->type ())
             {
             case QEvent::Resize:
               if (qWidget<QWidget> ()->isVisible ())
                 {
                   gh_manager::auto_lock lock;
 
                   properties ().update_boundingbox ();
                 }
diff --git a/libgui/graphics/TextEdit.cc b/libgui/graphics/TextEdit.cc
--- a/libgui/graphics/TextEdit.cc
+++ b/libgui/graphics/TextEdit.cc
@@ -26,26 +26,26 @@ along with Octave; see the file COPYING.
 
 #include <QKeyEvent>
 
 #include "TextEdit.h"
 
 namespace QtHandles
 {
 
-void TextEdit::focusOutEvent (QFocusEvent* ev)
+void TextEdit::focusOutEvent (QFocusEvent* xevent)
 {
-  QTextEdit::focusOutEvent (ev);
+  QTextEdit::focusOutEvent (xevent);
 
   emit editingFinished ();
 }
 
-void TextEdit::keyPressEvent (QKeyEvent* ev)
+void TextEdit::keyPressEvent (QKeyEvent* xevent)
 {
-  QTextEdit::keyPressEvent (ev);
+  QTextEdit::keyPressEvent (xevent);
 
-  if ((ev->key () == Qt::Key_Return
-       || ev->key () == Qt::Key_Enter)
-      && ev->modifiers () == Qt::ControlModifier)
+  if ((xevent->key () == Qt::Key_Return
+       || xevent->key () == Qt::Key_Enter)
+      && xevent->modifiers () == Qt::ControlModifier)
     emit editingFinished ();
 }
 
 }; // namespace QtHandles
diff --git a/libgui/graphics/ToolBar.cc b/libgui/graphics/ToolBar.cc
--- a/libgui/graphics/ToolBar.cc
+++ b/libgui/graphics/ToolBar.cc
@@ -113,31 +113,31 @@ void ToolBar::update (int pId)
         m_figure->showCustomToolBar (bar, tp.is_visible ());
       break;
     default:
       Object::update (pId);
       break;
     }
 }
 
-bool ToolBar::eventFilter (QObject* watched, QEvent* ev)
+bool ToolBar::eventFilter (QObject* watched, QEvent* xevent)
 {
   if (watched == qObject ())
     {
-      switch (ev->type ())
+      switch (xevent->type ())
         {
         case QEvent::ActionAdded:
         case QEvent::ActionRemoved:
             {
-              QActionEvent* ae = dynamic_cast<QActionEvent*> (ev);
+              QActionEvent* ae = dynamic_cast<QActionEvent*> (xevent);
               QToolBar* bar = qWidget<QToolBar> ();
 
               if (ae->action () != m_empty)
                 {
-                  if (ev->type () == QEvent::ActionAdded)
+                  if (xevent->type () == QEvent::ActionAdded)
                     {
                       if (bar->actions ().size () == 2)
                         QTimer::singleShot (0, this, SLOT (hideEmpty (void)));
                     }
                   else
                     {
                       if (bar->actions ().size () == 1)
                         m_empty->setVisible (true);
