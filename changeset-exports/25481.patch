# HG changeset patch
# User Sahil Yadav <yadavsahil5198@gmail.com>
# Date 1519235042 -19800
#      Wed Feb 21 23:14:02 2018 +0530
# Node ID 920299ced721f68ce0d97eb0d3c309fc8a61a6ea
# Parent  00bfb85bfb2861ecd2a10c34a55a08159d5f4654
Calculate nnz for diagonal matrices efficiently (>1000X speedup) (bug #53198).

* ov-base-diag.h (nnz): Extract diagonal (N elements) and return nnz of
extracted vector rather than calling to_dense (N^2 elements) and returning
nnz of 2-D matrix.

diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -75,17 +75,17 @@ public:
                             bool resize_ok = false);
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
-  octave_idx_type nnz (void) const { return to_dense ().nnz (); }
+  octave_idx_type nnz (void) const { return diag ().nnz (); }
 
   octave_value reshape (const dim_vector& new_dims) const
   { return to_dense ().reshape (new_dims); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
   {
     if (vec.numel () == 2
         && ((vec.xelem (0) == 1 && vec.xelem (1) == 0)
