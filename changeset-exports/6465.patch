# HG changeset patch
# User jwe
# Date 1175005786 0
#      Tue Mar 27 14:29:46 2007 +0000
# Node ID 5fb50197b69ae7da69f207be2e1db72998ed0cf0
# Parent  9914ad33ac6a3768c32437d3f67bfebe1dd7b4e9
[project @ 2007-03-27 14:29:46 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -10,17 +10,20 @@ Summary of important user-visible change
 
     + RGB line colors are supported if you use gnuplot 4.2.  Octave
       can still use gnuplot 4.0, but there is no way to set arbitrary
       line colors with it when using the Matlab-style plot functions.
       There never was any way to do this reliably with older versions
       of gnuplot (whether run from Octave or not) since it only
       provided a limited set to choose from, and they were terminal
       dependent, so choosing color 1 with the X11 terminal would be
-      different from color 1 with the PostScript terminal.
+      different from color 1 with the PostScript terminal.  Valid RGB
+      colors for gnuplot 4.0 are the eight possible combinations of 0
+      and 1 for the R, G and B values. Invalid values are all mapped
+      to the same color.
 
     + You can control the width of lines using (for example):
 
 	line (x, y, "linewidth", 4, "color", [1, 0, 0.5]);
 
       (this also shows the color feature).
 
     + With gnuplot 4.2, image data is plotted with gnuplot and may be
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-03-27  David Bateman  <dbateman@free.fr>
+
+	* plot/__go_draw_axes__.m: Allow linewidth settings to work with
+	gnuplot 4.0.
+
 2007-03-26  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Send image data to gnuplot via plot stream.
 
 2007-03-26  Daniel J Sebald  <daniel.sebald@ieee.org>
 
 	* plot/__go_draw_axes__.m: Always end palette data to gnuplot via
 	plot stream and using binary data.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -323,17 +323,17 @@ function __go_draw_axes__ (h, plot_strea
 	case "line"
 	  data_idx++;
 	  is_image_data(data_idx) = false;
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
-	  [style, typ] = do_linestyle_command (obj, data_idx, plot_stream);
+	  [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	  usingclause{data_idx} = "";
 	  if (have_newer_gnuplot || isnan (typ))
 	    withclause{data_idx} = sprintf ("with %s linestyle %d",
 					    style, data_idx);
 	  else
 	    withclause{data_idx} = sprintf ("with %s linetype %d",
 					    style, typ);
 	  endif
@@ -431,33 +431,40 @@ function __go_draw_axes__ (h, plot_strea
 	      endif
 	      if (yautoscale)
 		[ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ydat);
 	      endif
 	      data{data_idx} = [xdat, ydat]';
 	      usingclause{data_idx} = "using ($1):($2)";
 	    endif
 	  endif
+	  if (! (have_newer_gnuplot || isempty (with)))
+	    if (isempty (withclause{data_idx}))
+	      withclause{data_idx} = sprintf("with %s", with);
+	    else
+	      withclause{data_idx} = sprintf("%s %s", withclause{data_idx}, with);
+	    endif
+	  endif
 
 	case "surface"
 	  data_idx++;
 	  is_image_data(data_idx) = false;
-	  [style, typ] = do_linestyle_command (obj, data_idx, plot_stream);
+	  [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
 	  usingclause{data_idx} = "";
 	  if (have_newer_gnuplot || isnan (typ))
 	    withclause{data_idx} = sprintf ("with %s linestyle %d",
 					    style, data_idx);
 	  else
-	    withclause{data_idx} = sprintf ("with %s linetype %d",
-					    style, typ);
+	    withclause{data_idx} = sprintf ("with %s linetype %d %s",
+					    style, typ, with);
 	  endif
 	  parametric(i) = false;
 	  nd = 3;
 	  xdat = obj.xdata;
 	  ydat = obj.ydata;
 	  zdat = obj.zdata;
 	  if (xautoscale)
 	    tx = xdat(:);
@@ -735,28 +742,29 @@ function lim = get_axis_limits (min_val,
     min_val = scale * floor (min_val / scale);
     max_val = scale * ceil (max_val / scale);
   endif
 
   lim = [min_val, max_val];
 
 endfunction
 
-function [style, typ] = do_linestyle_command (obj, idx, plot_stream)
+function [style, typ, with] = do_linestyle_command (obj, idx, plot_stream)
 
   persistent have_newer_gnuplot ...
     = compare_versions (__gnuplot_version__ (), "4.0", ">");
 
   if (have_newer_gnuplot)
     fprintf (plot_stream, "set style line %d default;\n", idx);
   endif
   fprintf (plot_stream, "set style line %d", idx);
 
   found_style = false;
   typ = NaN;
+  with = "";
 
   if (isfield (obj, "color"))
     color = obj.color;
     if (isnumeric (color))
       if (have_newer_gnuplot)
 	fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
 		 round (255*color));
       else
@@ -803,17 +811,21 @@ function [style, typ] = do_linestyle_com
       fprintf (plot_stream, " linetype %s", lt);
       found_style = true;
     endif
   else
     lt = "";
   endif
 
   if (isfield (obj, "linewidth"))
-    fprintf (plot_stream, " linewidth %f", obj.linewidth);
+    if (have_newer_gnuplot)
+      fprintf (plot_stream, " linewidth %f", obj.linewidth);
+    else
+      with = sprintf ("%s lw %f", with, obj.linewidth);
+    endif
     found_style = true;
   endif
 
   if (isfield (obj, "marker"))
     switch (obj.marker)
       case "+"
 	pt = "1";
       case "o"
@@ -841,36 +853,46 @@ function [style, typ] = do_linestyle_com
       case {"hexagram", "h"}
 	pt = "12";
       case "none"
 	pt = "";
       otherwise
 	pt = "";
     endswitch
     if (! isempty (pt))
-      fprintf (plot_stream, " pointtype %s", pt);
+      if (have_newer_gnuplot)
+	fprintf (plot_stream, " pointtype %s", pt);
+      else
+	with = sprintf ("%s pt %s", with, pt);
+      endif
       found_style = true;
     endif
   else
     pt = "";
   endif
 
-  if (isfield (obj, "markersize"))
-    fprintf (plot_stream, " pointsize %f", obj.markersize);
-    found_style = true;
-  endif
-
   style = "lines";
   if (isempty (lt))
     if (! isempty (pt))
       style = "points";
     endif
   elseif (! isempty (pt))
     style = "linespoints";
   endif
 
+  if (isfield (obj, "markersize"))
+    if (have_newer_gnuplot)
+      fprintf (plot_stream, " pointsize %f", obj.markersize);
+    else
+      if (! strcmp (style, "lines"))
+	with = sprintf ("%s ps %f", with, obj.markersize);
+      endif
+    endif
+    found_style = true;
+  endif
+
   if (have_newer_gnuplot && ! found_style)
     fputs (plot_stream, " default");
   endif
 
   fputs (plot_stream, ";\n");
 
 endfunction
