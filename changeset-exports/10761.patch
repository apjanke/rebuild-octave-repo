# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277969514 -7200
#      Thu Jul 01 09:31:54 2010 +0200
# Node ID 12dfe91e9fab1cb6dac86cffdc001538f5756e8c
# Parent  76079e505f9d7d26d71d24f59115c3b098f2c107
more bkw compatibility for octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-07-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-map.h (octave_scalar_map::assign (const std::string&, const
+	octave_value&), octave_map::assign (const std::string&, const Cell&)):
+	Backward-compatible aliases for setfield.
+
 2010-07-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.cc (octave_fields::equal_up_to_order (const octave_fields&,
 	octave_idx_type *)): New overload.
 	(octave_fields::equal_up_to_order (const octave_fields&,
 	Array<octave_idx_type>&)): Use it here.
 	(octave_map::fast_elem_insert,
 	octave_map::fast_elem_extract): New methods.
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -209,16 +209,18 @@ public:
   string_vector keys (void) const
     { return fieldnames (); }
 
   // get contents of a given field. empty value if not exist.
   octave_value getfield (const std::string& key) const;
 
   // set contents of a given field. add if not exist.
   void setfield (const std::string& key, const octave_value& val);
+  void assign (const std::string& k, const octave_value& val)
+    { setfield (k, val); } 
 
   // remove a given field. do nothing if not exist.
   void rmfield (const std::string& key);
   void del (const std::string& k) { rmfield (k); }
 
   // return a copy with fields ordered, optionally along with permutation.
   octave_scalar_map orderfields (void) const;
   octave_scalar_map orderfields (Array<octave_idx_type>& perm) const;
@@ -331,16 +333,18 @@ public:
     { return fieldnames (); }
 
   // get contents of a given field. empty value if not exist.
   Cell getfield (const std::string& key) const;
 
   // set contents of a given field. add if not exist. checks for
   // correct dimensions.
   void setfield (const std::string& key, const Cell& val);
+  void assign (const std::string& k, const Cell& val)
+    { setfield (k, val); } 
 
   // remove a given field. do nothing if not exist.
   void rmfield (const std::string& key);
   void del (const std::string& k) { rmfield (k); }
 
   // return a copy with fields ordered, optionally along with permutation.
   octave_map orderfields (void) const;
   octave_map orderfields (Array<octave_idx_type>& perm) const;
