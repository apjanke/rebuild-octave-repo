# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519921124 18000
#      Thu Mar 01 11:18:44 2018 -0500
# Node ID a8df0552cc4212d71336348f03b9a4fa29fc7c2b
# Parent  8a92f442c4a28e660311c0af8bd09efca2d9c216
* lu.cc: Note possible issues with ipvt vector.

diff --git a/liboctave/numeric/lu.cc b/liboctave/numeric/lu.cc
--- a/liboctave/numeric/lu.cc
+++ b/liboctave/numeric/lu.cc
@@ -41,19 +41,25 @@ along with Octave; see the file COPYING.
 #include "lo-qrupdate-proto.h"
 #include "lu.h"
 #include "oct-locbuf.h"
 
 namespace octave
 {
   namespace math
   {
+    // FIXME: PermMatrix::col_perm_vec returns Array<octave_idx_type>
+    // but ipvt is an Array<octave_f77_int_type>.  This could cause
+    // trouble for large arrays if octave_f77_int_type is 32-bits but
+    // octave_idx_type is 64.  Since this constructor is called from
+    // Fluupdate, it could be given values that are out of range.  We
+    // should ensure that the values are within range here.
+
     template <typename T>
-    lu<T>::lu (const T& l, const T& u,
-               const PermMatrix& p)
+    lu<T>::lu (const T& l, const T& u, const PermMatrix& p)
       : a_fact (u), l_fact (l), ipvt (p.transpose ().col_perm_vec ())
     {
       if (l.columns () != u.rows ())
         (*current_liboctave_error_handler) ("lu: dimension mismatch");
     }
 
     template <typename T>
     bool
@@ -65,16 +71,25 @@ namespace octave
     template <typename T>
     void
     lu<T>::unpack (void)
     {
       if (packed ())
         {
           l_fact = L ();
           a_fact = U (); // FIXME: sub-optimal
+
+          // FIXME: getp returns Array<octave_idx_type> but ipvt is
+          // Array<octave_f77_int_type>.  However, getp produces its
+          // result from a valid ipvt array so validation should not be
+          // necessary.  OTOH, it might be better to have a version of
+          // getp that doesn't cause us to convert from
+          // Array<octave_f77_int_type> to Array<octave_idx_type> and
+          // back again.
+
           ipvt = getp ();
         }
     }
 
     template <typename T>
     T
     lu<T>::L (void) const
     {
diff --git a/liboctave/numeric/lu.h b/liboctave/numeric/lu.h
--- a/liboctave/numeric/lu.h
+++ b/liboctave/numeric/lu.h
@@ -47,16 +47,17 @@ namespace octave
       lu (void)
         : a_fact (), l_fact (), ipvt () { }
 
       lu (const T& a);
 
       lu (const lu& a)
         : a_fact (a.a_fact), l_fact (a.l_fact), ipvt (a.ipvt) { }
 
+      OCTAVE_DEPRECATED (4.4, "foobar")
       lu (const T& l, const T& u, const PermMatrix& p);
 
       lu& operator = (const lu& a)
       {
         if (this != &a)
           {
             a_fact = a.a_fact;
             l_fact = a.l_fact;
