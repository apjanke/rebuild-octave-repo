# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1278443109 -7200
#      Tue Jul 06 21:05:09 2010 +0200
# Node ID 38bdcbb58df7d079b33786aec870839272cb8ad5
# Parent  6cc789b3f0e3724be05a2ebab1889f919edbcd49
Add engineering formats. eg 'fomat short eng' (Feature Request #30163)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2010-07-06  David Bateman  <dbateman@free.fr>
+
+	* pr-output.cc (static bool print_eng): Flag engineering format,
+	(float_format::float_format (int, int, int, int)): New constructor.
+	(int float_format::ex): New field in the class.
+	(static int maybe_mod3 (const int&), static int
+	engineering_exponent (const double&),
+	static int calc_digits (const double&)): New functions
+	(class pr_engineering_float): New class
+	(std::ostream& operator << (std::ostream&,
+	const pr_formatted_float&)): New operator. Make it a friend of the
+	float_format class.
+	(static void set_real_format(...),
+	static void set_real_matrix_format (...),
+	static void set_complex_format(...),
+	static void set_complex_matrix_format (...),
+	static void set_range_format (...)): Set width for engineering format.
+	(static void set_format (...)): Call calc_digits to find the number
+	of digits in a value.
+	(static void pr_any_float (const float_format *, std::ostream&,
+	double, int)): Print engineering formats.
+	(static void init_format_state (void)): Set default state of print_eng.
+	(static void set_format_style (int, const string_vector&)): Parse
+	the "eng" argument.
+	(Fformat): Document the new engineering format.
+
 2010-07-04  Soren Hauberg  <hauberg@gmail.com>
 	* DLD_FUNCTIONS/__magick_read__.cc: restore locale after
 	GraphicsMagick initialisation.
 
 2010-06-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.cc (octave_range::save_ascii): Save length rather than
 	limit when inc is zero. Adjust comment.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -113,16 +113,20 @@ static bool compact_format = false;
 static bool print_e = false;
 
 // TRUE means use a g format.
 static bool print_g = false;
 
 // TRUE means print E instead of e for exponent field.
 static bool print_big_e = false;
 
+// TRUE means use an engineering format.
+static bool print_eng = false;
+
+class pr_engineering_float;
 class pr_formatted_float;
 class pr_rational_float;
 
 static int
 current_output_max_field_width (void)
 {
   return Voutput_max_field_width;
 }
@@ -135,26 +139,30 @@ current_output_precision (void)
 
 class
 float_format
 {
 public:
 
   float_format (int w = current_output_max_field_width (),
                 int p = current_output_precision (), int f = 0)
-    : fw (w), prec (p), fmt (f), up (0), sp (0) { }
+    : fw (w), ex (0), prec (p), fmt (f), up (0), sp (0) { }
+
+  float_format (int w, int e, int p, int f)
+    : fw (w), ex (e), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (const float_format& ff)
-    : fw (ff.fw), prec (ff.prec), fmt (ff.fmt), up (ff.up), sp (ff.sp) { }
+    : fw (ff.fw), ex (ff.ex), prec (ff.prec), fmt (ff.fmt), up (ff.up), sp (ff.sp) { }
 
   float_format& operator = (const float_format& ff)
     {
       if (&ff != this)
         {
           fw = ff.fw;
+          ex = ff.ex;
           prec = ff.prec;
           fmt = ff.fmt;
           up = ff.up;
           sp = ff.sp;
         }
 
       return *this;
     }
@@ -171,39 +179,129 @@ public:
   float_format& precision (int p) { prec = p; return *this; }
 
   float_format& width (int w) { fw = w; return *this; }
 
   float_format& trailing_zeros (bool tz = true)
     { sp = tz ? std::ios::showpoint : 0; return *this; }
 
   friend std::ostream& operator << (std::ostream& os,
+                                    const pr_engineering_float& pff);
+
+  friend std::ostream& operator << (std::ostream& os,
                                     const pr_formatted_float& pff);
 
   friend std::ostream& operator << (std::ostream& os,
                                     const pr_rational_float& pff);
 
 private:
 
   // Field width.  Zero means as wide as necessary.
   int fw;
 
+  // Exponent Field width.  Zero means as wide as necessary.
+  int ex;
+
   // Precision.
   int prec;
 
   // Format.
   int fmt;
 
   // E or e.
   int up;
 
   // Show trailing zeros.
   int sp;
 };
 
+static int
+maybe_mod3 (const int& x)
+{
+  return print_eng ? x - (x % 3) : x;
+}
+
+static int
+engineering_exponent (const double& x)
+{
+  int ex = 0;
+  if (x != 0)
+    {
+      double absval = (x < 0.0 ? -x : x);
+      int logabsval = static_cast<int> (floor (log10 (absval)));
+      if (logabsval < 0.0)
+        ex = maybe_mod3 (logabsval - 2);  
+      else
+        ex = maybe_mod3 (logabsval);  
+    }
+  return ex;
+}
+
+static int
+calc_digits (const double& x)
+{
+  return print_eng ? engineering_exponent (x)
+    : static_cast<int> (floor (log10 (x)));
+}
+
+class
+pr_engineering_float
+{
+public:
+
+  const float_format& f;
+
+  double val;
+
+  int exponent (void) const
+  {
+    return engineering_exponent (val);
+  }
+    
+  double mantissa (void) const
+  {
+    return val / std::pow (10.0, exponent ());
+  }
+
+  pr_engineering_float (const float_format& f_arg, double val_arg)
+    : f (f_arg), val (val_arg) { }
+};
+
+std::ostream&
+operator << (std::ostream& os, const pr_engineering_float& pff)
+{
+  if (pff.f.fw >= 0)
+    os << std::setw (pff.f.fw - pff.f.ex);
+
+  if (pff.f.prec >= 0)
+    os << std::setprecision (pff.f.prec);
+
+  std::ios::fmtflags oflags = 
+    os.flags (static_cast<std::ios::fmtflags> 
+              (pff.f.fmt | pff.f.up | pff.f.sp));
+
+  os << pff.mantissa ();
+
+  int ex = pff.exponent ();
+  if (ex < 0)
+    {
+      os << std::setw (0) << "e-";
+      ex = -ex;
+    }
+  else
+    os << std::setw (0) << "e+";
+
+  os << std::setw (pff.f.ex - 2) << std::setfill('0') << ex 
+     << std::setfill(' ');
+
+  os.flags (oflags);
+
+  return os;
+}
+
 class
 pr_formatted_float
 {
 public:
 
   const float_format& f;
 
   double val;
@@ -480,31 +578,40 @@ set_real_format (int digits, bool inf_or
         }
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (fw > Voutput_max_field_width || print_e || print_g))
+      && (fw > Voutput_max_field_width || print_e || print_g || print_eng))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
-          int exp_field = 4;
+          int ex = 4;
           if (digits > 100)
-            exp_field++;
-
-          fw = 2 + prec + exp_field;
-          if (inf_or_nan && fw < 4)
-            fw = 4;
-
-          fmt = float_format (fw, prec - 1, std::ios::scientific);
+            ex++;
+
+          if (print_eng)
+            {
+              fw = 4 + prec + ex;
+              if (inf_or_nan && fw < 6)
+                fw = 6;
+              fmt = float_format (fw, ex, prec - 1, std::ios::fixed);
+            }
+          else
+            {
+              fw = 2 + prec + ex;
+              if (inf_or_nan && fw < 4)
+                fw = 4;
+              fmt = float_format (fw, prec - 1, std::ios::scientific);
+            }
         }
 
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && (inf_or_nan || int_only))
     fmt = float_format (fw, rd);
   else
@@ -524,17 +631,17 @@ set_format (double d, int& fw)
 
   bool inf_or_nan = (xisinf (d) || xisnan (d));
 
   bool int_only = (! inf_or_nan && D_NINT (d) == d);
 
   double d_abs = d < 0.0 ? -d : d;
 
   int digits = (inf_or_nan || d_abs == 0.0)
-    ? 0 : static_cast<int> (floor (log10 (d_abs) + 1.0));
+    ? 0 : (calc_digits (d_abs) + 1);
 
   set_real_format (digits, inf_or_nan, int_only, fw);
 }
 
 static inline void
 set_format (double d)
 {
   int fw;
@@ -624,32 +731,41 @@ set_real_matrix_format (int x_max, int x
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e
-          || print_g
+          || print_eng || print_g
           || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
-          int exp_field = 4;
+          int ex = 4;
           if (x_max > 100 || x_min > 100)
-            exp_field++;
-
-          fw = 2 + prec + exp_field;
-          if (inf_or_nan && fw < 4)
-            fw = 4;
-
-          fmt = float_format (fw, prec - 1, std::ios::scientific);
+            ex++;
+
+          if (print_eng)
+            {
+              fw = 4 + prec + ex;
+              if (inf_or_nan && fw < 6)
+                fw = 6;
+              fmt = float_format (fw, ex, prec - 1, std::ios::fixed);
+            }
+          else
+            {
+              fw = 2 + prec + ex;
+              if (inf_or_nan && fw < 4)
+                fw = 4;
+              fmt = float_format (fw, prec - 1, std::ios::scientific);
+            }
         }
 
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && int_or_inf_or_nan)
     fmt = float_format (fw, rd);
   else
@@ -670,23 +786,22 @@ set_format (const Matrix& m, int& fw, do
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
   Matrix m_abs = m.abs ();
   double max_abs = pr_max_internal (m_abs);
   double min_abs = pr_min_internal (m_abs);
 
-  int x_max = max_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
-
-  int x_min = min_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
-
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
+  int x_max = max_abs == 0.0 ? 0 : (calc_digits (max_abs) + 1);
+
+  int x_min = min_abs == 0.0 ? 0 : (calc_digits (min_abs) + 1);
+
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 
+    : std::pow (10.0, maybe_mod3 (x_max - 1));
 
   set_real_matrix_format (x_max, x_min, inf_or_nan, int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
   int fw;
@@ -782,39 +897,53 @@ set_complex_format (int x_max, int x_min
       if (inf_or_nan && i_fw < 3)
         {
           i_fw = 3;
           r_fw = 4;
         }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (r_fw > Voutput_max_field_width || print_e || print_g))
+      && (r_fw > Voutput_max_field_width || print_e || print_eng || print_g))
     {
       if (print_g)
         {
           r_fmt = float_format ();
           i_fmt = float_format ();
         }
       else
         {
-          int exp_field = 4;
+          int ex = 4;
           if (x_max > 100 || x_min > 100)
-            exp_field++;
-
-          i_fw = prec + exp_field;
-          r_fw = i_fw + 1;
-          if (inf_or_nan && i_fw < 3)
+            ex++;
+
+          if (print_eng)
             {
-              i_fw = 3;
-              r_fw = 4;
+              i_fw =  3 + prec + ex;
+              r_fw = i_fw + 1;
+              if (inf_or_nan && i_fw < 5)
+                {
+                  i_fw = 5;
+                  r_fw = 6;
+                }
+              r_fmt = float_format (r_fw, ex, prec - 1, std::ios::fixed);
+              i_fmt = float_format (i_fw, ex, prec - 1, std::ios::fixed);
             }
-
-          r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
-          i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+          else
+            {
+              i_fw = 1 + prec + ex;
+              r_fw = i_fw + 1;
+              if (inf_or_nan && i_fw < 3)
+                {
+                  i_fw = 3;
+                  r_fw = 4;
+                }
+              r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+              i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+            }
         }
 
       if (print_big_e)
         {
           r_fmt.uppercase ();
           i_fmt.uppercase ();
         }
     }
@@ -848,20 +977,20 @@ set_format (const Complex& c, int& r_fw,
   bool inf_or_nan = (xisinf (c) || xisnan (c));
 
   bool int_only = (D_NINT (rp) == rp && D_NINT (ip) == ip);
 
   double r_abs = rp < 0.0 ? -rp : rp;
   double i_abs = ip < 0.0 ? -ip : ip;
 
   int r_x = (xisinf (rp) || xisnan (rp) || r_abs == 0.0)
-    ? 0 : static_cast<int> (floor (log10 (r_abs) + 1.0));
+    ? 0 : (calc_digits (r_abs) + 1);
 
   int i_x = (xisinf (ip) || xisnan (ip) || i_abs == 0.0)
-    ? 0 : static_cast<int> (floor (log10 (i_abs) + 1.0));
+    ? 0 : (calc_digits (i_abs) + 1);
 
   int x_max, x_min;
 
   if (r_x > i_x)
     {
       x_max = r_x;
       x_min = i_x;
     }
@@ -982,40 +1111,54 @@ set_complex_matrix_format (int x_max, in
         {
           i_fw = 3;
           r_fw = 4;
         }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e
-          || print_g
+          || print_eng || print_g
           || (! Vfixed_point_format && r_fw > Voutput_max_field_width)))
     {
       if (print_g)
         {
           r_fmt = float_format ();
           i_fmt = float_format ();
         }
       else
         {
-          int exp_field = 4;
+          int ex = 4;
           if (x_max > 100 || x_min > 100)
-            exp_field++;
-
-          i_fw = prec + exp_field;
-          r_fw = i_fw + 1;
-          if (inf_or_nan && i_fw < 3)
+            ex++;
+
+          if (print_eng)
             {
-              i_fw = 3;
-              r_fw = 4;
+              i_fw = 3 + prec + ex;
+              r_fw = i_fw + 1;
+              if (inf_or_nan && i_fw < 5)
+                {
+                  i_fw = 5;
+                  r_fw = 6;
+                }
+              r_fmt = float_format (r_fw, ex, prec - 1, std::ios::fixed);
+              i_fmt = float_format (i_fw, ex, prec - 1, std::ios::fixed);
             }
-
-          r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
-          i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+          else
+            {
+              i_fw = 1 + prec + ex;
+              r_fw = i_fw + 1;
+              if (inf_or_nan && i_fw < 3)
+                {
+                  i_fw = 3;
+                  r_fw = 4;
+                }
+              r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+              i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+            }
         }
 
       if (print_big_e)
         {
           r_fmt.uppercase ();
           i_fmt.uppercase ();
         }
     }
@@ -1054,32 +1197,29 @@ set_format (const ComplexMatrix& cm, int
   Matrix r_m_abs = rp.abs ();
   double r_max_abs = pr_max_internal (r_m_abs);
   double r_min_abs = pr_min_internal (r_m_abs);
 
   Matrix i_m_abs = ip.abs ();
   double i_max_abs = pr_max_internal (i_m_abs);
   double i_min_abs = pr_min_internal (i_m_abs);
 
-  int r_x_max = r_max_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (r_max_abs) + 1.0));
-
-  int r_x_min = r_min_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (r_min_abs) + 1.0));
-
-  int i_x_max = i_max_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (i_max_abs) + 1.0));
-
-  int i_x_min = i_min_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (i_min_abs) + 1.0));
+  int r_x_max = r_max_abs == 0.0 ? 0 : (calc_digits (r_max_abs) + 1);
+
+  int r_x_min = r_min_abs == 0.0 ? 0 : (calc_digits (r_min_abs) + 1);
+
+  int i_x_max = i_max_abs == 0.0 ? 0 : (calc_digits (i_max_abs) + 1);
+
+  int i_x_min = i_min_abs == 0.0 ? 0 : (calc_digits (i_min_abs) + 1);
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 
+    : std::pow (10.0, maybe_mod3 (x_max - 1));
 
   set_complex_matrix_format (x_max, x_min, r_x_max, r_x_min, inf_or_nan,
                              int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
@@ -1162,30 +1302,37 @@ set_range_format (int x_max, int x_min, 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = ld + rd + 3;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
       && (print_e
-          || print_g
+          || print_eng || print_g
           || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
-          int exp_field = 4;
+          int ex = 4;
           if (x_max > 100 || x_min > 100)
-            exp_field++;
-
-          fw = 3 + prec + exp_field;
-
-          fmt = float_format (fw, prec - 1, std::ios::scientific);
+            ex++;
+
+          if (print_eng)
+            {
+              fw = 5 + prec + ex;
+              fmt = float_format (fw, ex, prec - 1, std::ios::fixed);
+            }
+          else
+            {
+              fw = 3 + prec + ex;
+              fmt = float_format (fw, prec - 1, std::ios::scientific);
+            }
         }
 
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && all_ints)
     fmt = float_format (fw, rd);
   else
@@ -1213,23 +1360,22 @@ set_format (const Range& r, int& fw, dou
       r_min = tmp;
     }
 
   bool all_ints = r.all_elements_are_ints ();
 
   double max_abs = r_max < 0.0 ? -r_max : r_max;
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
-  int x_max = max_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
-
-  int x_min = min_abs == 0.0
-    ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
-
-  scale = (x_max == 0 || all_ints) ? 1.0 : std::pow (10.0, x_max - 1);
+  int x_max = max_abs == 0.0 ? 0 : (calc_digits (max_abs) + 1);
+
+  int x_min = min_abs == 0.0 ? 0 : (calc_digits (min_abs) + 1);
+
+  scale = (x_max == 0 || all_ints) ? 1.0 
+    : std::pow (10.0, maybe_mod3 (x_max - 1));
 
   set_range_format (x_max, x_min, all_ints, fw);
 }
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
@@ -1386,16 +1532,18 @@ pr_any_float (const float_format *fmt, s
         }
       else if (xisnan (d))
         {
           if (fw > 0)
             os << std::setw (fw) << "NaN";
           else
             os << "NaN";
         }
+      else if (print_eng)
+        os << pr_engineering_float (*fmt, d);
       else
         os << pr_formatted_float (*fmt, d);
     }
   else
     os << d;
 }
 
 static inline void
@@ -3376,16 +3524,17 @@ init_format_state (void)
   rat_format = false;
   bank_format = false;
   hex_format = 0;
   bit_format = 0;
   compact_format = false;
   print_e = false;
   print_big_e = false;
   print_g = false;
+  print_eng = false;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
   Voutput_precision =  prec;
   Voutput_max_field_width = fw;
 }
@@ -3422,16 +3571,21 @@ set_format_style (int argc, const string
                   print_g = true;
                 }
               else if (arg == "G")
                 {
                   init_format_state ();
                   print_g = true;
                   print_big_e = true;
                 }
+              else if (arg == "eng")
+                {
+                  init_format_state ();
+                  print_eng = true;
+                }
               else
                 {
                   error ("format: unrecognized option `short %s'",
                          arg.c_str ());
                   return;
                 }
             }
           else
@@ -3462,16 +3616,21 @@ set_format_style (int argc, const string
                   print_g = true;
                 }
               else if (arg == "G")
                 {
                   init_format_state ();
                   print_g = true;
                   print_big_e = true;
                 }
+              else if (arg == "eng")
+                {
+                  init_format_state ();
+                  print_eng = true;
+                }
               else
                 {
                   error ("format: unrecognized option `long %s'",
                          arg.c_str ());
                   return;
                 }
             }
           else
@@ -3621,16 +3780,23 @@ ans =\n\
       9.8696\n\
       97.409\n\
       9488.5\n\
   9.0032e+07\n\
   8.1058e+15\n\
 @end group\n\
 @end example\n\
 \n\
+@item short eng\n\
+@itemx long eng\n\
+Identical to @samp{short e} or @samp{long e} but displays the value\n\
+using an engineering format, where the exponent is divisible by 3. For\n\
+example, with the @samp{short eng} format, @code{10 * pi} is displayed as\n\
+@code{31.4159e+00}.\n\
+\n\
 @item long G\n\
 @itemx short G\n\
 Identical to @samp{short g} or @samp{long g} but displays an uppercase\n\
 @samp{E} to indicate the exponent.\n\
 \n\
 @item free\n\
 @itemx none\n\
 Print output in free format, without trying to line up columns of\n\
