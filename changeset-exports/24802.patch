# HG changeset patch
# User SÃ©bastien Villemot <sebastien@debian.org>
# Date 1511554478 -3600
#      Fri Nov 24 21:14:38 2017 +0100
# Branch stable
# Node ID 7605e06a50d5edf0861a75d423804ef4b3c56ebb
# Parent  d3a79cb734d2ca32f2a4ca22fc4d368037cbbca0
tie octave_classdef::numel method to "numel" user override method (bug #46571)

* ov-classdef.cc, ov-classdef.h (octave_classdef::numel):
New method: calls "numel" user override method if present, otherwise fallback
to octave_base_value::numel.

* test/classdef/struct_wrapper.m, test/classdef/classdef.tst: New testcase.

* test/classdef/module.mk: Add test file to test infrastructure.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -937,16 +937,52 @@ octave_classdef::undef_subsasgn (const s
       return subsasgn (type, idx, rhs);
     }
   else
     return octave_base_value::undef_subsasgn (type, idx, rhs);
 
   return octave_value ();
 }
 
+octave_idx_type
+octave_classdef::numel (const octave_value_list& idx)
+{
+  octave_idx_type retval = -1;
+
+  cdef_class cls = object.get_class ();
+
+  if (! in_class_method (cls) && ! called_from_builtin ())
+    {
+      cdef_method meth = cls.find_method ("numel");
+
+      if (meth.ok ())
+        {
+          octave_value_list args (idx.length () + 1, octave_value ());
+
+          count++;
+          args(0) = octave_value (this);
+
+          for (octave_idx_type i = 0; i < idx.length (); i++)
+            args(i+1) = idx(i);
+
+          octave_value_list lv = meth.execute (args, 1, true, "numel");
+          if (lv.length () != 1 || ! lv(0).is_scalar_type ())
+            error ("@%s/numel: invalid return value", cls.get_name ().c_str ());
+
+          retval = lv(0).idx_type_value (true);
+
+          return retval;
+        }
+    }
+
+  retval = octave_base_value::numel (idx);
+
+  return retval;
+}
+
 void
 octave_classdef::print (std::ostream& os, bool)
 {
   if (! called_from_builtin ())
     {
       cdef_method meth = object.get_class ().find_method ("disp");
 
       if (meth.ok ())
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1454,16 +1454,18 @@ public:
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
 
+  octave_idx_type numel (const octave_value_list&);
+
   string_vector map_keys (void) const { return object.map_keys (); }
 
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
 private:
   cdef_object object;
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -70,8 +70,16 @@
 %!test
 %! obj = foo_method_changes_property_size (3);
 %! obj = obj.move_element_to_end (2);
 %! assert (obj.element, [1 3 2]);
 
 %!error <parse error> plist_t1
 %!assert (class (plist_t2), "plist_t2")
 %!assert (class (plist_t3), "plist_t3")
+
+%!test
+%! obj = struct_wrapper ();
+%! obj{'a'} = 1;
+%! assert (obj{'a'}, 1);
+%! obj{'bc'} = 2;
+%! assert (obj{'bc'}, 2);
+%! assert (obj{'a', 'bc'}, [ 1 2 ]);
diff --git a/test/classdef/module.mk b/test/classdef/module.mk
--- a/test/classdef/module.mk
+++ b/test/classdef/module.mk
@@ -1,10 +1,11 @@
 classdef_TEST_FILES = \
   test/classdef/foo_method_changes_property_size.m \
   test/classdef/foo_static_method_constant_property.m \
   test/classdef/foo_value_class.m \
   test/classdef/classdef.tst \
   test/classdef/plist_t1.m \
   test/classdef/plist_t2.m \
-  test/classdef/plist_t3.m
+  test/classdef/plist_t3.m \
+  test/classdef/struct_wrapper.m
 
 TEST_FILES += $(classdef_TEST_FILES)
diff --git a/test/classdef/struct_wrapper.m b/test/classdef/struct_wrapper.m
new file mode 100644
--- /dev/null
+++ b/test/classdef/struct_wrapper.m
@@ -0,0 +1,40 @@
+classdef struct_wrapper
+  properties
+    s;
+  end
+  methods
+    function o = assigner ()
+      if (nargin == 0)
+        o.s = struct ();
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+    function n = numel (o, varargin)
+      n = 1;
+    end
+    function varargout = subsref (o, p)
+      if (isequal (p(1).type, '{}'))
+        r = [];
+        for i = 1:numel (p(1).subs)
+          r = [r, getfield(o.s, p(1).subs{i})];
+        end
+        varargout = {r};
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+    function o = subsasgn (o, p, varargin)
+      if (isequal (p(1).type, '{}'))
+        for i = 1:numel (p(1).subs)
+          o.s = setfield (o.s, p(1).subs{i}, varargin{1}(i));
+        end
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+  end
+end
