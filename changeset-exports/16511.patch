# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1365861856 -7200
#      Sat Apr 13 16:04:16 2013 +0200
# Node ID eee1b78d031fe6f95ee1ce72625b269f0b46ee1a
# Parent  e22604d4bf8569481233399fbf1a2da75ff7ecf6
gui: fix backward search in find dialog

* find-dialog.cc(handle_backward_search_changed): new slot which toggles the
  text of the start from serach check box
* find-dialog.cc(constructor): connect checked state signal of backward search
  checkbox to new slot andle_backward_search_changed, new icon
* find-dialog.cc(search_next): fix cursor position for start from search/end
  and for backward search, show message box if no more matches are found

* find-dialog.h: new slot handle_backward_search_changed

diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -48,17 +48,17 @@
 #include <QtGui>
 #include <QIcon>
 #include "find-dialog.h"
 
 find_dialog::find_dialog (QsciScintilla* edit_area, QWidget *p)
   : QDialog (p)
 {
   setWindowTitle ("Find and Replace");
-  setWindowIcon (QIcon(":/actions/icons/logo.png"));
+  setWindowIcon (QIcon(":/actions/icons/search.png"));
 
   _search_label = new QLabel (tr ("Find &what:"));
   _search_line_edit = new QLineEdit;
   _search_label->setBuddy (_search_line_edit);
   _replace_label = new QLabel (tr ("Re&place with:"));
   _replace_line_edit = new QLineEdit;
   _replace_label->setBuddy (_replace_line_edit);
 
@@ -93,16 +93,18 @@ find_dialog::find_dialog (QsciScintilla*
   connect (_find_next_button,   SIGNAL (clicked ()),
            this,                SLOT (search_next ()));
   connect (_more_button,        SIGNAL (toggled (bool)),
            _extension,          SLOT (setVisible (bool)));
   connect (_replace_button,     SIGNAL (clicked ()),
            this,                SLOT (replace ()));
   connect (_replace_all_button, SIGNAL (clicked ()),
            this,                SLOT (replace_all ()));
+  connect (_backward_check_box, SIGNAL (stateChanged (int)),
+           this,                SLOT (handle_backward_search_changed (int)));
 
   QVBoxLayout *extension_layout = new QVBoxLayout ();
   extension_layout->setMargin (0);
   extension_layout->addWidget (_whole_words_check_box);
   extension_layout->addWidget (_backward_check_box);
   extension_layout->addWidget (_search_selection_check_box);
   _extension->setLayout (extension_layout);
 
@@ -123,18 +125,30 @@ find_dialog::find_dialog (QsciScintilla*
   QGridLayout *main_layout = new QGridLayout;
   main_layout->setSizeConstraint (QLayout::SetFixedSize);
   main_layout->addLayout (left_layout, 0, 0);
   main_layout->addWidget (_button_box, 0, 1);
   main_layout->addWidget (_extension, 1, 0, 1, 2);
   setLayout (main_layout);
 
   _extension->hide ();
+
+  _find_result_available = false;
+
 }
 
+// set text of "search from start" depending on backward search
+void
+find_dialog::handle_backward_search_changed (int backward)
+{
+  if (backward)
+    _from_start_check_box->setText (tr ("Search from end"));
+  else
+    _from_start_check_box->setText (tr ("Search from start"));
+}
 
 // initialize search text with selected text if this is in one single line
 void
 find_dialog::init_search_text ()
 {
   if (_edit_area->hasSelectedText ())
     {
       int lbeg, lend, cbeg, cend;
@@ -144,39 +158,61 @@ find_dialog::init_search_text ()
     }
 }
 
 
 void
 find_dialog::search_next ()
 {
   int line = -1, col = -1;
+  bool do_wrap = _wrap_check_box->isChecked ();
+
+  if (_find_result_available)
+    { // we found a match last time
+      if (_backward_check_box->isChecked ())
+        {  // backward: go back one position or we will find the same again
+          _edit_area->getCursorPosition (&line,&col);
+          if (col > 0)
+            _edit_area->setCursorPosition (line,--col);
+        }
+    }
 
   _find_result_available = false;
+
   if (_from_start_check_box->isChecked ())
     {
-      line = 1;
-      col  = 1;
+      line = 0;
+      col  = 0;
+      if (_backward_check_box->isChecked ())
+        do_wrap = true;
     }
 
   if (_edit_area)
     {
       _find_result_available = _edit_area->findFirst (_search_line_edit->text (),
                                                       _regex_check_box->isChecked (),
                                                       _case_check_box->isChecked (),
                                                       _whole_words_check_box->isChecked (),
-                                                      _wrap_check_box->isChecked (),
+                                                      do_wrap,
                                                       !_backward_check_box->isChecked (),
                                                       line,col,
                                                       true
 #ifdef HAVE_FINDFIRST_MODERN
                                                       , true
 #endif
                                                       );
     }
+  if (_find_result_available)
+    _from_start_check_box->setChecked (0);
+  else
+    {
+     	QMessageBox msg_box (QMessageBox::Information, tr ("Find Result"),
+                           tr ("No more matches found"), QMessageBox::Ok, this);
+      msg_box.exec ();
+    }
 }
 
 
 void
 find_dialog::replace ()
 {
   if (_edit_area)
     {
diff --git a/libgui/src/m-editor/find-dialog.h b/libgui/src/m-editor/find-dialog.h
--- a/libgui/src/m-editor/find-dialog.h
+++ b/libgui/src/m-editor/find-dialog.h
@@ -55,16 +55,17 @@ class QPushButton;
 class find_dialog : public QDialog
 {
   Q_OBJECT
   public:
   find_dialog (QsciScintilla* edit_area, QWidget *parent = 0);
   void init_search_text ();
 
 private slots:
+  void handle_backward_search_changed (int);
   void search_next ();
   void replace ();
   void replace_all ();
 
 private:
   QLabel            *_search_label;
   QLineEdit         *_search_line_edit;
   QLabel            *_replace_label;
