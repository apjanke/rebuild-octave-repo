# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1413018501 -7200
#      Sat Oct 11 11:08:21 2014 +0200
# Branch gui-release
# Node ID 62756ba9e4e527d08a76ba6563f6950603b851c2
# Parent  f3c4b48f3c531e4de02e8aeace1675623c49ca76
add actions for showing text formatting chars and guides in the editor

* file-editor.cc (toggle_preference): new function negating a settings entry;
  (show_line_numbers, show_white_space, show_eol_chars, show_indent_guides,
  show_ling_line): Slots of new actions calling toggel_prefernce in order
  to toggle the setting for showing the related chars or guides;
  (notice_settings): check or uncheck the actions depending on the settings;
  (construct): add new menu entries and actions into the view menu;
  (set_shortcuts): set the shortcuts for the new actions;
  (check_actions): only enable new menu entries when an editor tab exists

* file-editor.h: new slots, new function, new actions, and new menu

* shortcut_manager.cc (do_init_data): set the initial shortcuts for new actions

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -983,16 +983,51 @@ void file_editor::create_context_menu (Q
   menu->addAction (_paste_action);
   menu->addSeparator ();
   menu->addAction (_selectall_action);
   menu->addSeparator ();
   menu->addAction (_run_selection_action);
 }
 
 void
+file_editor::toggle_preference (const QString& preference, bool def)
+{
+  QSettings *settings = resource_manager::get_settings ();
+  bool old = settings->value (preference,def).toBool ();
+  settings->setValue (preference,!old);
+  notice_settings (settings);
+}
+
+void
+file_editor::show_line_numbers (bool)
+{
+  toggle_preference ("editor/showLineNumbers",true);
+}
+void
+file_editor::show_white_space (bool)
+{
+  toggle_preference ("editor/show_white_space",false);
+}
+void
+file_editor::show_eol_chars (bool)
+{
+  toggle_preference ("editor/show_eol_chars",false);
+}
+void
+file_editor::show_indent_guides (bool)
+{
+  toggle_preference ("editor/show_indent_guides",false);
+}
+void
+file_editor::show_long_line (bool)
+{
+  toggle_preference ("editor/long_line_marker",true);
+}
+
+void
 file_editor::zoom_in (bool)
 {
   emit fetab_zoom_in (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::zoom_out (bool)
 {
@@ -1060,16 +1095,28 @@ file_editor::notice_settings (const QSet
       _tab_widget->setElideMode (Qt::ElideLeft);
       _tab_widget->setStyleSheet (style_sheet);
     }
   else
     _tab_widget->setElideMode (Qt::ElideNone);
 
   _tab_widget->setUsesScrollButtons (true);
 
+  bool show_it;
+  show_it = settings->value ("editor/showLineNumbers",true).toBool ();
+  _show_linenum_action->setChecked (show_it);
+  show_it = settings->value ("editor/show_white_space",false).toBool ();
+  _show_whitespace_action->setChecked (show_it);
+  show_it = settings->value ("editor/show_eol_chars",false).toBool ();
+  _show_eol_action->setChecked (show_it);
+  show_it = settings->value ("editor/show_indent_guides",false).toBool ();
+  _show_indguide_action->setChecked (show_it);
+  show_it = settings->value ("editor/long_line_marker",true).toBool ();
+  _show_longline_action->setChecked (show_it);
+
   set_shortcuts ();
 
   // Relay signal to file editor tabs.
   emit fetab_settings_changed (settings);
 }
 
 void
 file_editor::request_preferences (bool)
@@ -1311,16 +1358,40 @@ file_editor::construct (void)
   _styles_preferences_action = add_action (editMenu,
           QIcon (":/actions/icons/configure.png"),
           tr ("&Styles Preferences..."), SLOT (request_styles_preferences (bool)));
 
   // view menu
 
   QMenu *view_menu = m_add_menu (_menu_bar, tr ("&View"));
 
+  _view_editor_menu = view_menu->addMenu (tr ("&Editor"));
+
+  _show_linenum_action = add_action (_view_editor_menu, QIcon (),
+          tr ("Show &Line Numbers"), SLOT (show_line_numbers (bool)));
+  _show_linenum_action->setCheckable (true);
+
+  _show_whitespace_action = add_action (_view_editor_menu, QIcon (),
+          tr ("Show &White Spaces"), SLOT (show_white_space (bool)));
+  _show_whitespace_action->setCheckable (true);
+
+  _show_eol_action = add_action (_view_editor_menu, QIcon (),
+          tr ("Show Line &Endings"), SLOT (show_eol_chars (bool)));
+  _show_eol_action->setCheckable (true);
+
+  _show_indguide_action = add_action (_view_editor_menu, QIcon (),
+          tr ("Show &Indentation Guides"), SLOT (show_indent_guides (bool)));
+  _show_indguide_action->setCheckable (true);
+
+  _show_longline_action = add_action (_view_editor_menu, QIcon (),
+          tr ("Show Long Line &Marker"), SLOT (show_long_line (bool)));
+  _show_longline_action->setCheckable (true);
+
+  view_menu->addSeparator ();
+
   _zoom_in_action = add_action (view_menu, QIcon (),
           tr ("Zoom &In"), SLOT (zoom_in (bool)));
   _zoom_out_action = add_action (view_menu, QIcon (),
           tr ("Zoom &Out"), SLOT (zoom_out (bool)));
   _zoom_normal_action = add_action (view_menu, QIcon (),
           tr ("&Normal Size"), SLOT (zoom_normal (bool)));
 
   _menu_bar->addMenu (view_menu);
@@ -1665,16 +1736,21 @@ file_editor::set_shortcuts ()
   shortcut_manager::set_shortcut (_toggle_bookmark_action, "editor_edit:toggle_bookmark");
   shortcut_manager::set_shortcut (_next_bookmark_action, "editor_edit:next_bookmark");
   shortcut_manager::set_shortcut (_previous_bookmark_action, "editor_edit:previous_bookmark");
   shortcut_manager::set_shortcut (_remove_bookmark_action, "editor_edit:remove_bookmark");
   shortcut_manager::set_shortcut (_preferences_action, "editor_edit:preferences");
   shortcut_manager::set_shortcut (_styles_preferences_action, "editor_edit:styles_preferences");
 
   // View menu
+  shortcut_manager::set_shortcut (_show_linenum_action, "editor_view:show_line_numbers");
+  shortcut_manager::set_shortcut (_show_whitespace_action, "editor_view:show_white_spaces");
+  shortcut_manager::set_shortcut (_show_eol_action, "editor_view:show_eol_chars");
+  shortcut_manager::set_shortcut (_show_indguide_action, "editor_view:show_ind_guides");
+  shortcut_manager::set_shortcut (_show_longline_action, "editor_view:show_long_line");
   shortcut_manager::set_shortcut (_zoom_in_action, "editor_view:zoom_in");
   shortcut_manager::set_shortcut (_zoom_out_action, "editor_view:zoom_out");
   shortcut_manager::set_shortcut (_zoom_normal_action, "editor_view:zoom_normal");
 
   // Debug menu
   shortcut_manager::set_shortcut (_toggle_breakpoint_action, "editor_debug:toggle_breakpoint");
   shortcut_manager::set_shortcut (_next_breakpoint_action, "editor_debug:next_breakpoint");
   shortcut_manager::set_shortcut (_previous_bookmark_action, "editor_debug:previous_breakpoint");
@@ -1703,16 +1779,17 @@ file_editor::check_actions ()
   _uncomment_selection_action->setEnabled (have_tabs);
   _indent_selection_action->setEnabled (have_tabs);
   _unindent_selection_action->setEnabled (have_tabs);
 
   _paste_action->setEnabled (have_tabs);
   _context_help_action->setEnabled (have_tabs);
   _context_doc_action->setEnabled (have_tabs);
 
+  _view_editor_menu->setEnabled (have_tabs);
   _zoom_in_action->setEnabled (have_tabs);
   _zoom_out_action->setEnabled (have_tabs);
   _zoom_normal_action->setEnabled (have_tabs);
 
   _find_action->setEnabled (have_tabs);
   _print_action->setEnabled (have_tabs);
   _run_action->setEnabled (have_tabs);
 
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -209,16 +209,21 @@ private slots:
   void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
   void request_styles_preferences (bool);
   void restore_create_file_setting ();
 
+  void show_line_numbers (bool);
+  void show_white_space (bool);
+  void show_eol_chars (bool);
+  void show_indent_guides (bool);
+  void show_long_line (bool);
   void zoom_in (bool);
   void zoom_out (bool);
   void zoom_normal (bool);
 
   void create_context_menu (QMenu *);
   void edit_status_update (bool, bool);
 
 protected:
@@ -230,16 +235,18 @@ private:
 
   bool is_editor_console_tabbed ();
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
+  void toggle_preference (const QString& preference, bool def);
+
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
 
   std::map<QString, QWidget *> editor_tab_map;
   QHash<QMenu*, QStringList> _hash_menu_text;
@@ -263,16 +270,21 @@ private:
 
   QAction *_copy_action;
   QAction *_cut_action;
   QAction *_paste_action;
   QAction *_selectall_action;
   QAction *_context_help_action;
   QAction *_context_doc_action;
 
+  QAction *_show_linenum_action;
+  QAction *_show_whitespace_action;
+  QAction *_show_eol_action;
+  QAction *_show_indguide_action;
+  QAction *_show_longline_action;
   QAction *_zoom_in_action;
   QAction *_zoom_out_action;
   QAction *_zoom_normal_action;
 
   QAction *_delete_start_word_action;
   QAction *_delete_end_word_action;
   QAction *_delete_start_line_action;
   QAction *_delete_end_line_action;
@@ -312,16 +324,17 @@ private:
   QAction *_next_breakpoint_action;
   QAction *_previous_breakpoint_action;
   QAction *_remove_all_breakpoints_action;
 
   QMenu *_edit_cmd_menu;
   QMenu *_edit_fmt_menu;
   QMenu *_edit_nav_menu;
   QMenu *_fileMenu;
+  QMenu *_view_editor_menu;
 
   QTabWidget *_tab_widget;
 
   int _marker_breakpoint;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -257,16 +257,21 @@ shortcut_manager::do_init_data ()
   init (tr ("Remove All Bookmark"), "editor_edit:remove_bookmark",
         QKeySequence ());
 
   init (tr ("Preferences"), "editor_edit:preferences", QKeySequence ());
   init (tr ("Styles Preferences"), "editor_edit:styles_preferences",
         QKeySequence ());
 
   // view
+  init (tr ("Show Line Numbers"), "editor_view:show_line_numbers", QKeySequence ());
+  init (tr ("Show White Spaces"), "editor_view:show_white_spaces", QKeySequence ());
+  init (tr ("Show Line Endings"), "editor_view:show_eol_chars", QKeySequence ());
+  init (tr ("Show Indentation Guides"), "editor_view:show_ind_guides", QKeySequence ());
+  init (tr ("Show Long Line Marker"), "editor_view:show_long_line", QKeySequence ());
   init (tr ("Zoom In"), "editor_view:zoom_in", QKeySequence::ZoomIn);
   init (tr ("Zoom Out"), "editor_view:zoom_out", QKeySequence::ZoomOut);
 #if defined (Q_OS_MAC)
   init (tr ("Zoom Normal"), "editor_view:zoom_normal",
         QKeySequence (ctrl + Qt::Key_Underscore));
 #else
   init (tr ("Zoom Normal"), "editor_view:zoom_normal",
         QKeySequence (ctrl_alt + Qt::Key_0));
