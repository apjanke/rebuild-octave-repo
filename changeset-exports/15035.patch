# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1343418251 14400
#      Fri Jul 27 15:44:11 2012 -0400
# Branch classdef
# Node ID a820a990968ece1face5a237ef55b8b879b47fdc
# Parent  1116864ee270defec328c89dba4f87cc3c566ccf
new tree_funcall class

* pt-funcall.h, pt-funcall.cc: New files.  Define tree_funcall class.
* pt-all.h: Also include pt-funcall.h.
* pt-bp.h, pt-bp.cc (tree_breakpoint::visit_funcall): New function.
* pt-check.h, pt-check.cc (tree_checker::visit_funcall): New function.
* pt-eval.h, pt-eval.cc (tree_evaluator::visit_funcall): New function.
* pt-pr-code.h, pt-pr-code.cc (tree_print_code::visit_funcall): New
function.
* pt-walk.h (tree_walker::visit_funcall): New pure virtual function.
* src/Makefile.am (PT_INCLUDES): Add pt-funcall.h to the list.*
(PT_SRC): Add pt-funcall.cc to the list.

diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -213,16 +213,17 @@ PT_INCLUDES = \
   pt-cmd.h \
   pt-colon.h \
   pt-const.h \
   pt-decl.h \
   pt-eval.h \
   pt-except.h \
   pt-exp.h \
   pt-fcn-handle.h \
+  pt-funcall.h \
   pt-id.h \
   pt-idx.h \
   pt-jump.h \
   pt-loop.h \
   pt-mat.h \
   pt-misc.h \
   pt-pr-code.h \
   pt-select.h \
@@ -392,16 +393,17 @@ PT_SRC = \
   pt-cmd.cc \
   pt-colon.cc \
   pt-const.cc \
   pt-decl.cc \
   pt-eval.cc \
   pt-except.cc \
   pt-exp.cc \
   pt-fcn-handle.cc \
+  pt-funcall.cc \
   pt-id.cc \
   pt-idx.cc \
   pt-jump.cc \
   pt-loop.cc \
   pt-mat.cc \
   pt-misc.cc \
   pt-pr-code.cc \
   pt-select.cc \
diff --git a/src/pt-all.h b/src/pt-all.h
--- a/src/pt-all.h
+++ b/src/pt-all.h
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include "pt-check.h"
 #include "pt-cmd.h"
 #include "pt-colon.h"
 #include "pt-const.h"
 #include "pt-decl.h"
 #include "pt-except.h"
 #include "pt-exp.h"
 #include "pt-fcn-handle.h"
+#include "pt-funcall.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-jump.h"
 #include "pt-loop.h"
 #include "pt-mat.h"
 #include "pt-cell.h"
 #include "pt-misc.h"
 #include "pt-pr-code.h"
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -294,16 +294,22 @@ tree_breakpoint::visit_constant (tree_co
 
 void
 tree_breakpoint::visit_fcn_handle (tree_fcn_handle&)
 {
   panic_impossible ();
 }
 
 void
+tree_breakpoint::visit_funcall (tree_funcall&)
+{
+  panic_impossible ();
+}
+
+void
 tree_breakpoint::visit_parameter_list (tree_parameter_list&)
 {
   panic_impossible ();
 }
 
 void
 tree_breakpoint::visit_postfix_expression (tree_postfix_expression&)
 {
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -101,16 +101,18 @@ tree_breakpoint : public tree_walker
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
   void visit_constant (tree_constant&);
 
   void visit_fcn_handle (tree_fcn_handle&);
 
+  void visit_funcall (tree_funcall&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
   void visit_return_command (tree_return_command&);
 
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -352,16 +352,21 @@ tree_checker::visit_constant (tree_const
 }
 
 void
 tree_checker::visit_fcn_handle (tree_fcn_handle& /* fh */)
 {
 }
 
 void
+tree_checker::visit_funcall (tree_funcall& /* fc */)
+{
+}
+
+void
 tree_checker::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_decl_elt *elt = *p++;
 
diff --git a/src/pt-check.h b/src/pt-check.h
--- a/src/pt-check.h
+++ b/src/pt-check.h
@@ -86,16 +86,18 @@ public:
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
   void visit_constant (tree_constant&);
 
   void visit_fcn_handle (tree_fcn_handle&);
 
+  void visit_funcall (tree_funcall&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
   void visit_return_command (tree_return_command&);
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -628,16 +628,22 @@ tree_evaluator::visit_constant (tree_con
 
 void
 tree_evaluator::visit_fcn_handle (tree_fcn_handle&)
 {
   panic_impossible ();
 }
 
 void
+tree_evaluator::visit_funcall (tree_funcall&)
+{
+  panic_impossible ();
+}
+
+void
 tree_evaluator::visit_parameter_list (tree_parameter_list&)
 {
   panic_impossible ();
 }
 
 void
 tree_evaluator::visit_postfix_expression (tree_postfix_expression&)
 {
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -97,16 +97,18 @@ public:
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
   void visit_fcn_handle (tree_fcn_handle&);
 
+  void visit_funcall (tree_funcall&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
   void visit_return_command (tree_return_command&);
 
diff --git a/src/pt-funcall.cc b/src/pt-funcall.cc
new file mode 100644
--- /dev/null
+++ b/src/pt-funcall.cc
@@ -0,0 +1,83 @@
+/*
+
+Copyright (C) 2012 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "ov-fcn.h"
+#include "pt-funcall.h"
+#include "pt-walk.h"
+
+// Function call objects.
+
+void
+tree_funcall::print (std::ostream& os, bool pr_as_read_syntax,
+                     bool pr_orig_text)
+{
+  print_raw (os, pr_as_read_syntax, pr_orig_text);
+}
+
+void
+tree_funcall::print_raw (std::ostream& os, bool pr_as_read_syntax,
+                         bool pr_orig_text)
+{
+  if (pr_orig_text)
+    {
+      os << original_text ();
+    }
+  else
+    {
+      octave_function *fp = fcn.function_value ();
+      std::string nm = fp ? fp->name () : std::string ("<invalid-function>");
+
+      os << nm << " (";
+
+      octave_idx_type len = args.length ();
+      for (octave_idx_type i = 0; i < len; i++)
+        {
+          args(i).print_raw (os, pr_as_read_syntax);
+
+          if (i < len - 1)
+            os << ", ";
+        }
+
+      os << ")";
+    }
+}
+
+tree_funcall *
+tree_funcall::dup (symbol_table::scope_id,
+                  symbol_table::context_id context) const
+{
+  tree_funcall *new_fc = new tree_funcall (fcn, args, line (), column ());
+
+  new_fc->copy_base (*new_fc);
+
+  return new_fc;
+}
+
+void
+tree_funcall::accept (tree_walker& tw)
+{
+  tw.visit_funcall (*this);
+}
diff --git a/src/pt-funcall.h b/src/pt-funcall.h
new file mode 100644
--- /dev/null
+++ b/src/pt-funcall.h
@@ -0,0 +1,101 @@
+/*
+
+Copyright (C) 2012 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_tree_funcall_h)
+#define octave_tree_funcall_h 1
+
+#include "ov.h"
+#include "oct-obj.h"
+#include "parse.h"
+#include "pt-exp.h"
+
+// Function call.  This class only represents function calls that have
+// known functions (most useful for calls to built-in functions that
+// are generated by the parser) and fixed argument lists, known at
+// compile time.
+
+class
+tree_funcall : public tree_expression
+{
+public:
+
+  tree_funcall (const octave_value& f, const octave_value_list& a,
+                int l = -1, int c = -1)
+    : tree_expression (l, c), fcn (f), args (a)
+  {
+    if (! fcn.is_function ())
+      error ("tree_funcall: invalid function");
+  }
+
+  ~tree_funcall (void) { }
+
+  bool has_magic_end (void) const { return false; }
+
+  void print (std::ostream& os, bool pr_as_read_syntax = false,
+              bool pr_orig_txt = true);
+
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false,
+                  bool pr_orig_txt = true);
+
+  tree_funcall *dup (symbol_table::scope_id,
+                     symbol_table::context_id context) const;
+
+  octave_value rvalue1 (int nargout)
+  {
+    octave_value retval;
+
+    const octave_value_list tmp = rvalue (nargout);
+
+    if (! tmp.empty ())
+      retval = tmp(0);
+
+    return retval;
+  }
+
+  octave_value_list rvalue (int nargout)
+  {
+    return feval (fcn.function_value (), args, nargout);
+  }
+
+  octave_value function (void) const { return fcn; }
+
+  octave_value_list arguments (void) const { return args; }
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // Function to call.  Error if not a valid function at time of
+  // construction.
+  octave_value fcn;
+
+  // Argument list.
+  octave_value_list args;
+
+  // No copying!
+
+  tree_funcall (const tree_funcall&);
+
+  tree_funcall& operator = (const tree_funcall&);
+};
+
+#endif
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -744,16 +744,28 @@ tree_print_code::visit_fcn_handle (tree_
   print_parens (fh, "(");
 
   fh.print_raw (os, true, print_original_text);
 
   print_parens (fh, ")");
 }
 
 void
+tree_print_code::visit_funcall (tree_funcall& fc)
+{
+  indent ();
+
+  print_parens (fc, "(");
+
+  fc.print_raw (os, true, print_original_text);
+
+  print_parens (fc, ")");
+}
+
+void
 tree_print_code::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_decl_elt *elt = *p++;
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -104,16 +104,18 @@ public:
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
   void visit_fcn_handle (tree_fcn_handle&);
 
+  void visit_funcall (tree_funcall&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
   void visit_return_command (tree_return_command&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -47,16 +47,17 @@ class tree_switch_case_list;
 class tree_switch_command;
 class tree_index_expression;
 class tree_matrix;
 class tree_cell;
 class tree_multi_assignment;
 class tree_no_op_command;
 class tree_constant;
 class tree_fcn_handle;
+class tree_funcall;
 class tree_parameter_list;
 class tree_postfix_expression;
 class tree_prefix_expression;
 class tree_return_command;
 class tree_return_list;
 class tree_simple_assignment;
 class tree_statement;
 class tree_statement_list;
@@ -153,16 +154,19 @@ public:
 
   virtual void
   visit_constant (tree_constant&) = 0;
 
   virtual void
   visit_fcn_handle (tree_fcn_handle&) = 0;
 
   virtual void
+  visit_funcall (tree_funcall&) = 0;
+
+  virtual void
   visit_parameter_list (tree_parameter_list&) = 0;
 
   virtual void
   visit_postfix_expression (tree_postfix_expression&) = 0;
 
   virtual void
   visit_prefix_expression (tree_prefix_expression&) = 0;
 
