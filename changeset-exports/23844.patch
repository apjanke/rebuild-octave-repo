# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502230950 14400
#      Tue Aug 08 18:22:30 2017 -0400
# Node ID ca4535a6ee9f2f56f9717d0caa759505edb5346d
# Parent  a52eb3f210af219375759bb345fc12bd2bac1432
* pt-eval.cc: Style fixes.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1334,23 +1334,23 @@ namespace octave
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
     // If we are indexing an object or looking at something like
     //
     //   classname.static_function (args, ...);
     //
-    // then we'll just build a complete index list for one big subsref call.
-    // If the expression we are indexing is a classname then base_expr_val will
-    // be an octave_classdef_meta object.
-    // If we have files in a +packagename folder, they will also be an
+    // then we'll just build a complete index list for one big subsref
+    // call.  If the expression we are indexing is a classname then
+    // base_expr_val will be an octave_classdef_meta object.  If we have
+    // files in a +packagename folder, they will also be an
     // octave_classdef_meta object, but we don't want to index them.
 
-    bool indexing_object = (   base_expr_val.isobject ()
+    bool indexing_object = (base_expr_val.isobject ()
                             || base_expr_val.isjava ()
                             || (base_expr_val.is_classdef_meta ()
                                 && ! base_expr_val.is_package ()));
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
@@ -1439,17 +1439,17 @@ namespace octave
 
 
     // If ! idx.empty () that means we still have stuff to index otherwise
     // they would have been dealt with and idx would have been emptied.
     if (! idx.empty ())
       {
         // This is for +package and other classdef_meta objects
         if (! base_expr_val.is_function ()
-              || base_expr_val.is_classdef_meta ())
+            || base_expr_val.is_classdef_meta ())
           {
             try
               {
                 retval = base_expr_val.subsref (type.substr (beg, n-beg),
                                                 idx, nargout);
               }
             catch (octave::index_exception& e)
               {
