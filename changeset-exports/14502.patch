# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1332915445 25200
#      Tue Mar 27 23:17:25 2012 -0700
# Node ID 30597f98f80a5fac4293d3e66212c87ba9f8e961
# Parent  60e5cf354d8008432747cb02ec4c6ec15ba1799d
onenormest.m: Update to modern coding standards to fix input processing (bug #36016)

* onenormest.m: Use nargin instead of size (varargin) to determine number of inputs.

diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -90,49 +90,49 @@
 ##  SUCH DAMAGE.
 
 ## Author: Jason Riedy <ejr@cs.berkeley.edu>
 ## Keywords: linear-algebra norm estimation
 ## Version: 0.2
 
 function [est, v, w, iter] = onenormest (varargin)
 
-  if (size (varargin, 2) < 1 || size (varargin, 2) > 4)
+  if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   default_t = 5;
   itmax = 10;
 
   if (ismatrix (varargin{1}))
-    n = size (varargin{1}, 1);
-    if n != size (varargin{1}, 2),
+    [n, nc] = size (varargin{1});
+    if (n != nc)
       error ("onenormest: matrix must be square");
     endif
     apply = @(x) varargin{1} * x;
     apply_t = @(x) varargin{1}' * x;
-    if (size (varargin) > 1)
+    if (nargin > 1)
       t = varargin{2};
     else
       t = min (n, default_t);
     endif
-    issing = isa (varargin {1}, "single");
+    issing = isa (varargin{1}, "single");
   else
-    if (size (varargin, 2) < 3)
-      print_usage();
+    if (nargin < 3)
+      print_usage ();
     endif
-    n = varargin{3};
     apply = varargin{1};
     apply_t = varargin{2};
-    if (size (varargin) > 3)
+    n = varargin{3};
+    if (nargin > 3)
       t = varargin{4};
     else
       t = default_t;
     endif
-    issing = isa (varargin {3}, "single");
+    issing = isa (n, "single");
   endif
 
   ## Initial test vectors X.
   X = rand (n, t);
   X = X ./ (ones (n,1) * sum (abs (X), 1));
 
   ## Track if a vertex has been visited.
   been_there = zeros (n, 1);
@@ -170,17 +170,17 @@ function [est, v, w, iter] = onenormest 
       ## Gone too far.  Stop.
       break;
     endif
 
     S = sign (Y);
 
     ## Test if any of S are approximately parallel to previous S
     ## vectors or current S vectors.  If everything is parallel,
-    ## stop. Otherwise, replace any parallel vectors with
+    ## stop.  Otherwise, replace any parallel vectors with
     ## rand{-1,+1}.
     partest = any (abs (S_old' * S - n) < 4*eps*n);
     if (all (partest))
       ## All the current vectors are parallel to old vectors.
       ## We've hit a cycle, so stop.
       break;
     endif
     if (any (partest))
@@ -196,51 +196,51 @@ function [est, v, w, iter] = onenormest 
     if (any (partest))
       numpar = sum (partest);
       replacements = 2*(rand (n,numpar) < 0.5) - 1;
       S(:,partest) = replacements;
     endif
 
     Z = feval (apply_t, S);
 
-    ## Now find the largest non-previously-visted index per
-    ## vector.
+    ## Now find the largest non-previously-visted index per vector.
     h = max (abs (Z),2);
     [mh, mhi] = max (h);
     if (iter >= 2 && mhi == ind_best)
       ## Hit a cycle, stop.
       break;
     endif
     [h, ind] = sort (h, 'descend');
     if (t > 1)
       firstind = ind(1:t);
       if (all (been_there(firstind)))
         ## Visited all these before, so stop.
         break;
       endif
-      ind = ind (!been_there (ind));
+      ind = ind(! been_there(ind));
       if (length (ind) < t)
         ## There aren't enough new vectors, so we're practically
-        ## in a cycle. Stop.
+        ## in a cycle.  Stop.
         break;
       endif
     endif
 
     ## Visit the new indices.
     X = zeros (n, t);
     for zz = 1 : t
       X(ind(zz),zz) = 1;
     endfor
-    been_there (ind (1 : t)) = 1;
+    been_there(ind(1 : t)) = 1;
   endfor
 
-  ## The estimate est and vector w are set in the loop above. The
-  ## vector v selects the ind_best column of A.
+  ## The estimate est and vector w are set in the loop above.
+  ## The vector v selects the ind_best column of A.
   v = zeros (n, 1);
   v(ind_best) = 1;
+
 endfunction
 
 
 %!demo
 %! N = 100;
 %! A = randn (N) + eye (N);
 %! [L,U,P] = lu (A);
 %! nm1inv = onenormest (@(x) U\(L\(P*x)), @(x) P'*(L'\(U'\x)), N, 30)
