# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1507652484 -7200
#      Tue Oct 10 18:21:24 2017 +0200
# Node ID 78ff6ba5cbb1bf57b745afd640464872900fe3ef
# Parent  8f04d48bb1a01e4949a9a1b6a2332ad96bb9465d
Add basic support of "facealpha" for surfaces and patches in OpenGL (bug #39535)

* gl-render.cc (draw_surface, draw_patch): Pass alpha value of faces to OpenGL.
* doc/interpreter/genpropdoc.m: Add documentation for surface and patch facealpha.
* scripts/plot/draw/surface.m: Add cross-reference to Surface Properties.
* scripts/plot/draw/patch.m: Add cross-reference to Patch Properties.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -1164,18 +1164,27 @@ diffuse reflex) and 1.0 (full diffuse re
         s.doc = "When set to a value other than @qcode{\"none\"}, the edges \
 of the object are drawn with light and shadow effects.  Supported values are \
 @qcode{\"none\"} (no lighting effects), @qcode{\"flat\"} (facetted look) and \
 @qcode{\"gouraud\"} (linear interpolation of the lighting effects between \
 the vertices). @qcode{\"phong\"} is deprecated and has the same effect as \
 @qcode{\"gouraud\"}.";
 
       case "facealpha"
-        s.doc = sprintf (doc_notimpl, "Transparency");
-        s.valid = valid_scalmat;
+        s.doc = "Transparency level of the faces of the surface object.  Only \
+double values are supported at present where a value of 0 means complete \
+transparency and a value of 1 means solid faces without transparency.  Setting \
+the property to @qcode{\"flat\"}, @qcode{\"interp\"} or @qcode{\"texturemap\"} \
+causes the faces to not being rendered.  Additionally, the faces are not sorted \
+from back to front which might lead to unexpected results when rendering \
+layered transparent faces.";
+        s.valid = packopt ({"scalar", ...
+                            "@qcode{\"flat\"}", ...
+                            "@qcode{\"interp\"}", ...
+                            "@qcode{\"texturemap\"}"});
 
       case "facecolor"
       case "facelighting"
         s.doc = "When set to a value other than @qcode{\"none\"}, the faces \
 of the object are drawn with light and shadow effects.  Supported values are \
 @qcode{\"none\"} (no lighting effects), @qcode{\"flat\"} (facetted look) and \
 @qcode{\"gouraud\"} (linear interpolation of the lighting effects between \
 the vertices). @qcode{\"phong\"} is deprecated and has the same effect as \
@@ -1287,18 +1296,26 @@ diffuse reflex) and 1.0 (full diffuse re
         s.doc = "When set to a value other than @qcode{\"none\"}, the edges \
 of the object are drawn with light and shadow effects.  Supported values are \
 @qcode{\"none\"} (no lighting effects), @qcode{\"flat\"} (facetted look) and \
 @qcode{\"gouraud\"} (linear interpolation of the lighting effects between \
 the vertices). @qcode{\"phong\"} is deprecated and has the same effect as \
 @qcode{\"gouraud\"}.";
 
       case "facealpha"
-        s.doc = sprintf (doc_notimpl, "Transparency");
-        s.valid = valid_scalmat;
+        s.doc = "Transparency level of the faces of the patch object.  Only \
+double values are supported at present where a value of 0 means complete \
+transparency and a value of 1 means solid faces without transparency.  Setting \
+the property to @qcode{\"flat\"} or @qcode{\"interp\"} causes the faces to not \
+being rendered.  Additionally, the faces are not sorted from back to front \
+which might lead to unexpected results when rendering layered transparent \
+faces.";
+        s.valid = packopt ({"scalar", ...
+                            "@qcode{\"flat\"}", ...
+                            "@qcode{\"interp\"}"});
 
       case "facecolor"
         ## Don't provide a default value, and mark colorspec with
         ## braces, this forces the default rgb triplet to be displayed
         s.valid = packopt ({markdef(valid_color), ...
                             "@qcode{\"none\"}", ...
                             "@qcode{\"flat\"}", ...
                             "@qcode{\"interp\"}"});
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -483,17 +483,17 @@ namespace octave
       // the first vertex must be identified in the draw_patch routine.
 
       if (color_mode == INTERP || (color_mode == FLAT && ! is_filled ()))
         {
           Matrix col = v->color;
 
           if (col.numel () == 3)
             {
-              glColor3dv (col.data ());
+              glColor4d (col(0), col(1), col(2), v->alpha);
               if (light_mode > 0)
                 {
                   float buf[4] = { 0, 0, 0, 1 };
 
                   for (int k = 0; k < 3; k++)
                     buf[k] = (v->ambient * col(k));
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, buf);
 
@@ -2318,16 +2318,17 @@ namespace octave
     int ea_mode = (props.edgealpha_is_double () ? 0 :
                    (props.edgealpha_is ("flat") ? 1 : 2));
     int bfl_mode = (props.backfacelighting_is ("lit") ? 0 :
                     (props.backfacelighting_is ("reverselit") ? 1 : 2));
 
     Matrix fcolor = (fc_mode == TEXTURE ? Matrix (1, 3, 1.0)
                                         : props.get_facecolor_rgb ());
     Matrix ecolor = props.get_edgecolor_rgb ();
+    double fa = 1.0;
 
     float as = props.get_ambientstrength ();
     float ds = props.get_diffusestrength ();
     float ss = props.get_specularstrength ();
     float se = props.get_specularexponent () * 5; // to fit Matlab
     float scr = props.get_specularcolorreflectance ();
     float cb[4] = { 0.0, 0.0, 0.0, 1.0 };
 
@@ -2369,21 +2370,22 @@ namespace octave
 
     // FIXME: good candidate for caching,
     //        transferring pixel data to OpenGL is time consuming.
     if (fc_mode == TEXTURE)
       tex = opengl_texture::create (props.get_color_data ());
 
     if (! props.facecolor_is ("none"))
       {
-        if (props.get_facealpha_double () == 1)
+        if (fa_mode == 0)
           {
+            fa = props.get_facealpha_double ();
             if (fc_mode == UNIFORM || fc_mode == TEXTURE)
               {
-                glColor3dv (fcolor.data ());
+                glColor4d (fcolor(1), fcolor(2), fcolor(3), fa);
                 if (fl_mode > 0)
                   {
                     for (int i = 0; i < 3; i++)
                       cb[i] = as * fcolor(i);
                     glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ds * fcolor(i);
@@ -2444,17 +2446,18 @@ namespace octave
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i-1) / (zc-1),
                                      double (j-1) / (zr-1));
                     else if (fc_mode > 0)
                       {
                         // FIXME: is there a smarter way to do this?
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j-1, i-1, k);
-                        glColor3fv (cb);
+                        cb[3] = fa;
+                        glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                             for (int k = 0; k < 3; k++)
@@ -2473,17 +2476,18 @@ namespace octave
 
                     // Vertex 2
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j-1, i, k);
-                        glColor3fv (cb);
+                        cb[3] = fa;
+                        glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                             for (int k = 0; k < 3; k++)
@@ -2503,17 +2507,18 @@ namespace octave
 
                     // Vertex 3
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j, i, k);
-                        glColor3fv (cb);
+                        cb[3] = fa;
+                        glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                             for (int k = 0; k < 3; k++)
@@ -2532,17 +2537,18 @@ namespace octave
 
                     // Vertex 4
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
                         for (int k = 0; k < 3; k++)
                           cb[k] = c(j, i-1, k);
-                        glColor3fv (cb);
+                        cb[3] = fa;
+                        glColor4fv (cb);
 
                         if (fl_mode > 0)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] *= as;
                             glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                             for (int k = 0; k < 3; k++)
@@ -2567,17 +2573,17 @@ namespace octave
             if (fc_mode == TEXTURE)
               glDisable (GL_TEXTURE_2D);
 
             if ((fl_mode > 0) && (num_lights > 0))
               glDisable (GL_LIGHTING);
           }
         else
           {
-            // FIXME: implement transparency
+            // FIXME: implement flat, interp and texturemap transparency
           }
       }
 
     if (! props.edgecolor_is ("none") && ! props.linestyle_is ("none"))
       {
         if (props.get_edgealpha_double () == 1)
           {
             if (ec_mode == UNIFORM)
@@ -2911,16 +2917,17 @@ namespace octave
         return;
       }
 
     const Matrix f = props.get_faces ().matrix_value ();
     const Matrix v = xform.scale (props.get_vertices ().matrix_value ());
     Matrix c;
     const Matrix n = props.get_vertexnormals ().matrix_value ();
     Matrix a;
+    double fa = 1.0;
 
     int nv = v.rows ();
     int nf = f.rows ();
     int fcmax = f.columns ();
 
     bool has_z = (v.columns () > 2);
     bool has_facecolor = false;
     bool has_facealpha = false;
@@ -3005,16 +3012,19 @@ namespace octave
 
     if (fa_mode > 0 || ea_mode > 0)
       {
         // FIXME: retrieve alpha data from patch object
         //a = props.get_alpha_data ();
         has_facealpha = ((a.numel () > 0) && (a.rows () == f.rows ()));
       }
 
+    if (fa_mode == 0)
+      fa = props.get_facealpha_double ();
+
     octave_idx_type fr = f.rows ();
     std::vector<vertex_data> vdata (f.numel ());
 
     for (int i = 0; i < nf; i++)
       for (int j = 0; j < count_f(i); j++)
         {
           int idx = int (f(i,j) - 1);
 
@@ -3041,38 +3051,40 @@ namespace octave
           if (c.numel () > 0)
             {
               cc.resize (1, 3);
               if (has_facecolor)
                 cc(0) = c(i,0), cc(1) = c(i,1), cc(2) = c(i,2);
               else
                 cc(0) = c(idx,0), cc(1) = c(idx,1), cc(2) = c(idx,2);
             }
-          if (a.numel () > 0)
+          if (fa_mode == 0)
+            aa = fa;
+          else if (a.numel () > 0)
             {
               if (has_facealpha)
                 aa = a(i);
               else
                 aa = a(idx);
             }
 
           vdata[i+j*fr] = vertex_data (vv, cc, nn, aa, as, ds, ss, se, scr);
         }
 
     if (fl_mode > 0 || el_mode > 0)
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
 
     if (! props.facecolor_is ("none"))
       {
         // FIXME: adapt to double-radio property
-        if (props.get_facealpha_double () == 1)
+        if (fa_mode == 0)
           {
             if (fc_mode == UNIFORM)
               {
-                glColor3dv (fcolor.data ());
+                glColor4d (fcolor(0), fcolor(1), fcolor(2), fa);
                 if (fl_mode > 0)
                   {
                     float cb[4] = { 0, 0, 0, 1 };
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = as * fcolor(i);
                     glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -3117,17 +3129,17 @@ namespace octave
 
                     if (fc_mode == FLAT)
                       {
                         // For "flat" shading, use color of 1st vertex.
                         Matrix col = vv->color;
 
                         if (col.numel () == 3)
                           {
-                            glColor3dv (col.data ());
+                            glColor4d (col(0), col(1), col(2), fa);
                             if (fl_mode > 0)
                               {
                                 float cb[4] = { 0, 0, 0, 1 };
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = (vv->ambient * col(k));
                                 glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
@@ -3150,17 +3162,17 @@ namespace octave
                 tess.end_polygon ();
               }
 
             if ((fl_mode > 0) && (num_lights > 0) && has_normals)
               glDisable (GL_LIGHTING);
           }
         else
           {
-            // FIXME: implement transparency
+            // FIXME: implement flat and interp transparency
           }
       }
 
     if (! props.edgecolor_is ("none") && ! props.linestyle_is ("none"))
       {
         // FIXME: adapt to double-radio property
         if (props.get_edgealpha_double () == 1)
           {
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -60,19 +60,20 @@
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ##
 ## Implementation Note: Patches are highly configurable objects.  To truly
-## customize them requires setting patch properties directly.  Useful patch
-## properties are: @qcode{"cdata"}, @qcode{"edgecolor"},
-## @qcode{"facecolor"}, @qcode{"faces"}, @qcode{"facevertexcdata"}.
+## customize them requires setting patch properties directly 
+## (@pxref{Patch Properties}).  Useful patch properties include: @qcode{"cdata"},
+## @qcode{"edgecolor"}, @qcode{"facecolor"}, @qcode{"faces"},
+## @qcode{"facevertexcdata"}.
 ## @seealso{fill, get, set}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = patch (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("patch", varargin{:});
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -30,17 +30,18 @@
 ##
 ## If @var{x} and @var{y} are vectors, then a typical vertex is
 ## (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z} correspond
 ## to different @var{x} values and rows of @var{z} correspond to different
 ## @var{y} values.  If only a single input @var{z} is given then @var{x} is
 ## taken to be @code{1:rows (@var{z})} and @var{y} is
 ## @code{1:columns (@var{z})}.
 ##
-## Any property/value input pairs are assigned to the surface object.
+## Any property/value input pairs are assigned to the surface object
+## (@pxref{Surface Properties}).
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## surface object.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
