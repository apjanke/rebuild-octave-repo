# HG changeset patch
# User jwe
# Date 830867490 0
#      Tue Apr 30 12:31:30 1996 +0000
# Node ID 356f70c8fcbdcb2b0a75954b55a0c28f251f5809
# Parent  2b67abb63030db7811a207f357751c3c62e1f116
[project @ 1996-04-30 12:31:30 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -164,30 +164,29 @@ Array<T>::fortran_vec (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (*rep);
     }
   return rep->data;
 }
-
 template <class T>
 T
-Array<T>::range_error (void) const
+Array<T>::range_error (const char *fcn, int n) const
 {
-  (*current_liboctave_error_handler) ("range error");
+  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
   return T ();
 }
 
 template <class T>
 T&
-Array<T>::range_error (void)
+Array<T>::range_error (const char *fcn, int n)
 {
-  (*current_liboctave_error_handler) ("range error");
+  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
   static T foo;
   return foo;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -26,18 +26,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cassert>
 #include <cstdlib>
 
-#include "lo-error.h"
-
 class idx_vector;
 
 // For now, define this here if it is not already defined.  Not doing
 // this can result in bugs that are very hard to find.
 
 #ifndef HEAVYWEIGHT_INDEXING
 #define HEAVYWEIGHT_INDEXING 1
 #endif
@@ -171,44 +169,40 @@ public:
 
   // XXX FIXME XXX -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
   T& Array<T>::checkelem (int n)
     {
       if (n < 0 || n >= rep->length ())
-	{
-	  (*current_liboctave_error_handler) ("range error");
-	  static T foo;
-	  return foo;
-	}
+	return range_error ("T& Array<T>::checkelem", n);
       else
 	{
 	  make_unique ();
 	  return xelem (n);
 	}
     }
 
 #if defined (BOUNDS_CHECKING)
   T& elem (int n) { return checkelem (n); }
 #else
   T& elem (int n)
     {
       make_unique ();
-      return xelem ();
+      return xelem (n);
     }
 #endif
 
   T& operator () (int n) { return elem (n); }
 
   T Array<T>::checkelem (int n) const
     {
       if (n < 0 || n >= rep->length ())
-	return range_error ();
+	return range_error ("T Array<T>::checkelem", n);
       else
 	return xelem (n);
     }
 
 #if defined (BOUNDS_CHECKING)
   T Array<T>::elem (int n) const { return checkelem (n); }
 #else
   T Array<T>::elem (int n) const { return xelem (n); }
@@ -231,18 +225,18 @@ public:
 	  rep = new ArrayRep (*rep);
 	}
 
       rep->qsort (compare);
 
       return *this;
     }
 
-  T range_error (void) const;
-  T& range_error (void);
+  T range_error (const char *fcn, int n) const;
+  T& range_error (const char *fcn, int n);
 
 #ifdef HEAVYWEIGHT_INDEXING
   void set_max_indices (int mi) { max_indices = mi; }
 
   void clear_index (void);
 
   void set_index (const idx_vector& i);
 
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -37,25 +37,45 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (HEAVYWEIGHT_INDEXING)
 #include "idx-vector.h"
 #include "Array2-idx.h"
 #endif
 
 #include "lo-error.h"
 
+template <class T>
+T
+Array2<T>::range_error (const char *fcn, int i, int j) const
+{
+  (*current_liboctave_error_handler)
+    ("%s (%d, %d): range error", fcn, i, j);
+  return T ();
+}
+
+template <class T>
+T&
+Array2<T>::range_error (const char *fcn, int i, int j)
+{
+  (*current_liboctave_error_handler)
+    ("%s (%d, %d): range error", fcn, i, j);
+  static T foo;
+  return foo;
+}
+
 // Two dimensional array class.
 
 template <class T>
 void
 Array2<T>::resize (int r, int c)
 {
   if (r < 0 || c < 0)
     {
-      (*current_liboctave_error_handler) ("can't resize to negative dimension");
+      (*current_liboctave_error_handler)
+	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
@@ -84,17 +104,18 @@ Array2<T>::resize (int r, int c)
 }
 
 template <class T>
 void
 Array2<T>::resize (int r, int c, const T& val)
 {
   if (r < 0 || c < 0)
     {
-      (*current_liboctave_error_handler) ("can't resize to negative dimension");
+      (*current_liboctave_error_handler)
+	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -110,61 +110,70 @@ public:
 
   int dim1 (void) const { return d1; }
   int dim2 (void) const { return d2; }
 
   int rows (void) const { return d1; }
   int cols (void) const { return d2; }
   int columns (void) const { return d2; }
 
-  T& elem (int i, int j) { return Array<T>::elem (d1*j+i); }
+  // No checking of any kind, ever.
+
+  T& xelem (int i, int j) { return Array<T>::xelem (d1*j+i); }
+  T xelem (int i, int j) const { return Array<T>::xelem (d1*j+i); }
+
+  // Note that the following element references don't use
+  // Array2<T>::xelem() because they still need to make use of the
+  // code in Array<T> that checks the reference count.
 
   T& checkelem (int i, int j)
     {
       if (i < 0 || j < 0 || i >= d1 || j >= d2)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler)
+	    ("T& Array2<T>::checkelem (%d, %d): range error", i, j);
 	  static T foo;
 	  return foo;
 	}
       else
-	return elem (i, j);
+	return Array<T>::elem (d1*j+i);
     }
 
-#if defined (NO_BOUNDS_CHECKING)
-  T& operator () (int i, int j) { return elem (i, j); }
+#if defined (BOUNDS_CHECKING)
+  T& elem (int i, int j) { return checkelem (i, j); }
 #else
-  T& operator () (int i, int j) { return checkelem (i, j); }
+  T& elem (int i, int j) { return Array<T>::elem (d1*j+i); }
 #endif
 
-  T elem (int i, int j) const { return Array<T>::elem (d1*j+i); }
+  T& operator () (int i, int j) { return elem (i, j); }
 
   T checkelem (int i, int j) const
     {
       if (i < 0 || j < 0 || i >= d1 || j >= d2)
 	{
-	  (*current_liboctave_error_handler) ("range error");
+	  (*current_liboctave_error_handler)
+	    ("T Array2<T>::checkelem (%d, %d): range error", i, j);
 	  T foo;
 	  static T *bar = &foo;
 	  return foo;
 	}
       else
-	return elem (i, j);
+	return Array<T>::elem (d1*j+i);
     }
 
-#if defined (NO_BOUNDS_CHECKING)
-  T operator () (int i, int j) const { return elem (i, j); }
+#if defined (BOUNDS_CHECKING)
+  T elem (int i, int j) const { return checkelem (i, j); }
 #else
-  T operator () (int i, int j) const { return checkelem (i, j); }
+  T elem (int i, int j) const { return Array<T>::elem (d1*j+i); }
 #endif
 
-  // No checking of any kind, ever.
+  T operator () (int i, int j) const { return elem (i, j); }
 
-  T& xelem (int i, int j) { return Array<T>::xelem (d1*j+i); }
-  T xelem (int i, int j) const { return Array<T>::xelem (d1*j+i); }
+  T range_error (const char *fcn, int i, int j) const;
+  T& range_error (const char *fcn, int i, int j);
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
 
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
