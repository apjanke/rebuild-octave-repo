# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1346166053 14400
#      Tue Aug 28 11:00:53 2012 -0400
# Node ID c16357c4bdbb488e87ee1839170c8d1526db95b6
# Parent  b241e69306a5ba4b3f44d490ac1db31d4658c07a
attempt to display location of out of memory errors in interpreted code

* pt-eval.cc (tree_evaluator::visit_statement):
Handle std::bad_alloc exception here.
* toplev.cc (main_loop): Simplify out-of-memory error message.
* octave.cc (safe_source_file): Don't handle std::bad_alloc here.
(execute_eval_option_code): Likewise.
* ov-oncleanup.cc (octave_oncleanup::~octave_oncleanup): Likewise.

diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -648,17 +648,17 @@ main_loop (void)
           std::cerr
             << "error: unhandled execution exception -- trying to return to prompt"
             << std::endl;
         }
       catch (std::bad_alloc)
         {
           recover_from_exception ();
           std::cerr
-            << "error: memory exhausted or requested size too large for range of Octave's index type -- trying to return to prompt"
+            << "error: out of memory -- trying to return to prompt"
             << std::endl;
         }
     }
   while (retval == 0);
 
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -87,21 +87,16 @@ octave_oncleanup::~octave_oncleanup (voi
       // Run the actual code.
       fcn.do_multi_index_op (0, octave_value_list ());
     }
   catch (octave_interrupt_exception)
     {
       // Swallow the interrupt.
       warning ("onCleanup: interrupt occured in cleanup action");
     }
-  catch (std::bad_alloc)
-    {
-      // Swallow the exception.
-      warning ("onCleanup: out of memory occured in cleanup action");
-    }
   catch (...) // Yes, the black hole. We're in a d-tor.
     {
       // This shouldn't happen, in theory.
       error ("onCleanup: internal error: unhandled exception in cleanup action");
     }
 
   // We don't want to ignore errors that occur in the cleanup code, so
   // if an error is encountered there, leave error_state alone.
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -374,24 +374,16 @@ safe_source_file (const std::string& fil
       if (quitting_gracefully)
         clean_up_and_exit (exit_status);
     }
   catch (octave_execution_exception)
     {
       recover_from_exception ();
       gripe_safe_source_exception (file_name, "unhandled execution exception");
     }
-  catch (std::bad_alloc)
-    {
-      recover_from_exception ();
-      error_state = -2;
-      gripe_safe_source_exception
-        (file_name,
-         "memory exhausted or requested size too large for range of Octave's index type");
-    }
 }
 
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   unwind_protect frame;
@@ -502,22 +494,16 @@ execute_eval_option_code (const std::str
         clean_up_and_exit (exit_status);
     }
   catch (octave_execution_exception)
     {
       recover_from_exception ();
       std::cerr << "error: unhandled execution exception -- eval failed"
                 << std::endl;
     }
-  catch (std::bad_alloc)
-    {
-      error_state = -2;
-      std::cerr << "error: memory exhausted or requested size too large for range of Octave's index type -- eval failed"
-                << std::endl;
-    }
 
   return parse_status;
 }
 
 static void
 execute_command_line_file (const std::string& fname)
 {
   unwind_protect frame;
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -752,16 +752,29 @@ tree_evaluator::visit_statement (tree_st
               //              if (tmp_result.is_defined ())
               //                result_values(0) = tmp_result;
             }
         }
       catch (octave_execution_exception)
         {
           gripe_library_execution_error ();
         }
+      catch (std::bad_alloc)
+        {
+          // FIXME -- We want to use error_with_id here so that we set
+          // the error state, give users control over this error
+          // message, and so that we set the error_state appropriately
+          // so we'll get stack trace info when appropriate.  But
+          // error_with_id will require some memory allocations.  Is
+          // there anything we can do to make those more likely to
+          // succeed?
+
+          error_with_id ("Octave:bad-alloc",
+                         "out of memory or dimension too large for Octave's index type");
+        }
     }
 }
 
 void
 tree_evaluator::visit_statement_list (tree_statement_list& lst)
 {
   static octave_value_list empty_list;
 
@@ -892,17 +905,16 @@ tree_evaluator::visit_try_catch_command 
   // The catch code is *not* added to unwind_protect stack; it doesn't need
   // to be run on interrupts.
 
   tree_statement_list *try_code = cmd.body ();
 
   if (try_code)
     {
       try_code->accept (*this);
-      // FIXME: should std::bad_alloc be handled here?
     }
 
   if (error_state)
     {
       error_state = 0;
 
       if (catch_code)
         {
