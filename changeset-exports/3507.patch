# HG changeset patch
# User jwe
# Date 949440705 0
#      Tue Feb 01 21:31:45 2000 +0000
# Node ID 00fdd363c098bf0b1384d3595e7db506a61de87d
# Parent  ed0e559532601dd7e764efc2e6475287ef7bc40a
[project @ 2000-02-01 21:31:44 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DASSL.cc (dassl_fcn_ptr, dassl_jac_ptr): New typedefs.
+	* LSODE.cc: lsode_fcn_ptr, lsode_jac_ptr): Ditto.
+	* Quad.cc (quad_fcn_ptr): Ditto.
+	* NLEqn.cc (hybrd1_fcn_ptr, hybrj1_fcn_ptr): Ditto.
+
 	* oct-getopt.h, oct-getopt.c: New files for interface to getopt.
 
 	* oct-kpse.h, oct-kpse.c: New files for interface to kpathsearch.
 
 	* dMatrix.cc (write_int, read_int): No longer declared static.
 
 	* CDiagMatrix.h: Delete decls for friend operators that are
 	handled by MDiagArray2 class.  Move others outside class decl and
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -30,30 +30,29 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <cmath>
 
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
+typedef int (*dassl_fcn_ptr) (const double&, double*, double*,
+			      double*, int&, double*, int*);
+
+typedef int (*dassl_jac_ptr) (const double&, double*, double*,
+			      double*, const double&, double*, int*);
+
 extern "C"
-{
-  int F77_FCN (ddassl, DDASSL) (int (*)(const double&, double*,
-					double*, double*, int&,
-					double*, int*),
-				const int&, double&, double*, double*,
-				double&, const int*, const double&,
-				const double&, int&, double*,
-				const int&, int*, const int&,
-				const double*, const int*, 
-				int (*)(const double&, double*,
-					double*, double*, const
-					double&, double*, int*));
-}
+int F77_FCN (ddassl, DDASSL) (dassl_fcn_ptr, const int&, double&,
+			      double*, double*, double&, const int*,
+			      const double&, const double&, int&,
+			      double*, const int&, int*, const int&,
+			      const double*, const int*,
+			      dassl_jac_ptr);
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 static int nn;
 
 DASSL::DASSL (void) : DAE ()
 {
   stop_time_set = 0;
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -32,28 +32,28 @@ Software Foundation, 59 Temple Place - S
 #include <cmath>
 
 #include <iostream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
+typedef int (*lsode_fcn_ptr) (const int&, const double&, double*,
+			      double*, int&);
+
+typedef int (*lsode_jac_ptr) (const int&, const double&, double*,
+			      const int&, const int&, double*, const
+			      int&);
+
 extern "C"
-{
-  int F77_FCN (lsode, LSODE) (int (*)(const int&, const double&,
-				      double*, double*, int&),
-			      int&, double*, double&, double&, int&,
-			      double&, double&, int&, int&, int&,
-			      double*, int&, int*, int&,
-			      int (*)(const int&, const double&,
-				      double*, const int&, const int&,
-				      double*, const int&),
-			      int&);
-}
+int F77_FCN (lsode, LSODE) (lsode_fcn_ptr, int&, double*, double&,
+			    double&, int&, double&, double&, int&,
+			    int&, int&, double*, int&, int*, int&,
+			    lsode_jac_ptr, int&);
 
 static ODEFunc::ODERHSFunc user_fun;
 static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 LSODE::LSODE (void) : ODE (), LSODE_options ()
 {
   n = size ();
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -28,29 +28,29 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "NLEqn.h"
 #include "dMatrix.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
+typedef int (*hybrd1_fcn_ptr) (int*, double*, double*, int*);
+
 extern "C"
-{
-  int F77_FCN (hybrd1, HYBRD1) (int (*)(int*, double*, double*, int*),
-				const int&, double*, double*,
-				const double&, int&, double*,
-				const int&);
+int F77_FCN (hybrd1, HYBRD1) (hybrd1_fcn_ptr, const int&, double*,
+			      double*, const double&, int&, double*,
+			      const int&);
 
-  int F77_FCN (hybrj1, HYBRJ1) (int (*)(int*, double*, double*,
-					double*, int*, int*),
-				const int&, double*, double*, double*,
-				const int&, const double&, int&,
-				double*, const int&);
-}
+typedef int (*hybrj1_fcn_ptr) (int*, double*, double*, double*, int*, int*);
+
+extern "C"
+int F77_FCN (hybrj1, HYBRJ1) (hybrj1_fcn_ptr, const int&, double*,
+			      double*, double*, const int&, const
+			      double&, int&, double*, const int&);
 
 static NLFunc::nonlinear_fcn user_fun;
 static NLFunc::jacobian_fcn user_jac;
 
 // error handling
 
 void
 NLEqn::error (const char* msg)
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -36,31 +36,30 @@ Software Foundation, 59 Temple Place - S
 static integrand_fcn user_fcn;
 
 // XXX FIXME XXX -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
 int quad_integration_error = 0;
 
+typedef int (*quad_fcn_ptr) (double*, int&, double*);
+			      
 extern "C"
-{
-  int F77_FCN (dqagp, DQAGP) (int (*)(double*, int&, double*),
-			      const double&, const double&,
-			      const int&, const double*,
-			      const double&, const double&, double&,
-			      double&, int&, int&, const int&,
-			      const int&, int&, int*, double*);
+int F77_FCN (dqagp, DQAGP) (quad_fcn_ptr, const double&, const double&,
+			    const int&, const double*, const double&,
+			    const double&, double&, double&, int&,
+			    int&, const int&, const int&, int&, int*,
+			    double*);
 
-  int F77_FCN (dqagi, DQAGI) (int (*)(double*, int&, double*),
-			      const double&, const int&,
-			      const double&, const double&, double&,
-			      double&, int&, int&, const int&,
-			      const int&, int&, int*, double*); 
-}
+extern "C"
+int F77_FCN (dqagi, DQAGI) (quad_fcn_ptr, const double&, const int&,
+			    const double&, const double&, double&,
+			    double&, int&, int&, const int&,
+			    const int&, int&, int*, double*); 
 
 static int
 user_function (double *x, int& ierr, double *result)
 {
 #if defined (sun) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
