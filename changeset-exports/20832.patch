# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449688732 18000
#      Wed Dec 09 14:18:52 2015 -0500
# Node ID 3951d420556cd0b232481da9916f17b661fe9860
# Parent  35241c4b696c3dc61409a2cc37190b3ba806ed38
eliminate return statements after calls to error

* pt-assign.cc, pt-cell.cc, pt-colon.cc, pt-mat.cc, pt-misc.cc:
Eliminate return statements after calls to error.

diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -57,92 +57,80 @@ tree_simple_assignment::~tree_simple_ass
     delete lhs;
 
   delete rhs;
 }
 
 octave_value_list
 tree_simple_assignment::rvalue (int nargout)
 {
-  octave_value_list retval;
-
   if (nargout > 1)
     error ("invalid number of output arguments for expression X = RHS");
-  else
-    retval = rvalue1 (nargout);
 
-  return retval;
+  return rvalue1 (nargout);
 }
 
 octave_value
 tree_simple_assignment::rvalue1 (int)
 {
   octave_value retval;
 
   if (rhs)
     {
       octave_value rhs_val = rhs->rvalue1 ();
 
       if (rhs_val.is_undefined ())
+        error ("value on right hand side of assignment is undefined");
+
+      if (rhs_val.is_cs_list ())
         {
-          error ("value on right hand side of assignment is undefined");
-          return retval;
-        }
-      else
-        {
-          if (rhs_val.is_cs_list ())
-            {
-              const octave_value_list lst = rhs_val.list_value ();
+          const octave_value_list lst = rhs_val.list_value ();
 
-              if (! lst.empty ())
-                rhs_val = lst(0);
-              else
-                {
-                  error ("invalid number of elements on RHS of assignment");
-                  return retval;
-                }
-            }
+          if (! lst.empty ())
+            rhs_val = lst(0);
+          else
+            error ("invalid number of elements on RHS of assignment");
+        }
 
-          try
-            {
-              octave_lvalue ult = lhs->lvalue ();
+      try
+        {
+          octave_lvalue ult = lhs->lvalue ();
 
-              if (ult.numel () != 1)
-                gripe_nonbraced_cs_list_assignment ();
+          if (ult.numel () != 1)
+            gripe_nonbraced_cs_list_assignment ();
 
-              ult.assign (etype, rhs_val);
+          ult.assign (etype, rhs_val);
 
-              if (etype == octave_value::op_asn_eq)
-                retval = rhs_val;
-              else
-                retval = ult.value ();
+          if (etype == octave_value::op_asn_eq)
+            retval = rhs_val;
+          else
+            retval = ult.value ();
 
-              if (print_result ()
-                  && tree_evaluator::statement_printing_enabled ())
-                {
-                  // We clear any index here so that we can
-                  // get the new value of the referenced
-                  // object below, instead of the indexed
-                  // value (which should be the same as the
-                  // right hand side value).
+          if (print_result ()
+              && tree_evaluator::statement_printing_enabled ())
+            {
+              // We clear any index here so that we can
+              // get the new value of the referenced
+              // object below, instead of the indexed
+              // value (which should be the same as the
+              // right hand side value).
 
-                  ult.clear_index ();
+              ult.clear_index ();
 
-                  octave_value lhs_val = ult.value ();
+              octave_value lhs_val = ult.value ();
 
-                  lhs_val.print_with_name (octave_stdout,
-                                           lhs->name ());
-                }
+              lhs_val.print_with_name (octave_stdout,
+                                       lhs->name ());
             }
-          catch (index_exception& e)
-            {
-              e.set_var (lhs->name ());
-              std::string msg = e.message ();
-              error_with_id (e.err_id (), msg.c_str ());
-            }
+        }
+      catch (index_exception& e)
+        {
+          e.set_var (lhs->name ());
+          std::string msg = e.message ();
+          error_with_id (e.err_id (), msg.c_str ());
         }
     }
 
   return retval;
 }
 
 std::string
 tree_simple_assignment::oper (void) const
diff --git a/libinterp/parse-tree/pt-cell.cc b/libinterp/parse-tree/pt-cell.cc
--- a/libinterp/parse-tree/pt-cell.cc
+++ b/libinterp/parse-tree/pt-cell.cc
@@ -65,20 +65,17 @@ tree_cell::rvalue1 (int)
         {
           octave_idx_type this_nc = row.length ();
 
           if (this_nc != nc)
             {
               if (this_nc == 0)
                 continue;  // blank line
               else
-                {
-                  error ("number of columns must match");
-                  return retval;
-                }
+                error ("number of columns must match");
             }
         }
 
       for (octave_idx_type j = 0; j < nc; j++)
         val(i,j) = row(j);
 
       i++;
     }
@@ -88,24 +85,20 @@ tree_cell::rvalue1 (int)
   retval = val;
 
   return retval;
 }
 
 octave_value_list
 tree_cell::rvalue (int nargout)
 {
-  octave_value_list retval;
-
   if (nargout > 1)
     error ("invalid number of output arguments for cell array");
-  else
-    retval = rvalue1 (nargout);
 
-  return retval;
+  return rvalue1 (nargout);
 }
 
 tree_expression *
 tree_cell::dup (symbol_table::scope_id scope,
                 symbol_table::context_id context) const
 {
   tree_cell *new_cell = new tree_cell (0, line (), column ());
 
diff --git a/libinterp/parse-tree/pt-colon.cc b/libinterp/parse-tree/pt-colon.cc
--- a/libinterp/parse-tree/pt-colon.cc
+++ b/libinterp/parse-tree/pt-colon.cc
@@ -40,49 +40,43 @@ tree_colon_expression::append (tree_expr
   tree_colon_expression *retval = 0;
 
   if (op_base)
     {
       if (op_limit)
         {
           if (op_increment)
             error ("invalid colon expression");
-          else
-            {
-              // Stupid syntax:
-              //
-              // base : limit
-              // base : increment : limit
 
-              op_increment = op_limit;
-              op_limit = t;
-            }
+          // Stupid syntax:
+          //
+          // base : limit
+          // base : increment : limit
+
+          op_increment = op_limit;
+          op_limit = t;
         }
       else
         op_limit = t;
 
       retval = this;
     }
   else
     error ("invalid colon expression");
 
   return retval;
 }
 
 octave_value_list
 tree_colon_expression::rvalue (int nargout)
 {
-  octave_value_list retval;
-
   if (nargout > 1)
     error ("invalid number of output arguments for colon expression");
-  else
-    retval = rvalue1 (nargout);
 
-  return retval;
+  return rvalue1 (nargout);
 }
 
 octave_value
 tree_colon_expression::rvalue1 (int)
 {
   octave_value retval;
 
   if (! op_base || ! op_limit)
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -269,16 +269,20 @@ get_concat_class (const std::string& c1,
       else if (c1_is_logical && c2_is_logical)
         retval = c1;
     }
 
   return retval;
 }
 
 static void
+eval_error (const char *msg, const dim_vector& x,
+            const dim_vector& y) GCC_ATTR_NORETURN;
+
+static void
 eval_error (const char *msg, const dim_vector& x, const dim_vector& y)
 {
   error ("%s (%s vs %s)", msg, x.str ().c_str (), y.str ().c_str ());
 }
 
 void
 tm_row_const::tm_row_const_rep::do_init_element (const octave_value& val,
                                                  bool& first_elem)
@@ -401,20 +405,17 @@ tm_row_const::tm_row_const_rep::init (co
           all_mt = false;
 
           if (first_elem)
             {
               first_elem = false;
               dv = this_elt_dv;
             }
           else if ((! any_class) && (! dv.hvcat (this_elt_dv, 1)))
-            {
-              eval_error ("horizontal dimensions mismatch", dv, this_elt_dv);
-              break;
-            }
+            eval_error ("horizontal dimensions mismatch", dv, this_elt_dv);
         }
     }
 
   ok = true;
 }
 
 void
 tm_row_const::tm_row_const_rep::cellify (void)
@@ -448,21 +449,17 @@ tm_row_const::tm_row_const_rep::cellify 
           if (! this_elt_dv.zero_by_zero ())
             {
               if (first_elem)
                 {
                   first_elem = false;
                   dv = this_elt_dv;
                 }
               else if (! dv.hvcat (this_elt_dv, 1))
-                {
-                  eval_error ("horizontal dimensions mismatch",
-                              dv, this_elt_dv);
-                  break;
-                }
+                eval_error ("horizontal dimensions mismatch", dv, this_elt_dv);
             }
         }
     }
 }
 
 class
 tm_const : public octave_base_list<tm_row_const>
 {
@@ -642,36 +639,29 @@ tm_const::init (const tree_matrix& tm)
         {
           // FIXME: this is Octave's specialty. Character matrices allow
           // rows of unequal length.
           if (this_elt_nc > cols ())
             dv(1) = this_elt_nc;
           dv(0) += this_elt_nr;
         }
       else if ((!any_class) && (!dv.hvcat (this_elt_dv, 0)))
-        {
-          eval_error ("vertical dimensions mismatch", dv, this_elt_dv);
-          return;
-        }
+        eval_error ("vertical dimensions mismatch", dv, this_elt_dv);
     }
 
   ok = true;
 }
 
 octave_value_list
 tree_matrix::rvalue (int nargout)
 {
-  octave_value_list retval;
-
   if (nargout > 1)
     error ("invalid number of output arguments for matrix list");
-  else
-    retval = rvalue1 (nargout);
 
-  return retval;
+  return rvalue1 (nargout);
 }
 
 void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   if (! (all_dq_strings_p || all_sq_strings_p))
     warning_with_id ("Octave:mixed-string-concat",
                      "concatenation of different character string types may have unintended consequences");
diff --git a/libinterp/parse-tree/pt-misc.cc b/libinterp/parse-tree/pt-misc.cc
--- a/libinterp/parse-tree/pt-misc.cc
+++ b/libinterp/parse-tree/pt-misc.cc
@@ -76,22 +76,18 @@ tree_parameter_list::validate (in_or_out
           std::string name = id->name ();
 
           if (id->is_black_hole ())
             {
               if (type != in)
                 error ("invalid use of ~ in output list");
             }
           else if (dict.find (name) != dict.end ())
-            {
-              retval = false;
-              error ("'%s' appears more than once in parameter list",
-                     name.c_str ());
-              break;
-            }
+            error ("'%s' appears more than once in parameter list",
+                   name.c_str ());
           else
             dict.insert (name);
         }
     }
 
   std::string va_type = (type == in ? "varargin" : "varargout");
 
   size_t len = length ();
@@ -189,20 +185,17 @@ tree_parameter_list::define_from_arg_vec
 
       octave_lvalue ref = elt->lvalue ();
 
       if (i < args.length ())
         {
           if (args(i).is_defined () && args(i).is_magic_colon ())
             {
               if (! elt->eval ())
-                {
-                  error ("no default value for argument %d", i+1);
-                  return;
-                }
+                error ("no default value for argument %d", i+1);
             }
           else
             ref.define (args(i));
         }
       else
         elt->eval ();
     }
 }
