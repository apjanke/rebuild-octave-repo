# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516941894 18000
#      Thu Jan 25 23:44:54 2018 -0500
# Node ID 1c90b6d357ec9167def7f269ea8d58427e146bd3
# Parent  a3031d4967ce9f412719b37ed58250d10f51ef7b
more style fixes for variable editor

* variable-editor.cc (variable_editor::notice_settings):
Omit unnecessary explicit uses of QVariant constructor.  Use integer
values directly instead of strings.

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -334,34 +334,34 @@ variable_editor::callUpdate (const QMode
 }
 
 void
 variable_editor::notice_settings (const QSettings *settings)
 {
   // FIXME: Why use object->tostring->toint?  Why not just 100?
 
   m_default_width = settings->value ("variable_editor/column_width",
-                                     QVariant ("100")).toString ().toInt ();
+                                     100).toInt ();
 
   m_autofit = settings->value ("variable_editor/autofit_column_width",
-                               QVariant (false)).toBool ();
+                               false).toBool ();
 
   // FIXME: Magic Number 1 here, why not use enum?
 
   if (m_autofit)
     {
       if (settings->value ("variable_editor/autofit_type", 0).toInt () == 1)
         m_autofit_max = true;
     }
 
   m_default_height = settings->value ("variable_editor/row_height",
-                                      QVariant ("10")).toString ().toInt ();
+                                      10).toInt ();
 
   m_alternate_rows = settings->value ("variable_editor/alternate_rows",
-                                      QVariant (false)).toBool ();
+                                      false).toBool ();
 
   QList<QColor> _default_colors = resource_manager::varedit_default_colors ();
 
   QString class_chars = resource_manager::varedit_color_chars ();
 
   m_use_terminal_font = settings->value ("variable_editor/use_terminal_font",
                                          true).toBool ();
 
@@ -370,17 +370,20 @@ variable_editor::notice_settings (const 
 
   if (m_use_terminal_font)
     {
       font_name = settings->value ("terminal/fontName", "Courier New").toString ();
       font_size = settings->value ("terminal/fontSize", 10).toInt ();
     }
   else
     {
-      font_name = settings->value ("variable_editor/font_name", settings->value ("terminal/fontName", "Courier New")).toString ();
+      font_name = settings->value ("variable_editor/font_name",
+                                   settings->value ("terminal/fontName",
+                                                    "Courier New")).toString ();
+
       font_size = settings->value ("variable_editor/font_size", 10).toInt ();
     }
 
   m_font = QFont (font_name, font_size);
 
   if (settings->value ("variable_editor/autofit_row_height", true).toBool ())
     {
       QFontMetrics fm (m_font);
@@ -388,16 +391,17 @@ variable_editor::notice_settings (const 
       m_add_font_height = fm.height ();
     }
   else
     m_add_font_height = 0;
 
   for (int i = 0; i < class_chars.length (); i++)
     {
       QVariant default_var = _default_colors.at (i);
+
       QColor setting_color = settings->value ("variable_editor/color_"
                                               + class_chars.mid (i, 1),
                                               default_var).value<QColor> ();
 
       m_table_colors.replace (i, setting_color);
     }
 
   update_colors ();
