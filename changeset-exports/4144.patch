# HG changeset patch
# User jwe
# Date 1036173836 0
#      Fri Nov 01 18:03:56 2002 +0000
# Node ID b02ada83de67a33d37c3aaf1de7cde5f022ff713
# Parent  62afb31c1f852d04888d1ace698ac9b8d6282d0e
[project @ 2002-11-01 18:03:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DASPK.cc (DASPK::do_integrate): Resize rwork and iwork before
+	using them.  Accept inequality contraint option of 0.  Assign
+	pabs_tol and prel_tol before calling DASPK.  Don't redeclare
+	abs_tol and rel_tol.
+
 	* cmd-edit.h (command_editor::filename_completion_desired): New
 	static function.
 	(command_editor::do_filename_completion_desired): New virtual function.
 	* oct-rl-edit.c (octave_rl_filename_completion_desired): New function.
 	* oct-rl-edit.h: Provide decl.
 
 	* Array2.cc (Array2<T>::get_size): #define MALLOC_OVERHEAD to
 	avoid OS X linker bug.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -198,20 +198,42 @@ DASPK::do_integrate (double tout)
 	  integration_error = true;
 	  return retval;
 	}
   
       info(4) = user_jac ? 1 : 0;
 
       DAEFunc::reset = false;
 
+      int eiq = enforce_inequality_constraints ();
+      int ccic = compute_consistent_initial_condition ();
+      int eavfet = exclude_algebraic_variables_from_error_test ();
+
+      liw = 40 + n;
+      if (eiq == 1 || eiq == 3)
+	liw += n;
+      if (ccic == 1 || eavfet == 1)
+	liw += n;
+
+      lrw = 50 + 9*n;
+      if (! user_jac)
+	lrw += n*n;
+      if (eavfet == 1)
+	lrw += n;
+
+      iwork.resize (liw);
+      rwork.resize (lrw);
+
+      piwork = iwork.fortran_vec ();
+      prwork = rwork.fortran_vec ();
+
       // DASPK_options
 
-      Array<double> abs_tol = absolute_tolerance ();
-      Array<double> rel_tol = relative_tolerance ();
+      abs_tol = absolute_tolerance ();
+      rel_tol = relative_tolerance ();
 
       int abs_tol_len = abs_tol.length ();
       int rel_tol_len = rel_tol.length ();
 
       if (abs_tol_len == 1 && rel_tol_len == 1)
 	{
 	  info(1) = 0;
 	}
@@ -223,16 +245,19 @@ DASPK::do_integrate (double tout)
 	{
 	  (*current_liboctave_error_handler)
 	    ("daspk: inconsistent sizes for tolerance arrays");
 
 	  integration_error = true;
 	  return retval;
 	}
 
+      pabs_tol = abs_tol.fortran_vec ();
+      prel_tol = rel_tol.fortran_vec ();
+
       double hmax = maximum_step_size ();
       if (hmax >= 0.0)
 	{
 	  rwork(1) = hmax;
 	  info(6) = 1;
 	}
       else
 	info(6) = 0;
@@ -258,17 +283,16 @@ DASPK::do_integrate (double tout)
 	    {
 	      (*current_liboctave_error_handler)
 		("daspk: invalid value for maximum order");
 	      integration_error = true;
 	      return retval;
 	    }
 	}
 
-      int eiq = enforce_inequality_constraints ();
       switch (eiq)
 	{
 	case 1:
 	case 3:
 	  {
 	    Array<int> ict = inequality_constraint_types ();
 
 	    if (ict.length () == n)
@@ -291,28 +315,28 @@ DASPK::do_integrate (double tout)
 		(*current_liboctave_error_handler)
 		  ("daspk: inequality constraint types size mismatch");
 		integration_error = true;
 		return retval;
 	      }
 	  }
 	  // Fall through...
 
+	case 0:
 	case 2:
 	  info(9) = eiq;
 	  break;
 
 	default:
 	  (*current_liboctave_error_handler)
 	    ("daspk: invalid value for enforce inequality constraints option");
 	  integration_error = true;
 	  return retval;
 	}
 
-      int ccic = compute_consistent_initial_condition ();
       if (ccic)
 	{
 	  if (ccic == 1)
 	    {
 	      // XXX FIXME XXX -- this code is duplicated below.
 
 	      Array<int> av = algebraic_variables ();
 
@@ -343,17 +367,16 @@ DASPK::do_integrate (double tout)
 		("daspk: invalid value for compute consistent initial condition option");
 	      integration_error = true;
 	      return retval;
 	    }
 
 	  info(10) = ccic;
 	}
 
-      int eavfet = exclude_algebraic_variables_from_error_test ();
       if (eavfet)
 	{
 	  info(15) = 1;
 
 	  // XXX FIXME XXX -- this code is duplicated above.
 
 	  Array<int> av = algebraic_variables ();
 
@@ -411,34 +434,16 @@ DASPK::do_integrate (double tout)
 	    ("daspk: invalid value for print initial condition info option");
 	  integration_error = true;
 	  return retval;
 	  break;
 	}
 
       DASPK_options::reset = false;
 
-      liw = 40 + n;
-      if (eiq == 1 || eiq == 3)
-	liw += n;
-      if (ccic == 1 || eavfet == 1)
-	liw += n;
-
-      lrw = 50 + 9*n;
-      if (! user_jac)
-	lrw += n*n;
-      if (eavfet == 1)
-	lrw += n;
-
-      iwork.resize (liw);
-      rwork.resize (lrw);
-
-      piwork = iwork.fortran_vec ();
-      prwork = rwork.fortran_vec ();
-
       restart = false;
     }
 
   static double *dummy = 0;
   static int *idummy = 0;
 
   F77_XFCN (ddaspk, DDASPK, (ddaspk_f, nn, t, px, pxdot, tout, pinfo,
 			     prel_tol, pabs_tol, istate, prwork, lrw,
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -261,30 +261,29 @@ It must have the form\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
 If @var{fcn} is a two-element string array, the first element names\n\
 the function @math{f} described above, and the second element names\n\
 a function to compute the modified Jacobian\n\
-\n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
 @ifinfo\n\
+\n\
+@example\n\
       df       df\n\
 jac = -- + c ------\n\
       dx     d xdot\n\
-@example\n\
 @end example\n\
-\n\
 @end ifinfo\n\
 \n\
 The modified Jacobian function must have the form\n\
 \n\
 @example\n\
 \n\
 @var{jac} = j (@var{x}, @var{xdot}, @var{t}, @var{c})\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -214,16 +214,32 @@ fsolve_user_jacobian (const ColumnVector
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{info}, @var{msg}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
+If @var{fcn} is a two-element string array, the first element names\n\
+the function @math{f} described above, and the second element names\n\
+a function of the form @code{j (@var{x})} to compute the Jacobian\n\
+matrix with elements\n\
+@tex\n\
+$$ J = {\\partial f_i \\over \\partial x_j} $$\n\
+@end tex\n\
+@ifinfo\n\
+\n\
+@example\n\
+      df_i
+jac = ----
+      dx_j
+@end example\n\
+@end ifinfo\n\
+\n\
 You can use the function @code{fsolve_options} to set optional\n\
 parameters for @code{fsolve}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   warned_fcn_imaginary = false;
   warned_jac_imaginary = false;
