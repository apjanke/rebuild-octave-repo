# HG changeset patch
# User Rik <rik@octave.org>
# Date 1499100359 25200
#      Mon Jul 03 09:45:59 2017 -0700
# Node ID 1147e5c912aa2eabd106c0d81437f74a55226fb8
# Parent  dcf3f00a728378129ea40a1fac07eeb3d7c2868d
Remove unnecessary octave::math::(ceil,trunc,floor) declarations.

* lo-mappers.h: Remove prototypes for octave::math::(ceil,trunc,floor) which
accept doubles or floats.  Use std::(ceil,trunc,floor) as replacement.

* lo-specfun.cc: Replace math::floor with std::floor.

diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -102,89 +102,79 @@ namespace octave
     extern OCTAVE_API float log2 (float x, int& exp);
 
     extern OCTAVE_API Complex log2 (const Complex& x, int& exp);
     extern OCTAVE_API FloatComplex log2 (const FloatComplex& x, int& exp);
 
     inline double exp2 (double x) { return std::exp2 (x); }
     inline float exp2 (float x) { return std::exp2f (x); }
 
-    // FIXME: Is ceil actually acceptably defined for complex values?
-    inline double ceil (double x) { return std::ceil (x); }
-    inline float ceil (float x) { return ::ceilf (x); }
-
     template <typename T>
     std::complex<T>
     ceil (const std::complex<T>& x)
     {
-      return std::complex<T> (ceil (std::real (x)), ceil (std::imag (x)));
+      return std::complex<T> (std::ceil (std::real (x)),
+                              std::ceil (std::imag (x)));
     }
 
-    // FIXME: Is trunc actually acceptably defined for complex values?
-    inline double trunc (double x) { return std::trunc (x); }
-    inline float trunc (float x) { return std::truncf (x); }
-
     template <typename T>
     std::complex<T>
     trunc (const std::complex<T>& x)
     {
-      return std::complex<T> (trunc (std::real (x)), trunc (std::imag (x)));
+      return std::complex<T> (std::trunc (std::real (x)),
+                              std::trunc (std::imag (x)));
     }
 
-    // FIXME: Do we need this alias for trunc?
-    inline double fix (double x) { return trunc (x); }
-    inline float fix (float x) { return trunc (x); }
+    // Provide alias for trunc under the more familiar name of fix.
+    inline double fix (double x) { return std::trunc (x); }
+    inline float fix (float x) { return std::trunc (x); }
 
     template <typename T>
     std::complex<T>
     fix (const std::complex<T>& x)
     {
       return trunc (x);
     }
 
-    // FIXME: Do we need this alias for floor?
-    inline double floor (double x) { return std::floor (x); }
-    inline float floor (float x) { return std::floor (x); }
-
     template <typename T>
     std::complex<T>
     floor (const std::complex<T>& x)
     {
-      return std::complex<T> (floor (std::real (x)), floor (std::imag (x)));
+      return std::complex<T> (std::floor (std::real (x)),
+                              std::floor (std::imag (x)));
     }
 
-    // FIXME: Do we need this alias for round?
     inline double round (double x) { return std::round (x); }
     inline float round (float x) { return std::roundf (x); }
 
     template <typename T>
     std::complex<T>
     round (const std::complex<T>& x)
     {
       return std::complex<T> (round (std::real (x)), round (std::imag (x)));
     }
 
     inline double
     roundb (double x)
     {
       double t = round (x);
 
       if (fabs (x - t) == 0.5)
-        t = 2 * trunc (0.5 * t);
+        t = 2 * std::trunc (0.5 * t);
 
       return t;
     }
 
     inline float
     roundb (float x)
     {
       float t = round (x);
 
       if (fabsf (x - t) == 0.5f)
-        t = 2 * trunc (0.5f * t);
+        t = 2 * std::trunc (0.5f * t);
 
       return t;
     }
 
     template <typename T>
     std::complex<T>
     roundb (const std::complex<T>& x)
     {
@@ -294,23 +284,23 @@ namespace octave
     x_nint (T x)
     {
       return x;
     }
 
     template <>
     inline double x_nint (double x)
     {
-      return (isfinite (x) ? floor (x + 0.5) : x);
+      return (isfinite (x) ? std::floor (x + 0.5) : x);
     }
 
     template <>
     inline float x_nint (float x)
     {
-      return (isfinite (x) ? floor (x + 0.5f) : x);
+      return (isfinite (x) ? std::floor (x + 0.5f) : x);
     }
 
     extern OCTAVE_API octave_idx_type nint_big (double x);
     extern OCTAVE_API octave_idx_type nint_big (float x);
 
     extern OCTAVE_API int nint (double x);
     extern OCTAVE_API int nint (float x);
 
@@ -327,17 +317,17 @@ namespace octave
           T q = x / y;
 
           if (x_nint (y) != y
               && (std::abs ((q - x_nint (q)) / x_nint (q))
                   < std::numeric_limits<T>::epsilon ()))
             retval = 0;
           else
             {
-              T n = floor (q);
+              T n = std::floor (q);
 
               // Prevent use of extra precision.
               volatile T tmp = y * n;
 
               retval = x - tmp;
             }
         }
 
@@ -360,17 +350,17 @@ namespace octave
           T q = x / y;
 
           if (x_nint (y) != y
               && (std::abs ((q - x_nint (q)) / x_nint (q))
                   < std::numeric_limits<T>::epsilon ()))
             retval = 0;
           else
             {
-              T n = trunc (q);
+              T n = std::trunc (q);
 
               // Prevent use of extra precision.
               volatile T tmp = y * n;
 
               retval = x - tmp;
             }
         }
 
@@ -579,20 +569,20 @@ inline FloatComplex xlog2 (const FloatCo
   return octave::math::log2 (x, exp);
 }
 
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
 inline double xexp2 (double x) { return octave::math::exp2 (x); }
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
 inline float xexp2 (float x) { return octave::math::exp2 (x); }
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
-inline double xceil (double x) { return octave::math::ceil (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
-inline float xceil (float x) { return octave::math::ceil (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::ceil' instead")
+inline double xceil (double x) { return std::ceil (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::ceil' instead")
+inline float xceil (float x) { return std::ceil (x); }
 
 template <typename T>
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
 std::complex<T>
 ceil (const std::complex<T>& x)
 {
   return octave::math::ceil (x);
 }
@@ -646,20 +636,20 @@ inline float signum (float x) { return o
 template <typename T>
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
 std::complex<T>
 signum (const std::complex<T>& x)
 {
   return octave::math::signum (x);
 }
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
-inline double xtrunc (double x) { return octave::math::trunc (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
-inline float xtrunc (float x) { return octave::math::trunc (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::trunc' instead")
+inline double xtrunc (double x) { return std::trunc (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::trunc' instead")
+inline float xtrunc (float x) { return std::trunc (x); }
 
 template <typename T>
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
 std::complex<T>
 xtrunc (const std::complex<T>& x)
 {
   return octave::math::trunc (x);
 }
@@ -672,20 +662,20 @@ inline float fix (float x) { return octa
 template <typename T>
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
 std::complex<T>
 fix (const std::complex<T>& x)
 {
   return octave::math::fix (x);
 }
 
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
-inline double xfloor (double x) { return octave::math::floor (x); }
-OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
-inline float xfloor (float x) { return octave::math::floor (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::floor' instead")
+inline double xfloor (double x) { return std::floor (x); }
+OCTAVE_DEPRECATED (4.2, "use 'std::floor' instead")
+inline float xfloor (float x) { return std::floor (x); }
 
 template <typename T>
 OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
 std::complex<T>
 floor (const std::complex<T>& x)
 {
   return octave::math::floor (x);
 }
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3247,17 +3247,17 @@ namespace octave
 
     template <typename T>
     T
     xpsi (T z)
     {
       static const double euler_mascheroni =
         0.577215664901532860606512090082402431042;
 
-      const bool is_int = (math::floor (z) == z);
+      const bool is_int = (std::floor (z) == z);
 
       T p = 0;
       if (z <= 0)
         {
           // limits - zeros of the gamma function
           if (is_int)
             p = -numeric_limits<T>::Inf (); // Matlab returns -Inf for psi (0)
           else
@@ -3266,17 +3266,17 @@ namespace octave
         }
       else if (is_int)
         {
           // Abramowitz and Stegun, page 258, eq 6.3.2
           p = - euler_mascheroni;
           for (octave_idx_type k = z - 1; k > 0; k--)
             p += 1.0 / k;
         }
-      else if (math::floor (z + 0.5) == z + 0.5)
+      else if (std::floor (z + 0.5) == z + 0.5)
         {
           // Abramowitz and Stegun, page 258, eq 6.3.3 and 6.3.4
           for (octave_idx_type k = z; k > 0; k--)
             p += 1.0 / (2 * k - 1);
 
           p = - euler_mascheroni - 2 * std::log (2) + 2 * (p);
         }
       else
