# HG changeset patch
# User jwe
# Date 1152143484 0
#      Wed Jul 05 23:51:24 2006 +0000
# Node ID 4f1112bfafcedaf004ebca10d385abaa9795137a
# Parent  27771d9cd4f4cc971ced334a821844bcc886cdee
[project @ 2006-07-05 23:50:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2006-07-05  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mexGetVariable): Rename from mexGetArray, swap arguments.
+	(mexGetVariablePtr): Rename from mexGetArrayPtr, swap arguments.
+	(mexErrMsgIdAndTxt, mexWarnMsgIdAndTxt): New functions.
+	* mexproto.h: Provide decls.
+	Include decls for as yet unsupported functions.
+	* mex.h: Add enum for class ids.
+	(mexGetArray): Define using mexGetVariable.
+	(mexGetArrayPtr): Define using mexGetVariablePtr.
+
 2006-07-02  John W. Eaton  <jwe@octave.org>
 
 	* ov-str-mat.cc (CHAR_MATRIX_CONV): Omit "warn-" from label.
 	* parse.y (maybe_warn_variable_switch_label): Likewise.
 
 2006-07-01  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (finish_cell): Use finish_matrix to do constant folding.
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -17,17 +17,17 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 // This code was originally distributed as part of Octave Forge under
-// the follwoing terms:
+// the following terms:
 //
 // Author: Paul Kienzle
 // I grant this code to the public domain.
 // 2001-03-22
 //
 // THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
 // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 // TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
@@ -72,17 +72,17 @@ typedef std::set<Pix> MemSet;
 //
 // Class mex keeps track of all memory allocated and frees anything
 // not explicitly marked persistent when the it is destroyed.  It also
 // maintains the setjump/longjump buffer required for non-local exit
 // from the mex file, and any other state local to this instance of
 // the mex function invocation.
 class mxArray;
 
-// Prototypes for external funcitons.  Must declare mxArray as a class
+// Prototypes for external functions.  Must declare mxArray as a class
 // before including this file.
 #include "mexproto.h"
 
 class mex
 {
 public:
 
   mex (void) { }
@@ -754,40 +754,62 @@ mexFunctionName (void)
 
   return retval;
 }
 
 void
 mexErrMsgTxt (const char *s)
 {
   if (s && strlen (s) > 0)
-    error("%s: %s", mexFunctionName (), s);
+    error ("%s: %s", mexFunctionName (), s);
   else
     // Just set the error state; don't print msg.
     error ("");
 
   __mex->abort();
 }
 
-void mexWarnMsgTxt (const char *s) { warning("%s", s); }
+void
+mexErrMsgIdAndTxt (const char *id, const char *s)
+{
+  if (s && strlen (s) > 0)
+    error_with_id (id, "%s: %s", mexFunctionName (), s);
+  else
+    // Just set the error state; don't print msg.
+    error ("");
+
+  __mex->abort();
+}
+
+void
+mexWarnMsgTxt (const char *s)
+{
+  warning ("%s", s);
+}
+
+void
+mexWarnMsgIdAndTxt (const char *id, const char *s)
+{
+  warning_with_id (id, "%s", s);
+}
 
 void
 mexPrintf (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   octave_vformat (octave_stdout, fmt, args);
   va_end (args);
 }
 
 // Floating point representation.
 
-int mxIsNaN (const double v) { return lo_ieee_isnan (v) != 0; }
 int mxIsFinite (const double v) { return lo_ieee_finite (v) != 0; }
 int mxIsInf (const double v) { return lo_ieee_isinf (v) != 0; }
+int mxIsNaN (const double v) { return lo_ieee_isnan (v) != 0; }
 
 double mxGetEps (void) { return DBL_EPSILON; }
 double mxGetInf (void) { return lo_ieee_inf_value (); }
 double mxGetNaN (void) { return lo_ieee_nan_value (); }
 
 int
 mexEvalString (const char *s)
 {
@@ -1050,53 +1072,53 @@ mexPutVariable (const char *space, const
   else if (! strcmp (space, "base"))
     mexErrMsgTxt ("mexPutVariable: 'base' symbol table not implemented");
   else
     mexErrMsgTxt ("mexPutVariable: symbol table does not exist");
   return 0;
 }
 
 mxArray *
-mexGetArray (const char *name, const char *space)
+mexGetVariable (const char *space, const char *name)
 {
   mxArray *retval = 0;
 
   // FIXME -- this should be in variable.cc, but the correct
   // functionality is not exported.  Particularly, get_global_value()
   // generates an error if the symbol is undefined.
 
   symbol_record *sr = 0;
 
   if (! strcmp (space, "global"))
     sr = global_sym_tab->lookup (name);
   else if (! strcmp (space, "caller"))
     sr = curr_sym_tab->lookup (name);
   else if (! strcmp (space, "base"))
-    mexErrMsgTxt ("mexGetArray: 'base' symbol table not implemented");
+    mexErrMsgTxt ("mexGetVariable: 'base' symbol table not implemented");
   else
-    mexErrMsgTxt ("mexGetArray: symbol table does not exist");
+    mexErrMsgTxt ("mexGetVariable: symbol table does not exist");
 
   if (sr)
     {
       octave_value sr_def = sr->def ();
 
       if (sr_def.is_defined ())
 	{
 	  retval = __mex->make_value (sr_def);
 	  retval->name (name);
 	}
     }
 
   return retval;
 }
 
-mxArray *
-mexGetArrayPtr (const char *name, const char *space)
+const mxArray *
+mexGetVariablePtr (const char *space, const char *name)
 {
-  return mexGetArray (name, space);
+  return mexGetVariable (space, name);
 }
 
 const char *mxGetName (const mxArray *ptr) { return ptr->name (); }
 
 void mxSetName (mxArray *ptr, const char*nm) { ptr->name (nm); }
 
 mxArray *
 mxCreateStructMatrix (int nr, int nc, int num_keys, const char **keys)
@@ -1127,21 +1149,23 @@ mxGetFieldNameByNumber (const mxArray *p
   return ptr->key(key_num).c_str ();
 }
 
 int
 mxGetFieldNumber (const mxArray *ptr, const char *key)
 {
   return ptr->key (key);
 }
+
 mxArray *
 mxGetFieldByNumber (const mxArray *ptr, int index, int key_num)
 {
   return ptr->field (key_num, index);
 }
+
 void
 mxSetFieldByNumber (mxArray *ptr, int index, int key_num, mxArray *val)
 {
   return ptr->field (key_num,index,val);
 }
 
 } // extern "C"
 
@@ -1164,22 +1188,23 @@ void F77_FUNC (mexerrmsgtxt, MEXERRMSGTX
   __mex->abort();
 }
 
 void F77_FUNC (mexprintf, MEXPRINTF) (const char *s, long slen)
 {
   mexPrintf ("%.*s\n", slen, s);
 }
 
+int F77_FUNC (mexisfinite, MEXISFINITE) (double v) { return mxIsFinite (v); }
+int F77_FUNC (mexisinf, MEXISINF) (double v) { return mxIsInf (v); }
+int F77_FUNC (mexisnan, MEXISNAN) (double v) { return mxIsNaN (v); }
+
 double F77_FUNC (mexgeteps, MEXGETEPS) (void) { return mxGetEps (); }
 double F77_FUNC (mexgetinf, MEXGETINF) (void) { return mxGetInf (); }
 double F77_FUNC (mexgetnan, MEXGETNAN) (void) { return mxGetNaN (); }
-int F77_FUNC (mexisfinite, MEXISFINITE) (double v) { return mxIsFinite (v); }
-int F77_FUNC (mexisinf, MEXISINF) (double v) { return mxIsInf (v); }
-int F77_FUNC (mexisnan, MEXISNAN) (double v) { return mxIsNaN (v); }
 
 // Array access:
 
 Pix F77_FUNC (mxcreatefull, MXCREATEFULL)
   (const int& nr, const int& nc, const int& iscomplex)
 {
   return mxCreateDoubleMatrix (nr, nc, iscomplex);
 }
diff --git a/src/mex.h b/src/mex.h
--- a/src/mex.h
+++ b/src/mex.h
@@ -47,18 +47,48 @@ SUCH DAMAGE.
 /* mex.h is for use in C-programs only; do NOT include it in mex.cc */
 
 #if ! defined (MEX_H)
 #define MEX_H
 
 #define HAVE_OCTAVE
 
 typedef void mxArray;
+
+enum mxComplexity
+  {
+    mxREAL = 0,
+    mxCOMPLEX = 1
+  };
+
+typedef enum
+  {
+    mxUNKNOWN_CLASS = 0,
+    mxCELL_CLASS,
+    mxSTRUCT_CLASS,
+    mxLOGICAL_CLASS,
+    mxCHAR_CLASS,
+    mxUNUSED_CLASS,
+    mxDOUBLE_CLASS,
+    mxSINGLE_CLASS,
+    mxINT8_CLASS,
+    mxUINT8_CLASS,
+    mxINT16_CLASS,
+    mxUINT16_CLASS,
+    mxINT32_CLASS,
+    mxUINT32_CLASS,
+    mxINT64_CLASS,
+    mxUINT64_CLASS,
+    mxFUNCTION_CLASS,
+  } mxClassID;
+
+#if 0
+/* typedef Uint16 mxChar; */
 typedef unsigned short mxChar;
-enum mxComplexity { mxREAL = 0, mxCOMPLEX = 1 };
+#endif
 
 #if ! defined (__cplusplus)
 typedef int bool;
 #endif
 
 typedef int mxLOGICAL;
 
 /* -V4 stuff */
@@ -69,35 +99,38 @@ typedef int mxLOGICAL;
 
 #define mxMAXNAME 64
 
 #if defined (__cplusplus)
 extern "C" {
 #endif
 
 #if defined (V4)
-void mexFunction (int nlhs, mxArray* plhs[], int nrhs, mxArray* prhs[]);
+void mexFunction (int nlhs, mxArray* plhs[], int nrhs, mxArray *prhs[]);
 #else
-void mexFunction (int nlhs, mxArray* plhs[], int nrhs, const mxArray* prhs[]);
+void mexFunction (int nlhs, mxArray* plhs[], int nrhs, const mxArray *prhs[]);
 #endif
   
 #include "mexproto.h"
 
 /* V4 floating point routines renamed in V5.  */
 #define mexIsNaN mxIsNaN
 #define mexIsFinite mxIsFinite
 #define mexIsInf mxIsInf
 #define mexGetEps mxGetEps
 #define mexGetInf mxGetInf
 #define mexGetNaN mxGetNan
   
 #define mexGetGlobal(nm) mexGetArray (nm, "global")
 #define mexGetMatrix(nm) mexGetArray (nm, "caller")
 #define mexGetMatrixPtr(nm) mexGetArrayPtr (nm, "caller")
 
+#define mexGetArray(nm, space) mexGetVariable (space, nm)
+#define mexGetArrayPtr(nm, space) mexGetVariablePtr (space, nm)
+
 #define mexPutMatrix(ptr) mexPutVariable ("caller", "", ptr)
 #define mexPutArray(ptr, space) mexPutVariable (space, "", ptr)
   
 #define mxCreateFull mxCreateDoubleMatrix
 
 #define mxCreateScalarDouble mxCreateDoubleScalar
 
 #define mxFreeMatrix mxDestroyArray
diff --git a/src/mexproto.h b/src/mexproto.h
--- a/src/mexproto.h
+++ b/src/mexproto.h
@@ -49,37 +49,39 @@ SUCH DAMAGE.
 #if ! defined (MEXPROTO_H)
 #define MEXPROTO_H
 
 #if defined (__cplusplus)
 extern "C" {
 #endif
 
 /* Floating point representation.  */
-extern int mxIsNaN (double v);
 extern int mxIsFinite (double v);
 extern int mxIsInf (double v);
+extern int mxIsNaN (double v);
 extern double mxGetEps (void);
 extern double mxGetInf (void);
 extern double mxGetNaN (void);
   
 /* Interface to the interpreter */
 extern const char *mexFunctionName (void);
 
 extern int mexCallMATLAB (int nargout, mxArray *argout[], int nargin,
 			  mxArray *argin[], const char *fname);
 
 extern void mexSetTrapFlag (int flag);
 extern int mexEvalString (const char *s);
 extern void mexErrMsgTxt (const char *s);
+extern void mexErrMsgIdAndTxt (const char *id, const char *s);
 extern void mexWarnMsgTxt (const char *s);
+extern void mexWarnMsgIdAndTxt (const char *id, const char *s);
 extern void mexPrintf (const char *fmt, ...);
   
-extern mxArray *mexGetArray (const char *name, const char *space);
-extern mxArray *mexGetArrayPtr (const char *name, const char *space);
+extern mxArray *mexGetVariable (const char *space, const char *name);
+extern const mxArray *mexGetVariablePtr (const char *space, const char *name);
 
 extern int mexPutVariable (const char *space, const char *name, mxArray *ptr);
 
 /* Memory.  */
 extern void *mxMalloc (int n);
 extern void *mxCalloc (int n, int size);
 extern void mxFree (void *ptr);
 extern void mexMakeArrayPersistent (mxArray *ptr);
@@ -90,60 +92,118 @@ extern mxArray *mxCreateDoubleMatrix (in
 extern mxArray *mxCreateDoubleScalar (double val);
 extern mxArray *mxCreateLogicalScalar (int val);
 
 extern void mxDestroyArray (mxArray *v);
 
 extern mxArray *mxDuplicateArray (const mxArray *v);
 
 extern int mxIsChar (const mxArray *ptr);
-
+extern int mxIsComplex (const mxArray *ptr);
+extern int mxIsDouble (const mxArray *ptr);
+extern int mxIsEmpty (const mxArray *ptr);
+extern int mxIsFull (const mxArray *ptr);
+extern int mxIsLogicalScalar (const mxArray *ptr);
+extern int mxIsNumeric (const mxArray *ptr);
 extern int mxIsSparse (const mxArray *ptr);
 extern int mxIsStruct (const mxArray *ptr);
-extern int mxIsFull (const mxArray *ptr);
-extern int mxIsDouble (const mxArray *ptr);
-extern int mxIsNumeric (const mxArray *ptr);
-extern int mxIsComplex (const mxArray *ptr);
-extern int mxIsEmpty (const mxArray *ptr);
-extern int mxIsLogicalScalar (const mxArray *ptr);
+
 extern int mxGetM (const mxArray *ptr);
 extern int mxGetN (const mxArray *ptr);
 extern int mxGetNumberOfDimensions (const mxArray *ptr);
 extern int mxGetNumberOfElements (const mxArray *ptr);
+
 extern double *mxGetPr (const mxArray *ptr);
+extern double *mxGetPi (const mxArray *ptr);
 
 /* Structure support.  */
-extern int mxIsStruct (const mxArray *ptr);
 extern mxArray *mxGetField (const mxArray *ptr, int index, const char *key);
 extern void mxSetField (mxArray *ptr, int index, const char *key, mxArray *val);
 extern int mxGetNumberOfFields (const mxArray *ptr);
 extern const char *mxGetFieldNameByNumber (const mxArray *ptr, int key_num);
 extern int mxGetFieldNumber (const mxArray *ptr, const char *key);
 extern mxArray *mxGetFieldByNumber (const mxArray *ptr, int index, int key_num);
 extern void mxSetFieldByNumber (mxArray *ptr, int index, int key_num,
 				mxArray *val);
 extern mxArray *mxCreateStructMatrix (int rows, int cols, int num_keys,
 				      const char **keys);
-#if 0
-extern mxArray *mxCreateStructArray (int num_dims, const int  *dims, 
-				     int numkeys, const char **keys);
-#endif
 
-extern double *mxGetPi (const mxArray *ptr);
 extern void mxSetM (mxArray *ptr, int M);
 extern void mxSetN (mxArray *ptr, int N);
 extern void mxSetPr (mxArray *ptr, double *pr);
 extern void mxSetPi (mxArray *ptr, double *pi);
   
 extern int mxGetString (const mxArray *ptr, char *buf, int buflen);
 extern char *mxArrayToString (const mxArray *ptr);
 extern mxArray *mxCreateString (const char *str);
   
 extern double mxGetScalar (const mxArray *ptr);
   
+#if 0
+/* Not implemented.  */
+extern int mxAddField (mxArray *ptr, const char *field_name);
+extern void mxAssert (int expr, char *msg);
+extern void mxAssertS (int expr, char *msg);
+extern int mxCalcSingleSubscript (const mxArray *ptr, int nsubs, int *subs);
+extern void *mxCalloc (size_t n, size_t size);
+extern mxArray *mxCreateCellArray (int ndim, const int *dims);
+extern mxArray *mxCreateCellMatrix (int m, int n);
+extern mxArray *mxCreateCharArray (int ndim, const int *dims);
+extern mxArray *mxCreateCharMatrixFromStrings (int m, const char **str);
+extern mxArray *mxCreateLogicalArray (int ndim, const int *dims);
+extern mxArray *mxCreateLogicalMatrix (int m, int n);
+extern mxArray *mxCreateNumericArray (int ndim, const int *dims, mxClassID class, mxComplexity flag);
+extern mxArray *mxCreateNumericMatrix (int m, int n, mxClassID class, mxComplexity flag);
+extern mxArray *mxCreateSparse (int m, int n, int nzmax, mxComplexity flag);
+extern mxArray *mxCreateSparseLogicalMatrix (int m, int n, int nzmax);
+extern mxArray *mxGetCell (const mxArray *ptr, int idx);
+extern mxChar *mxGetChars (const mxArray *ptr);
+extern mxClassID mxGetClassID (const mxArray *ptr);
+extern const char *mxGetClassName (const mxArray *ptr);
+extern void mxGetData (const mxArray *ptr);
+extern int *mxGetDimensions (const mxArray *ptr);
+extern int mxGetElementSize (const mxArray *ptr);
+extern void *mxGetImagData (const mxArray *ptr);
+extern int *mxGetIr (const mxArray *ptr);
+extern int *mxGetJc (const mxArray *ptr);
+extern mxLogical *mxGetLogicals (const mxArray *ptr);
+extern int mxGetNzmax (const mxArray *ptr);
+extern int mxIsCell (const mxArray *ptr);
+extern int mxIsClass (const mxArray *ptr, const char *name);
+extern int mxIsFromGlobalWS (const mxArray *ptr);
+extern int mxIsInt16 (const mxArray *ptr);
+extern int mxIsInt32 (const mxArray *ptr);
+extern int mxIsInt64 (const mxArray *ptr);
+extern int mxIsInt8 (const mxArray *ptr);
+extern int mxIsLogical (const mxArray *ptr);
+extern int mxIsLogicalScalarTrue (const mxArray *ptr);
+extern int mxIsSingle (const mxArray *ptr);
+extern int mxIsUint16 (const mxArray *ptr);
+extern int mxIsUint32 (const mxArray *ptr);
+extern int mxIsUint64 (const mxArray *ptr);
+extern int mxIsUint8 (const mxArray *ptr);
+extern void mxRemoveField (mxArray *ptr, int num);
+extern void mxSetCell (mxArray *ptr, int idx, mxArray *val);
+extern void mxSetClassName (mxArray *ptr, const char *name);
+extern void mxSetData (mxArray *ptr, void *data);
+extern void mxSetDimensions (mxArray *ptr, int *dims, int ndim);
+extern void mxSetImagData (mxArray *ptr, void *pi);
+extern void mxSetIr (mxArray *ptr, int *ir);
+extern void mxSetJc (mxArray *ptr, int *ir);
+extern void mxSetNzmax (mxArray *ptr, int nzmax);
+
+extern int mexAtExit (void (*f) (void));
+extern const mxArray *mexGet (double handle, const char *property);
+extern int mexIsGlobal (const mxArray *ptr);
+extern int mexIsLocked (void);
+extern void mexLock (void);
+extern int mexSet (double handle, const char *property, mxArray *val);
+extern void mexUnlock (void);
+#endif
+
 #if defined (__cplusplus)
 }
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
