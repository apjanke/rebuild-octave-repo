# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499426480 14400
#      Fri Jul 07 07:21:20 2017 -0400
# Node ID e919cc8d9d92acde790c1455ef6e5ccf798fd1ad
# Parent  1f0daaf8195502da07316caaa327ec4b7d8da590
don't use singleton pattern in pathsearch class; treat pathsep as constant

* dirfns.cc (Fpathsep): Don't allow pathsep to be changed.

* pathsearch.h, pathsearch.cc (directory_path::static_members):
Eliminate singleton class.
(directory_path::path_sep_char (char)): Delete.  Don't allow path
separator character to be changed.

diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -647,55 +647,29 @@ It is @samp{/} (forward slash) under UNI
         error ("filesep: argument must be \"all\"");
 
       retval = octave::sys::file_ops::dir_sep_chars ();
     }
 
   return retval;
 }
 
-DEFUN (pathsep, args, nargout,
+DEFUN (pathsep, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} pathsep ()
-@deftypefnx {} {@var{old_val} =} pathsep (@var{new_val})
-Query or set the character used to separate directories in a path.
+Query the character used to separate directories in a path.
 @seealso{filesep}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin > 1)
+  if (nargin > 0)
     print_usage ();
 
-  octave_value retval;
-
-  if (nargout > 0 || nargin == 0)
-    retval = octave::directory_path::path_sep_str ();
-
-  if (nargin == 1)
-    {
-      std::string sval = args(0).xstring_value ("pathsep: argument must be a single character");
-
-      switch (sval.length ())
-        {
-        case 1:
-          octave::directory_path::path_sep_char (sval[0]);
-          break;
-
-        case 0:
-          octave::directory_path::path_sep_char ('\0');
-          break;
-
-        default:
-          error ("pathsep: argument must be a single character");
-          break;
-        }
-    }
-
-  return retval;
+  return ovl (octave::directory_path::path_sep_str ());
 }
 
 DEFUN (confirm_recursive_rmdir, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} confirm_recursive_rmdir ()
 @deftypefnx {} {@var{old_val} =} confirm_recursive_rmdir (@var{new_val})
 @deftypefnx {} {} confirm_recursive_rmdir (@var{new_val}, "local")
 Query or set the internal variable that controls whether Octave
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -28,53 +28,33 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "kpse.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
-#include "singleton-cleanup.h"
 
 namespace octave
 {
-  directory_path::static_members *directory_path::static_members::instance = nullptr;
-
-  directory_path::static_members::static_members (void)
-    : xpath_sep_char (SEPCHAR), xpath_sep_str (SEPCHAR_STR) { }
-
-  bool
-  directory_path::static_members::instance_ok (void)
+  directory_path::directory_path (const std::string& s, const std::string& d)
+    : m_orig_path (s), m_default_path (d), m_initialized (false),
+      m_expanded_path (), m_path_elements ()
   {
-    bool retval = true;
-
-    if (! instance)
-      {
-        instance = new static_members ();
-
-        if (instance)
-          singleton_cleanup_list::add (cleanup_instance);
-      }
-
-    if (! instance)
-      (*current_liboctave_error_handler)
-        ("unable to create directory_path::static_members object!");
-
-    return retval;
+    if (! m_orig_path.empty ())
+      init ();
   }
 
-  std::list<std::string>
-  directory_path::elements (void)
+  std::list<std::string> directory_path::elements (void)
   {
     return m_initialized ? m_path_elements : std::list<std::string> ();
   }
 
-  std::list<std::string>
-  directory_path::all_directories (void)
+  std::list<std::string> directory_path::all_directories (void)
   {
     std::list<std::string> retval;
 
     if (m_initialized)
       {
         for (const auto& elt : m_path_elements)
           {
             std::string elt_dir = kpse_element_dir (elt);
@@ -82,24 +62,22 @@ namespace octave
             if (! elt_dir.empty ())
               retval.push_back (elt_dir);
           }
       }
 
     return retval;
   }
 
-  std::string
-  directory_path::find_first (const std::string& nm)
+  std::string directory_path::find_first (const std::string& nm)
   {
     return m_initialized ? kpse_path_search (m_expanded_path, nm) : "";
   }
 
-  std::list<std::string>
-  directory_path::find_all (const std::string& nm)
+  std::list<std::string> directory_path::find_all (const std::string& nm)
   {
     return (m_initialized
             ? kpse_all_path_search (m_expanded_path, nm)
             : std::list<std::string> ());
   }
 
   std::string
   directory_path::find_first_of (const std::list<std::string>& names)
@@ -111,18 +89,17 @@ namespace octave
   std::list<std::string>
   directory_path::find_all_first_of (const std::list<std::string>& names)
   {
     return (m_initialized
             ? kpse_all_path_find_first_of (m_expanded_path, names)
             : std::list<std::string> ());
   }
 
-  void
-  directory_path::init (void)
+  void directory_path::init (void)
   {
     static bool octave_kpse_initialized = false;
 
     if (! octave_kpse_initialized)
       {
         std::string val = sys::env::getenv ("KPATHSEA_DEBUG");
 
         if (! val.empty ())
@@ -136,9 +113,19 @@ namespace octave
                           ? m_orig_path
                           : kpse_expand_default (m_orig_path, m_default_path));
 
     for (kpse_path_iterator pi (m_expanded_path); pi != std::string::npos; pi++)
       m_path_elements.push_back (*pi);
 
     m_initialized = true;
   }
+
+  char directory_path::path_sep_char (void)
+  {
+    return SEPCHAR;
+  }
+
+  std::string directory_path::path_sep_str (void)
+  {
+    return SEPCHAR_STR;
+  }
 }
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -31,45 +31,21 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   class
   OCTAVE_API
   directory_path
   {
   public:
 
-    directory_path (const std::string& s = "", const std::string& d = "")
-      : m_orig_path (s), m_default_path (d), m_initialized (false),
-        m_expanded_path (), m_path_elements ()
-    {
-      if (! m_orig_path.empty ())
-        init ();
-    }
+    directory_path (const std::string& s = "", const std::string& d = "");
 
-    directory_path (const directory_path& dp)
-      : m_orig_path (dp.m_orig_path),
-        m_default_path (dp.m_default_path),
-        m_initialized (dp.m_initialized),
-        m_expanded_path (dp.m_expanded_path),
-        m_path_elements (dp.m_path_elements)
-    { }
+    directory_path (const directory_path& dp) = default;
 
-    directory_path& operator = (const directory_path& dp)
-    {
-      if (this != &dp)
-        {
-          m_orig_path = dp.m_orig_path;
-          m_default_path = dp.m_default_path;
-          m_initialized = dp.m_initialized;
-          m_expanded_path = dp.m_expanded_path;
-          m_path_elements = dp.m_path_elements;
-        }
-
-      return *this;
-    }
+    directory_path& operator = (const directory_path& dp) = default;
 
     ~directory_path (void) = default;
 
     void set (const std::string& s)
     {
       m_initialized = false;
       m_orig_path = s;
       init ();
@@ -91,30 +67,21 @@ namespace octave
     find_all_first_of (const std::list<std::string>& names);
 
     void rehash (void)
     {
       m_initialized = false;
       init ();
     }
 
-    static char path_sep_char (void)
-    {
-      return static_members::path_sep_char ();
-    }
+    static char path_sep_char (void);
 
-    static void path_sep_char (char c)
-    {
-      static_members::path_sep_char (c);
-    }
+    // static void path_sep_char (char c);
 
-    static std::string path_sep_str (void)
-    {
-      return static_members::path_sep_str ();
-    }
+    static std::string path_sep_str (void);
 
     static bool is_path_sep (char c) { return c == path_sep_char (); }
 
   private:
 
     // The colon separated list that we were given.
     std::string m_orig_path;
 
@@ -128,64 +95,16 @@ namespace octave
     // A version of the colon separate list on which we have performed
     // tilde, variable, and possibly default path expansion.
     std::string m_expanded_path;
 
     // The elements of the list.
     std::list<std::string> m_path_elements;
 
     void init (void);
-
-    // Use a singleton class for these data members instead of just
-    // making them static members of the directory_path class so that
-    // we can ensure proper initialization.
-
-    class OCTAVE_API static_members
-    {
-    public:
-
-      static_members (void);
-
-      // No copying!
-
-      static_members (const static_members&) = delete;
-
-      static_members& operator = (const static_members&) = delete;
-
-      static char path_sep_char (void)
-      {
-        return instance_ok () ? instance->xpath_sep_char : 0;
-      }
-
-      static void path_sep_char (char c)
-      {
-        if (instance_ok ())
-          {
-            instance->xpath_sep_char = c;
-            instance->xpath_sep_str = std::string (1, c);
-          }
-      }
-
-      static std::string path_sep_str (void)
-      {
-        return instance_ok () ? instance->xpath_sep_str : "";
-      }
-
-    private:
-
-      static static_members *instance;
-
-      static void cleanup_instance (void) { delete instance; instance = 0; }
-
-      static bool instance_ok (void);
-
-      char xpath_sep_char;
-
-      std::string xpath_sep_str;
-    };
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.2, "use 'octave::directory_path' instead")
 typedef octave::directory_path dir_path;
 
