# HG changeset patch
# User jwe
# Date 1064608453 0
#      Fri Sep 26 20:34:13 2003 +0000
# Node ID 7843dfef8dd076ea6c933a8fdf7e87dfd744419b
# Parent  8e1c04e506ce6db49e4691c76f977a693531fe02
[project @ 2003-09-26 20:34:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-09-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (read_mat5_binary_element): Return early if the
+	miMATRIX element has length zero.
+
 2003-09-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-cell.cc (octave_cell::subsasgn): Also attempt empty
 	conversion after extracting single element from cell array to
 	allow things like x{i}.elt = rhs to work.
 
 2003-09-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2595,31 +2595,40 @@ read_mat5_binary_element (std::istream& 
   FOUR_BYTE_INT nc;
   FOUR_BYTE_INT dimension_length;
   int len;
   int element_length;
   std::streampos pos;
   TWO_BYTE_INT number;
   number = *(TWO_BYTE_INT *)"\x00\x01";
 
+  global = false;
+
   // MAT files always use IEEE floating point
   if ((number == 1) ^ swap)
     flt_fmt = oct_mach_info::ieee_big_endian;
   else
     flt_fmt = oct_mach_info::ieee_little_endian;
 
   // element type and length
   if (read_mat5_tag (is, swap, type, element_length))
     return retval;			// EOF
 
   if (type != miMATRIX)
     {
       error ("load: invalid element type");
       goto early_read_error;
     }
+
+  if (element_length == 0)
+    {
+      tc = Matrix ();
+      return retval;
+    }
+
   pos = is.tellg ();
 
   // array flags subelement
   if (read_mat5_tag (is, swap, type, len) || type != miUINT32 || len != 8)
     {
       error ("load: invalid array flags subelement");
       goto early_read_error;
     }
