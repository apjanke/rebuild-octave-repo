# HG changeset patch
# User Rik <rik@octave.org>
# Date 1408377968 25200
#      Mon Aug 18 09:06:08 2014 -0700
# Node ID 26a770330953cd8ad28d9d81a0f4bcde5b9a69d4
# Parent  ffba4ffa1f8583d4e0608d8aa891a8af1a4b85d7
example.m: Add better input validation and %!error tests for that.

* example.m: Add better input validation and %!error tests for that.

diff --git a/scripts/testfun/example.m b/scripts/testfun/example.m
--- a/scripts/testfun/example.m
+++ b/scripts/testfun/example.m
@@ -40,17 +40,34 @@ function [ex_code, ex_idx] = example (na
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (ischar (n))
     n = str2double (n);
   endif
 
+  if (! (isreal (n) && isscalar (n) && n == fix (n)))
+    error ("example: N must be a scalar integer");
+  endif
+
   [code, idx] = test (name, "grabdemo");
+
+  if (idx == -1)
+    warning ("example: no function %s found", name);
+    return;
+  elseif (isempty (idx))
+    warning ("example: no example available for %s", name);
+    return;
+  elseif (n >= length (idx))
+    warning ("example: only %d examples available for %s",
+             length (idx) - 1, name);
+    return;
+  endif
+
   if (nargout > 0)
     if (n > 0)
       if (n <= length (idx))
         ex_code = code(idx(n):idx(n+1)-1);
         ex_idx = [1, length(ex_code)+1];
       else
         ex_code = "";
         ex_idx = [];
@@ -60,45 +77,45 @@ function [ex_code, ex_idx] = example (na
       ex_idx = idx;
     endif
   else
     if (n > 0)
       doidx = n;
     else
       doidx = 1:length (idx) - 1;
     endif
-    if (isempty (idx))
-      warning ("no example available for %s", name);
-      return;
-    elseif (n >= length (idx))
-      warning ("only %d examples available for %s", length (idx) - 1, name);
-      return;
-    endif
 
     for i = 1:length (doidx)
       block = code(idx(doidx(i)):idx(doidx(i)+1)-1);
       printf ("%s example %d:%s\n\n", name, doidx(i), block);
     endfor
   endif
 
 endfunction
 
 
 ## WARNING: don't modify the demos without modifying the tests!
 %!demo
 %! example ("example");
 
 %!demo
 %! clf;
-%! t = 0:0.01:2*pi;  x = sin (t);
+%! t = 0:0.01:2*pi;
+%! x = sin (t);
 %! plot (t,x)
 
 %!assert (example ("example", 1), "\n example (\"example\");");
+
 %!test
 %! [code, idx] = example ("example");
 %! assert (code, ...
-%!         "\n example (\"example\");\n clf;\n t = 0:0.01:2*pi;  x = sin (t);\n plot (t,x)");
+%!         "\n example (\"example\");\n clf;\n t = 0:0.01:2*pi;\n x = sin (t);\n plot (t,x)");
 %! assert (idx, [1, 23, 73]);
 
 %% Test input validation
-%!error example
+%!error example ()
 %!error example ("example", 3, 5)
+%!error <N must be a scalar integer> example ("example", {1})
+%!error <N must be a scalar integer> example ("example", ones (2,2))
+%!error <N must be a scalar integer> example ("example", 1.5)
+%!warning <no function .* found> example ("_%NOT_A_FUNCTION%_");
+%!warning <only 2 examples available for example> example ("example", 10);
 
