# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550853592 0
#      Fri Feb 22 16:39:52 2019 +0000
# Node ID 2d65d46c620b3e95bc0479c106551b2d522abe30
# Parent  568c2ab2782d37b75e79c81e7d0692d863d46d7a
* ov-classdef.h: Style fixes.

diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -52,20 +52,24 @@ public:
 
   octave_classdef (const octave_classdef&) = delete;
 
   octave_classdef& operator = (const octave_classdef&) = delete;
 
   ~octave_classdef (void) = default;
 
   octave_base_value * clone (void) const
-  { return new octave_classdef (object.clone ()); }
+  {
+    return new octave_classdef (object.clone ());
+  }
 
   octave_base_value * empty_clone (void) const
-  { return new octave_classdef (object.empty_clone ()); }
+  {
+    return new octave_classdef (object.empty_clone ());
+  }
 
   octave_classdef * classdef_object_value (bool = false) { return this; }
 
   octave::cdef_object get_object (void) const { return object; }
 
   octave::cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
@@ -127,16 +131,17 @@ public:
   }
 
   static octave_value superclass_ref (const std::string& meth,
                                       const std::string& cls);
 
   static octave_value metaclass_query (const std::string& cls);
 
 public:
+
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return object.class_name (); }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
   static std::string static_class_name (void) { return "<unknown>"; }
   static void register_type (octave::type_info&);
@@ -150,25 +155,26 @@ private:
   static const std::string t_name;
 };
 
 OCTINTERP_API void install_classdef (octave::interpreter& interp);
 
 class octave_classdef_meta : public octave_function
 {
 public:
+
   octave_classdef_meta (const octave::cdef_meta_object& obj)
-    : object (obj) { }
+    : object (obj)
+  { }
 
   octave_classdef_meta (const octave_classdef_meta&) = delete;
 
   octave_classdef_meta& operator = (const octave_classdef_meta&) = delete;
 
-  ~octave_classdef_meta (void)
-  { object.meta_release (); }
+  ~octave_classdef_meta (void) { object.meta_release (); }
 
   bool is_classdef_meta (void) const { return true; }
 
   bool is_package (void) const { return object.is_package(); }
 
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
@@ -195,18 +201,16 @@ public:
 
   bool is_classdef_constructor (const std::string& cname = "") const;
 
 private:
 
   octave::cdef_meta_object object;
 };
 
-//----------------------------------------------------------------------------
-
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
   octave_classdef_superclass_ref (void) = delete;
 
   octave_classdef_superclass_ref (const std::string& meth,
                                   const std::string& cls)
     : octave_function (), m_method_name (meth), m_class_name (cls)
