# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1382907107 -3600
#      Sun Oct 27 21:51:47 2013 +0100
# Node ID 016634fb3de73c93ce95bda26a1fc965ed012163
# Parent  5864220974dc38e323ff3bc9e185556479c1d3e4
imrpove conversion of link formats in documentation browser

* parser.cc(replace_links): replacements of line breaks without breaking
  the format (left margin)

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -275,90 +275,86 @@ replace_links (QString& text)
   QRegExp re ("(\\*[N|n]ote|\n\\*)([ |\n]+)([^:]+):([^:\\.,]*)([:,\\.]+)");
   int i = 0, f;
 
   while ( (i = re.indexIn (text,i)) != -1)
     {
       QString type     = re.cap (1);
       QString note     = re.cap (3);
       QString url_link = re.cap (4);
-      QString link     = re.cap (4);
       QString term     = re.cap (5);
 
-      QRegExp regexp_link = QRegExp("([\\s]*)XREF([^\\s]*)");
-      if (regexp_link.indexIn (link) != -1)
-        {
-          int ix = regexp_link.cap (1).indexOf ("\n");
-          if (ix  != -1)
-            term = term + "\n"
-                   + QString (regexp_link.cap (1).size () - ix -1,' ');
-        }
-
       if (url_link.isEmpty ())
         {
           url_link = note;
         }
 
+      term.replace(":","");
+      note.replace(":","");
+      note.replace (QRegExp ("`([^']+)'"),"\\1");   // no extra format in links
+
+      QRegExp re_break ("(\n[ ]*)");
+
+      if (note == "fig" || note == "tab")
+        url_link.prepend("#");
+
+      QString href;
+      if (type == "\n*")
+        href="\n";
+
+      if (re_break.indexIn (url_link) != -1)
+        term += re_break.cap (1);
+      else if (re_break.indexIn (re.cap (2)) != -1)
+        href = re_break.cap (1) + " ";
+      else if (re_break.indexIn (note) != -1)
+        term += re_break.cap (1);
+      note.replace(re_break,"&nbsp;");
+
       url_link = url_link.trimmed ();
       url_link.replace ("\n"," ");
       url_link.replace (QRegExp ("  +")," ");
       url_link.replace ("<b>","");
       url_link.replace ("</b>","");
       url_link = QUrl::toPercentEncoding (url_link, "", "'");
 
-      QString href;
-      if (type=="\n*")
-        {
-          href="\n<img src=':/actions/icons/bookmark.png' width=10/>";
-        }
-      else
-        {
-          href="<img src=':/actions/icons/bookmark.png' width=10/>";
-        }
-
-      term.replace(":","");
-      note.replace(":","");
-
-      if (note == "fig")
-        url_link.prepend("#");
-
+      href += "<img src=':/actions/icons/bookmark.png' width=10/>";
       href +=  "&nbsp;<a href='" + url_link + "'>" + note + "</a>" + term;
       f = re.matchedLength ();
       text.replace (i,f,href);
       i += href.size ();
     }
 }
 
 static void
 replace_colons (QString& text)
 {
   QRegExp re ("`([^']+)'");
   int i = 0, f;
   while ( (i = re.indexIn (text, i)) != -1)
     {
       QString t = re.cap (1);
-      QString bold = "<font style=\"color:#00AA00;font-weight:bold\">" + t + "</font>";
+      QString bold = "<font style=\"color:SteelBlue;font-weight:bold\">" + t + "</font>";
 
       f = re.matchedLength ();
       text.replace (i,f,bold);
       i += bold.size ();
     }
 }
 
 static void
 info_to_html (QString& text)
 {
   text.replace ("&", "&amp;");
   text.replace ("<", "&lt;");
   text.replace (">", "&gt;");
 
   text.replace ("\n* Menu:", "\n<font style=\"color:DarkRed;font-weight:bold\">Menu:</font>");
   text.replace ("See also:", "<font style=\"color:DarkRed;font-style:italic;font-weight:bold\">See also:</font>");
+  replace_links (text);
   replace_colons (text);
-  replace_links (text);
 }
 
 QString
 parser::node_text_to_html (const QString& text_arg, int anchorPos,
                            const QString& anchor)
 {
   QString text = text_arg;
 
