# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1333817033 25200
#      Sat Apr 07 09:43:53 2012 -0700
# Node ID 6d5c951ec5204b469a08fd0cf0429dc6b7d27bb0
# Parent  8150ccfffa22e215b822123c57a6d91e3d4347de
Add 'emptymatch', 'noemptymatch' options to regular expressions.

* NEWS: Announce new options.

* liboctave/regexp.cc (regexp::match): Add processing option for zero length
matches.

* liboctave/regexp.h (class opts): Add emptymatch option to constructors,
setter/getter routines, private variable.

* DLD-FUNCTIONS/regexp.cc (parse_options): Add emptymatch to options parsing routine.

* DLD-FUNCTIONS/regexp.cc (octregexp): Ignore emptymatch when determing output ordering
of arguments.

* DLD-FUNCTIONS/regexp.cc (Fregexp): Add new options to docstring.  Add %!tests for new
behavior.

* DLD-FUNCTIONS/regexp.cc (Fregexprep): Add %!tests for new behavior.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,23 @@
 Summary of important user-visible changes for version 3.8:
 ---------------------------------------------------------
 
+ ** 'emptymatch', 'noemptymatch' options added to regular expressions.
+
+    With this addition Octave now accepts the entire set of Matlab options
+    for regular expressions.  'noemptymatch' is the default, but 'emptymatch'
+    has certain uses where you need to match an assertion rather than actual
+    characters.  For example, 
+
+    regexprep ('World', '^', 'Hello ', 'emptymatch')
+      => Hello World
+
+    where the pattern is actually the assertion '^' or start-of-line.
+
  ** Redundant terminal comma accepted by parser
 
     A redundant terminal comma is now accepted in matrix
     definitions which allows writing code such as 
 
     [a,...
      b,...
      c,...
diff --git a/liboctave/regexp.cc b/liboctave/regexp.cc
--- a/liboctave/regexp.cc
+++ b/liboctave/regexp.cc
@@ -310,19 +310,19 @@ regexp::match (const std::string& buffer
         {
           (*current_liboctave_error_handler)
             ("%s: internal error calling pcre_exec; error code from pcre_exec is %i",
              who.c_str (), matches);
           return retval;
         }
       else if (matches == PCRE_ERROR_NOMATCH)
         break;
-      else if (ovector[1] <= ovector[0])
+      else if (ovector[1] <= ovector[0] && ! options.emptymatch ())
         {
-          // Zero sized match.  Skip to next char.
+          // Zero length match.  Skip to next char.
           idx = ovector[0] + 1;
           if (idx < buffer.length ())
             continue;
           else
             break;
         }
       else
         {
@@ -395,17 +395,26 @@ regexp::match (const std::string& buffer
 
           std::string match_string = std::string (*listptr);
 
           pcre_free_substring_list (listptr);
 
           regexp::match_element new_elem (named_tokens, tokens, match_string,
                                           token_extents, start, end);
           lst.push_back (new_elem);
-          idx = ovector[1];
+
+          if (ovector[1] <= ovector[0])
+          {
+            // Zero length match.  Skip to next char.
+            idx = ovector[0] + 1;
+            if (idx <= buffer.length ())
+              continue;
+          }
+          else 
+            idx = ovector[1];
 
           if (options.once () || idx >= buffer.length ())
             break;
         }
     }
 
   retval = regexp::match_data (lst, named_pats);
 
diff --git a/liboctave/regexp.h b/liboctave/regexp.h
--- a/liboctave/regexp.h
+++ b/liboctave/regexp.h
@@ -90,58 +90,64 @@ public:
                        const std::string& replacement);
 
   class opts
   {
   public:
 
     opts (void)
       : x_case_insensitive (false), x_dotexceptnewline (false),
-        x_freespacing (false), x_lineanchors (false), x_once (false) { }
+        x_emptymatch (false), x_freespacing (false), x_lineanchors (false),
+        x_once (false) { }
 
     opts (const opts& o)
       : x_case_insensitive (o.x_case_insensitive),
         x_dotexceptnewline (o.x_dotexceptnewline),
+        x_emptymatch (o.x_emptymatch),
         x_freespacing (o.x_freespacing),
         x_lineanchors (o.x_lineanchors),
         x_once (o.x_once)
     { }
 
     opts& operator = (const opts& o)
     {
       if (this != &o)
         {
           x_case_insensitive = o.x_case_insensitive;
           x_dotexceptnewline = o.x_dotexceptnewline;
+          x_emptymatch = o.x_emptymatch;
           x_freespacing = o.x_freespacing;
           x_lineanchors = o.x_lineanchors;
           x_once = o.x_once;
         }
 
       return *this;
     }
 
     ~opts (void) { }
 
     void case_insensitive (bool val) { x_case_insensitive = val; }
     void dotexceptnewline (bool val) { x_dotexceptnewline = val; }
+    void emptymatch (bool val) { x_emptymatch = val; }
     void freespacing (bool val) { x_freespacing = val; }
     void lineanchors (bool val) { x_lineanchors = val; }
     void once (bool val) { x_once = val; }
 
     bool case_insensitive (void) const { return x_case_insensitive; }
     bool dotexceptnewline (void) const { return x_dotexceptnewline; }
+    bool emptymatch (void) const { return x_emptymatch; }
     bool freespacing (void) const { return x_freespacing; }
     bool lineanchors (void) const { return x_lineanchors; }
     bool once (void) const { return x_once; }
 
   private:
 
     bool x_case_insensitive;
     bool x_dotexceptnewline;
+    bool x_emptymatch;
     bool x_freespacing;
     bool x_lineanchors;
     bool x_once;
   };
 
   class match_element
   {
   public:
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -72,22 +72,26 @@ parse_options (regexp::opts& options, co
       else if (str.find ("ignorecase", 0) == 0)
         options.case_insensitive (true);
       else if (str.find ("dotall", 0) == 0)
         options.dotexceptnewline (false);
       else if (str.find ("stringanchors", 0) == 0)
         options.lineanchors (false);
       else if (str.find ("literalspacing", 0) == 0)
         options.freespacing (false);
+      else if (str.find ("noemptymatch", 0) == 0)
+        options.emptymatch (false);
       else if (str.find ("dotexceptnewline", 0) == 0)
         options.dotexceptnewline (true);
       else if (str.find ("lineanchors", 0) == 0)
         options.lineanchors (true);
       else if (str.find ("freespacing", 0) == 0)
         options.freespacing (true);
+      else if (str.find ("emptymatch", 0) == 0)
+        options.emptymatch (true);
       else if (str.find ("start", 0) == 0
                || str.find ("end", 0) == 0
                || str.find ("tokenextents", 0) == 0
                || str.find ("match", 0) == 0
                || str.find ("tokens", 0) == 0
                || str.find ("names", 0) == 0
                || str.find ("split", 0) == 0)
         extra_args = true;
@@ -252,17 +256,19 @@ octregexp (const octave_value_list &args
               if (str.find ("once", 0) == 0
                   || str.find ("stringanchors", 0) == 0
                   || str.find ("lineanchors", 0) == 0
                   || str.find ("matchcase", 0) == 0
                   || str.find ("ignorecase", 0) == 0
                   || str.find ("dotall", 0) == 0
                   || str.find ("dotexceptnewline", 0) == 0
                   || str.find ("literalspacing", 0) == 0
-                  || str.find ("freespacing", 0) == 0)
+                  || str.find ("freespacing", 0) == 0
+                  || str.find ("noemptymatch", 0) == 0
+                  || str.find ("emptymatch", 0) == 0)
                 continue;
               else if (str.find ("start", 0) == 0)
                 k = 0;
               else if (str.find ("end", 0) == 0)
                 k = 1;
               else if (str.find ("tokenextents", 0) == 0)
                 k = 2;
               else if (str.find ("match", 0) == 0)
@@ -483,18 +489,18 @@ Match between @var{m} and @var{n} times\
 List operators.  The pattern will match any character listed between \"[\"\n\
 and \"]\".  If the first character is \"^\" then the pattern is inverted and\n\
 any character except those listed between brackets will match.\n\
 \n\
 Escape sequences defined below can also be used inside list\n\
 operators.  For example, a template for a floating point number might be\n\
 @code{[-+.\\d]+}.\n\
 \n\
-@item ()\n\
-Grouping operator\n\
+@item () (?:)\n\
+Grouping operator.  The first form, parentheses only, also creates a token.\n\
 \n\
 @item |\n\
 Alternation operator.  Match one of a choice of regular expressions.  The\n\
 alternatives must be delimited by the grouping operator @code{()} above.\n\
 \n\
 @item ^ $\n\
 Anchoring operators.  Requires pattern to occur at the start (@code{^}) or\n\
 end (@code{$}) of the string.\n\
@@ -557,17 +563,18 @@ A cell array of the text of each match\n
 A cell array of the text of each token matched\n\
 \n\
 @item nm\n\
 A structure containing the text of each matched named token, with the name\n\
 being used as the fieldname.  A named token is denoted by\n\
 @code{(?<name>@dots{})}.\n\
 \n\
 @item sp\n\
-A cell array of the text not returned by match.\n\
+A cell array of the text not returned by match, i.e., what remains if you\n\
+split the string based on @var{pat}.\n\
 @end table\n\
 \n\
 Particular output arguments, or the order of the output arguments, can be\n\
 selected by additional @var{opt} arguments.  These are strings and the\n\
 correspondence between the output arguments and the optional argument\n\
 are\n\
 \n\
 @multitable @columnfractions 0.2 0.3 0.3 0.2\n\
@@ -625,16 +632,25 @@ used in pattern matching.  (default)\n\
 Alternatively, use (?-x) in the pattern.\n\
 \n\
 @item freespacing\n\
 The pattern may include arbitrary whitespace and also comments beginning with\n\
 the character @samp{#}.\n\
 \n\
 Alternatively, use (?x) in the pattern.\n\
 \n\
+@item noemptymatch\n\
+Zero-length matches are not returned.  (default)\n\
+\n\
+@item emptymatch\n\
+Return zero-length matches.\n\
+\n\
+@code{regexp ('a', 'b*', 'emptymatch'} returns @code{[1 2]} because there are\n\
+zero or more 'b' characters at positions 1 and end-of-string.\n\
+\n\
 @end table\n\
 @seealso{regexpi, strfind, regexprep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
@@ -805,16 +821,56 @@ Alternatively, use (?x) in the pattern.\
 
 %!assert (regexp ("this word", 's w'), 4)
 %!assert (regexp ("this word", 's w', 'literalspacing'), 4)
 %!test
 %! assert (regexp ("this word", '(?-x)s w', 'literalspacing'), 4);
 %! assert (regexp ("this word", 's w', 'freespacing'), zeros (1,0));
 %! assert (regexp ("this word", '(?x)s w'), zeros (1,0));
 
+%!test
+%! [s, e, te, m, t, nm, sp] = regexp ('OCTAVE', '[VOCT]*', 'noemptymatch');
+%! assert (s, [1 5]);
+%! assert (e, [3 5]);
+%! assert (te, { zeros(0,2), zeros(0,2) });
+%! assert (m, { "OCT", "V" });
+%! assert (t, { cell(1,0), cell(1,0) });
+%! assert (isempty (fieldnames (nm)));
+%! assert (sp, { "", "A", "E" });
+
+%!test
+%! [s, e, te, m, t, nm, sp] = regexp ('OCTAVE', '([VOCT]*)', 'noemptymatch');
+%! assert (s, [1 5]);
+%! assert (e, [3 5]);
+%! assert (te, { [1 3], [5 5] });
+%! assert (m, { "OCT", "V" });
+%! assert (t, { {"OCT"}, {"V"} });
+%! assert (isempty (fieldnames (nm)));
+%! assert (sp, { "", "A", "E" });
+
+%!test
+%! [s, e, te, m, t, nm, sp] = regexp ('OCTAVE', '[VOCT]*', 'emptymatch');
+%! assert (s, [1 4 5 6 7]);
+%! assert (e, [3 3 5 5 6]);
+%! assert (te, repmat ({zeros(0,2)}, [1, 5]));
+%! assert (m, { "OCT", "", "V", "", "" });
+%! assert (t, repmat({cell(1,0)}, [1, 5]));
+%! assert (isempty (fieldnames (nm)));
+%! assert (sp, { "", "", "A", "", "E", "" });
+
+%!test
+%! [s, e, te, m, t, nm, sp] = regexp ('OCTAVE', '([VOCT]*)', 'emptymatch');
+%! assert (s, [1 4 5 6 7]);
+%! assert (e, [3 3 5 5 6]);
+%! assert (te, { [1 3], [4 3], [5 5], [6 5], [7 6] });
+%! assert (m, { "OCT", "", "V", "", "" });
+%! assert (t, { {"OCT"}, {""}, {"V"}, {""}, {""} });
+%! assert (isempty (fieldnames (nm)));
+%! assert (sp, { "", "", "A", "", "E", "" });
+
 %!error regexp ('string', 'tri', 'BadArg')
 %!error regexp ('string')
 
 %!assert (regexp ({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'}, '-'), {6;[1,5,9];zeros(1,0)})
 %!assert (regexp ({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'}, {'-';'f';'q'}), {6;[3,7];[1,9]})
 %!assert (regexp ('Strings', {'t','s'}), {2, 7})
 
 ## Test case for lookaround operators
@@ -1208,16 +1264,20 @@ This option is present for compatibility
 %! data = "Bob Smith\nDavid Hollerith\nSam Jenkins";
 %! result = "Smith, Bob\nHollerith, David\nJenkins, Sam";
 %! t = regexprep (data, '(?m)^(\w+)\s+(\w+)$', '$2, $1');
 %! assert (t, result);
 
 ## Return the original if no match
 %!assert (regexprep ('hello', 'world', 'earth'), 'hello')
 
+## Test emptymatch
+%!assert (regexprep ('World', '^', 'Hello '), 'World')
+%!assert (regexprep ('World', '^', 'Hello ', 'emptymatch'), 'Hello World')
+
 ## Test a general replacement
 %!assert (regexprep ("a[b]c{d}e-f=g", "[^A-Za-z0-9_]", "_"), "a_b_c_d_e_f_g")
 
 ## Make sure it works at the beginning and end
 %!assert (regexprep ("a[b]c{d}e-f=g", "a", "_"), "_[b]c{d}e-f=g")
 %!assert (regexprep ("a[b]c{d}e-f=g", "g", "_"), "a[b]c{d}e-f=_")
 
 ## Options
