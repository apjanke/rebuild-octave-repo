# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313409433 -7200
#      Mon Aug 15 13:57:13 2011 +0200
# Node ID 269ef479ecbf49e26580eafc03be012ba5b1ae19
# Parent  3a1ba08ad3923e7c695f7883ed6c50dee11f6ed4
IRC client is now usable again.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -206,18 +206,16 @@ QWidget (parent)
 
   if (connectOnStartup)
     connectToServer ();
 }
 
 void
 IRCWidget::connectToServer ()
 {
-  showStatusMessage ("<font color=\"#990000\"><b>IMPORTANT: THE BACKEND FOR THE IRC CHAT HAS BEEN REWRITTEN COMPLETELY TO MAKE IT PLATFORM-INDEPENDENT.</b></font>");
-  showStatusMessage ("<font color=\"#990000\"><b>IT WILL PROBABLY NOT WORK AS IT SHOULD UNTIL ALL BUGS HAVE BEEN FIXED.</b></font>");
   showStatusMessage ("Looking up irc.freenode.net.");
   QHostInfo hostInfo = QHostInfo::fromName ("irc.freenode.net");
   QList<QHostAddress> hostAddresses = hostInfo.addresses();
   if (hostAddresses.isEmpty ())
     {
       showStatusMessage ("Failed to lookup irc.freenode.net.");
     }
   else
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -23,17 +23,17 @@
 #include <QDesktopServices>
 #include <QFileDialog>
 #include "MainWindow.h"
 #include "FileEditorMdiSubWindow.h"
 #include "ImageViewerMdiSubWindow.h"
 #include "SettingsDialog.h"
 #include "cmd-edit.h"
 
-#define VERSION_STRING "Octave GUI (0.7.6)"
+#define VERSION_STRING "Octave GUI (0.8.0)"
 
 MainWindow::MainWindow (QWidget * parent):QMainWindow (parent)
 {
   construct ();
   OctaveLink::instance ()->launchOctave();
 }
 
 MainWindow::~MainWindow ()
diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -115,17 +115,21 @@ IRCServerMessage::IRCServerMessage (cons
                   buffer.append (serverMessage.at (position));
                 }
             }
         }
       position++;
     }
 
   if (!buffer.isEmpty ())
-    m_parameters.append (buffer);
+    {
+      // We need to chop off \r\n here.
+      buffer.chop (2);
+      m_parameters.append (buffer);
+    }
 }
 
 int
 IRCServerMessage::numericValue ()
 {
   if (m_isNumeric)
     return m_codeNumber;
   return -1;
@@ -383,26 +387,27 @@ IRCClientImpl::handleIncomingLine (const
               case IRCError::NoMessageOfTheDay:
                 break;
               case IRCReply::NoTopic:
               case IRCReply::Topic:
                 break;
               case IRCReply::NameReply:
                 QString channel = ircServerMessage.parameter (2);
                 QString nickList = ircServerMessage.parameter (3);
+                emit debugMessage (nickList);
                 ircChannelProxy (channel)->setNickList (nickList.split (QRegExp ("\\s+"), QString::SkipEmptyParts));
                 break;
             }
         }
       else
         {
           QString command = ircServerMessage.command ();
           if (command == IRCCommand::Nick)
             {
-              handleNicknameChanged (ircServerMessage.parameter (0), ircServerMessage.parameter (1));
+              handleNicknameChanged (ircServerMessage.nick(), ircServerMessage.parameter (0));
             }
           else if (command == IRCCommand::Quit)
             {
               handleUserQuit (ircServerMessage.nick (), ircServerMessage.parameter (0));
             }
           else if (command == IRCCommand::Join)
             {
               handleUserJoined(ircServerMessage.nick (), ircServerMessage.parameter (0));
@@ -416,34 +421,28 @@ IRCClientImpl::handleIncomingLine (const
             }
           else if (command == IRCCommand::Mode)
             {
               emit debugMessage ("WRITEME: Received mode.");
               //emit mode (&ircEvent);
             }
           else if (command == IRCCommand::Topic)
             {
-              emit debugMessage ("WRITEME: Received topic.");
-              //emit topic (ircEvent.getNick ().toStdString ().c_str (),
-              //            ircEvent.getParam (0).toStdString ().c_str (),
-              //            ircEvent.getParam (1).toStdString ().c_str ());
+              emit debugMessage
+                (QString("WRITEME: Received topic: %1")
+                  .arg (ircServerMessage.parameter (0)));
             }
           else if (command == IRCCommand::Kick)
             {
-              emit debugMessage ("WRITEME: Received kick.");
-              //emit kick (ircEvent.getNick ().toStdString ().c_str (),
-              //           ircEvent.getParam (0).toStdString ().c_str (),
-              //           ircEvent.getParam (1).toStdString ().c_str (),
-              //           ircEvent.getParam (2).toStdString ().c_str ());
+              emit debugMessage ("WRITEME: Received kick command.");
             }
           else if (command == IRCCommand::Invite)
             {
-              emit debugMessage ("WRITEME: Received invite.");
-              //emit invite (ircEvent.getNick ().toStdString ().c_str (),
-              //             ircEvent.getParam (1).toStdString ().c_str ());
+              emit debugMessage ("WRITEME: Received invite command.");
+
             }
           else if (command == IRCCommand::PrivateMessage)
             {
               emit message (ircServerMessage.parameter (0), ircServerMessage.nick (), ircServerMessage.parameter (1));
             }
           else if (command == IRCCommand::Notice)
             {
               emit notification (ircServerMessage.nick ().toStdString ().c_str (),
@@ -455,17 +454,16 @@ IRCClientImpl::handleIncomingLine (const
             }
           else if (command == IRCCommand::Error)
             {
               emit error (ircServerMessage.parameter (0));
             }
           else
             {
               emit debugMessage (QString("FIXME: Received unknown reply: %1").arg(command));
-              // not recognized.
             }
         }
     }
 }
 
 void
 IRCClientImpl::sendLine (const QString &line)
 {
