# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1467564883 25200
#      Sun Jul 03 09:54:43 2016 -0700
# Node ID e0dbd81fd9b1438cae422fb7ac98835793ef7f77
# Parent  ce69151a2d1b02ec9a841e61c1f4b5c7cef17e00
provide wrapper for frexp and frexpf (bug #48363)

* bootstrap.conf (gnulib_modules): Add modules frexp and frexpf.
* liboctave/wrappers/math-wrappers.c, liboctave/wrappers/math-wrappers.h:
New files.
* liboctave/wrappers/module.mk: Add math-wrappers.{c,h}.

* lo-mappers.cc, lo-mappers.h (octave::math::frexp): New functions.
(octave::math::log2): Use them instead of std::frexp.

* data.cc (Feps): Use octave::math::frexp instead of std::frexp.
* oct-inttypes.cc (dblesplit): Likewise.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -31,16 +31,18 @@ gnulib_modules="
   crypto/sha1
   crypto/sha256
   crypto/sha512
   dup2
   fcntl
   filemode
   fnmatch
   fpucw
+  frexp
+  frexpf
   fseek
   ftell
   ftruncate
   getcwd
   gethostname
   getopt-gnu
   getrusage
   gettimeofday
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4533,17 +4533,17 @@ type and may be either @qcode{"double"} 
               float val = ::fabsf (x(i));
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
               else if (val < std::numeric_limits<float>::min ())
                 epsval(i) = powf (2.0, -149e0);
               else
                 {
                   int expon;
-                  std::frexp (val, &expon);
+                  octave::math::frexp (val, &expon);
                   epsval(i) = std::pow (2.0f,
                                         static_cast<float> (expon - 24));
                 }
             }
 
           retval = epsval;
         }
       else
@@ -4557,17 +4557,17 @@ type and may be either @qcode{"double"} 
               double val = ::fabs (x(i));
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
               else if (val < std::numeric_limits<double>::min ())
                 epsval(i) = pow (2.0, -1074e0);
               else
                 {
                   int expon;
-                  std::frexp (val, &expon);
+                  octave::math::frexp (val, &expon);
                   epsval(i) = std::pow (2.0,
                                         static_cast<double> (expon - 53));
                 }
 
               retval = epsval;
             }
         }
     }
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <cfloat>
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-specfun.h"
 #include "lo-utils.h"
+#include "math-wrappers.h"
 #include "oct-cmplx.h"
 
 #include "f77-fcn.h"
 
 // FIXME: We used to have this situation:
 //
 //   Functions that forward to gnulib belong here so we can keep
 //   gnulib:: out of lo-mappers.h.
@@ -252,23 +253,23 @@ namespace octave
       static float ln2 = log (2.0f);
 #endif
       return std::log (x) / ln2;
     }
 
     double
     log2 (double x, int& exp)
     {
-      return std::frexp (x, &exp);
+      return frexp (x, &exp);
     }
 
     float
     log2 (float x, int& exp)
     {
-      return std::frexp (x, &exp);
+      return frexp (x, &exp);
     }
 
     Complex
     log2 (const Complex& x, int& exp)
     {
       double ax = std::abs (x);
       double lax = log2 (ax, exp);
       return (ax != lax) ? (x / ax) * lax : x;
@@ -327,16 +328,26 @@ namespace octave
     float trunc (float x) { return std::trunc (x); }
 
     double floor (double x) { return std::floor (x); }
     float floor (float x) { return std::floor (x); }
 
     double round (double x) { return std::round (x); }
     float round (float x) { return std::round (x); }
 
+    double frexp (double x, int *expptr)
+    {
+      return octave_frexp_wrapper (x, expptr);
+    }
+
+    float frexp (float x, int *expptr)
+    {
+      return octave_frexpf_wrapper (x, expptr);
+    }
+
     bool
     isnan (double x)
     {
 #if defined (HAVE_CMATH_ISNAN)
       return std::isnan (x);
 #else
       return lo_ieee_isnan (x);
 #endif
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -173,16 +173,19 @@ namespace octave
 
     template <typename T>
     std::complex<T>
     roundb (const std::complex<T>& x)
     {
       return std::complex<T> (roundb (real (x)), roundb (imag (x)));
     }
 
+    extern OCTAVE_API double frexp (double x, int *expptr);
+    extern OCTAVE_API float frexp (float x, int *expptr);
+
     inline bool isnan (bool) { return false; }
     inline bool isnan (char) { return false; }
     extern OCTAVE_API bool isnan (double x);
     extern OCTAVE_API bool isnan (float x);
 
     template <typename T>
     bool
     isnan (const std::complex<T>& x)
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -559,17 +559,17 @@ umul128 (uint64_t x, uint64_t y, uint32_
   w[3] = a;
 }
 
 // Splits a double into bool sign, unsigned 64-bit mantissa and int exponent
 static void
 dblesplit (double x, bool& sign, uint64_t& mtis, int& exp)
 {
   sign = x < 0; x = fabs (x);
-  x = std::frexp (x, &exp);
+  x = octave::math::frexp (x, &exp);
   exp -= 52;
   mtis = static_cast<uint64_t> (ldexp (x, 52));
 }
 
 // Gets a double number from a
 // 32-bit unsigned integer mantissa, exponent, and sign.
 static double
 dbleget (bool sign, uint32_t mtis, int exp)
diff --git a/liboctave/wrappers/math-wrappers.c b/liboctave/wrappers/math-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/math-wrappers.c
@@ -0,0 +1,46 @@
+/*
+
+Copyright (C) 2016 Mike Miller
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// These functions may be provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <math.h>
+
+#include "math-wrappers.h"
+
+double
+octave_frexp_wrapper (double x, int *expptr)
+{
+  return frexp (x, expptr);
+}
+
+float
+octave_frexpf_wrapper (float x, int *expptr)
+{
+  return frexpf (x, expptr);
+}
diff --git a/liboctave/wrappers/math-wrappers.h b/liboctave/wrappers/math-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/math-wrappers.h
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2016 Mike Miller
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_math_wrappers_h)
+#define octave_math_wrappers_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+double
+octave_frexp_wrapper (double x, int *expptr);
+
+float
+octave_frexpf_wrapper (float x, int *expptr);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -5,16 +5,17 @@ NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/dirent-wrappers.h \
   liboctave/wrappers/fcntl-wrappers.h \
   liboctave/wrappers/filepos-wrappers.h \
   liboctave/wrappers/fpucw-wrappers.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
   liboctave/wrappers/getopt-wrapper.h \
   liboctave/wrappers/glob-wrappers.h \
   liboctave/wrappers/hash-wrappers.h \
+  liboctave/wrappers/math-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/octave-popen2.h \
   liboctave/wrappers/putenv-wrapper.h \
   liboctave/wrappers/set-program-name-wrapper.h \
   liboctave/wrappers/signal-wrappers.h \
   liboctave/wrappers/stat-wrappers.h \
@@ -38,16 +39,17 @@ WRAPPERS_SRC = \
   liboctave/wrappers/dirent-wrappers.c \
   liboctave/wrappers/fcntl-wrappers.c \
   liboctave/wrappers/filepos-wrappers.c \
   liboctave/wrappers/fpucw-wrappers.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/getopt-wrapper.c \
   liboctave/wrappers/glob-wrappers.c \
   liboctave/wrappers/hash-wrappers.c \
+  liboctave/wrappers/math-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/octave-popen2.c \
   liboctave/wrappers/putenv-wrapper.c \
   liboctave/wrappers/set-program-name-wrapper.c \
   liboctave/wrappers/signal-wrappers.c \
   liboctave/wrappers/stat-wrappers.c \
