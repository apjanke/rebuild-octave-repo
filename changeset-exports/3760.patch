# HG changeset patch
# User jwe
# Date 978553619 0
#      Wed Jan 03 20:26:59 2001 +0000
# Node ID 735549d1148ecb12635b7d000d2dfaa92045ea63
# Parent  110bc441a9543567ad5fb1dbeedf4cba0feb5d78
[project @ 2001-01-03 20:26:57 by jwe]

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -704,17 +704,17 @@ just
 @group
 #include <octave/oct.h>
 
 DEFUN_DLD (oregonator, args, ,
   "The `oregonator'.")
 @{
   ColumnVector dx (3);
 
-  ColumnVector x = args(0).vector_value ();
+  ColumnVector x (args(0).vector_value ());
 
   dx(0) = 77.27 * (x(1) - x(0)*x(1) + x(0)
                    - 8.375e-06*pow (x(0), 2));
 
   dx(1) = (x(2) - x(0)*x(1) - x(1)) / 77.27;
 
   dx(2) = 0.161*(x(0) - x(2));
 
@@ -758,24 +758,28 @@ The next line,
 ColumnVector dx (3);
 @end example
 
 @noindent
 simply declares an object to store the right hand sides of the
 differential equation, and the statement
 
 @example
-ColumnVector x = args(0).vector_value ();
+ColumnVector x (args(0).vector_value ());
 @end example
 
 @noindent
-extracts a column vector from the input arguments.  The variable
-@code{args} is passed to functions defined with @code{DEFUN_DLD} as an
-@code{octave_value_list} object, which includes methods for getting the
-length of the list and extracting individual elements.
+extracts a vector from the first input argument.  The
+@code{vector_value} method is used so that the user of the function
+can pass either a row or column vector.  The @code{ColumnVector}
+constructor is needed because the ODE class requires a column
+vector.  The variable @code{args} is passed to functions defined with
+@code{DEFUN_DLD} as an @code{octave_value_list} object, which includes
+methods for getting the length of the list and extracting individual
+elements.
 
 In this example, we don't check for errors, but that is not difficult.
 All of the Octave's built-in functions do some form of checking on their
 arguments, so you can check the source code for those functions for
 examples of various strategies for verifying that the correct number and
 types of arguments have been supplied.
 
 The next statements
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3003,17 +3003,17 @@ operator * (const ComplexMatrix& m, cons
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (nc != a_nr)
     gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc);
   else
     {
       if (nr == 0 || nc == 0 || a_nc == 0)
-	retval.resize (nr, nc, 0.0);
+	retval.resize (nr, a_nc, 0.0);
       else
 	{
 	  int ld  = nr;
 	  int lda = a.rows ();
 
 	  retval.resize (nr, a_nc);
 	  Complex *c = retval.fortran_vec ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2001-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CMatrix.cc (operator * (const ComplexMatrix&, const ComplexMatrix&):
+	Return correct size result for empty matrix case.
+
 2000-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (xmin (const Complex&, const Complex& y):
 	If args are equal in magnitude, return first arg instead of
 	second.
 
 2000-12-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2001-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cx-mat.cc (octave_complex_matrix::try_narrowing_conversion): 
+	Handle empty matrix dimensions correctly.
+
 2000-12-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pager.h (octave_pager_buf::diary_skip): New data member.
 	(octave_pager_buf::octave_pager_buf): Initialize it.
 	* pager.cc (octave_pager_buf::set_diary_skip): New function.
 	(octave_pager_stream::set_diary_skip): New function.
 	(octave_pager_buf::sync): Call flush_current_contents_to_diary
 	instead of octave_diary.write.
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -63,18 +63,18 @@ octave_complex_matrix::try_narrowing_con
     {
       Complex c = matrix (0, 0);
 
       if (imag (c) == 0.0)
 	retval = new octave_scalar (::real (c));
       else
 	retval = new octave_complex (c);
     }
-  else if (nr == 0 && nc == 0)
-    retval = new octave_matrix (Matrix ());
+  else if (nr == 0 || nc == 0)
+    retval = new octave_matrix (Matrix (nr, nc));
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern void assign (Array2<Complex>&, const Array2<Complex>&);
