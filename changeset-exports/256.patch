# HG changeset patch
# User jwe
# Date 755393803 0
#      Wed Dec 08 23:36:43 1993 +0000
# Node ID e592734b002b1b39d6e6a3b2238933602bc44df4
# Parent  98246fedc941f774ecd008489023447a2882a60c
[project @ 1993-12-08 23:36:33 by jwe]

diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -26,35 +26,39 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include "DAE.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 
 extern "C"
 {
-  int F77_FCN (ddassl) (int (*)(), const int*, double*, double*,
-			double*, double*, const int*, const double*,
+  int F77_FCN (ddassl) (int (*)(double*, double*, double*, double*,
+				int*, double*, int*),
+			const int*, double*, double*, double*,
+			double*, const int*, const double*,
 			const double*, int*, double*, const int*, 
 			int*, const int*, const double*, const int*,
-			int (*)());
+			int (*)(double*, double*, double*, double*,
+				double*, double*, int*));
 }
 
 static DAERHSFunc user_fun;
 static DAEJacFunc user_jac;
 static int nn;
 
 DAE::DAE (void)
 {
   n = 0;
   t = 0.0;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   DAEFunc::set_function (NULL);
   DAEFunc::set_jacobian_function (NULL);
 
   liw = 0;
   lrw = 0;
 
@@ -72,16 +76,17 @@ DAE::DAE (int size)
   t = 0.0;
 
   absolute_tolerance = 1.0e-6;
   relative_tolerance = 1.0e-6;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   DAEFunc::set_function (NULL);
   DAEFunc::set_jacobian_function (NULL);
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
@@ -101,16 +106,17 @@ DAE::DAE (Vector& state, double time, DA
   xdot.resize (n, 0.0);
 
   absolute_tolerance = 1.0e-6;
   relative_tolerance = 1.0e-6;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
@@ -169,26 +175,28 @@ Vector
 DAE::deriv (void)
 {
   return xdot;
 }
 
 void
 DAE::initialize (Vector& state, double time)
 {
+  integration_error = 0;
   restart = 1;
   x = state;
   int nx = x.capacity ();
   xdot.resize (nx, 0.0);
   t = time;
 }
 
 void
 DAE::initialize (Vector& state, Vector& deriv, double time)
 {
+  integration_error = 0;
   restart = 1;
   xdot = deriv;
   x = state;
   t = time;
 }
 
 int
 ddassl_f (double *time, double *state, double *deriv, double *delta,
@@ -201,18 +209,23 @@ ddassl_f (double *time, double *state, d
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
       tmp_state.elem (i) = state [i];
     }
 
   tmp_delta = user_fun (tmp_state, tmp_deriv, *time);
 
-  for (i = 0; i < nn; i++)
-    delta [i] = tmp_delta.elem (i);
+  if (tmp_delta.length () == 0)
+    *ires = -2;
+  else
+    {
+      for (i = 0; i < nn; i++)
+	delta [i] = tmp_delta.elem (i);
+    }
 
   return 0;
 }
 
 int
 ddassl_j (double *time, double *state, double *deriv, double *pd,
 	  double *cj, double *rpar, int *ipar)
 {
@@ -239,16 +252,18 @@ ddassl_j (double *time, double *state, d
       pd [nn * j + i] = tmp_dfdx.elem (i, j);
 
   return 0;
 }
 
 Vector
 DAE::integrate (double tout)
 {
+  integration_error = 0;
+
   if (DAEFunc::jac == NULL)
     iwork [4] = 0;
   else
     iwork [4] = 1;
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
@@ -289,50 +304,39 @@ DAE::integrate (double tout)
     case 2: // The integration to TSTOP was successfully completed
 	    // (T=TSTOP) by stepping exactly to TSTOP.
       break;
     case 3: // The integration to TOUT was successfully completed
 	    // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	    // interpolation.  YPRIME(*) is obtained by interpolation.
       break;
     case -1: // A large amount of work has been expended.  (About 500 steps).
-      break;
     case -2: // The error tolerances are too stringent.
-      break;
     case -3: // The local error test cannot be satisfied because you
 	     // specified a zero component in ATOL and the
 	     // corresponding computed solution component is zero.
 	     // Thus, a pure relative error test is impossible for
 	     // this component.
-      break;
     case -6: // DDASSL had repeated error test failures on the last
 	     // attempted step.
-      break;
     case -7: // The corrector could not converge.
-      break;
     case -8: // The matrix of partial derivatives is singular.
-      break;
     case -9: // The corrector could not converge.  There were repeated
 	     // error test failures in this step.
-      break;
     case -10: // The corrector could not converge because IRES was
 	      // equal to minus one.
-      break;
     case -11: // IRES equal to -2 was encountered and control is being
 	      // returned to the calling program.
-      break;
     case -12: // DDASSL failed to compute the initial YPRIME.
-      break;
     case -33: // The code has encountered trouble from which it cannot
 	      // recover. A message is printed explaining the trouble
 	      // and control is returned to the calling program. For
 	      // example, this occurs when invalid input is detected.
-      break;
     default:
-      // Error?
+      integration_error = 1;
       break;
     }
 
   t = tout;
 
   return x;
 }
 
@@ -351,16 +355,20 @@ DAE::integrate (const Vector& tout, Matr
 	{
 	  retval.elem (0, i) = x.elem (i);
 	  xdot_out.elem (0, i) = xdot.elem (i);
 	}
 
       for (int j = 1; j < n_out; j++)
 	{
 	  ColumnVector x_next = integrate (tout.elem (j));
+
+	  if (integration_error)
+	    return retval;
+
 	  for (i = 0; i < n; i++)
 	    {
 	      retval.elem (j, i) = x_next.elem (i);
 	      xdot_out.elem (j, i) = xdot.elem (i);
 	    }
 	}
     }
 
@@ -435,27 +443,35 @@ DAE::integrate (const Vector& tout, Matr
 		  set_stop_time (next_crit);
 		  t_out = next_out;
 		  save_output = 1;
 		  i_out++;
 		}
 
 	      ColumnVector x_next = integrate (t_out);
 
+	      if (integration_error)
+		return retval;
+
 	      if (save_output)
 		{
 		  for (i = 0; i < n; i++)
 		    {
 		      retval.elem (i_out-1, i) = x_next.elem (i);
 		      xdot_out.elem (i_out-1, i) = xdot.elem (i);
 		    }
 		}
 
 	      if (do_restart)
 		force_restart ();
 	    }
 	}
       else
-	retval = integrate (tout, xdot_out);
+	{
+	  retval = integrate (tout, xdot_out);
+
+	  if (integration_error)
+	    return retval;
+	}
     }
 
   return retval;
 }
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -81,27 +81,38 @@ dassl_user_function (const ColumnVector&
       tree_constant deriv (d2);
       args[1] = state;
       args[2] = deriv;
     }
 
   if (dassl_fcn != NULL_TREE)
     {
       tree_constant *tmp = dassl_fcn->eval (args, 4, 1, 0);
+
       delete [] args;
+
+      if (error_state)
+	{
+	  gripe_user_supplied_eval ("dassl");
+	  return retval;
+	}
+
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_vector ();
+
 	  delete [] tmp;
+
+	  if (retval.length () == 0)
+	    gripe_user_supplied_eval ("dassl");
 	}
       else
 	{
 	  delete [] tmp;
 	  gripe_user_supplied_eval ("dassl");
-	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
 dassl (const tree_constant *args, int nargin, int nargout)
