# HG changeset patch
# User jwe
# Date 1158028906 0
#      Tue Sep 12 02:41:46 2006 +0000
# Node ID 5f662c1cfbbe7c2e28d1c3fdbbe1d2b446e27634
# Parent  82a73f5dadd90ad6b8439ea81dd21c13d54d9db5
[project @ 2006-09-12 02:41:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-09-11  Yozo Hida  <yozo@cs.berkeley.edu>
+
+	* DLD-FUNCTIONS/gcd.cc (Fgcd): Extend range by using std::floor
+	instead of converting to int.
+
 2006-09-05  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_sparse::as_octave_value): Cast nzmax to
 	octave_idx_type for sparse matrix constructors.
 
 2006-09-01  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc: Don't handle nargout == 0 as a special case.
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -31,17 +31,17 @@ 02110-1301, USA.
 #include "error.h"
 #include "oct-obj.h"
 
 // FIXME -- should probably handle Inf, NaN.
 
 static inline bool
 is_integer_value (double x)
 {
-  return x == static_cast<double> (static_cast<long> (x));
+  return x == std::floor (x);
 }
 
 DEFUN_DLD (gcd, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{g} =} gcd (@var{a1}, @code{...})\n\
 @deftypefnx {Loadable Function} {[@var{g}, @var{v1}, @var{...}] =} gcd (@var{a1}, @code{...})\n\
 \n\
 If a single argument is given then compute the greatest common divisor of\n\
@@ -161,17 +161,17 @@ all of the values of @var{v1}, @var{...}
 	  if (! is_integer_value (y(0)))
 	    {
 	      error ("gcd: all arguments must be integer");
 	      return retval;
 	    }
 
 	  while (y(0) > 0)
 	    {
-	      RowVector r = x - y * (static_cast<int> ( x(0) / y(0)));
+	      RowVector r = x - y * std::floor (x(0) / y(0));
 	      x = y;
 	      y = r;
 	    }
 
 	  g = x(0);
 
 	  for (int i = 0; i < k; i++) 
 	    v(i) *= x(1);
@@ -179,19 +179,19 @@ all of the values of @var{v1}, @var{...}
 	  v(k) = x(2) * signum (gg(k));
 	}
 
       retval (1) = v;
       retval (0) = g;
     }
   else if (all_args_scalar && nargout < 3)
     {
-      double g = args(0).int_value (true);
+      double g = args(0).double_value ();
 
-      if (error_state)
+      if (error_state || ! is_integer_value (g))
 	{
 	  error ("gcd: all arguments must be integer");
 	  return retval;
 	}
 
       RowVector v (nargin, 0);
       RowVector x (3);
       RowVector y (3);
@@ -201,33 +201,33 @@ all of the values of @var{v1}, @var{...}
       g = std::abs(g);
       
       for (int k = 1; k < nargin; k++)
 	{
 	  x(0) = g;
 	  x(1) = 1;
 	  x(2) = 0;
 
-	  y(0) = args(k).int_value (true);
+	  y(0) = args(k).double_value ();
 	  y(1) = 0;
 	  y(2) = 1;
 
 	  double sgn = signum (y(0));
 
 	  y(0) = std::abs (y(0));
 
-	  if (error_state)
+	  if (error_state || ! is_integer_value (g))
 	    {
 	      error ("gcd: all arguments must be integer");
 	      return retval;
 	    }
 
 	  while (y(0) > 0)
 	    {
-	      RowVector r = x - y * (static_cast<int> (x(0) / y(0)));
+	      RowVector r = x - y * std::floor (x(0) / y(0));
 	      x = y;
 	      y = r;
 	    }
 
 	  g = x(0);
 
 	  for (int i = 0; i < k; i++) 
 	    v(i) *= x(1);
@@ -285,17 +285,17 @@ all of the values of @var{v1}, @var{...}
 	      if (! is_integer_value (y(0)))
 		{
 		  error ("gcd: all arguments must be integer");
 		  return retval;
 		}
 
 	      while (y(0) > 0)
 		{
-		  RowVector r = x - y * (static_cast<int> (x(0) / y(0)));
+		  RowVector r = x - y * std::floor (x(0) / y(0));
 		  x = y;
 		  y = r;
 		}
 
 	      g(n) = x(0);
 
 	      for (int i = 0; i < k; i++) 
 		v[i](n) *= x(1);
