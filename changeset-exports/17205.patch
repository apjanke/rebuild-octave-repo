# HG changeset patch
# User Philipp Kutin <philipp.kutin@gmail.com>
# Date 1375952317 -7200
#      Thu Aug 08 10:58:37 2013 +0200
# Node ID 334d8edd48bc9023733d43c7a7bf62da80241ced
# Parent  d87179b38bcf19b5621e70b829dea558fc6c2392
lo-regexp.cc: prevent cast of negative floating point value to size_t.

* regexp.cc: simplify two expressions like "static_cast<size_t> (e - 1) + 1"
  to "static_cast<size_t> (e), where 'e' is a nonnegative index value of type
  double. This prevents a cast of -1.0 to the unsigned integral type "size_t"
  whenever 'e' is zero. A test case where this occurs (for the second change) is
  regexprep ('World', '^', 'Hello ', 'emptymatch').

diff --git a/liboctave/util/lo-regexp.cc b/liboctave/util/lo-regexp.cc
--- a/liboctave/util/lo-regexp.cc
+++ b/liboctave/util/lo-regexp.cc
@@ -545,17 +545,17 @@ regexp::replace (const std::string& buff
         {
           OCTAVE_QUIT;
 
           double start = p->start ();
           double end = p->end ();
 
           const Matrix pairs (p->token_extents ());
           rep.append (&buffer[from], static_cast<size_t> (start - 1) - from);
-          from = static_cast<size_t> (end - 1) + 1;
+          from = static_cast<size_t> (end);
 
           size_t cur_pos = 0;
 
           for (int j = 0; j < num_tokens; j++)
             {
               rep.append (&repstr[cur_pos], (tokens[j].pos) - cur_pos);
               cur_pos = tokens[j].pos+2;
 
@@ -603,17 +603,17 @@ regexp::replace (const std::string& buff
       rep.reserve (buffer.size () + delta);
       size_t from = 0;
       p = rx_lst.begin ();
       for (size_t i = 0; i < num_matches; i++)
         {
           OCTAVE_QUIT;
           rep.append (&buffer[from],
                       static_cast<size_t> (p->start () - 1) - from);
-          from = static_cast<size_t> (p->end () - 1) + 1;
+          from = static_cast<size_t> (p->end ());
           rep.append (repstr);
           p++;
         }
       rep.append (&buffer[from], buffer.size () - from);
     }
 
   retval = rep;
   return retval;
