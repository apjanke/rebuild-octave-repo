# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532202597 25200
#      Sat Jul 21 12:49:57 2018 -0700
# Node ID 6541a0de38e1965da7199151c75ade93554dbc62
# Parent  b3d357990b520728c07ac50f21f26420ca1f2a7f
num2str.m: Add new BIST tests and comments explaining tests.

* num2str.m: Add new BIST tests and comments explaining tests.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -183,23 +183,25 @@ function retval = num2str (x, arg)
     tmp = regexprep (tmp, "( +)i", "i$1");
 
     retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
   endif
 
 endfunction
 
 
+## Basic tests
 %!assert (num2str (123), "123")
 %!assert (num2str (1.23), "1.23")
 %!assert (num2str (123.456, 4), "123.5")
 %!assert (num2str ([1, 1.34; 3, 3.56], "%5.1f"), ["1.0  1.3"; "3.0  3.6"])
 %!assert (num2str (1.234 + 27.3i), "1.234+27.3i")
 %!assert (num2str ([true false true]), "1  0  1")
 
+## Exceptional values
 %!assert (num2str (19440606), "19440606")
 %!assert (num2str (2^33), "8589934592")
 %!assert (num2str (-2^33), "-8589934592")
 %!assert (num2str (2^33+1i), "8589934592+1i")
 %!assert (num2str (-2^33+1i), "-8589934592+1i")
 %!assert (num2str ([0 0 0]), "0  0  0")
 %!assert (num2str (inf), "Inf")
 %!assert (num2str ([inf -inf]), "Inf -Inf")
@@ -215,25 +217,25 @@ endfunction
 %!assert (num2str (complex (1, NA)), "1+NAi")
 
 ## ND-arrays are concatenated in columns
 %!shared m, x
 %! m = magic (3);
 %! x = cat (3, m, -m);
 
 ## real case
-%!test
+%!test <*46770>
 %! y = num2str (x);
 %! assert (rows (y) == 3);
 %! assert (y, ["8  1  6 -8 -1 -6"
 %!             "3  5  7 -3 -5 -7"
 %!             "4  9  2 -4 -9 -2"]);
 
 ## complex case
-%!test
+%!test <*46770>
 %! x(1,1,2) = -8+2i;
 %! y = num2str (x);
 %! assert (rows (y) == 3);
 %! assert (y, ["8+0i   1+0i   6+0i  -8+2i  -1+0i  -6+0i"
 %!             "3+0i   5+0i   7+0i  -3+0i  -5+0i  -7+0i"
 %!             "4+0i   9+0i   2+0i  -4+0i  -9+0i  -2+0i"]);
 
 ## Clear shared variables
@@ -243,21 +245,27 @@ endfunction
 %!assert <*36133> (num2str (1e15), "1000000000000000")
 %!assert <*36133> (num2str (1e16), "1e+16")
 ## Even exact integers in IEEE notation should use exponential notation
 %!assert <*36133> (num2str(2^512), "1.34078079299426e+154")
 ## Mixed integer/floating point arrays
 %!assert <*36133> (num2str ([2.1, 1e23, pi]),
 %!                 "2.1  9.999999999999999e+22      3.141592653589793")
 
+## Large integers should not switch sign when printed due to overflow
+%!assert <*36121> (num2str (2.4e9, 15), "2400000000")
+
 ## Test for extra rows generated from newlines in format
 %!assert <*44864> (rows (num2str (magic (3), "%3d %3d %3d\n")), 3)
 
+## Test that string conversion of numeric objects results in characters
+## if the numbers are within range for ASCII.
 %!assert <*45174> (num2str ([65 66 67], "%s"), "ABC")
 
+## Test input validation
 %!error num2str ()
 %!error num2str (1, 2, 3)
 %!error <X must be a numeric> num2str ({1})
 %!error <PRECISION must be a scalar integer .= 0> num2str (1, {1})
 %!error <PRECISION must be a scalar integer .= 0> num2str (1, ones (2))
 %!error <PRECISION must be a scalar integer .= 0> num2str (1, -1)
 %!error <PRECISION must be a scalar integer .= 0> num2str (1, 1.5)
 %!error <PRECISION must be a scalar integer .= 0> num2str (1+1i, {1})
