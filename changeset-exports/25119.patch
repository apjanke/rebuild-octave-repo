# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522850764 14400
#      Wed Apr 04 10:06:04 2018 -0400
# Branch stable
# Node ID 14b9e2a1f3e170fdc656f7b0034c25b0c9db5dc1
# Parent  98596e4522bcf7f269709fdbadcce2458f3233ab
if some Qt tools are instaslled, don't check for another version

* acinclude.m4 (OCTAVE_CHECK_QT): Also consider Qt tools when deciding
whether the Qt installation appears to be incomplete.
(OCTAVE_CHECK_QT_VERSION): Accumulate lists of available and missing
Qt tools.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1706,17 +1706,17 @@ AC_DEFUN([OCTAVE_CHECK_QT], [
   use_qscintilla=no
   win32_terminal=no
 
   for ver in $octave_qt_versions; do
     OCTAVE_CHECK_QT_VERSION([$ver])
     if test $build_qt_gui = yes; then
       have_qt_version=$ver
       break
-    elif test -n "$QT_MODULES_AVAILABLE"; then
+    elif test -n "$QT_MODULES_AVAILABLE" || -n "$QT_TOOLS_AVAILABLE"; then
       ## If some modules were found for $ver, then warn about possible
       ## incomplete or broken Qt installation instead of checking for
       ## next version in the list.
       warn_qt_modules="Your installation of Qt version $ver appears incomplete or broken in some way.  Fix that or use --with-qt=VER to use another version."
       break
     fi
   done
 
@@ -1724,18 +1724,19 @@ AC_DEFUN([OCTAVE_CHECK_QT], [
     BUILD_QT_SUMMARY_MSG="yes (version: $have_qt_version)"
     if test x"$have_qt_version" = x4; then
       AC_DEFINE(HAVE_QT4, 1, [Define to 1 if using Qt version 4.])
     fi
     if test x"$have_qt_version" = x5; then
       AC_DEFINE(HAVE_QT5, 1, [Define to 1 if using Qt version 5.])
     fi
   else
-    if test -n "$QT_MODULES_MISSING"; then
-      BUILD_QT_SUMMARY_MSG="no (missing:$QT_MODULES_MISSING)"
+    if test -n "$QT_MODULES_MISSING" || test -n "$QT_TOOLS_MISSING"; then
+      qt_missing=`echo $QT_MODULES_MISSING$QT_TOOLS_MISSING | sed 's/  *$//'`
+      BUILD_QT_SUMMARY_MSG="no (missing:$qt_missing)"
     else
       BUILD_QT_SUMMARY_MSG="no"
     fi
     if test -n "$warn_qt_modules"; then
       OCTAVE_CONFIGURE_WARNING([warn_qt_modules])
     fi
     if test -n "$warn_qt_libraries"; then
       OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
@@ -1968,80 +1969,101 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
       ## Check for Qt4
       if ! `$PKG_CONFIG --atleast-version=4.0.0 QtCore`; then
         build_qt_gui=no
         warn_qt_version="Qt >= 4.0.0 not found; disabling Qt GUI"
       fi
     fi
   fi
 
+  QT_TOOLS_AVAILABLE=
+  QT_TOOLS_MISSING=
+
   if test $build_qt_gui = yes; then
     AC_CHECK_TOOLS(QTCHOOSER, [qtchooser])
 
     AC_CHECK_TOOLS(MOC_QTVER, [moc-qt$qt_version])
     if test -z "$MOC_QTVER"; then
       AC_CHECK_TOOLS(MOC, [moc])
       if test -n "$MOC" && test -n "$QTCHOOSER"; then
         MOCFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE moc"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING moc"
       fi
     else
       MOC="$MOC_QTVER"
     fi
 
     AC_CHECK_TOOLS(UIC_QTVER, [uic-qt$qt_version])
     if test -z "$UIC_QTVER"; then
       AC_CHECK_TOOLS(UIC, [uic])
       if test -n "$UIC" && test -n "$QTCHOOSER"; then
         UICFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE uic"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING uic"
       fi
     else
       UIC="$UIC_QTVER"
     fi
 
     AC_CHECK_TOOLS(RCC_QTVER, [rcc-qt$qt_version])
     if test -z "$RCC_QTVER"; then
       AC_CHECK_TOOLS(RCC, [rcc])
       if test -n "$RCC" && test -n "$QTCHOOSER"; then
         RCCFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE rcc"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING rcc"
       fi
     else
       RCC="$RCC_QTVER"
     fi
 
     AC_CHECK_TOOLS(LRELEASE_QTVER, [lrelease-qt$qt_version])
     if test -z "$LRELEASE_QTVER"; then
       AC_CHECK_TOOLS(LRELEASE, [lrelease])
       if test -n "$LRELEASE" && test -n "$QTCHOOSER"; then
         LRELEASEFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE lrelease"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING lrelease"
       fi
     else
       LRELEASE="$LRELEASE_QTVER"
     fi
 
     AC_CHECK_TOOLS(QCOLLECTIONGENERATOR_QTVER, [qcollectiongenerator-qt$qt_version])
     if test -z "$QCOLLECTIONGENERATOR_QTVER"; then
       AC_CHECK_TOOLS(QCOLLECTIONGENERATOR, [qcollectiongenerator])
       if test -n "$QCOLLECTIONGENERATOR" && test -n "$QTCHOOSER"; then
         QCOLLECTIONGENERATORFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE qcollectiongenerator"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING qcollectiongenerator"
       fi
     else
       QCOLLECTIONGENERATOR="$QCOLLECTIONGENERATOR_QTVER"
     fi
 
     AC_CHECK_TOOLS(QHELPGENERATOR_QTVER, [qhelpgenerator-qt$qt_version])
     if test -z "$QHELPGENERATOR_QTVER"; then
       AC_CHECK_TOOLS(QHELPGENERATOR, [qhelpgenerator])
       if test -n "$QHELPGENERATOR" && test -n "$QTCHOOSER"; then
         QHELPGENERATORFLAGS="-qt$qt_version"
+        QT_TOOLS_AVAILABLE="$QT_TOOLS_AVAILABLE qhelpgenerator"
+      else
+        QT_TOOLS_MISSING="$QT_TOOLS_MISSING qhelpgenerator"
       fi
     else
       QHELPGENERATOR="$QHELPGENERATOR_QTVER"
     fi
 
-    if test -z "$MOC" || test -z "$UIC" || test -z "$RCC" || test -z "$LRELEASE" || test -z "$QCOLLECTIONGENERATOR" || test -z "$QHELPGENERATOR"; then
+    if test -n "$QT_TOOLS_MISSING"; then
       warn_qt_tools="one or more of the Qt utilities moc, uic, rcc, lrelease, qcollectiongenerator, and qhelpgenerator not found; disabling Qt GUI"
       build_qt_gui=no
       MOC_QTVER=
       UIC_QTVER=
       RCC_QTVER=
       LRELEASE_QTVER=
       QCOLLECTIONGENERATOR_QTVER=
       QHELPGENERATOR_QTVER=
