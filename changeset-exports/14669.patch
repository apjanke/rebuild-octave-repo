# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1337677224 -7200
#      Tue May 22 11:00:24 2012 +0200
# Branch gui
# Node ID 7605e7136b5022046b60b096febe912cb91c34c6
# Parent  6a6733a5598298f3017b95ee7e630d9a372db39b
Discarded initFileEditor, instead put that in the constructor. Speedup for updating the symbol table by lowering complexity from nÂ² to n. Fixed problem with hangup on quit.

* FileEditor: Removed initFileEditor, put that code into the constructor.
* WorkspaceModel: Simplified updating the symbol table.
* OctaveLink: Add quit_allowed = true to prevent hangup on quit.

diff --git a/gui/src/FileEditor.cpp b/gui/src/FileEditor.cpp
--- a/gui/src/FileEditor.cpp
+++ b/gui/src/FileEditor.cpp
@@ -20,20 +20,24 @@
 #include <QApplication>
 #include <QFile>
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
 
-FileEditor::FileEditor (QWidget * parent)
-    : QWidget (parent)
+FileEditor::FileEditor (QTerminal *terminalView, LexerOctaveGui *lexer, MainWindow *mainWindow)
+    : QWidget ()
 {
   construct ();
+  m_editor->setLexer (lexer);
+  m_terminalView = terminalView; // for sending commands to octave
+  m_mainWindow = mainWindow;  // get the MainWindow for chekcing state at subwindow close
+  show ();
 }
 
 FileEditor::~FileEditor ()
 {
 }
 
 void
 FileEditor::closeEvent(QCloseEvent *event)
@@ -203,17 +207,17 @@ FileEditor::saveFile (QString saveFileNa
       return;
     }
 
   // open the file for writing
   QFile file (saveFileName);
   if (!file.open (QFile::WriteOnly))
     {
       QMessageBox::warning (this, tr ("File Editor"),
-			    tr ("Cannot write file %1:\n%2.").
+                            tr ("Cannot write file %1:\n%2.").
           arg (saveFileName).arg (file.errorString ()));
       return;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << m_editor->text ();
@@ -337,28 +341,16 @@ FileEditor::prevBookmark ()
   int line,cur,prevline;
   m_editor->getCursorPosition(&line,&cur);
   if ( m_editor->markersAtLine(line) && (1 << MARKER_BOOKMARK) )
     line--; // we have a bookmark here, so start search from prev line
   prevline = m_editor->markerFindPrevious(line,(1 << MARKER_BOOKMARK));
   m_editor->setCursorPosition(prevline,0);
 }
 
-// function for setting the already existing lexer from MainWindow
-void
-FileEditor::initEditor (QTerminal* terminalView,
-                                    LexerOctaveGui* lexer,
-                                    MainWindow* mainWindow)
-{
-  m_editor->setLexer(lexer);
-  m_terminalView = terminalView; // for sending commands to octave
-                       // TODO: make a global commandOctave function?
-  m_mainWindow = mainWindow;  // get the MainWindow for chekcing state at subwindow close
-}
-
 void
 FileEditor::setModified (bool modified)
 {
   m_modified = modified;
 }
 
 void
 FileEditor::construct ()
@@ -478,17 +470,17 @@ FileEditor::construct ()
   m_toolBar->addAction (undoAction);
   m_toolBar->addAction (redoAction);
   m_toolBar->addAction (m_copyAction);
   m_toolBar->addAction (m_cutAction);
   m_toolBar->addAction (pasteAction);
   m_toolBar->addSeparator();
   m_toolBar->addAction (runAction);
 
-  // menu bar  
+  // menu bar
   QMenu *fileMenu = new QMenu(tr("&File"),m_menuBar);
   fileMenu->addAction(newAction);
   fileMenu->addAction(openAction);
   fileMenu->addAction(saveAction);
   fileMenu->addAction(saveAsAction);
   fileMenu->addSeparator();
   m_menuBar->addMenu(fileMenu);
   QMenu *editMenu = new QMenu(tr("&Edit"),m_menuBar);
@@ -539,10 +531,9 @@ FileEditor::construct ()
 
 
   // connect modified signal
   connect (m_editor, SIGNAL (modificationChanged(bool)), this, SLOT (newWindowTitle(bool)) );
 
   m_fileName = "";
   newWindowTitle (false);
   setWindowIcon(QIcon::fromTheme("accessories-text-editor",style->standardIcon (QStyle::SP_FileIcon)));
-  show ();
 }
diff --git a/gui/src/FileEditor.h b/gui/src/FileEditor.h
--- a/gui/src/FileEditor.h
+++ b/gui/src/FileEditor.h
@@ -39,22 +39,19 @@ enum MARKER
     MARKER_BREAKPOINT
   };
 
 class FileEditor : public QWidget
 {
 Q_OBJECT
 
 public:
-  FileEditor (QWidget * parent = 0);
+  FileEditor (QTerminal *terminalView, LexerOctaveGui *lexer, MainWindow *mainWindow);
   ~FileEditor ();
   void loadFile (QString fileName);
-  void initEditor (QTerminal *terminalView,
-                   LexerOctaveGui *lexer,
-                   MainWindow *mainWindow);
 
 public slots:
 
   void newFile ();
   void openFile ();
   void saveFile ();
   void saveFile (QString fileName);
   void saveFileAs ();
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -48,19 +48,18 @@ void
 MainWindow::newFile ()
 {
   newEditorWindow(QString());
 }
 
 void
 MainWindow::newEditorWindow (QString fileName)
 {
-  FileEditor *fileEditor = new FileEditor ();
+  FileEditor *fileEditor = new FileEditor (m_terminalView, m_lexer, this);
   fileEditor->setAttribute (Qt::WA_DeleteOnClose);
-  fileEditor->initEditor(m_terminalView, m_lexer, this);   // init necessary informations for editor
 
   if (fileName.isEmpty ())
     fileEditor->newFile ();
   else
     fileEditor->loadFile (fileName);
 }
 
 
diff --git a/gui/src/WorkspaceModel.cpp b/gui/src/WorkspaceModel.cpp
--- a/gui/src/WorkspaceModel.cpp
+++ b/gui/src/WorkspaceModel.cpp
@@ -12,16 +12,17 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "WorkspaceModel.h"
 #include <QTreeWidget>
+#include <QTime>
 
 WorkspaceModel::WorkspaceModel(QObject *parent)
   : QAbstractItemModel(parent)
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Type") << tr ("Value");
   _rootItem = new TreeItem(rootData);
 }
@@ -141,17 +142,16 @@ WorkspaceModel::updateTreeEntry (TreeIte
   treeItem->setData (1, QString (symbolRecord->varval ().type_name ().c_str ()));
   treeItem->setData (2, octaveValueAsQString (symbolRecord->varval ()));
 }
 
 void
 WorkspaceModel::updateFromSymbolTable ()
 {
   std::list < symbol_table::symbol_record > allVariables = symbol_table::all_variables ();
-
   // Split the symbol table into its different categories.
   QList < symbol_table::symbol_record* > localSymbolTable;
   QList < symbol_table::symbol_record* > globalSymbolTable;
   QList < symbol_table::symbol_record* > persistentSymbolTable;
   QList < symbol_table::symbol_record* > hiddenSymbolTable;
 
   for (std::list < symbol_table::symbol_record > ::iterator iterator = allVariables.begin ();
        iterator != allVariables.end (); iterator++)
@@ -179,81 +179,32 @@ WorkspaceModel::updateFromSymbolTable ()
         }
     }
 
   updateCategory (0, localSymbolTable);
   updateCategory (1, globalSymbolTable);
   updateCategory (2, persistentSymbolTable);
   updateCategory (3, hiddenSymbolTable);
   reset();
+
   emit expandRequest();
 }
 
 void
-WorkspaceModel::updateCategory (int topLevelItemIndex, QList < symbol_table::symbol_record* > symbolTable)
+WorkspaceModel::updateCategory (int topLevelItemIndex, const QList < symbol_table::symbol_record* > &symbolTable)
 {
-  // This method may be a little bit confusing; variablesList is a complete list of all
-  // variables that are in the workspace currently.
   TreeItem *treeItem = topLevelItem (topLevelItemIndex);
-
-  // First we check, if any variables that exist in the model tree have to be updated
-  // or created. So we walk the variablesList check against the tree.
-  foreach (symbol_table::symbol_record *symbolRecord, symbolTable)
-    {
-      int childCount = treeItem->childCount ();
-      bool alreadyExists = false;
-      TreeItem *child;
-
-      // Search for the corresponding item in the tree. If it has been found, child
-      // will contain the appropriate QTreeWidgetItem* pointing at it.
-      for (int i = 0; i < childCount; i++)
-        {
-          child = treeItem->child (i);
-          if (child->data (0).toString () ==
-              QString (symbolRecord->name ().c_str ()))
-            {
-              alreadyExists = true;
-              break;
-            }
-        }
+  treeItem->deleteChildItems();
 
-      // If it already exists, just update it.
-      if (alreadyExists)
-        {
-          updateTreeEntry (child, symbolRecord);
-        }
-      else
-        {
-          // It does not exist, so create a new one and set the right values.
-          child = new TreeItem ();
-          updateTreeEntry (child, symbolRecord);
-          treeItem->addChild (child);
-        }
-    }
-
-  // Check the tree against the list for deleted variables.
-  for (int i = 0; i < treeItem->childCount (); i++)
+  int symbolTableSize = symbolTable.size ();
+  for(int j = 0; j < symbolTableSize; j++)
     {
-      bool existsInVariableList = false;
-      TreeItem *child = treeItem->child (i);
-      foreach (symbol_table::symbol_record *symbolRecord, symbolTable)
-        {
-          if (QString (symbolRecord->name ().c_str ()) ==
-              child->data (0).toString ())
-            {
-              existsInVariableList = true;
-            }
-        }
-
-      if (!existsInVariableList)
-        {
-          treeItem->removeChild (child);
-          delete child;
-          i--;
-        }
+      TreeItem *child = new TreeItem ();
+      updateTreeEntry (child, symbolTable[j]);
+      treeItem->addChild (child);
     }
 }
 
 QString
 WorkspaceModel::octaveValueAsQString (const octave_value& octaveValue)
 {
   // Convert single qouted string.
   if (octaveValue.is_sq_string ())
diff --git a/gui/src/WorkspaceModel.h b/gui/src/WorkspaceModel.h
--- a/gui/src/WorkspaceModel.h
+++ b/gui/src/WorkspaceModel.h
@@ -51,16 +51,17 @@
 #include "octave/sysdep.h"
 #include "octave/ov.h"
 #include "octave/unwind-prot.h"
 #include "octave/utils.h"
 #include "octave/variables.h"
 
 // Qt includes
 #include <QAbstractItemModel>
+#include <QVector>
 
 class TreeItem
 {
 public:
   TreeItem(const QList<QVariant> &data, TreeItem *parent = 0) {
     _parentItem = parent;
     _itemData = data;
   }
@@ -68,29 +69,34 @@ public:
   TreeItem(QVariant data = QVariant(), TreeItem *parent = 0) {
     QList<QVariant> variantList;
     variantList << data << QVariant() << QVariant();
     _parentItem = parent;
     _itemData = variantList;
   }
 
   ~TreeItem() {
-    qDeleteAll(_childItems);
+     qDeleteAll(_childItems);
   }
 
   void insertChildItem(int at, TreeItem *item) {
     item->_parentItem = this;
     _childItems.insert(at, item);
   }
 
   void addChild(TreeItem *item) {
     item->_parentItem = this;
     _childItems.append(item);
   }
 
+  void deleteChildItems() {
+      qDeleteAll(_childItems);
+      _childItems.clear();
+  }
+
   void removeChild(TreeItem *item) {
     _childItems.removeAll(item);
   }
 
   QVariant data(int column) const
   {
     return _itemData[column];
   }
@@ -149,17 +155,17 @@ public:
   int rowCount(const QModelIndex &parent = QModelIndex()) const;
   int columnCount(const QModelIndex &parent = QModelIndex()) const;
 
   void insertTopLevelItem (int at, TreeItem *treeItem);
   TreeItem *topLevelItem (int at);
 
   void updateFromSymbolTable ();
   void updateTreeEntry (TreeItem * treeItem, symbol_table::symbol_record *symbolRecord);
-  void updateCategory (int topLevelItemIndex, QList < symbol_table::symbol_record *> symbolTable);
+  void updateCategory (int topLevelItemIndex, const QList < symbol_table::symbol_record *> &symbolTable);
   QString octaveValueAsQString (const octave_value &octaveValue);
 
 signals:
   void expandRequest();
 
 private:
   TreeItem *_rootItem;
 };
diff --git a/gui/src/backend/OctaveLink.cpp b/gui/src/backend/OctaveLink.cpp
--- a/gui/src/backend/OctaveLink.cpp
+++ b/gui/src/backend/OctaveLink.cpp
@@ -51,16 +51,17 @@ OctaveLink::launchOctave ()
   // Start the first one.
   m_octaveMainThread->start ();
 }
 
 void
 OctaveLink::terminateOctave ()
 {
   m_octaveMainThread->terminate ();
+  quit_allowed = true;
   m_octaveMainThread->wait();
 }
 
 void
 OctaveLink::triggerUpdateHistoryModel ()
 {
   // Determine the client's (our) history length and the one of the server.
   int clientHistoryLength = m_historyModel->rowCount ();
