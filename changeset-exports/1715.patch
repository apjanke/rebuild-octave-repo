# HG changeset patch
# User jwe
# Date 821087824 0
#      Mon Jan 08 07:57:04 1996 +0000
# Node ID 6f4631c7118ca1314aa615d8c4564fb5a04e1e95
# Parent  b3a4b62884b988e1e5e5f5383d6eb953b42c32ec
[project @ 1996-01-08 07:57:04 by jwe]

diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -307,17 +307,17 @@ static inline void
 set_format (double d)
 {
   int fw;
   set_format (d, fw);
 }
 
 static void
 set_real_matrix_format (int sign, int x_max, int x_min,
-			int inf_or_nan, int all_inf_or_nan, int& fw)
+			int inf_or_nan, int int_or_inf_or_nan, int& fw)
 {
   static char fmt_buf[128];
 
   int prec = user_pref.output_precision;
 
   int ld, rd;
 
   if (bank_format)
@@ -334,17 +334,17 @@ set_real_matrix_format (int sign, int x_
       fw = 2 * sizeof (double);
       rd = 0;
     }
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
-  else if (all_inf_or_nan)
+  else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
     }
@@ -420,28 +420,27 @@ set_format (const Matrix& m, int& fw)
 
   if (free_format)
     return;
 
   int sign = any_element_is_negative (m);
 
   int inf_or_nan = any_element_is_inf_or_nan (m);
 
-  int all_inf_or_nan
-    = inf_or_nan ? all_elements_are_int_or_inf_or_nan (m) : 0;
+  int int_or_inf_or_nan = all_elements_are_int_or_inf_or_nan (m);
 
   Matrix m_abs = abs (m);
   double max_abs = pr_max_internal (m_abs);
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0 ? 0 : (int) floor (log10 (max_abs) + 1.0);
   int x_min = min_abs == 0.0 ? 0 : (int) floor (log10 (min_abs) + 1.0);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
-			  all_inf_or_nan, fw);
+			  int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
   int fw;
   set_format (m, fw);
 }
@@ -606,17 +605,17 @@ set_format (const Complex& c)
 {
   int r_fw, i_fw;
   set_format (c, r_fw, i_fw);
 }
 
 static void
 set_complex_matrix_format (int sign, int x_max, int x_min,
 			   int r_x_max, int r_x_min, int inf_or_nan,
-			   int all_inf_or_nan, int& r_fw, int& i_fw)
+			   int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   static char r_fmt_buf[128];
   static char i_fmt_buf[128];
 
   int prec = user_pref.output_precision;
 
   int ld, rd;
 
@@ -637,17 +636,17 @@ set_complex_matrix_format (int sign, int
       rd = 0;
     }
   else if (bit_format)
     {
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
-  else if (all_inf_or_nan)
+  else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
       rd = 0;
     }
@@ -734,19 +733,19 @@ set_format (const ComplexMatrix& cm, int
 
   Matrix rp = real (cm);
   Matrix ip = imag (cm);
 
   int sign = any_element_is_negative (rp);
 
   int inf_or_nan = any_element_is_inf_or_nan (cm);
 
-  int all_inf_or_nan
-    = inf_or_nan ? (all_elements_are_int_or_inf_or_nan (rp)
-		    && all_elements_are_int_or_inf_or_nan (ip)) : 0;
+  int int_or_inf_or_nan
+    = (all_elements_are_int_or_inf_or_nan (rp)
+       && all_elements_are_int_or_inf_or_nan (ip)) : 0;
 
   Matrix r_m_abs = abs (rp);
   double r_max_abs = pr_max_internal (r_m_abs);
   double r_min_abs = pr_min_internal (r_m_abs);
 
   Matrix i_m_abs = abs (ip);
   double i_max_abs = pr_max_internal (i_m_abs);
   double i_min_abs = pr_min_internal (i_m_abs);
@@ -756,17 +755,17 @@ set_format (const ComplexMatrix& cm, int
 
   int i_x_max = i_max_abs == 0.0 ? 0 : (int) floor (log10 (i_max_abs) + 1.0);
   int i_x_min = i_min_abs == 0.0 ? 0 : (int) floor (log10 (i_min_abs) + 1.0);
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
-			     inf_or_nan, all_inf_or_nan, r_fw, i_fw);
+			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static int
 all_elements_are_ints (const Range& r)
 {
   // If the base and increment are ints, the final value in the range
   // will also be an integer, even if the limit is not.
 
