# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1289177146 -28800
#      Mon Nov 08 08:45:46 2010 +0800
# Node ID 6c8791cb35b19482d51702153121165c76159e07
# Parent  abc0c6b0a4c418c0100a0a9b11d037425e90daad
__go_draw_axes__.m: Set proper tight axis limits for log scale.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-08  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m, plot/axis.m: Set proper tight axis limits
+	for log scale.
+
 2010-11-07  David Bateman  <dbateman@free.fr>
 
 	* plot/legend.m: Remove call to drawnow.
 
 	* plot/__go_draw_axes__.m: Pass the legend axes as a structure.
 	Test whether the legend axis has any children before using it.
 	* plot/__go_draw_figure.m: Setup a fake axis to handle multi-parent
 	legend axes and delete this fake axiss when we're done with it.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -400,16 +400,26 @@ function __go_draw_axes__ (h, plot_strea
         end_unwind_protect
       endif
       kids = kids(1:(end-1));
 
       if (strcmpi (obj.visible, "off"))
         continue;
       endif
 
+      if (xlogscale)
+        obj.xdata(obj.xdata<=0) = NaN;
+      endif
+      if (ylogscale)
+        obj.ydata(obj.ydata<=0) = NaN;
+      endif
+      if (zlogscale)
+        obj.zdata(obj.zdata<=0) = NaN;
+      endif
+
       ## Check for facecolor interpolation for surfaces.
       doing_interp_color = ...
          isfield (obj, "facecolor") && strncmp (obj.facecolor, "interp", 6);
 
       switch (obj.type)
         case "image"
           img_data = obj.cdata;
           img_xdata = obj.xdata;
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -314,31 +314,34 @@ function lims = __get_tight_lims__ (ca, 
   ## hgroups when determining the tight limits.
   hg_kids = findobj (ca, "-property", strcat (ax, "data"), "type", "hggroup");
   kids = setdiff (kids, hg_kids);
   if (isempty (kids))
     ## Return the current limits.
     lims = get (ca, strcat (ax, "lim"));
   else
     data = get (kids, strcat (ax, "data"));
+    scale = get (ca, strcat (ax, "scale"));
+    if (strcmp (scale, "log"))
+      data(data<=0) = NaN;
+    end
     if (iscell (data))
       data = data (find (! cellfun (@isempty, data)));
       if (! isempty (data))
         lims_min = min (cellfun (@min, cellfun (@min, data, 'uniformoutput', false)(:))); 
         lims_max = max (cellfun (@max, cellfun (@max, data, 'uniformoutput', false)(:))); 
         lims = [lims_min, lims_max]; 
       else
         lims = [0, 1];
       endif
     else
       lims = [min(data(:)), max(data(:))];
     endif
   endif
 
-
 endfunction
 
 function __do_tight_option__ (ca)
 
   set (ca,
        "xlim", __get_tight_lims__ (ca, "x"),
        "ylim", __get_tight_lims__ (ca, "y"));
   if __calc_dimensions__ (ca) > 2
@@ -478,8 +481,16 @@ endfunction
 %! x1 = max(x(:));
 %! pcolor(x-x1,y-x1/2,z)
 %! hold on
 %! [x,y,z] = sombrero;
 %! s = x1/max(x(:));
 %! pcolor(s*x+x1,s*y+x1/2,5*z)
 %! axis tight
 
+%!demo
+%! clf
+%! x = -10:10;
+%! plot (x, x, x, -x)
+%! set (gca, "yscale", "log")
+%! legend ({"x >= 1", "x <= 1"}, "location", "north")
+%! title ("ylim = [1, 10]")
+
