# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1320191858 14400
#      Tue Nov 01 19:57:38 2011 -0400
# Node ID 0bbe319bf26be61eab75974c310f4fc88e0a4165
# Parent  d67c8bf52e20ce06de5543371353e4453f50a7dc
octave_class::size: return matrix with correct dimensions

* ov-class.cc (octave_class::size): Call dim_vector::length, not
dim_vector::numel to determine the number of dimensions stored in the
dimension vector.

diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -924,17 +924,17 @@ do_dbstack (const octave_value_list& arg
   return retval;
 }
 
 // A function that can be easily called from a debugger print the Octave
 // stack.  This can be useful for finding what line of code the
 // interpreter is currently executing when the debugger is stopped in
 // some C++ function, for example.
 
-static void
+void
 show_octave_dbstack (void)
 {
   do_dbstack (octave_value_list (), 0, std::cerr);
 }
 
 DEFUN (dbstack, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} dbstack (@var{n})\n\
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -426,21 +426,21 @@ octave_class::size (void)
         retval = lv(0).matrix_value ();
       else
         error ("@%s/size: invalid return value", class_name ().c_str ());
     }
   else
     {
       dim_vector dv = dims ();
 
-      int nel = dv.numel ();
+      int nd = dv.length ();
 
-      retval.resize (1, nel);
+      retval.resize (1, nd);
 
-      for (int i = 0; i < nel; i++)
+      for (int i = 0; i < nd; i++)
         retval(i) = dv(i);
     }
 
   return retval;
 }
 
 octave_idx_type
 octave_class::numel (const octave_value_list& idx)
