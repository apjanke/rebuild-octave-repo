# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236063667 -3600
#      Tue Mar 03 08:01:07 2009 +0100
# Node ID 5d5db7a347c66341940850f22e4a1b5f30ad21ae
# Parent  821f0242e8c153592b1232ca4fa3c0d3bb255aa6
erase closed files from file list & cache lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-03-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-stream.h (octave_stream_list::lookup_cache): New member field.
+	(octave_stream_list::octave_stream_list): Initialize it.
+	(octave_stream_list::do_lookup): Use it.
+	(octave_stream_list::clear): Make flush optional. Do physically erase
+	entries from the map. Close files.
+	(octave_stream_list::do_remove): Call clear on "all". Do erase deleted
+	entry from the map.
+
 2009-03-02  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (Fget, F__get__): Return a column vector of property
 	values, not a row vector.
 
 2009-03-01  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-fcm-fcm.cc (DEFNDASSIGNOP_FN (dbl_assign)):
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3978,20 +3978,20 @@ octave_stream_list::remove (int fid, con
 
 int
 octave_stream_list::remove (const octave_value& fid, const std::string& who)
 {
   return (instance_ok ()) ? instance->do_remove (fid, who) : -1;
 }
 
 void
-octave_stream_list::clear (void)
+octave_stream_list::clear (bool flush)
 {
   if (instance)
-    instance->do_clear ();
+    instance->do_clear (flush);
 }
 
 string_vector
 octave_stream_list::get_info (int fid)
 {
   return (instance_ok ()) ? instance->do_get_info (fid) : string_vector ();
 }
 
@@ -4063,22 +4063,30 @@ gripe_invalid_file_id (int fid, const st
 
 octave_stream
 octave_stream_list::do_lookup (int fid, const std::string& who) const
 {
   octave_stream retval;
 
   if (fid >= 0)
     {
-      ostrl_map::const_iterator iter = list.find (fid);
-
-      if (iter != list.end ())
-	retval = iter->second;
+      if (lookup_cache != list.end () && lookup_cache->first == fid)
+        retval = lookup_cache->second;
       else
-	gripe_invalid_file_id (fid, who);
+        {
+          ostrl_map::const_iterator iter = list.find (fid);
+
+          if (iter != list.end ())
+            {
+              retval = iter->second;
+              lookup_cache = iter;
+            }
+          else
+            gripe_invalid_file_id (fid, who);
+        }
     }
   else
     gripe_invalid_file_id (fid, who);
 
   return retval;
 }
 
 octave_stream
@@ -4105,21 +4113,23 @@ octave_stream_list::do_remove (int fid, 
 
   if (fid > 2)
     {
       ostrl_map::iterator iter = list.find (fid);
 
       if (iter != list.end ())
 	{
 	  octave_stream os = iter->second;
-
+          list.erase (iter);
+          lookup_cache = list.end ();
+
+          // FIXME: is this check redundant?
 	  if (os.is_valid ())
 	    {
 	      os.close ();
-	      iter->second = octave_stream ();
 	      retval = 0;
 	    }
 	  else
 	    gripe_invalid_file_id (fid, who);
 	}
       else
 	gripe_invalid_file_id (fid, who);
     }
@@ -4131,59 +4141,56 @@ octave_stream_list::do_remove (int fid, 
 
 int
 octave_stream_list::do_remove (const octave_value& fid, const std::string& who)
 {
   int retval = -1;
 
   if (fid.is_string () && fid.string_value () == "all")
     {
-      for (ostrl_map::iterator p = list.begin (); p != list.end (); p++)
-	{
-	  // Skip stdin, stdout, and stderr.
-
-	  if (p->first > 2)
-	    {
-	      octave_stream os = p->second;
-
-	      if (os.is_valid ())
-		do_remove (p->first, who);
-	    }
-	}
+      do_clear (false);
 
       retval = 0;
     }
   else
     {
       int i = get_file_number (fid);
 
       if (! error_state)
 	retval = do_remove (i, who);
     }
 
   return retval;
 }
 
 void
-octave_stream_list::do_clear (void)
+octave_stream_list::do_clear (bool flush)
 {
-  // Do flush stdout and stderr.
-
-  list[0].flush ();
-  list[1].flush ();
-
+  if (flush)
+    {
+      // Do flush stdout and stderr.
+
+      list[0].flush ();
+      list[1].flush ();
+    }
+
+  octave_stream saved_os[3];
   // But don't delete them or stdin.
-
-  for (ostrl_map::iterator p = list.begin (); p != list.end (); p++)
+  for (ostrl_map::iterator iter = list.begin (); iter != list.end (); iter++)
     {
-      // Skip stdin, stdout, and stderr.
-
-      if (p->first > 2)
-	p->second = octave_stream ();
+      int fid = iter->first;
+      octave_stream os = iter->second;
+      if (fid < 3)
+        saved_os[fid] = os;
+      else if (os.is_valid ())
+        os.close ();
     }
+  list.clear ();
+  for (int fid = 0; fid < 3; fid++) list[fid] = saved_os[fid];
+  lookup_cache = list.end ();
 }
 
 string_vector
 octave_stream_list::do_get_info (int fid) const
 {
   string_vector retval;
 
   octave_stream os = do_lookup (fid);
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -624,17 +624,17 @@ private:
 };
 
 class
 OCTINTERP_API
 octave_stream_list
 {
 protected:
 
-  octave_stream_list (void) : list () { }
+  octave_stream_list (void) : list (), lookup_cache (list.end ()) { }
 
 public:
 
   ~octave_stream_list (void) { }
 
   static bool instance_ok (void);
 
   static int insert (octave_stream& os);
@@ -644,45 +644,47 @@ public:
 
   static octave_stream
   lookup (const octave_value& fid, const std::string& who = std::string ());
 
   static int remove (int fid, const std::string& who = std::string ());
   static int remove (const octave_value& fid,
 		     const std::string& who = std::string ());
 
-  static void clear (void);
+  static void clear (bool flush = true);
 
   static string_vector get_info (int fid);
   static string_vector get_info (const octave_value& fid);
 
   static std::string list_open_files (void);
 
   static octave_value open_file_numbers (void);
 
   static int get_file_number (const octave_value& fid);
 
 private:
 
   typedef std::map<int, octave_stream> ostrl_map;
 
   ostrl_map list;
 
+  mutable ostrl_map::const_iterator lookup_cache;
+
   static octave_stream_list *instance;
 
   int do_insert (octave_stream& os);
 
   octave_stream do_lookup (int fid, const std::string& who = std::string ()) const;
   octave_stream do_lookup (const octave_value& fid,
 			   const std::string& who = std::string ()) const;
 
   int do_remove (int fid, const std::string& who = std::string ());
   int do_remove (const octave_value& fid, const std::string& who = std::string ());
 
-  void do_clear (void);
+  void do_clear (bool flush = true);
 
   string_vector do_get_info (int fid) const;
   string_vector do_get_info (const octave_value& fid) const;
 
   std::string do_list_open_files (void) const;
 
   octave_value do_open_file_numbers (void) const;
 
