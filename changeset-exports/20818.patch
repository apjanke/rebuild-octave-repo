# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449512763 18000
#      Mon Dec 07 13:26:03 2015 -0500
# Node ID cef0448a6ed21dcf17bf173bfa3668b63d85c8d5
# Parent  3d551b2ae9282c4f0933eabbcb6a37ed99acb299
eliminate unnecessary uses of nargin

* __glpk__.cc, chol.cc, dmperm.cc, qr.cc, symrcm.cc, ov-cell.cc,
ov-fcn-handle.cc, ov-fcn-inline.cc, ov-null-mat.cc, ov-struct.cc,
ov-type-conv.h, ov-usr-fcn.cc, oct-parse.in.yy, pt-misc.cc:
Don't use nargin variable unless it is used more than once.

diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -340,20 +340,18 @@ DEFUN_DLD (__glpk__, args, ,
 @deftypefn {Loadable Function} {[@var{values}] =} __glpk__ (@var{args})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #if defined (HAVE_GLPK)
 
-  int nargin = args.length ();
-
   // FIXME: Should we even need checking for an internal function?
-  if (nargin != 9)
+  if (args.length () != 9)
     print_usage ();
 
   //-- 1nd Input. A column array containing the objective function
   //--            coefficients.
   volatile int mrowsc = args(0).rows ();
 
   Matrix C = args(0).xmatrix_value ("__glpk__: invalid value of C");
 
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -345,19 +345,17 @@ DEFUN_DLD (cholinv, args, ,
 @deftypefn {Loadable Function} {} cholinv (@var{A})\n\
 Compute the inverse of the symmetric positive definite matrix @var{A} using\n\
 the Cholesky@tie{}factorization.\n\
 @seealso{chol, chol2inv, inv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   if (nr == 0 || nc == 0)
@@ -476,19 +474,17 @@ decomposition, @var{U}.\n\
 Note that @var{U} should be an upper-triangular matrix with positive\n\
 diagonal elements.  @code{chol2inv (@var{U})} provides\n\
 @code{inv (@var{U}'*@var{U})} but it is much faster than using @code{inv}.\n\
 @seealso{chol, cholinv, inv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   if (nr == 0 || nc == 0)
@@ -780,19 +776,17 @@ On return, @var{info} is set to\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholupdate, choldelete, cholshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 3)
+  if (args.length () != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
   if (argr.is_numeric_type () && argu.is_numeric_type ()
       && argj.is_real_scalar ())
@@ -1027,19 +1021,17 @@ Given a Cholesky@tie{}factorization of a
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper\n\
 triangular, return the Cholesky@tie{}factorization of @w{A(p,p)}, where\n\
 @w{p = [1:j-1,j+1:n+1]}.\n\
 @seealso{chol, cholupdate, cholinsert, cholshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 2)
+  if (args.length () != 2)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
 
   if (argr.is_numeric_type () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
@@ -1161,19 +1153,17 @@ triangular, return the Cholesky@tie{}fac
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{chol, cholupdate, cholinsert, choldelete}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 3)
+  if (args.length () != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argi = args(1);
   octave_value argj = args(2);
 
   if (argr.is_numeric_type ()
       && argi.is_real_scalar () && argj.is_real_scalar ())
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -149,19 +149,18 @@ of the blocks.  If @var{S} is square the
 \n\
 The method used is described in: @nospell{A. Pothen & C.-J. Fan.}\n\
 @cite{Computing the Block Triangular Form of a Sparse Matrix}.\n\
 ACM Trans. Math. Software, 16(4):303-324, 1990.\n\
 @seealso{colamd, ccolamd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  int nargin = args.length ();
 
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
 #if HAVE_CXSPARSE
   retval = dmperm_internal (false, args(0), nargout);
 #else
   error ("dmperm: not available in this version of Octave");
 #endif
 
@@ -195,19 +194,18 @@ Note that only the structure of the matr
 on a @nospell{Dulmage-Mendelsohn} permutation to block triangular form.  As\n\
 such the numerical rank of the matrix @var{S} is bounded by\n\
 @code{sprank (@var{S}) >= rank (@var{S})}.  Ignoring floating point errors\n\
 @code{sprank (@var{S}) == rank (@var{S})}.\n\
 @seealso{dmperm}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  int nargin = args.length ();
 
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
 #if HAVE_CXSPARSE
   retval = dmperm_internal (true, args(0), nargout);
 #else
   error ("sprank: not available in this version of Octave");
 #endif
 
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -753,19 +753,17 @@ to recompute the factorization from scra
 The QR@tie{}factorization supplied may be either full (Q is square) or\n\
 economized (R is square).\n\
 \n\
 @seealso{qr, qrinsert, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 4)
+  if (args.length () != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argu = args(2);
   octave_value argv = args(3);
 
   if (argq.is_numeric_type () && argr.is_numeric_type ()
@@ -1404,19 +1402,18 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*\n\
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{qr, qrupdate, qrinsert, qrdelete}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  int nargin = args.length ();
 
-  if (nargin != 4)
+  if (args.length () != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argi = args(2);
   octave_value argj = args(3);
 
   if (argq.is_numeric_type () && argr.is_numeric_type ())
diff --git a/libinterp/dldfcn/symrcm.cc b/libinterp/dldfcn/symrcm.cc
--- a/libinterp/dldfcn/symrcm.cc
+++ b/libinterp/dldfcn/symrcm.cc
@@ -433,19 +433,18 @@ 157--172 1969, Brandon Press, New Jersey
 @nospell{A. George, J.W.H. Liu}. @cite{Computer Solution of Large Sparse\n\
 Positive Definite Systems}, Prentice Hall Series in Computational\n\
 Mathematics, ISBN 0-13-165274-5, 1981.\n\
 \n\
 @seealso{colperm, colamd, symamd}\n\
 @end deftypefn")
 {
   octave_value retval;
-  int nargin = args.length ();
 
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   // the parameter of the matrix is converted into a sparse matrix
   //(if necessary)
   octave_idx_type *cidx;
   octave_idx_type *ridx;
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1377,19 +1377,17 @@ c(2,1,:)(:)\n\
         [3,1] = 3\n\
       @}\n\
 @end group\n\
 @end example\n\
 \n\
 @seealso{cell2struct, fieldnames}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   const octave_map m = args(0).xmap_value ("struct2cell: argument S must be a structure");
 
   const dim_vector m_dv = m.dims ();
 
   octave_idx_type num_fields = m.nfields ();
 
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1841,16 +1841,17 @@ DEFUN (str2func, args, ,
 Return a function handle constructed from the string @var{fcn_name}.\n\
 \n\
 If the optional @qcode{\"global\"} argument is passed, locally visible\n\
 functions are ignored in the lookup.\n\
 @seealso{func2str, inline}\n\
 @end deftypefn")
 {
   octave_value retval;
+
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string nm = args(0).xstring_value ("str2func: FCN_NAME must be a string");
 
   if (nm[0] == '@')
@@ -1902,19 +1903,17 @@ functions are ignored in the lookup.\n\
 
 DEFUN (is_function_handle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} is_function_handle (@var{x})\n\
 Return true if @var{x} is a function handle.\n\
 @seealso{isa, typeinfo, class, functions}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   return octave_value (args(0).is_function_handle ());
 }
 
 /*
 %!shared fh
 %! fh = @(x) x;
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -844,19 +844,17 @@ Return a character string representing t
 \n\
 Note that @code{char (@var{fun})} is equivalent to\n\
 @code{formula (@var{fun})}.\n\
 @seealso{char, argnames, inline, vectorize}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_fcn_inline* fn = args(0).fcn_inline_value (true);
 
   if (fn)
     retval = octave_value (fn->fcn_text ());
   else
     error ("formula: FUN must be an inline function");
@@ -879,19 +877,17 @@ DEFUN (argnames, args, ,
 @deftypefn {Built-in Function} {} argnames (@var{fun})\n\
 Return a cell array of character strings containing the names of the\n\
 arguments of the inline function @var{fun}.\n\
 @seealso{inline, formula, vectorize}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_fcn_inline *fn = args(0).fcn_inline_value (true);
 
   if (fn)
     {
       string_vector t1 = fn->fcn_arg_names ();
 
@@ -936,19 +932,17 @@ quadv (fcn, 0, 3)\n\
    @result{} 6\n\
 @end group\n\
 @end example\n\
 @seealso{inline, formula, argnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   std::string old_func;
   octave_fcn_inline* old = 0;
   bool func_is_string = true;
 
   if (args(0).is_string ())
     old_func = args(0).string_value ();
diff --git a/libinterp/octave-value/ov-null-mat.cc b/libinterp/octave-value/ov-null-mat.cc
--- a/libinterp/octave-value/ov-null-mat.cc
+++ b/libinterp/octave-value/ov-null-mat.cc
@@ -109,19 +109,17 @@ distinguish the cases:\n\
 This should delete elements if @code{I} is nonempty.\n\
 \n\
 @item @code{X = []; A(I) = X}\n\
 This should give an error if @code{I} is nonempty.\n\
 @end table\n\
 @seealso{isempty, isindex}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   return octave_value (args(0).is_null_value ());
 }
 
 /*
 %!assert (isnull ([]), true)
 %!assert (isnull ([1]), false)
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1893,19 +1893,17 @@ Return true if the @var{x} is a structur
 \n\
 If @var{name} is a cell array of strings then a logical array of equal\n\
 dimension is returned.\n\
 @seealso{fieldnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 2)
+  if (args.length () != 2)
     print_usage ();
 
   retval = false;
 
   if (args(0).is_map ())
     {
       octave_map m = args(0).map_value ();
 
@@ -1947,19 +1945,17 @@ DEFUN (numfields, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} numfields (@var{s})\n\
 Return the number of fields of the structure @var{s}.\n\
 @seealso{fieldnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   if (args(0).is_map ())
     retval = static_cast<double> (args(0).nfields ());
   else
     error ("numfields: argument must be a struct");
 
   return retval;
@@ -2118,19 +2114,17 @@ removed.\n\
 \n\
 If @var{f} is a cell array of strings or a character array, remove each of\n\
 the named fields.\n\
 @seealso{orderfields, fieldnames, isfield}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 2)
+  if (args.length () != 2)
     print_usage ();
 
   octave_map m = args(0).xmap_value ("rmfield: first argument must be a struct");
 
   octave_value_list fval = Fcellstr (args(1), 1);
 
   Cell fcell = fval(0).cell_value ();
 
diff --git a/libinterp/octave-value/ov-type-conv.h b/libinterp/octave-value/ov-type-conv.h
--- a/libinterp/octave-value/ov-type-conv.h
+++ b/libinterp/octave-value/ov-type-conv.h
@@ -73,19 +73,17 @@ octave_type_conv_body (const octave_valu
   return retval;
 }
 
 
 #define OCTAVE_TYPE_CONV_BODY3(NAME, MATRIX_RESULT_T, SCALAR_RESULT_T) \
  \
   octave_value retval; \
  \
-  int nargin = args.length (); \
- \
-  if (nargin != 1) \
+  if (args.length () != 1) \
     print_usage (); \
  \
   const octave_value arg = args(0); \
  \
   int t_result = MATRIX_RESULT_T::static_type_id (); \
  \
   retval = octave_type_conv_body (arg, #NAME, t_result); \
   if (retval.is_undefined ()) \
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -494,18 +494,16 @@ octave_user_function::do_multi_index_op 
     }
 
 #ifdef HAVE_LLVM
   if (is_special_expr ()
       && tree_jit::execute (*this, args, retval))
     return retval;
 #endif
 
-  int nargin = args.length ();
-
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth >= Vmax_recursion_depth)
     {
       error ("max_recursion_depth exceeded");
@@ -571,18 +569,18 @@ octave_user_function::do_multi_index_op 
       // variables will be cleared before the parameter lists are
       // cleared.  That way, any function parameters that have been
       // declared global will be unmarked as global before they are
       // undefined by the clear_param_list cleanup function.
 
       frame.add_fcn (symbol_table::clear_variables);
     }
 
-  bind_automatic_vars (arg_names, nargin, nargout, all_va_args (args),
-                       lvalue_list);
+  bind_automatic_vars (arg_names, args.length (), nargout,
+                       all_va_args (args), lvalue_list);
 
   frame.add_method (this, &octave_user_function::restore_warning_states);
 
   bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
   if (echo_commands)
     print_code_function_header ();
 
@@ -1073,19 +1071,17 @@ If @var{k} is outside the range @code{1:
 false.  @var{k} can also be an array, in which case the function works\n\
 element-by-element and a logical array is returned.  At the top level,\n\
 @code{isargout} returns an error.\n\
 @seealso{nargout, varargout, nthargout}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   if (! symbol_table::at_top_level ())
     {
       int nargout1 = symbol_table::varval (".nargout.").int_value ();
 
       Matrix ignored;
       octave_value tmp = symbol_table::varval (".ignored.");
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4677,19 +4677,17 @@ get_feval_args (const octave_value_list&
 // are the actual arguments to the function.  NARGOUT is the number of
 // output arguments expected.
 
 octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin > 0)
+  if (args.length () > 0)
     {
       octave_value f_arg = args(0);
 
       if (f_arg.is_string ())
         {
           std::string name = f_arg.string_value ();
 
           octave_value_list tmp_args = get_feval_args (args);
@@ -4746,19 +4744,17 @@ feval (@var{f}, 1)\n\
 \n\
 @noindent\n\
 are equivalent ways to call the function referred to by @var{f}.  If it\n\
 cannot be predicted beforehand whether @var{f} is a function handle,\n\
 function name in a string, or inline function then @code{feval} can be used\n\
 instead.\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin == 0)
+  if (args.length () == 0)
     print_usage ();
 
   return feval (args, nargout);
 }
 
 DEFUN (builtin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@dots{}] =} builtin (@var{f}, @dots{})\n\
@@ -4782,19 +4778,17 @@ sin (0)\n\
 builtin (\"sin\", 0)\n\
   @result{} 0\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin == 0)
+  if (args.length () == 0)
     print_usage ();
 
   const std::string name (args(0).xstring_value ("builtin: function name (F) must be a string"));
 
   octave_value fcn = symbol_table::builtin_find (name);
 
   if (fcn.is_defined ())
     retval = feval (fcn.function_value (), args.splice (0, 1), nargout);
@@ -5044,19 +5038,17 @@ DEFUN (assignin, args, ,
 @deftypefn {Built-in Function} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @qcode{\"base\"} or @qcode{\"caller\"}.\n\
 @seealso{evalin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin != 3)
+  if (args.length () != 3)
     print_usage ();
 
   std::string context = args(0).xstring_value ("assignin: CONTEXT must be a string");
 
   unwind_protect frame;
 
   if (context == "caller")
     octave_call_stack::goto_caller_frame ();
diff --git a/libinterp/parse-tree/pt-misc.cc b/libinterp/parse-tree/pt-misc.cc
--- a/libinterp/parse-tree/pt-misc.cc
+++ b/libinterp/parse-tree/pt-misc.cc
@@ -174,29 +174,27 @@ tree_parameter_list::initialize_undefine
           lval.assign (octave_value::op_asn_eq, val);
         }
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
-  int nargin = args.length ();
-
   int expected_nargin = length ();
 
   iterator p = begin ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
       tree_decl_elt *elt = *p++;
 
       octave_lvalue ref = elt->lvalue ();
 
-      if (i < nargin)
+      if (i < args.length ())
         {
           if (args(i).is_defined () && args(i).is_magic_colon ())
             {
               if (! elt->eval ())
                 {
                   error ("no default value for argument %d", i+1);
                   return;
                 }
