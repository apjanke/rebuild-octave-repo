# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1375450258 -3600
#      Fri Aug 02 14:30:58 2013 +0100
# Node ID 35a1bd41aa023d0400043085511550f85165b95e
# Parent  bbda4d952eb5b90a99d39d7c120f93a8d630d08c
Fix reading of image alpha channel (bug #32986).

* __magick_read__.cc (read_images): fix reading of the alpha channel by
  using separate index for alpha channel (regression from cset dcac71776ae8);
  make use of Magick's MaxRGB constant; change inversion of alpha channel to
  avoid use of abs();
  (read_indexed_images): remove use of abs () for inversion of alpha channel.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -153,17 +153,17 @@ read_indexed_images (std::vector<Magick:
 
           double* alpha_fvec = alpha.fortran_vec ();
 
           idx = 0;
           for (octave_idx_type pix = 0; pix < nPixels; pix++)
             {
               // GraphicsMagick stores the alpha values inverted, i.e.,
               // 1 for transparent and 0 for opaque so we fix that here.
-              alpha_fvec[idx] = abs (amap(img(idx), 0) - 1);
+              alpha_fvec[idx] = 1 - amap(img(idx), 0);
               idx++;
             }
           retval(2) = alpha;
         }
 
       else
         {
           for (octave_idx_type i = 0; i < mapsize; i++)
@@ -218,20 +218,21 @@ read_images (std::vector<Magick::Image>&
   // a floating point image. In this case, the values need to be rescaled
   // for the range [0 1] (this is what Matlab has documented on the page
   // about image types but in some cases seems to be doing something else.
   // See bug #39249).
   // Finally, we must do the division ourselves (set a divisor) instead of
   // using quantumOperator for the cases where we will be returning floating
   // point and want things in the range [0 1]. This is the same reason why
   // the divisor is of type double.
-  const bool   float_out = imvec[0].depth () == 32;
-  const double type_max  = float_out ? 1 : ((uint64_t (1) << QuantumDepth) - 1);
-  const double divisor   = float_out ? std::numeric_limits<uint32_t>::max () :
-                           type_max / ((uint64_t (1) << imvec[0].depth ()) - 1);
+  // TODO in the next release of GraphicsMagick, MaxRGB should be replaced
+  //      with QuantumRange since MaxRGB is already deprecated in ImageMagick.
+  const double divisor   = imvec[0].depth () == 32 ?
+                           std::numeric_limits<uint32_t>::max () :
+                           MaxRGB / ((uint64_t (1) << imvec[0].depth ()) - 1);
 
   // FIXME: this workaround should probably be fixed in GM by creating a
   //        new ImageType BilevelMatteType
   // Despite what GM documentation claims, opacity is not only on the types
   // with Matte on the name. It is possible that an image is completely
   // black (1 color), and have a second channel set for transparency (2nd
   // color). Its type will be bilevel since there is no BilevelMatte. The
   // only way to check for this seems to be by checking matte ().
@@ -317,17 +318,17 @@ read_images (std::vector<Magick::Image>&
               = imvec[frameidx(frame)].getConstPixels (col_start, row_start,
                                                        col_cache, row_cache);
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     img_fvec[idx] = pix->red / divisor;
-                    a_fvec[idx]   = abs ((pix->opacity / divisor) - type_max);
+                    a_fvec[idx]   = (MaxRGB - pix->opacity) / divisor;
                     pix += row_shift;
                     idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
         break;
@@ -392,20 +393,19 @@ read_images (std::vector<Magick::Image>&
 
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     rbuf[idx]     = pix->red     / divisor;
                     gbuf[idx]     = pix->green   / divisor;
                     bbuf[idx]     = pix->blue    / divisor;
-                    a_fvec[idx]   = abs ((pix->opacity / divisor) - type_max);
+                    a_fvec[a_idx++] = (MaxRGB - pix->opacity) / divisor;
                     pix += row_shift;
                     idx++;
-                    a_idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
         break;
       }
 
@@ -475,20 +475,19 @@ read_images (std::vector<Magick::Image>&
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
                     cbuf[idx]     = pix->red     / divisor;
                     mbuf[idx]     = pix->green   / divisor;
                     ybuf[idx]     = pix->blue    / divisor;
                     kbuf[idx]     = pix->opacity / divisor;
-                    a_fvec[idx]   = abs ((*apix / divisor) - type_max);
+                    a_fvec[a_idx++] = (MaxRGB - *apix) / divisor;
                     pix += row_shift;
                     idx++;
-                    a_idx++;
                   }
                 pix -= col_shift;
               }
           }
         retval(2) = alpha;
         break;
       }
 
