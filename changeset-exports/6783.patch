# HG changeset patch
# User dbateman
# Date 1184948011 0
#      Fri Jul 20 16:13:31 2007 +0000
# Node ID f966543d105fe30b54a23aa60cde9cd391dc3355
# Parent  e3f06290847c76e6ff35ada903766fd02b57d1cd
[project @ 2007-07-20 16:13:31 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-07-20  David Bateman  <dbateman@free.fr>
+
+        * zfstream.cc (BUFSIZE): Increase default buffer size to 256kB
+        (gzfilebuf::underflow): Stash the last 16 characters read, so as
+        to avoid calling pbackfail as much as possible.
+
 2007-07-18  David Bateman  <dbateman@free.fr>
 
          * zfstream.cc (int_type gzfilebuf::pbackfail (int_type)): New
          method to putback a character when the putback position in the
          internal buffer doesn't exist.
          * zfstream.h (int_type pbackfail (int_type)): Declaration it.
 
 2007-07-14  Michael Goffioul  <michael.goffioul@swing.be>
diff --git a/src/zfstream.cc b/src/zfstream.cc
--- a/src/zfstream.cc
+++ b/src/zfstream.cc
@@ -35,17 +35,18 @@ 02110-1301, USA.
 #include "zfstream.h"
 
 #ifdef HAVE_ZLIB
 
 #include <cstring>          // for strcpy, strcat, strlen (mode strings)
 #include <cstdio>           // for BUFSIZ
 
 // Internal buffer sizes (default and "unbuffered" versions)
-#define BIGBUFSIZE BUFSIZ
+#define STASHED_CHARACTERS 16
+#define BIGBUFSIZE (256 * 1024 + STASHED_CHARACTERS) 
 #define SMALLBUFSIZE 1
 
 /*****************************************************************************/
 
 // Default constructor
 gzfilebuf::gzfilebuf()
 : file(NULL), io_mode(std::ios_base::openmode(0)), own_fd(false),
   buffer(NULL), buffer_size(BIGBUFSIZE), own_buffer(true)
@@ -257,28 +258,40 @@ gzfilebuf::underflow()
   // to be called when gptr >= egptr, but it serves as error check)
   if (this->gptr() && (this->gptr() < this->egptr()))
     return traits_type::to_int_type(*(this->gptr()));
 
   // If the file hasn't been opened for reading, produce error
   if (!this->is_open() || !(io_mode & std::ios_base::in))
     return traits_type::eof();
 
+  // Copy the final characters to the front of the buffer
+  int stash = 0;
+  if (this->eback() && buffer && buffer_size > STASHED_CHARACTERS)
+    {
+      char_type *ptr1 = buffer;
+      char_type *ptr2 = this->egptr() - STASHED_CHARACTERS + 1;
+      if (ptr2 > this->eback())
+	while (stash++ <= STASHED_CHARACTERS)
+	  *ptr1++ = *ptr2++;
+    }
+
   // Attempt to fill internal buffer from gzipped file
   // (buffer must be guaranteed to exist...)
-  int bytes_read = gzread(file, buffer, buffer_size);
+  int bytes_read = gzread(file, buffer + stash, buffer_size - stash);
+
   // Indicates error or EOF
   if (bytes_read <= 0)
   {
     // Reset get area
     this->setg(buffer, buffer, buffer);
     return traits_type::eof();
   }
-  // Make all bytes read from file available as get area
-  this->setg(buffer, buffer, buffer + bytes_read);
+  // Make all bytes read from file plus the stash available as get area
+  this->setg(buffer, buffer + stash, buffer + bytes_read + stash);
 
   // Return next character in get area
   return traits_type::to_int_type(*(this->gptr()));
 }
 
 // Write put area to gzipped file
 gzfilebuf::int_type
 gzfilebuf::overflow(int_type c)
