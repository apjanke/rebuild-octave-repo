# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1423259701 -3600
#      Fri Feb 06 22:55:01 2015 +0100
# Node ID ff56a98991017f2f20a6562c046cf6dd9d566f38
# Parent  dfea01b3425f4be1866b0f3021d0c4fec9f0bed4
fix new shortcut dialog when applying new settings (fix #44196)

* settings-dialog.cc (write_changed_settings): new boolean parameter whether
  settings dialog is closing or not, calling function for writing the shortcuts
  with this parameter;
  (button_clicked): calling write_changed_settings with new flag set to false
  when button with accept role was clicked

* settings-dialog.h: write_changed_settings with boolean parameter

* shortcut-manager.cc (do_write_shortcuts): delete shortcut dialog only if
  settings dialog is closing, setting to 0 after deletion;
  (do_import_export): call do_write_shortcuts with new flag

* shortcut-manager.h: do_/write_shortcuts with new boolean parameter

diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -604,17 +604,17 @@ settings_dialog::read_terminal_colors (Q
         }
     }
 
   // place grid with elements into the tab
   ui->terminal_colors_box->setLayout (style_grid);
 }
 
 void
-settings_dialog::write_changed_settings ()
+settings_dialog::write_changed_settings (bool closing)
 {
   QSettings *settings = resource_manager::get_settings ();
   // FIXME: what should happen if settings is 0?
 
   // the icon set
   QString widget_icon_set = "NONE";
   if (ui->general_icon_letter->isChecked ())
     widget_icon_set = "LETTER";
@@ -818,17 +818,17 @@ settings_dialog::write_changed_settings 
 
   // shortcuts
   settings->setValue ("shortcuts/prevent_readline_conflicts",
                       ui->cb_prevent_readline_conflicts->isChecked ());
   int set = 0;
   if (ui->rb_sc_set2->isChecked ())
     set = 1;
   settings->setValue ("shortcuts/set",set);
-  shortcut_manager::write_shortcuts (0, settings);  // 0: write both sets
+  shortcut_manager::write_shortcuts (0, settings, closing); // 0: write both sets
 
   // settings dialog's geometry
   settings->setValue ("settings/last_tab",ui->tabWidget->currentIndex ());
   settings->setValue ("settings/geometry",saveGeometry ());
 
   settings->sync ();
 }
 
@@ -958,17 +958,17 @@ settings_dialog::write_terminal_colors (
 void
 settings_dialog::button_clicked (QAbstractButton *button)
 {
   QDialogButtonBox::ButtonRole button_role = ui->button_box->buttonRole (button);
 
   if (button_role == QDialogButtonBox::ApplyRole ||
       button_role == QDialogButtonBox::AcceptRole)
     {
-      write_changed_settings ();
+      write_changed_settings (button_role == QDialogButtonBox::AcceptRole);
       emit apply_new_settings ();
     }
 
   if (button_role == QDialogButtonBox::RejectRole ||
       button_role == QDialogButtonBox::AcceptRole)
     close ();
 }
 
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -69,17 +69,17 @@ private:
 #ifdef HAVE_QSCINTILLA
   void read_lexer_settings (QsciLexer *lexer, QSettings *settings);
   void write_lexer_settings (QsciLexer *lexer, QSettings *settings);
   int  get_valid_lexer_styles (QsciLexer *lexer, int styles[]);
   enum { MaxLexerStyles = 64,
          MaxStyleNumber = 128 };
 #endif
 
-  void write_changed_settings ();
+  void write_changed_settings (bool closing);
 
   void read_workspace_colors (QSettings *settings);
   void write_workspace_colors (QSettings *settings);
 
   void read_terminal_colors (QSettings *settings);
   void write_terminal_colors (QSettings *settings);
 
   color_picker *_widget_title_bg_color;
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -414,17 +414,17 @@ shortcut_manager::do_fill_treewidget (QT
       _item_index_hash[tree_item] = i + 1; // index+1 to avoid 0
       _index_item_hash[i] = tree_item;
     }
 
 }
 
 // write one or all actual shortcut set(s) into a settings file
 void
-shortcut_manager::do_write_shortcuts (int set, QSettings* settings)
+shortcut_manager::do_write_shortcuts (int set, QSettings* settings, bool closing)
 {
   if (set)
     {
       // set is not zero, only write the desired set (index = set-1)
       // into the settings file that the user has selected for this export
       for (int i = 0; i < _sc.count (); i++)  // loop over all shortcuts
         {
           settings->setValue("shortcuts/"+_sc.at (i).settings_key,
@@ -437,17 +437,22 @@ shortcut_manager::do_write_shortcuts (in
       // (this is only the case when called from the closing settings dialog)
       for (int i = 0; i < _sc.count (); i++)  // loop over all shortcuts
         {
           settings->setValue("shortcuts/"+_sc.at (i).settings_key,
                              _sc.at (i).actual_sc[0].toString ());
           settings->setValue("shortcuts/"+_sc.at (i).settings_key+"_1",
                             _sc.at (i).actual_sc[1].toString ());
         }
-      delete _dialog;  // the dialog for key sequences can be removed now
+
+      if (closing)
+        {
+          delete _dialog;  // the dialog for key sequences can be removed now
+          _dialog = 0;     // make sure it is zero again
+        }
     }
 
   settings->sync ();    // sync the settings file
 }
 
 void
 shortcut_manager::do_set_shortcut (QAction* action, const QString& key)
 {
@@ -661,17 +666,17 @@ shortcut_manager::do_import_export (bool
   // create a settings object related to this file
   QSettings *osc_settings = new QSettings (file, QSettings::IniFormat);
   if (osc_settings)
     {
       // the settings object was successfully created: carry on
       if (import)
         import_shortcuts (set, osc_settings);   // import (special action)
       else
-        do_write_shortcuts (set, osc_settings); // export, like saving settings
+        do_write_shortcuts (set, osc_settings, false); // export, (saving settings)
     }
   else
     qWarning () << tr ("Failed to open %1 as octave shortcut file"). arg (file);
 
 }
 
 
 // enter_shortcut:
diff --git a/libgui/src/shortcut-manager.h b/libgui/src/shortcut-manager.h
--- a/libgui/src/shortcut-manager.h
+++ b/libgui/src/shortcut-manager.h
@@ -58,20 +58,20 @@ public:
   ~shortcut_manager ();
 
   static void init_data ()
   {
     if (instance_ok ())
       instance->do_init_data ();
   }
 
-  static void write_shortcuts (int set, QSettings *settings)
+  static void write_shortcuts (int set, QSettings *settings, bool closing)
   {
     if (instance_ok ())
-      instance->do_write_shortcuts (set, settings);
+      instance->do_write_shortcuts (set, settings, closing);
   }
 
   static void set_shortcut (QAction *action, const QString& key)
   {
     if (instance_ok ())
       instance->do_set_shortcut (action, key);
   }
 
@@ -108,17 +108,17 @@ private:
 
   shortcut_manager (const shortcut_manager&);
   shortcut_manager& operator = (const shortcut_manager&);
 
   static bool instance_ok (void);
 
   void init (QString, QString, QKeySequence);
   void do_init_data ();
-  void do_write_shortcuts (int set, QSettings *settings);
+  void do_write_shortcuts (int set, QSettings *settings, bool closing);
   void do_set_shortcut (QAction *action, const QString& key);
   void do_fill_treewidget (QTreeWidget *tree_view);
   void do_import_export (bool import, int set);
   void shortcut_dialog (int);
   void import_shortcuts (int set, QSettings *settings);
 
   struct shortcut_t
   {
