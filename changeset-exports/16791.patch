# HG changeset patch
# User Rik <rik@octave.org>
# Date 1371780895 25200
#      Thu Jun 20 19:14:55 2013 -0700
# Node ID acd6a21259a95868ff5e9b7464eea4ed54c13ef3
# Parent  d21bf69e49b2afbe9dba7132b990377bc8e61c1d
doc: Use the serial comma in Contributors chapter.

* doc/interpreter/contrib.txi: Use the serial comma.

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -36,17 +36,17 @@ This chapter is dedicated to those who w
 
 @node How to Contribute
 @section How to Contribute
 The mailing list for Octave development discussion and sending
 contributions is @email{maintainers@@octave.org}.  This concerns the
 development of Octave core, i.e., code that goes to Octave directly.
 You may consider developing and publishing a package instead; a great
 place for this is the allied Octave-Forge project
-(@url{http://octave.sourceforge.net}).  Note that the Octave project is
+(@url{http://octave.sourceforge.net}).  Note that the Octave core project is
 inherently more conservative and follows narrower rules.
 
 @node Building the Development Sources
 @section Building the Development Sources
 
 The directions for building from the Development sources change from
 time to time, so you should read the resources for developers on the web
 or in the development sources archive.  Start here:
@@ -359,17 +359,17 @@ Use templates wisely to reduce code dupl
 expressions, labels and gotos, and explicit typecasts.  If you need to
 typecast, use the modern C++ casting operators.  In functions, minimize
 the number of @code{return} statements---use nested @code{if} statements
 if possible.
 
 @node Other Sources
 @section Other Sources
 Apart from C++ and Octave language (m-files), Octave's sources include
-files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo and
+files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo, and
 @TeX{}.  There are not many rules to follow when using these other
 languages; some of them are summarized below.  In any case, the golden
 rule is: if you modify a source file, try to follow any conventions you
 can detect in the file or other similar files.
 
 For C you should obviously follow all C++ rules that can apply.
 
 If you modify a Fortran file, you should stay within Fortran 77 with
