# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267098913 -3600
#      Thu Feb 25 12:55:13 2010 +0100
# Node ID 72fab01e5d68390bfb37f30aa630f479964fa8fb
# Parent  7658cd4bdcf280612290a08e8b80a105673a0e47
improve some size_t queries

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -338,17 +338,17 @@ public:
       return retval;
     }
 
   octave_idx_type rows (void) const { return dim1 (); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
   octave_idx_type pages (void) const { return dim3 (); }
 
-  size_t byte_size (void) const { return numel () * sizeof (T); }
+  size_t byte_size (void) const { return static_cast<size_t> (numel ()) * sizeof (T); }
 
   // Return a const-reference so that dims ()(i) works efficiently.
   const dim_vector& dims (void) const { return dimensions; }
 
   Array<T> squeeze (void) const;
   
   void chop_trailing_singletons (void) GCC_ATTR_DEPRECATED
   { dimensions.chop_trailing_singletons (); }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+
+2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-mem.h (copy_or_memcpy, fill_or_memset, no_ctor_new): Accept
+	size_t rather than octave_idx_type.
+	* Array.h (Array<T>::byte_size): Correct calculation.
+	* DiagArray2.h (DiagArray2<T>::byte_size): Call inherited byte_size.
+	* PermMatrix.h (PermMatrix::byte_size): Ditto.
+
 2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* str-vec.h (string_vector::string_vector): Use (n, 1).
 	(string_vector::resize): Ditto.
 	* str-vec.cc (string_vector::string_vector): Ditto.
 
 2010-02-24  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -143,17 +143,17 @@ public:
   octave_idx_type columns (void) const { return dim2 (); }
 
   octave_idx_type diag_length (void) const { return Array<T>::length (); }
   // FIXME: a dangerous ambiguity?
   octave_idx_type length (void) const { return Array<T>::length (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
-  size_t byte_size (void) const { return length () * sizeof (T); }
+  size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
   Array<T> diag (octave_idx_type k = 0) const;
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements. 
 
diff --git a/liboctave/PermMatrix.h b/liboctave/PermMatrix.h
--- a/liboctave/PermMatrix.h
+++ b/liboctave/PermMatrix.h
@@ -58,17 +58,18 @@ public:
   octave_idx_type perm_length (void) const 
     { return Array<octave_idx_type>::length (); }
   // FIXME: a dangerous ambiguity?
   octave_idx_type length (void) const 
     { return perm_length (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
-  size_t byte_size (void) const { return perm_length () * sizeof (octave_idx_type); }
+  size_t byte_size (void) const 
+    { return Array<octave_idx_type>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }
 
   Array<octave_idx_type> pvec (void) const
     { return *this; }
 
   octave_idx_type 
   elem (octave_idx_type i, octave_idx_type j) const
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -258,18 +258,22 @@ public:
   octave_idx_type get_row_index (octave_idx_type k) { return ridx (k); }
   octave_idx_type get_col_index (octave_idx_type k)
     {
       octave_idx_type ret = 0;
       while (cidx(ret+1) < k)
         ret++;
       return ret;
     }
-  size_t byte_size (void) const { return (cols () + 1) * sizeof (octave_idx_type) +
-      capacity () * (sizeof (T) + sizeof (octave_idx_type)); }
+
+  size_t byte_size (void) const 
+    { 
+      return (static_cast<size_t>(cols () + 1) * sizeof (octave_idx_type)
+              + static_cast<size_t> (capacity ()) * (sizeof (T) + sizeof (octave_idx_type))); 
+    }
 
   dim_vector dims (void) const { return dimensions; }
 
   Sparse<T> squeeze (void) const { return *this; }
   
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
   T range_error (const char *fcn, octave_idx_type n) const;
diff --git a/liboctave/oct-mem.h b/liboctave/oct-mem.h
--- a/liboctave/oct-mem.h
+++ b/liboctave/oct-mem.h
@@ -34,21 +34,21 @@ along with Octave; see the file COPYING.
 // priority. They assume that the std::complex and octave_int can be
 // manipulated as plain memory, an assumption that is always true in practice
 // but not theoretically guaranteed by the C++ standard. In the future, C++ may
 // provide a better way to accomplish these tasks.
 
 // Unaliased copy. This boils down to memcpy, even for octave_int and complex types.
 
 template <class T>
-inline void copy_or_memcpy (octave_idx_type n, const T *src, T *dest)
+inline void copy_or_memcpy (size_t n, const T *src, T *dest)
 { std::copy (src, src + n, dest); }
 
 #define DEFINE_POD_UCOPY(T) \
-inline void copy_or_memcpy (octave_idx_type n, const T *src, T *dest) \
+inline void copy_or_memcpy (size_t n, const T *src, T *dest) \
 { std::memcpy (dest, src, n * sizeof (T)); }
 
 DEFINE_POD_UCOPY (double)
 DEFINE_POD_UCOPY (float)
 DEFINE_POD_UCOPY (char)
 DEFINE_POD_UCOPY (short)
 DEFINE_POD_UCOPY (int)
 DEFINE_POD_UCOPY (long)
@@ -61,17 +61,17 @@ DEFINE_POD_UCOPY (Complex)
 DEFINE_POD_UCOPY (FloatComplex)
 
 template <class T>
 DEFINE_POD_UCOPY (octave_int<T>)
 
 // Fill by value, with a check for zero. This boils down to memset if value is
 // a POD zero.
 template <class T>
-inline void fill_or_memset (octave_idx_type n, const T& value, T *dest)
+inline void fill_or_memset (size_t n, const T& value, T *dest)
 { std::fill_n (dest, n, value); }
 
 template <class T>
 inline bool helper_is_zero_mem (const T& value)
 { 
   typedef typename query_integer_type<sizeof (T), false>::type IT; // get integer type of the same size.
   return *(reinterpret_cast<const IT *>(&value)) == 0; 
 }
@@ -83,17 +83,17 @@ inline bool helper_is_zero_mem (const st
           && helper_is_zero_mem (value.imag ())); 
 }
 
 template <class T>
 inline bool helper_is_zero_mem (const octave_int<T>& value)
 { return value.value () == T(); }
 
 #define DEFINE_POD_FILL(T) \
-inline void fill_or_memset (octave_idx_type n, const T& value, T *dest) \
+inline void fill_or_memset (size_t n, const T& value, T *dest) \
 { \
   if (helper_is_zero_mem (value)) \
     std::memset (dest, 0, n * sizeof (T)); \
   else \
     std::fill_n (dest, n, value); \
 }
 
 DEFINE_POD_FILL (double)
@@ -111,25 +111,25 @@ DEFINE_POD_FILL (Complex)
 DEFINE_POD_FILL (FloatComplex)
 
 template <class T>
 DEFINE_POD_FILL (octave_int<T>)
 
 // Uninitialized allocation. Will not initialize memory for complex and octave_int.
 // Memory allocated by octave_new should be freed by octave_delete.
 template <class T>
-inline T *no_ctor_new (octave_idx_type n)
+inline T *no_ctor_new (size_t n)
 { return new T[n]; }
 template <class T>
 inline void no_ctor_delete (T *ptr)
 { delete [] ptr; }
 
 #define DEFINE_POD_NEW_DELETE(T) \
 template <> \
-inline T *no_ctor_new<T > (octave_idx_type n) \
+inline T *no_ctor_new<T > (size_t n) \
 { return reinterpret_cast<T *> (new char[n * sizeof (T)]); } \
 template <> \
 inline void no_ctor_delete<T > (T *ptr) \
 { delete [] reinterpret_cast<char *> (ptr); }
 
 DEFINE_POD_NEW_DELETE (Complex)
 DEFINE_POD_NEW_DELETE (FloatComplex)
 
