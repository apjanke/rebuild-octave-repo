# HG changeset patch
# User jwe
# Date 823537904 0
#      Mon Feb 05 16:31:44 1996 +0000
# Node ID 1b43d3c06c048acaf42ba8b05e56dde2f86f6926
# Parent  aa2bcaefbc5a24f6eed6930464b089c1d5ce186c
[project @ 1996-02-05 16:24:56 by jwe]

diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -22,28 +22,26 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_base_de_h)
 #define octave_base_de_h 1
 
 #include "dColVector.h"
 #include "dMatrix.h"
 
-class base_diff_eqn
+class
+base_diff_eqn
 {
 public:
 
-  base_diff_eqn (void)
-    : x (), t (0.0) { }
+  base_diff_eqn (void) : x (), t (0.0) { }
 
-  base_diff_eqn (const ColumnVector& xx, double tt)
-    : x (xx), t (tt) { }
+  base_diff_eqn (const ColumnVector& xx, double tt) : x (xx), t (tt) { }
 
-  base_diff_eqn (const base_diff_eqn& a)
-    : x (a.x), t (a.t) { }
+  base_diff_eqn (const base_diff_eqn& a) : x (a.x), t (a.t) { }
 
   virtual ~base_diff_eqn (void) { }
 
   base_diff_eqn& operator = (const base_diff_eqn& a)
     {
       x = a.x;
       t = a.t;
       return *this;
diff --git a/liboctave/base-min.h b/liboctave/base-min.h
--- a/liboctave/base-min.h
+++ b/liboctave/base-min.h
@@ -21,34 +21,34 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_base_min_h)
 #define octave_base_min_h 1
 
 #include "dColVector.h"
 
-class base_minimizer
+class
+base_minimizer
 {
 public:
 
-  base_minimizer (void)
-    : x () { }
+  base_minimizer (void) : x () { }
 
-  base_minimizer (const ColumnVector& xx)
-    : x (xx) { }
+  base_minimizer (const ColumnVector& xx) : x (xx) { }
 
-  base_minimizer (const base_minimizer& a)
-    : x (a.x) { }
+  base_minimizer (const base_minimizer& a) : x (a.x) { }
 
   virtual ~base_minimizer (void) { }
 
   base_minimizer& operator = (const base_minimizer& a)
     {
-      x = a.x;
+      if (this != &a)
+	x = a.x;
+
       return *this;
     }
 
   // Derived classes must provide a function to actually do the
   // minimization.
 
   virtual ColumnVector do_minimize (double& objf, int& inform,
 				    ColumnVector& lambda) = 0;
diff --git a/liboctave/dir-ops.h b/liboctave/dir-ops.h
--- a/liboctave/dir-ops.h
+++ b/liboctave/dir-ops.h
@@ -31,20 +31,20 @@ Software Foundation, 59 Temple Place - S
 struct DIR;
 
 class
 dir_entry
 {
 public:
 
   dir_entry (const string& n = string ()) : name (n), dir (0)
-      {
-	if (! name.empty ())
-	  open ();
-      }
+    {
+      if (! name.empty ())
+        open ();
+    }
 
   dir_entry (const dir_entry& d) { copy (d); }
 
   dir_entry& operator = (const dir_entry& d)
     {
       copy (d);
       return *this;
     }
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -37,17 +37,19 @@ public:
 	if (! file_name.empty ())
 	  update_internal ();
       }
 
   file_stat (const file_stat& f) { copy (f); }
 
   file_stat& operator = (const file_stat& f)
     {
-      copy (f);
+      if (this != &f)
+	copy (f);
+
       return *this;
     }
 
   ~file_stat (void) { }
 
   void get_stats (bool force = false)
     {
       if (! initialized || force)
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -33,105 +33,107 @@ class ColumnVector;
 class Matrix;
 class Range;
 
 class
 idx_vector
 {
 private:
 
-  struct
+  class
   idx_vector_rep
-    {
-      idx_vector_rep::idx_vector_rep (void)
-	{
-	  colon = 0;
-	  len = 0;
-	  num_zeros = 0;
-	  num_ones = 0;
-	  one_zero = 0;
-	  orig_nr = 0;
-	  orig_nc = 0;
-	  initialized = 0;
-	  frozen = 0;
-	  colon_equiv_checked = 0;
-	  colon_equiv = 0;
-	  data = 0;
-	}
+  {
+  public:
+
+    idx_vector_rep::idx_vector_rep (void)
+      {
+	colon = 0;
+	len = 0;
+	num_zeros = 0;
+	num_ones = 0;
+	one_zero = 0;
+	orig_nr = 0;
+	orig_nc = 0;
+	initialized = 0;
+	frozen = 0;
+	colon_equiv_checked = 0;
+	colon_equiv = 0;
+	data = 0;
+      }
 
-      idx_vector_rep (const ColumnVector& v);
+    idx_vector_rep (const ColumnVector& v);
 
-      idx_vector_rep (const Matrix& m);
+    idx_vector_rep (const Matrix& m);
+
+    idx_vector_rep (const Range& r);
 
-      idx_vector_rep (const Range& r);
+    idx_vector_rep (char c);
 
-      idx_vector_rep (char c);
+    idx_vector_rep (const idx_vector_rep& a);
 
-      idx_vector_rep (const idx_vector_rep& a);
+    idx_vector_rep::~idx_vector_rep (void) { delete [] data; }
 
-      idx_vector_rep::~idx_vector_rep (void) { delete [] data; }
+    idx_vector_rep& operator = (const idx_vector_rep& a);
 
-      idx_vector_rep& operator = (const idx_vector_rep& a);
+    int ok (void) { return initialized; }
 
-      int ok (void) { return initialized; }
+    int capacity (void) const { return len; }
+    int length (int colon_len) const { return colon ? colon_len : len; }
 
-      int capacity (void) const { return len; }
-      int length (int colon_len) const { return colon ? colon_len : len; }
+    int elem (int n) const { return colon ? n : data[n]; }
 
-      int elem (int n) const { return colon ? n : data[n]; }
+    int checkelem (int n) const;
+    int operator () (int n) const { return checkelem (n); }
 
-      int checkelem (int n) const;
-      int operator () (int n) const { return checkelem (n); }
-	  
-      int max (void) const { return max_val; }
-      int min (void) const { return min_val; }
-	  
-      int one_zero_only (void) const { return one_zero; }
-      int zeros_count (void) const { return num_zeros; }
-      int ones_count (void) const { return num_ones; }
+    int max (void) const { return max_val; }
+    int min (void) const { return min_val; }
+
+    int one_zero_only (void) const { return one_zero; }
+    int zeros_count (void) const { return num_zeros; }
+    int ones_count (void) const { return num_ones; }
+
+    int is_colon (void) const { return colon; }
+    int is_colon_equiv (int n, int sort);
 
-      int is_colon (void) const { return colon; }
-      int is_colon_equiv (int n, int sort);
+    int orig_rows (void) const { return orig_nr; }
+    int orig_columns (void) const { return orig_nc; }
 
-      int orig_rows (void) const { return orig_nr; }
-      int orig_columns (void) const { return orig_nc; }
+    // other stuff
 
-      // other stuff
-
-      void shorten (int n); // Unsafe.  Avoid at all cost.
+    void shorten (int n); // Unsafe.  Avoid at all cost.
 
-      int freeze (int z_len, const char *tag, int prefer_zero_one,
-		  int resize_ok);
+    int freeze (int z_len, const char *tag, int prefer_zero_one,
+		int resize_ok);
 
-      // i/o
+    // i/o
 
-      ostream& print (ostream& os) const;
+    ostream& print (ostream& os) const;
 
-      int *data;
-      int len;
-      int num_zeros;
-      int num_ones;
-      int max_val;
-      int min_val;
-      int orig_nr;
-      int orig_nc;
-      int count;
-      int frozen_at_z_len;
-      int frozen_len;
-      unsigned int colon : 1;
-      unsigned int one_zero : 1;
-      unsigned int initialized : 1;
-      unsigned int frozen : 1;
-      unsigned int colon_equiv_checked : 1;
-      unsigned int colon_equiv : 1;
+    int *data;
+    int len;
+    int num_zeros;
+    int num_ones;
+    int max_val;
+    int min_val;
+    int orig_nr;
+    int orig_nc;
+    int count;
+    int frozen_at_z_len;
+    int frozen_len;
+    unsigned int colon : 1;
+    unsigned int one_zero : 1;
+    unsigned int initialized : 1;
+    unsigned int frozen : 1;
+    unsigned int colon_equiv_checked : 1;
+    unsigned int colon_equiv : 1;
 
-      void init_state (void);
+    void init_state (void);
 
-      void maybe_convert_one_zero_to_idx (int z_len, int prefer_zero_one);
-    };
+    void maybe_convert_one_zero_to_idx (int z_len, int prefer_zero_one);
+  };
 
 public:
 
   idx_vector::idx_vector (void)
     {
       rep = new idx_vector_rep ();
       rep->count = 1;
     }
diff --git a/liboctave/oct-glob.h b/liboctave/oct-glob.h
--- a/liboctave/oct-glob.h
+++ b/liboctave/oct-glob.h
@@ -41,18 +41,21 @@ public:
   glob_match (const string& p = string (),
 	      unsigned int f = pathname|noescape|period)
     : pat (p), flags (f) { }
 
   glob_match (const glob_match& gm) : pat (gm.pat), flags (gm.flags) { }
 
   glob_match& operator = (const glob_match& gm)
     {
-      pat = gm.pat;
-      flags = gm.flags;
+      if (this != &gm)
+	{
+	  pat = gm.pat;
+	  flags = gm.flags;
+	}
       return *this;
     }
 
   ~glob_match (void) { }
 
   void set_pattern (const string& p) { pat = p; }
 
   bool match (const string&);
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -35,25 +35,32 @@ str_vec_compare (const string *a, const 
 {
   return a->compare (*b);
 }
 
 class
 string_vector : public Array<string>
 {
 public:
+
   string_vector (void) : Array<string> () { }
+
   string_vector (int n) : Array<string> (n) { }
+
   string_vector (const char *s) : Array<string> (1, s) { }
+
   string_vector (const string& s) : Array<string> (1, s) { }
+
   string_vector (const string_vector& s) : Array<string> (s) { }
 
   string_vector& operator = (const string_vector& s)
     {
-      Array<string>::operator = (s);
+      if (this != &s)
+	Array<string>::operator = (s);
+
       return *this;
     }
 
   ~string_vector (void) { }
 
   int empty (void) const { return length () == 0; }
 
   int max_length (void) const
