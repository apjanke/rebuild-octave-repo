# HG changeset patch
# User Rik <rik@octave.org>
# Date 1490163711 25200
#      Tue Mar 21 23:21:51 2017 -0700
# Node ID 4adb9517d56aebcd77f8f6761874f34be54f0df6
# Parent  c4aebfe51a1705835f7b97b923bdd990484850e6
# Parent  336f2e8331fa77caa2a89ebb794b32fc6e08d939
maint: merge stable to default.

diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -37,17 +37,19 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "oct-stream.h"
 #include "error.h"
 #include "ovl.h"
 #include "utils.h"
 
 static const octave_idx_type idx_max =
-  std::numeric_limits<octave_idx_type>::max ();
+  std::numeric_limits<octave_idx_type>::max () - 1;
+
+static const double idx_max_dbl = double (idx_max);
 
 static bool
 read_cell_spec (std::istream& is, octave_idx_type& row, octave_idx_type& col)
 {
   bool stat = false;
 
   if (is.peek () == std::istream::traits_type::eof ())
     stat = true;
@@ -117,18 +119,18 @@ parse_range_spec (const octave_value& ra
                   ch = is.get ();
                   if (ch == '.')
                     {
                       ch = is.get ();
                       if (! is || ch != '.')
                         stat = false;
                     }
 
-                  rup = idx_max - 1;
-                  cup = idx_max - 1;
+                  rup = idx_max;
+                  cup = idx_max;
                 }
               else
                 {
                   rup = rlo;
                   cup = clo;
                   if (! is || ! is.eof ())
                     stat = false;
                 }
@@ -138,22 +140,22 @@ parse_range_spec (const octave_value& ra
       if (stat && is && ! is.eof ())
         stat = read_cell_spec (is, rup, cup);
 
       if (! is || ! is.eof ())
         stat = false;
     }
   else if (range_spec.is_real_matrix () && range_spec.numel () == 4)
     {
-      ColumnVector range(range_spec.vector_value ());
-      // double --> unsigned int
-      rlo = static_cast<octave_idx_type> (range(0));
-      clo = static_cast<octave_idx_type> (range(1));
-      rup = static_cast<octave_idx_type> (range(2));
-      cup = static_cast<octave_idx_type> (range(3));
+      ColumnVector range (range_spec.vector_value ());
+      // double --> unsigned int avoiding any overflow
+      rlo = static_cast<octave_idx_type> (std::min (range(0), idx_max_dbl));
+      clo = static_cast<octave_idx_type> (std::min (range(1), idx_max_dbl));
+      rup = static_cast<octave_idx_type> (std::min (range(2), idx_max_dbl));
+      cup = static_cast<octave_idx_type> (std::min (range(3), idx_max_dbl));
     }
   else
     stat = false;
 
   return stat;
 }
 
 DEFUN (dlmread, args, ,
@@ -244,33 +246,37 @@ such as text, are also replaced by the @
         sep = do_string_escapes (args(1).string_value ());
       else
         sep = args(1).string_value ();
     }
 
   // Take a subset if a range was given.
   octave_idx_type r0 = 0;
   octave_idx_type c0 = 0;
-  octave_idx_type r1 = idx_max-1;
-  octave_idx_type c1 = idx_max-1;
+  octave_idx_type r1 = idx_max;
+  octave_idx_type c1 = idx_max;
   if (nargin > 2)
     {
       if (nargin == 3)
         {
           if (! parse_range_spec (args(2), r0, c0, r1, c1))
             error ("dlmread: error parsing RANGE");
         }
       else if (nargin == 4)
         {
           r0 = args(2).idx_type_value ();
           c0 = args(3).idx_type_value ();
         }
 
       if (r0 < 0 || c0 < 0)
         error ("dlmread: left & top must be positive");
+
+      // Short-circuit and return if range is empty 
+      if (r1 < r0 || c1 < c0)
+        return ovl (Matrix (0,0));
     }
 
   octave_idx_type i = 0;
   octave_idx_type j = 0;
   octave_idx_type r = 1;
   octave_idx_type c = 1;
   // Start with a reasonable size to avoid constant resizing of matrix.
   octave_idx_type rmax = 32;
@@ -280,20 +286,25 @@ such as text, are also replaced by the @
   ComplexMatrix cdata;
 
   bool iscmplx = false;
   bool sep_is_wspace = (sep.find_first_of (" \t") != std::string::npos);
   bool auto_sep_is_wspace = false;
 
   std::string line;
 
-  // Skip the r0 leading lines (header)
-  for (octave_idx_type m = 0; m < r0; m++)
-    getline (*input, line);
-  r1 -= r0;
+  // Skip the r0 leading lines
+  octave_idx_type rcnt = r0;
+  while (rcnt > 0 && getline (*input, line))
+    rcnt--;
+
+  if (rcnt > 0)
+    return ovl (Matrix (0,0));  // Not enough lines in file to satisfy RANGE
+  else
+    r1 -= r0;
 
   std::istringstream tmp_stream;
 
   // Read the data one field at a time, growing the data matrix as needed.
   while (getline (*input, line))
     {
       // Skip blank lines for compatibility.
       if ((! sep_is_wspace || auto_sep_is_wspace)
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -191,17 +191,17 @@ set_application_id (void)
 
   if (hShell != NULL)
     {
       SETCURRENTAPPID pfnSetCurrentProcessExplicitAppUserModelID =
         reinterpret_cast<SETCURRENTAPPID> (GetProcAddress (hShell,
                                            "SetCurrentProcessExplicitAppUserModelID"));
 
       if (pfnSetCurrentProcessExplicitAppUserModelID)
-        pfnSetCurrentProcessExplicitAppUserModelID (L"gnu.octave");
+        pfnSetCurrentProcessExplicitAppUserModelID (L"gnu.octave." VERSION);
 
       FreeLibrary (hShell);
     }
 
 #endif
 }
 
 DEFUN (__open_with_system_app__, args, ,
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -188,23 +188,23 @@ function [q, err] = quadgk (f, a, b, var
   endif
 
   issingle = (isa (a, "single") || isa (b, "single")
               || isa (waypoints, "single"));
 
   if (isempty (abstol))
     abstol = ifelse (issingle, 1e-5, 1e-10);
   elseif (! isscalar (abstol) || abstol < 0)
-    error ("quadv: ABSTOL must be a scalar >=0");
+    error ("quadgk: ABSTOL must be a scalar >=0");
   endif
 
   if (isempty (reltol))
     reltol = ifelse (issingle, 1e-4, 1e-6);
   elseif (! isscalar (reltol) || reltol < 0)
-    error ("quadv: RELTOL must be a scalar >=0");
+    error ("quadgk: RELTOL must be a scalar >=0");
   endif
 
   ## Convert function given as a string to a function handle
   if (ischar (f))
     f = @(x) feval (f, x);
   endif
 
   ## Use variable substitution to weaken endpoint singularities and
