# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284582672 -7200
#      Wed Sep 15 22:31:12 2010 +0200
# Node ID 4b51c0a20a9825795a465e5a30acdfdda948fcf8
# Parent  1ec2f19857fa8c8cfd1b1ba89c477ddb88002195
optimize sum of sparse logical matrices

diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -67,16 +67,18 @@ public:
   SparseComplexMatrix (const SparseComplexMatrix& a) 
     : MSparse<Complex> (a) { }
 
   SparseComplexMatrix (const SparseComplexMatrix& a, const dim_vector& dv) 
     : MSparse<Complex> (a, dv) { }
 
   SparseComplexMatrix (const MSparse<Complex>& a) : MSparse<Complex> (a) { }
 
+  SparseComplexMatrix (const Sparse<Complex>& a) : MSparse<Complex> (a) { }
+
   explicit SparseComplexMatrix (const ComplexMatrix& a) 
     : MSparse<Complex> (a) { }
 
   explicit SparseComplexMatrix (const ComplexNDArray& a) 
     : MSparse<Complex> (a) { }
 
   SparseComplexMatrix (const Array<Complex>& a, const idx_vector& r, 
                        const idx_vector& c, octave_idx_type nr = -1, 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2010-09-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dSparse.h (SparseMatrix::SparseMatrix (const Sparse<double>&)):
+	New ctor.
+	* CSparse.h (SparseComplexMatrix::SparseComplexMatrix 
+	(const Sparse<Complex>&)): New ctor.
+	* boolSparse.cc (SparseBoolMatrix::sum): New method.
+	* boolSparse.h: Declare it.
+
 2010-09-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* boolSparse.cc (SparseBoolMatrix::any): Optimize.
 
 2010-08-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-ch.cc: Inline basic sorts.
 
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "config.h"
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #include "boolSparse.h"
+#include "dSparse.h"
 #include "oct-mem.h"
 #include "oct-locbuf.h"
 
 // SparseBoolMatrix class.
 
 bool
 SparseBoolMatrix::operator == (const SparseBoolMatrix& a) const
 {
@@ -164,23 +165,68 @@ SparseBoolMatrix::any (int dim) const
           // We can use O(nr) memory.
           Array<bool> tmp (nr, 1, false);
           for (octave_idx_type i = 0; i < nz; i++)
             tmp.xelem(ridx(i)) = true;
           retval = tmp;
         }
       else
         {
-          OCTAVE_LOCAL_BUFFER (octave_idx_type, tmpridx, nz);
-          copy_or_memcpy (nz, ridx (), tmpridx);
-          std::sort (tmpridx, tmpridx+nz);
-          octave_idx_type new_nz = std::unique (tmpridx, tmpridx + nz) - tmpridx;
-          retval = Sparse<bool> (nr, 1, new_nz);
-          copy_or_memcpy (new_nz, tmpridx, retval.ridx ());
-          fill_or_memset (new_nz, true, retval.data ());
+          Array<octave_idx_type> tmp (nz, 1);
+          copy_or_memcpy (nz, ridx (), tmp.fortran_vec ());
+          retval = Sparse<bool> (Array<bool> (1, 1, true),
+                                 idx_vector (tmp), idx_vector (0), nr, 1,
+                                 false);
+        }
+    }
+
+  return retval;
+}
+
+SparseMatrix
+SparseBoolMatrix::sum (int dim) const
+{
+  Sparse<double> retval;
+  octave_idx_type nr = rows (), nc = cols (), nz = nnz ();
+  if (dim == -1)
+    dim = (nr == 1 && nc != 1) ? 1 : 0;
+
+  if (dim == 0)
+    {
+      // Result is a row vector.
+      retval = Sparse<double> (1, nc);
+      for(octave_idx_type i = 0; i < nc; i++)
+        retval.xcidx(i+1) = retval.xcidx(i) + (cidx(i+1) > cidx(i));
+      octave_idx_type new_nz = retval.xcidx(nc);
+      retval.change_capacity (new_nz);
+      fill_or_memset (new_nz, static_cast<octave_idx_type> (0), retval.ridx ());
+      for(octave_idx_type i = 0, k = 0; i < nc; i++)
+        {
+          octave_idx_type c = cidx(i+1) - cidx(i);
+          if (c > 0)
+            retval.xdata(k++) = c;
+        }
+    }
+  else if (dim == 1)
+    {
+      // Result is a column vector.
+      if (nz > nr)
+        {
+          // We can use O(nr) memory.
+          Array<double> tmp (nr, 1, 0);
+          for (octave_idx_type i = 0; i < nz; i++)
+            tmp.xelem(ridx(i)) += 1.0;
+          retval = tmp;
+        }
+      else
+        {
+          Array<octave_idx_type> tmp (nz, 1);
+          copy_or_memcpy (nz, ridx (), tmp.fortran_vec ());
+          retval = Sparse<double> (Array<double> (1, 1, 1.0),
+                                   idx_vector (tmp), idx_vector (0), nr, 1);
         }
     }
 
   return retval;
 }
 
 SparseBoolMatrix
 SparseBoolMatrix::diag (octave_idx_type k) const
diff --git a/liboctave/boolSparse.h b/liboctave/boolSparse.h
--- a/liboctave/boolSparse.h
+++ b/liboctave/boolSparse.h
@@ -23,16 +23,18 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_boolSparse_h)
 #define octave_boolSparse_h 1
 
 #include "Sparse.h"
 #include "MSparse-defs.h"
 #include "Sparse-op-defs.h"
 
+class SparseMatrix;
+
 class
 OCTAVE_API
 SparseBoolMatrix : public Sparse<bool>
 {
 public:
 
   SparseBoolMatrix (void) : Sparse<bool> () { }
 
@@ -103,16 +105,17 @@ public:
   // unary operations
 
   SparseBoolMatrix operator ! (void) const;
 
   // other operations
 
   SparseBoolMatrix all (int dim = -1) const;
   SparseBoolMatrix any (int dim = -1) const;
+  SparseMatrix sum (int dim = -1) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const SparseBoolMatrix& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, SparseBoolMatrix& a);
 };
 
 SPARSE_SMS_EQNE_OP_DECLS (SparseBoolMatrix, bool, OCTAVE_API)
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -61,16 +61,18 @@ SparseMatrix : public MSparse<double>
 
   SparseMatrix (const SparseMatrix& a) : MSparse<double> (a) { }
 
   SparseMatrix (const SparseMatrix& a, const dim_vector& dv) 
     : MSparse<double> (a, dv) { }
 
   SparseMatrix (const MSparse<double>& a) : MSparse<double> (a) { }
 
+  SparseMatrix (const Sparse<double>& a) : MSparse<double> (a) { }
+
   explicit SparseMatrix (const SparseBoolMatrix& a);
 
   explicit SparseMatrix (const Matrix& a) : MSparse<double> (a) { }
 
   explicit SparseMatrix (const NDArray& a) : MSparse<double> (a) { }
 
   SparseMatrix (const Array<double>& a, const idx_vector& r, 
                 const idx_vector& c, octave_idx_type nr = -1, 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2356,17 +2356,17 @@ than straightforward summation is to be 
 #undef MAKE_INT_BRANCH
 
             case btyp_bool:
               if (arg.is_sparse_type ())
                 {
                   if (isnative)
                     retval = arg.sparse_bool_matrix_value ().any (dim);
                   else
-                    retval = arg.sparse_matrix_value ().sum (dim);
+                    retval = arg.sparse_bool_matrix_value ().sum (dim);
                 }
               else if (isnative)
                 retval = arg.bool_array_value ().any (dim);
               else
                 retval = arg.bool_array_value ().sum (dim);
               break;
 
             default:
