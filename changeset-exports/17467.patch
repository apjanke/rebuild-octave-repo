# HG changeset patch
# User Rik <rik@octave.org>
# Date 1379969003 25200
#      Mon Sep 23 13:43:23 2013 -0700
# Node ID b8ecdb6ce2f8e520813f00f06ea1ed264bdd75aa
# Parent  a5c6591d01e65f852f5b86b4aa83bd532715ade6
assert.m: Speed up function by ~16% by not pre-calculating warning message.

* scripts/testfun/assert.m: Don't pre-calculate "in" warning message since it
is only used a small fraction of the time when there is an actual error.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -64,28 +64,23 @@ function assert (cond, varargin)
   persistent errmsg;
 
   call_depth++;
 
   if (call_depth == 0)
     errmsg = "";
   endif
 
-  in = deblank (argn(1,:));
-  for i = 2:rows (argn)
-    in = [in "," deblank(argn(i,:))];
-  endfor
-  in = ["(" in ")"];
-
   if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
     if ((! isnumeric (cond) && ! islogical (cond)) || ! all (cond(:)))
       call_depth--;
       if (nargin == 1)
         ## Perhaps, say which elements failed?
-        error ("assert %s failed", in);
+        argin = ["(" strjoin(cellstr (argn), ",") ")"];
+        error ("assert %s failed", argin);
       else
         error (varargin{:});
       endif
     endif
   else
     expected = varargin{1};
     if (nargin < 3)
       tol = 0;
@@ -358,20 +353,21 @@ function assert (cond, varargin)
           endif
         endif
       endif
 
     endif
 
     ## Print any errors
     if (! isempty (err.index))
+      argin = ["(" strjoin(cellstr (argn), ",") ")"];
       if (! isempty (errmsg))
         errmsg = [errmsg "\n"];
       endif
-      errmsg = [errmsg, pprint(in, err)];
+      errmsg = [errmsg, pprint(argin, err)];
     endif
 
   endif
 
   call_depth--;
 
   if (call_depth == -1)
     ## Last time through.  If there were any errors on any pass, raise a flag.
@@ -624,19 +620,19 @@ function cout = ind2tuple (matsize, erri
     loc = sprintf ("%d,", subs(i,:));
     cout{i} = ["(" loc(1:end-1) ")"];
   endfor
 
 endfunction
 
 
 ## Pretty print the various errors in a condensed tabular format.
-function str = pprint (in, err)
+function str = pprint (argin, err)
 
-  str = ["ASSERT errors for:  assert " in "\n"];
+  str = ["ASSERT errors for:  assert " argin "\n"];
   str = [str, "\n  Location  |  Observed  |  Expected  |  Reason\n"];
   for i = 1:length (err.index)
     leni = length (err.index{i});
     leno = length (err.observed{i});
     lene = length (err.expected{i});
     str = [str, sprintf("%*s%*s %*s%*s %*s%*s   %s\n",
                         6+fix(leni/2), err.index{i}   , 6-fix(leni/2), "",
                         6+fix(leno/2), err.observed{i}, 6-fix(leno/2), "",
