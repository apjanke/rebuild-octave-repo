# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458317475 14400
#      Fri Mar 18 12:11:15 2016 -0400
# Node ID 4f3e63d75f331f481207242b71d4d74e5f7eec7c
# Parent  deeb9b4b2846ee3efaf01c1988b3b5eff6e4b9de
use std::deque instead of Array to hold scanf and printf format elements

* oct-stream.h, oct-stream.cc (class scanf_format_list,
class_printf_format_list): Use std::deque instead of Array to hold
format elements.

* libinterp/template-inst/Array-os.cc: Don't instantiate Array objects
of pointers to scanf_format_elt or printf_format_elt objects.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -165,20 +165,18 @@ get_size (const Array<double>& size, oct
 
   nr = get_size (dnr, who);
 
   if (dnc >= 0.0)
     nc = get_size (dnc, who);
 }
 
 scanf_format_list::scanf_format_list (const std::string& s)
-  : nconv (0), curr_idx (0), list (dim_vector (16, 1)), buf (0)
+  : nconv (0), curr_idx (0), fmt_elts (), buf (0)
 {
-  octave_idx_type num_elts = 0;
-
   size_t n = s.length ();
 
   size_t i = 0;
 
   int width = 0;
   bool discard = false;
   char modifier = '\0';
   char type = '\0';
@@ -191,98 +189,92 @@ scanf_format_list::scanf_format_list (co
 
       if (! buf)
         buf = new std::ostringstream ();
 
       if (s[i] == '%')
         {
           // Process percent-escape conversion type.
 
-          process_conversion (s, i, n, width, discard, type, modifier,
-                              num_elts);
+          process_conversion (s, i, n, width, discard, type, modifier);
 
           have_more = (buf != 0);
         }
       else if (isspace (s[i]))
         {
           type = scanf_format_elt::whitespace_conversion;
 
           width = 0;
           discard = false;
           modifier = '\0';
           *buf << " ";
 
           while (++i < n && isspace (s[i]))
             ; // skip whitespace
 
-          add_elt_to_list (width, discard, type, modifier, num_elts);
+          add_elt_to_list (width, discard, type, modifier);
 
           have_more = false;
         }
       else
         {
           type = scanf_format_elt::literal_conversion;
 
           width = 0;
           discard = false;
           modifier = '\0';
 
           while (i < n && ! isspace (s[i]) && s[i] != '%')
             *buf << s[i++];
 
-          add_elt_to_list (width, discard, type, modifier, num_elts);
+          add_elt_to_list (width, discard, type, modifier);
 
           have_more = false;
         }
 
       if (nconv < 0)
         {
           have_more = false;
           break;
         }
     }
 
   if (have_more)
-    add_elt_to_list (width, discard, type, modifier, num_elts);
-
-  list.resize (dim_vector (num_elts, 1));
+    add_elt_to_list (width, discard, type, modifier);
 
   delete buf;
 }
 
 scanf_format_list::~scanf_format_list (void)
 {
-  octave_idx_type n = list.numel ();
-
-  for (octave_idx_type i = 0; i < n; i++)
+  size_t n = fmt_elts.size ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      scanf_format_elt *elt = list(i);
+      scanf_format_elt *elt = fmt_elts[i];
       delete elt;
     }
 }
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
-                                    char modifier, octave_idx_type& num_elts,
+                                    char modifier,
                                     const std::string& char_class)
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
         {
           scanf_format_elt *elt
             = new scanf_format_elt (text.c_str (), width, discard, type,
                                     modifier, char_class);
 
-          if (num_elts == list.numel ())
-            list.resize (dim_vector (2 * num_elts, 1));
-
-          list(num_elts++) = elt;
+          fmt_elts.push_back (elt);
         }
 
       delete buf;
       buf = 0;
     }
 }
 
 static std::string
@@ -319,18 +311,17 @@ expand_char_class (const std::string& s)
     }
 
   return retval;
 }
 
 void
 scanf_format_list::process_conversion (const std::string& s, size_t& i,
                                        size_t n, int& width, bool& discard,
-                                       char& type, char& modifier,
-                                       octave_idx_type& num_elts)
+                                       char& type, char& modifier)
 {
   width = 0;
   discard = false;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
@@ -401,18 +392,18 @@ scanf_format_list::process_conversion (c
             {
               nconv = -1;
               break;
             }
           goto fini;
 
         fini:
           {
-            if (finish_conversion (s, i, n, width, discard, type,
-                                   modifier, num_elts) == 0)
+            if (finish_conversion (s, i, n, width, discard,
+                                   type, modifier) == 0)
               return;
           }
           break;
 
         default:
           nconv = -1;
           break;
         }
@@ -422,18 +413,17 @@ scanf_format_list::process_conversion (c
     }
 
   nconv = -1;
 }
 
 int
 scanf_format_list::finish_conversion (const std::string& s, size_t& i,
                                       size_t n, int& width, bool discard,
-                                      char& type, char modifier,
-                                      octave_idx_type& num_elts)
+                                      char& type, char modifier)
 {
   int retval = 0;
 
   std::string char_class;
 
   size_t beg_idx = std::string::npos;
   size_t end_idx = std::string::npos;
 
@@ -490,30 +480,30 @@ scanf_format_list::finish_conversion (co
     }
 
   if (nconv >= 0)
     {
       if (beg_idx != std::string::npos && end_idx != std::string::npos)
         char_class = expand_char_class (s.substr (beg_idx,
                                         end_idx - beg_idx + 1));
 
-      add_elt_to_list (width, discard, type, modifier, num_elts, char_class);
+      add_elt_to_list (width, discard, type, modifier, char_class);
     }
 
   return retval;
 }
 
 void
 scanf_format_list::printme (void) const
 {
-  octave_idx_type n = list.numel ();
-
-  for (octave_idx_type i = 0; i < n; i++)
+  size_t n = fmt_elts.size ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      scanf_format_elt *elt = list(i);
+      scanf_format_elt *elt = fmt_elts[i];
 
       std::cerr
         << "width:      " << elt->width << "\n"
         << "discard:    " << elt->discard << "\n"
         << "type:       ";
 
       if (elt->type == scanf_format_elt::literal_conversion)
         std::cerr << "literal text\n";
@@ -527,23 +517,23 @@ scanf_format_list::printme (void) const
         << "char_class: '" << undo_string_escapes (elt->char_class) << "'\n"
         << "text:       '" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 bool
 scanf_format_list::all_character_conversions (void)
 {
-  octave_idx_type n = list.numel ();
+  size_t n = fmt_elts.size ();
 
   if (n > 0)
     {
-      for (octave_idx_type i = 0; i < n; i++)
+      for (size_t i = 0; i < n; i++)
         {
-          scanf_format_elt *elt = list(i);
+          scanf_format_elt *elt = fmt_elts[i];
 
           switch (elt->type)
             {
             case 'c': case 's': case '%': case '[': case '^':
             case scanf_format_elt::literal_conversion:
             case scanf_format_elt::whitespace_conversion:
               break;
 
@@ -557,23 +547,23 @@ scanf_format_list::all_character_convers
     }
   else
     return false;
 }
 
 bool
 scanf_format_list::all_numeric_conversions (void)
 {
-  octave_idx_type n = list.numel ();
+  size_t n = fmt_elts.size ();
 
   if (n > 0)
     {
-      for (octave_idx_type i = 0; i < n; i++)
+      for (size_t i = 0; i < n; i++)
         {
-          scanf_format_elt *elt = list(i);
+          scanf_format_elt *elt = fmt_elts[i];
 
           switch (elt->type)
             {
             case 'd': case 'i': case 'o': case 'u': case 'x':
             case 'e': case 'f': case 'g':
               break;
 
             default:
@@ -586,20 +576,18 @@ scanf_format_list::all_numeric_conversio
     }
   else
     return false;
 }
 
 // Ugh again.
 
 printf_format_list::printf_format_list (const std::string& s)
-  : nconv (0), curr_idx (0), list (dim_vector (16, 1)), buf (0)
+  : nconv (0), curr_idx (0), fmt_elts (), buf (0)
 {
-  octave_idx_type num_elts = 0;
-
   size_t n = s.length ();
 
   size_t i = 0;
 
   int args = 0;
   std::string flags;
   int fw = -1;
   int prec = -1;
@@ -609,19 +597,17 @@ printf_format_list::printf_format_list (
   bool have_more = true;
   bool empty_buf = true;
 
   if (n == 0)
     {
       printf_format_elt *elt
         = new printf_format_elt ("", args, fw, prec, flags, type, modifier);
 
-      list(num_elts++) = elt;
-
-      list.resize (dim_vector (num_elts, 1));
+      fmt_elts.push_back (elt);
     }
   else
     {
       while (i < n)
         {
           have_more = true;
 
           if (! buf)
@@ -632,23 +618,22 @@ printf_format_list::printf_format_list (
 
           switch (s[i])
             {
             case '%':
               {
                 if (empty_buf)
                   {
                     process_conversion (s, i, n, args, flags, fw, prec,
-                                        type, modifier, num_elts);
+                                        type, modifier);
 
                     have_more = (buf != 0);
                   }
                 else
-                  add_elt_to_list (args, flags, fw, prec, type, modifier,
-                                   num_elts);
+                  add_elt_to_list (args, flags, fw, prec, type, modifier);
               }
               break;
 
             default:
               {
                 args = 0;
                 flags = "";
                 fw = -1;
@@ -664,66 +649,62 @@ printf_format_list::printf_format_list (
           if (nconv < 0)
             {
               have_more = false;
               break;
             }
         }
 
       if (have_more)
-        add_elt_to_list (args, flags, fw, prec, type, modifier, num_elts);
-
-      list.resize (dim_vector (num_elts, 1));
+        add_elt_to_list (args, flags, fw, prec, type, modifier);
 
       delete buf;
     }
 }
 
 printf_format_list::~printf_format_list (void)
 {
-  octave_idx_type n = list.numel ();
-
-  for (octave_idx_type i = 0; i < n; i++)
+  size_t n = fmt_elts.size ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      printf_format_elt *elt = list(i);
+      printf_format_elt *elt = fmt_elts[i];
       delete elt;
     }
 }
 
 void
 printf_format_list::add_elt_to_list (int args, const std::string& flags,
                                      int fw, int prec, char type,
-                                     char modifier, octave_idx_type& num_elts)
+                                     char modifier)
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
         {
           printf_format_elt *elt
             = new printf_format_elt (text.c_str (), args, fw, prec, flags,
                                      type, modifier);
 
-          if (num_elts == list.numel ())
-            list.resize (dim_vector (2 * num_elts, 1));
-
-          list(num_elts++) = elt;
+          fmt_elts.push_back (elt);
         }
 
       delete buf;
       buf = 0;
     }
 }
 
 void
 printf_format_list::process_conversion (const std::string& s, size_t& i,
-                                        size_t n, int& args, std::string& flags,
-                                        int& fw, int& prec, char& modifier,
-                                        char& type, octave_idx_type& num_elts)
+                                        size_t n, int& args,
+                                        std::string& flags, int& fw,
+                                        int& prec, char& modifier,
+                                        char& type)
 {
   args = 0;
   flags = "";
   fw = -1;
   prec = -1;
   modifier = '\0';
   type = '\0';
 
@@ -818,26 +799,26 @@ printf_format_list::process_conversion (
           break;
 
         default:
           break;
         }
     }
 
   if (i < n)
-    finish_conversion (s, i, args, flags, fw, prec, modifier, type, num_elts);
+    finish_conversion (s, i, args, flags, fw, prec, modifier, type);
   else
     nconv = -1;
 }
 
 void
 printf_format_list::finish_conversion (const std::string& s, size_t& i,
                                        int args, const std::string& flags,
                                        int fw, int prec, char modifier,
-                                       char& type, octave_idx_type& num_elts)
+                                       char& type)
 {
   switch (s[i])
     {
     case 'd': case 'i': case 'o': case 'x': case 'X':
     case 'u': case 'c':
       if (modifier == 'L')
         {
           nconv = -1;
@@ -868,34 +849,34 @@ printf_format_list::finish_conversion (c
       *buf << s[i++];
 
       if (type != '%' || args != 0)
         nconv++;
 
       if (type != '%')
         args++;
 
-      add_elt_to_list (args, flags, fw, prec, type, modifier, num_elts);
+      add_elt_to_list (args, flags, fw, prec, type, modifier);
 
       break;
 
     default:
       nconv = -1;
       break;
     }
 }
 
 void
 printf_format_list::printme (void) const
 {
-  int n = list.numel ();
-
-  for (int i = 0; i < n; i++)
+  size_t n = fmt_elts.size ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      printf_format_elt *elt = list(i);
+      printf_format_elt *elt = fmt_elts[i];
 
       std::cerr
         << "args:     " << elt->args << "\n"
         << "flags:    '" << elt->flags << "'\n"
         << "width:    " << elt->fw << "\n"
         << "prec:     " << elt->prec << "\n"
         << "type:     '" << elt->type << "'\n"
         << "modifier: '" << elt->modifier << "'\n"
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -25,21 +25,22 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 class Matrix;
 class string_vector;
 class octave_value;
 class octave_value_list;
 
+#include <deque>
 #include <iosfwd>
+#include <list>
+#include <map>
 #include <sstream>
 #include <string>
-#include <list>
-#include <map>
 
 #include "Array.h"
 #include "data-conv.h"
 #include "lo-utils.h"
 #include "mach-info.h"
 #include "oct-refcount.h"
 
 class
@@ -114,35 +115,37 @@ public:
 
   octave_idx_type num_conversions (void) { return nconv; }
 
   // The length can be different than the number of conversions.
   // For example, "x %d y %d z" has 2 conversions but the length of
   // the list is 3 because of the characters that appear after the
   // last conversion.
 
-  octave_idx_type length (void) { return list.numel (); }
+  size_t length (void) const { return fmt_elts.size (); }
 
   const scanf_format_elt *first (void)
   {
     curr_idx = 0;
     return current ();
   }
 
   const scanf_format_elt *current (void) const
-  { return list.numel () > 0 ? list.elem (curr_idx) : 0; }
+  {
+    return length () > 0 ? fmt_elts[curr_idx] : 0;
+  }
 
   const scanf_format_elt *next (bool cycle = true)
   {
     static scanf_format_elt dummy
       (0, 0, false, scanf_format_elt::null, '\0', "");
 
     curr_idx++;
 
-    if (curr_idx >= list.numel ())
+    if (curr_idx >= length ())
       {
         if (cycle)
           curr_idx = 0;
         else
           return &dummy;
       }
 
     return current ();
@@ -160,36 +163,34 @@ public:
 
 private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
   octave_idx_type nconv;
 
   // Index to current element;
-  octave_idx_type curr_idx;
+  size_t curr_idx;
 
-  // FIXME: maybe LIST should be a std::list object?
   // List of format elements.
-  Array<scanf_format_elt*> list;
+  std::deque<scanf_format_elt*> fmt_elts;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
-                        octave_idx_type& num_elts,
                         const std::string& char_class = "");
 
   void process_conversion (const std::string& s, size_t& i, size_t n,
                            int& width, bool& discard, char& type,
-                           char& modifier, octave_idx_type& num_elts);
+                           char& modifier);
 
   int finish_conversion (const std::string& s, size_t& i, size_t n,
                          int& width, bool discard, char& type,
-                         char modifier, octave_idx_type& num_elts);
+                         char modifier);
   // No copying!
 
   scanf_format_list (const scanf_format_list&);
 
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
 class
@@ -262,70 +263,70 @@ public:
 
   const printf_format_elt *first (void)
   {
     curr_idx = 0;
     return current ();
   }
 
   const printf_format_elt *current (void) const
-  { return list.numel () > 0 ? list.elem (curr_idx) : 0; }
+  {
+    return length () > 0 ? fmt_elts[curr_idx] : 0;
+  }
+
+  size_t length (void) const { return fmt_elts.size (); }
 
   const printf_format_elt *next (bool cycle = true)
   {
     curr_idx++;
 
-    if (curr_idx >= list.numel ())
+    if (curr_idx >= length ())
       {
         if (cycle)
           curr_idx = 0;
         else
           return 0;
       }
 
     return current ();
   }
 
-  bool last_elt_p (void) { return (curr_idx + 1 == list.numel ()); }
+  bool last_elt_p (void) { return (curr_idx + 1 == length ()); }
 
   void printme (void) const;
 
   bool ok (void) const { return (nconv >= 0); }
 
   operator bool () const { return ok (); }
 
 private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
   octave_idx_type nconv;
 
   // Index to current element;
-  octave_idx_type curr_idx;
+  size_t curr_idx;
 
-  // FIXME: maybe LIST should be a std::list object?
   // List of format elements.
-  Array<printf_format_elt*> list;
+  std::deque<printf_format_elt*> fmt_elts;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (int args, const std::string& flags, int fw,
-                        int prec, char type, char modifier,
-                        octave_idx_type& num_elts);
+                        int prec, char type, char modifier);
 
   void process_conversion (const std::string& s, size_t& i, size_t n,
                            int& args, std::string& flags, int& fw,
-                           int& prec, char& modifier, char& type,
-                           octave_idx_type& num_elts);
+                           int& prec, char& modifier, char& type);
 
   void finish_conversion (const std::string& s, size_t& i, int args,
                           const std::string& flags, int fw, int prec,
-                          char modifier, char& type,
-                          octave_idx_type& num_elts);
+                          char modifier, char& type);
 
   // No copying!
 
   printf_format_list (const printf_format_list&);
 
   printf_format_list& operator = (const printf_format_list&);
 };
 
diff --git a/libinterp/template-inst/Array-os.cc b/libinterp/template-inst/Array-os.cc
--- a/libinterp/template-inst/Array-os.cc
+++ b/libinterp/template-inst/Array-os.cc
@@ -29,19 +29,10 @@ along with Octave; see the file COPYING.
 #include "Array.h"
 #include "Array.cc"
 
 extern template class OCTAVE_API Array<bool>;
 extern template class OCTAVE_API Array<octave_idx_type>;
 
 #include "oct-stream.h"
 
-typedef scanf_format_elt* scanf_format_elt_ptr;
-typedef printf_format_elt* printf_format_elt_ptr;
-
-NO_INSTANTIATE_ARRAY_SORT (scanf_format_elt_ptr);
-INSTANTIATE_ARRAY (scanf_format_elt_ptr, OCTINTERP_API);
-
-NO_INSTANTIATE_ARRAY_SORT (printf_format_elt_ptr);
-INSTANTIATE_ARRAY (printf_format_elt_ptr, OCTINTERP_API);
-
 NO_INSTANTIATE_ARRAY_SORT (octave_stream);
 INSTANTIATE_ARRAY (octave_stream, OCTINTERP_API);
