# HG changeset patch
# User jwe
# Date 1194368532 0
#      Tue Nov 06 17:02:12 2007 +0000
# Node ID a627f27c1e8e40d5a6fefd70cf5e4cc051684e79
# Parent  2c5b14c60c6c6e751ab7d6430a0c5bfc70527123
[project @ 2007-11-06 17:02:11 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-11-06  David Bateman  <dbateman@free.fr>
+
+	* MArray-def.h (MARRAY_NORM_BODY): Scale frobenius norm by infinity
+	norm to avoid issues of over- and underflow.  From Rolf Fabian
+	<Rolf.Fabian@gmx.de>.
+
 2007-10-30  David Bateman  <dbateman@free.fr>
 
 	* DASRT-opts.in, LSODE-opts.in: Doc fixes for small book format.
 
 2007-10-30  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc (lssolve): Compute size of rwork and iwork arrays.
 	* dMatrix.cc (lssolve): Compute size of iwork array.
diff --git a/scripts/linear-algebra/__norm__.m b/scripts/linear-algebra/__norm__.m
--- a/scripts/linear-algebra/__norm__.m
+++ b/scripts/linear-algebra/__norm__.m
@@ -38,17 +38,17 @@ function retval = __norm__ (x, p)
   if (nargin == 1)
     p = 2;
   endif
 
   ## Do we have a vector or matrix as the first argument?
   if (ndims(x) == 2 && (rows (x) == 1 || columns (x) == 1))
     if (ischar (p))
       if (strcmp (p, "fro"))
-        inf_norm = norm (x, "inf")
+        inf_norm = norm (x, "inf");
 	retval = inf_norm .* sqrt (sum (abs (x ./ inf_norm) .^ 2));
       elseif (strcmp (p, "inf"))
         retval = max (abs (x));
       else
         error ("norm: unrecognized norm");
       endif
     else
       if (p == Inf)
@@ -64,17 +64,17 @@ function retval = __norm__ (x, p)
         retval = sqrt (sumsq (x));
       else
         retval = sum (abs (x) .^ p) ^ (1/p);
       endif
     endif
   else
     if (ischar (p))
       if (strcmp (p, "fro"))
-        inf_norm = norm (x, "inf")
+        inf_norm = norm (x, "inf");
 	retval = inf_norm .* sqrt (sum (sum (abs (x ./ inf_norm) .^ 2)));
       elseif (strcmp (p, "inf"))
         retval = max (sum (abs (x')));
       else
         error ("norm: unrecognized vector norm");
       endif
     else
       if (p == 1)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,19 +1,15 @@
 2007-11-06  John W. Eaton  <jwe@octave.org>
 
+	* data.cc (Fnorm): New tests.
+
 	* defun-int.h (DEFINE_FUNX_INSTALLER_FUN3): Don't install function
 	if check_version produces an error.
 
-2007-11-06  David Bateman  <dbateman@free.fr>
-
-	* MArray-def.h (MARRAY_NORM_BODY): Scale frobenius norm by infinity
-	norm to avoid issues of over- and underflow.  From Rolf Fabian
-	<Rolf.Fabian@gmx.de>.
-
 2007-11-05  John W. Eaton  <jwe@octave.org>
 
 	* pt-idx.cc (tree_index_expression::lvalue): Try to do a better
 	job of computing the number of elements in lvalue expressions when
 	the last indexing element is ".".
 
 2007-11-02  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2618,16 +2618,22 @@ a minimum of two dimensions and row vect
 %!assert(norm([1e200, 1]), 1e200);
 %!assert(norm([3+4i, 3-4i, sqrt(31)]), 9, -4*eps);
 %!shared m
 %! m = magic (4);
 %!assert(norm(m,1), 34);
 %!assert(norm(m,2), 34, -eps);
 %!assert(norm(m,Inf), 34);
 %!assert(norm(m,"inf"), 34);
+%!shared m2
+%! m2 = [1,2;3,4];
+%! flo = 1e-300;
+%! fhi = 1e+300;
+%!assert (norm (flo*m2, "fro"), sqrt (30)*flo, -eps)
+%!assert (norm (fhi*m2, "fro"), sqrt (30)*fhi, -eps)
 */
 
 // Compute various norms of the vector X.
 
 DEFUN (norm, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} norm (@var{a}, @var{p})\n\
 Compute the p-norm of the matrix @var{a}.  If the second argument is\n\
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 
 extern void reset_parser (void);
 extern int octave_lex (void);
 extern int octave_parse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
-class octaev_function;
+class octave_function;
 class symbol_record;
 class symbol_table;
 
 #include "oct-obj.h"
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 extern symbol_table *tmp_local_sym_tab;
 
