# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510862115 28800
#      Thu Nov 16 11:55:15 2017 -0800
# Node ID 861e12ce7c0662b74c06b8a59da3a5ff42411740
# Parent  676bf5131971646f7c71ebd4a1c8c7cdde3de1ef
maint: merge stable to default.

diff --git a/libinterp/dldfcn/__delaunayn__.cc b/libinterp/dldfcn/__delaunayn__.cc
--- a/libinterp/dldfcn/__delaunayn__.cc
+++ b/libinterp/dldfcn/__delaunayn__.cc
@@ -76,17 +76,17 @@ static void
 free_qhull_memory ()
 {
   qh_freeqhull (! qh_ALL);
 
   int curlong, totlong;
   qh_memfreeshort (&curlong, &totlong);
 
   if (curlong || totlong)
-    warning ("__delaunay__: did not free %d bytes of long memory (%d pieces)",
+    warning ("__delaunayn__: did not free %d bytes of long memory (%d pieces)",
              totlong, curlong);
 }
 
 static bool
 octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
 {
   if (sizeof (octave_idx_type) > sizeof (int))
     {
diff --git a/libinterp/dldfcn/__voronoi__.cc b/libinterp/dldfcn/__voronoi__.cc
--- a/libinterp/dldfcn/__voronoi__.cc
+++ b/libinterp/dldfcn/__voronoi__.cc
@@ -62,16 +62,29 @@ char qh_version[] = "__voronoi__.oct 200
 #  endif
 
 static void
 close_fcn (FILE *f)
 {
   std::fclose (f);
 }
 
+static void
+free_qhull_memory ()
+{
+  qh_freeqhull (! qh_ALL);
+
+  int curlong, totlong;
+  qh_memfreeshort (&curlong, &totlong);
+
+  if (curlong || totlong)
+    warning ("__voronoi__: did not free %d bytes of long memory (%d pieces)",
+             totlong, curlong);
+}
+
 static bool
 octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
 {
   if (sizeof (octave_idx_type) > sizeof (int))
     {
       int maxval = std::numeric_limits<int>::max ();
 
       if (dim > maxval || n > maxval)
@@ -162,16 +175,19 @@ Undocumented internal function.
   std::string cmd = "qhull v" + options;
 
   OCTAVE_LOCAL_BUFFER (char, cmd_str, cmd.length () + 1);
 
   strcpy (cmd_str, cmd.c_str ());
 
   int exitcode = qh_new_qhull (dim, num_points, points.fortran_vec (),
                                ismalloc, cmd_str, outfile, errfile);
+
+  frame.add_fcn (free_qhull_memory);
+
   if (exitcode)
     error ("%s: qhull failed", caller.c_str ());
 
   // Calling findgood_all provides the number of Voronoi vertices
   // (sets qh num_good).
 
   qh_findgood_all (qh facet_list);
 
@@ -319,26 +335,16 @@ Undocumented internal function.
             }
         }
 
       C(idx) = facet_list;
     }
 
   retval = ovl (F, C, at_inf);
 
-  // Free memory from Qhull
-  qh_freeqhull (! qh_ALL);
-
-  int curlong, totlong;
-  qh_memfreeshort (&curlong, &totlong);
-
-  if (curlong || totlong)
-    warning ("%s: qhull did not free %d bytes of long memory (%d pieces)",
-             caller.c_str (), totlong, curlong);
-
   return retval;
 
 #else
 
   octave_unused_parameter (args);
 
   std::string caller
     = (args.length () > 0
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -56,16 +56,29 @@ char qh_version[] = "convhulln.oct 2007-
 #  endif
 
 static void
 close_fcn (FILE *f)
 {
   std::fclose (f);
 }
 
+static void
+free_qhull_memory ()
+{
+  qh_freeqhull (! qh_ALL);
+
+  int curlong, totlong;
+  qh_memfreeshort (&curlong, &totlong);
+
+  if (curlong || totlong)
+    warning ("convhulln: did not free %d bytes of long memory (%d pieces)",
+             totlong, curlong);
+}
+
 static bool
 octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
 {
   if (sizeof (octave_idx_type) > sizeof (int))
     {
       int maxval = std::numeric_limits<int>::max ();
 
       if (dim > maxval || n > maxval)
@@ -178,16 +191,19 @@ convex hull is calculated.
   std::string cmd = "qhull" + options;
 
   OCTAVE_LOCAL_BUFFER (char, cmd_str, cmd.length () + 1);
 
   strcpy (cmd_str, cmd.c_str ());
 
   int exitcode = qh_new_qhull (dim, num_points, points.fortran_vec (),
                                ismalloc, cmd_str, outfile, errfile);
+
+  frame.add_fcn (free_qhull_memory);
+
   if (exitcode)
     error ("convhulln: qhull failed");
 
   bool nonsimp_seen = false;
 
   octave_idx_type nf = qh num_facets;
 
   Matrix idx (nf, dim + 1);
@@ -279,26 +295,16 @@ convex hull is calculated.
             }
         }
 
       retval(1) = octave_value (qh totvol);
     }
 
   retval(0) = idx;
 
-  // Free memory from Qhull
-  qh_freeqhull (! qh_ALL);
-
-  int curlong, totlong;
-  qh_memfreeshort (&curlong, &totlong);
-
-  if (curlong || totlong)
-    warning ("convhulln: did not free %d bytes of long memory (%d pieces)",
-             totlong, curlong);
-
   return retval;
 
 #else
 
   octave_unused_parameter (args);
   octave_unused_parameter (nargout);
 
   err_disabled_feature ("convhulln", "Qhull");
