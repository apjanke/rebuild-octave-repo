# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1429547008 -3600
#      Mon Apr 20 17:23:28 2015 +0100
# Node ID 41064c150724e7c7dbda95c8f6a384ccc9e1bfb8
# Parent  2db2db2df55bff44e205772d033f9e8397acf2b1
Return bools instead of ints in oc-java box and unbox internal functions.

* libinterp/octave-value/ov-java.cc (unbox): this functions return an int
with value of 0 or 1 only but are always used as booleans.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1256,21 +1256,21 @@ box_more (JNIEnv* jni_env, jobject jobj,
   if (retval.is_undefined ())
     retval = octave_value (new octave_java (jobj, jcls));
 
   restore_fpu_state ();
 
   return retval;
 }
 
-int
+bool
 unbox (JNIEnv* jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
-  int found = 1;
+  bool found = true;
 
   if (val.is_java ())
     {
       octave_java *ovj = TO_JAVA (val);
       jobj = ovj->to_java ();
       jobj.detach ();
       jcls = jni_env->GetObjectClass (jobj);
     }
@@ -1388,17 +1388,17 @@ unbox (JNIEnv* jni_env, const octave_val
           jni_env->SetIntArrayRegion (jintArray (v), 0, m.length (),
                                       reinterpret_cast<jint *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([I[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jintArray (v), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
-          found = 0;
+          found = false;
           error ("cannot convert matrix of type '%s'", val.class_name ().c_str ());
         }
     }
   else if (val.is_cellstr ())
     {
       Cell cellStr = val.cell_value ();
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
       jobjectArray array = jni_env->NewObjectArray (cellStr.length (), scls, 0);
@@ -1420,41 +1420,39 @@ unbox (JNIEnv* jni_env, const octave_val
       jobj = jni_env->NewObject (rcls, mID, ID);
       jcls = rcls;
       octave_ref_map[ID] = val;
     }
 
   return found;
 }
 
-int
+bool
 unbox (JNIEnv* jni_env, const octave_value_list& args,
        jobjectArray_ref& jobjs, jobjectArray_ref& jclss)
 {
-  int found = 1;
+  bool found = true;
 
   jclass_ref ocls (jni_env, jni_env->FindClass ("java/lang/Object"));
   jclass_ref ccls (jni_env, jni_env->FindClass ("java/lang/Class"));
 
   if (! jobjs)
     jobjs = jni_env->NewObjectArray (args.length (), ocls, 0);
 
   if (! jclss)
     jclss = jni_env->NewObjectArray (args.length (), ccls, 0);
 
   for (int i = 0; i < args.length (); i++)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
 
-      if (! unbox (jni_env, args(i), jobj, jcls))
-        {
-          found = 0;
-          break;
-        }
+      found = unbox (jni_env, args(i), jobj, jcls);
+      if (! found)
+        break;
 
       jni_env->SetObjectArrayElement (jobjs, i, jobj);
       jni_env->SetObjectArrayElement (jclss, i, jcls);
     }
 
   return found;
 }
 
@@ -1532,28 +1530,22 @@ Java_org_octave_Octave_call (JNIEnv *env
   int nargin = env->GetArrayLength (argin);
 
   octave_value_list varargin, varargout;
 
   for (int i = 0; i < nargin; i++)
     varargin(i) = box (env, env->GetObjectArrayElement (argin, i), 0);
 
   varargout = feval (fname, varargin, nargout);
-
-  if (! error_state)
-    {
-      jobjectArray_ref out_objs (env, argout), out_clss (env);
+  if (error_state)
+    return false;
 
-      out_objs.detach ();
-
-      if (unbox (env, varargout, out_objs, out_clss))
-        return true;
-    }
-
-  return false;
+  jobjectArray_ref out_objs (env, argout), out_clss (env);
+  out_objs.detach ();
+  return unbox (env, varargout, out_objs, out_clss);
 }
 
 JNIEXPORT void JNICALL
 Java_org_octave_OctaveReference_doFinalize (JNIEnv *, jclass, jint ID)
 {
   octave_ref_map.erase (ID);
 }
 
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -90,21 +90,21 @@ extern OCTINTERP_API std::string
 jstring_to_string (JNIEnv* jni_env, jobject obj);
 
 extern OCTINTERP_API octave_value
 box (JNIEnv* jni_env, jobject jobj, jclass jcls = 0);
 
 extern OCTINTERP_API octave_value
 box_more (JNIEnv* jni_env, jobject jobj, jclass jcls = 0);
 
-extern OCTINTERP_API int
+extern OCTINTERP_API bool
 unbox (JNIEnv* jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls);
 
-extern OCTINTERP_API int
+extern OCTINTERP_API bool
 unbox (JNIEnv* jni_env, const octave_value_list& args,
        jobjectArray_ref& jobjs, jobjectArray_ref& jclss);
 
 extern OCTINTERP_API bool Vjava_matrix_autoconversion;
 
 extern OCTINTERP_API bool Vjava_unsigned_autoconversion;
 
 extern OCTINTERP_API bool Vdebug_java;
