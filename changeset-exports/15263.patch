# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1346352760 -7200
#      Thu Aug 30 20:52:40 2012 +0200
# Node ID 2136343014d56ddd5d6f997a678ceffe76eb4bf1
# Parent  ad1a980b0cb572507017f22f6b96e9a0cbaa8389
bug #37023 (wrong reading of lines starting and/or ending with whitespace)

* strread.m:  fix regexprep regular expression, test added, improved format specifier parsing
* textscan.m: test added

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -400,18 +400,20 @@ function varargout = strread (str, forma
     str = regexprep (str, rxp_wsp, ' ');
     ## Remove possible leading space at string
     if (str(1) == 32)
        str = str(2:end);
     endif
     ## Check for single delimiter followed/preceded by whitespace
     if (! isempty (delimiter_str))
       dlmstr = setdiff (delimiter_str, " ");
-      rxp_dlmwsp = sprintf ("( [%s]|[%s] )", dlmstr, dlmstr);
-      str = regexprep (str, rxp_dlmwsp, delimiter_str(1));
+      if (! isempty (dlmstr))
+        rxp_dlmwsp = sprintf ('( [%s] | [%s]|[%s] )', dlmstr, dlmstr, dlmstr);
+        str = regexprep (str, rxp_dlmwsp, delimiter_str(1));
+      endif
     endif
     ## Wipe leading and trailing whitespace on each line (it may be
     ## delimiter too)
     ## FIXME: Double strrep on str is enormously expensive of CPU time.
     ## Can this be eliminated
     if (! isempty (eol_char))
       str = strrep (str, [eol_char " "], eol_char);
       str = strrep (str, [" " eol_char], eol_char);
@@ -523,17 +525,17 @@ function varargout = strread (str, forma
             ## Next fmt_word is a literal...
             if (! index (words{iwrd}(iwrdp+1:end), fmt_words{ii+1}))
               ## ...but not found in current word => field uses rest of word
               nxt_wrd = 1;
             else
               ## ..or it IS found.  Add inferred width of current conversion field
               iwrdp += index (words{iwrd}(iwrdp+1:end), fmt_words{ii+1}) - 1;
             endif
-          elseif (iwrdp < iwrdl)
+          elseif (iwrdp <= iwrdl)
             ## No bordering literal to the right => field occupies (rest of) word
             nxt_wrd = 1;
           endif
 
         endif
 
         if (nxt_wrd)
           ++iwrd; iwrdp = 0;
@@ -951,16 +953,22 @@ endfunction
 
 %!test
 %! # Bug #35999
 %! [a, b, c] = strread ("", "%f");
 %! assert (isempty (a));
 %! assert (isempty (b));
 %! assert (isempty (c));
 
+%% bug #37023
+%!test
+%! [a, b] = strread (" 1. 1 \n  2 3 \n", "%f %f", "endofline", "\n");
+%! assert (a, [1; 2], 1e-15);
+%! assert (b, [1; 3], 1e-15);
+
 %% Unsupported format specifiers
 %!test
 %!error <format specifiers are not supported> strread ("a", "%c")
 %!error <format specifiers are not supported> strread ("a", "%*c %d")
 %!error <format specifiers are not supported> strread ("a", "%q")
 %!error <format specifiers are not supported> strread ("a", "%*q %d")
 %!error <format specifiers are not supported> strread ("a", "%[a]")
 %!error <format specifiers are not supported> strread ("a", "%*[a] %d")
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -397,8 +397,14 @@ endfunction
 %!error <must be a string> textscan ("Hello World", 2)
 %!error <cannot provide position information> [C, pos] = textscan ("Hello World")
 %!error <character value required> textscan ("Hello World", '%s', 'EndOfLine', 3)
 
 %! Test incomplete first data line
 %! R = textscan (['Empty1' char(10)], 'Empty%d %f');
 %! assert (R{1}, int32 (1));
 %! assert (isempty (R{2}), true);
+
+%% bug #37023 (actually a strread test)
+%!test
+%! data = textscan("   1. 1 \n 2 3\n", '%f %f');
+%! assert (data{1}, [1; 2], 1e-15);
+%! assert (data{2}, [1; 3], 1e-15);
