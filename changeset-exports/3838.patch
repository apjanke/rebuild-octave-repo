# HG changeset patch
# User jwe
# Date 991940442 0
#      Thu Jun 07 19:00:42 2001 +0000
# Node ID 7b4bdb12b77be529b392460d7232e25bb35e45d3
# Parent  bb3e654d668425cc5f67abf55d95ddcf38ba7852
[project @ 2001-06-07 19:00:42 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -890,17 +890,17 @@ ComplexMatrix::inverse (int& info, doubl
       F77_XFCN (zgeco, ZGECO, (tmp_data, nr, nc, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    info = -1;
 
 	  if (info == -1 && ! force)
 	    retval = *this;  // Restore contents.
 	  else
 	    {
 	      Complex *dummy = 0;
 
@@ -1302,17 +1302,17 @@ ComplexMatrix::determinant (int& info, d
       F77_XFCN (zgeco, ZGECO, (tmp_data, nr, nr, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -1;
 	      retval = ComplexDET ();
 	    }
 	  else
 	    {
 	      Complex d[2];
 
@@ -1408,17 +1408,17 @@ ComplexMatrix::solve (const ComplexMatri
       F77_XFCN (zgeco, ZGECO, (tmp_data, nr, nr, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
@@ -1526,22 +1526,22 @@ ComplexMatrix::solve (const ComplexColum
 
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       F77_XFCN (zgeco, ZGECO, (tmp_data, nr, nr, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler)
-	  ("unrecoverable error in dgeco");
+	  ("unrecoverable error in zgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2001-06-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (Matrix::inverse, Matrix::solve, Matrix::determinant,
+	Matrix::inverse): Handle the case of rcond being a NaN the same as
+	a signular matrix.  From "Jianming" <caijianming@yahoo.co.uk>.
+	* CMatrix.cc (ComplexMatrix::inverse, ComplexMatrix::solve,
+	ComplexMatrix::determinant, ComplexMatrix::inverse): Likewise.
+
 2001-05-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* chMatrix.cc (charMatrix::row_as_string): New parameter, raw.
 
 	* Array-i.cc, Array-s.cc, Array-d.cc, Array-ch.cc, Array-C.cc,
 	Array-b.cc: Instantiate three arg assign functions.
 
 	* ArrayN.cc (assign (ArrayN<LT>&, const ArrayN<RT>&, const LT&)):
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -588,17 +588,17 @@ Matrix::inverse (int& info, double& rcon
       F77_XFCN (dgeco, DGECO, (tmp_data, nr, nc, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    info = -1;
 
 	  if (info == -1 && ! force)
 	    retval = *this; // Restore matrix contents.
 	  else
 	    {
 	      double *dummy = 0;
 
@@ -998,17 +998,17 @@ Matrix::determinant (int& info, double& 
       F77_XFCN (dgeco, DGECO, (tmp_data, nr, nr, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -1;
 	      retval = DET ();
 	    }
 	  else
 	    {
 	      double d[2];
 
@@ -1075,17 +1075,17 @@ Matrix::solve (const Matrix& b, int& inf
       F77_XFCN (dgeco, DGECO, (tmp_data, nr, nr, pipvt, rcond, pz));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
@@ -1196,17 +1196,17 @@ Matrix::solve (const ColumnVector& b, in
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler)
 	  ("unrecoverable error in dgeco");
       else
 	{
 	  volatile double rcond_plus_one = rcond + 1.0;
 
-	  if (rcond_plus_one == 1.0)
+	  if (rcond_plus_one == 1.0 || xisnan (rcond))
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
