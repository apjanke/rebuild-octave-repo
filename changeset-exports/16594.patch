# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367275147 14400
#      Mon Apr 29 18:39:07 2013 -0400
# Node ID 3ce0c312a40b696622408b4fd668c742841d72fe
# Parent  e13051d7a4729812cf80d82c4b9729ac65073cad
contextmenu for opening files in default applications

* files-dock-widget.h, files-dock-widget.cc
(files_dock_widget::contextmenu_open_in_app,
files_dock_widget::open_item_in_app): New functions.
(files_dock_widget::contextmenu_requested): New action for opening
file in default external application.

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -35,16 +35,18 @@ along with Octave; see the file COPYING.
 #include <QDebug>
 #include <QHeaderView>
 #include <QLineEdit>
 #include <QSizePolicy>
 #include <QMenu>
 #include <QInputDialog>
 #include <QMessageBox>
 #include <QToolButton>
+#include <QUrl>
+#include <QDesktopServices>
 
 #include "load-save.h"
 
 files_dock_widget::files_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("FilesDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
@@ -290,34 +292,50 @@ files_dock_widget::display_directory (co
                 emit load_file_signal (abs_fname);
               else
                 emit open_file (fileInfo.absoluteFilePath ());
             }
         }
     }
 }
 
+void
+files_dock_widget::open_item_in_app (const QModelIndex& index)
+{
+  // Retrieve the file info associated with the model index.
+  QFileInfo fileInfo = _file_system_model->fileInfo (index);
+
+  QString file = fileInfo.absoluteFilePath ();
+
+  QDesktopServices::openUrl (QUrl::fromLocalFile (file));
+}
+
 void 
 files_dock_widget::contextmenu_requested (const QPoint& mpos)
 {
 
   QMenu menu(this);
 
   QModelIndex index = _file_tree_view->indexAt (mpos);
   //QAbstractItemModel *m = _file_tree_view->model ();
 
   if (index.isValid())
     { 
       QFileInfo info = _file_system_model->fileInfo(index);
 
       menu.addAction (QIcon (":/actions/icons/fileopen.png"), tr("Open"),
                      this, SLOT(contextmenu_open(bool)));
+
+      menu.addAction (tr("Open in Default Application"),
+                      this, SLOT (contextmenu_open_in_app (bool)));
+
       if (info.isFile () && info.suffix () == "m")
         menu.addAction (QIcon (":/actions/icons/artsbuilderexecute.png"),
                         tr("Run"), this, SLOT(contextmenu_run(bool)));
+
       if (info.isFile ())
         menu.addAction (tr("Load Data"), this, SLOT(contextmenu_load(bool)));
 
       if (info.isDir ())
         {
           menu.addSeparator ();
           menu.addAction (QIcon (":/actions/icons/ok.png"),
                           tr ("Set Current Directory"),
@@ -354,16 +372,26 @@ files_dock_widget::contextmenu_open (boo
 
   for( QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
     {
       item_double_clicked(*it);
     }
 }
 
 void
+files_dock_widget::contextmenu_open_in_app (bool)
+{
+  QItemSelectionModel *m = _file_tree_view->selectionModel ();
+  QModelIndexList rows = m->selectedRows ();
+
+  for (QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
+    open_item_in_app (*it);
+}
+
+void
 files_dock_widget::contextmenu_load (bool)
 {
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
 
   if (rows.size () > 0)
     {
       QModelIndex index = rows[0];
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -80,16 +80,17 @@ public slots:
   void notice_settings (const QSettings *settings);
 
 private slots:
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
 
   /* context menu actions */
   void contextmenu_open (bool);
+  void contextmenu_open_in_app (bool);
   void contextmenu_run (bool);
   void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
   void contextmenu_newfile (bool);
   void contextmenu_newdir (bool);
   void contextmenu_setcurrentdir (bool);
 
@@ -114,16 +115,18 @@ signals:
 private:
   void process_new_file(const QString &parent_name);
   void process_new_dir(const QString &parent_name);
   void process_set_current_dir(const QString &parent_name);
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
 
+  void open_item_in_app (const QModelIndex& index);
+
   /** Variables for the actions **/
   QToolBar *        _navigation_tool_bar;
   QAction *         _sync_octave_directory_action;
   QAction *         _sync_browser_directory_action;
 
   /** The file system model. */
   QFileSystemModel *_file_system_model;
 
