# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1365249381 -7200
#      Sat Apr 06 13:56:21 2013 +0200
# Node ID 64ad713b3a644ba4ad957ba26ed0a40d589c5c91
# Parent  8ad59bef27b57c894490b09957cd912c1c568720
imshow.m: Add support for "xdata" and "ydata" options, make option parser case insensitive

* scripts/image/imshow.m: Add support for "xdata" and "ydata" options, make
option parser case insensitive.

diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -40,16 +40,29 @@
 ## shown.
 ##
 ## If given, the parameter @var{string_param1} has value
 ## @var{value1}.  @var{string_param1} can be any of the following:
 ##
 ## @table @asis
 ## @item @qcode{"displayrange"}
 ## @var{value1} is the display range as described above.
+## 
+## @item "xdata"
+## If @var{value1} is a two element vector, it must contain horizontal axis
+## limits in the form [xmin xmax]; Otherwise @var{value1} must be a
+## vector and only the first and last elements will be used for xmin and
+## xmax respectively.
+## 
+## @item "ydata"
+## If @var{value1} is a two element vector, it must contain vertical axis
+## limits in the form [ymin ymax]; Otherwise @var{value1} must be a
+## vector and only the first and last elements will be used for ymin and
+## ymax respectively.
+##
 ## @end table
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
 ## Author: Stefan van der Walt  <stefan@sun.ac.za>
 ## Author: Soren Hauberg <hauberg at gmail dot com>
@@ -59,16 +72,17 @@ function h = imshow (im, varargin)
 
   if (nargin == 0)
     print_usage ();
   endif
 
   display_range = NA;
   true_color = false;
   indexed = false;
+  xdata = ydata = [];
 
   ## Get the image.
   if (ischar (im))
     [im, map] = imread (im);
     indexed = true;
     colormap (map);
   endif
 
@@ -100,19 +114,31 @@ function h = imshow (im, varargin)
         display_range = arg;
       elseif (columns (arg) == 3)
         indexed = true;
         colormap (arg);
       elseif (! isempty (arg))
         error ("imshow: argument number %d is invalid", narg+1);
       endif
     elseif (ischar (arg))
-      switch (arg)
+      switch (tolower (arg))
         case "displayrange";
           display_range = varargin{narg++};
+        case "xdata";
+          xdata = varargin{narg++};
+          if (! isvector (xdata))
+            error ("imshow: xdata must be a vector")
+          endif
+          xdata = [xdata(1) xdata(end)];
+        case "ydata";
+          ydata = varargin{narg++};
+          if (isvector (xdata))
+            error ("imshow: expect a vector for ydata")
+          endif
+          ydata = [ydata(1) ydata(end)];
         case {"truesize", "initialmagnification"}
           warning ("image: zoom argument ignored -- use GUI features");
         otherwise
           warning ("imshow: unrecognized property %s", arg);
           narg++;
       endswitch
     else
       error ("imshow: argument number %d is invalid", narg+1);
@@ -156,19 +182,19 @@ function h = imshow (im, varargin)
   if (! (true_color || indexed || islogical (im)))
     low = display_range(1);
     high = display_range(2);
     im(im < low) = low;
     im(im > high) = high;
   endif
 
   if (true_color || indexed)
-    tmp = image ([], [], im);
+    tmp = image (xdata, ydata, im);
   else
-    tmp = image (im);
+    tmp = image (xdata, ydata, im);
     set (tmp, "cdatamapping", "scaled");
     ## The backend is responsible for scaling to clim if necessary.
     set (gca (), "clim", display_range);
   endif
   set (gca (), "visible", "off", "ydir", "reverse");
   axis ("image");
 
   if (nargout > 0)
