# HG changeset patch
# User jwe
# Date 947843555 0
#      Fri Jan 14 09:52:35 2000 +0000
# Node ID 3234a698073ada6a56f4ddd25c34a5b96a786448
# Parent  2e06c3941943e9615b3decc7f1ac1a6897744095
[project @ 2000-01-14 09:51:14 by jwe]

diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -13,25 +13,25 @@ top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
-SUB_SOURCE := arith.txi audio.txi basics.txi bugs.txi control.txi \
-	cp-idx.txi data.txi diffeq.txi emacs.txi errors.txi \
-	eval.txi expr.txi fn-idx.txi func.txi gpl.txi \
-	grammar.txi image.txi install.txi intro.txi io.txi \
-	linalg.txi matrix.txi nonlin.txi numbers.txi \
-	op-idx.txi optim.txi plot.txi poly.txi preface.txi \
-	quad.txi set.txi signal.txi stats.txi stmt.txi \
-	strings.txi struct.txi system.txi tips.txi var.txi \
-	vr-idx.txi
+SUB_SOURCE := arith.txi audio.txi basics.txi bugs.txi \
+	container.txi control.txi cp-idx.txi data.txi diffeq.txi \
+	emacs.txi errors.txi eval.txi expr.txi finance.txi \
+	fn-idx.txi func.txi gpl.txi grammar.txi image.txi \
+	install.txi intro.txi io.txi linalg.txi matrix.txi \
+	nonlin.txi numbers.txi op-idx.txi optim.txi plot.txi \
+	poly.txi preface.txi quad.txi set.txi signal.txi \
+	stats.txi stmt.txi stream.txi strings.txi struct.txi \
+	system.txi tips.txi var.txi vr-idx.txi
 
 SOURCES := $(SUB_SOURCE)
 
 MAIN_TEXINFO := octave.texi
 
 SUB_TEXINFO := $(SUB_SOURCE:.txi=.texi)
 
 TEXINFO := $(MAIN_TEXINFO) $(SUB_TEXINFO)
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -330,17 +330,17 @@ characters such as @kbd{Meta-u} are writ
 
 
 @menu
 * Cursor Motion::               
 * Killing and Yanking::         
 * Commands For Text::           
 * Commands For Completion::     
 * Commands For History::        
-* Customizing @code{readline}::  
+* Customizing readline::        
 * Customizing the Prompt::      
 * Diary and Echo Commands::     
 @end menu
 
 @node Cursor Motion, Killing and Yanking, Command Line Editing, Command Line Editing
 @subsection Cursor Motion
 
 The following commands allow you to position the cursor.
@@ -500,17 +500,17 @@ complete the names of commands and varia
 @item M-?
 List the possible completions of the text before the cursor.
 @end table
 
 @DOCSTRING(completion_append_char)
 
 @DOCSTRING(completion_matches)
 
-@node Commands For History, Customizing @code{readline}, Commands For Completion, Command Line Editing
+@node Commands For History, Customizing readline, Commands For Completion, Command Line Editing
 @subsection Commands For Manipulating The History
 @cindex command history
 @cindex input history
 @cindex history of commands
 
 Octave normally keeps track of the commands you type so that you can
 recall previous commands to edit or execute them again.  When you exit
 Octave, the most recent commands you have typed, up to the number
@@ -565,24 +565,24 @@ re-running chunks of commands from the h
 @DOCSTRING(EDITOR)
 
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
 @DOCSTRING(saving_history)
 
-@node Customizing @code{readline}, Customizing the Prompt, Commands For History, Command Line Editing
+@node Customizing readline, Customizing the Prompt, Commands For History, Command Line Editing
 @subsection Customizing @code{readline}
 
 @c XXX FIXME XXX -- need a brief description of the ~/.inputrc file here.
 
-@DOCSTRING{read_readline_init_file}
+@DOCSTRING(read_readline_init_file)
 
-@node Customizing the Prompt, Diary and Echo Commands, Customizing @code{readline}, Command Line Editing
+@node Customizing the Prompt, Diary and Echo Commands, Customizing readline, Command Line Editing
 @subsection Customizing the Prompt
 @cindex prompt customization
 @cindex customizing the prompt
 
 The following variables are available for customizing the appearance of
 the command-line prompts.  Octave allows the prompt to be customized by
 inserting a number of backslash-escaped special characters that are
 decoded as follows:
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/container.txi
@@ -0,0 +1,36 @@
+@c Copyright (C) 1996, 1997 John W. Eaton
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@node Containers, I/O Streams, Data Structures, Top
+@chapter Containers
+@cindex containers
+
+@menu
+* Lists::                       
+* Cell Arrays::                 
+@end menu
+
+@node Lists, Cell Arrays, Containers, Containers
+@section Lists
+@cindex lists
+
+@DOCSTRING(list)
+
+@DOCSTRING(nth)
+
+@DOCSTRING(append)
+
+@DOCSTRING(reverse)
+
+@DOCSTRING(splice)
+
+@DOCSTRING(is_list)
+
+@node Cell Arrays,  , Lists, Containers
+@section Cell Arrays
+@cindex cell arrays
+
+@DOCSTRING(cell)
+
+@DOCSTRING(iscell)
diff --git a/doc/interpreter/finance.txi b/doc/interpreter/finance.txi
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/finance.txi
@@ -0,0 +1,29 @@
+@c Copyright (C) 1996, 1997 John W. Eaton
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@node Financial Functions, Sets, Statistics, Top
+@chapter Financial Functions
+@cindex financial functions
+@cindex money
+@cindex compounding, value of
+
+@DOCSTRING(fv)
+
+@DOCSTRING(fvl)
+
+@DOCSTRING(irr)
+
+@DOCSTRING(nper)
+
+@DOCSTRING(npv)
+
+@DOCSTRING(pmt)
+
+@DOCSTRING(pv)
+
+@DOCSTRING(pvl)
+
+@DOCSTRING(rate)
+
+@DOCSTRING(vol)
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -116,32 +116,35 @@ It corresponds to GNU Octave version @va
 @menu
 * Preface::                     
 * Introduction::                A brief introduction to Octave.
 * Getting Started::             
 * Data Types::                  
 * Numeric Data Types::          
 * Strings::                     
 * Data Structures::             
+* Containers::                  
+* I/O Streams::                 
 * Variables::                   
 * Expressions::                 Expressions.
 * Evaluation::                  
 * Statements::                  Looping and program flow control.
 * Functions and Scripts::       
 * Error Handling::              
 * Input and Output::            
 * Plotting::                    
 * Matrix Manipulation::         
 * Arithmetic::                  
 * Linear Algebra::              
 * Nonlinear Equations::         
 * Quadrature::                  
 * Differential Equations::      
 * Optimization::                
 * Statistics::                  
+* Financial Functions::         
 * Sets::                        
 * Polynomial Manipulations::    
 * Control Theory::              
 * Signal Processing::           
 * Image Processing::            
 * Audio Processing::            
 * System Utilities::            
 * Tips::                        
@@ -202,16 +205,17 @@ Invoking Octave
 
 Command Line Editing
 
 * Cursor Motion::               
 * Killing and Yanking::         
 * Commands For Text::           
 * Commands For Completion::     
 * Commands For History::        
+* Customizing readline::        
 * Customizing the Prompt::      
 * Diary and Echo Commands::     
 
 Data Types
 
 * Built-in Data Types::         
 * User-defined Data Types::     
 * Object Sizes::                
@@ -221,29 +225,35 @@ Built-in Data Types
 * Numeric Objects::             
 * String Objects::              
 * Data Structure Objects::      
 
 Numeric Data Types
 
 * Matrices::                    
 * Ranges::                      
+* Logical Values::              
 * Predicates for Numeric Objects::  
 
 Matrices
 
 * Empty Matrices::              
 
 Strings
 
 * Creating Strings::            
 * Searching and Replacing::     
 * String Conversions::          
 * Character Class Functions::   
 
+Containers
+
+* Lists::                       
+* Cell Arrays::                 
+
 Variables
 
 * Global Variables::            
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 
 Expressions
@@ -330,16 +340,18 @@ C-Style I/O Functions
 
 Plotting
 
 * Two-Dimensional Plotting::    
 * Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
+* Multiple Plot Windows::       
+* Interaction with gnuplot::    
 
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
 * Special Utility Matrices::    
 * Famous Matrices::             
 
@@ -466,32 +478,35 @@ Grammar
 
 @include preface.texi
 @include intro.texi
 @include basics.texi
 @include data.texi
 @include numbers.texi
 @include strings.texi
 @include struct.texi
+@include container.texi
+@include stream.texi
 @include var.texi
 @include expr.texi
 @include eval.texi
 @include stmt.texi
 @include func.texi
 @include errors.texi
 @include io.texi
 @include plot.texi
 @include matrix.texi
 @include arith.texi
 @include linalg.texi
 @include nonlin.texi
 @include quad.texi
 @include diffeq.texi
 @include optim.texi
 @include stats.texi
+@include finance.texi
 @include set.texi
 @include poly.texi
 @include control.texi
 @include signal.texi
 @include image.texi
 @include audio.texi
 @include system.texi
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Plotting
+@node Plotting, Matrix Manipulation, Input and Output, Top
 @chapter Plotting
 
 All of Octave's plotting functions use @code{gnuplot} to handle the
 actual graphics.  There are two low-level functions, @code{gplot} and
 @code{gsplot}, that behave almost exactly like the corresponding
 @code{gnuplot} functions @code{plot} and @code{splot}.  A number of
 other higher level plotting functions, patterned after the graphics
 functions found in @sc{Matlab} version 3.5, are also available.
@@ -16,17 +16,17 @@ low-level plotting functions.
 
 @menu
 * Two-Dimensional Plotting::    
 * Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
-* Interaction with @code{gnuplot}::  
+* Interaction with gnuplot::    
 @end menu
 
 @node Two-Dimensional Plotting, Specialized Two-Dimensional Plots, Plotting, Plotting
 @section Two-Dimensional Plotting
 
 @deffn {Command} gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 2-dimensional plot.
 
@@ -324,22 +324,22 @@ supports the multiplot feature.
 @DOCSTRING(plot_border)
 
 @DOCSTRING(subplot)
 
 @DOCSTRING(subwindow)
 
 @DOCSTRING(top_title)
 
-@node Multiple Plot Windows, Interaction with @code{gnuplot}, Multiple Plots on One Page, Plotting
+@node Multiple Plot Windows, Interaction with gnuplot, Multiple Plots on One Page, Plotting
 @section Multiple Plot Windows
 
 @DOCSTRING(figure)
 
-@node Interaction with @code{gnuplot},  , Multiple Plot Windows, Plotting
+@node Interaction with gnuplot,  , Multiple Plot Windows, Plotting
 @section Interaction with @code{gnuplot}
 
 @DOCSTRING(gnuplot_binary)
 
 @DOCSTRING(gnuplot_has_frames)
 
 @DOCSTRING(gnuplot_has_multiplot)
 
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Sets, Polynomial Manipulations, Statistics, Top
+@node Sets, Polynomial Manipulations, Financial Functions, Top
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
 set is defined as a collection unique elements.
 
 @DOCSTRING(create_set)
 
 @DOCSTRING(union)
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Statistics, Sets, Optimization, Top
+@node Statistics, Financial Functions, Optimization, Top
 @chapter Statistics
 
 I hope that someday Octave will include more statistics functions.  If
 you would like to help improve Octave in this area, please contact
 @email{bug-octave@@bevo.che.wisc.edu}.
 
 @DOCSTRING(mean)
 
diff --git a/doc/interpreter/stream.txi b/doc/interpreter/stream.txi
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/stream.txi
@@ -0,0 +1,8 @@
+@c Copyright (C) 1996, 1997 John W. Eaton
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@node I/O Streams, Variables, Containers, Top
+@chapter I/O Streams
+
+@DOCSTRING(is_stream)
diff --git a/doc/interpreter/struct.txi b/doc/interpreter/struct.txi
--- a/doc/interpreter/struct.txi
+++ b/doc/interpreter/struct.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Data Structures, Variables, Strings, Top
+@node Data Structures, Containers, Strings, Top
 @chapter Data Structures
 @cindex structures
 @cindex data structures
 
 Octave includes support for organizing data in structures.  The current
 implementation uses an associative array with indices limited to
 strings, but the syntax is more like C-style structures.  Here are some
 examples of using data structures in Octave.
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Variables, Expressions, Data Structures, Top
+@node Variables, Expressions, I/O Streams, Top
 @chapter Variables
 @cindex variables, user-defined
 @cindex user-defined variables
 
 Variables let you give names to values and refer to them later.  You have
 already seen variables in many of the examples.  The name of a variable
 must be a sequence of letters, digits and underscores, but it may not begin
 with a digit.  Octave does not enforce a limit on the length of variable
diff --git a/scripts/control/base/dre.m b/scripts/control/base/dre.m
--- a/scripts/control/base/dre.m
+++ b/scripts/control/base/dre.m
@@ -12,36 +12,55 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{tvals},@var{Plist}] =} dre(@var{sys},@var{Q},@var{R},@var{Qf},@var{t0},@var{tf}[,@var{Ptol},@var{maxits}]);
+## @deftypefn {Function File} {[@var{tvals},@var{Plist}] =} dre (@var{sys},@var{Q},@var{R},@var{Qf},@var{t0},@var{tf}[,@var{Ptol},@var{maxits}]);
 ## Solve the differential Riccati equation
 ## @ifinfo
 ## @example
 ##   -d P/dt = A'P + P A - P B inv(R) B' P + Q
 ##   P(tf) = Qf
-## @example
+## @end example
 ## @end ifinfo
 ## @iftex
 ## @tex
-## \(-\frac{dP}{dt} = A^{T}P+PA-PBR^{-1}B^{T}P+Q\)
+## $$ -{dP \over dt} = A^T P+PA-PBR^{-1}B^T P+Q $$
+## $$ P(t_f) = Qf $$
 ## @end tex
 ## @end iftex
 ## for the LTI system sys.  Solution of standard LTI
 ## state feedback optimization
-##   min \int_{t_0}^{t_f} x' Q x + u' R u dt + x(t_f)' Qf x(t_f)
+## @ifinfo
+## @example
+##   min \int_@{t_0@}^@{t_f@} x' Q x + u' R u dt + x(t_f)' Qf x(t_f)
+## @end example
+## @end ifinfo
+## @iftex
+## @tex
+## $$ \min \int_{t_0}^{t_f} x^T Q x + u^T R u dt + x(t_f)^T Qf x(t_f) $$
+## @end tex
+## @end iftex
 ## optimal input is
+## @ifinfo
+## @example
 ##   u = - inv(R) B' P(t) x
+## @end example
+## @end ifinfo
+## @iftex
+## @tex
+## $$ u = - R^{-1} B^T P(t) x $$
+## @end tex
+## @end iftex
 ## @strong{Inputs}
-## @table
+## @table @var
 ## @item sys
 ## continuous time system data structure
 ## @item Q
 ## state integral penalty
 ## @item R
 ## input integral penalty
 ## @item Qf
 ## state terminal penalty
@@ -49,17 +68,17 @@
 ## @itemx tf
 ## limits on the integral
 ## @item Ptol
 ## tolerance (used to select time samples; see below); default = 0.1
 ## @item maxits
 ## number of refinement iterations (default=10)
 ## @end table
 ## @strong{Outputs}
-## @table
+## @table @var
 ## @item tvals
 ## time values at which @var{P}(@var{t}) is computed
 ## @item Plist
 ## list values of @var{P}(@var{t}); nth(@var{Plist},@var{ii})
 ## is @var{P}(@var{tvals}(@var{ii})).
 ##
 ## @item tvals
 ## @example
diff --git a/scripts/control/hinf/hinfsyn_ric.m b/scripts/control/hinf/hinfsyn_ric.m
--- a/scripts/control/hinf/hinfsyn_ric.m
+++ b/scripts/control/hinf/hinfsyn_ric.m
@@ -13,32 +13,39 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{Xinf},@var{x_ha_err}] =} hinfsyn_ric(@var{A},@var{BB}.@var{C1},@var{d1dot},@var{R},@var{ptol})
-## @table
-## @item forms
-##        xx = ([BB; -C1'*d1dot]/R) * [d1dot'*C1 BB'];
-##        Ha = [A 0*A; -C1'*C1 -A'] - xx;
-## @end table
-## and solves associated Riccati equation
-## returns error code
-## @table
-## @item x_ha_err
-##    0: successful
-##    1: Xinf has imaginary eigenvalues
-##    2: Hx not Hamiltonian
-##    3: Xinf has inf. eigenvalues (numerical overflow)
-##    4: Xinf not symmetric
-##    5: Xinf not positive definite
-##    6: R is singular
+## Forms
+## @example
+## xx = ([BB; -C1'*d1dot]/R) * [d1dot'*C1 BB'];
+## Ha = [A 0*A; -C1'*C1 -A'] - xx;
+## @end example
+## and solves associated Riccati equation.
+## The error code @var{x_ha_err} indicates one of the following
+## conditions:
+## @table @asis
+## @item 0
+## successful
+## @item 1
+## Xinf has imaginary eigenvalues
+## @item 2
+## Hx not Hamiltonian
+## @item 3
+## Xinf has inf. eigenvalues (numerical overflow)
+## @item 4
+## Xinf not symmetric
+## @item 5
+## Xinf not positive definite
+## @item 6
+## R is singular
 ## @end table
 ## @end deftypefn
 
 function [Xinf, x_ha_err] = hinfsyn_ric (A, BB, C1, d1dot, R, ptol)
 
   x_ha_err = 0;        # assume success
   Xinf = [];                 # default return value
   n = is_square(A);
diff --git a/scripts/control/system/__tf2sysl__.m b/scripts/control/system/__tf2sysl__.m
--- a/scripts/control/system/__tf2sysl__.m
+++ b/scripts/control/system/__tf2sysl__.m
@@ -13,17 +13,17 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{vec} =} __tf2sysl__ (@var{vec})
-## used internally in @ref{tf2sys}.
+## used internally in tf2sys.
 ## strip leading zero coefficients to get the true polynomial length
 ## @end deftypefn
 
 function vec = __tf2sysl__ (vec)
 
   while( (length(vec) > 1) & (vec(1) == 0) )
     vec = vec(2:length(vec));
   endwhile
diff --git a/scripts/control/system/ord2.m b/scripts/control/system/ord2.m
--- a/scripts/control/system/ord2.m
+++ b/scripts/control/system/ord2.m
@@ -16,19 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{outsys} =} ord2 (@var{nfreq}, @var{damp}@{[, @var{gain}@})
 ## Creates a continuous 2nd order system with parameters:
 ## @strong{Inputs}
 ## @table @var
-## @item  nfreq:   natural frequency [Hz]. (not in rad/s)
-## @item      damp:    damping coefficient
-## @item      gain:    dc-gain
+## @item nfreq
+## natural frequency [Hz]. (not in rad/s)
+## @item damp
+## damping coefficient
+## @item gain
+## dc-gain
 ## This is steady state value only for damp > 0.
 ## gain is assumed to be 1.0 if ommitted.
 ## @end table
 ## @strong{Outputs}
 ## @var{outsys}
 ## system data structure has representation with @math{w = 2 * pi * nfreq}:
 ## @example
 ##     /                                        \
diff --git a/scripts/control/system/parallel.m b/scripts/control/system/parallel.m
--- a/scripts/control/system/parallel.m
+++ b/scripts/control/system/parallel.m
@@ -11,28 +11,30 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
-## function sysp = parallel(Asys,Bsys)
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{sysp} =} parallel (@var{Asys}, @var{Bsys})
 ## Forms the parallel connection of two systems.
 ##
 ##              ____________________
 ##              |      ________    |
 ##     u  ----->|----> | Asys |--->|----> y1
 ##         |    |      --------    |
 ##         |    |      ________    |
 ##         |--->|----> | Bsys |--->|----> y2
 ##              |      --------    |
 ##              --------------------
 ##                   Ksys
+## @end deftypefn
 
 ## Author: David Clem
 ## Created: August 15, 1994
 ## completely rewritten Oct 1996 a s hodel
 ## SYS_INTERNAL accesses members of system structure
 
 function sysp = parallel (Asys, Bsys)
 
diff --git a/scripts/control/system/sys2fir.m b/scripts/control/system/sys2fir.m
--- a/scripts/control/system/sys2fir.m
+++ b/scripts/control/system/sys2fir.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{c}, @var{tsam}, @var{input}, @var{output}] =} sys2fir (@var{sys})
 ##
-## Extract FIR data from system data structure; see @ref{fir2sys} for
+## Extract FIR data from system data structure; see fir2sys for
 ## parameter descriptions.
 ## @end deftypefn
 ## @seealso{fir2sys}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996
 
 function [c, tsam, inname, outname] = sys2fir (sys)
diff --git a/scripts/control/system/sys2ss.m b/scripts/control/system/sys2ss.m
--- a/scripts/control/system/sys2ss.m
+++ b/scripts/control/system/sys2ss.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{a}, @var{b}, @var{c}, @var{d}, @var{tsam},@var{n}, @var{nz}, @var{stname}, @var{inname}, @var{outname}, @var{yd}] =} sys2ss (@var{sys})
 ## Extract state space representation from system data structure.
 ##
 ## @strong{Inputs}
-## @var{sys} system data structure (@pxref{sysstruct})
+## @var{sys} system data structure
 ##
 ## @strong{Outputs}
 ## @table @var
 ## @item a
 ## @itemx b
 ## @itemx c
 ## @itemx d
 ## state space matrices for sys
diff --git a/scripts/control/system/sys2tf.m b/scripts/control/system/sys2tf.m
--- a/scripts/control/system/sys2tf.m
+++ b/scripts/control/system/sys2tf.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{num}, @var{den}, @var{tsam}, @var{inname}, @var{outname}] =} sys2tf (@var{sys})
 ## Extract transfer function data from a system data structure
 ##
-## See @ref{tf2sys} for parameter descriptions.
+## See tf2sys for parameter descriptions.
 ##
 ## @strong{Example}
 ## @example
 ## octave:1> sys=ss2sys([1 -2; -1.1,-2.1],[0;1],[1 1]);
 ## octave:2> [num,den] = sys2tf(sys)
 ## num = 1.0000  -3.0000
 ## den = 1.0000   1.1000  -4.3000
 ## @end example
diff --git a/scripts/control/system/sys2zp.m b/scripts/control/system/sys2zp.m
--- a/scripts/control/system/sys2zp.m
+++ b/scripts/control/system/sys2zp.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ##@deftypefn {Function File} {[@var{zer}, @var{pol}, @var{k}, @var{tsam}, @var{inname}, @var{outname}] =} sys2zp (@var{sys})
 ## Extract zero/pole/leading coefficient information from a system data
 ## structure
 ##
-## See @ref{zp2sys} for parameter descriptions.
+## See zp2sys for parameter descriptions.
 ##
 ## @strong{Example}
 ## @example
 ## octave:1> sys=ss2sys([1 -2; -1.1,-2.1],[0;1],[1 1]);
 ## octave:2> [zer,pol,k] = sys2zp(sys)
 ## zer = 3.0000
 ## pol =
 ##   -2.6953
diff --git a/scripts/control/system/sysdup.m b/scripts/control/system/sysdup.m
--- a/scripts/control/system/sysdup.m
+++ b/scripts/control/system/sysdup.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{retsys} =} sysdup (@var{Asys}, @var{out_idx}, @var{in_idx})
 ## Duplicate specified input/output connections of a system
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item Asys
-## system data structure (@pxref{ss2sys})
+## system data structure
 ## @item out_idx
 ## @itemx in_idx
 ## list of connections indices;
 ## duplicates are made of @code{y(out_idx(ii))} and @code{u(in_idx(ii))}.
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{retsys}: resulting closed loop system:
diff --git a/scripts/control/system/sysgetsignals.m b/scripts/control/system/sysgetsignals.m
--- a/scripts/control/system/sysgetsignals.m
+++ b/scripts/control/system/sysgetsignals.m
@@ -78,17 +78,17 @@
 ## @var{siglist} is set to the list of output names
 ##
 ## @item sigid="st"
 ## @var{siglist} is set to the list of state names
 ##
 ## stage signals
 ## @item sigid="yd"
 ## @var{siglist} is set to logical vector indicating discrete outputs;
-## @var{siglist(ii) = 0} indicates that output @var{ii} is continuous
+## @var{siglist}(@var{ii}) = 0 indicates that output @var{ii} is continuous
 ## (unsampled), otherwise it is discrete.
 ##
 ## @end table
 ##
 ## @item if the first three input arguments are specified, then @var{signame} is
 ## a list of the specified signal names (@var{sigid} is @code{"in"},
 ## @code{"out"}, or @code{"st"}), or else the logical flag
 ## indicating whether output(s) @var{signum} is(are) discrete (@var{sigval}=1)
diff --git a/scripts/control/system/sysmin.m b/scripts/control/system/sysmin.m
--- a/scripts/control/system/sysmin.m
+++ b/scripts/control/system/sysmin.m
@@ -11,35 +11,37 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
-## [retsys,nc,no] = sysmin(sys{,flg});
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{retsys}, @var{nc}, @var{no}] =} sysmin (@var{sys}, @var{flg})
 ## return a minimal (or reduced order) system
 ## inputs:
 ##   sys: system data structure
 ##   flg: 0 [default] return minimal system; state names lost
 ##      : 1           return system with physical states removed that
 ##                    are either uncontrollable or unobservable
 ##                    (cannot reduce further without discarding physical
 ##                    meaning of states)
 ## outputs:
 ##   retsys: returned system
 ##   nc: number of controllable states in the returned system
 ##   no: number of observable states in the returned system
 ##   cflg: is_controllable(retsys)
 ##   oflg: is_observable(retsys)
+## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
-function [retsys, nc, no, cflg, oflg] = sysmin (sys, flg);
+function [retsys, nc, no, cflg, oflg] = sysmin (sys, flg)
 
   switch(nargin)
   case(1), flg = 0;
   case(2), jnk = flg;    # dummy operation
   otherwise,
     usage("[retsys,nc,no] = sysmin(sys{,flg})");
   endswitch
   dflg = is_digital(sys,2);
diff --git a/scripts/control/system/sysout.m b/scripts/control/system/sysout.m
--- a/scripts/control/system/sysout.m
+++ b/scripts/control/system/sysout.m
@@ -21,17 +21,17 @@
 ## print out a system data structure in desired format
 ## @table @var
 ## @item  sys
 ## system data structure
 ## @item  opt
 ## Display option
 ## @table @code
 ## @item []
-## primary system form (default); see @ref{sysgettype}.
+## primary system form (default)
 ## @item      "ss"
 ## state space form
 ## @item      "tf"
 ## transfer function form
 ## @item      "zp"
 ## zero-pole form
 ## @item      "all"
 ## all of the above
diff --git a/scripts/finance/fv.m b/scripts/finance/fv.m
--- a/scripts/finance/fv.m
+++ b/scripts/finance/fv.m
@@ -9,29 +9,32 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  fv (r, n, p [, l] [, method])
-##
-## Returns the future value at the end of period n of an investment
-## which consisting of n payments of p in each period, assuming an
-## interest rate r.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} fv (@var{r}, @var{n}, @var{p}, @var{l}, @var{method})
+## Return the future value at the end of period @var{n} of an investment
+## which consists of @var{n} payments of @var{p} in each period,
+## assuming an interest rate @var{r}.
 ##
-## With the optional scalar argument l, one can specify an additional
-## lump-sum payment. With the optional argument `method', one can
-## specify whether the payments are made at the end ("e", default) or at
-## the beginning ("b") of each period.
+## The optional argument @var{l} may be used to specify an
+## additional lump-sum payment.
 ##
-## Note that the rate r is not specified in percent, i.e., one has to
-## write 0.05 rather than 5 %.
+## The optional argument @var{method} may be used ot specify whether the
+## payments are made at the end (@code{"e"}, default) or at the
+## beginning (@code{"b"}) of each period.
+##
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
+## @end deftypefn
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Future value of an investment
 
 function v = fv (r, n, p, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("fv (r, n, p [, l] [, method])");
diff --git a/scripts/finance/fvl.m b/scripts/finance/fvl.m
--- a/scripts/finance/fvl.m
+++ b/scripts/finance/fvl.m
@@ -9,20 +9,25 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  fvl (r, n, l)
+## -*- texinfo -*-
+## @deftypefn {Function File} {} fvl (@var{r}, @var{n}, @var{l})
+## Return the future value at the end of @var{n} periods of an initial
+## lump sum investment @var{l}, given a per-period interest rate
+## @var{r}.
 ##
-## Returns the future value at the end of n periods of an initial lump
-## sum investment l, given a per-period interest rate r.
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
+## @end deftypefn
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Future value of an initial lump sum investment
 
 function v = fvl (r, n, l)
 
   if (nargin != 3)
     usage ("fvl (r, n, l)");
diff --git a/scripts/finance/irr.m b/scripts/finance/irr.m
--- a/scripts/finance/irr.m
+++ b/scripts/finance/irr.m
@@ -9,23 +9,24 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  irr (p [, i])
-##
-## Computes the internal rate of return of a series of payments p from
-## an initial investment i, i.e., the solution of npv (r, p) = i. If the
-## second argument is omitted, i = 0 is used.
-##
-## See also:  npv;  pv, rate.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} irr (@var{p}, @var{i})
+## Return the internal rate of return of a series of payments @var{p}
+## from an initial investment @var{i} (i.e., the solution of
+## @code{npv (r, p) = i}.  If the second argument is omitted, a value of
+## 0 is used.
+## @end deftypefn
+## @seealso{npv, pv, and rate}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Internal rate of return of an investment
 
 function r = irr (p, i)
 
   if (nargin == 1)
     i = 0;
diff --git a/scripts/finance/nper.m b/scripts/finance/nper.m
--- a/scripts/finance/nper.m
+++ b/scripts/finance/nper.m
@@ -10,29 +10,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} nper (@var{r}, @var{p}, @var{a} [, @var{l}] [, @var{method}])
+## @deftypefn {Function File} {} nper (@var{r}, @var{p}, @var{a}, @var{l}, @var{method})
+## Return the number of regular payments of @var{p} necessary to
+## amortize @var{a} loan of amount @var{a} and interest @var{r}.
 ##
-## Computes the number of regular payments of @var{p} necessary to amortize @var{a}
-## loan of amount @var{a} and interest @var{r}.
+## The optional argument @var{l} may be used to specify an additional
+## lump-sum payment of @var{l} made at the end of the amortization time.
 ##
-## With the optional scalar argument @var{l}, one can specify an additional
-## lump-sum payment of @var{l} made at the end of the amortization time. With
-## the optional string argument `method', one can specify whether
-## payments are made at the end ("e", default) or at the beginning ("b")
-## of each period.
+## The optional argument @var{method} may be used to specify whether
+## payments are made at the end (@var{"e"}, default) or at the beginning
+## (@var{"b"}) of each period.
 ##
-## Note that the rate r is not specified in percent, i.e., one has to
-## write 0.05 rather than 5 %.
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
 ## @end deftypefn
 ## @seealso{pv, pmt, rate, and npv}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Number of payments needed for amortizing a loan
 
 function n = nper (r, p, a, l, m)
 
diff --git a/scripts/finance/npv.m b/scripts/finance/npv.m
--- a/scripts/finance/npv.m
+++ b/scripts/finance/npv.m
@@ -10,28 +10,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} npv (@var{r}, @var{p} [, @var{i}])
+## @deftypefn {Function File} {} npv (@var{r}, @var{p}, @var{i})
 ## Returns the net present value of a series of irregular (i.e., not
 ## necessarily identical) payments @var{p} which occur at the ends of @var{n}
 ## consecutive periods.  @var{r} specifies the one-period interest rates and
 ## can either be a scalar (constant rates) or a vector of the same
 ## length as @var{p}.
 ##
-## With the optional scalar argument @var{i}, one can specify an initial
+## The optional argument @var{i} may be used to specify an initial
 ## investment.
 ##
-## Note that rates are not specified in percent, i.e., one has to write
-## 0.05 rather than 5 %.
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
 ## @end deftypefn
 ## @seealso{irr and pv}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Net present value of a series of payments
 
 function v = npv (r, p, i)
 
diff --git a/scripts/finance/pmt.m b/scripts/finance/pmt.m
--- a/scripts/finance/pmt.m
+++ b/scripts/finance/pmt.m
@@ -10,24 +10,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} pmt (@var{r}, @var{n}, @var{a} [, @var{l}] [, @var{method}])
-## Compute the amount of periodic payment necessary to amortize a loan
+## @deftypefn {Function File} {} pmt (@var{r}, @var{n}, @var{a}, @var{l}, @var{method})
+## Return the amount of periodic payment necessary to amortize a loan
 ## of amount a with interest rate @var{r} in @var{n} periods.
 ##
-## With the optional scalar argument l, one can specify an initial
-## lump-sum payment. With the optional string argument `method', one can
-## specify whether payments are made at the end ("e", default) or at the
-## beginning ("b") of each period.
+## The optional argument @var{l} may be used to specify an initial
+## lump-sum payment.
+##
+## The optional argument @var{method} may be used to specify whether
+## payments are made at the end (@var{"e"}, default) or at the beginning
+## (@var{"b"}) of each period.
 ## @end deftypefn
 ## @seealso{pv, nper, and rate}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Amount of periodic payment needed to amortize a loan
 
 function p = pmt (r, n, a, l, m)
 
diff --git a/scripts/finance/pv.m b/scripts/finance/pv.m
--- a/scripts/finance/pv.m
+++ b/scripts/finance/pv.m
@@ -10,29 +10,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} pv (@var{r}, @var{n}, @var{p} [, @var{l}] [, @var{method}])
+## @deftypefn {Function File} {} pv (@var{r}, @var{n}, @var{p}, @var{l}, @var{method})
 ## Returns the present value of an investment that will pay off @var{p} for @var{n}
 ## consecutive periods, assuming an interest @var{r}.
 ##
-## With the optional scalar argument @var{l}, one can specify an additional
+## The optional argument @var{l} may be used to specify an additional
 ## lump-sum payment made at the end of @var{n} periods.
 ##
-## With the optional string argument `method', one can specify whether
-## payments are made at the end ("e", default) or at the beginning ("b")
-## of each period.
+## The optional argument @var{method} may be used to specify whether
+## payments are made at the end (@code{"e"}, default) or at the
+## beginning (@code{"b"}) of each period.
 ##
-## Note that the rate r is not specified in percent, i.e., one has to
-## write 0.05 rather than 5 %.
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
 ## @end deftypefn
 ## @seealso{pmt, nper, rate, and npv}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Present value of an investment
 
 function v = pv (r, n, p, l, m)
 
diff --git a/scripts/finance/pvl.m b/scripts/finance/pvl.m
--- a/scripts/finance/pvl.m
+++ b/scripts/finance/pvl.m
@@ -9,20 +9,25 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  pvl (r, n, p)
+## -*- texinfo -*-
+## @deftypefn {Function File} {} pvl (@var{r}, @var{n}, @var{p})
+## Return the present value of an investment that will pay off @var{p}
+## in one lump sum at the end of @var{n} periods, given the interest
+## rate @var{r}.
 ##
-## Returns the present value of an investment that will pay off p in one
-## lump sum at the end of n periods, given the interest rate r.
+## Note that the rate @var{r} is specified as a fraction (i.e., 0.05,
+## not 5 percent).
+## @end deftypefn
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Present value of an investment that pays off at the end
 
 function v = pvl (r, n, p)
 
   if (nargin != 3)
     usage ("pvl (r, n, p)");
diff --git a/scripts/finance/rate.m b/scripts/finance/rate.m
--- a/scripts/finance/rate.m
+++ b/scripts/finance/rate.m
@@ -10,24 +10,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} rate (@var{n}, @var{p}, @var{v} [, @var{l}] [,@var{method}])
-## Computes the rate of return on an investment of present value @var{v} which
+## @deftypefn {Function File} {} rate (@var{n}, @var{p}, @var{v}, @var{l}, @var{method})
+## Return the rate of return on an investment of present value @var{v} which
 ## pays @var{p} in @var{n} consecutive periods.
 ##
-## With the optional scalar argument @var{l}, one can specify an additional
-## lump-sum payment made at the end of @var{n} periods. With the optional
-## string argument @var{`method'}, one can specify whether payments are made
-## at the end ("e", default) or at the beginning ("b") of each period.
+## The optional argument @var{l} may be used to specify an additional
+## lump-sum payment made at the end of @var{n} periods.
+##
+## The optional string argument @var{method} may be used to specify
+## whether payments are made at the end (@code{"e"}, default) or at the
+## beginning (@code{"b"}) of each period.
 ## @end deftypefn
 ## @seealso{pv, pmt, nper, and npv}
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Rate of return of an investment
 
 function r = rate (n, p, v, l, m)
 
diff --git a/scripts/finance/vol.m b/scripts/finance/vol.m
--- a/scripts/finance/vol.m
+++ b/scripts/finance/vol.m
@@ -9,24 +9,26 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  vol (X, m [, n])
-##
-## vol returns the volatility of each column of the input matrix X. m is
-## the number of data sets per period (e.g. the number of data per year
-## if you want to compute the volatility per year). The optional
-## parameter n gives the number of past periods used for computation, if
-## n is omitted, n=1 is used. If T is the number of rows of X, vol
-## returns the volatility from n*m to T.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} vol (@var{x}, @var{m}, @var{n})
+## Return the volatility of each column of the input matrix @var{x}.
+## The number of data sets per period is given by @var{m} (e.g. the
+## number of data per year if you want to compute the volatility per
+## year).  The optional parameter @var{n} gives the number of past
+## periods used for computation, if it is omitted, a value of 1 is used.
+## If @var{t} is the number of rows of @var{x}, @code{vol} returns the
+## volatility from @code{n*m} to @var{t}.
+## @end deftypefn
 
 ## Author:  FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description:  Volatility of financial time series data
 
 function retval = vol (X, m, n)
 
   if (nargin < 2)
     usage ("vol (X, m [, n])");
diff --git a/scripts/linear-algebra/housh.m b/scripts/linear-algebra/housh.m
--- a/scripts/linear-algebra/housh.m
+++ b/scripts/linear-algebra/housh.m
@@ -11,31 +11,31 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
-## function [housv,beta,zer] = housh(x,j,z)
-## computes householder reflection vector housv to reflect x to be
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{housv}, @var{beta}, @var{zer}] =} housh (@var{x}, @var{j}, @var{z})
+## Computes householder reflection vector housv to reflect x to be
 ## jth column of identity, i.e., (I - beta*housv*housv')x =e(j)
 ## inputs
 ##   x: vector
 ##   j: index into vector
 ##   z: threshold for zero  (usually should be the number 0)
 ## outputs: (see Golub and Van Loan)
 ##   beta: If beta = 0, then no reflection need be applied (zer set to 0)
 ##   housv: householder vector
-## mar 6,1987 : rev dec 17,1988
-##             rev sep 19,1991 (blas)
-## translated from FORTRAN Aug 1995
+## @end deftypefn
 
 ## Author: A. S. Hodel
+## Created: August 1995
 
 function [housv, beta, zer] = housh (x, j, z)
 
   ## check for valid inputs
   if (!is_vector (x) && ! is_scalar (x))
     error ("housh: first input must be a vector")
   elseif (! is_scalar(j))
     error ("housh: second argment must be an integer scalar")
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -11,17 +11,18 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
-## function [U,H,nu] = krylov(A,V,k{,eps1,pflg});
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{U}, @var{H}, @var{nu}] =} krylov (@var{A}, @var{V}, @var{k}, @var{eps1}, @var{pflg});
 ## construct orthogonal basis U of block Krylov subspace;
 ##  [V AV A^2*V ... A^(k+1)*V];
 ## method used: householder reflections to guard against loss of
 ## orthogonality
 ## eps1: threshhold for 0 (default: 1e-12)
 ## pflg: flag to use row pivoting  (improves numerical behavior)
 ##   0 [default]: no pivoting; prints a warning message if trivial
 ##                null space is corrupted
@@ -33,17 +34,19 @@
 ##      otherwise H is meaningless
 ## nu: dimension of span of krylov subspace (based on eps1)
 ## if B is a vector and k > m-1, krylov returns H = the Hessenberg
 ## decompostion of A.
 ##
 ## Reference: Hodel and Misra, "Partial Pivoting in the Computation of
 ##     Krylov Subspaces", to be submitted to Linear Algebra and its
 ##     Applications
-## written by A. Scottedward Hodel a.s.hodel@eng.auburn.edu
+## @end deftypefn
+
+## Author: A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
 function [Uret,H,nu] = krylov(A,V,k,eps1,pflg);
 
   defeps = 1e-12;
   if(nargin < 3 | nargin > 5)
     usage("[U,nu] = krylov(A,V,k{,eps1,pflg})")
   elseif(nargin < 5)
     pflg = 0;        # default permutation flag
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x}, @var{y})
-## @deftypefnx {Function File {[@var{xx}, @var{yy}] =} meshgrid (@var{x})
+## @deftypefnx {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x})
 ## Given vectors of @var{x} and @var{y} coordinates, return two matrices corresponding
 ## to the @var{x} and @var{y} coordinates of a mesh.  The rows of @var{xx} are copies of @var{x},
 ## and the columns of @var{yy} are copies of @var{y}.
 ## @end deftypefn
 ## @seealso{sombrero, plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -160,17 +160,17 @@ map_m_m (d_dd_fcn f, const Matrix& x, co
   return retval;
 }
 
 DEFUN (atan2, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
 Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
 and @var{x}.  The result is in range -pi to pi.\n\
-@deftypefn")
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 && args(0).is_defined () && args(1).is_defined ())
     {
       octave_value arg_y = args(0);
@@ -789,17 +789,17 @@ but it uses less memory and avoids calli
 
   return retval;
 }
 
 DEFUN (is_bool, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Functio} {} is_bool (@var{x})\n\
 Return true if @var{x} is a boolean object.\n\
-@deftypefn")
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_bool_type ();
   else
     print_usage ("is_bool");
 
