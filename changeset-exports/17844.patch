# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1383583895 0
#      Mon Nov 04 16:51:35 2013 +0000
# Node ID e88a8fa251257bcd5aa70f4a501ab8e6cbef67f4
# Parent  573f865aa8c8caf66f8b8032f86cca23f4ceaa8d
configure.ac: add warnings on checking for JAVA to the final summary.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2375,37 +2375,38 @@ if test -n "$JAVA_HOMEDIR"; then
   JAVA_HOME=$JAVA_HOMEDIR
 fi
 JAVA=
 JAVAC=
 JAR=
 JAVA_LIBS=
 
 ## Fake loop so that "break" can be used to skip code blocks.
+warn_java=""
 while test $build_java = yes
 do
   ## Unset build_java.  Variable is set only if all configuration tests pass.
   build_java=no
 
   ## Warn if JAVA_HOME is unset.  It is *strongly* advised to specify JAVA_HOME.
   if test -z "$JAVA_HOME"; then
-    AC_MSG_WARN([JAVA_HOME environment variable not initialized.])
-    AC_MSG_WARN([Auto-detection will proceed but is unreliable.])
+    warn_java_home="JAVA_HOME environment variable not initialized. Auto-detection will proceed but is unreliable."
+    OCTAVE_CONFIGURE_WARNING([warn_java_home])
   fi
 
   ## Search for a viable Java executable.
   if test -z "$JAVA_HOME"; then
     JAVA_PATH="$PATH"
   else
     JAVA_PATH="${JAVA_HOME}$PATH_SEPARATOR${JAVA_HOME}/jre/bin$PATH_SEPARATOR${JAVA_HOME}/bin$PATH_SEPARATOR${JAVA_HOME}/../bin$PATH_SEPARATOR${PATH}"
   fi
   AC_PATH_PROG(JAVA, java, [], [$JAVA_PATH])
 
   if test -z "$JAVA"; then
-    AC_MSG_WARN([No Java executable found.  Octave will not be able to call Java methods.])   
+    warn_java="No Java executable found.  Octave will not be able to call Java methods."
     break
   fi
 
   if test -z "$JAVA_HOME"; then
     ## Find JAVA_HOME for JRE by running java and querying properties.
     JAVA_TMP_HOME=`"$JAVA" -classpath ${srcdir}/build-aux OctJavaQry JAVA_HOME`
     ## Strip directory back to top-level installation dir (JAVA_HOME for JDK).
     JAVA_HOME=`echo $JAVA_TMP_HOME | $SED -e 's|[[/\\]]bin[[/\\]]\?$||' | $SED -e 's|[[/\\]]jre[[/\\]]\?$||'`
@@ -2448,17 +2449,17 @@ do
   AC_MSG_CHECKING([for Java version])
   java_version=[`"$JAVA" -version 2>&1 | $SED -n -e 's/^[^ ]* version[^0-9"]*"\([^"]*\)"/\1/p'`]
   AC_MSG_RESULT([$java_version])
   java_major=[`echo $java_version | $SED -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\1/'`]
   java_minor=[`echo $java_version | $SED -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\2/'`]
   if test $java_major -ge 1 && test $java_minor -ge 5; then
     :  # Version is ok.  Do nothing.
   else
-    AC_MSG_WARN([Java version is too old (< 1.5).  Octave will not be able to call Java methods.])
+    warn_java="Java version is too old (< 1.5).  Octave will not be able to call Java methods."
     break
   fi
 
   ## At this point Win32 systems have enough configuration data.
   ## We assume that all appropriate variables (e.g. INCLUDE and LIB) already
   ## contain the required paths to compile and link against JDK.
   case $host_os in
     msdosmsvc)
@@ -2543,17 +2544,17 @@ do
       :  # libjvm found
     else
       JAVA_LDPATH=""
     fi 
   fi
 
   if test -z "$JAVA_LDPATH"; then
     AC_MSG_RESULT([not found])
-    AC_MSG_WARN([Library $jvmlib not found.  Octave will not be able to call Java methods.])
+    warn_java="Library $jvmlib not found.  Octave will not be able to call Java methods."
     break
   else
     AC_MSG_RESULT([$JAVA_LDPATH])
   fi
 
   AC_MSG_CHECKING([for include file <jni.h>])
 
   ## Java and JVM found.  Set up flags.
@@ -2585,26 +2586,29 @@ do
   have_jni=no
   for dir in $JNI_PATH; do 
     if test -f "${dir}/jni.h"; then have_jni=yes; break; fi
   done
   if test $have_jni = yes; then
     AC_MSG_RESULT([$dir])
   else
     AC_MSG_RESULT([not found])
-    AC_MSG_WARN([Include file <jni.h> not found.  Octave will not be able to call Java methods.])
+    warn_java="Include file <jni.h> not found.  Octave will not be able to call Java methods."
     break
   fi
 
   ## Passed all configuration tests.  A workable Java installation was found.
   build_java=yes
   AC_DEFINE(HAVE_JAVA, 1,
     [Define to 1 if Java is available and is at least version 1.5])
   break
 done
+if test -n "$warn_java"; then
+  OCTAVE_CONFIGURE_WARNING([warn_java])
+fi
 
 AM_CONDITIONAL([AMCOND_HAVE_JAVA], [test $build_java = yes])
 AC_SUBST(JAVA)
 AC_SUBST(JAVAC)
 AC_SUBST(JAR)
 AC_SUBST(JAVA_CPPFLAGS)
 AC_SUBST(JAVA_LIBS)
 AC_DEFINE_UNQUOTED([JAVA_HOME], ["$JAVA_HOME"], [Java home (top-level installation dir)])
