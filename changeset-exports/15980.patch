# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1359228826 -3600
#      Sat Jan 26 20:33:46 2013 +0100
# Node ID 6c0fce0632a4f0d1ba3d3a43db5bd090b1116b12
# Parent  3cd3b548f90b77be0d668c4a79885ed7a14a048c
gui: set keyboard focus when switching between dock widgets (bug #36957)

* main-window.cc (handle_command_window_visible, handle_command_history_visible,
  handle_current_directory_visible, handle_workspace_visible,
  handle_editor_visible, handle_documentation_visible): slots for signal
  visibilityChanged, emitted when widgets get visible
* main-window.cc (construct): connect signal visibilityChanged to slots
* main-window.cc (focus_editor): call editor's own function for setting focus
* main-window.h: declaration of new slots
* file-editor.cc (set_focus): new function: setting focus to actual editor tab
* file-editor.cc (add_file_editor_tab): connect signal fetab_set_focus to the
  slot set_focus of file_editor_tab
* file-editor.h: new function set_focus and new signal fetab_set_focus
* file-editor-interface.h: new virtual function set_focus
* file-editor-tab.cc (set_focus): new slot for singal fetab_set_focus from
  file_editor, setting the focus to edit area
* file-edtortab.h: new slot set_focus

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -43,16 +43,17 @@ class file_editor_interface : public QDo
 
   virtual ~file_editor_interface () { }
 
   virtual QMenu *debug_menu () = 0;
   virtual QToolBar *toolbar () = 0;
 
   virtual void handle_entered_debug_mode () = 0;
   virtual void handle_quit_debug_mode () = 0;
+  virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& fileName) = 0;
 
 signals:
   void active_changed (bool active);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -254,16 +254,25 @@ file_editor_tab::update_lexer ()
   // TODO: Autoindent not working as it should
   lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
                              QsciScintilla::AiOpening  ||
                              QsciScintilla::AiClosing);
 
   _edit_area->setLexer (lexer);
 }
 
+// slot for fetab_set_focus: sets the focus to the current edit area
+void
+file_editor_tab::set_focus (const QWidget* ID)
+{
+  if (ID != this)
+    return;
+  _edit_area->setFocus ();
+}
+
 void
 file_editor_tab::undo (const QWidget* ID)
 {
   if (ID != this)
     return;
 
   _edit_area->undo ();
 }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -47,16 +47,17 @@ public slots:
   void notice_settings ();
   /** Will initiate close if associated with the identifier tag. */
   void conditional_close (const QWidget* ID);
   /** Change to a different editor tab by identifier tag. */
   void change_editor_state (const QWidget* ID);
   /** Simply transmit file name. */
   void file_name_query (const QWidget* ID);
 
+  void set_focus (const QWidget* ID);
   void undo (const QWidget* ID);
   void redo (const QWidget* ID);
   void copy (const QWidget* ID);
   void cut (const QWidget* ID);
   void paste (const QWidget* ID);
   void save_file (const QWidget* ID);
   void save_file (const QWidget* ID, const QString& fileName, bool remove_on_success);
   void save_file_as (const QWidget* ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -59,16 +59,28 @@ file_editor::~file_editor ()
     {
       // Have all file editor tabs signal what their file names are.
       emit fetab_file_name_query (0);
     }
   settings->setValue ("editor/savedSessionTabs", fetFileNames);
   settings->sync ();
 }
 
+// set focus to editor and its current tab
+void
+file_editor::set_focus ()
+{
+  setFocus ();
+  activateWindow ();
+  raise ();
+  QWidget *fileEditorTab = _tab_widget->currentWidget ();
+  if (fileEditorTab)
+    emit fetab_set_focus (fileEditorTab);
+}
+
 QMenu *
 file_editor::debug_menu ()
 {
   return _debug_menu;
 }
 
 QToolBar *
 file_editor::toolbar ()
@@ -814,13 +826,15 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_remove_all_breakpoints (const QWidget*)),
            f, SLOT (remove_all_breakpoints (const QWidget*)));
   connect (this, SIGNAL (fetab_comment_selected_text (const QWidget*)),
            f, SLOT (comment_selected_text (const QWidget*)));
   connect (this, SIGNAL (fetab_uncomment_selected_text (const QWidget*)),
            f, SLOT (uncomment_selected_text (const QWidget*)));
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
+  connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
+           f, SLOT (set_focus (const QWidget*)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -49,16 +49,17 @@ class file_editor : public file_editor_i
   public:
   file_editor (QWidget *p);
   ~file_editor ();
   void loadFile (const QString& fileName);
 
   QMenu *           debug_menu ();
   QToolBar *        toolbar ();
 
+  void set_focus ();
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
 
 signals:
   void fetab_settings_changed ();
   void fetab_close_request (const QWidget* ID);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
@@ -80,16 +81,17 @@ signals:
   void fetab_remove_bookmark (const QWidget* ID);
   void fetab_toggle_breakpoint (const QWidget* ID);
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
+  void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_mru_open_file ();
 
   void request_undo ();
   void request_redo ();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -388,28 +388,27 @@ main_window::focus_workspace ()
       _workspace_view->setVisible (true);
     }
 
   _workspace_view->setFocus ();
   _workspace_view->activateWindow ();
   _workspace_view->raise ();
 }
 
+
 void
 main_window::focus_editor ()
 {
 #ifdef HAVE_QSCINTILLA
   if (!_file_editor->isVisible ())
     {
       _file_editor->setVisible (true);
     }
-
-  _file_editor->setFocus ();
-  _file_editor->activateWindow ();
-  _file_editor->raise ();
+  // call own function of editor in order to set focus to the current editor tab
+  _file_editor->set_focus ();
 #endif
 }
 
 void
 main_window::focus_documentation ()
 {
   if (!_documentation_dock_widget->isVisible ())
     {
@@ -417,16 +416,64 @@ main_window::focus_documentation ()
     }
 
   _documentation_dock_widget->setFocus ();
   _documentation_dock_widget->activateWindow ();
   _documentation_dock_widget->raise ();
 }
 
 void
+main_window::handle_command_window_visible (bool visible)
+{
+  // if widget is changed to visible and is not floating
+  if (visible && !_terminal_dock_widget->isFloating ())
+    focus_command_window ();
+}
+
+void
+main_window::handle_command_history_visible (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && !_history_dock_widget->isFloating ())
+    focus_command_history ();
+}
+
+void
+main_window::handle_current_directory_visible (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && !_files_dock_widget->isFloating ())
+    focus_current_directory ();
+}
+
+void
+main_window::handle_workspace_visible (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && !_workspace_view->isFloating ())
+    focus_workspace ();
+}
+
+void
+main_window::handle_editor_visible (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && !_file_editor->isFloating ())
+    focus_editor ();
+}
+
+void
+main_window::handle_documentation_visible (bool visible)
+{
+  // if changed to visible and widget is not floating
+  if (visible && !_documentation_dock_widget->isFloating ())
+    focus_documentation ();
+}
+
+void
 main_window::handle_entered_debug_mode ()
 {
   setWindowTitle ("Octave (Debugging)");
   _debug_continue->setEnabled (true);
   _debug_step_into->setEnabled (true);
   _debug_step_over->setEnabled (true);
   _debug_step_out->setEnabled (true);
   _debug_quit->setEnabled (true);
@@ -938,16 +985,28 @@ main_window::construct ()
   connect (history_action,              SIGNAL (triggered ()),
            this,                        SLOT (focus_command_history ()));
   connect (file_browser_action,         SIGNAL (triggered ()),
            this,                        SLOT (focus_current_directory ()));
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
+  connect (_terminal_dock_widget,       SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_command_window_visible (bool)));
+  connect (_workspace_view,             SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_workspace_visible (bool)));
+  connect (_history_dock_widget,        SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_command_history_visible (bool)));
+  connect (_files_dock_widget,          SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_current_directory_visible (bool)));
+  connect (_file_editor,                SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_editor_visible (bool)));
+  connect (_documentation_dock_widget,  SIGNAL (visibilityChanged (bool)),
+           this,                        SLOT (handle_documentation_visible (bool)));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
   connect (this,                        SIGNAL (settings_changed ()),
            _file_editor,                SLOT   (notice_settings ()));
 #endif
   connect (this,                        SIGNAL (settings_changed ()),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -101,16 +101,22 @@ public slots:
   void current_working_directory_entered ();
 
   void focus_command_window ();
   void focus_command_history ();
   void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
+  void handle_command_window_visible (bool);
+  void handle_command_history_visible (bool);
+  void handle_current_directory_visible (bool);
+  void handle_workspace_visible (bool);
+  void handle_editor_visible (bool);
+  void handle_documentation_visible (bool);
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
