# HG changeset patch
# User jwe
# Date 1032333672 0
#      Wed Sep 18 07:21:12 2002 +0000
# Node ID db58c1a1e6ce9ac986946646b1fbdc54dfb934ec
# Parent  98030874139212dc1aef8f52938229355782f373
[project @ 2002-09-18 07:21:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2002-09-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-struct.cc (octave_struct::subsasgn): Ensure that indexed
+	object is not shared before calling subsasgn.
+
 2002-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc: Use % instead of # as comment character in ascii
 	data files.
 
 2002-08-17  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* c-file-ptr-stream.h (c_file_ptr_buf::c_file_ptr_buf): Add Intel
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -71,20 +71,30 @@ octave_builtin::subsref (const std::stri
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
       break;
 
     default:
       panic_impossible ();
     }
 
-  return retval;
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_user_function::subsref.
+  //
+  // XXX FIXME XXX -- Note that if a function call returns multiple
+  // values, and there is further indexing to perform, then we are
+  // ignoring all but the first value.  Is this really what we want to
+  // do?  If it is not, then what should happen for stat("file").size,
+  // for exmaple?
 
-  // XXX FIXME XXX
-  //  return retval.next_subsref (type, idx);
+  if (idx.length () > 1)
+    retval = retval(0).next_subsref (type, idx);
+
+  return retval;
 }
 
 octave_value_list
 octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state)
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -234,16 +234,18 @@ octave_struct::subsasgn (const std::stri
 			SLList<octave_value_list> next_idx (idx);
 
 			// We handled two index elements, so subsasgn to
 			// needs to skip both of them.
 
 			next_idx.remove_front ();
 			next_idx.remove_front ();
 
+			u.make_unique ();
+
 			t_rhs = u.subsasgn (type.substr (2), next_idx, rhs);
 		      }
 		  }
 		else
 		  gripe_invalid_index_for_assignment ();
 	      }
 	    else
 	      gripe_invalid_index_for_assignment ();
@@ -270,16 +272,18 @@ octave_struct::subsasgn (const std::stri
 	      }
 
 	    if (! error_state)
 	      {
 		SLList<octave_value_list> next_idx (idx);
 
 		next_idx.remove_front ();
 
+		u.make_unique ();
+
 		t_rhs = u.subsasgn (type.substr (1), next_idx, rhs);
 	      }
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -323,20 +323,24 @@ octave_user_function::subsref (const std
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
       }
       break;
 
     default:
       panic_impossible ();
     }
 
-  return retval;
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_builtin::subsref.
 
-  // XXX FIXME XXX
-  //  return retval.next_subsref (type, idx);
+  if (idx.length () > 1)
+    retval = retval(0).next_subsref (type, idx);
+
+  return retval;
 }
 
 octave_value_list
 octave_user_function::do_multi_index_op (int nargout,
 					 const octave_value_list& args)
 {
   octave_value_list retval;
 
