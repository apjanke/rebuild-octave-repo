# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365145496 14400
#      Fri Apr 05 03:04:56 2013 -0400
# Node ID a971d8bdaadc7799a4b1c772f9449f4f4e447734
# Parent  919796a440c6fb28367102e8c9f8dee464fb6e66
use signals instead of event queue for entering/leaving debug mode

* file-editor-interface.h
(file_editor_interface::handle_enter_debug_mode): Rename from
file_editor_interface::handle_entered_debug_mode.  Change all uses.
(file_editor_interface::handle_exit_debug_mode): Rename from
file_editor_interface::handle_quit_debug_mode.  Change all uses.
* file_editor.h, file_editor.cc
(file_editor::handle_enter_debug_mode): Rename from
file_editor::handle_entered_debug_mode.  Change all uses.
(file_editor::handle_exit_debug_mode): Rename from
file_editor::handle_quit_debug_mode.  Change all uses.
* main-window.h, main-window.cc (main_window::handle_enter_debugger):
Rename from main_window::handle_entered_debug_mode.  Change all uses.
(main_window::handle_exit_debugger): Rename from
main_window::handle_quit_debug_mode.  Change all uses.
(main_window::construct): Delete signal connection from
_octave_qt_event_listener::entered_debug_mode_signal to
main_window::handle_entered_debug_mode.
Delete signal connection from
_octave_qt_event_listener::quit_debug_mode_signal to
main_window::handle_quit_debug_mode.
Connect _octave_qt_link::enter_debugger_signal signal to
main_window::handle_enter_debugger.
Connect _octave_qt_link::exit_debugger_signal signal to
main_window::handle_exit_debugger.

* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::entered_debug_mode,
octave_qt_event_listener::quit_debug_mode): Delete.
(octave_qt_event_listener::entered_debug_mode_signal,
octave_qt_event_listener::quit_debug_mode_signal): Delete signals.

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_enter_debugger_event): Emit enter_debugger_signal.
(octave_qt_link::do_execute_in_debugger_event): New function.
(octave_qt_link::do_exit_debugger_event): Emit exit_debugger_signal.
(octave_qt_link::enter_debugger_signal,
octave_qt_link::exit_debugger_signal): New signals.

* octave-event-listener.h (octave_event_listener::entered_debug_mode,
octave_event_listener::quit_debug_mode): Delete.

* input.cc (octave_base_reader::octave_gets): Call
octave_link::exit_debugger_event if not debugging.
(execute_in_debugger_handler): Rename from exit_debugger_handler.
 Change all uses.
 Call octave_link::execute_in_debugger_event instead of
octave_link::exit_debugger_event.

* octave-link.h, octave-link.cc (octave_link::do_generate_events):
Don't call debugging mode functions here.
(octave_link::enter_debugger_event): Set instance->debugging to true.
(octave_link::execute_in_debugger_event): New function.
(octave_link::exit_debugger_event): Don't do anything unless
instance->debugging is true.  Toggle instance->debugging.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -39,18 +39,18 @@ class file_editor_interface : public oct
   }
 
   virtual ~file_editor_interface () { }
 
   virtual QMenu *get_mru_menu ( ) = 0;
   virtual QMenu *debug_menu () = 0;
   virtual QToolBar *toolbar () = 0;
 
-  virtual void handle_entered_debug_mode () = 0;
-  virtual void handle_quit_debug_mode () = 0;
+  virtual void handle_enter_debug_mode (void) = 0;
+  virtual void handle_exit_debug_mode (void) = 0;
 
   virtual void
   handle_insert_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void
   handle_delete_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void handle_update_dbstop_marker_request (bool insert,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -95,23 +95,23 @@ file_editor::debug_menu ()
 
 QToolBar *
 file_editor::toolbar ()
 {
   return _tool_bar;
 }
 
 void
-file_editor::handle_entered_debug_mode ()
+file_editor::handle_enter_debug_mode (void)
 {
   _run_action->setEnabled (false);
 }
 
 void
-file_editor::handle_quit_debug_mode ()
+file_editor::handle_exit_debug_mode (void)
 {
   _run_action->setEnabled (true);
 }
 
 void
 file_editor::request_new_file ()
 {
   // New file isn't a file_editor_tab function since the file
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -52,18 +52,18 @@ class file_editor : public file_editor_i
   ~file_editor ();
   void loadFile (const QString& fileName);
 
   QMenu *           get_mru_menu ( ) { return _mru_file_menu; }
   QMenu *           debug_menu ();
   QToolBar *        toolbar ();
 
   void set_focus ();
-  void handle_entered_debug_mode ();
-  void handle_quit_debug_mode ();
+  void handle_enter_debug_mode (void);
+  void handle_exit_debug_mode (void);
 
 signals:
   void fetab_settings_changed (const QSettings *settings);
   void fetab_close_request (const QWidget* ID);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
   void fetab_save_file (const QWidget* ID, const QString& fileName, bool remove_on_success);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -471,40 +471,44 @@ void
 main_window::handle_documentation_visible (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && !_documentation_dock_widget->isFloating ())
     focus_documentation ();
 }
 
 void
-main_window::handle_entered_debug_mode ()
+main_window::handle_enter_debugger (void)
 {
   setWindowTitle ("Octave (Debugging)");
+
   _debug_continue->setEnabled (true);
   _debug_step_into->setEnabled (true);
   _debug_step_over->setEnabled (true);
   _debug_step_out->setEnabled (true);
   _debug_quit->setEnabled (true);
+
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_entered_debug_mode ();
+  _file_editor->handle_enter_debug_mode ();
 #endif
 }
 
 void
-main_window::handle_quit_debug_mode ()
+main_window::handle_exit_debugger (void)
 {
   setWindowTitle ("Octave");
+
   _debug_continue->setEnabled (false);
   _debug_step_into->setEnabled (false);
   _debug_step_over->setEnabled (false);
   _debug_step_out->setEnabled (false);
   _debug_quit->setEnabled (false);
+
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_quit_debug_mode ();
+  _file_editor->handle_exit_debug_mode ();
 #endif
 }
 
 void
 main_window::debug_continue ()
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
@@ -1143,26 +1147,16 @@ main_window::construct ()
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_workspace_signal ()),
            this,
            SLOT (update_workspace ()));
 
-  connect (_octave_qt_event_listener,
-           SIGNAL (entered_debug_mode_signal ()),
-           this,
-           SLOT(handle_entered_debug_mode ()));
-
-  connect (_octave_qt_event_listener,
-           SIGNAL (quit_debug_mode_signal ()),
-           this,
-           SLOT (handle_quit_debug_mode ()));
-
   // FIXME -- is it possible to eliminate the event_listenter?
 
   _octave_qt_link = new octave_qt_link ();
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
@@ -1172,16 +1166,22 @@ main_window::construct ()
   connect (_octave_qt_link,
            SIGNAL (append_history_signal (const QString&)),
            _history_dock_widget, SLOT (append_history (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (clear_history_signal (void)),
            _history_dock_widget, SLOT (clear_history (void)));
 
+  connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
+           this, SLOT (handle_enter_debugger ()));
+
+  connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
+           this, SLOT (handle_exit_debugger ()));
+
   connect (_octave_qt_link,
            SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
            _file_editor,
            SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
            _file_editor,
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -101,18 +101,18 @@ public slots:
   void focus_documentation ();
   void handle_command_window_visible (bool);
   void handle_command_history_visible (bool);
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
-  void handle_entered_debug_mode ();
-  void handle_quit_debug_mode ();
+  void handle_enter_debugger (void);
+  void handle_exit_debugger (void);
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
   void write_settings ();
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -47,17 +47,8 @@ octave_qt_event_listener::update_workspa
   emit update_workspace_signal ();
 }
 
 void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
-
-void
-octave_qt_event_listener::entered_debug_mode ()
-{ emit entered_debug_mode_signal (); }
-
-void
-octave_qt_event_listener::quit_debug_mode ()
-{ emit quit_debug_mode_signal (); }
-
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -33,19 +33,14 @@ class octave_qt_event_listener
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
   void about_to_exit ();
 
-  void entered_debug_mode ();
-  void quit_debug_mode ();
-
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
-  void entered_debug_mode_signal ();
-  void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -93,25 +93,33 @@ void
 octave_qt_link::do_post_input_event (void)
 {
 }
 
 void
 octave_qt_link::do_enter_debugger_event (const std::string& file, int line)
 {
   do_insert_debugger_pointer (file, line);
+
+  emit enter_debugger_signal ();
 }
 
 void
-octave_qt_link::do_exit_debugger_event (const std::string& file, int line)
+octave_qt_link::do_execute_in_debugger_event (const std::string& file, int line)
 {
   do_delete_debugger_pointer (file, line);
 }
 
 void
+octave_qt_link::do_exit_debugger_event (void)
+{
+  emit exit_debugger_signal ();
+}
+
+void
 octave_qt_link::do_update_breakpoint (bool insert,
                                       const std::string& file, int line)
 {
   emit update_dbstop_marker_signal (insert, QString::fromStdString (file), line);
 }
 
 bool
 octave_qt_link::do_edit_file (const std::string& file)
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -60,17 +60,18 @@ public:
   void do_set_history (const string_vector& hist);
   void do_append_history (const std::string& hist_entry);
   void do_clear_history (void);
 
   void do_pre_input_event (void);
   void do_post_input_event (void);
 
   void do_enter_debugger_event (const std::string& file, int line);
-  void do_exit_debugger_event (const std::string& file, int line);
+  void do_execute_in_debugger_event (const std::string& file, int line);
+  void do_exit_debugger_event (void);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line);
 
   bool do_edit_file (const std::string& file);
 
 private:
 
   // No copying!
@@ -89,16 +90,19 @@ private:
 signals:
 
   void change_directory_signal (const QString& dir);
 
   void set_history_signal (const QStringList& hist);
   void append_history_signal (const QString& hist_entry);
   void clear_history_signal (void);
 
+  void enter_debugger_signal (void);
+  void exit_debugger_signal (void);
+
   void update_dbstop_marker_signal (bool insert, const QString& file, int line);
 
   void edit_file_signal (const QString& file);
 
   void insert_debugger_pointer_signal (const QString&, int);
 
   void delete_debugger_pointer_signal (const QString&, int);
 };
diff --git a/libinterp/interp-core/octave-event-listener.h b/libinterp/interp-core/octave-event-listener.h
--- a/libinterp/interp-core/octave-event-listener.h
+++ b/libinterp/interp-core/octave-event-listener.h
@@ -30,14 +30,11 @@ class octave_event_listener
   public:
     octave_event_listener () { }
     virtual ~octave_event_listener () { }
 
     virtual void
     update_workspace (void) = 0;
 
     virtual void about_to_exit () = 0;
-
-    virtual void entered_debug_mode () = 0;
-    virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -207,17 +207,22 @@ octave_base_reader::octave_gets (bool& e
   eof = false;
 
   std::string retval;
 
   // Process pre input event hook function prior to flushing output and
   // printing the prompt.
 
   if (interactive || forced_interactive)
-    octave_link::pre_input_event ();
+    {
+      if (! Vdebugging)
+        octave_link::exit_debugger_event ();
+
+      octave_link::pre_input_event ();
+    }
 
   bool history_skip_auto_repeated_debugging_command = false;
 
   std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = command_editor::decode_prompt_string (ps);
 
   pipe_handler_error_count = 0;
@@ -455,19 +460,19 @@ initialize_command_input (void)
   command_editor::set_completer_quote_characters ("'\"");
 
   command_editor::set_completion_function (generate_completion);
 
   command_editor::set_quoting_function (quoting_filename);
 }
 
 static void
-exit_debugger_handler (const std::pair<std::string, int>& arg)
+execute_in_debugger_handler (const std::pair<std::string, int>& arg)
 {
-  octave_link::exit_debugger_event (arg.first, arg.second);
+  octave_link::execute_in_debugger_event (arg.first, arg.second);
 }
 
 static void
 get_debug_input (const std::string& prompt)
 {
   unwind_protect frame;
 
   octave_user_code *caller = octave_call_stack::caller_user_code ();
@@ -509,17 +514,17 @@ get_debug_input (const std::string& prom
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
               octave_link::enter_debugger_event (nm, curr_debug_line);
 
-              frame.add_fcn (exit_debugger_handler,
+              frame.add_fcn (execute_in_debugger_handler,
                              std::pair<std::string, int> (nm, curr_debug_line));
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -81,28 +81,16 @@ void
 octave_link::do_register_event_listener (octave_event_listener *el)
 {
   event_listener = el;
 }
 
 void
 octave_link::do_generate_events (void)
 {
-  if (debugging != Vdebugging)
-    {
-      debugging = Vdebugging;
-
-      if (event_listener)
-        {
-          if (debugging)
-            event_listener->entered_debug_mode ();
-          else
-            event_listener->quit_debug_mode ();
-        }
-    }
 }
 
 void
 octave_link::do_process_events (void)
 {
   event_queue_mutex->lock ();
 
   gui_event_queue.run ();
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -148,23 +148,37 @@ public:
   {
     if (instance_ok ())
       instance->do_post_input_event ();
   }
 
   static void enter_debugger_event (const std::string& file, int line)
   {
     if (instance_ok ())
-      instance->do_enter_debugger_event (file, line);
+      {
+        instance->debugging = true;
+
+        instance->do_enter_debugger_event (file, line);
+      }
   }
 
-  static void exit_debugger_event (const std::string& file, int line)
+  static void execute_in_debugger_event (const std::string& file, int line)
   {
     if (instance_ok ())
-      instance->do_exit_debugger_event (file, line);
+      instance->do_execute_in_debugger_event (file, line);
+  }
+
+  static void exit_debugger_event (void)
+  {
+    if (instance_ok () && instance->debugging)
+      {
+        instance->debugging = false;
+
+        instance->do_exit_debugger_event ();
+      }
   }
 
   static void
   update_breakpoint (bool insert, const std::string& file, int line)
   {
     if (instance_ok ())
       instance->do_update_breakpoint (insert, file, line);
   }
@@ -238,17 +252,18 @@ protected:
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
   virtual void do_clear_history (void) = 0;
 
   virtual void do_pre_input_event (void) = 0;
   virtual void do_post_input_event (void) = 0;
 
   virtual void do_enter_debugger_event (const std::string& file, int line) = 0;
-  virtual void do_exit_debugger_event (const std::string& file, int line) = 0;
+  virtual void do_execute_in_debugger_event (const std::string& file, int line) = 0;
+  virtual void do_exit_debugger_event (void) = 0;
 
   virtual void do_update_breakpoint (bool insert,
                                      const std::string& file, int line) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
 };
 
 #endif // OCTAVELINK_H
