# HG changeset patch
# User jwe
# Date 1180506952 0
#      Wed May 30 06:35:52 2007 +0000
# Node ID 9042b00fc45ed4fb32349693fa9e2c641174b39c
# Parent  14992092ab06e781a70108c78ae0273def995317
[project @ 2007-05-30 06:33:29 by jwe]

diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -23,17 +23,17 @@
 ## a vector of integers no longer than the number of dimensions in 
 ## @var{x}. The values of @var{n} can be either positive or negative,
 ## which determines the direction in which the values or @var{x} are
 ## shifted. If an element of @var{n} is zero, then the corresponding
 ## dimension of @var{x} will not be shifted. For example
 ##
 ## @example
 ## @group
-## x = [1, 2, 3; 4, 5, 6, 7, 8, 9];
+## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
 ## circshift (x, 1)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
 ##     4, 5, 6
 ## circshift (x, -2)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
 ##     4, 5, 6
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2449,20 +2449,20 @@ the result are @var{m}-by-@var{n}.\n\
     print_usage ();
   return retval;
 }
 
 // FIXME -- should use octave_idx_type for dimensions.
 
 DEFUN (reshape, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Function File} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
-@deftypefnx {Function File} {} reshape (@var{a}, @var{siz})\n\
+@deftypefn {Built-in Function} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
+@deftypefnx {Built-in Function} {} reshape (@var{a}, @var{siz})\n\
 Return a matrix with the given dimensions whose elements are taken\n\
-from the matrix @var{a}.  The elements of the matrix are access in\n\
+from the matrix @var{a}.  The elements of the matrix are accessed in\n\
 column-major order (like Fortran arrays are stored).\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 reshape ([1, 2, 3, 4], 2, 2)\n\
      @result{}  1  3\n\
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -969,18 +969,18 @@ control will return to the top level wit
 commands.  This is useful for aborting from functions or scripts.\n\
 \n\
 If the error message does not end with a new line character, Octave will\n\
 print a traceback of all the function calls leading to the error.  For\n\
 example, given the following function definitions:\n\
 \n\
 @example\n\
 @group\n\
-function f () g () end\n\
-function g () h () end\n\
+function f () g (); end\n\
+function g () h (); end\n\
 function h () nargin == 1 || error (\"nargin != 1\"); end\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 calling the function @code{f} will result in a list of messages that\n\
 can help you to quickly locate the exact location of the error:\n\
 \n\
