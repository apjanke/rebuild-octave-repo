# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535743558 14400
#      Fri Aug 31 15:25:58 2018 -0400
# Node ID 2ee4d384224fe4cb92f36940038a2823163d6d0c
# Parent  4c25d8d3a0ae16a844bef238bb3effaf4564fa82
* oct-inttypes.cc: Make a few more style fixes.

diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -30,30 +30,31 @@ along with Octave; see the file COPYING.
 #include "oct-inttypes.h"
 
 template <typename T>
 const octave_int<T> octave_int<T>::zero (static_cast<T> (0));
 
 template <typename T>
 const octave_int<T> octave_int<T>::one (static_cast<T> (1));
 
-// define type names.
-#define DECLARE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME)             \
+// Define type names.
+
+#define DEFINE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME)              \
   template <>                                                   \
   OCTAVE_API const char *                                       \
   octave_int<TYPE>::type_name (void) { return TYPENAME; }
 
-DECLARE_OCTAVE_INT_TYPENAME (int8_t, "int8")
-DECLARE_OCTAVE_INT_TYPENAME (int16_t, "int16")
-DECLARE_OCTAVE_INT_TYPENAME (int32_t, "int32")
-DECLARE_OCTAVE_INT_TYPENAME (int64_t, "int64")
-DECLARE_OCTAVE_INT_TYPENAME (uint8_t, "uint8")
-DECLARE_OCTAVE_INT_TYPENAME (uint16_t, "uint16")
-DECLARE_OCTAVE_INT_TYPENAME (uint32_t, "uint32")
-DECLARE_OCTAVE_INT_TYPENAME (uint64_t, "uint64")
+DEFINE_OCTAVE_INT_TYPENAME (int8_t, "int8")
+DEFINE_OCTAVE_INT_TYPENAME (int16_t, "int16")
+DEFINE_OCTAVE_INT_TYPENAME (int32_t, "int32")
+DEFINE_OCTAVE_INT_TYPENAME (int64_t, "int64")
+DEFINE_OCTAVE_INT_TYPENAME (uint8_t, "uint8")
+DEFINE_OCTAVE_INT_TYPENAME (uint16_t, "uint16")
+DEFINE_OCTAVE_INT_TYPENAME (uint32_t, "uint32")
+DEFINE_OCTAVE_INT_TYPENAME (uint64_t, "uint64")
 
 template <class T>
 template <class S>
 T
 octave_int_base<T>::convert_real (const S& value)
 {
   // Compute proper thresholds.
   static const S thmin = compute_threshold (static_cast<S> (min_val ()),
@@ -176,17 +177,17 @@ octave_external_int64_int64_mul (int64_t
 // Note that if we return long double it is apparently possible for
 // truncation to happen at the point of storing the result in retval,
 // which can happen after we end long double rounding.  Attempt to avoid
 // that problem by storing the full precision temporary value in the
 // integer value before we end the long double rounding mode.
 // Similarly, the conversion from the 64-bit integer type to long double
 // must also occur in long double rounding mode.
 
-#    define OCTAVE_LONG_DOUBLE_OP(T, OP, NAME)                  \
+#    define DEFINE_OCTAVE_LONG_DOUBLE_OP(T, OP, NAME)           \
   T                                                             \
   external_double_ ## T ## _ ## NAME (double x, T y)            \
   {                                                             \
     unsigned int oldcw = octave_begin_long_double_rounding ();  \
                                                                 \
     T retval = T (x OP static_cast<long double> (y.value ()));  \
                                                                 \
     octave_end_long_double_rounding (oldcw);                    \
@@ -201,24 +202,24 @@ octave_external_int64_int64_mul (int64_t
                                                                 \
     T retval = T (static_cast<long double> (x.value ()) OP y);  \
                                                                 \
     octave_end_long_double_rounding (oldcw);                    \
                                                                 \
     return retval;                                              \
   }
 
-#    define OCTAVE_LONG_DOUBLE_OPS(T)           \
-  OCTAVE_LONG_DOUBLE_OP (T, +, add);            \
-  OCTAVE_LONG_DOUBLE_OP (T, -, sub);            \
-  OCTAVE_LONG_DOUBLE_OP (T, *, mul);            \
-  OCTAVE_LONG_DOUBLE_OP (T, /, div)
+#    define DEFINE_OCTAVE_LONG_DOUBLE_OPS(T)    \
+  DEFINE_OCTAVE_LONG_DOUBLE_OP (T, +, add);     \
+  DEFINE_OCTAVE_LONG_DOUBLE_OP (T, -, sub);     \
+  DEFINE_OCTAVE_LONG_DOUBLE_OP (T, *, mul);     \
+  DEFINE_OCTAVE_LONG_DOUBLE_OP (T, /, div)
 
-OCTAVE_LONG_DOUBLE_OPS(octave_int64);
-OCTAVE_LONG_DOUBLE_OPS(octave_uint64);
+DEFINE_OCTAVE_LONG_DOUBLE_OPS (octave_int64);
+DEFINE_OCTAVE_LONG_DOUBLE_OPS (octave_uint64);
 
 #  endif
 
 #else
 
 // Define comparison operators
 
 template <typename xop>
@@ -345,17 +346,17 @@ octave_int_arith_base<uint64_t, false>::
     {
       uint64_t lx = static_cast<uint32_t> (x);
       uint64_t ly = static_cast<uint32_t> (y);
       res = lx*ly;
     }
 
   return res;
 
-overflow:
+ overflow:
   return max_val ();
 }
 
 template <>
 int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
   // The signed case is far worse.  The problem is that even if neither
@@ -421,17 +422,17 @@ octave_int_arith_base<int64_t, true>::mu
   else
     {
       if (res > static_cast<uint64_t> (min_val ()))
         return min_val ();
       else
         return -static_cast<int64_t> (res);
     }
 
-overflow:
+ overflow:
   return positive ? max_val () : min_val ();
 
 }
 
 template <>
 OCTAVE_API octave_uint64
 operator + (const octave_uint64& x, const double& y)
 {
@@ -674,43 +675,43 @@ OCTAVE_API octave_int64
 operator / (const octave_int64& x, const double& y)
 {
   if (fabs (y) < octave_int64::max () && y == octave::math::round (y))
     return x / octave_int64 (y);
   else
     return x * (1.0/y);
 }
 
-#define INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP,T1,T2)                      \
+#define INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, T1, T2)                    \
   template OCTAVE_API bool                                              \
   octave_int_cmp_op::emulate_mop<octave_int_cmp_op::OP> (T1 x, T2 y)
 
 #define INSTANTIATE_INT64_DOUBLE_CMP_OP(OP)                     \
-  INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, double, int64_t);        \
-  INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, double, uint64_t);       \
-  INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, int64_t, double);        \
-  INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, uint64_t, double)
+  INSTANTIATE_INT64_DOUBLE_CMP_OP0 (OP, double, int64_t);       \
+  INSTANTIATE_INT64_DOUBLE_CMP_OP0 (OP, double, uint64_t);      \
+  INSTANTIATE_INT64_DOUBLE_CMP_OP0 (OP, int64_t, double);       \
+  INSTANTIATE_INT64_DOUBLE_CMP_OP0 (OP, uint64_t, double)
 
-INSTANTIATE_INT64_DOUBLE_CMP_OP(lt);
-INSTANTIATE_INT64_DOUBLE_CMP_OP(le);
-INSTANTIATE_INT64_DOUBLE_CMP_OP(gt);
-INSTANTIATE_INT64_DOUBLE_CMP_OP(ge);
-INSTANTIATE_INT64_DOUBLE_CMP_OP(eq);
-INSTANTIATE_INT64_DOUBLE_CMP_OP(ne);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (lt);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (le);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (gt);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (ge);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (eq);
+INSTANTIATE_INT64_DOUBLE_CMP_OP (ne);
 
 #endif
 
 template <typename T>
 octave_int<T>
 pow (const octave_int<T>& a, const octave_int<T>& b)
 {
   octave_int<T> retval;
 
-  octave_int<T> zero = static_cast<T> (0);
-  octave_int<T> one = static_cast<T> (1);
+  const octave_int<T> zero = octave_int<T>::zero;
+  const octave_int<T> one = octave_int<T>::one;
 
   if (b == zero || a == one)
     retval = one;
   else if (b < zero)
     {
       if (a == -one)
         retval = (b.value () % 2) ? a : one;
       else
@@ -786,23 +787,38 @@ powf (const octave_int<T>& a, const floa
            && b == octave::math::round (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
           : octave_int<T> (std::pow (a.double_value (),
                                      static_cast<double> (b))));
 }
 
 #define INSTANTIATE_INTTYPE(T)                                          \
   template class OCTAVE_API octave_int<T>;                              \
-  template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
-  template OCTAVE_API octave_int<T> pow (const double&, const octave_int<T>&); \
-  template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const double&); \
-  template OCTAVE_API octave_int<T> pow (const float&, const octave_int<T>&); \
-  template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const float&); \
-  template OCTAVE_API octave_int<T> powf (const float&, const octave_int<T>&); \
-  template OCTAVE_API octave_int<T> powf (const octave_int<T>&, const float&); \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  pow (const octave_int<T>&, const octave_int<T>&);                     \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  pow (const double&, const octave_int<T>&);                            \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  pow (const octave_int<T>&, const double&);                            \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  pow (const float&, const octave_int<T>&);                             \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  pow (const octave_int<T>&, const float&);                             \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  powf (const float&, const octave_int<T>&);                            \
+                                                                        \
+  template OCTAVE_API octave_int<T>                                     \
+  powf (const octave_int<T>&, const float&);                            \
+                                                                        \
   template OCTAVE_API octave_int<T>                                     \
   bitshift (const octave_int<T>&, int, const octave_int<T>&);
 
 INSTANTIATE_INTTYPE (int8_t);
 INSTANTIATE_INTTYPE (int16_t);
 INSTANTIATE_INTTYPE (int32_t);
 INSTANTIATE_INTTYPE (int64_t);
 
