# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1452099842 -3600
#      Wed Jan 06 18:04:02 2016 +0100
# Node ID 63374982750bea68d4a1e42e716860755d8ae371
# Parent  3e7cfee5f7862efff6cf4b3efa19492eeeaa4ccc
Usage of corresponding value extractor for octave_idx_type.  Improves support
for large matrices in 64 bit builds, e.g. calls of "size" and large sparse
matrix creation.

* libinterp/corefcn/daspk.cc(daspk_user_function): Use idx_type_value ().
* libinterp/corefcn/data.cc(diag,size): Use idx_type_value ().
* libinterp/corefcn/rand.cc(do_rand): Use idx_type_value ().
* libinterp/corefcn/tril.cc(do_trilu): Use idx_type_value ().
* libinterp/corefcn/utils.cc(get_dimensions): Use idx_type_value ().
* libinterp/dldfcn/qr.cc(qrshift): Use idx_type_value ().

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -91,17 +91,17 @@ daspk_user_function (const ColumnVector&
             {
               warning ("daspk: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
             }
 
           retval = tmp(0).vector_value ();
 
           if (tlen > 1)
-            ires = tmp(1).int_value ();
+            ires = tmp(1).idx_type_value ();
 
           if (retval.is_empty ())
             gripe_user_supplied_eval ("daspk");
         }
       else
         gripe_user_supplied_eval ("daspk");
     }
 
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1362,29 +1362,29 @@ Given a matrix argument, instead of a ve
     print_usage ();
 
   octave_value retval;
 
   if (nargin == 1)
     retval = args(0).diag ();
   else if (nargin == 2)
     {
-      octave_idx_type k = args(1).xint_value ("diag: invalid argument K");
+      octave_idx_type k = args(1).xidx_type_value ("diag: invalid argument K");
 
       retval = args(0).diag (k);
     }
   else
     {
       octave_value arg0 = args(0);
 
       if (arg0.ndims () != 2 || (arg0.rows () != 1 && arg0.columns () != 1))
         error ("diag: V must be a vector");
 
-      octave_idx_type m = args(1).xint_value ("diag: invalid dimensions");
-      octave_idx_type n = args(2).xint_value ("diag: invalid dimensions");
+      octave_idx_type m = args(1).xidx_type_value ("diag: invalid dimensions");
+      octave_idx_type n = args(2).xidx_type_value ("diag: invalid dimensions");
 
       retval = arg0.diag (m, n);
     }
 
   return retval;
 }
 
 /*
@@ -2778,17 +2778,17 @@ returns the number of columns in the giv
           for (int i = 0; i < ndims; i++)
             m(i) = dimensions(i);
 
           retval(0) = m;
         }
     }
   else if (nargin == 2 && nargout < 2)
     {
-      octave_idx_type nd = args(1).xint_value ("size: DIM must be an integer");
+      octave_idx_type nd = args(1).xidx_type_value ("size: DIM must be an integer");
 
       const dim_vector dv = args(0).dims ();
 
       if (nd < 1)
         error ("size: requested dimension DIM (= %d) out of range", nd);
 
       if (nd <= dv.length ())
         retval(0) = dv(nd-1);
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -254,17 +254,20 @@ do_rand (const octave_value_list& args, 
               error ("%s: unrecognized string argument", fcn);
           }
         else
           {
             dims.resize (nargin);
 
             for (int i = 0; i < nargin; i++)
               {
-                octave_idx_type elt = args(idx+i).xint_value ("%s: dimension must be a scalar or array of integers", fcn);
+                octave_idx_type elt =
+                  args(idx+i).xidx_type_value (
+                    "%s: dimension must be a scalar or array of integers",
+                    fcn);
 
                 // Negative dimensions treated as zero for Matlab compatibility
                 dims(i) = elt >= 0 ? elt : 0;
               }
 
             goto gen_matrix;
           }
       }
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -195,17 +195,17 @@ do_trilu (const std::string& name,
       nargin--;
     }
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_idx_type k = 0;
   if (nargin == 2)
-    k = args(1).int_value (true);
+    k = args(1).idx_type_value (true);
 
   octave_value arg = args(0);
 
   dim_vector dims = arg.dims ();
   if (dims.length () != 2)
     error ("%s: need a 2-D matrix", name.c_str ());
   else if (k < -dims(0) || k > dims(1))
     error ("%s: requested diagonal out of range", name.c_str ());
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1116,17 +1116,17 @@ check_dimensions (dim_vector& dim, const
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 dim_vector& dim)
 {
   if (a.is_scalar_type ())
     {
       dim.resize (2);
-      dim(0) = a.int_value ();
+      dim(0) = a.idx_type_value ();
       dim(1) = dim(0);
     }
   else
     {
       octave_idx_type nr = a.rows ();
       octave_idx_type nc = a.columns ();
 
       if (nr != 1 && nc != 1)
@@ -1144,17 +1144,17 @@ get_dimensions (const octave_value& a, c
 
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 octave_idx_type& nr, octave_idx_type& nc)
 {
   if (a.is_scalar_type ())
     {
-      nr = nc = a.int_value ();
+      nr = nc = a.idx_type_value ();
     }
   else
     {
       nr = a.rows ();
       nc = a.columns ();
 
       if ((nr != 1 || nc != 2) && (nr != 2 || nc != 1))
         error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
@@ -1167,19 +1167,19 @@ get_dimensions (const octave_value& a, c
   check_dimensions (nr, nc, warn_for);
 }
 
 void
 get_dimensions (const octave_value& a, const octave_value& b,
                 const char *warn_for, octave_idx_type& nr, octave_idx_type& nc)
 {
   nr = a.is_empty ()
-       ? 0 : a.int_value ("%s: row dimension must be a scalar", warn_for);
+       ? 0 : a.idx_type_value ("%s: row dimension must be a scalar", warn_for);
   nc = b.is_empty ()
-       ? 0 : b.int_value ("%s: column dimension must be a scalar", warn_for);
+       ? 0 : b.idx_type_value ("%s: column dimension must be a scalar", warn_for);
 
   check_dimensions (nr, nc, warn_for);
 }
 
 octave_idx_type
 dims_to_numel (const dim_vector& dims, const octave_value_list& idx_arg)
 {
   octave_idx_type retval;
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -1343,18 +1343,18 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
   octave_value argj = args(3);
 
   if (! argq.is_numeric_type () || ! argr.is_numeric_type ())
     print_usage ();
 
   if (! check_qr_dims (argq, argr, true))
     error ("qrshift: dimensions mismatch");
 
-  octave_idx_type i = argi.int_value ();
-  octave_idx_type j = argj.int_value ();
+  octave_idx_type i = argi.idx_type_value ();
+  octave_idx_type j = argj.idx_type_value ();
 
   if (! check_index (argi) || ! check_index (argj))
     error ("qrshift: invalid index I or J");
 
   octave_value_list retval;
 
   if (argq.is_real_type () && argr.is_real_type ())
     {
