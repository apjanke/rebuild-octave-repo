# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1381785396 14400
#      Mon Oct 14 17:16:36 2013 -0400
# Branch classdef
# Node ID dc4124992f0cf00b8c15e49cc69c8fb1aaf6f883
# Parent  df266c923b830c10efb59dcd06d051e1bdf2eb1c
# Parent  0c5f50706ba344387fb6b1fe789ae03f90ef175e
maint: periodic merge of default to classdef

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -71,17 +71,17 @@ octave_qscintilla::context_help_doc (boo
   if (get_actual_word ())
     contextmenu_help_doc (documentation);
 }
 
 // call edit the function related to the current word
 void
 octave_qscintilla::context_edit ()
 {
-  if (hasSelectedText ())
+  if (get_actual_word ())
     contextmenu_edit (true);
 }
 
 // call edit the function related to the current word
 void
 octave_qscintilla::context_run ()
 {
   if (hasSelectedText ())
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -39,38 +39,32 @@ along with Octave; see the file COPYING.
 
 // Win32 API requires the CALLBACK attributes for
 // GLU callback functions. Define it to empty on
 // other platforms.
 #ifndef CALLBACK
 #define CALLBACK
 #endif
 
-static octave_idx_type
-xmin (octave_idx_type x, octave_idx_type y)
-{
-  return x < y ? x : y;
-}
-
 class
 opengl_texture
 {
 protected:
   class texture_rep
   {
   public:
     texture_rep (void)
       : id (), w (), h (), tw (), th (), tx (), ty (),
         valid (false), count (1)
     { }
 
     texture_rep (GLuint id_arg, int w_arg, int h_arg, int tw_arg, int th_arg)
-        : id (id_arg), w (w_arg), h (h_arg), tw (tw_arg), th (th_arg),
-          tx (double(w)/tw), ty (double(h)/th), valid (true),
-          count (1) { }
+      : id (id_arg), w (w_arg), h (h_arg), tw (tw_arg), th (th_arg),
+        tx (double(w)/tw), ty (double(h)/th), valid (true),
+        count (1) { }
 
     ~texture_rep (void)
       {
         if (valid)
           glDeleteTextures (1, &id);
       }
 
     void bind (int mode) const
@@ -91,17 +85,17 @@ protected:
 
 private:
   opengl_texture (texture_rep *_rep) : rep (_rep) { }
 
 public:
   opengl_texture (void) : rep (new texture_rep ()) { }
 
   opengl_texture (const opengl_texture& tx)
-      : rep (tx.rep)
+    : rep (tx.rep)
     {
       rep->count++;
     }
 
   ~opengl_texture (void)
     {
       if (--rep->count == 0)
         delete rep;
@@ -146,18 +140,18 @@ opengl_texture::create (const octave_val
 {
   opengl_texture retval;
 
   dim_vector dv (data.dims ());
 
   // Expect RGB data
   if (dv.length () == 3 && dv(2) == 3)
     {
-      // FIXME -- dim_vectors hold octave_idx_type values.  Should we
-      // check for dimensions larger than intmax?
+      // FIXME: dim_vectors hold octave_idx_type values.
+      //        Should we check for dimensions larger than intmax?
       int h = dv(0), w = dv(1), tw, th;
       GLuint id;
       bool ok = true;
 
       tw = next_power_of_2 (w);
       th = next_power_of_2 (w);
 
       glGenTextures (1, &id);
@@ -174,18 +168,17 @@ opengl_texture::create (const octave_val
               for (int j = 0, idx = i*tw*3; j < w; j++, idx += 3)
                 {
                   a[idx]   = xdata(i,j,0);
                   a[idx+1] = xdata(i,j,1);
                   a[idx+2] = xdata(i,j,2);
                 }
             }
 
-          glTexImage2D (GL_TEXTURE_2D, 0, 3, tw, th, 0,
-                        GL_RGB, GL_FLOAT, a);
+          glTexImage2D (GL_TEXTURE_2D, 0, 3, tw, th, 0, GL_RGB, GL_FLOAT, a);
         }
       else if (data.is_uint8_type ())
         {
           const uint8NDArray xdata = data.uint8_array_value ();
 
           OCTAVE_LOCAL_BUFFER (octave_uint8, a, (3*tw*th));
 
           for (int i = 0; i < h; i++)
@@ -261,20 +254,20 @@ public:
   void add_vertex (double *loc, void *data) const
     { gluTessVertex (glu_tess, loc, data); }
 
 protected:
   virtual void begin (GLenum /*type*/) { }
 
   virtual void end (void) { }
 
-  virtual void vertex (void */*data*/) { }
-
-  virtual void combine (GLdouble /*c*/[3], void */*data*/[4],
-                        GLfloat /*w*/[4], void **/*out_data*/) { }
+  virtual void vertex (void * /*data*/) { }
+
+  virtual void combine (GLdouble [3] /*c*/, void * [4] /*data*/,
+                        GLfloat  [4] /*w*/, void ** /*out_data*/) { }
 
   virtual void edge_flag (GLboolean /*flag*/) { }
 
   virtual void error (GLenum err)
     { ::error ("OpenGL tesselation error (%d)", err); }
 
   virtual void init (void)
     {
@@ -348,19 +341,19 @@ public:
     octave_refcount<int> count;
 
     vertex_data_rep (void)
       : coords (), color (), normal (), alpha (),
         ambient (), diffuse (), specular (), specular_exp (),count (1) { }
 
     vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
                      double a, float as, float ds, float ss, float se)
-        : coords (c), color (col), normal (n), alpha (a),
-          ambient (as), diffuse (ds), specular (ss), specular_exp (se),
-          count (1) { }
+      : coords (c), color (col), normal (n), alpha (a),
+        ambient (as), diffuse (ds), specular (ss), specular_exp (se),
+        count (1) { }
   };
 
 private:
   vertex_data_rep *rep;
 
   vertex_data_rep *nil_rep (void) const
     {
       static vertex_data_rep *nr = new vertex_data_rep ();
@@ -372,21 +365,21 @@ public:
   vertex_data (void) : rep (nil_rep ())
     { rep->count++; }
 
   vertex_data (const vertex_data& v) : rep (v.rep)
     { rep->count++; }
 
   vertex_data (const Matrix& c, const Matrix& col, const Matrix& n,
                double a, float as, float ds, float ss, float se)
-      : rep (new vertex_data_rep (c, col, n, a, as, ds, ss, se))
+    : rep (new vertex_data_rep (c, col, n, a, as, ds, ss, se))
     { }
 
   vertex_data (vertex_data_rep *new_rep)
-      : rep (new_rep) { }
+    : rep (new_rep) { }
 
   ~vertex_data (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
   vertex_data& operator = (const vertex_data& v)
@@ -403,19 +396,19 @@ public:
   vertex_data_rep *get_rep (void) const { return rep; }
 };
 
 class
 opengl_renderer::patch_tesselator : public opengl_tesselator
 {
 public:
   patch_tesselator (opengl_renderer *r, int cmode, int lmode, int idx = 0)
-      : opengl_tesselator (), renderer (r),
-        color_mode (cmode), light_mode (lmode), index (idx),
-        first (true), tmp_vdata ()
+    : opengl_tesselator (), renderer (r),
+      color_mode (cmode), light_mode (lmode), index (idx),
+      first (true), tmp_vdata ()
   { }
 
 protected:
   void begin (GLenum type)
     {
       //printf ("patch_tesselator::begin (%d)\n", type);
       first = true;
 
@@ -1429,17 +1422,17 @@ opengl_renderer::draw_axes (const axes::
 void
 opengl_renderer::draw_line (const line::properties& props)
 {
   Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
   Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
   bool has_z = (z.numel () > 0);
-  int n = static_cast<int> (::xmin (::xmin (x.numel (), y.numel ()), (has_z ? z.numel () : std::numeric_limits<int>::max ())));
+  int n = static_cast<int> (std::min (std::min (x.numel (), y.numel ()), (has_z ? z.numel () : std::numeric_limits<int>::max ())));
   octave_uint8 clip_mask = (props.is_clipping () ? 0x7F : 0x40), clip_ok (0x40);
 
   std::vector<octave_uint8> clip (n);
 
   if (has_z)
     for (int i = 0; i < n; i++)
       clip[i] = (clip_code (x(i), y(i), z(i)) & clip_mask);
   else
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -8017,52 +8017,51 @@ gh_manager::do_pop_figure (const graphic
 }
 
 class
 callback_event : public base_graphics_event
 {
 public:
   callback_event (const graphics_handle& h, const std::string& name,
                   const octave_value& data = Matrix ())
-      : base_graphics_event (), handle (h), callback_name (name),
-        callback (), callback_data (data) { }
+    : base_graphics_event (), handle (h), callback_name (name),
+      callback (), callback_data (data) { }
 
   callback_event (const graphics_handle& h, const octave_value& cb,
                   const octave_value& data = Matrix ())
-      : base_graphics_event (), handle (h), callback_name (),
-        callback (cb), callback_data (data) { }
+    : base_graphics_event (), handle (h), callback_name (),
+      callback (cb), callback_data (data) { }
 
   void execute (void)
     {
       if (callback.is_defined ())
         gh_manager::execute_callback (handle, callback, callback_data);
       else
         gh_manager::execute_callback (handle, callback_name, callback_data);
     }
 
 private:
   callback_event (void)
-    : base_graphics_event (), handle (),
-      callback_name (), callback_data ()
+    : base_graphics_event (), handle (), callback_name (), callback_data ()
   { }
 
 private:
   graphics_handle handle;
   std::string callback_name;
   octave_value callback;
   octave_value callback_data;
 };
 
 class
 function_event : public base_graphics_event
 {
 public:
   function_event (graphics_event::event_fcn fcn, void* data = 0)
-      : base_graphics_event (), function (fcn),
-        function_data (data) { }
+    : base_graphics_event (), function (fcn), function_data (data)
+  { }
 
   void execute (void)
     {
       function (function_data);
     }
 
 private:
 
@@ -8081,18 +8080,18 @@ private:
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
              const octave_value& value, bool do_notify_toolkit = true)
-      : base_graphics_event (), handle (h), property_name (name),
-        property_value (value), notify_toolkit (do_notify_toolkit) { }
+    : base_graphics_event (), handle (h), property_name (name),
+      property_value (value), notify_toolkit (do_notify_toolkit) { }
 
   void execute (void)
     {
       gh_manager::auto_lock guard;
 
       graphics_object go = gh_manager::get_object (handle);
 
       if (go)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1229,33 +1229,33 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class double_radio_property : public base_property
 {
 public:
   double_radio_property (double d, const radio_values& v)
-      : base_property ("", graphics_handle ()),
-        current_type (double_t), dval (d), radio_val (v),
-        current_val (v.default_value ())
+    : base_property ("", graphics_handle ()),
+      current_type (double_t), dval (d), radio_val (v),
+      current_val (v.default_value ())
   { }
 
   double_radio_property (const std::string& nm, const graphics_handle& h,
                          const std::string& v)
-      : base_property (nm, h),
-        current_type (radio_t), dval (0), radio_val (v),
-        current_val (radio_val.default_value ())
+    : base_property (nm, h),
+      current_type (radio_t), dval (0), radio_val (v),
+      current_val (radio_val.default_value ())
   { }
 
   double_radio_property (const std::string& nm, const graphics_handle& h,
                          const double_radio_property& v)
-      : base_property (nm, h),
-        current_type (v.current_type), dval (v.dval),
-        radio_val (v.radio_val), current_val (v.current_val)
+    : base_property (nm, h),
+      current_type (v.current_type), dval (v.dval),
+      radio_val (v.radio_val), current_val (v.current_val)
   { }
 
   double_radio_property (const double_radio_property& p)
     : base_property (p), current_type (p.current_type),
       dval (p.dval), radio_val (p.radio_val),
       current_val (p.current_val) { }
 
   octave_value get (void) const
@@ -2035,17 +2035,17 @@ class graphics_object;
 
 class base_graphics_toolkit
 {
 public:
   friend class graphics_toolkit;
 
 public:
   base_graphics_toolkit (const std::string& nm)
-      : name (nm), count (0) { }
+    : name (nm), count (0) { }
 
   virtual ~base_graphics_toolkit (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
@@ -2113,29 +2113,29 @@ private:
         error ("%s: invalid graphics toolkit", fname.c_str ());
     }
 };
 
 class graphics_toolkit
 {
 public:
   graphics_toolkit (void)
-      : rep (new base_graphics_toolkit ("unknown"))
+    : rep (new base_graphics_toolkit ("unknown"))
     {
       rep->count++;
     }
 
   graphics_toolkit (base_graphics_toolkit* b)
-      : rep (b)
+    : rep (b)
     {
       rep->count++;
     }
 
   graphics_toolkit (const graphics_toolkit& b)
-      : rep (b.rep)
+    : rep (b.rep)
     {
       rep->count++;
     }
 
   ~graphics_toolkit (void)
     {
       if (--rep->count == 0)
         delete rep;
@@ -3463,21 +3463,21 @@ public:
       sx ("linear"), sy ("linear"), sz ("linear"),  zlim (1, 2, 0.0)
     {
       zlim(1) = 1.0;
     }
 
   graphics_xform (const Matrix& xm, const Matrix& xim,
                   const scaler& x, const scaler& y, const scaler& z,
                   const Matrix& zl)
-      : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
+    : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
 
   graphics_xform (const graphics_xform& g)
-      : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
-        sy (g.sy), sz (g.sz), zlim (g.zlim) { }
+    : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
+      sy (g.sy), sz (g.sz), zlim (g.zlim) { }
 
   ~graphics_xform (void) { }
 
   graphics_xform& operator = (const graphics_xform& g)
     {
       xform = g.xform;
       xform_inv = g.xform_inv;
       sx = g.sx;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -318,19 +318,57 @@ make_statement (T *arg)
 %right UNARY EXPR_NOT
 %left POW EPOW HERMITIAN TRANSPOSE
 %right PLUS_PLUS MINUS_MINUS
 %left '(' '.' '{'
 
 // How to clean up if there is a parse error.  We handle deleting tokens
 // and comments seperately and separators are just characters.  The
 // remaining items are dynamically allocated parse tree objects that
-// must be deleted.
-%destructor { } <sep_type> <tok_val> <comment_type> <dummy_type> <>
-%destructor { delete $$; } <*>
+// must be deleted.  Use the wildcard case (<*>) to detect unhandled
+// cases (for example, a new semantic type is added but not handled
+// here).
+
+%destructor { } <sep_type>
+%destructor { } <tok_val>
+%destructor { } <comment_type>
+%destructor { } <dummy_type>
+%destructor { } <>
+
+%destructor { delete $$; } <tree_type> 
+%destructor { delete $$; } <tree_matrix_type> 
+%destructor { delete $$; } <tree_cell_type> 
+%destructor { delete $$; } <tree_expression_type> 
+%destructor { delete $$; } <tree_constant_type> 
+%destructor { delete $$; } <tree_fcn_handle_type> 
+%destructor { delete $$; } <tree_anon_fcn_handle_type> 
+%destructor { delete $$; } <tree_identifier_type> 
+%destructor { delete $$; } <tree_index_expression_type> 
+%destructor { delete $$; } <tree_colon_expression_type> 
+%destructor { delete $$; } <tree_argument_list_type> 
+%destructor { delete $$; } <tree_parameter_list_type> 
+%destructor { delete $$; } <tree_command_type> 
+%destructor { delete $$; } <tree_if_command_type> 
+%destructor { delete $$; } <tree_if_clause_type> 
+%destructor { delete $$; } <tree_if_command_list_type> 
+%destructor { delete $$; } <tree_switch_command_type> 
+%destructor { delete $$; } <tree_switch_case_type> 
+%destructor { delete $$; } <tree_switch_case_list_type> 
+%destructor { delete $$; } <tree_decl_elt_type> 
+%destructor { delete $$; } <tree_decl_init_list_type> 
+%destructor { delete $$; } <tree_decl_command_type> 
+%destructor { delete $$; } <tree_statement_type> 
+%destructor { delete $$; } <tree_statement_list_type> 
+%destructor { delete $$; } <octave_user_function_type> 
+
+%destructor {
+    warning_with_id
+      ("Octave:parser-destructor",
+       "possible memory leak in cleanup following parse error");
+ } <*>
 
 // Where to start.
 %start input
 
 %%
 
 // ==============================
 // Statements and statement lists
