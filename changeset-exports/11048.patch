# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285747688 14400
#      Wed Sep 29 04:08:08 2010 -0400
# Node ID 10c65e01f042eb9f5b850e53a3e393809f497810
# Parent  52609f73c7d9900c206b5066611e99ed8941a020
__glpk__.cc: use octave_scalar_map instead of Octave_map

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,13 @@
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Use octave_scalar_map
-	instead of Octave_map.
+	instead of Octave_map.  Use scalar values where appropriate in
+	call to glpk.
 	(OCTAVE_GLPK_GET_REAL_PARAM, OCTAVE_GLPK_GET_INT_PARAM):
 	Update for octave_scalar_map.
 
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/amd.cc (Famd): Use octave_scalar_map instead of
 	Octave_map.
 	* DLD-FUNCTIONS/cellfun.cc (get_output_list): Likewise.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -808,50 +808,48 @@ Undocumented internal function.\n\
   OCTAVE_GLPK_GET_REAL_PARAM ("outdly", 7);
 
   OCTAVE_GLPK_GET_REAL_PARAM ("tolint", 8);
 
   OCTAVE_GLPK_GET_REAL_PARAM ("tolobj", 9);
 
   //-- Assign pointers to the output parameters
   ColumnVector xmin (mrowsc, octave_NA);
-  ColumnVector fmin (1, octave_NA);
-  ColumnVector status (1);
+  double fmin = octave_NA;
+  double status;
   ColumnVector lambda (mrowsA, octave_NA);
   ColumnVector redcosts (mrowsc, octave_NA);
-  ColumnVector time (1);
-  ColumnVector mem (1);
+  double time;
+  double mem;
 
   int jmpret = setjmp (mark);
 
   if (jmpret == 0)
     glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
           cn.fortran_vec (), a.fortran_vec (), b, ctype,
-          freeLB.fortran_vec (), lb, freeUB.fortran_vec (),
-          ub, vartype.fortran_vec (), isMIP, lpsolver,
-          save_pb, xmin.fortran_vec (), fmin.fortran_vec (),
-          status.fortran_vec (), lambda.fortran_vec (),
-          redcosts.fortran_vec (), time.fortran_vec (),
-          mem.fortran_vec ());
+          freeLB.fortran_vec (), lb, freeUB.fortran_vec (), ub,
+          vartype.fortran_vec (), isMIP, lpsolver, save_pb,
+          xmin.fortran_vec (), &fmin, &status, lambda.fortran_vec (),
+          redcosts.fortran_vec (), &time, &mem);
 
-  Octave_map extra;
+  octave_scalar_map extra;
 
   if (! isMIP)
     {
-      extra.assign ("lambda", octave_value (lambda));
-      extra.assign ("redcosts", octave_value (redcosts));
+      extra.assign ("lambda", lambda);
+      extra.assign ("redcosts", redcosts);
     }
 
-  extra.assign ("time", octave_value (time));
-  extra.assign ("mem", octave_value (mem));
+  extra.assign ("time", time);
+  extra.assign ("mem", mem);
 
   retval(3) = extra;
-  retval(2) = octave_value(status);
-  retval(1) = octave_value(fmin);
-  retval(0) = octave_value(xmin);
+  retval(2) = status;
+  retval(1) = fmin;
+  retval(0) = xmin;
 
 #else
 
   gripe_not_supported ("glpk");
 
 #endif
 
   return retval;
