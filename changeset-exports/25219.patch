# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1523474624 14400
#      Wed Apr 11 15:23:44 2018 -0400
# Node ID e98c6d393abb1798f7482646d32619c72b73b906
# Parent  32514537771324f4c4d870edfb300e67b1fbc00f
# Parent  164399071f4dc36c695cee6d727c81e8217fd011
maint: Merge stable to default.

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -239,16 +239,23 @@ endif
 ## executable permissions are set for group and other users.
 fix-file-perms-dist-hook:
 	-chmod -R go-w "$(distdir)"
 	-find "$(distdir)" -type f -perm -100 -exec chmod a+rx {} \;
 .PHONY: fix-file-perms-dist-hook
 
 if AMCOND_ENABLE_HG_ID
 hg-id-dist-hook:
+	@test x"$(DIST_IGNORE_HG_STATE)" != x \
+	  || echo $(HG_ID_VAR) | $(GREP) '^[0-9a-f]\{12\}$$' >/dev/null 2>&1 \
+	  || { echo ; \
+	       echo "Packaging distribution requires a clean hg working tree with no uncommitted changes." ; \
+	       echo "Please commit or revert your changes first, or pass DIST_IGNORE_HG_STATE=1." ; \
+	       echo "Cannot package distribution!" ; \
+	       echo ; exit 1; }
 else
 hg-id-dist-hook:
 	@echo "WARNING: Octave was configured with --disable-hg-id" 1>&2
 endif
 .PHONY: hg-id-dist-hook
 
 if AMCOND_HAVE_ICON_TOOLS
 icons-dist-hook:
diff --git a/README b/README
--- a/README
+++ b/README
@@ -38,22 +38,22 @@ The latest released version of Octave is
 world.  You may also find links to binary distributions at
 <https://www.octave.org/download.html>.  The current development
 sources may be found under the Source Code tab on
 [Savannah](https://savannah.gnu.org/projects/octave/).
 
 Installation
 ------------
 
-Octave requires approximately 1.4 GB of disk storage to unpack and
-compile from source (significantly less, 400 MB, if you don't compile
-with debugging symbols).  Once installed, Octave requires
-approximately 350 MB of disk space (again, considerably less, 70 MB,
-if you don't build shared libraries or the binaries and libraries do
-not include debugging symbols).
+Octave requires approximately 475 MB of disk storage to unpack and
+compile from source (significantly more, 3.8 GB, if you compile with
+debugging symbols).  Once installed, Octave requires approximately
+75 MB of disk space (again, considerably more, 415 MB, if you don't
+build shared libraries or the binaries and libraries include
+debugging symbols).
 
 To compile Octave, you will need a recent version of:
 
 - [GNU Make](https://www.gnu.org/software/make/)
 - [GNU G++](https://gcc.gnu.org/) or another C++11 compiler
 - [GNU Fortran](https://gcc.gnu.org/fortran/), another Fortran 77
   compiler, or [f2c](http://www.netlib.org/f2c/)
 
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2303,28 +2303,32 @@ if test $check_fltk = yes; then
     fltk_cflags=`$FLTK_CONFIG $fltkconf_args --use-gl --cflags`
     for fltk_option in $fltk_cflags; do
       case $fltk_option in
         -I*)
           FLTK_CPPFLAGS="$FLTK_CPPFLAGS $fltk_option"
         ;;
       esac
     done
+    FLTK_CPPFLAGS=`echo "$FLTK_CPPFLAGS" | $SED -e 's/^ \+//'`
+
     ## Split -L and -l options into FLTK_LDFLAGS and FLTK_LIBS
     fltk_ldflags=`$FLTK_CONFIG $fltkconf_args --use-gl --ldflags`
     for fltk_option in $fltk_ldflags; do
       case $fltk_option in
         -l*)
           FLTK_LIBS="$FLTK_LIBS $fltk_option"
         ;;
         *)
           FLTK_LDFLAGS="$FLTK_LDFLAGS $fltk_option"
         ;;
       esac
     done
+    FLTK_LIBS=`echo "$FLTK_LIBS" | $SED -e 's/^ \+//'`
+    FLTK_LDFLAGS=`echo "$FLTK_LDFLAGS" | $SED -e 's/^ \+//'`
 
     case $host_os in
       mingw*)
         FLTK_LDFLAGS=`echo $FLTK_LDFLAGS | $SED -e 's/-mwindows//g'`
       ;;
     esac
     AC_LANG_PUSH(C++)
     AC_CACHE_CHECK([for OpenGL support in FLTK],
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -87,18 +87,23 @@ a permission notice identical to this on
 Permission is granted to copy and distribute translations of this
 manual into another language, under the above conditions for
 modified versions.
 @end ifnottex
 
 @titlepage
 @title GNU Octave
 @subtitle A high-level interactive language for numerical computations
+@c FIXME: Would like to use @value{EDITION} but this variable is the
+@c        same as VERSION and contains MAJOR.MINOR.PATCH.  The variable
+@c        is automatically generated by Automake in version-octave.texi.
+@c        Need to use sed to strip off MINOR.PATCH numbers and place
+@c        the results in a new file, and then @include that new file.
 @subtitle Edition 4 for Octave version @value{VERSION}
-@subtitle March 2018
+@subtitle @value{UPDATED-MONTH}
 @sp 2
 @multitable @columnfractions 0.4 0.025 0.65
 @item
 @flushright @image{octave_logo,2.1in}
 @end flushright
 @tab
 @c this is a spacer column
 @tab
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1415,31 +1415,30 @@ DEFMETHOD (warning, interp, args, nargou
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} warning (@var{template}, @dots{})
 @deftypefnx {} {} warning (@var{id}, @var{template}, @dots{})
 @deftypefnx {} {} warning ("on", @var{id})
 @deftypefnx {} {} warning ("off", @var{id})
 @deftypefnx {} {} warning ("error", @var{id})
 @deftypefnx {} {} warning ("query", @var{id})
 @deftypefnx {} {} warning (@var{state}, @var{id}, "local")
-@deftypefnx {} {} warning (@var{stin})
-@deftypefnx {} {@var{stout} =} warning (@dots{})
-@deftypefnx {} {@var{mode_st} =} warning (@var{state}, @var{mode})
+@deftypefnx {} {} warning (@var{warning_struct})
+@deftypefnx {} {@var{warning_struct} =} warning (@dots{})
+@deftypefnx {} {@var{mode_struct} =} warning (@var{state}, @var{mode})
 @deftypefnx {} {} warning (@var{mode_st})
 
-Display a warning message or control the behavior of Octave's warning
-system.
+Display a warning message or control the behavior of Octave's warning system.
 
-The first call form uses a template @var{template} and optional
-additional arguments to display a message on the @code{stderr} stream.
-The message is formatted using the same rules as the @code{printf} family
-of functions (@pxref{Formatted Output}) and prefixed by the character
-string @samp{warning: }.  You should use this function when you want to
-notify the user of an unusual condition, but only when it makes sense for
-your program to go on.  For example:
+The first call form uses a template @var{template} and optional additional
+arguments to display a message on the @code{stderr} stream.  The message is
+formatted using the same rules as the @code{printf} family of functions
+(@pxref{Formatted Output}) and prefixed by the character string
+@w{@samp{warning: }}.  You should use this function when you want to notify the
+user of an unusual condition, but only when it makes sense for your program to
+go on.  For example:
 
 @example
 @group
 warning ("foo: maybe something wrong here");
 @end group
 @end example
 
 The optional warning identifier @var{id} allows users to enable or disable
@@ -1455,37 +1454,37 @@ warning ("MyNameSpace:check-something",
 @end group
 @end example
 
 The second call form is meant to change and/or query the state of warnings.
 The first input argument must be a string @var{state} (@qcode{"on"},
 @qcode{"off"}, @qcode{"error"}, or @qcode{"query"}) followed by an optional
 warning identifier @var{id} or @qcode{"all"} (default).
 
-The optional output argument @var{stout} is a structure or structure array
-with fields @qcode{"state"} and @qcode{"identifier"}.  The @var{state} argument
-may have the following values:
+The optional output argument @var{warning_struct} is a structure or structure
+array with fields @qcode{"state"} and @qcode{"identifier"}.  The @var{state}
+argument may have the following values:
 
 @table @asis
 @item @qcode{"on"}|@qcode{"off"}:
 Enable or disable the display of warnings identified by @var{id} and optionally
 return their previous state @var{stout}.
 
 @item @qcode{"error"}:
 Turn warnings identified by @var{id} into errors and optionally return their
 previous state @var{stout}.
 
 @item @qcode{"query"}:
 Return the current state of warnings identified by @var{id}.
 @end table
 
-A structure or structure array @var{stin}, with fields @qcode{"state"} and
-@qcode{"identifier"}, may be passed to achieve equivalent results.  The
-following example shows how to temporarily disable a warning and then restore
-its original state:
+A structure or structure array @var{warning_struct}, with fields
+@qcode{"state"} and @qcode{"identifier"}, may be given as an input to achieve
+equivalent results.  The following example shows how to temporarily disable a
+warning and then restore its original state:
 
 @example
 @group
 loglog (-1:10);
 ## Disable the previous warning and save its original state
 [~, id] = lastwarn ();
 warnstate = warning ("off", id);
 loglog (-1:10);
@@ -1514,22 +1513,22 @@ enable/disable the display of the stack 
 
 @item @qcode{"verbose"}:
 enable/disable the display of additional information after the warning message
 @end table
 
 In this case the @var{state} argument may only be @qcode{"on"} or
 @qcode{"off"}.
 
-Implementation Note: For compatibility with @sc{matlab}, escape
-sequences in @var{template} (e.g., @qcode{"@xbackslashchar{}n"} =>
-newline) are processed regardless of whether @var{template} has been defined
-with single quotes, as long as there are two or more input arguments.  To
-disable escape sequence expansion use a second backslash before the sequence
-(e.g., @qcode{"@xbackslashchar{}@xbackslashchar{}n"}) or use the
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in
+@var{template} (e.g., @qcode{"@xbackslashchar{}n"} => newline) are processed
+regardless of whether @var{template} has been defined with single quotes, as
+long as there are two or more input arguments.  To disable escape sequence
+expansion use a second backslash before the sequence (e.g.,
+@qcode{"@xbackslashchar{}@xbackslashchar{}n"}) or use the
 @code{regexptranslate} function.
 @seealso{warning_ids, lastwarn, error}
 @end deftypefn */)
 {
   octave_value retval;
 
   int nargin = args.length ();
   bool done = false;
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -514,18 +514,17 @@ endfunction
 %!assert (gammainc ([1e-02, 1e-03, 1e-5, 1e-9, 1e-14], 2), ...
 %!        [0.0000496679133402659, 4.99666791633340e-7, 4.99996666679167e-11, ...
 %!        4.99999999666667e-19, 4.99999999999997e-29], -1e-12);
 
 %!test <*53543>
 %! y_exp = 9.995001666250085e-04;
 %! assert (gammainc (1/1000, 1), y_exp, -eps);
 
-## FIXME: should this be tagged with a bug report number?
-%!xtest
+%!xtest <53612>
 %! assert (gammainc (-20, 1.1, "upper"), ...
 %!         6.50986687074979e8 + 2.11518396291149e8*i, -1e-13);
 
 ## Test conservation of the class (five tests for each subroutine).
 %!assert (class (gammainc (0, 1)) == "double")
 %!assert (class (gammainc (single (0), 1)) == "single")
 %!assert (class (gammainc (int8 (0), 1)) == "double")
 %!assert (class (gammainc (0, single (1))) == "single")
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -1005,17 +1005,17 @@ endfunction
 
 ## Test 'testif' keyword
 %!testif HAVE_INVALID_FEATURE
 %! error ("testif executed code despite not having feature");
 
 ## Test 'xtest' keyword
 %!xtest
 %! assert (1, 1);      # Test passes
-%!xtest
+%!xtest <53613>
 %! assert (0, 1);      # Test fails
 
 ## Test comment block.  It can contain anything.
 %!##
 %! it is the "#" as the block type that makes it a comment
 %! and it stays as a comment even through continuation lines
 %! which means that it works well with commenting out whole tests
 
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -43,17 +43,17 @@
 %!assert (isempty (q.principle))
 %!assert (isempty (q.term))
 %!assert (class (p), "foo_value_class")
 %!assert (p.term, 48)
 %!assert (p.rate, 4.0)
 %!assert (p.principle, 50e3)
 %!assert (p.amount, amt, eps ())
 %!assert (amount (p), amt, eps ())
-%!xtest
+%!xtest <53614>
 %! assert (properties (p), {'rate'; 'term'; 'principle'});
 %!test <42510>
 %! assert (methods (p), {'amount'; 'foo_value_class'});
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
 
 %%  Static method and Constant Property
 %!assert (foo_static_method_constant_property.radians_per_cycle, 2*pi)
diff --git a/test/jit.tst b/test/jit.tst
--- a/test/jit.tst
+++ b/test/jit.tst
@@ -535,19 +535,21 @@
 %!   for j=1:2
 %!     a = a + b;
 %!   endfor
 %! endfor
 %! assert (a, 2000);
 %! assert (b, 1);
 %! assert (jit_failcnt, 0);
 
-%!xtest
+%!xtest <53615>
 %! ## FIXME: No support for functions with complex input prototypes
-%! ## testif HAVE_LLVM
+%! if (! __have_feature__ ("ENABLE_JIT"))
+%!   return;
+%! endif
 %! jit_failcnt (0);
 %! a = [1+1i 1+2i];
 %! b = 0;
 %! while (1)
 %!   b = a(1);
 %!   break;
 %! endwhile
 %! assert (b, a(1));
@@ -566,19 +568,21 @@
 %!   test_undef ();
 %! end_try_catch
 %! assert (strncmp (lasterr (), "'XXX' undefined near", 20));
 %! assert (jit_failcnt, 1);
 
 %!shared id
 %! id = @(x) x;
 
-%!xtest
+%!xtest <53615>
 %! ## FIXME: No support for functions with complex input prototypes
-%! ## testif HAVE_LLVM
+%! if (! __have_feature__ ("ENABLE_JIT"))
+%!   return;
+%! endif
 %! jit_failcnt (0);
 %! assert (id (1), 1);
 %! assert (id (1+1i), 1+1i);
 %! assert (id (1, 2), 1);
 %! assert (jit_failcnt, 0);
 
 # %!testif HAVE_LLVM
 # %! jit_failcnt (0);
diff --git a/test/mk-sparse-tst.sh b/test/mk-sparse-tst.sh
--- a/test/mk-sparse-tst.sh
+++ b/test/mk-sparse-tst.sh
@@ -327,17 +327,17 @@ EOF
 
 gen_sparsesparse_elementop_tests() {
     cat <<EOF
 %!assert (as==bs, sparse (af==bf))
 %!assert (as!=bs, sparse (af!=bf))
 %!assert (as+bs, sparse (af+bf))
 %!assert (as-bs, sparse (af-bf))
 %!assert (as.*bs, sparse (af.*bf))
-%!xtest assert (as./bs, sparse (af./bf), 100*eps)
+%!assert (as./bs, sparse (af./bf), 100*eps)
 %!test
 %! sv = as.^bs;
 %! fv = af.^bf;
 %! idx = find (af!=0);
 %! assert(sv(:)(idx), sparse (fv(:)(idx)), 100*eps);
 
 EOF
 }
