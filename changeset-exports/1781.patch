# HG changeset patch
# User jwe
# Date 822470943 0
#      Wed Jan 24 08:09:03 1996 +0000
# Node ID e090f89bf2f5f68fefc5062e91ecc59b1f663bc5
# Parent  6101360af70371ca6db5e867de2c40af15fb8277
[project @ 1996-01-24 08:04:14 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -183,25 +183,27 @@ public:
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
 
-  void qsort (int (*compare) (const void *, const void *))
+  Array<T>& qsort (int (*compare) (const void *, const void *))
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new ArrayRep (*rep);
 	}
 
       rep->qsort (compare);
+
+      return *this;
     }
 
 #ifdef HEAVYWEIGHT_INDEXING
   void set_max_indices (int mi) { max_indices = mi; }
 
   void clear_index (void);
 
   void set_index (const idx_vector& i);
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -69,17 +69,21 @@ public:
 
       return longest;
     }
 
   string& operator[] (int i) { return Array<string>::elem (i); }
 
   string operator[] (int i) const { return Array<string>::elem (i); }
 
-  void qsort (void) { Array<string>::qsort (str_vec_compare); }
+  string_vector& qsort (void)
+    {
+      Array<string>::qsort (str_vec_compare);
+      return *this;
+    }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -46,28 +46,28 @@ Free Software Foundation, Inc.
 
 #include <string>
 
 #include <strstream.h>
 
 #include "str-vec.h"
 
 #include "defun.h"
+#include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
 #include "file-ops.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathlen.h"
 #include "procstream.h"
 #include "pt-plot.h"
 #include "sysdep.h"
-#include "sysdir.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Non-zero means follow symbolic links that point to directories just
 // as if they are real directories.
 static int follow_symbolic_links = 1;
@@ -441,90 +441,42 @@ DEFUN ("pwd", Fpwd, Spwd, 01,
 DEFUN ("readdir", Freaddir, Sreaddir, 10,
   "readdir (NAME)\n\
 \n\
 Return an array of strings containing the list of all files in the
 named directory.  If sucessful, returns 0; otherwise an error message
 is printed.")
 {
   Octave_object retval;
-  charMatrix dirlist;
-  int status = 0;
 
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
-	{
-	  status = -1;
-	  gripe_wrong_type_arg ("readdir", args(0));
-	}
+	gripe_wrong_type_arg ("readdir", args(0));
       else
 	{
-	  string tmp = oct_tilde_expand (dirname);
-
-	  DIR *dir = opendir (tmp.c_str ());
+	  dir_entry dir (oct_tilde_expand (dirname));
 
 	  if (dir)
 	    {
-	      int count = 0;
-	      int max_len = 0;
-
-	      struct dirent *dir_entry;
-
-	      while ((dir_entry = readdir (dir)))
-		{
-		  count++;
-		  int len = strlen (dir_entry->d_name);
-		  if (len > max_len)
-		    max_len = len;
-		}
-
-	      rewinddir (dir);
-
-	      dirlist.resize (count, max_len, 0);
-
-	      while ((dir_entry = readdir (dir)))
-		{
-		  if (--count < 0)
-		    break;
-
-		  dirlist.insert (dir_entry->d_name, count, 0);
-		}
-
-#if defined (CLOSEDIR_VOID)
-	      closedir (dir);
-#else
-	      if (closedir (dir) < 0)
-		{
-		  status = -1;
-		  error ("%s", strerror (errno));
-		}
-#endif
-
-	      if (count != 0)
-		{
-		  status = -1;
-		  error ("readdir: failed reading directory");
-		}
+	      string_vector dirlist = dir.read ();
+	      retval(0) = dirlist.qsort ();
 	    }
 	  else
 	    {
-	      status = -1;
-	      error ("%s", strerror (errno));
+	      string msg = dir.error ();
+	      error ("%s", msg.c_str ());
 	    }
 	}
     }
   else
     print_usage ("readdir");
 
-  if (status == 0)
-    retval(0) = tree_constant (dirlist, 1);
-
   return retval;
 }
 
 // XXX FIXME XXX -- should probably also allow second arg to specify
 // mode.
 
 DEFUN ("mkdir", Fmkdir, Smkdir, 10,
   "mkdir (NAME)\n\
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -489,18 +489,17 @@ simple_help (void)
 
       str_llist_elt_type *dir;
       for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
 	{
 	  char *elt_dir = STR_LLIST (*dir);
 
 	  if (elt_dir)
 	    {
-	      int count;
-	      string_vector names = get_fcn_file_names (count, elt_dir, 0);
+	      string_vector names = get_fcn_file_names (elt_dir);
 
 	      output_buf << "\n*** function files in "
 		<< make_absolute (elt_dir, the_current_working_directory)
 		  << ":\n\n";
 
 	      if (names.length () > 0)
 		list_in_columns (output_buf, names);
 	    }
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -55,28 +55,28 @@ extern "C" int strncasecmp (const char*,
 #endif
 
 #include "SLStack.h"
 
 #include "oct-cmplx.h"
 #include "str-vec.h"
 
 #include "defun.h"
+#include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "sysdep.h"
-#include "sysdir.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // Top level context (?)
 extern jmp_buf toplevel;
@@ -310,68 +310,64 @@ keyword_almost_match (const char **std, 
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
 string_vector
-get_fcn_file_names (int& num, const char *dir, int no_suffix)
+get_fcn_file_names (const string& name, int no_suffix)
 {
-  static int num_max = 256;
-  string_vector retval (num_max);
-  int i = 0;
+  string_vector retval;
+
+  dir_entry dir (name);
+
+  if (dir)
+    {
+      string_vector tmp = dir.read ();
 
-  DIR *dirp = opendir (dir);
-  if (dirp)
-    {
-      struct dirent *entry;
-      while ((entry = readdir (dirp)) != 0)
+      int max_len = tmp.length ();
+
+      retval.resize (max_len);
+
+      int k = 0;
+      int i;
+      for (i = 0; i < max_len; i++)
 	{
-	  int len = NLENGTH (entry);
+	  string entry = tmp[i];
+
+	  int len = entry.length ();
+
 #if defined (WITH_DYNAMIC_LINKING)
 	  if ((len > 2
-	       && entry->d_name[len-2] == '.'
-	       && entry->d_name[len-1] == 'm')
+	       && entry[len-2] == '.' && entry[len-1] == 'm')
 	      || (len > 4
-		  && entry->d_name[len-4] == '.'
-		  && entry->d_name[len-3] == 'o'
-		  && entry->d_name[len-2] == 'c'
-		  && entry->d_name[len-1] == 't'))
+		  && entry[len-4] == '.' && entry[len-3] == 'o'
+		  && entry[len-2] == 'c' && entry[len-1] == 't'))
 #else
 	  if (len > 2
-	      && entry->d_name[len-2] == '.'
-	      && entry->d_name[len-1] == 'm')
+	      && entry[len-2] == '.' && entry[len-1] == 'm')
 #endif
 	    {
-	      retval[i] = entry->d_name;
 	      if (no_suffix)
 		{
-		  if (retval[i][len-1] == 'm')
-		    retval[i][len-2] = '\0';
+		  if (entry[len-1] == 'm')
+		    entry.resize (len-2);
 		  else
-		    retval[i][len-4] = '\0';
+		    entry.resize (len-4);
 		}
 
-	      i++;
-
-	      if (i == num_max - 1)
-		{
-		  num_max += 256;
-		  retval.resize (num_max);
-		}
+	      retval[k++] = entry;
 	    }
 	}
-      closedir (dirp);
+
+      retval.resize (i);
     }
 
-  num = i;
-  retval.resize (num);
-
   return retval;
 }
 
 string_vector
 get_fcn_file_names (int& num, int no_suffix)
 {
   static int num_max = 1024;
   string_vector retval (num_max);
@@ -385,23 +381,23 @@ get_fcn_file_names (int& num, int no_suf
 
       str_llist_elt_type *dir;
       for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
 	{
 	  char *elt_dir = STR_LLIST (*dir);
 
 	  if (elt_dir)
 	    {
-	      int tmp_num;
-	      string_vector names
-		= get_fcn_file_names (tmp_num, elt_dir, no_suffix);
+	      string_vector names = get_fcn_file_names (elt_dir, no_suffix);
+
+	      int tmp_num = names.length ();
 
-	      if (i + tmp_num >= num_max - 1)
+	      if (i + tmp_num > num_max)
 		{
-		  num_max += 1024;
+		  num_max += tmp_num;
 		  retval.resize (num_max);
 		}
 
 	      int k = 0;
 	      while (k < tmp_num)
 		retval[i++] = names[k++];
 	    }
 	}
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -56,20 +56,19 @@ extern "C" void jump_to_top_level (void)
 extern int almost_match (const string& std, const string& s,
 			 int min_match_len = 1, int case_sens = 1);
 
 extern int
 keyword_almost_match (const char **std, int *min_len,
 		      const string& s, int min_toks_to_match,
 		      int max_toks);
 
-extern string_vector get_fcn_file_names (int& ffl_len, const char *dir,
-					 int no_suffix); 
+extern string_vector get_fcn_file_names (const string&, int = 0);
 
-extern string_vector get_fcn_file_names (int& ffl_len, int no_suffix);
+extern string_vector get_fcn_file_names (int& ffl_len, int = 0);
 
 extern int NINT (double x);
 extern double D_NINT (double x);
 
 extern string_vector make_argv (const Octave_object&, const string&);
 
 extern int empty_arg (const char *name, int nr, int nc);
 
