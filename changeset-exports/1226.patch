# HG changeset patch
# User jwe
# Date 797474492 0
#      Mon Apr 10 00:41:32 1995 +0000
# Node ID 2457d4ba0691498d47d85a26aefa0966dfb05929
# Parent  b013cff157461b8189e61c5aadd1376199b3a893
[project @ 1995-04-10 00:41:14 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -34,16 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include <ctype.h>
 
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "unwind-prot.h"
 #include "load-save.h"
+#include "sysdep.h"
 #include "symtab.h"
 #include "pager.h"
 #include "error.h"
 #include "gripes.h"
 #include "defun.h"
 #include "utils.h"
 #include "help.h"
 
@@ -83,52 +84,30 @@ LOSE! LOSE!
 enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_BINARY,
     LS_UNKNOWN,
   };
 
-enum floating_point_format
-  {
-    LS_IEEE_LITTLE,
-    LS_IEEE_BIG,
-    LS_VAX_D,
-    LS_VAX_G,
-    LS_CRAY,
-    LS_UNKNOWN_FLT_FMT,
-  };
-
 // Not all of the following are currently used.
 
 enum save_type
   {
     LS_U_CHAR,
     LS_U_SHORT,
     LS_U_INT,
     LS_CHAR,
     LS_SHORT,
     LS_INT,
     LS_FLOAT,
     LS_DOUBLE,
   };
 
-#if defined (IEEE_LITTLE_ENDIAN)
-#define NATIVE_FLOAT_FORMAT LS_IEEE_LITTLE
-#elif defined (IEEE_BIG_ENDIAN)
-#define NATIVE_FLOAT_FORMAT LS_IEEE_BIG
-#elif defined (VAX_D_FLOAT)
-#define NATIVE_FLOAT_FORMAT LS_VAX_D
-#elif defined (VAX_G_FLOAT)
-#define NATIVE_FLOAT_FORMAT LS_VAX_G
-#else
-LOSE! LOSE!
-#endif
-
 #define swap_1_bytes(x,y)
 
 #define LS_DO_READ(TYPE,swap,data,size,len,stream) \
   do \
     { \
       volatile TYPE *ptr = (TYPE *) data; \
       stream.read ((TYPE *) ptr, size * len); \
       if (swap) \
@@ -225,18 +204,16 @@ swap_8_bytes (char *t, int len)
       ptr += 8;
     }
 }
 
 // XXX FIXME XXX -- assumes sizeof (Complex) == 8
 // XXX FIXME XXX -- assumes sizeof (double) == 8
 // XXX FIXME XXX -- assumes sizeof (float) == 4
 
-#if defined (IEEE_LITTLE_ENDIAN)
-
 static void
 IEEE_big_double_to_IEEE_little_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_double_to_IEEE_little_double (double *d, int len)
@@ -275,18 +252,16 @@ VAX_G_float_to_IEEE_little_float (float 
 }
 
 static void
 Cray_to_IEEE_little_float (float *d, int len)
 {
   gripe_data_conversion ("Cray", "IEEE little endian format");
 }
 
-#elif defined (IEEE_BIG_ENDIAN)
-
 static void
 IEEE_little_double_to_IEEE_big_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
 VAX_D_double_to_IEEE_big_double (double *d, int len)
@@ -325,18 +300,16 @@ VAX_G_float_to_IEEE_big_float (float *d,
 }
 
 static void
 Cray_to_IEEE_big_float (float *d, int len)
 {
   gripe_data_conversion ("Cray", "IEEE big endian format");
 }
 
-#elif defined (VAX_D_FLOAT)
-
 static void
 IEEE_little_double_to_VAX_D_double (double *d, int len)
 {
   gripe_data_conversion ("IEEE little endian", "VAX D");
 }
 
 static void
 IEEE_big_double_to_VAX_D_double (double *d, int len)
@@ -375,18 +348,16 @@ VAX_G_float_to_VAX_D_float (float *d, in
 }
 
 static void
 Cray_to_VAX_D_float (float *d, int len)
 {
   gripe_data_conversion ("Cray", "VAX D");
 }
 
-#elif defined (VAX_G_FLOAT)
-
 static void
 IEEE_little_double_to_VAX_G_double (double *d, int len)
 {
   gripe_data_conversion ("IEEE little endian", "VAX G");
 }
 
 static void
 IEEE_big_double_to_VAX_G_double (double *d, int len)
@@ -425,215 +396,251 @@ VAX_D_float_to_VAX_G_float (float *d, in
 }
 
 static void
 Cray_to_VAX_G_float (float *d, int len)
 {
   gripe_data_conversion ("VAX G float", "VAX G");
 }
 
-#endif
-
 static void
 do_double_format_conversion (double *data, int len,
 			     floating_point_format fmt)
 {
-  switch (fmt)
+  switch (native_float_format)
     {
-#if defined (IEEE_LITTLE_ENDIAN)
-
-    case LS_IEEE_LITTLE:
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_double_to_IEEE_little_double (data, len);
-      break;
-
-    case LS_VAX_D:
-      VAX_D_double_to_IEEE_little_double (data, len);
-      break;
-
-    case LS_VAX_G:
-      VAX_G_double_to_IEEE_little_double (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_IEEE_little_double (data, len);
-      break;
-
-#elif defined (IEEE_BIG_ENDIAN)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_double_to_IEEE_big_double (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      break;
-
-    case LS_VAX_D:
-      VAX_D_double_to_IEEE_big_double (data, len);
-      break;
-
-    case LS_VAX_G:
-      VAX_G_double_to_IEEE_big_double (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_IEEE_big_double (data, len);
-      break;
-
-#elif defined (VAX_D_FLOAT)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_double_to_VAX_D_double (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_double_to_VAX_D_double (data, len);
-      break;
-
-    case LS_VAX_D:
-      break;
-
-    case LS_VAX_G:
-      VAX_G_double_to_VAX_D_double (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_VAX_D_double (data, len);
-      break;
-
-#elif defined (VAX_G_FLOAT)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_double_to_VAX_G_double (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_double_to_VAX_G_double (data, len);
-      break;
-
-    case LS_VAX_D:
-      VAX_D_double_to_VAX_G_double (data, len);
-      break;
-
-    case LS_VAX_G:
-      break;
-
-    case LS_CRAY:
-      Cray_to_VAX_G_double (data, len);
-      break;
-
-#else
-LOSE! LOSE!
-#endif
+    case OCTAVE_IEEE_LITTLE:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_double_to_IEEE_little_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_double_to_IEEE_little_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_double_to_IEEE_little_double (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_IEEE_little_double (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_IEEE_BIG:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_double_to_IEEE_big_double (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_double_to_IEEE_big_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_double_to_IEEE_big_double (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_IEEE_big_double (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_VAX_D:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_double_to_VAX_D_double (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_double_to_VAX_D_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_double_to_VAX_D_double (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_VAX_D_double (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_VAX_G:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_double_to_VAX_G_double (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_double_to_VAX_G_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_double_to_VAX_G_double (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_VAX_G_double (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
 
     default:
-      gripe_unrecognized_float_fmt ();
-      break;
+      panic_impossible ();
     }
 }
 
 static void
 do_float_format_conversion (float *data, int len,
 			    floating_point_format fmt)
 {
-  switch (fmt)
+  switch (native_float_format)
     {
-#if defined (IEEE_LITTLE_ENDIAN)
-
-    case LS_IEEE_LITTLE:
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_float_to_IEEE_little_float (data, len);
-      break;
-
-    case LS_VAX_D:
-      VAX_D_float_to_IEEE_little_float (data, len);
-      break;
-
-    case LS_VAX_G:
-      VAX_G_float_to_IEEE_little_float (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_IEEE_little_float (data, len);
-      break;
-
-#elif defined (IEEE_BIG_ENDIAN)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_float_to_IEEE_big_float (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      break;
-
-    case LS_VAX_D:
-      VAX_D_float_to_IEEE_big_float (data, len);
-      break;
-
-    case LS_VAX_G:
-      VAX_G_float_to_IEEE_big_float (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_IEEE_big_float (data, len);
-      break;
-
-#elif defined (VAX_D_FLOAT)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_float_to_VAX_D_float (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_float_to_VAX_D_float (data, len);
-      break;
-
-    case LS_VAX_D:
-      break;
-
-    case LS_VAX_G:
-      VAX_G_float_to_VAX_D_float (data, len);
-      break;
-
-    case LS_CRAY:
-      Cray_to_VAX_D_float (data, len);
-      break;
-
-#elif defined (VAX_G_FLOAT)
-
-    case LS_IEEE_LITTLE:
-      IEEE_little_float_to_VAX_G_float (data, len);
-      break;
-
-    case LS_IEEE_BIG:
-      IEEE_big_float_to_VAX_G_float (data, len);
-      break;
-
-    case LS_VAX_D:
-      VAX_D_float_to_VAX_G_float (data, len);
-      break;
-
-    case LS_VAX_G:
-      break;
-
-    case LS_CRAY:
-      Cray_to_VAX_G_float (data, len);
-      break;
-
-#else
-LOSE! LOSE!
-#endif
+    case OCTAVE_IEEE_LITTLE:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_float_to_IEEE_little_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_float_to_IEEE_little_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_float_to_IEEE_little_float (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_IEEE_little_float (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_IEEE_BIG:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_float_to_IEEE_big_float (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_float_to_IEEE_big_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_float_to_IEEE_big_float (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_IEEE_big_float (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_VAX_D:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_float_to_VAX_D_float (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_float_to_VAX_D_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  break;
+
+	case OCTAVE_VAX_G:
+	  VAX_G_float_to_VAX_D_float (data, len);
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_VAX_D_float (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
+
+    case OCTAVE_VAX_G:
+      switch (fmt)
+	{
+	case OCTAVE_IEEE_LITTLE:
+	  IEEE_little_float_to_VAX_G_float (data, len);
+	  break;
+
+	case OCTAVE_IEEE_BIG:
+	  IEEE_big_float_to_VAX_G_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_D:
+	  VAX_D_float_to_VAX_G_float (data, len);
+	  break;
+
+	case OCTAVE_VAX_G:
+	  break;
+
+	case OCTAVE_CRAY:
+	  Cray_to_VAX_G_float (data, len);
+	  break;
+
+	default:
+	  gripe_unrecognized_float_fmt ();
+	  break;
+	}
 
     default:
-      gripe_unrecognized_float_fmt ();
-      break;
+      panic_impossible ();
     }
 }
 
 static void
 read_doubles (istream& is, double *data, save_type type, int len,
 	      int swap, floating_point_format fmt)
 {
   switch (type)
@@ -1712,42 +1719,42 @@ read_mat_file_header (istream& is, int& 
 }
 
 // We don't just use a cast here, because we need to be able to detect
 // possible errors.
 
 static floating_point_format
 get_floating_point_format (int mach)
 {
-  floating_point_format flt_fmt = LS_UNKNOWN_FLT_FMT;
+  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
 
   switch (mach)
     {
     case 0:
-      flt_fmt = LS_IEEE_LITTLE;
+      flt_fmt = OCTAVE_IEEE_LITTLE;
       break;
 
     case 1:
-      flt_fmt = LS_IEEE_BIG;
+      flt_fmt = OCTAVE_IEEE_BIG;
       break;
 
     case 2:
-      flt_fmt = LS_VAX_D;
+      flt_fmt = OCTAVE_VAX_D;
       break;
 
     case 3:
-      flt_fmt = LS_VAX_G;
+      flt_fmt = OCTAVE_VAX_G;
       break;
 
     case 4:
-      flt_fmt = LS_CRAY;
+      flt_fmt = OCTAVE_CRAY;
       break;
 
     default:
-      flt_fmt = LS_UNKNOWN_FLT_FMT;
+      flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
       break;
     }
 
   return flt_fmt;
 }
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.
@@ -1763,17 +1770,17 @@ static char *
 read_mat_binary_data (istream& is, const char *filename,
 		      tree_constant& tc)
 {
 // These are initialized here instead of closer to where they are
 // first used to avoid errors from gcc about goto crossing
 // initialization of variable.
 
   Matrix re;
-  floating_point_format flt_fmt = LS_UNKNOWN_FLT_FMT;
+  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
   char *name = 0;
   int swap = 0, type = 0, prec = 0, mach = 0, dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
@@ -1785,17 +1792,17 @@ read_mat_binary_data (istream& is, const
 
   type = mopt % 10; // Full, sparse, etc.
   mopt /= 10;       // Eliminate first digit.
   prec = mopt % 10; // double, float, int, etc.
   mopt /= 100;      // Skip unused third digit too.
   mach = mopt % 10; // IEEE, VAX, etc.
 
   flt_fmt = get_floating_point_format (mach);
-  if (flt_fmt == LS_UNKNOWN_FLT_FMT)
+  if (flt_fmt == OCTAVE_UNKNOWN_FLT_FMT)
     {
       error ("load: unrecognized binary format!");
       return 0;
     }
 
   if (type != 0 && type != 1)
     {
       error ("load: can't read sparse matrices");
@@ -1905,17 +1912,17 @@ read_binary_file_header (istream& is, in
 	error ("load: can't read binary file");
       return -1;
     }
 	
   char tmp = 0;
   is.read (&tmp, 1);
 
   flt_fmt = get_floating_point_format (tmp);
-  if (flt_fmt == LS_UNKNOWN_FLT_FMT)
+  if (flt_fmt == OCTAVE_UNKNOWN_FLT_FMT)
     {
       if (! quiet)
         error ("load: unrecognized binary format!");
       return -1;
     }
 
   return 0;
 }
@@ -1929,17 +1936,17 @@ get_file_format (const char *fname, cons
 
   if (! file)
     {
       error ("load: couldn't open input file `%s'", orig_fname);
       return retval;
     }
 
   int swap;
-  floating_point_format flt_fmt = LS_UNKNOWN_FLT_FMT;
+  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
 
   if (read_binary_file_header (file, swap, flt_fmt, 1) == 0)
     retval = LS_BINARY;
   else
     {
       file.seekg (0, ios::beg);
 
       FOUR_BYTE_INT mopt, nr, nc, imag, len;
@@ -2153,17 +2160,17 @@ found in the file will be replaced with 
     {
       error ("load: you must specify a single file to read");
       DELETE_ARGV;
       return retval;
     }
 
   char *orig_fname = *argv;
 
-  floating_point_format flt_fmt = LS_UNKNOWN_FLT_FMT;
+  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
 
   int swap = 0;
 
   if (strcmp (*argv, "-") == 0)
     {
       argc--;
       argv++;
 
@@ -2440,17 +2447,17 @@ save_binary_data (ostream& os, const tre
 static int
 save_mat_binary_data (ostream& os, const tree_constant& tc, char *name) 
 {
   int fail = 0;
 
   FOUR_BYTE_INT mopt = 0;
 
   mopt += tc.is_string () ? 1 : 0;
-  mopt += 1000 * get_floating_point_format (NATIVE_FLOAT_FORMAT);
+  mopt += 1000 * get_floating_point_format (native_float_format);
 
   os.write (&mopt, 4);
   
   FOUR_BYTE_INT nr = tc.rows ();
   os.write (&nr, 4);
 
   FOUR_BYTE_INT nc = tc.columns ();
   os.write (&nc, 4);
@@ -2840,17 +2847,17 @@ write_binary_header (ostream& stream, lo
   if (format == LS_BINARY)
     {
 #if defined (WORDS_BIGENDIAN)
       stream << "Octave-1-B";
 #else
       stream << "Octave-1-L";
 #endif
 
-      char tmp = (char) NATIVE_FLOAT_FORMAT;
+      char tmp = (char) native_float_format;
       stream.write (&tmp, 1);
     }
 }
 
 static void
 save_vars (char **argv, int argc, ostream& os, int save_builtins,
 	   load_save_format fmt, int save_as_floats)
 {
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -47,16 +47,17 @@ Software Foundation, Inc.
 #include "octave.h"
 #include "help.h"
 #include "input.h"
 #include "utils.h"
 #include "oct-obj.h"
 #include "error.h"
 #include "sysdep.h"
 #include "defun.h"
+#include "f77-uscore.h"
 
 extern "C"
 {
 #include <readline/readline.h>
 
 extern char *term_clrpag;
 extern void _rl_output_character_function ();
 
@@ -64,28 +65,33 @@ extern void _rl_output_character_functio
 #include <termios.h>
 #elif defined (HAVE_TERMIO_H)
 #include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #include <sgtty.h>
 #else
 LOSE! LOSE!
 #endif
+
+extern double F77_FCN (d1mach) (const int&);
 }
 
 #ifndef STDIN_FILENO
 #define STDIN_FILENO 1
 #endif
 
 // Octave's idea of infinity.
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
+// The floating point format on this system.
+floating_point_format native_float_format = OCTAVE_UNKNOWN_FLT_FMT;
+
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #ifdef NeXT
 extern "C"
 {
   typedef void (*_cplus_fcn_int) (int);
@@ -105,16 +111,49 @@ malloc_handler (int code)
 
 static void
 NeXT_init (void)
 {
   malloc_error (malloc_handler);
 }
 #endif
 
+union equiv
+{
+  double d;
+  int i[2];
+};
+
+struct float_params
+{
+  floating_point_format fp_fmt;
+  equiv fp_par[4];
+};
+
+#define INIT_FLT_PAR(fp, fmt, sm1, sm2, lrg1, lrg2, rt1, rt2, dv1, dv2) \
+  do \
+    { \
+      fp.fp_fmt = (fmt); \
+      fp.fp_par[0].i[0] = (sm1);  fp.fp_par[0].i[1] = (sm2); \
+      fp.fp_par[1].i[0] = (lrg1); fp.fp_par[1].i[1] = (lrg2); \
+      fp.fp_par[2].i[0] = (rt1);  fp.fp_par[2].i[1] = (rt2); \
+      fp.fp_par[3].i[0] = (dv1);  fp.fp_par[3].i[1] = (dv2); \
+    } \
+  while (0)
+
+static int
+equiv_compare (const equiv *std, const equiv *v, int len)
+{
+  int i;
+  for (i = 0; i < len; i++)
+    if (v[i].i[0] != std[i].i[0] || v[i].i[1] != std[i].i[1])
+      return 0;
+  return 1;
+}
+
 static void
 octave_ieee_init (void)
 {
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 
 // Some version of gcc on some old version of Linux used to crash when
 // trying to make Inf and NaN.
 
@@ -152,16 +191,71 @@ octave_ieee_init (void)
 
 // This is sort of cheesy, but what can we do, other than blowing it
 // off completely, or writing an entire IEEE emulation package?
 
   octave_Inf = DBL_MAX;
   octave_NaN = DBL_MAX;
 
 #endif
+
+  float_params fp[5];
+
+  INIT_FLT_PAR (fp[0], OCTAVE_IEEE_BIG,
+		   1048576,  0,
+		2146435071, -1,
+		1017118720,  0,
+		1018167296,  0);
+
+  INIT_FLT_PAR (fp[1], OCTAVE_IEEE_LITTLE,
+		 0,    1048576,
+		-1, 2146435071,
+		 0, 1017118720,
+		 0, 1018167296);
+
+  INIT_FLT_PAR (fp[2], OCTAVE_VAX_D,
+		   128,  0,
+		-32769, -1,
+		  9344,  0,
+		  9344,  0);
+
+  INIT_FLT_PAR (fp[3], OCTAVE_VAX_G,
+		    16,  0,
+		-32769, -1,
+		 15552,  0,
+		 15552,  0);
+
+  INIT_FLT_PAR (fp[4], OCTAVE_UNKNOWN_FLT_FMT,
+		0, 0,
+		0, 0,
+		0, 0,
+		0, 0);
+
+  equiv mach_fp_par[4];
+
+  mach_fp_par[0].d = F77_FCN (d1mach) (1);
+  mach_fp_par[1].d = F77_FCN (d1mach) (2);
+  mach_fp_par[2].d = F77_FCN (d1mach) (3);
+  mach_fp_par[3].d = F77_FCN (d1mach) (4);
+
+  int i = 0;
+  do
+    {
+      if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
+	{
+	  native_float_format = fp[i].fp_fmt;
+	  break;
+	}
+    }
+  while (fp[++i].fp_fmt != OCTAVE_UNKNOWN_FLT_FMT);
+
+  if (native_float_format == OCTAVE_UNKNOWN_FLT_FMT)
+    panic ("unrecognized floating point format!");
+     
+  cerr << native_float_format << "\n";
 }
 
 #if defined (EXCEPTION_IN_MATH)
 extern "C"
 {
 int
 matherr (struct exception *x)
 {
@@ -510,25 +604,18 @@ DEFUN ("pause", Fpause, Spause, 1, 1,
 }
 
 // XXX FIXME XXX -- maybe this should only return 1 if IEEE floating
 // point functions really work.
 
 DEFUN ("isieee", Fisieee, Sisieee, 1, 1,
   "isieee (): return 1 if host uses IEEE floating point")
 {
-  Octave_object retval;
-
-#if defined (IEEE_BIG_ENDIAN) || defined (IEEE_LITTLE_ENDIAN)
-  retval = 1.0;
-#else
-  retval = 0.0;
-#endif
-
-  return retval;
+  return (double) (native_float_format == OCTAVE_IEEE_LITTLE
+		   || native_float_format == OCTAVE_IEEE_BIG);
 }
 
 #if !defined (HAVE_GETHOSTNAME) && defined (HAVE_SYS_UTSNAME_H)
 extern "C"
 {
 #include <sys/utsname.h>
 int
 gethostname (char *name, int namelen)
