# HG changeset patch
# User jwe
# Date 1172861001 0
#      Fri Mar 02 18:43:21 2007 +0000
# Node ID 41c1deed5613edd4bc007db303f0f0ce2407ee42
# Parent  625b31d2c67de007ed032dad86ccc2f65b7a26bb
[project @ 2007-03-02 18:43:20 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-02  John W. Eaton  <jwe@octave.org>
+
+	* str-vec.h (string_vector::empty): Return bool, not int.
+
 2007-03-01  David Bateman  <dbateman@free.fr>
 
         * md5.h, md5.c: New files from libmd5-rfc sourceforge project for
         an independent implementation of RFC1321.
         * oct-md5.h, oct-md5: New files for treating std::string class
         with MD5.
         * Makefile.in (INCLUDES): Add md5.h and oct-md5.h
         (LIBOCTAVE_CXX_SOURCES): Add oct-md5.cc
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -57,17 +57,17 @@ public:
     if (this != &s)
       Array<std::string>::operator = (s);
 
     return *this;
   }
 
   ~string_vector (void) { }
 
-  int empty (void) const { return length () == 0; }
+  bool empty (void) const { return length () == 0; }
 
   octave_idx_type max_length (void) const
   {
     octave_idx_type n = length ();
     octave_idx_type longest = 0;
 
     for (octave_idx_type i = 0; i < n; i++)
       {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-03-02  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (Fautoload): Undo previous change.
+
+	* utils.cc (make_absolute): Make copy of arg before 
+
 2007-03-01  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-mat.h	(octave_base_matrix::octave_base_matrix (const MT&), 
 	(octave_base_matrix::octave_base_matrix (const MT&, const MatrixType&)):
 	Use common definition with default argument value.
 	* ov-base-scalar.h (octave_base_scalar<T>::typ): New data member.
 	Initialize in constructors.
 	(octave_base_scalar<T>::matrix_type): New funtions.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3536,23 +3536,17 @@ currently autoloaded functions.\n\
 
       retval = m;
     }
   else if (nargin == 2)
     {
       string_vector argv = args.make_argv ("autoload");
 
       if (! error_state)
-        {
-	  if (autoload_map.find (argv[1]) != autoload_map.end ())
-	    warning ("autoload: not replacing existing entry for %s => %s",
-		     argv[1].c_str (), argv[2].c_str ());
-	  else
-	    autoload_map[argv[1]] = argv[2];
-	}
+      	autoload_map[argv[1]] = argv[2];
     }
   else
     print_usage ();
 
   return retval;
 }
 
 void
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -254,33 +254,35 @@ search_path_for_file (const std::string&
 
 string_vector
 search_path_for_all_files (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
 
   string_vector sv = p.find_all_first_of (names);
 
-  int len = sv.length ();
+  octave_idx_type len = sv.length ();
 
-  for (int i = 0; i < len; i++)
+  for (octave_idx_type i = 0; i < len; i++)
     sv[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
 
   return sv;
 }
 
 static string_vector
 make_absolute (const string_vector& sv)
 {
-  int len = sv.length ();
+  octave_idx_type len = sv.length ();
+
+  string_vector retval (len);
 
-  for (int i = 0; i < len; i++)
-    sv[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
-
-  return sv;
+  for (octave_idx_type i = 0; i < len; i++)
+    retval[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
+ 
+  return retval;
 }
 
 DEFUN (file_in_loadpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
 Return the absolute name of @var{file} if it can be found in\n\
