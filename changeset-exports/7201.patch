# HG changeset patch
# User jwe
# Date 1196187828 0
#      Tue Nov 27 18:23:48 2007 +0000
# Node ID 76341ffda11e071405bce761e436bbbfa03f99fa
# Parent  12a12ef1f1bc00204def0582d13f197f186eb460
[project @ 2007-11-27 18:23:48 by jwe]

diff --git a/scripts/linear-algebra/housh.m b/scripts/linear-algebra/housh.m
--- a/scripts/linear-algebra/housh.m
+++ b/scripts/linear-algebra/housh.m
@@ -14,25 +14,47 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{housv}, @var{beta}, @var{zer}] =} housh (@var{x}, @var{j}, @var{z})
-## Computes householder reflection vector housv to reflect x to be
-## jth column of identity, i.e., (I - beta*housv*housv')x =e(j)
-## inputs
-##   x: vector
-##   j: index into vector
-##   z: threshold for zero  (usually should be the number 0)
-## outputs: (see Golub and Van Loan)
-##   beta: If beta = 0, then no reflection need be applied (zer set to 0)
-##   housv: householder vector
+## Compute Householder reflection vector @var{housv} to reflect @var{x}
+## to be the jth column of identity, i.e.,
+##
+## @example
+## @group
+## (I - beta*housv*housv')x =  norm(x)*e(j) if x(1) < 0,
+## (I - beta*housv*housv')x = -norm(x)*e(j) if x(1) >= 0
+## @end group
+## @end example
+##
+## @noindent
+## Inputs
+##
+## @table @var
+## @item x
+## vector
+## @item j
+## index into vector
+## @item z
+## threshold for zero  (usually should be the number 0)
+## @end table
+##
+## @noindent
+## Outputs (see Golub and Van Loan):
+##
+## @table @var
+## @item beta
+## If beta = 0, then no reflection need be applied (zer set to 0)
+## @item housv
+## householder vector
+## @end table
 ## @end deftypefn
 
 ## Author: A. S. Hodel
 ## Created: August 1995
 
 function [housv, beta, zer] = housh (x, j, z)
 
   if (nargin != 3)
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -68,17 +68,17 @@ function [Uret, H, nu] = krylov (A, V, k
     eps1 = defeps;
   endif
 
   na = issquare (A);
   if (! na)
     error ("A(%d x %d) must be square", rows (A), columns (A));
   endif
 
-  [m, kb] = size(V);
+  [m, kb] = size (V);
   if (m != na)
     error("A(%d x %d), V(%d x %d): argument dimensions do not match",
 	  na, na, m, kb)
   endif
 
   if (! isscalar (k))
     error ("krylov: third argument must be a scalar integer");
   endif
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -360,17 +360,16 @@ public:
 	  return retval;
 	}
     }
 
   double double_value (bool = false) const { return scalar.double_value (); }
 
   double scalar_value (bool = false) const { return scalar.double_value (); }
 
-
   Matrix
   matrix_value (bool = false) const
     {
       Matrix retval (1, 1);
       retval(0,0) = scalar.double_value ();
       return retval;
     }
 
