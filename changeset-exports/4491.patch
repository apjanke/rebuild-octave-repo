# HG changeset patch
# User jwe
# Date 1062104481 0
#      Thu Aug 28 21:01:21 2003 +0000
# Node ID 96a25f032846a493eba9416149fca7ecb8f0e520
# Parent  1aed172ab84a8e758c323f5dde2cb85fe5bb10e0
[project @ 2003-08-28 21:01:21 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2003-08-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* polynomial/polyfit.m: Avoid calling flipud.
+	From Pascal A. Dupuis <Pascal.Dupuis@esat.kuleuven.ac.be>.
+	Return structure as second output value for improved Matlab
+	compatibility.
+
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/cond.m: Behave as though old built-in variable
 	propagate_empty_matrices is always 1.  Also handle empty matrices
 	with one non-zero dimension.
 
 	* miscellaneous/dump_prefs.m: Add warn_separator_insert and
 	warn_single_quote_string to the list.
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -13,44 +13,56 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{p}, @var{yf}] =} polyfit (@var{x}, @var{y}, @var{n})
+## @deftypefn {Function File} {[@var{p}, @var{s}] =} polyfit (@var{x}, @var{y}, @var{n})
 ## Return the coefficients of a polynomial @var{p}(@var{x}) of degree
 ## @var{n} that minimizes
 ## @iftex
 ## @tex
 ## $$
 ## \sum_{i=1}^N (p(x_i) - y_i)^2
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## @code{sumsq (p(x(i)) - y(i))},
 ## @end ifinfo
 ##  to best fit the data in the least squares sense.
 ##
-## The polynomial coefficients are returned in a row vector if @var{x}
-## and @var{y} are both row vectors; otherwise, they are returned in a
-## column vector.
+## The polynomial coefficients are returned in a row vector.
+##
+## If two output arguments are requested, the second is a structure
+## containing the following fields:
 ##
-## If two output arguments are requested, the second contains the values of
-## the polynomial for each value of @var{x}.
+## @table @code
+## @item R
+## The Cholesky factor of the Vandermonde matrix used to compute the
+## polynomial coefficients.
+## @item X
+## The Vandermonde matrix used to compute the polynomial coefficients.
+## @item df
+## The degrees of freedom.
+## @item normr
+## The norm of the residuals.
+## @item yf
+## The values of the polynomial for each value of @var{x}.
+## @end table
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
 
-function [p, yf] = polyfit (x, y, n)
+function [p, s, mu] = polyfit (x, y, n)
 
 
   if (nargin != 3)
     usage ("polyfit (x, y, n)");
   endif
 
   if (! (isvector (x) && isvector (y) && size (x) == size (y)))
     error ("polyfit: x and y must be vectors of the same size");
@@ -61,27 +73,30 @@ function [p, yf] = polyfit (x, y, n)
   endif
 
   y_is_row_vector = (rows (y) == 1);
 
   l = length (x);
   x = reshape (x, l, 1);
   y = reshape (y, l, 1);
 
-  X = (x * ones (1, n+1)) .^ (ones (l, 1) * (0 : n));
+  X = (x * ones (1, n+1)) .^ (ones (l, 1) * (n : -1 : 0));
 
   p = X \ y;
 
-  if (nargout == 2)
-    yf = X * p;
+  if (nargout > 1)
+
+    yf = X*p;
 
     if (y_is_row_vector)
-      yf = yf.';
+      s.yf = yf.';
+    else
+      s.yf = yf;
     endif
-  endif
 
-  p = flipud (p);
+    [s.R, dummy] = chol (X'*X);
+    s.X = X;
+    s.df = l - n - 1;
+    s.normr = norm (yf - y);
 
-  if (y_is_row_vector && rows (x) == 1)
-    p = p';
   endif
 
 endfunction
