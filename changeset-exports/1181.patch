# HG changeset patch
# User jwe
# Date 796434988 0
#      Tue Mar 28 23:56:28 1995 +0000
# Node ID b2b7c5264ac221a5e734a1afc447b2cc702345cb
# Parent  0a9c94ee69e8ee30f9078a489ccd7df57e97c836
[project @ 1995-03-28 23:51:50 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -247,32 +247,17 @@ file_io_get_file (const tree_constant& a
 	}
       else
 	error ("%s: invalid file specifier", warn_for);
     }
 
   return p;
 }
 
-DEFUN ("fclose", Ffclose, Sfclose, 1, 1,
-  "fclose (FILENAME or FILENUM): close a file")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 1)
-    print_usage ("fclose");
-  else
-    retval = fclose_internal (args);
-
-  return retval;
-}
-
-Octave_object
+static Octave_object
 fclose_internal (const Octave_object& args)
 {
   Octave_object retval;
 
   Pix p = return_valid_file (args(0));
 
   if (! p)
     return retval;
@@ -294,32 +279,32 @@ fclose_internal (const Octave_object& ar
     {
       error ("fclose: error on closing file");
       retval(0) = 0.0; // failed
     }
 
   return retval;
 }
 
-DEFUN ("fflush", Ffflush, Sfflush, 1, 1,
-  "fflush (FILENAME or FILENUM): flush buffered data to output file")
+DEFUN ("fclose", Ffclose, Sfclose, 1, 1,
+  "fclose (FILENAME or FILENUM): close a file")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
-    print_usage ("fflush");
+    print_usage ("fclose");
   else
-    retval = fflush_internal (args);
+    retval = fclose_internal (args);
 
   return retval;
 }
 
-Octave_object
+static Octave_object
 fflush_internal (const Octave_object& args)
 {
   Octave_object retval;
 
   Pix p = return_valid_file (args(0));
 
   if (! p)
     return retval;
@@ -345,49 +330,47 @@ fflush_internal (const Octave_object& ar
     {
       error ("fflush: write error");
       retval(0) = 0.0; // failed
     }
 
   return retval;
 }
 
+DEFUN ("fflush", Ffflush, Sfflush, 1, 1,
+  "fflush (FILENAME or FILENUM): flush buffered data to output file")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 1)
+    print_usage ("fflush");
+  else
+    retval = fflush_internal (args);
+
+  return retval;
+}
+
 static int
 valid_mode (const char *mode)
 {
   if (mode)
     {
       char m = mode[0];
       if (m == 'r' || m == 'w' || m == 'a')
 	{
 	  m = mode[1];
 	  return (m == '\0' || (m == '+' && mode[2] == '\0'));
 	}
     }
   return 0;
 }
 
-DEFUN ("fgets", Ffgets, Sfgets, 2, 2,
-  "[STRING, LENGTH] = fgets (FILENAME or FILENUM, LENGTH)\n\
-\n\
-read a string from a file")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 2)
-    print_usage ("fgets");
-  else
-    retval = fgets_internal (args, nargout);
-
-  return retval;
-}
-
-Octave_object
+static Octave_object
 fgets_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   Pix p = file_io_get_file (args(0), "r", "fgets");
   
   if (! p)
     return retval;
@@ -426,42 +409,34 @@ fgets_internal (const Octave_object& arg
   if (nargout == 2)
     retval(1) = (double) strlen (string);
 
   retval(0) = string;
 
   return retval;
 }
 
-DEFUN ("fopen", Ffopen, Sfopen, 2, 1,
-  "FILENUM = fopen (FILENAME, MODE): open a file\n\
-\n\
-  Valid values for mode include:\n\
+DEFUN ("fgets", Ffgets, Sfgets, 2, 2,
+  "[STRING, LENGTH] = fgets (FILENAME or FILENUM, LENGTH)\n\
 \n\
-   r  : open text file for reading\n\
-   w  : open text file for writing; discard previous contents if any\n\
-   a  : append; open or create text file for writing at end of file\n\
-   r+ : open text file for update (i.e., reading and writing)\n\
-   w+ : create text file for update; discard previous contents if any\n\
-   a+ : append; open or create text file for update, writing at end\n\n\
- Update mode permits reading from and writing to the same file.")
+read a string from a file")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
-    print_usage ("fopen");
+    print_usage ("fgets");
   else
-    retval = fopen_internal (args);
+    retval = fgets_internal (args, nargout);
 
   return retval;
 }
 
-Octave_object
+static Octave_object
 fopen_internal (const Octave_object& args)
 {
   Octave_object retval;
   Pix p;
 
   if (! args(0).is_string ())
     {
       error ("fopen: file name must be a string");
@@ -514,32 +489,42 @@ fopen_internal (const Octave_object& arg
   file_info file (file_number, name, file_ptr, mode);
   file_list.append (file);
 
   retval(0) = (double) file_number;
 
   return retval;
 }
 
-DEFUN ("freport", Ffreport, Sfreport, 0, 1,
-  "freport (): list open files and their status")
+DEFUN ("fopen", Ffopen, Sfopen, 2, 1,
+  "FILENUM = fopen (FILENAME, MODE): open a file\n\
+\n\
+  Valid values for mode include:\n\
+\n\
+   r  : open text file for reading\n\
+   w  : open text file for writing; discard previous contents if any\n\
+   a  : append; open or create text file for writing at end of file\n\
+   r+ : open text file for update (i.e., reading and writing)\n\
+   w+ : create text file for update; discard previous contents if any\n\
+   a+ : append; open or create text file for update, writing at end\n\n\
+ Update mode permits reading from and writing to the same file.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin > 0)
-    warning ("freport: ignoring extra arguments");
-
-  retval = freport_internal ();
+  if (nargin != 2)
+    print_usage ("fopen");
+  else
+    retval = fopen_internal (args);
 
   return retval;
 }
 
-Octave_object
+static Octave_object
 freport_internal (void)
 {
   Octave_object retval;
   Pix p = file_list.first ();
 
   ostrstream output_buf;
 
   output_buf << "\n number  mode  name\n\n";
@@ -554,65 +539,63 @@ freport_internal (void)
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 
   return retval;
 }
 
+DEFUN ("freport", Ffreport, Sfreport, 0, 1,
+  "freport (): list open files and their status")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin > 0)
+    warning ("freport: ignoring extra arguments");
+
+  retval = freport_internal ();
+
+  return retval;
+}
+
+static Octave_object
+frewind_internal (const Octave_object& args)
+{
+  Octave_object retval;
+
+  Pix p = file_io_get_file (args(0), "a+", "frewind");
+
+  if (p)
+    {
+      file_info file = file_list (p);
+      rewind (file.fptr ());
+    }
+
+  return retval;
+}
+
 DEFUN ("frewind", Ffrewind, Sfrewind, 1, 1,
   "frewind (FILENAME or FILENUM): set file position at beginning of file")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
     print_usage ("frewind");
   else
     retval = frewind_internal (args);
 
   return retval;
 }
 
-Octave_object
-frewind_internal (const Octave_object& args)
-{
-  Octave_object retval;
-
-  Pix p = file_io_get_file (args(0), "a+", "frewind");
-
-  if (p)
-    {
-      file_info file = file_list (p);
-      rewind (file.fptr ());
-    }
-
-  return retval;
-}
-
-DEFUN ("fseek", Ffseek, Sfseek, 3, 1,
-  "fseek (FILENAME or FILENUM, OFFSET [, ORIGIN])\n\
-\n\
-set file position for reading or writing")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 2 && nargin != 3)
-    print_usage ("fseek");
-  else
-    retval = fseek_internal (args);
-
-  return retval;
-}
-
-Octave_object
+static Octave_object
 fseek_internal (const Octave_object& args)
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   Pix p = file_io_get_file (args(0), "a+", "fseek");
 
@@ -683,34 +666,36 @@ fseek_internal (const Octave_object& arg
     {
       error ("fseek: file error");
       retval(0) = 0.0; // failed
     }
 
   return retval;
 }
 
-// Tell current position of file.
-
-DEFUN ("ftell", Fftell, Sftell, 1, 1,
-  "POSITION = ftell (FILENAME or FILENUM): returns the current file position")
+DEFUN ("fseek", Ffseek, Sfseek, 3, 1,
+  "fseek (FILENAME or FILENUM, OFFSET [, ORIGIN])\n\
+\n\
+set file position for reading or writing")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin != 1)
-    print_usage ("ftell");
+  if (nargin != 2 && nargin != 3)
+    print_usage ("fseek");
   else
-    retval = ftell_internal (args);
+    retval = fseek_internal (args);
 
   return retval;
 }
 
-Octave_object
+// Tell current position of file.
+
+static Octave_object
 ftell_internal (const Octave_object& args)
 {
   Octave_object retval;
 
   Pix p = file_io_get_file (args(0), "a+", "ftell");
 
   if (p)
     {
@@ -721,16 +706,31 @@ ftell_internal (const Octave_object& arg
 
       if (offset == -1L)
 	error ("ftell: write error");
     }
 
   return retval;
 }
 
+DEFUN ("ftell", Fftell, Sftell, 1, 1,
+  "POSITION = ftell (FILENAME or FILENUM): returns the current file position")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 1)
+    print_usage ("ftell");
+  else
+    retval = ftell_internal (args);
+
+  return retval;
+}
+
 void
 close_files (void)
 {
   Pix p = file_list.first ();
 
   int file_count = file_list.length ();
   for (int i = 0; i < file_count; i++)
     {
@@ -955,66 +955,17 @@ process_printf_format (const char *s, co
 
  invalid_format:
   error ("%s: invalid format", type);
   return -1;
 }
 
 // Formatted printing to a file.
 
-DEFUN ("fprintf", Ffprintf, Sfprintf, -1, 1,
-  "fprintf (FILENAME or FILENUM, FORMAT, ...)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 2)
-    print_usage ("fprintf");
-  else
-    retval = do_printf ("fprintf", args, nargout);
-
-  return retval;
-}
-
-// Formatted printing.
-
-DEFUN ("printf", Fprintf, Sprintf, -1, 1,
-  "printf (FORMAT, ...)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 1)
-    print_usage ("printf");
-  else
-    retval = do_printf ("printf", args, nargout);
-
-  return retval;
-}
-
-// Formatted printing to a string.
-
-DEFUN ("sprintf", Fsprintf, Ssprintf, -1, 1,
-  "s = sprintf (FORMAT, ...)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 1)
-    print_usage ("sprintf");
-  else
-    retval = do_printf ("sprintf", args, nargout);
-
-  return retval;
-}
-
-Octave_object
+static Octave_object
 do_printf (const char *type, const Octave_object& args, int nargout)
 {
   Octave_object retval;
   fmt_arg_count = 0;
   char *fmt;
   file_info file;
 
   if (strcmp (type, "fprintf") == 0)
@@ -1074,17 +1025,16 @@ do_printf (const char *type, const Octav
 	{
 	  ptr++;
 	  output_buf << c;
 	  continue;
 	}
 
 // We must be looking at a format specifier.  Extract it or fail.
 
-
       int status = process_printf_format (ptr, args, output_buf, type);
 
       if (status < 0)
 	return retval;
 
       ptr += status;
     }
 
@@ -1107,16 +1057,65 @@ do_printf (const char *type, const Octav
       char *msg = output_buf.str ();
       retval(0) = msg;
       delete [] msg;
     }
 
   return retval;
 }
 
+DEFUN ("fprintf", Ffprintf, Sfprintf, -1, 1,
+  "fprintf (FILENAME or FILENUM, FORMAT, ...)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin < 2)
+    print_usage ("fprintf");
+  else
+    retval = do_printf ("fprintf", args, nargout);
+
+  return retval;
+}
+
+// Formatted printing.
+
+DEFUN ("printf", Fprintf, Sprintf, -1, 1,
+  "printf (FORMAT, ...)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin < 1)
+    print_usage ("printf");
+  else
+    retval = do_printf ("printf", args, nargout);
+
+  return retval;
+}
+
+// Formatted printing to a string.
+
+DEFUN ("sprintf", Fsprintf, Ssprintf, -1, 1,
+  "s = sprintf (FORMAT, ...)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin < 1)
+    print_usage ("sprintf");
+  else
+    retval = do_printf ("sprintf", args, nargout);
+
+  return retval;
+}
+
 static int
 process_scanf_format (const char *s, ostrstream& fmt,
 		      const char *type, int nargout, FILE* fptr,
 		      Octave_object& values)
 {
   fmt << "%";
 
   int chars_from_fmt_str = 0;
@@ -1276,66 +1275,17 @@ process_scanf_format (const char *s, ost
       warning ("%s: invalid format", type);
     }
 
   return -1;
 }
 
 // Formatted reading from a file.
 
-DEFUN ("fscanf", Ffscanf, Sfscanf, 2, -1,
-  "[A, B, C, ...] = fscanf (FILENAME or FILENUM, FORMAT)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 1 && nargin != 2)
-    print_usage ("fscanf");
-  else
-    retval = do_scanf ("fscanf", args, nargout);
-
-  return retval;
-}
-
-// Formatted reading.
-
-DEFUN ("scanf", Fscanf, Sscanf, 1, -1,
-  "[A, B, C, ...] = scanf (FORMAT)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 1)
-    print_usage ("scanf");
-  else
-    retval = do_scanf ("scanf", args, nargout);
-
-  return retval;
-}
-
-// Formatted reading from a string.
-
-DEFUN ("sscanf", Fsscanf, Ssscanf, 2, -1,
-  "[A, B, C, ...] = sscanf (STRING, FORMAT)")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 2)
-    print_usage ("sscanf");
-  else
-    retval = do_scanf ("sscanf", args, nargout);
-
-  return retval;
-}
-
-Octave_object
+static Octave_object
 do_scanf (const char *type, const Octave_object& args, int nargout)
 {
   Octave_object retval;
   char *scanf_fmt = 0;
   char *tmp_file = 0;
   int tmp_file_open = 0;
   FILE *fptr = 0;
   file_info file;
@@ -1471,16 +1421,65 @@ do_scanf (const char *type, const Octave
     }
 
   if (tmp_file_open)
     fclose (fptr);
 
   return retval;
 }
 
+DEFUN ("fscanf", Ffscanf, Sfscanf, 2, -1,
+  "[A, B, C, ...] = fscanf (FILENAME or FILENUM, FORMAT)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 1 && nargin != 2)
+    print_usage ("fscanf");
+  else
+    retval = do_scanf ("fscanf", args, nargout);
+
+  return retval;
+}
+
+// Formatted reading.
+
+DEFUN ("scanf", Fscanf, Sscanf, 1, -1,
+  "[A, B, C, ...] = scanf (FORMAT)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 1)
+    print_usage ("scanf");
+  else
+    retval = do_scanf ("scanf", args, nargout);
+
+  return retval;
+}
+
+// Formatted reading from a string.
+
+DEFUN ("sscanf", Fsscanf, Ssscanf, 2, -1,
+  "[A, B, C, ...] = sscanf (STRING, FORMAT)")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin != 2)
+    print_usage ("sscanf");
+  else
+    retval = do_scanf ("sscanf", args, nargout);
+
+  return retval;
+}
+
 // Find out how many elements are left to read.
 
 static long
 num_items_remaining (FILE *fptr, char *type)
 {
   size_t size;
 
   if (strcasecmp (type, "uchar") == 0)
@@ -1513,43 +1512,16 @@ num_items_remaining (FILE *fptr, char *t
 
   fseek (fptr, curr_pos, SEEK_SET);
 
   long len = end_of_file - curr_pos;
 
   return len / size;
 }
 
-DEFUN ("fread", Ffread, Sfread, 3, 2,
-  "[DATA, COUNT] = fread (FILENUM, SIZE, PRECISION)\n\
-\n\
- Reads data in binary form of type PRECISION from a file.\n\
-\n\
- FILENUM   : file number from fopen\n\
- SIZE      : size specification for the Data matrix\n\
- PRECISION : type of data to read, valid types are\n\
-\n\
-               'char',   'schar', 'short',  'int',  'long', 'float'\n\
-               'double', 'uchar', 'ushort', 'uint', 'ulong'\n\
-\n\
- DATA      : matrix in which the data is stored\n\
- COUNT     : number of elements read")
-{
-  Octave_object retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 1 || nargin > 3)
-    print_usage ("fread");
-  else
-    retval = fread_internal (args, nargout);
-
-  return retval;
-}
-
 // Read binary data from a file.
 //
 //   [data, count] = fread (fid, size, 'precision')
 //
 //     fid       : the file id from fopen
 //     size      : the size of the matrix or vector or scaler to read
 //
 //                 n	  : reads n elements of a column vector
@@ -1562,17 +1534,17 @@ DEFUN ("fread", Ffread, Sfread, 3, 2,
 //                 char, uchar, schar, short, ushort, int, uint,
 //                 long, ulong, float, double
 //
 //                 Default  is uchar.
 //
 //     data	 : output data
 //     count	 : number of elements read
 
-Octave_object
+static Octave_object
 fread_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   Pix p = file_io_get_file (args(0), "r", "fread");
 
@@ -1707,38 +1679,39 @@ fread_internal (const Octave_object& arg
   if (nargout > 1)
     retval(1) = (double) count;
 
   retval(0) = m;
 
   return retval;
 }
 
-DEFUN ("fwrite", Ffwrite, Sfwrite, 3, 1,
-  "COUNT = fwrite (FILENUM, DATA, PRECISION)\n\
+DEFUN ("fread", Ffread, Sfread, 3, 2,
+  "[DATA, COUNT] = fread (FILENUM, SIZE, PRECISION)\n\
 \n\
- Writes data to a file in binary form of size PRECISION\n\
+ Reads data in binary form of type PRECISION from a file.\n\
 \n\
  FILENUM   : file number from fopen\n\
- DATA      : matrix of elements to be written\n\
+ SIZE      : size specification for the Data matrix\n\
  PRECISION : type of data to read, valid types are\n\
 \n\
                'char',   'schar', 'short',  'int',  'long', 'float'\n\
                'double', 'uchar', 'ushort', 'uint', 'ulong'\n\
 \n\
- COUNT     : number of elements written")
+ DATA      : matrix in which the data is stored\n\
+ COUNT     : number of elements read")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin < 2 || nargin > 3)
-    print_usage ("fwrite");
+  if (nargin < 1 || nargin > 3)
+    print_usage ("fread");
   else
-    retval = fwrite_internal (args, nargout);
+    retval = fread_internal (args, nargout);
 
   return retval;
 }
 
 // Write binary data to a file.
 //
 //   count = fwrite (fid, data, 'precision')
 //
@@ -1748,17 +1721,17 @@ DEFUN ("fwrite", Ffwrite, Sfwrite, 3, 1,
 //
 //                char, uchar, schar, short, ushort, int, uint,
 //                long, float, double
 //
 //                 Default is uchar.
 //
 //    count     : the number of elements written
 
-Octave_object
+static Octave_object
 fwrite_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   Pix p = file_io_get_file (args(0), "a+", "fwrite");
 
@@ -1787,16 +1760,67 @@ fwrite_internal (const Octave_object& ar
       int count = m.write (file.fptr (), prec);
 
       retval(0) = (double) count;
     }
 
   return retval;
 }
 
+DEFUN ("fwrite", Ffwrite, Sfwrite, 3, 1,
+  "COUNT = fwrite (FILENUM, DATA, PRECISION)\n\
+\n\
+ Writes data to a file in binary form of size PRECISION\n\
+\n\
+ FILENUM   : file number from fopen\n\
+ DATA      : matrix of elements to be written\n\
+ PRECISION : type of data to read, valid types are\n\
+\n\
+               'char',   'schar', 'short',  'int',  'long', 'float'\n\
+               'double', 'uchar', 'ushort', 'uint', 'ulong'\n\
+\n\
+ COUNT     : number of elements written")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin < 2 || nargin > 3)
+    print_usage ("fwrite");
+  else
+    retval = fwrite_internal (args, nargout);
+
+  return retval;
+}
+
+// Check for an EOF condition on a file opened by fopen.
+//
+//   eof = feof (fid)
+//
+//     fid : file id from fopen
+//     eof : non zero for an end of file condition
+
+static Octave_object
+feof_internal (const Octave_object& args, int nargout)
+{
+  Octave_object retval;
+
+// Get file info.
+  Pix p = return_valid_file (args(0));
+
+  if (! p)
+    return retval;
+
+  file_info file = file_list (p);
+
+  retval(0) = (double) feof (file.fptr ());
+
+  return retval;
+}
+
 DEFUN ("feof", Ffeof, Sfeof, 1, 1,
   "ERROR = feof (FILENAME or FILENUM)\n\
 \n\
  Returns a non zero value for an end of file condition for the\n\
  file specified by FILENAME or FILENUM from fopen")
 {
   Octave_object retval;
 
@@ -1805,37 +1829,43 @@ DEFUN ("feof", Ffeof, Sfeof, 1, 1,
   if (nargin != 1)
     print_usage ("feof");
   else
     retval = feof_internal (args, nargout);
 
   return retval;
 }
 
-// Check for an EOF condition on a file opened by fopen.
+// Check for an error condition on a file opened by fopen.
 //
-//   eof = feof (fid)
+//   [message, errnum] = ferror (fid)
 //
-//     fid : file id from fopen
-//     eof : non zero for an end of file condition
+//     fid     : file id from fopen
+//     message : system error message
+//     errnum  : error number
 
-Octave_object
-feof_internal (const Octave_object& args, int nargout)
+static Octave_object
+ferror_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
 // Get file info.
   Pix p = return_valid_file (args(0));
 
   if (! p)
     return retval;
 
   file_info file = file_list (p);
 
-  retval(0) = (double) feof (file.fptr ());
+  int ierr = ferror (file.fptr ());
+
+  if (nargout > 1)
+    retval(1) = (double) ierr;
+
+  retval(0) = strsave (strerror (ierr));
 
   return retval;
 }
 
 DEFUN ("ferror", Fferror, Sferror, 1, 1,
   "ERROR = ferror (FILENAME or FILENUM)\n\
 \n\
  Returns a non zero value for an error condition on the\n\
@@ -1848,45 +1878,14 @@ DEFUN ("ferror", Fferror, Sferror, 1, 1,
   if (nargin != 1)
     print_usage ("ferror");
   else
     retval = ferror_internal (args, nargout);
 
   return retval;
 }
 
-// Check for an error condition on a file opened by fopen.
-//
-//   [message, errnum] = ferror (fid)
-//
-//     fid     : file id from fopen
-//     message : system error message
-//     errnum  : error number
-
-Octave_object
-ferror_internal (const Octave_object& args, int nargout)
-{
-  Octave_object retval;
-
-// Get file info.
-  Pix p = return_valid_file (args(0));
-
-  if (! p)
-    return retval;
-
-  file_info file = file_list (p);
-
-  int ierr = ferror (file.fptr ());
-
-  if (nargout > 1)
-    retval(1) = (double) ierr;
-
-  retval(0) = strsave (strerror (ierr));
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/file-io.h b/src/file-io.h
--- a/src/file-io.h
+++ b/src/file-io.h
@@ -25,41 +25,20 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_files_h)
 #define octave_files_h 1
 
 #include <Pix.h>
 
 #include "oct-obj.h"
 
-extern Pix return_valid_file (const tree_constant& arg);
-
-extern Octave_object fclose_internal (const Octave_object& args);
-extern Octave_object feof_internal (const Octave_object& args, int nargout);
-extern Octave_object ferror_internal (const Octave_object& args, int nargout);
-extern Octave_object fflush_internal (const Octave_object& args);
-extern Octave_object fgets_internal (const Octave_object& args, int nargout);
-extern Octave_object fopen_internal (const Octave_object& args);
-extern Octave_object fread_internal (const Octave_object& args, int nargout);
-extern Octave_object freport_internal (void);
-extern Octave_object frewind_internal (const Octave_object& args);
-extern Octave_object fseek_internal (const Octave_object& args);
-extern Octave_object ftell_internal (const Octave_object& args);
-extern Octave_object fwrite_internal (const Octave_object& args, int nargout);
-
 extern void initialize_file_io (void);
 
 extern void close_files (void);
 
-extern Octave_object do_printf (const char *type, const Octave_object& args,
-				int nargout);
-
-extern Octave_object do_scanf (const char *type, const Octave_object& args,
-			       int nargout);
-
 class
 file_info
 {
 public:
   file_info (void);
   file_info (int num, const char *nm, FILE *t, const char *md);
   file_info (const file_info& f);
 
