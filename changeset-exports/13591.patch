# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312446659 -7200
#      Thu Aug 04 10:30:59 2011 +0200
# Node ID b2ee41559bffe610f9b9e87db1dc54d374b4bf75
# Parent  c0cb420d83b796bb30fc6d9452f419eb80896bfd
Refactored IRC code.

diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -13,123 +13,109 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "IRCClientImpl.h"
 
-IRCServerMessage::IRCServerMessage (const char *serverMessage)
+IRCServerMessage::IRCServerMessage (const QString& serverMessage)
 {
-  char prefix[MAX_LINE_LEN];
+  const char *message = serverMessage.toStdString().c_str();
+  char prefix[512];
   int index = 0;
 
-  n_nick = "";
+  m_nick = "";
   m_user = "";
   m_host = "";
-  for (int i = 0; i < 15; i++)
-    {
-      m_parameter[i] = "";
-    }
+  m_parameters.reserve (16);
 
-  if (serverMessage[0] == CHR_COLON)
+  if (message[0] == CHR_COLON)
     {
       index++;
       strcpy (prefix,
-              getStringToken (serverMessage, index).toStdString ().c_str ());
+              getStringToken (message, index).toStdString ().c_str ());
 
       int etapa = 0;
       for (unsigned int i = 0; i < strlen (prefix); i++)
         {
           switch (prefix[i])
             {
             case '!':
               etapa = 1;
               break;
             case '@':
               etapa = 2;
               break;
             default:
               switch (etapa)
                 {
                 case 0:
-                  n_nick += prefix[i];
+                  m_nick += prefix[i];
                   break;
                 case 1:
                   m_user += prefix[i];
                   break;
                 default:
                   m_host += prefix[i];
                   break;
                 }
             }
         }
     }
 
-  m_command = getStringToken (serverMessage, index);
+  m_command = getStringToken (message, index);
   m_command = m_command.toUpper ();
 
-  m_parameterCount = 0;
-  while (serverMessage[index] != 0)
+  while (message[index] != 0)
     {
-      if ((serverMessage[index] == CHR_COLON) || (m_parameterCount == 14))
+      if ((message[index] == CHR_COLON))
         {
 
-          if (serverMessage[index] == CHR_COLON)
+          if (message[index] == CHR_COLON)
             {
               index++;
             }
 
-          m_parameter[m_parameterCount] = (const char *) (serverMessage + index);
-          index += strlen (serverMessage + index);
+          m_parameters.append ( (const char *) (message + index));
+          index += strlen (message + index);
         }
       else
         {
-          m_parameter[m_parameterCount] = getStringToken (serverMessage, index);
+          m_parameters.append (getStringToken (message, index));
         }
-      m_parameterCount++;
     }
 
   if (strlen (m_command.toStdString ().c_str ()) ==
       strspn (m_command.toStdString ().c_str (), DIGITS))
     {
-      n_numeric = true;
+      m_isNumeric = true;
       m_codeNumber = atoi (m_command.toStdString ().c_str ());
     }
   else
     {
-      n_numeric = false;
+      m_isNumeric = false;
     }
 }
 
 int
 IRCServerMessage::numericValue ()
 {
-  if (!n_numeric)
-    {
-      return -1;
-    }
-  else
-    {
-      return m_codeNumber;
-    }
+  if (m_isNumeric)
+    return m_codeNumber;
+  return -1;
 }
 
 QString
 IRCServerMessage::parameter (int index)
 {
-  if ((index < 0) || (index > 14))
-    {
-      return QString ();
-    }
-  else
-    {
-      return m_parameter[index];
-    }
+  if (index >= 0 && index < m_parameters.size ())
+    return m_parameters.at (index);
+  return "";
 }
 
 int
 IRCServerMessage::skipSpaces (const char *line, int &index)
 {
   while (line[index] == CHR_SPACE)
     {
       index++;
@@ -190,23 +176,24 @@ IRCClientImpl::connectToHost (const QHos
   m_host = host;
   m_nickname = initialNick;
   m_tcpSocket.connectToHost(host, port);
 }
 
 void
 IRCClientImpl::disconnect ()
 {
-
+  m_tcpSocket.disconnect ();
 }
 
 void
 IRCClientImpl::reconnect ()
 {
-
+  disconnect ();
+  connectToHost (m_host, m_port, m_nickname);
 }
 
 bool
 IRCClientImpl::isConnected ()
 {
   return m_connected;
 }
 
@@ -228,17 +215,17 @@ IRCClientImpl::ircChannelProxy (const QS
   if (m_channels.contains (channel))
     return m_channels[channel];
   return 0;
 }
 
 void
 IRCClientImpl::sendJoinRequest (const QString& channel)
 {
-  sendCommand (1, IRCCommand::Join, channel.toStdString ().c_str ());
+  sendIRCCommand (IRCCommand::Join, QStringList (channel));
 }
 
 void
 IRCClientImpl::leaveChannel (const QString& channel, const QString& reason)
 {
   Q_UNUSED (channel);
   Q_UNUSED (reason);
 }
@@ -247,45 +234,50 @@ void
 IRCClientImpl::focusChannel (const QString& channel)
 {
   m_focussedChannel = channel;
 }
 
 void
 IRCClientImpl::sendNicknameChangeRequest (const QString &nickname)
 {
-  sendCommand (1, IRCCommand::Nick, nickname.toStdString ().c_str ());
+  sendIRCCommand (IRCCommand::Nick, QStringList (nickname));
 }
 
 void
 IRCClientImpl::sendPublicMessage (const QString& message)
 {
-  sendCommand (2, IRCCommand::PrivateMessage, m_focussedChannel.toStdString ().c_str (),
-                message.toStdString ().c_str ());
+  QStringList arguments;
+  arguments << m_focussedChannel;
+  arguments << message;
+  sendIRCCommand (IRCCommand::PrivateMessage, arguments);
 }
 
 void
 IRCClientImpl::sendPrivateMessage (const QString &recipient, const QString &message)
 {
-  sendCommand (2, IRCCommand::PrivateMessage,
-                  recipient.toStdString ().c_str (),
-                  message.toStdString ().c_str ());
+  QStringList arguments;
+  arguments << recipient;
+  arguments << message;
+  sendIRCCommand (IRCCommand::PrivateMessage, arguments);
 }
 
 const QString&
 IRCClientImpl::nickname ()
 {
   return m_nickname;
 }
 
 void
 IRCClientImpl::handleConnected ()
 {
   m_connected = true;
-  sendCommand (4, IRCCommand::User, "na", "0", "0", "na");
+  QStringList arguments;
+  arguments << "na" << "0" << "0" << "na";
+  sendIRCCommand (IRCCommand::User, arguments);
   sendNicknameChangeRequest (m_nickname);
   emit connected (m_host.toString ());
 }
 
 void
 IRCClientImpl::handleDisconnected ()
 {
   m_connected = false;
@@ -325,17 +317,17 @@ IRCClientImpl::handleUserQuit (const QSt
   emit userQuit (nick, reason);
 }
 
 void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
   if (m_connected && !line.isEmpty())
     {
-      IRCServerMessage ircEvent(line.toStdString().c_str());
+      IRCServerMessage ircEvent(line);
       if (ircEvent.isNumericValue () == true)
         {
           switch (ircEvent.numericValue ())
             {
               case IRCReply::Welcome:
                 emit loggedIn (nickname ());
                 break;
               case IRCError::NicknameInUse:
@@ -413,17 +405,17 @@ IRCClientImpl::handleIncomingLine (const
             }
           else if (command == IRCCommand::Notice)
             {
               emit notification (ircEvent.nick ().toStdString ().c_str (),
                                  ircEvent.parameter (1).toStdString ().c_str ());
             }
           else if (command == IRCCommand::Ping)
             {
-              sendCommand (1, IRCCommand::Pong, m_nickname.toStdString ().c_str ());
+              sendIRCCommand (IRCCommand::Pong, QStringList (m_nickname));
             }
           else if (command == IRCCommand::Error)
             {
               emit error (ircEvent.parameter (0));
             }
           else
             {
               emit debugMessage (QString("FIXME: Received unknown reply: %1").arg(command));
@@ -436,49 +428,26 @@ IRCClientImpl::handleIncomingLine (const
 void
 IRCClientImpl::sendLine (const QString &line)
 {
   if (m_connected)
     m_tcpSocket.write ((line + "\r\n").toStdString ().c_str ());
 }
 
 void
-IRCClientImpl::sendCommand (int numberOfCommands, const QString& command, ...)
+IRCClientImpl::sendIRCCommand (const QString &command, const QStringList &arguments)
 {
-  // TODO: Change this. We are coding C++, not C ;)
-  char linea[513];
-  char *parametro;
-  const char *cmd = command.toStdString().c_str();
-  va_list lp;
-
-  strncpy (linea, cmd, 512);
-  linea[512] = 0;
-  va_start (lp, cmd);
-  for (int i = 0; i < numberOfCommands; i++)
+  QString line = command;
+  for (int i = 0; i < arguments.size (); i++)
     {
-      if (i == 15)
-        break;
-      parametro = va_arg (lp, char *);
-      if (i == numberOfCommands - 1)
-        {
-          if (strlen (linea) + strlen (parametro) + 2 > 512)
-            break;
-          if (strchr (parametro, ' ') != NULL)
-            {
-              strcat (linea, " :");
-            }
-          else
-            {
-              strcat (linea, " ");
-            }
-          strcat (linea, parametro);
-        }
-      else
-        {
-          if (strlen (linea) + strlen (parametro) + 1 > 512)
-            break;
-          strcat (linea, " ");
-          strcat (linea, parametro);
-        }
+      bool applyColon = false;
+      // Usually all parameters are separated by spaces.
+      // The last parameter of the message may contain spaces, it is usually used
+      // to transmit messages. In order to parse it correctly, if needs to be prefixed
+      // with a colon, so the server knows to ignore all forthcoming spaces and has to treat
+      // all remaining characters as a single parameter. If we detect any whitespace in the
+      // last argument, prefix it with a colon:
+      if ((i == arguments.size () - 1) && arguments.at (i).contains (QRegExp("\\s")))
+        applyColon = true;
+      line += QString (" %1%2").arg (applyColon ? ":" : "").arg (arguments.at (i));
     }
-  va_end (lp);
-  sendLine (linea);
+  sendLine (line);
 }
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -223,61 +223,57 @@ namespace IRCError
   const int UniqueOperatorPrivilegesNeeded = 485;
   const int NoOperatorHost = 491;
   const int YourModeListUnknownFlag = 501;
   const int UsersDontMatch = 502;
 };
 
 class IRCServerMessage
 {
-  #define MAX_LINE_LEN 512
-  #define PARAM_MAX_COUNT 15
   #define CHR_COLON ':'
   #define CHR_SPACE ' '
   #define CHR_ZERO '\0'
   #ifdef Q_OS_LINUX
-  #define CRLF "\n"
+  # define CRLF "\n"
   #else
-  #define CRLF "\r\n"
+  # define CRLF "\r\n"
   #endif
   #define DIGITS	"0123456789"
 
 public:
-  IRCServerMessage (const char *serverMessage);
+  IRCServerMessage (const QString& serverMessage);
 
   bool isNumericValue ()
   {
-    return n_numeric;
+    return m_isNumeric;
   }
 
   QString nick ()
   {
-    return n_nick;
+    return m_nick;
   }
 
   QString command ()
   {
     return m_command;
   }
 
   int numericValue ();
   QString parameter (int index);
 
 private:
   int skipSpaces (const char *linea, int &index);
   QString getStringToken (const char *linea, int &index);
   QString getStringToken (QString linea, int &index);
 
   int m_codeNumber;
-  bool n_numeric;
-
-  QString n_nick, m_user, m_host;
+  bool m_isNumeric;
+  QString m_nick, m_user, m_host;
   QString m_command;
-  int m_parameterCount;
-  QString m_parameter[PARAM_MAX_COUNT];
+  QStringList m_parameters;
 };
 
 class IRCChannelProxy : public IRCChannelProxyInterface
 {
 public:
   IRCChannelProxy ();
   QTextDocument *conversationModel ();
   QStringListModel *userListModel ();
@@ -321,17 +317,17 @@ private slots:
   void handleReadyRead ();
 
 private:
   void handleNicknameChanged (const QString& oldNick, const QString& newNick);
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleIncomingLine (const QString& line);
   void sendLine (const QString& line);
-  void sendCommand (int numberOfCommands, const QString& command, ...);
+  void sendIRCCommand (const QString& command, const QStringList& arguments);
 
   QHostAddress                    m_host;
   int                             m_port;
   QString                         m_nickname;
   bool                            m_connected;
   QString                         m_focussedChannel;
 
   QTcpSocket                      m_tcpSocket;
