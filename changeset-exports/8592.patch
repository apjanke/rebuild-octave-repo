# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232981193 -3600
#      Mon Jan 26 15:46:33 2009 +0100
# Node ID dacfd030633a4b6359c93418159fa80f8d381da2
# Parent  ffc9e9737507b0bfa9649f06660d531cd3bae45b
handle sparse jacobians in fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Disable Broyden updates for sparse jacobians.
+
 2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/__fsolve_defopts__.m: Remove.
 	* optimization/Makefile.in: Reflect change.
 
 2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/__fdjac__.m: Fix setting up h.
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -114,16 +114,20 @@ function [x, fvec, info, output, fjac] =
 
   ## Outer loop.
   while (niter < maxiter && nfev < maxfev && ! info)
 
     ## Calculate function value and Jacobian (possibly via FD).
     ## Handle arbitrary shapes of x and f and remember them.
     if (has_jac)
       [fvec, fjac] = fcn (reshape (x, xsiz));
+      ## If the jacobian is sparse, disable Broyden updating.
+      if (issparse (fjac))
+        updating = false;
+      endif
       nfev ++;
     else
       [fvec, fjac] = __fdjac__ (fcn, reshape (x, xsiz));
       nfev += 1 + length (x);
     endif
     fsiz = size (fvec);
     fvec = fvec(:);
     fn = norm (fvec);
