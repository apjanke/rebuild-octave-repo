# HG changeset patch
# User Rik <rik@octave.org>
# Date 1478272484 25200
#      Fri Nov 04 08:14:44 2016 -0700
# Branch stable
# Node ID 61179451633266a9165810041e67301a47e29b5f
# Parent  766b0163b3b7447a8cfb537d6a6093736c0b3f83
Fix regexp handling of beginning/end word match for double-quoted pattern strings (bug #49451).

* regexp.cc (do_regexp_ptn_string_escapes): Add additional function input
"bool is_sq_str".  If is_sq_str, replace '\b' with backspace, otherwise leave
alone.
* regexp.cc (octregexp, octregexprep): Pass both single and double quoted pattern
strings through 'do_regexp_ptn_string_escapes' so that Matlab beginning/end word match
patterns can be replaced by their PCRCE equivalent.

diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -45,34 +45,41 @@ along with Octave; see the file COPYING.
 #include "utils.h"
 
 // Replace backslash escapes in a string with the real values.  We need
 // two special functions instead of the one in utils.cc because the set
 // of escape sequences used for regexp patterns and replacement strings
 // is different from those used in the *printf functions.
 
 static std::string
-do_regexp_ptn_string_escapes (const std::string& s)
+do_regexp_ptn_string_escapes (const std::string& s, bool is_sq_str)
 {
   std::string retval;
 
   size_t i = 0;
   size_t j = 0;
   size_t len = s.length ();
 
   retval.resize (len);
 
   while (j < len)
     {
       if (s[j] == '\\' && j+1 < len)
         {
           switch (s[++j])
             {
             case 'b': // backspace
-              retval[i] = '\b';
+              if (is_sq_str)
+                retval[i] = '\b';
+              else
+                {
+                  // Pass escape sequence through
+                  retval[i] = '\\';
+                  retval[++i] = 'b';
+                }
               break;
 
             // Translate \< and \> to PCRE word boundary
             case '<': // begin word boundary
             case '>': // end word boundary
               retval[i] = '\\';
               retval[++i] = 'b';
               break;
@@ -330,19 +337,18 @@ octregexp (const octave_value_list &args
 
   int nargin = args.length ();
 
   // Make sure we have string, pattern
   const std::string buffer = args(0).string_value ();
 
   std::string pattern = args(1).string_value ();
 
-  // Matlab compatibility.
-  if (args(1).is_sq_string ())
-    pattern = do_regexp_ptn_string_escapes (pattern);
+  // Rewrite pattern for PCRE
+  pattern = do_regexp_ptn_string_escapes (pattern, args(1).is_sq_string ());
 
   octave::regexp::opts options;
   options.case_insensitive (case_insensitive);
   bool extra_options = false;
   parse_options (options, args, who, 2, extra_options);
 
   octave::regexp::match_data rx_lst
     = octave::regexp::match (pattern, buffer, options, who);
@@ -1292,19 +1298,18 @@ octregexprep (const octave_value_list &a
 {
   int nargin = args.length ();
 
   // Make sure we have string, pattern, replacement
   const std::string buffer = args(0).string_value ();
 
   std::string pattern = args(1).string_value ();
 
-  // Matlab compatibility.
-  if (args(1).is_sq_string ())
-    pattern = do_regexp_ptn_string_escapes (pattern);
+  // Rewrite pattern for PCRE
+  pattern = do_regexp_ptn_string_escapes (pattern, args(1).is_sq_string ());
 
   std::string replacement = args(2).string_value ();
 
   // Matlab compatibility.
   if (args(2).is_sq_string ())
     replacement = do_regexp_rep_string_escapes (replacement);
 
   // Pack options excluding 'tokenize' and various output
