# HG changeset patch
# User Adam H Aitkenhead <adamhaitkenhead@gmail.com>
# Date 1368042491 -3600
#      Wed May 08 20:48:11 2013 +0100
# Node ID 8d32a887754a4bb448b10bd359e7a7335adb66b4
# Parent  ace0f60672ec94cacaa567162627a4fbc0a92767
rgb2ind.m: Fix handling ND images.

* rgb2ind.m: Fix handling of ND images.

diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -103,16 +103,18 @@ function [x, map] = rgb2ind (varargin)
         dither_option = "nodither";
       endif
       
       rgb = reshape ([R(:), G(:), B(:)], [size(R), 3]);
 
     endif
   endif
       
+  sz = size (rgb);
+
   ## Apply a limited colormap if required
   if (exist ("option","var"))
 
     if (size (option, 1)==1)
 
       if (option>0 && option<=1)
         ## option: tol
         tol = option;
@@ -133,16 +135,22 @@ function [x, map] = rgb2ind (varargin)
       endif
       fnmap = tmpnam;
       map = reshape (map, size (map, 1), 1, 3);
       imwrite (map, fnmap, "tiff");
       optionstr = sprintf ("-map %s", fnmap);
       
     endif
   
+    ## If image is an ND array, convert it to a tiled 2D image
+    ## before processing it with Graphicsmagick
+    if numel (sz)>3
+     rgb = reshape (rgb, [prod(sz(1:end-2)), sz(end-1), 3]);
+    end
+
     ## Prepare the Graphicsmagick dithering option
     if strcmp (dither_option, "nodither")
       ditherstr = "+dither";
     elseif strcmp (dither_option, "dither")
       ditherstr = "-dither";
     endif
       
     ## Perform the image processing using Graphicsmagick
@@ -151,17 +159,16 @@ function [x, map] = rgb2ind (varargin)
     imwrite (rgb, fna, "tiff");
     gmstr = sprintf ("gm convert %s %s %s %s", fna, ditherstr, optionstr, fnb);
     system (gmstr);
     rgb = imread (fnb);
     
   endif
 
   ## Conversion of rgb image to x,map
-  sz = size (rgb);
   pr = prod (sz(1:end-1));
   x = zeros (sz(1:end-1));
   [map,~,x(:)] = unique (reshape(rgb, [pr, 3]), "rows");
 
   ## a colormap is of class double and values between 0 and 1
   switch (class (rgb))
     case {"single", "double", "logical"}
       ## do nothing, return the same
