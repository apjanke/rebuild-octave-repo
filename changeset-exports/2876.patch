# HG changeset patch
# User jwe
# Date 861872473 0
#      Thu Apr 24 09:01:13 1997 +0000
# Node ID b4a9f014a8eac82d3b6959f1056fa238f4a47a18
# Parent  2e45e7a3d45edb332d5993dae40b5825a20cbcc2
[project @ 1997-04-24 09:00:15 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -662,16 +662,19 @@ get_input_from_stdin (void)
 }
 
 static string_vector
 generate_struct_completions (const char *text, char *& prefix,
 			     char *& hint)
 {
   string_vector names;
 
+  // XXX FIXME XXX -- this needs some work, eh?
+
+#if 0
   assert (text);
 
   char *id = strsave (text);
   char *ptr = strchr (id, '.');
   *ptr = '\0';
 
   char *elts = ptr + 1;
   ptr = strrchr (elts, '.');
@@ -715,16 +718,17 @@ generate_struct_completions (const char 
 	    {
 	      Octave_map m = def->map_value ();
 	      names = m.make_name_list ();
 	    }
 	}
     }
 
   delete [] id;
+#endif
 
   return names;
 }
 
 // XXX FIXME XXX -- make this generate file names when appropriate.
 
 static string_vector
 generate_possible_completions (const char *text, char *& prefix,
@@ -765,16 +769,19 @@ generate_possible_completions (const cha
   return names;
 }
 
 static int
 looks_like_struct (const char *nm)
 {
   int retval = 0;
 
+  // XXX FIXME XXX -- this needs some work, eh?
+
+#if 0
   assert (nm);
 
   char *id = strsave (nm);
   char *elts = 0;
   char *ptr = strchr (id, '.');
   if (ptr)
     {
       *ptr = '\0';
@@ -803,16 +810,17 @@ looks_like_struct (const char *nm)
 		retval = 1;
 	    }
 	  else
 	    retval = 1;
 	}
     }
 
   delete [] id;
+#endif
 
   return retval;	
 }
 
 // XXX FIXME XXX -- this has to return a pointer to char, but it
 // should be converted to use a generating function that returns a
 // string_vector.
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -18,25 +18,61 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_tree_walker_h)
 #define octave_tree_walker_h 1
 
-#include "pt-cmd.h"
-#include "pt-const.h"
-#include "pt-exp.h"
-#include "pt-fcn.h"
-#include "pt-fvc.h"
-#include "pt-mat.h"
-#include "pt-misc.h"
-#include "pt-mvr.h"
-#include "pt-plot.h"
+class tree_argument_list;
+class tree_binary_expression;
+class tree_break_command;
+class tree_builtin;
+class tree_colon_expression;
+class tree_continue_command;
+class tree_decl_command;
+class tree_decl_elt;
+class tree_decl_init_list;
+class tree_for_command;
+class tree_function;
+class tree_identifier;
+class tree_if_clause;
+class tree_if_command;
+class tree_if_command_list;
+class tree_switch_case;
+class tree_switch_case_list;
+class tree_switch_command;
+class tree_index_expression;
+class tree_indirect_ref;
+class tree_matrix;
+class tree_matrix_row;
+class tree_multi_assignment_expression;
+class tree_no_op_command;
+class tree_oct_obj;
+class tree_constant;
+class tree_parameter_list;
+class tree_plot_command;
+class plot_limits;
+class plot_range;
+class tree_postfix_expression;
+class tree_prefix_expression;
+class tree_return_command;
+class tree_return_list;
+class tree_simple_assignment_expression;
+class tree_statement;
+class tree_statement_list;
+class subplot;
+class subplot_list;
+class subplot_style;
+class subplot_using;
+class tree_try_catch_command;
+class tree_unary_expression;
+class tree_unwind_protect_command;
+class tree_while_command;
 
 class
 tree_walker
 {
 public:
 
   virtual void
   visit_argument_list (tree_argument_list&) = 0;
