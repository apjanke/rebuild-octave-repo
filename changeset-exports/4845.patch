# HG changeset patch
# User jwe
# Date 1080936744 0
#      Fri Apr 02 20:12:24 2004 +0000
# Node ID a9cfb8b37759ff7db2a766de1adac7b7bedc0592
# Parent  9f7ef92b50b05e5bf1da7d3a37450f3331eb541e
[project @ 2004-04-02 20:12:24 by jwe]

diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -70,16 +70,26 @@ Note that in conditional contexts (like 
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
 @DOCSTRING(rot90)
 
+@DOCSTRING(cat)
+
+@DOCSTRING(horzcat)
+
+@DOCSTRING(vertcat)
+
+@DOCSTRING(permute)
+
+@DOCSTRING(ipermute)
+
 @DOCSTRING(reshape)
 
 @DOCSTRING(shift)
 
 @DOCSTRING(sort)
 
 Since the @code{sort} function does not allow sort keys to be specified,
 it can't be used to order the rows of a matrix according to the values
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2004-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mx-inlines.cc (MX_ND_CUMULATIVE_OP): Fix off-by-one error.
+
 2004-04-02  David Bateman  <dbateman@free.fr>
 
 	* lo-specfun.cc (besselj, bessely, besseli, besselk, besselh1, 
 	besselh2, airy, biry, betainc, gammainc, do_bessel):
 	New NDArray versions.
 	(SN_BESSEL, NS_BESSEL, NN_BESSEL): New macros.
 	* lo-specfun.h (besselj, bessely, besseli, besselk, besselh1, 
 	besselh2, airy, biry, betainc, gammainc): Provide decls.
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -498,37 +498,35 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
 #define MX_ND_CUMULATIVE_OP(RET_TYPE, ACC_TYPE, VAL, OP) \
   RET_TYPE retval; \
  \
   dim_vector dv = dims (); \
  \
   int empty = true; \
  \
   /* If dim is larger then number of dims, return array as is */ \
-  if (dim > dv.length ()) \
+  if (dim >= dv.length ()) \
     { \
       retval = RET_TYPE (*this); \
- \
       return retval; \
     } \
  \
   /* Check if all dims are empty */ \
   for (int i = 0; i < dv.length (); i++) \
     { \
       if (dv(i) > 0) \
         { \
           empty = false; \
           break; \
         } \
     } \
  \
   if (empty) \
     { \
       retval.resize (dv); \
- \
       return retval; \
     } \
  \
   /* We need to find first non-singleton dim */ \
   if (dim == -1) \
     { \
       for (int i = 0; i < dv.length (); i++) \
         { \
@@ -554,17 +552,16 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
           squeezed = 1; \
 	  break; \
         } \
     } \
  \
   if (squeezed) \
     {  \
       retval.resize (dv); \
- \
       return retval; \
     } \
  \
   /* Make sure retval has correct dimensions */ \
   retval.resize (dv, VAL); \
  \
   /*  Length of Dimension */ \
   int dim_length = 1; \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2004-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (get_file_format): Error if file does not exist.
+	(Fload): Also complain here if specific file type is specified and
+	file does not exist.
+
 2004-04-02  Quentin Spencer  <qspencer@ieee.org>
 
 	* parse.y: Use persistent instead of static in warnings messages.
 
 2004-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-decl.cc (tree_static_command::do_init): Initialize to empty
 	matrix by default.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1005,18 +1005,16 @@ Return the concatenation of N-d array ob
 @group\n\
 A = ones (2, 2);\n\
 B = zeros (2, 2);\n\
 cat (2, A, B)\n\
 @result{} ans =\n\
 \n\
      1 1 0 0\n\
      1 1 0 0\n\
-     1 1 0 0\n\
-     1 1 0 0\n\
 @end group\n\
 @end example\n\
 \n\
 Alternatively, we can concatenate @var{A} and @var{B} along the\n\
 second dimension the following way:\n\
 \n\
 @example\n\
 @group\n\
@@ -1793,21 +1791,20 @@ A pure imaginary number, defined as\n\
 @iftex\n\
 @tex\n\
   $\\sqrt{-1}$.\n\
 @end tex\n\
 @end iftex\n\
 @ifinfo\n\
   @code{sqrt (-1)}.\n\
 @end ifinfo\n\
-The @code{I} and @code{J} forms are true constants, and cannot be\n\
-modified.  The @code{i} and @code{j} forms are like ordinary variables,\n\
-and may be used for other purposes.  However, unlike other variables,\n\
-they once again assume their special predefined values if they are\n\
-cleared @xref{Status of Variables}.\n\
+These built-in variables behave like functions so you can use the names\n\
+for other purposes.  If you use them as variables and assign values to\n\
+them and then clear them, they once again assume their special predefined\n\
+values @xref{Status of Variables}.\n\
 @end defvr"
 
 #define INFINITY_DOC_STRING "-*- texinfo -*-\n\
 @defvr {Built-in Variable} Inf\n\
 @defvrx {Built-in Variable} inf\n\
 Infinity.  This is the result of an operation like 1/0, or an operation\n\
 that results in a floating point overflow.\n\
 @end defvr"
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -306,17 +306,20 @@ get_file_format (const std::string& fnam
 {
   load_save_format retval = LS_UNKNOWN;
 
   // If the file doesn't exist do nothing
   std::ifstream file_exist (fname.c_str ());
   if (file_exist)
     file_exist.close ();
   else
-    return LS_UNKNOWN;
+    {
+      error ("load: nonexistent file `%s'", fname.c_str ());
+      return LS_UNKNOWN;
+    }
 
 #ifdef HAVE_HDF5
   // check this before we open the file
   if (H5Fis_hdf5 (fname.c_str ()) > 0)
     return LS_HDF5;
 #endif /* HAVE_HDF5 */
 
   std::ifstream file (fname.c_str ());
@@ -744,16 +747,18 @@ variable names if they are invalid Octav
 				    argv, i, argc, nargout);
 
 		  hdf5_file.close ();
 		}
 	      else
 		error ("load: couldn't open input file `%s'",
 		       orig_fname.c_str ());
 	    }
+	  else
+	    error ("load: nonexistent file `%s'", orig_fname.c_str ());
 	}
       else
 #endif /* HAVE_HDF5 */
 	// don't insert any statements here; the "else" above has to
 	// go with the "if" below!!!!!
       if (format != LS_UNKNOWN)
 	{
 	  i++;
@@ -793,16 +798,18 @@ variable names if they are invalid Octav
 				flt_fmt, list_only, swap, verbose,
 				argv, i, argc, nargout);
 	      file.close ();
 	    }
 	  else
 	    error ("load: couldn't open input file `%s'",
 		   orig_fname.c_str ());
 	}
+      else
+	error ("load: nonexistent file: `%s'", orig_fname.c_str ());
     }
 
   return retval;
 }
 
 // Return TRUE if PATTERN has any special globbing chars in it.
 
 static bool
