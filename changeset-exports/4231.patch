# HG changeset patch
# User jwe
# Date 1040327953 0
#      Thu Dec 19 19:59:13 2002 +0000
# Node ID 1032fb9ec0d133f7b3ffbc11bd2064e285777869
# Parent  1feaee8df4ff241f39af5d8ff299d255da6905fc
[project @ 2002-12-19 19:58:29 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2002-12-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ODESSA.cc (ODESSA::integrate): Handle maxord.
+	* ODESSA-opts.in: Likewise.
+
+	* LSODE.cc (ODESSA::integrate): Handle maxord.
+	* LSODE-opts.in: Likewise.
+
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ODESSA.cc (ODESSA::ODESSA): Initialize "initialized" data member
 	in all constructors.
 
 	* Makefile.in (liboctave.$(SHLEXT)): Include $(LIBKPATHSEA) here.
 	(LINK_DEPS): Not here.
 
diff --git a/liboctave/LSODE-opts.in b/liboctave/LSODE-opts.in
--- a/liboctave/LSODE-opts.in
+++ b/liboctave/LSODE-opts.in
@@ -41,30 +41,30 @@ The local error test applied at each int
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "::sqrt (DBL_EPSILON)"
   SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
 END_OPTION
 
 OPTION
   NAME = "integration method"
+  DOC_ITEM
 A string specifing the method of integration to use to solve the ODE
 system.  Valid values are
 
 @table @asis
 @item \"adams\"
 @itemx \"non-stiff\"
 No Jacobian used (even if it is available).
 @item \"bdf\"
 @item \"stiff\"
 Use stiff backward differentiation formula (BDF) method.  If a
 function to compute the Jacobian is not supplied, @code{lsode} will
 compute a finite difference approximation of the Jacobian matrix.
 @end table
-  DOC_ITEM
   END_DOC_ITEM
   TYPE = "std::string"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_VALUE = ""stiff""
   SET_BODY
     if (val == "stiff" || val == "bdf")
       $OPTVAR = "stiff";
     else if (val == "non-stiff" || val == "adams")
@@ -82,16 +82,28 @@ The step size to be attempted on the fir
 automatically).
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
+  NAME = "maximum order"
+  DOC_ITEM
+Restrict the maximum order of the solution method.  If using the Adams
+method, this option must be between 1 and 12.  Otherwise, it must be
+between 1 and 5, inclusive.
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
   NAME = "maximum step size"
   DOC_ITEM
 Setting the maximum stepsize will avoid passing over very large
 regions  (default is not specified).
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -118,34 +118,58 @@ LSODE::do_integrate (double tout)
       initialized = true;
 
       istate = 1;
 
       int n = size ();
 
       nn = n;
 
+      int max_maxord = 0;
+
       if (integration_method () == "stiff")
 	{
+	  max_maxord = 5;
+
 	  if (jac)
 	    method_flag = 21;
 	  else
 	    method_flag = 22;
 
 	  liw = 20 + n;
 	  lrw = 22 + n * (9 + n);
 	}
       else
 	{
+	  max_maxord = 12;
+
 	  method_flag = 10;
 
 	  liw = 20;
 	  lrw = 22 + 16 * n;
 	}
 
+      maxord = maximum_order ();
+
+      if (maxord >= 0)
+	{
+	  if (maxord > 0 && maxord <= max_maxord)
+	    {
+	      iwork(4) = maxord;
+	      iopt = 1;
+	    }	  
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+		("lsode: invalid value for maximum order");
+	      integration_error = true;
+	      return retval;
+	    }
+	}
+
       iwork.resize (liw);
 
       for (int i = 4; i < 9; i++)
 	iwork(i) = 0;
 
       rwork.resize (lrw);
 
       for (int i = 4; i < 9; i++)
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -52,16 +52,17 @@ public:
 
   std::string error_message (void) const;
 
 private:
 
   bool initialized;
 
   int method_flag;
+  int maxord;
   int itask;
   int iopt;
   int itol;
 
   int liw;
   int lrw;
 
   Array<int> iwork;
diff --git a/liboctave/ODESSA-opts.in b/liboctave/ODESSA-opts.in
--- a/liboctave/ODESSA-opts.in
+++ b/liboctave/ODESSA-opts.in
@@ -24,33 +24,48 @@ must match the dimension of the state ve
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "relative tolerance"
-  TYPE = "double"
-  INIT_VALUE = "::sqrt (DBL_EPSILON)"
-  SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
-END_OPTION
-
-OPTION
-  NAME = "integration method"
   DOC_ITEM
 Relative tolerance parameter.  Unlike the absolute tolerance, this
 parameter may only be a scalar.
 
 The local error test applied at each integration step is
 
 @example
   abs (local error in x(i)) <= rtol * abs (y(i)) + atol(i)
 @end example
   END_DOC_ITEM
+  TYPE = "double"
+  INIT_VALUE = "::sqrt (DBL_EPSILON)"
+  SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
+END_OPTION
+
+OPTION
+  NAME = "integration method"
+  DOC_ITEM
+A string specifing the method of integration to use to solve the ODE
+system.  Valid values are
+
+@table @asis
+@item \"adams\"
+@itemx \"non-stiff\"
+No Jacobian used (even if it is available).
+@item \"bdf\"
+@item \"stiff\"
+Use stiff backward differentiation formula (BDF) method.  If a
+function to compute the Jacobian is not supplied, @code{lsode} will
+compute a finite difference approximation of the Jacobian matrix.
+@end table
+  END_DOC_ITEM
   TYPE = "std::string"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_VALUE = {"stiff"}
   SET_BODY
     if (val == "stiff" || val == "bdf")
       $OPTVAR = "stiff";
     else if (val == "non-stiff" || val == "adams")
       $OPTVAR = "non-stiff";
@@ -67,16 +82,28 @@ The step size to be attempted on the fir
 automatically).
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
+  NAME = "maximum order"
+  DOC_ITEM
+Restrict the maximum order of the solution method.  If using the Adams
+method, this option must be between 1 and 12.  Otherwise, it must be
+between 1 and 5, inclusive.
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
   NAME = "maximum step size"
   DOC_ITEM
 Setting the maximum stepsize will avoid passing over very large
 regions  (default is not specified).
   END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -273,43 +273,49 @@ ODESSA::integrate (double tout)
       int idf;
 
       if (user_bsub)
 	idf = 1;
       else
 	idf = 0;
       
       iopt(2) = idf;
-      
-      
+
       if (restart)
 	{
 	  restart = false;
 	  istate = 1;
 	}
-      
+
+      int max_maxord = 0;
+
       if (integration_method () == "stiff")
 	{
 	  if (user_jsub)
 	    method_flag = 21;
 	  else
 	    method_flag = 22;
+
+	  max_maxord = 5;
+
 	  if (isopt)
 	    {
 	      liw = 21 + n + npar;
 	      lrw = 22 + 8*(npar+1)*n + n*n + n;
 	    }
 	  else
 	    {
 	      liw = 20 + n;
 	      lrw = 22 + 9*n + n*n;
 	    }
 	}
       else
 	{
+	  max_maxord = 12;
+
 	  if (isopt)
 	    {
 	      if (user_jsub)
 		method_flag = 11;
 	      else
 		method_flag = 12;
 	      liw = 21 + n + npar;
 	      lrw = 22 + 15*(npar+1)*n + n*n + n;
@@ -333,18 +339,37 @@ ODESSA::integrate (double tout)
       if (rwork.length () != lrw)
 	{
 	  rwork.resize (lrw);
 	  
 	  for (int i = 4; i < 10; i++)
 	    rwork.elem (i) = 0.0;
 	}
       
+      maxord = maximum_order ();
+
+      if (maxord >= 0)
+	{
+	  if (maxord > 0 && maxord <= max_maxord)
+	    {
+	      iwork(4) = maxord;
+	      iopt(0) = 1;
+	    }
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+		("odessa: invalid value for maximum order");
+	      integration_error = true;
+	      return;
+	    }
+	}
+
       initialized = true;
     }
+
   integration_error = false;
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
 
   if (! sanity_checked)
diff --git a/liboctave/ODESSA.h b/liboctave/ODESSA.h
--- a/liboctave/ODESSA.h
+++ b/liboctave/ODESSA.h
@@ -93,16 +93,17 @@ private:
 
   bool initialized;
 
   bool sanity_checked;
 
   int liw;  
   int lrw;
   int method_flag;
+  int maxord;
   Array<int> iwork;
   Array<double> rwork;
   int itask;
   Array<int> iopt;
   int isopt;
 
   Array<int> neq;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2002-12-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (read_mat_ascii_data): Allow commas to separate values.
+
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: No need to add $(LIBKPATHSEA) to LINK_DEPS, since
 	it is not included in liboctave.
 
 2002-12-18  JD Cole <jdcole@san.rr.com>
 
 	* pt-check.cc (tree_checker::visit_subplot_axes,
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1894,17 +1894,17 @@ get_lines_and_columns (std::istream& is,
   while (is && ! error_state)
     {
       OCTAVE_QUIT;
 
       std::string buf = get_mat_data_input_line (is);
 
       file_line_number++;
 
-      size_t beg = buf.find_first_not_of (" \t");
+      size_t beg = buf.find_first_not_of (", \t");
 
       // If we see a CR as the last character in the buffer, we had a
       // CRLF pair as the line separator.  Any other CR in the text
       // will not be considered as whitespace.
 
       if (beg != NPOS && buf[beg] == '\r' && beg == buf.length () - 1)
 	{
 	  // We had a blank line ending with a CRLF.  Handle it the
@@ -1913,21 +1913,21 @@ get_lines_and_columns (std::istream& is,
 	}
 
       int tmp_nc = 0;
 
       while (beg != NPOS)
 	{
 	  tmp_nc++;
 
-	  size_t end = buf.find_first_of (" \t", beg);
+	  size_t end = buf.find_first_of (", \t", beg);
 
 	  if (end != NPOS)
 	    {
-	      beg = buf.find_first_not_of (" \t", end);
+	      beg = buf.find_first_not_of (", \t", end);
 
 	      if (buf[beg] == '\r' && beg == buf.length () - 1)
 		{
 		  // We had a line with trailing spaces and
 		  // ending with a CRLF, so this should look like EOL,
 		  // not a new colum.
 		  break;
 		}
@@ -1989,64 +1989,101 @@ read_mat_ascii_data (std::istream& is, c
   if (pos != NPOS)
     varname = varname.substr (0, pos);
 
   if (valid_identifier (varname))
     {
       int nr = 0;
       int nc = 0;
 
+      int total_count = 0;
+
       get_lines_and_columns (is, filename, nr, nc);
 
       OCTAVE_QUIT;
 
       if (! error_state && nr > 0 && nc > 0)
 	{
 	  Matrix tmp (nr, nc);
 
 	  if (nr < 1 || nc < 1)
 	    is.clear (std::ios::badbit);
 	  else
 	    {
 	      double d;
 	      for (int i = 0; i < nr; i++)
 		{
 		  std::string buf = get_mat_data_input_line (is);
+		  std::cerr << buf<< std::endl;
 
 #ifdef HAVE_SSTREAM
 		  std::istringstream tmp_stream (buf);
 #else
 		  std::istrstream tmp_stream (buf.c_str ());
 #endif
 
 		  for (int j = 0; j < nc; j++)
 		    {
 		      OCTAVE_QUIT;
 
 		      d = octave_read_double (tmp_stream);
 
-		      if (tmp_stream)
-			tmp.elem (i, j) = d;
+		      if (tmp_stream || tmp_stream.eof ())
+			{
+			  tmp.elem (i, j) = d;
+			  total_count++;
+
+			  // Skip whitespace and commas.
+			  char c;
+			  while (1)
+			    {
+			      tmp_stream >> c;
+
+			      if (! tmp_stream)
+				break;
+
+			      if (! (c == ' ' || c == '\t' || c == ','))
+				{
+				  tmp_stream.putback (c);
+				  break;
+				}
+			    }
+
+			  if (tmp_stream.eof ())
+			    break;
+			}
 		      else
 			{
 			  error ("load: failed to read matrix from file `%s'",
 				 filename.c_str ());
 
 			  return retval;
 			}
 
 		    }
 		}
 	    }
 
-	  if (is)
+	  if (is || is.eof ())
 	    {
-	      tc = tmp;
-
-	      retval = varname;
+	      // XXX FIXME XXX -- not sure this is best, but it works.
+
+	      if (is.eof ())
+		is.clear ();
+
+	      int expected = nr * nc;
+
+	      if (expected == total_count)
+		{
+		  tc = tmp;
+		  retval = varname;
+		}
+	      else
+		error ("load: expected %d elements, found %d",
+		       expected, total_count);
 	    }
 	  else
 	    error ("load: failed to read matrix from file `%s'",
 		   filename.c_str ());
 	}
       else
 	error ("load: unable to extract matrix size from file `%s'",
 	       filename.c_str ());
