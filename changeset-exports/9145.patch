# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1240390493 -7200
#      Wed Apr 22 10:54:53 2009 +0200
# Node ID 53364bb317d4dc10fdd26b365be9c191fa7f0325
# Parent  c6463412aebb86f4f7320fed8b7ebe5dc833d4d2
fix concatenation with all-zero matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-04-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::do_init_element):
+	Update class name even for all-zeros elements.
+	(get_concat_class): Update the default value if possible.
+
 2009-04-21  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (Fassignin): Add missing unwind_protect frame.
 
 	* toplev.h (push (symbol_table::scope_id, symbol_table::context_id)):
 	New function.
 
 	* toplev.cc (main_loop): Don't call symbol_table::reset_scope.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -190,16 +190,18 @@ private:
 
 std::string
 get_concat_class (const std::string& c1, const std::string& c2)
 {
   std::string retval = octave_base_value::static_class_name ();
 
   if (c1 == c2)
     retval = c1;
+  else if (c1 == retval)
+    retval = c2;
   else
     {
       bool c1_is_int = (c1 == "int8" || c1 == "uint8"
 			|| c1 == "int16" || c1 == "uint16"
 			|| c1 == "int32" || c1 == "uint32"
 			|| c1 == "int64" || c1 == "uint64");
       bool c2_is_int = (c2 == "int8" || c2 == "uint8"
 			|| c2 == "int16" || c2 == "uint16"
@@ -258,38 +260,37 @@ tm_row_const::tm_row_const_rep::do_init_
 {
   octave_idx_type this_elt_nr = val.rows ();
   octave_idx_type this_elt_nc = val.columns ();
 
   std::string this_elt_class_nm = val.class_name ();
 
   dim_vector this_elt_dv = val.dims ();
 
+  class_nm = get_concat_class (class_nm, this_elt_class_nm);
+
+
   if (! this_elt_dv.all_zero ())
     {
       all_mt = false;
 
       if (first_elem)
 	{
 	  first_elem = false;
 
-	  class_nm = this_elt_class_nm;
-
 	  dv.resize (this_elt_dv.length ());
 	  for (int i = 2; i < dv.length (); i++)
 	    dv.elem (i) = this_elt_dv.elem (i);
 
 	  dv.elem (0) = this_elt_nr;
 
 	  dv.elem (1) = 0;
 	}
       else
 	{
-	  class_nm = get_concat_class (class_nm, this_elt_class_nm);
-
 	  int len = (this_elt_dv.length () < dv.length ()
 		     ? this_elt_dv.length () : dv.length ());
 
 	  if (this_elt_nr != dv (0))
 	    {
 	      eval_error ("number of rows must match",
 			  elt->line (), elt->column (), this_elt_nr, dv (0));
 	      return false;
