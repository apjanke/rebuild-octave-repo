# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1374172231 14400
#      Thu Jul 18 14:30:31 2013 -0400
# Node ID adf06e03fbdd0b7a58e6c3d8a66fec0729e0c454
# Parent  21ed3e2c3be619ee1f67bf7eb9c1c4ce7a69ddda
Enable/disable editor actions based on available editor windows

* libgui/src/m-editor/file-editor.h, libgui/src/m-editor/file-editor.cc
  (class file_editor): Added remove_bookmark, close_all and close_others actions as class variables.
  (file_editor::check_actions): New functions.
  (file_editor::add_file_editor_tab): call check_actions.
  (file_editor::construct): call check_actions, use new class vars where added.
  (file_editor::handle_tab_remove_request): call check_actions.

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -669,16 +669,17 @@ file_editor::handle_tab_remove_request (
         {
           if (_tab_widget->widget (i) == fileEditorTab)
             {
               _tab_widget->removeTab (i);
               delete fileEditorTab;
             }
         }
     }
+    check_actions ();
 }
 
 void
 file_editor::handle_add_filename_to_list (const QString& fileName, QWidget *ID)
 {
   // Should we allow multiple tabs for a single file?
 
   editor_tab_map[fileName] = ID;
@@ -770,17 +771,17 @@ file_editor::construct (void)
                    tr ("Paste"), _tool_bar);
 
   _next_bookmark_action = new QAction (tr ("&Next Bookmark"), _tool_bar);
 
   _previous_bookmark_action = new QAction (tr ("Pre&vious Bookmark"), _tool_bar);
 
   _toggle_bookmark_action = new QAction (tr ("Toggle &Bookmark"), _tool_bar);
 
-  QAction *remove_bookmark_action
+  _remove_bookmark_action
     = new QAction (tr ("&Remove All Bookmarks"), _tool_bar);
 
   QAction *next_breakpoint_action
     = new QAction (QIcon (":/actions/icons/bp_next.png"),
                    tr ("&Next breakpoint"), _tool_bar);
   QAction *previous_breakpoint_action
     = new QAction (QIcon (":/actions/icons/bp_prev.png"),
                    tr ("Pre&vious breakpoint"), _tool_bar);
@@ -870,20 +871,22 @@ file_editor::construct (void)
   fileMenu->addAction (_save_action);
   fileMenu->addAction (_save_as_action);
 
   fileMenu->addSeparator ();
   _close_action =
       fileMenu->addAction (QIcon::fromTheme("window-close",
                                   QIcon (":/actions/icons/fileclose.png")),
                        tr ("&Close"), this, SLOT (request_close_file (bool)));
-  fileMenu->addAction (QIcon::fromTheme("window-close",
+  _close_all_action =
+      fileMenu->addAction (QIcon::fromTheme("window-close",
                                       QIcon (":/actions/icons/fileclose.png")),
                        tr ("Close All"),
                        this, SLOT (request_close_all_files (bool)));
+  _close_others_action = 
   fileMenu->addAction (QIcon::fromTheme("window-close",
                                       QIcon (":/actions/icons/fileclose.png")),
                        tr ("Close Other Files"),
                        this, SLOT (request_close_other_files (bool)));
 
   fileMenu->addSeparator ();
   fileMenu->addAction (_print_action);
 
@@ -901,17 +904,17 @@ file_editor::construct (void)
   editMenu->addAction (_find_action);
   editMenu->addSeparator ();
   editMenu->addAction (_comment_selection_action);
   editMenu->addAction (_uncomment_selection_action);
   editMenu->addSeparator ();
   editMenu->addAction (_toggle_bookmark_action);
   editMenu->addAction (_next_bookmark_action);
   editMenu->addAction (_previous_bookmark_action);
-  editMenu->addAction (remove_bookmark_action);
+  editMenu->addAction (_remove_bookmark_action);
   editMenu->addSeparator ();
   editMenu->addAction (_goto_line_action);
   _menu_bar->addMenu (editMenu);
 
   _debug_menu = new QMenu (tr ("&Debug"), _menu_bar);
   _debug_menu->addAction (toggle_breakpoint_action);
   _debug_menu->addAction (next_breakpoint_action);
   _debug_menu->addAction (previous_breakpoint_action);
@@ -980,17 +983,17 @@ file_editor::construct (void)
            this, SLOT (request_toggle_bookmark ()));
 
   connect (_next_bookmark_action, SIGNAL (triggered ()),
            this, SLOT (request_next_bookmark ()));
 
   connect (_previous_bookmark_action, SIGNAL (triggered ()),
            this, SLOT (request_previous_bookmark ()));
 
-  connect (remove_bookmark_action, SIGNAL (triggered ()),
+  connect (_remove_bookmark_action, SIGNAL (triggered ()),
            this, SLOT (request_remove_bookmark ()));
 
   connect (toggle_breakpoint_action, SIGNAL (triggered ()),
            this, SLOT (request_toggle_breakpoint ()));
 
   connect (next_breakpoint_action, SIGNAL (triggered ()),
            this, SLOT (request_next_breakpoint ()));
 
@@ -1031,16 +1034,18 @@ file_editor::construct (void)
   if (settings->value ("editor/restoreSession", true).toBool ())
     {
       QStringList sessionFileNames
         = settings->value ("editor/savedSessionTabs", QStringList ()).toStringList ();
 
       for (int n = 0; n < sessionFileNames.count (); ++n)
         request_open_file (sessionFileNames.at (n));
     }
+
+    check_actions ();
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f, const QString& fn)
 {
   _tab_widget->addTab (f, fn);
 
   // Signals from the file editor_tab
@@ -1159,16 +1164,18 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_delete_debugger_pointer (const QWidget*, int)),
            f, SLOT (delete_debugger_pointer (const QWidget*, int)));
 
   connect (this, SIGNAL (fetab_do_breakpoint_marker (bool, const QWidget*,
                                                      int)),
            f, SLOT (do_breakpoint_marker (bool, const QWidget*, int)));
 
   _tab_widget->setCurrentWidget (f);
+
+  check_actions ();
 }
 
 void
 file_editor::copyClipboard ()
 {
   QWidget * foc_w = focusWidget ();
 
   if(foc_w && foc_w->inherits ("octave_qscintilla"))
@@ -1241,10 +1248,42 @@ file_editor::set_shortcuts (bool set)
       _save_as_action->setShortcut (no_key);
       _close_action->setShortcut (no_key);
 
       _redo_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
     }
 }
 
+void
+file_editor::check_actions ()
+{
+  bool  have_tabs = _tab_widget->count () > 0;
+
+  _comment_selection_action->setEnabled (have_tabs);
+  _uncomment_selection_action->setEnabled (have_tabs);
+
+  _copy_action->setEnabled (have_tabs);
+  _cut_action->setEnabled (have_tabs);
+  _paste_action->setEnabled (have_tabs);
+
+  _find_action->setEnabled (have_tabs);
+  _goto_line_action->setEnabled (have_tabs);
+
+  _next_bookmark_action->setEnabled (have_tabs);
+  _previous_bookmark_action->setEnabled (have_tabs);
+  _toggle_bookmark_action->setEnabled (have_tabs);
+
+  _print_action->setEnabled (have_tabs);
+  _run_action->setEnabled (have_tabs);
+
+  _save_action->setEnabled (have_tabs);
+  _save_as_action->setEnabled (have_tabs);
+  _close_action->setEnabled (have_tabs);
+  _close_all_action->setEnabled (have_tabs);
+  _close_others_action->setEnabled (have_tabs && _tab_widget->count () > 1);
+
+  _undo_action->setEnabled (have_tabs);
+  _redo_action->setEnabled (have_tabs);
+}
+
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -52,16 +52,17 @@ public:
   QMenu *get_mru_menu (void) { return _mru_file_menu; }
   QMenu *debug_menu (void);
   QToolBar *toolbar (void);
 
   void set_focus (void);
   void handle_enter_debug_mode (void);
   void handle_exit_debug_mode (void);
 
+  void check_actions (void);
 signals:
 
   void fetab_settings_changed (const QSettings *settings);
   void fetab_close_request (const QWidget* ID, bool app_closing = false);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
   void fetab_save_file (const QWidget* ID, const QString& fileName,
@@ -191,23 +192,26 @@ private:
   QAction *_paste_action;
 
   QAction *_find_action;
   QAction *_goto_line_action;
 
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
+  QAction * _remove_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
 
   QAction *_save_action;
   QAction *_save_as_action;
   QAction *_close_action;
+  QAction *_close_all_action;
+  QAction *_close_others_action;
 
   QAction *_redo_action;
   QAction *_undo_action;
 
   QTabWidget *_tab_widget;
 
   int _marker_breakpoint;
 
