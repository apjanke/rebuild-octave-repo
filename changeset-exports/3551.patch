# HG changeset patch
# User jwe
# Date 949545044 0
#      Thu Feb 03 02:30:44 2000 +0000
# Node ID 4833e231e05b2b9aec064cd9422782a5681f8c61
# Parent  bc492f4a94cb285296776048c152b2118a92772c
[project @ 2000-02-03 02:30:44 by jwe]

diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -65,17 +65,17 @@ public:
 protected:
 
   ~octave_fstream (void) { }
 
 private:
 
   std::string nm;
 
-  fstream fs;
+  std::fstream fs;
 
   // No copying!
 
   octave_fstream (const octave_fstream&);
 
   octave_fstream& operator = (const octave_fstream&);
 };
 
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -109,17 +109,17 @@ std::string
 default_history_file (void)
 {
   std::string file;
 
   std::string env_file = octave_env::getenv ("OCTAVE_HISTFILE");
 
   if (! env_file.empty ())
     {
-      fstream f (env_file.c_str (), (std::ios::in | std::ios::out));
+      std::fstream f (env_file.c_str (), (std::ios::in | std::ios::out));
 
       if (f)
 	{
 	  file = env_file;
 	  f.close ();
 	}
     }
 
@@ -222,17 +222,17 @@ do_history (int argc, const string_vecto
     octave_stdout << hlist[i] << "\n";
 }
 
 // Read the edited history lines from STREAM and return them
 // one at a time.  This can read unlimited length lines.  The
 // caller should free the storage.
 
 static char *
-edit_history_readline (fstream& stream)
+edit_history_readline (std::fstream& stream)
 {
   char c;
   int line_len = 128;
   int lindex = 0;
   char *line = new char [line_len];
   line[0] = '\0';
 
   while (stream.get (c))
@@ -400,17 +400,17 @@ mk_tmp_hist_file (int argc, const string
       int t = hist_end;
       hist_end = hist_beg;
       hist_beg = t;
       reverse = 1;
     }
 
   std::string name = file_ops::tempnam ("", "oct-");
 
-  fstream file (name.c_str (), std::ios::out);
+  std::fstream file (name.c_str (), std::ios::out);
 
   if (! file)
     {
       error ("%s: couldn't open temporary file `%s'", warn_for,
 	     name.c_str ());
       return retval;
     }
 
@@ -452,17 +452,17 @@ do_edit_history (int argc, const string_
 
   system (cmd.c_str ());
 
   octave_set_interrupt_handler (old_interrupt_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
 
-  fstream file (name.c_str (), std::ios::in);
+  std::fstream file (name.c_str (), std::ios::in);
 
   char *line;
   int first = 1;
   while ((line = edit_history_readline (file)) != 0)
     {
       // Skip blank lines.
 
       if (line[0] == '\n')
