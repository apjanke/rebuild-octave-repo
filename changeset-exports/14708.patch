# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1338495685 -7200
#      Thu May 31 22:21:25 2012 +0200
# Branch gui
# Node ID b44ae6c1484a27d9cf469daf123fd4184b0feb5d
# Parent  674740c44c09bbb7c3fa76ce60aa75c51a3334d8
# Parent  52c5fb67fa5f2f0f14e4eabfc7f8fd3a1a237a56
maint: periodic merge of default to gui

diff --git a/.hgtags b/.hgtags
--- a/.hgtags
+++ b/.hgtags
@@ -61,8 +61,9 @@ 64d9f33313cc8c691974bcd123357e24bccbabdc
 704f7895eef03008dd79848eb9da4bfb40787d73 release-3.6.0
 95c43fc8dbe1a07a46fefb3372df5b2309d874fd rc-3-6-1-0
 0000000000000000000000000000000000000000 release-3-2-4
 e320928eeb3aa2370b792e83dafc3e0ddecdc871 release-3-2-4
 ba4d6343524b406b0d15aee34579f80783581c54 release-3-6-1
 704f7895eef03008dd79848eb9da4bfb40787d73 release-3-6-0
 f947d2922febf12dcd1fb6e21b356756ecb54e55 rc-3-6-2-0
 4460c4fb20e6a5d3b1972fa737d4e00eb921545a rc-3-6-2-2
+551566201318bf615b27c60ccf9368f4844008bd release-3-6-2
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -1159,24 +1159,29 @@ using std::unordered_map;
 
               // Perform the Knuth shuffle only keeping track of moved
               // entries in the map
               for (octave_idx_type i = 0; i < m; i++)
                 {
                   octave_idx_type k = i +
                     gnulib::floor (rvec[i] * (n - i));
 
-                  if (map.find(k) == map.end())
+                  //For shuffling first m entries, no need to use extra
+                  //storage
+                  if (k < m)
                     {
-                      map[k] = ivec[i];
-                      ivec[i] = k;
+                      std::swap (ivec[i], ivec[k]);
                     }
                   else
-                    std::swap (ivec[i], map[k]);
+                    {
+                      if (map.find (k) == map.end ())
+                        map[k] = k;
 
+                      std::swap (ivec[i], map[k]);
+                    }
                 }
             }
           else
             {
 
               // Perform the Knuth shuffle of the first m entries
               for (octave_idx_type i = 0; i < m; i++)
                 {
@@ -1201,9 +1206,16 @@ using std::unordered_map;
     print_usage ();
 
   return retval;
 }
 
 /*
 %!assert (sort (randperm (20)), 1:20)
 %!assert (length (randperm (20,10)), 10)
+
+%!test
+%! rand ("seed", 0);
+%! for i = 1:100
+%!   p = randperm (305, 30);
+%!   assert (length (unique (p)), 30);
+%! endfor
 */
diff --git a/src/DLD-FUNCTIONS/str2double.cc b/src/DLD-FUNCTIONS/str2double.cc
--- a/src/DLD-FUNCTIONS/str2double.cc
+++ b/src/DLD-FUNCTIONS/str2double.cc
@@ -49,25 +49,25 @@ single_num (std::istringstream& is, doub
 
   // Skip spaces.
   while (isspace (c))
     {
       is.get ();
       c = is.peek ();
     }
 
-  if (c == 'I')
+  if (std::toupper (c) == 'I')
     {
       // It's infinity.
       is.get ();
       char c1 = is.get (), c2 = is.get ();
-      if (c1 == 'n' && c2 == 'f')
+      if (std::tolower (c1) == 'n' && std::tolower (c2) == 'f')
         {
           num = octave_Inf;
-          is.peek (); // May sets EOF bit.
+          is.peek (); // May set EOF bit.
         }
       else
         is.setstate (std::ios::failbit); // indicate that read has failed.
     }
   else if (c == 'N')
     {
       // It's NA or NaN
       is.get ();
@@ -122,23 +122,47 @@ extract_num (std::istringstream& is, dou
 
   // Skip spaces after sign.
   while (isspace (c))
     {
       is.get ();
       c = is.peek ();
     }
 
-  // It's i*num or just i.
-  if (is_imag_unit (c))
+  // Imaginary number (i*num or just i), or maybe 'inf'.
+  if (c == 'i')
     {
-      imag = true;
+      // possible infinity.
       is.get ();
       c = is.peek ();
 
+      if (is.eof ())
+        {
+          // just 'i' and string is finished.  Return immediately.
+          imag = true;
+          num = 1.0;
+          if (negative)
+            num = -num;
+          return is;
+        }
+      else
+        { 
+          if (std::tolower (c) != 'n')
+            imag = true;
+          is.unget ();
+        }
+    }
+  else if (c == 'j')
+    imag = true;
+    
+  // It's i*num or just i
+  if (imag)
+    {
+      is.get ();
+      c = is.peek ();
       // Skip spaces after imaginary unit.
       while (isspace (c))
         {
           is.get ();
           c = is.peek ();
         }
 
       if (c == '*')
@@ -364,17 +388,19 @@ risk of using @code{eval} on unknown dat
 %!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -5])
 %!assert (str2double ({"2 + j","1.25e-3","-05"}), [2+i, 1.25e-3, -5])
 %!assert (str2double (1), NaN)
 %!assert (str2double ("1 2 3 4"), NaN)
 %!assert (str2double ("Hello World"), NaN)
 %!assert (str2double ("NaN"), NaN)
 %!assert (str2double ("NA"), NA)
 %!assert (str2double ("Inf"), Inf)
+%!assert (str2double ("iNF"), Inf)
 %!assert (str2double ("-Inf"), -Inf)
 %!assert (str2double ("Inf*i"), complex (0, Inf))
+%!assert (str2double ("iNF*i"), complex (0, Inf))
 %!assert (str2double ("NaN + Inf*i"), complex (NaN, Inf))
 %!assert (str2double ("Inf - Inf*i"), complex (Inf, -Inf))
 %!assert (str2double ("-i*NaN - Inf"), complex (-Inf, -NaN))
 %!assert (str2double ({"abc", "4i"}), [NaN + 0i, 4i])
 %!assert (str2double ({2, "4i"}), [NaN + 0i, 4i])
 %!assert (str2double (zeros(3,1,2)), NaN (3,1,2))
 */
