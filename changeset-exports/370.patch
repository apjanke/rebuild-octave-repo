# HG changeset patch
# User jwe
# Date 761470650 0
#      Thu Feb 17 07:37:30 1994 +0000
# Node ID 58d05e7b5b2d33f77bc6af135711184ef0f2769c
# Parent  f436b7a5f26a9273e25cc18fdcddbdf3328dc389
[project @ 1994-02-17 07:36:11 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -196,17 +196,18 @@ return_valid_file (const tree_constant& 
       }
     else
       error ("inapproriate file specifier");
 
   return (Pix) NULL;
 }
 
 static Pix 
-fopen_file_for_user (const tree_constant& arg, const char *mode)
+fopen_file_for_user (const tree_constant& arg, const char *mode,
+		     const char *warn_for)
 {
   char *file_name = arg.string_value ();
 
   FILE *file_ptr = fopen (file_name, mode);
   if (file_ptr != (FILE *) NULL)
     {
       file_info file (++file_count, file_name, file_ptr, mode);
       file_list.append (file);
@@ -218,17 +219,17 @@ fopen_file_for_user (const tree_constant
 	{
 	  file_from_list = file_list (p);
 	  if (strcmp (file_from_list.name (), file_name) == 0)
 	    return p;
 	  file_list.next (p);
 	}
     }
 
-  error ("problems automatically opening file for user");
+  error ("%s: unable to open file `%s'", warn_for, file_name);
 
   return (Pix) NULL;
 }
 
 static Pix
 file_io_get_file (const tree_constant arg, const char *mode,
 		  const char *warn_for)
 {
@@ -241,17 +242,17 @@ file_io_get_file (const tree_constant ar
 	  char *name = arg.string_value ();
 
 	  struct stat buffer;
 	  int status = stat (name, &buffer);
 
 	  if (status == 0)
 	    {
 	      if ((buffer.st_mode & S_IFREG) == S_IFREG)
-		p = fopen_file_for_user (arg, mode);
+		p = fopen_file_for_user (arg, mode, warn_for);
 	      else
 		error ("%s: invalid file type", warn_for);
 	    }
 	  else
 	    error ("%s: can't stat file `%s'", warn_for, name);
 	}
       else
 	error ("%s: invalid file specifier", warn_for);
@@ -413,17 +414,17 @@ fopen_internal (const tree_constant *arg
       retval = new tree_constant[2];
       retval[0] = tree_constant ((double) file.number ());
 
       return retval;
     }
 
   if (! args[2].is_string_type ())
     {
-      error ("fopen: mode must be a string");
+      error ("fopen: file mode must be a string");
       return retval;
     }
 
   char *name = args[1].string_value ();
   char *mode = args[2].string_value ();
 
   if (! valid_mode (mode))
     {
@@ -437,17 +438,17 @@ fopen_internal (const tree_constant *arg
       error ("fopen: can't open directory");
       return retval;
     }
 
   FILE *file_ptr = fopen (name, mode);
 
   if (file_ptr == (FILE *) NULL)
     {
-      error ("fopen: file does not exist");
+      error ("fopen: unable to open file `%s'", name);
       return retval;
     }
 
   int number = file_count++;
 
   file_info file (number, name, file_ptr, mode);
   file_list.append (file);
 
