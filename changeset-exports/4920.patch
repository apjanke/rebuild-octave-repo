# HG changeset patch
# User jwe
# Date 1090952178 0
#      Tue Jul 27 18:16:18 2004 +0000
# Node ID b22a7a1db0d50e2e05fb71a462d3b1472cc11986
# Parent  a1073eef650cb3dde97f4d10f7b397920e479f1d
[project @ 2004-07-27 18:15:25 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-07-27  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.h (bitshift): New arg, MASK.
+	(OCTAVE_INT_BITSHIFT_OP): Bitshift does not saturate.
+
 2004-07-23  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array<T>::reshape): Return *this if no change in size.
 
 2004-07-23  David Bateman  <dbateman@free.fr>
 
 	* Array.cc, Array.h (cat_ra): Delete.
 	* Array.h, Array-C.cc, Array-d.cc, Array-ch.cc, Array-i.cc 
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -274,30 +274,31 @@ OCTAVE_INT_BITCMP_OP (|)
 OCTAVE_INT_BITCMP_OP (^)
 
 #define OCTAVE_INT_BITSHIFT_OP(OP) \
  \
   template <class T1, class T2> \
   octave_int<T1> \
   operator OP (const octave_int<T1>& x, const T2& y) \
   { \
-    return x.value () OP y; \
+    return ((x.value () OP y) > std::numeric_limits<T1>::max ()) ? 0 : (x.value () OP y); \
   }
 
 OCTAVE_INT_BITSHIFT_OP (<<)
 OCTAVE_INT_BITSHIFT_OP (>>)
 
 template <class T>
 octave_int<T>
-bitshift (const octave_int<T>& a, int n)
+bitshift (const octave_int<T>& a, int n,
+	  const octave_int<T>& mask = std::numeric_limits<T>::max ())
 {
   if (n > 0)
-    return a << n;
+    return (a.value () << n) & mask.value ();
   else if (n < 0)
-    return a >> -n;
+    return (a.value () >> -n) & mask.value ();
   else
     return a;
 }
 
 #define OCTAVE_INT_CMP_OP(OP) \
  \
   template <class T1, class T2> \
   bool \
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -11,17 +11,17 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; if not, write to the Free Software
 ## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{X} =} bitcmp (@var{a},@var{k})
-## returns the @var{k}-bit complement of integers in @var{a}. If
+## Return the @var{k}-bit complement of integers in @var{a}.  If
 ## @var{k} is omitted @code{k = log2(bitmax) + 1} is assumed.
 ##
 ## @example
 ## bitcmp(7,4)
 ## @result{} 8
 ## dec2bin(11)
 ## @result{} 1011
 ## dec2bin(bitcmp(11))
@@ -31,35 +31,35 @@
 ## @seealso{bitand,bitor,bitxor,bitset,bitget,bitcmp,bitshift,bitmax}
 ## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitcmp (A, n)
   
   if (nargin < 1 || nargin > 2)
-    usage ("bitcmp(A,n)");
+    usage ("bitcmp (A, n)");
   endif
 
-  cname = class(A);
+  cname = class (A);
   if (strcmp (cname, "double"))
     Bmax = bitmax;
     Amax = log2 (Bmax) + 1;
-  elseif strcmp("uint",substr(cname,1,4))
-    Bmax = intmax(cname);
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  elseif strcmp ("uint", substr (cname, 1, 4))
+    Bmax = intmax (cname);
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 1);"]);
   else
-    Bmax = eval([cname, " (-1);"]);
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+    Bmax = eval ([cname, " (-1);"]);
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 2);"]);
   endif
 
-  Aone = eval([ cname, "(1);"]);
+  Aone = eval ([ cname, "(1);"]);
   if (nargin == 2)
-    m = eval([cname, " (n(:));"]);
-    if (any(m < Aone) || any( m > Amax))
+    m = eval ([cname, " (n(:));"]);
+    if (any (m < Aone) || any (m > Amax))
       error ("n must be in the range [1,%d]", Amax);
     endif
-    X = bitxor(A, bitshift(Bmax, -n));
+    X = bitxor (A, bitshift (Bmax, -n));
   else
-    X = bitxor(A, Bmax);
+    X = bitxor (A, Bmax);
   endif
 
 endfunction
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -11,43 +11,44 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; if not, write to the Free Software
 ## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{X} =} bitget (@var{a},@var{n})
-## returns the status of bit(s) @var{n} of unsigned integers in @var{a}
+## Return the status of bit(s) @var{n} of unsigned integers in @var{a}
 ## the lowest significant bit is @var{n} = 1.
 ##
 ## @example
-## bitget(100,8:-1:1)
+## bitget (100, 8:-1:1)
 ## @result{} 0  1  1  0  0  1  0  0 
 ## @end example
-## @seealso{bitand,bitor,bitxor,bitset,bitcmp,bitshift,bitmax}
+## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, bitmax}
 ## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitget (A, n)
+
   if (nargin != 2)
-    usage ("bitget(A,n)");
+    usage ("bitget (A, n)");
   endif
 
-  cname = class(A);
+  cname = class (A);
   if (strcmp (cname, "double"))
     Amax = log2 (bitmax) + 1;
-  elseif strcmp("uint",substr(cname,1,4))
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  elseif strcmp ("uint", substr (cname, 1, 4))
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 1);"]);
   else
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 2);"]);
   endif
 
-  Aone = eval([ cname, "(1);"]);
-  m = eval([cname, " (n(:));"]);
-  if (any(m < Aone) || any( m > Amax))
+  Aone = eval ([ cname, "(1);"]);
+  m = eval ([cname, " (n(:));"]);
+  if (any (m < Aone) || any (m > Amax))
     error ("n must be in the range [1,%d]", Amax);
   endif
 
   X = eval (["bitand (A, ", cname, " (2) .^ (", cname, " (n) - Aone)) != ", cname, "(0);"]);
 
 endfunction
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -10,56 +10,57 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; if not, write to the Free Software
 ## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{X} =} bitset (@var{a},@var{n})
-## @deftypefnx {Function File} {@var{X} =} bitset (@var{a},@var{n},@var{v})
-## sets or resets bit(s) @var{N} of unsigned integers in @var{A}.
+## @deftypefn {Function File} {@var{x} =} bitset (@var{a}, @var{n})
+## @deftypefnx {Function File} {@var{x} =} bitset (@var{a}, @var{n}, @var{v})
+## Set or reset bit(s) @var{n} of unsigned integers in @var{a}.
 ## @var{v} = 0 resets and @var{v} = 1 sets the bits.
 ## The lowest significant bit is: @var{n} = 1
 ##
 ## @example
-## dec2bin (bitset(10,1))
+## dec2bin (bitset (10, 1))
 ## @result{} 1011
 ## @end example
 ##
-## @seealso{bitand,bitor,bitxor,bitget,bitcmp,bitshift,bitmax}
+## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, bitmax}
 ## @end deftypefn
 
 ## Liberally based of the version by Kai Habel from octave-forge
 
 function X = bitset (A, n, value)
+
   if (nargin < 2 || nargin > 3)
     usage ("bitset (A, n, v)");
   endif
 
   if (nargin == 2)
     value = 1;
   endif
   
-  cname = class(A);
+  cname = class (A);
   if (strcmp (cname, "double"))
     Bmax = bitmax;
     Amax = log2 (Bmax) + 1;
-  elseif strcmp("uint",substr(cname,1,4))
-    Bmax = intmax(cname);
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  elseif strcmp("uint", substr (cname, 1, 4))
+    Bmax = intmax (cname);
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 1);"]);
   else
-    Bmax = eval([cname, " (-1);"]);
-    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+    Bmax = eval ([cname, " (-1);"]);
+    Amax = eval ([cname, " (log2 (double (intmax (cname))) + 2);"]);
   endif
 
-  Aone = eval([ cname, "(1);"]);
-  m = eval([cname, " (n(:));"]);
-  if (any(m < Aone) || any( m > Amax))
+  Aone = eval ([ cname, "(1);"]);
+  m = eval ([cname, " (n(:));"]);
+  if (any (m < Aone) || any (m > Amax))
     error ("n must be in the range [1,%d]", Amax);
   endif
 
   ## XXX FIXME XXX Need extra cast to cname due to bad return value of .^
   X = eval (["bitand (A, Bmax - ", cname, " (", cname, " (2) .^ (", cname, " (n) - Aone)));"]);
 
   if (value)
     X = eval (["bitor (A, ", cname, " (2) .^ (", cname, " (n) - Aone));"]);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2004-07-27  John W. Eaton  <jwe@octave.org>
 
+	* bitfcns.cc (DO_BITSHIFT): Pass mask to bitshift.
+	(bitshift (double, int, EIGHT_BYTE_INT): New arg, mask.
+	(DO_UBITSHIFT, DO_SBITSHIFT): Use bitshfit, not operator >>.
+	Use nbits function from octave_int type to set bits_in_type.
+
 	* ov-struct.cc (Fisfield): Only print usage message if number of
 	arguments is incorrect.  Return false for invalid arguments.
 	From Andy Adler <adler@site.uottawa.ca>.
 
 2004-07-27  David Bateman  <dbateman@free.fr>
 
 	* Cell.cc (Cell::index): Quit early if an error occurs when
 	creating index vector object.
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -260,55 +260,55 @@ Software Foundation, 59 Temple Place - S
   else \
     print_usage (FNAME); \
  \
   return retval
 
 DEFUN (bitand, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitand (@var{x}, @var{y})\n\
-calculates the bitwise AND of nonnegative integers.\n\
+Return the bitwise AND of nonnegative integers.\n\
 @var{x}, @var{y} must be in range [0..bitmax]\n\
 @end deftypefn\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}")
 {
   BITOP (&, "bitand");
 }
 
 DEFUN (bitor, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitor (@var{x}, @var{y})\n\
-calculates the bitwise OR of nonnegative integers.\n\
+Return the bitwise OR of nonnegative integers.\n\
 @var{x}, @var{y} must be in range [0..bitmax]\n\
 @end deftypefn\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}")
 {
   BITOP (|, "bitor");
 }
 
 DEFUN (bitxor, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitxor (@var{x}, @var{y})\n\
-calculates the bitwise XOR of nonnegative integers.\n\
+Return the bitwise XOR of nonnegative integers.\n\
 @var{x}, @var{y} must be in range [0..bitmax]\n\
 @end deftypefn\n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}")
 {
   BITOP (^, "bitxor");
 }
 
 static EIGHT_BYTE_INT
-bitshift (const double& a, int n)
+bitshift (double a, int n, EIGHT_BYTE_INT mask)
 {
   if (n > 0)
-    return static_cast<EIGHT_BYTE_INT> (a) << n;
+    return (static_cast<EIGHT_BYTE_INT> (a) << n) & mask;
   else if (n < 0)
-    return static_cast<EIGHT_BYTE_INT> (a) >> -n;
+    return (static_cast<EIGHT_BYTE_INT> (a) >> -n) & mask;
   else
-    return static_cast<EIGHT_BYTE_INT> (a);
+    return static_cast<EIGHT_BYTE_INT> (a) & mask;
 }
 
 // Note that the bitshift operators are undefined if shifted by more
 // bits than in the type, so we need to test for the size of the
 // shift.
 
 #define DO_BITSHIFT(T) \
   if (! error_state) \
@@ -337,68 +337,68 @@ bitshift (const double& a, int n)
 		result.resize (n_dv); \
  \
 	      for (int i = 0; i < m_nel; i++) \
 		if (is_scalar_op) \
 		  for (int k = 0; k < n_nel; k++) \
 		    if (static_cast<int> (n(k)) >= bits_in_type) \
 		      result(i+k) = 0; \
 		    else \
-		      result(i+k) = bitshift (m(i), static_cast<int> (n(k))) & mask; \
+		      result(i+k) = bitshift (m(i), static_cast<int> (n(k)), mask); \
 		else \
 		  if (static_cast<int> (n(i)) >= bits_in_type) \
 		    result(i) = 0;					\
 		  else 						\
-		    result(i) = bitshift (m(i), static_cast<int> (n(i))) & mask; \
+		    result(i) = bitshift (m(i), static_cast<int> (n(i)), mask); \
  \
 	      retval = result; \
 	    } \
 	  else \
 	    error ("bitshift: size of A and N must match, or one operand must be a scalar"); \
 	} \
       else \
 	error ("bitshift: expecting second argument to be integer"); \
     }
 
 #define DO_UBITSHIFT(T, N) \
   do \
     { \
-      int bits_in_type = sizeof (octave_ ## T) << 3; \
+      int bits_in_type = octave_ ## T :: nbits (); \
       T ## NDArray m = m_arg.T ## _array_value (); \
 	octave_ ## T mask = ~0ULL; \
-      if ((N) < static_cast<int> (sizeof (octave_ ## T) << 3)) \
-	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N)); \
+      if ((N) < bits_in_type) \
+	mask = bitshift (mask, (N) - bits_in_type); \
       else if ((N) < 1) \
 	mask = 0; \
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 #define DO_SBITSHIFT(T, N) \
   do \
     { \
-      int bits_in_type = sizeof (octave_ ## T) << 3; \
+      int bits_in_type = octave_ ## T :: nbits (); \
       T ## NDArray m = m_arg.T ## _array_value (); \
 	octave_ ## T mask = -1; \
-      if ((N) < static_cast<int>(sizeof (octave_ ## T) << 3)) \
-	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N)); \
+      if ((N) < bits_in_type) \
+	mask = bitshift (mask, (N) - bits_in_type); \
       else if ((N) < 1) \
 	mask = 0; \
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 DEFUN (bitshift, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Function File} {} bitshift (@var{a}, @var{k}, @var{n})\n\
-return a @var{k} bit shift of @var{n}- digit unsigned\n\
-integers in @var{a}. A positive @var{k} leads to a left shift.\n\
-A negative value to a right shift. If @var{n} is omitted it defaults\n\
-to log2(bitmax)+1. \n\
+Return a @var{k} bit shift of @var{n}- digit unsigned\n\
+integers in @var{a}.  A positive @var{k} leads to a left shift.\n\
+A negative value to a right shift.  If @var{n} is omitted it defaults\n\
+to log2(bitmax)+1.\n\
 @var{n} must be in range [1,log2(bitmax)+1] usually [1,33]\n\
 \n\
 @example\n\
 bitshift (eye (3), 1))\n\
 @result{}\n\
 @group\n\
 2 0 0\n\
 0 2 0\n\
@@ -415,25 +415,33 @@ bitshift ([1, 10], 2, [3,4])\n\
 @seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitmax}")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
-      NDArray n = args(1).array_value ();
       int nbits = 64;
       
-      if (nargin == 3)
+      NDArray n = args(1).array_value ();
+
+      if (error_state)
+	error ("bitshift: expecting integer as second argument");
+      else
 	{
-	  nbits = args(2).nint_value ();
+	  if (nargin == 3)
+	    {
+	      nbits = args(2).int_value ();
 	  
-	  if (nbits < 0)
-	    error ("bitshift: number of bits to mask must be positive");
+	      if (error_state)
+		error ("bitshift: expecting integer as third argument");
+	      else if (nbits < 0)
+		error ("bitshift: number of bits to mask must be positive");
+	    }
 	}
 
       if (error_state)
 	return retval;
 
       octave_value m_arg = args(0);
       std::string cname = m_arg.class_name ();
 
@@ -472,18 +480,18 @@ bitshift ([1, 10], 2, [3,4])\n\
     print_usage ("bitshift");
 
   return retval;
 }
 
 DEFUN (bitmax, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitmax ()\n\
-Returns the largest integer that can be represented as a floating point\n\
-value. That is for IEEE-754 compatiable systems with @code{2^53 - 1}.\n\
+Return the largest integer that can be represented as a floating point\n\
+value.  On IEEE-754 compatiable systems, @code{bitmax} is @code{2^53 - 1}.\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () != 0)
     print_usage ("bitmax");
   else
     retval = (static_cast<double> (0x1FFFFFFFFFFFFFLL));
   return retval;
