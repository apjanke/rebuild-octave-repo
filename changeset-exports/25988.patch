# HG changeset patch
# User Stefan Miereis <stefan.miereis@gmx.de>
# Date 1455236623 -3600
#      Fri Feb 12 01:23:43 2016 +0100
# Node ID 976e7346abf4a99a0ab91f4cc1aeefee802ec881
# Parent  9618c2f96e7a5eea3179f44aeb9f5e051cc2cbf8
Make gui command line mouse compatible for non-windows systems (bug #45003)

* TerminalView.cpp (mousePressEvent): reposition cursor if mouse click
  occurs in the currently editable line of the console window;
  (keyPressEvent): handle selected text as expected when using arrow keys
  or entering printable characters

diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -1565,16 +1565,53 @@ void TerminalView::mousePressEvent(QMous
 
   if ( !_screenWindow ) return;
 
   int charLine;
   int charColumn;
   getCharacterPosition(ev->pos(),charLine,charColumn);
   QPoint pos = QPoint(charColumn,charLine);
 
+  // reposition cursor if mouseclick happens in the currently editable line
+  QVector<LineProperty> lineprop = _screenWindow->getLineProperties ();
+  int lineStart = _screenWindow->cursorPosition ().y ();
+  while (lineprop[lineStart-1] & LINE_WRAPPED)
+    lineStart--;
+
+  if (charLine >= lineStart)
+    {
+      int posInLineCursor = _screenWindow->cursorPosition ().x ()
+                            + qMax (0,(_screenWindow->cursorPosition ().y ()-lineStart))
+                            * _screenWindow->windowColumns ();
+      int posInLineClick = charColumn
+                           + qMax (0, (charLine - lineStart))
+                           * _screenWindow->windowColumns ();
+
+      if (posInLineCursor > posInLineClick)
+        {
+          QKeyEvent *event = new QKeyEvent (QEvent::KeyPress,Qt::Key_Left,
+                                            Qt::NoModifier,QString (""));
+
+          for (int i = 0; i < posInLineCursor - posInLineClick; i++)
+            emit keyPressedSignal (event);
+
+          delete event;
+        }
+      else if (posInLineClick > posInLineCursor)
+        {
+          QKeyEvent *event = new QKeyEvent (QEvent::KeyPress,Qt::Key_Right,
+                                            Qt::NoModifier,QString (""));
+
+          for (int i = 0; i < posInLineClick - posInLineCursor; i++)
+            emit keyPressedSignal (event);
+
+          delete event;
+        }
+    }
+
   if ( ev->button() == Qt::LeftButton)
     {
 
       Filter::HotSpot* spot = _filterChain->hotSpotAt(charLine,charColumn);
       if ( spot &&
           (spot->type() == Filter::Link || spot->type() == Filter::ErrorLink))
         {
           QList<QAction*> actions = spot->actions ();
@@ -2413,24 +2450,74 @@ void TerminalView::keyPressEvent( QKeyEv
       _blinkCursorTimer->start(BLINK_DELAY);
       if (_cursorBlinking)
         blinkCursorEvent();
       else
         _cursorBlinking = false;
     }
 
   if ( emitKeyPressSignal && !_readonly )
-    emit keyPressedSignal(event);
+    {
+      // Clear selection if the cursor is moved with arrow keys
+      bool emitKey = true;
+      if ((event->modifiers() == Qt::NoModifier)
+          && (event->key() == Qt::Key_Right || event->key() == Qt::Key_Left))
+        _screenWindow->clearSelection();
+
+      // Delete selected text if printable key is pressed
+      if ( !event->text ().isEmpty () )
+        {
+          int lineStart, colStart, lineEnd, colEnd;
+          _screenWindow->getSelectionStart (colStart, lineStart);
+          _screenWindow->getSelectionEnd (colEnd, lineEnd);
+          int cursorLoc = loc (_screenWindow->cursorPosition ().x (),
+                               _screenWindow->cursorPosition ().y ());
+
+          //Check if there is a selection in the current line
+          if ((loc (colStart,lineStart) != loc (colEnd, lineEnd))
+               && (cursorLoc >=loc (colStart,lineStart))
+               && (cursorLoc-1 <= loc (colEnd,lineEnd)))
+            {
+              QKeyEvent *ev = new QKeyEvent (QEvent::KeyPress,Qt::Key_Backspace,
+                                             Qt::NoModifier,QString (""));
+
+              if (cursorLoc < loc (colEnd, lineEnd))
+                {
+                  QKeyEvent *ev_right = new QKeyEvent (QEvent::KeyPress,Qt::Key_Right,
+                                                       Qt::NoModifier,QString (""));
+                  for (int i = 0; i < loc (colEnd,lineEnd) - cursorLoc + 1; i++)
+                    emit keyPressedSignal (ev_right);
+                  delete ev_right;
+                }
+
+              for (int i = 0; i < loc (colEnd, lineEnd) - loc (colStart, lineStart) + 1; i++)
+                emit keyPressedSignal (ev);
+
+              delete ev;
+
+              // Backspace deleted the selected text and has done its duty, no need to call it again
+              if (event->key() == Qt::Key_Backspace)
+                {
+                  _screenWindow->clearSelection ();
+                  emitKey = false;
+                }
+            }
+        }
+
+      if (emitKey)
+        emit keyPressedSignal (event);
+    }
 
   if (_readonly) {
       event->ignore();
     }
   else {
       event->accept();
     }
+
 }
 
 void TerminalView::inputMethodEvent( QInputMethodEvent* event )
 {
   QKeyEvent keyEvent(QEvent::KeyPress,0,Qt::NoModifier,event->commitString());
   emit keyPressedSignal(&keyEvent);
 
   _inputMethodData.preeditString = event->preeditString();
