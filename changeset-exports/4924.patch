# HG changeset patch
# User jwe
# Date 1091473460 0
#      Mon Aug 02 19:04:20 2004 +0000
# Node ID 9a3a32f5a27de22c29e7619d36ad1c3f60085dd1
# Parent  b11223097ad43aae78313bfee40673747a5a4b99
[project @ 2004-08-02 19:04:20 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2004-08-02  John W. Eaton  <jwe@octave.org>
 
+	* ov-fcn-handle.cc (octave_value::subsref): New function.
+
 	* ov-cx-mat.cc (try_narrowing_conversion): Also allow complex to
 	real conversion for N-d arrays.
 
 2004-07-30  John W. Eaton  <jwe@octave.org>
 
 	* lex.l (<COMMAND_START>[^#% \t\r\n\;\,\"\'][^ \t\r\n\;\,]*{S}*):
 	Also recognize \r as a word list separator.
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -74,16 +74,55 @@ fcn_handle_array::any (int) const
 }
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function handle");
 
+octave_value_list
+octave_fcn_handle::subsref (const std::string& type,
+			    const std::list<octave_value_list>& idx,
+			    int nargout)
+{
+  octave_value_list retval;
+
+  switch (type[0])
+    {
+    case '(':
+      {
+	octave_function *f = function_value ();
+	retval = f->subsref (type, idx, nargout);
+      }
+      break;
+
+
+    case '{':
+    case '.':
+      {
+	std::string nm = type_name ();
+	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+      }
+      break;
+
+    default:
+      panic_impossible ();
+    }
+
+  // XXX FIXME XXX -- perhaps there should be an
+  // octave_value_list::next_subsref member function?  See also
+  // octave_builtin::subsref.
+
+  if (idx.size () > 1)
+    retval = retval(0).next_subsref (type, idx);
+
+  return retval;
+}
+
 octave_function *
 octave_fcn_handle::function_value (bool)
 {
   octave_function *retval = 0;
 
   if (numel () > 0)
     {
       // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -143,16 +143,27 @@ public:
   octave_fcn_handle (const octave_fcn_handle& fh)
     : octave_base_matrix<fcn_handle_array> (fh) { }
 
   ~octave_fcn_handle (void) { }
 
   octave_value *clone (void) const { return new octave_fcn_handle (*this); }
   octave_value *empty_clone (void) const { return new octave_fcn_handle (); }
 
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
+    {
+      panic_impossible ();
+      return octave_value ();
+    }
+
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+			     int nargout);
+
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool is_constant (void) const { return false; }
 
   bool is_true (void) { return false; }
 
