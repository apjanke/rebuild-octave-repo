# HG changeset patch
# User Olaf Till <i7tiol@t-online.de>
# Date 1499843157 -7200
#      Wed Jul 12 09:05:57 2017 +0200
# Node ID 82886a27ce3a9219d7b53687c501f6060fd5016a
# Parent  102049c83e7cb4aa6ee6c2bac867d20d98671409
cell2mat.m: Preserve dimensions of empty input (bug #51448).

* cell2mat.m: Check for special case of empty input and return empty matrix
with same dimensions as input.  Add BIST test for behavior.

diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -29,20 +29,18 @@
 ## @end deftypefn
 
 function m = cell2mat (c)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  nb = numel (c);
-
-  if (nb == 0)
-    m = [];
+  if (isempty (c))
+    m = zeros (size (c));
   else
     if (! iscell (c))
       error ("cell2mat: C must be a cell array");
     endif
 
     ## Check first for valid matrix types
     valid = cellfun ("isnumeric", c);
     valid = cellfun ("islogical", c(! valid));
@@ -57,17 +55,16 @@ function m = cell2mat (c)
       endif
     endif
 
     sz = size (c);
     if (all (cellfun ("numel", c)(:) == 1))
       ## Special case of all scalars
       m = reshape (cat (1, c{:}), sz);
     else
-
       ## The goal is to minimize the total number of cat() calls.
       ## The dimensions can be concatenated along in arbitrary order.
       ## The numbers of concatenations are:
       ## n / d1
       ## n / (d1 * d2)
       ## n / (d1 * d2 * d3)
       ## etc.
       ## This is minimized if d1 >= d2 >= d3...
@@ -91,16 +88,17 @@ endfunction
 
 
 %!demo
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! cell2mat (C)
 
 %!assert (cell2mat ({}), [])
 %!assert (cell2mat ([]), [])
+%!assert (cell2mat (cell (2,0)), zeros (2,0))
 %!test
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! D = C; D(:,:,2) = C;
 %! E = [1 2 3 4; 5 6 7 8; 9 10 11 12];
 %! F = E; F(:,:,2) = E;
 %! assert (cell2mat (C), E);
 %! assert (cell2mat (D), F);
 %!test
