# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514316755 28800
#      Tue Dec 26 11:32:35 2017 -0800
# Branch stable
# Node ID abe0b0e08897de4168b89b041d4a66813d84d7f5
# Parent  746081e3cbddcc80861c95fe62d5f1fd639c92a5
doc: Rewrite documentation for Advanced Indexing (bug #52723).

* expr.txi: Rewrite documentation for Advanced Indexing.

* func.txi: Fix typo in example code for subfunctions and nested functions.

diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -129,50 +129,53 @@ a(end:-1:1)       # reversal of a => [4,
 
 @menu
 * Advanced Indexing::
 @end menu
 
 @node Advanced Indexing
 @subsection Advanced Indexing
 
-An array with @samp{nd} dimensions can be indexed using @samp{m}
-indices.  More generally, the set of index tuples determining the
-result is formed by the Cartesian product of the index vectors (or
-ranges or scalars).
+An array with @samp{nd} dimensions can be indexed by a vector @var{idx} which
+has from 1 to @samp{nd} elements.  If any element of @var{idx} is not a
+scalar then the complete set of index tuples will be generated from the
+Cartesian product of the index elements.
 
-For the ordinary and most common case, @w{@code{m == nd}}, and each
-index corresponds to its respective dimension.  If @w{@code{m < nd}},
-and every index is less than the size of the array in the @math{i^{th}}
-dimension (@code{m(i) < size (@var{array}, i)}), then the index expression
-is padded with @w{@code{n - m}} trailing singleton dimensions. 
-If @w{@code{m < nd}} but one of the indices @code{m(i)} is outside the
-size of the current array, then the last @w{@code{n-m+1}} dimensions
-are folded into a single dimension with an extent equal to the product
-of extents of the original dimensions.  This is easiest to understand
-with an example.
+For the ordinary and most common case, the number of indices
+(@code{nidx = numel (@var{idx})}) matches the number of dimensions @samp{nd}.
+In this case, each element of @var{idx} corresponds to its respective dimension,
+i.e., @code{@var{idx}(1)} refers to dimension 1, @code{@var{idx}(2)} refers to
+dimension 2, etc.  If @w{@code{nidx < nd}}, and every index is less than the
+size of the array in the @math{i^{th}} dimension
+(@code{@var{idx}(i) < size (@var{array}, i)}), then the index expression is
+padded with @w{@code{nd - nidx}} trailing singleton dimensions.  If
+@w{@code{nidx < nd}} but one of the indices @code{@var{idx}(i)} is outside the
+size of the current array, then the last @w{@code{nd - nidx + 1}} dimensions
+are folded into a single dimension with an extent equal to the product of
+extents of the original dimensions.  This is easiest to understand with an
+example.  
 
 @example
-a = reshape (1:8, 2, 2, 2)  # Create 3-D array
-a =
+A = reshape (1:8, 2, 2, 2)  # Create 3-D array
+A =
 
 ans(:,:,1) =
 
    1   3
    2   4
 
 ans(:,:,2) =
 
    5   7
    6   8
 
-a(2,1,2);   # Case (m == n): ans = 6
-a(2,1);     # Case (m < n), idx within array:
-            # equivalent to a(2,1,1), ans = 2
-a(2,4);     # Case (m < n), idx outside array:
+A(2,1,2);   # Case (nidx == nd): ans = 6
+A(2,1);     # Case (nidx < nd), idx within array:
+            # equivalent to A(2,1,1), ans = 2
+A(2,4);     # Case (nidx < nd), idx outside array:
             # Dimension 2 & 3 folded into new dimension of size 2x2 = 4
             # Select 2nd row, 4th element of [2, 4, 6, 8], ans = 8
 @end example
 
 One advanced use of indexing is to create arrays filled with a single
 value.  This can be done by using an index of ones on a scalar value.
 The result is an object with the dimensions of the index expression
 and every element equal to the original scalar.  For example, the
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1042,17 +1042,17 @@ child functions, @code{ex_a} and @code{e
 more child functions, @code{ex_aa} and @code{ex_ab}.  For example:
 
 @example
 function ex_top ()
   ## Can call: ex_top, ex_a, and ex_b
   ## Can NOT call: ex_aa and ex_ab
 
   function ex_a ()
-    ## Call call everything
+    ## Can call everything
 
     function ex_aa ()
       ## Can call everything
     endfunction
 
     function ex_ab ()
       ## Can call everything
     endfunction
