# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549728841 0
#      Sat Feb 09 16:14:01 2019 +0000
# Node ID 17e7d310def85192ce73dab78f025ea71f840b4b
# Parent  606605d0cd310cf069842a7661f5bc54407262a5
revamp parsing of superclass identifiers in classdef decls

This change is part of the fix for bug #47680.

* lex.h, lex.ll (lexical_feedback::parsing_classdef_decl,
lexical_feedback::parsing_classdef_superclass): New data members.
(lexical_feedback::lexical_feedback): Initialize them.
(lexical_feedback::reset): Reset them.
(base_lexer::enable_fq_identifier): Delete.
(base_lexer::handle_op_internal): Maybe FQ_IDENT_START start state
when parsing classdef declaration.
(base_lexer::display_start_state): Handle FQ_IDENT_START.  Report
INPUT_FILE_START for that state instead of INPUT_FILE_BEGIN.
* oct-parse.yy (superclass_list): Eliminate mid-rule actions.
(opt_superclass_list): Reset m_parsing_classdef_decl and
m_parsing_classdef_superclass lexical feedback flags.
(classdef_beg): Set m_parsing_classdef_decl lexical feedback flag.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -266,16 +266,18 @@ namespace octave
         m_looking_at_parameter_list (false),
         m_looking_at_decl_list (false),
         m_looking_at_initializer_expression (false),
         m_looking_at_matrix_or_assign_lhs (false),
         m_looking_for_object_index (false),
         m_looking_at_indirect_ref (false),
         m_parsing_class_method (false),
         m_parsing_classdef (false),
+        m_parsing_classdef_decl (false),
+        m_parsing_classdef_superclass (false),
         m_maybe_classdef_get_set_method (false),
         m_parsing_classdef_get_method (false),
         m_parsing_classdef_set_method (false),
         m_quote_is_transpose (false),
         m_force_script (false),
         m_reading_fcn_file (false),
         m_reading_script_file (false),
         m_reading_classdef_file (false),
@@ -381,16 +383,25 @@ namespace octave
     bool m_looking_at_indirect_ref;
 
     // true means we are parsing a class method in function or classdef file.
     bool m_parsing_class_method;
 
     // true means we are parsing a classdef file
     bool m_parsing_classdef;
 
+    // true means we are parsing the initial classdef declaration
+    // portion of classdef file, from the "classdef" token through the
+    // optional list of superclasses.
+    bool m_parsing_classdef_decl;
+
+    // true means we are parsing the superclass part of a classdef
+    // declaration.
+    bool m_parsing_classdef_superclass;
+
     // true means we are parsing a class method declaration line in a
     // classdef file and can accept a property get or set method name.
     // for example, "get.propertyname" is recognized as a function name.
     bool m_maybe_classdef_get_set_method;
 
     // TRUE means we are parsing a classdef get.method.
     bool m_parsing_classdef_get_method;
 
@@ -746,18 +757,16 @@ namespace octave
     int handle_token (int tok, token *tok_val = nullptr);
 
     int count_token (int tok);
 
     int count_token_internal (int tok);
 
     int show_token (int tok);
 
-    void enable_fq_identifier (void);
-
   protected:
 
     std::stack<int> start_state_stack;
   };
 
   class
   lexer : public base_lexer
   {
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2100,16 +2100,18 @@ namespace octave
     m_looking_at_parameter_list = false;
     m_looking_at_decl_list = false;
     m_looking_at_initializer_expression = false;
     m_looking_at_matrix_or_assign_lhs = false;
     m_looking_for_object_index = false;
     m_looking_at_indirect_ref = false;
     m_parsing_class_method = false;
     m_parsing_classdef = false;
+    m_parsing_classdef_decl = false;
+    m_parsing_classdef_superclass = false;
     m_maybe_classdef_get_set_method = false;
     m_parsing_classdef_get_method = false;
     m_parsing_classdef_set_method = false;
     m_quote_is_transpose = false;
     m_force_script = false;
     m_reading_fcn_file = false;
     m_reading_script_file = false;
     m_reading_classdef_file = false;
@@ -3482,17 +3484,17 @@ namespace octave
         std::cerr << "COMMAND_START" << std::endl;
         break;
 
       case MATRIX_START:
         std::cerr << "MATRIX_START" << std::endl;
         break;
 
       case INPUT_FILE_START:
-        std::cerr << "INPUT_FILE_BEGIN" << std::endl;
+        std::cerr << "INPUT_FILE_START" << std::endl;
         break;
 
       case BLOCK_COMMENT_START:
         std::cerr << "BLOCK_COMMENT_START" << std::endl;
         break;
 
       case LINE_COMMENT_START:
         std::cerr << "LINE_COMMENT_START" << std::endl;
@@ -3501,16 +3503,20 @@ namespace octave
       case DQ_STRING_START:
         std::cerr << "DQ_STRING_START" << std::endl;
         break;
 
       case SQ_STRING_START:
         std::cerr << "SQ_STRING_START" << std::endl;
         break;
 
+      case FQ_IDENT_START:
+        std::cerr << "FQ_IDENT_START" << std::endl;
+        break;
+
       default:
         std::cerr << "UNKNOWN START STATE!" << std::endl;
         break;
       }
   }
 
   int
   base_lexer::handle_op (const char *pattern, int tok, bool bos)
@@ -3573,16 +3579,35 @@ namespace octave
       warn_language_extension_operator (flex_yytext ());
 
     push_token (new token (tok, m_input_line_number, m_current_input_column));
 
     m_current_input_column += flex_yyleng ();
     m_looking_for_object_index = false;
     m_at_beginning_of_statement = bos;
 
+    switch (tok)
+      {
+      case EXPR_LT:
+        if (m_parsing_classdef_decl)
+          {
+            m_parsing_classdef_superclass = true;
+            push_start_state (FQ_IDENT_START);
+          }
+        break;
+
+      case EXPR_AND:
+        if (m_parsing_classdef_superclass)
+          push_start_state (FQ_IDENT_START);
+        break;
+
+      default:
+        break;
+      }
+
     return count_token_internal (tok);
   }
 
   int
   base_lexer::handle_token (const std::string& name, int tok)
   {
     token *tok_val = new token (tok, name, m_input_line_number,
                                 m_current_input_column);
@@ -3634,22 +3659,16 @@ namespace octave
         std::cerr << "R: ";
         display_token (tok);
         std::cerr << std::endl;
       }
 
     return tok;
   }
 
-  void
-  base_lexer::enable_fq_identifier (void)
-  {
-    push_start_state (FQ_IDENT_START);
-  }
-
   int
   lexer::fill_flex_buffer (char *buf, unsigned max_size)
   {
     int status = 0;
 
     if (m_input_buf.empty ())
       {
         bool eof = false;
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -1653,16 +1653,17 @@ classdef_beg    : CLASSDEF
                       {
                         parser.bison_error ("classdef must appear inside a file containing only a class definition");
                         YYABORT;
                       }
 
                     // Create invalid parent scope.
                     lexer.m_symtab_context.push (octave::symbol_scope ());
                     lexer.m_parsing_classdef = true;
+                    lexer.m_parsing_classdef_decl = true;
                     $$ = $1;
                   }
                 ;
 
 classdef        : classdef_beg stash_comment opt_attr_list identifier opt_superclass_list opt_sep class_body opt_sep END
                   {
                     YYUSE ($6);
                     YYUSE ($8);
@@ -1719,38 +1720,40 @@ attr            : identifier
                     YYUSE ($1);
 
                     $$ = new octave::tree_classdef_attribute ($2, false);
                   }
                 ;
 
 opt_superclass_list
                 : // empty
-                  { $$ = nullptr; }
+                  {
+                    lexer.m_parsing_classdef_decl = false;
+                    lexer.m_parsing_classdef_superclass = false;
+                    $$ = nullptr;
+                  }
                 | superclass_list
-                  { $$ = $1; }
+                  {
+                    lexer.m_parsing_classdef_decl = false;
+                    lexer.m_parsing_classdef_superclass = false;
+                    $$ = $1;
+                  }
                 ;
 
-superclass_list : EXPR_LT
+superclass_list : EXPR_LT superclass
                   {
                     YYUSE ($1);
 
-                    lexer.enable_fq_identifier ();
+                    $$ = new octave::tree_classdef_superclass_list ($2);
                   }
-                  superclass
-                  { $$ = new octave::tree_classdef_superclass_list ($3); }
-                | superclass_list EXPR_AND
+                | superclass_list EXPR_AND superclass
                   {
                     YYUSE ($2);
 
-                    lexer.enable_fq_identifier ();
-                  }
-                  superclass
-                  {
-                    $1->append ($4);
+                    $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 superclass      : FQ_IDENT
                   { $$ = new octave::tree_classdef_superclass ($1->text ()); }
                 ;
 
