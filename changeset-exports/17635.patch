# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1381524392 -7200
#      Fri Oct 11 22:46:32 2013 +0200
# Node ID 7945344506aea7b013daeda93791eda88020ae4e
# Parent  bdbf91c0a1a4515fae67372c94c8088d76234dfb
Add possibility to run selected text of the editor in the terminal

* octave-qscintilla.cc(contextMenuEvent): new context menu for running selection
  (context_run): function for run selection action in editor file menu;
  (contextmenu_run): new slot for context menu run selection;
* octave-qscintilla.h: new functions context_run, contextmenu_run

* file-editor-tab.cc(context_run): new slot for run menu action
* file-editor-tab.h: new slot context_run

* file-editor.cc(request_context_run): new slot for run menu entry;
  (construct): new entry in run menu for running the selection in editor
  (add_file_editor_tab): connect new signal fetab_context_run to the new
  slot context_run in file_editor_tab;
  (set_shortcuts): enable/disable new shortcut when editor focus changes
  (check_actions): enable/disable new action depending on existing tabs
* file-editor.h: new signal fetab_context_run, new slot request_context_edit,
  new run action

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -479,16 +479,25 @@ file_editor_tab::run_file (const QWidget
   if (_edit_area->isModified ())
     save_file (_file_name);
 
   QFileInfo info (_file_name);
   emit run_file_signal (info);
 }
 
 void
+file_editor_tab::context_run (const QWidget *ID)
+{
+  if (ID != this)
+    return;
+
+  _edit_area->context_run ();
+}
+
+void
 file_editor_tab::toggle_bookmark (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   int line, cur;
   _edit_area->getCursorPosition (&line, &cur);
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -73,16 +73,17 @@ public slots:
   void context_help (const QWidget *ID, bool);
   void context_edit (const QWidget *ID);
   void save_file (const QWidget *ID);
   void save_file (const QWidget *ID, const QString& fileName,
                   bool remove_on_success);
   void save_file_as (const QWidget *ID);
   void print_file (const QWidget *ID);
   void run_file (const QWidget *ID);
+  void context_run (const QWidget *ID);
   void toggle_bookmark (const QWidget *ID);
   void next_bookmark (const QWidget *ID);
   void previous_bookmark (const QWidget *ID);
   void remove_bookmark (const QWidget *ID);
 
   void toggle_breakpoint (const QWidget *ID);
   void next_breakpoint (const QWidget *ID);
   void previous_breakpoint (const QWidget *ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -504,16 +504,22 @@ file_editor::request_print_file (void)
 
 void
 file_editor::request_run_file (void)
 {
   emit fetab_run_file (_tab_widget->currentWidget ());
 }
 
 void
+file_editor::request_context_run (bool)
+{
+  emit fetab_context_run (_tab_widget->currentWidget ());
+}
+
+void
 file_editor::request_toggle_bookmark (void)
 {
   emit fetab_toggle_bookmark (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_next_bookmark (void)
 {
@@ -940,16 +946,19 @@ file_editor::construct (void)
   _debug_menu->addAction (previous_breakpoint_action);
   _debug_menu->addAction (remove_all_breakpoints_action);
   _debug_menu->addSeparator ();
   // The other debug actions will be added by the main window.
   _menu_bar->addMenu (_debug_menu);
 
   QMenu *_run_menu = new QMenu (tr ("&Run"), _menu_bar);
   _run_menu->addAction (_run_action);
+  _context_run_action =
+    _run_menu->addAction (QIcon (), tr ("Run &Selection"),
+                           this, SLOT (request_context_run (bool)));
   _menu_bar->addMenu (_run_menu);
 
   QMenu *_help_menu = new QMenu (tr ("&Help"), _menu_bar);
   _context_help_action =
     _help_menu->addAction (QIcon (), tr ("&Help on Keyword"),
                            this, SLOT (request_context_help (bool)));
   _context_doc_action =
     _help_menu->addAction (QIcon (), tr ("&Documentation on Keyword"),
@@ -1149,16 +1158,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (save_file_as (const QWidget*)));
 
   connect (this, SIGNAL (fetab_print_file (const QWidget*)),
            f, SLOT (print_file (const QWidget*)));
 
   connect (this, SIGNAL (fetab_run_file (const QWidget*)),
            f, SLOT (run_file (const QWidget*)));
 
+  connect (this, SIGNAL (fetab_context_run (const QWidget*)),
+           f, SLOT (context_run (const QWidget*)));
+
   connect (this, SIGNAL (fetab_toggle_bookmark (const QWidget*)),
            f, SLOT (toggle_bookmark (const QWidget*)));
 
   connect (this, SIGNAL (fetab_next_bookmark (const QWidget*)),
            f, SLOT (next_bookmark (const QWidget*)));
 
   connect (this, SIGNAL (fetab_previous_bookmark (const QWidget*)),
            f, SLOT (previous_bookmark (const QWidget*)));
@@ -1247,16 +1259,17 @@ file_editor::set_shortcuts (bool set)
       _goto_line_action->setShortcut (Qt::ControlModifier+ Qt::Key_G);
 
       _next_bookmark_action->setShortcut (Qt::Key_F2);
       _previous_bookmark_action->setShortcut (Qt::SHIFT + Qt::Key_F2);
       _toggle_bookmark_action->setShortcut (Qt::Key_F7);
 
       _print_action->setShortcut (QKeySequence::Print);
       _run_action->setShortcut (Qt::ControlModifier+ Qt::Key_R);
+      _context_run_action->setShortcut (Qt::Key_F9);
 
       _context_edit_action->setShortcut (Qt::ControlModifier + Qt::Key_E);
       _save_action->setShortcut (QKeySequence::Save);
       _save_as_action->setShortcut (QKeySequence::SaveAs);
       _close_action->setShortcut (QKeySequence::Close);
 
       _redo_action->setShortcut (QKeySequence::Redo);
       _undo_action->setShortcut (QKeySequence::Undo);
@@ -1277,16 +1290,17 @@ file_editor::set_shortcuts (bool set)
       _goto_line_action->setShortcut (no_key);
 
       _next_bookmark_action->setShortcut (no_key);
       _previous_bookmark_action->setShortcut (no_key);
       _toggle_bookmark_action->setShortcut (no_key);
 
       _print_action->setShortcut (no_key);
       _run_action->setShortcut (no_key);
+      _context_run_action->setShortcut (no_key);
 
       _context_edit_action->setShortcut (no_key);
       _save_action->setShortcut (no_key);
       _save_as_action->setShortcut (no_key);
       _close_action->setShortcut (no_key);
 
       _redo_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
@@ -1311,16 +1325,17 @@ file_editor::check_actions ()
   _goto_line_action->setEnabled (have_tabs);
 
   _next_bookmark_action->setEnabled (have_tabs);
   _previous_bookmark_action->setEnabled (have_tabs);
   _toggle_bookmark_action->setEnabled (have_tabs);
 
   _print_action->setEnabled (have_tabs);
   _run_action->setEnabled (have_tabs);
+  _context_run_action->setEnabled (have_tabs);
 
   _context_edit_action->setEnabled (have_tabs);
   _save_action->setEnabled (have_tabs);
   _save_as_action->setEnabled (have_tabs);
   _close_action->setEnabled (have_tabs);
   _close_all_action->setEnabled (have_tabs);
   _close_others_action->setEnabled (have_tabs && _tab_widget->count () > 1);
 
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -75,16 +75,17 @@ signals:
   void fetab_cut (const QWidget* ID);
   void fetab_paste (const QWidget* ID);
   void fetab_context_help (const QWidget* ID, bool);
   void fetab_context_edit (const QWidget* ID);
   void fetab_save_file (const QWidget* ID);
   void fetab_save_file_as (const QWidget* ID);
   void fetab_print_file (const QWidget* ID);
   void fetab_run_file (const QWidget* ID);
+  void fetab_context_run (const QWidget* ID);
   void fetab_toggle_bookmark (const QWidget* ID);
   void fetab_next_bookmark (const QWidget* ID);
   void fetab_previous_bookmark (const QWidget* ID);
   void fetab_remove_bookmark (const QWidget* ID);
   void fetab_toggle_breakpoint (const QWidget* ID);
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
@@ -117,16 +118,17 @@ public slots:
   void request_cut (void);
   void request_paste (void);
   void request_context_help (bool);
   void request_context_doc (bool);
   void request_context_edit (bool);
   void request_save_file (void);
   void request_save_file_as (void);
   void request_run_file (void);
+  void request_context_run (bool);
   void request_toggle_bookmark (void);
   void request_next_bookmark (void);
   void request_previous_bookmark (void);
   void request_remove_bookmark (void);
 
   void request_toggle_breakpoint (void);
   void request_next_breakpoint (void);
   void request_previous_breakpoint (void);
@@ -203,16 +205,17 @@ private:
 
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
   QAction * _remove_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
+  QAction *_context_run_action;
 
   QAction *_context_edit_action;
   QAction *_save_action;
   QAction *_save_as_action;
   QAction *_close_action;
   QAction *_close_all_action;
   QAction *_close_others_action;
 
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -71,20 +71,28 @@ octave_qscintilla::context_help_doc (boo
   if (get_actual_word ())
     contextmenu_help_doc (documentation);
 }
 
 // call edit the function related to the current word
 void
 octave_qscintilla::context_edit ()
 {
-  if (get_actual_word ())
+  if (hasSelectedText ())
     contextmenu_edit (true);
 }
 
+// call edit the function related to the current word
+void
+octave_qscintilla::context_run ()
+{
+  if (hasSelectedText ())
+    contextmenu_run (true);
+}
+
 #ifdef HAVE_QSCI_VERSION_2_6_0
 // context menu requested
 void
 octave_qscintilla::contextMenuEvent (QContextMenuEvent *e)
 {
   QMenu *context_menu = createStandardContextMenu ( );  // standard menu
 
   // the menu's position
@@ -110,22 +118,28 @@ octave_qscintilla::contextMenuEvent (QCo
 
   // help menu: get the position of the mouse or the text cursor
   // (only for octave files)
   QString lexer_name = lexer ()->lexer ();
   if (lexer_name == "octave" || lexer_name == "matlab")
     {
       _word_at_cursor = wordAtPoint (local_pos);
       if (!_word_at_cursor.isEmpty ())
-        context_menu->addAction (tr ("Help on") + " " + _word_at_cursor,
-                                this, SLOT (contextmenu_help (bool)));
-        context_menu->addAction (tr ("Documentation on") + " " + _word_at_cursor,
-                                this, SLOT (contextmenu_doc (bool)));
-        context_menu->addAction (tr ("Edit") + " " + _word_at_cursor,
-                                this, SLOT (contextmenu_edit (bool)));
+        {
+          context_menu->addAction (tr ("Help on") + " " + _word_at_cursor,
+                                  this, SLOT (contextmenu_help (bool)));
+          context_menu->addAction (tr ("Documentation on") + " " + _word_at_cursor,
+                                  this, SLOT (contextmenu_doc (bool)));
+          context_menu->addAction (tr ("Edit") + " " + _word_at_cursor,
+                                  this, SLOT (contextmenu_edit (bool)));
+        }
+      context_menu->addSeparator ();   // separator before custom entries
+      if (hasSelectedText ())
+        context_menu->addAction (tr ("&Run Selection"),
+                                 this, SLOT (contextmenu_run (bool)));
     }
 
   // finaly show the menu
   context_menu->exec (global_pos);
 }
 #endif
 
 
@@ -154,9 +168,16 @@ octave_qscintilla::contextmenu_help_doc 
 }
 
 void
 octave_qscintilla::contextmenu_edit (bool)
 {
   emit execute_command_in_terminal_signal (QString("edit ") + _word_at_cursor);
 }
 
+void
+octave_qscintilla::contextmenu_run (bool)
+{
+  QString command = selectedText ();
+  emit execute_command_in_terminal_signal (command);
+}
+
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -38,29 +38,31 @@ public:
   octave_qscintilla (QWidget *p);
   ~octave_qscintilla ();
 
 #ifdef HAVE_QSCI_VERSION_2_6_0
   virtual void contextMenuEvent (QContextMenuEvent *e);
 #endif
   void context_help_doc (bool);
   void context_edit ();
+  void context_run ();
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word ();
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
 
 private slots:
 
   void contextmenu_help (bool);
   void contextmenu_doc (bool);
   void contextmenu_help_doc (bool);
   void contextmenu_edit (bool);
+  void contextmenu_run (bool);
 
 private:
 
   QString _word_at_cursor;
 
 };
 
 #endif
