# HG changeset patch
# User jwe
# Date 773711532 0
#      Fri Jul 08 23:52:12 1994 +0000
# Node ID be155b3d5a2fb6bffaef025c903d2df275fa3f5f
# Parent  dbb8a47acc3aa5167220c98f59b890b7acd8074c
[project @ 1994-07-08 23:45:33 by jwe]

diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -16,20 +16,25 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if !defined (octave_oct_obj_h)
+#define octave_oct_obj_h 1
+
 #include "Array.h"
 
 class tree_constant;
 
 typedef Array<tree_constant> Octave_object;
 
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1037,31 +1037,39 @@ variable	: identifier
 		  }
 		;
 
 param_list	: '(' ')'
 		  {
 		    quote_is_transpose = 0;
 		    $$ = (tree_parameter_list *) NULL;
 		  }
+		| '(' ELLIPSIS ')'
+		  {
+		    quote_is_transpose = 0;
+		    tree_parameter_list *tmp = new tree_parameter_list ();
+		    tmp->mark_varargs_only ();
+		    $$ = tmp;
+		  }
 		| param_list1 ')'
 		  {
 		    quote_is_transpose = 0;
 		    tree_parameter_list *tmp = $1->reverse ();
 		    tmp->mark_as_formal_parameters ();
 		    $$ = tmp;
 		  }
 		| param_list1 ',' ELLIPSIS ')'
 		  {
 		    quote_is_transpose = 0;
 		    tree_parameter_list *tmp = $1->reverse ();
 		    tmp->mark_as_formal_parameters ();
 		    tmp->mark_varargs ();
 		    $$ = tmp;
 		  }
+		;
 
 param_list1	: '(' identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| param_list1 ',' identifier
 		  { $$ = $1->chain ($3); }
 		| '(' error
 		  {
 		    yyerror ("parse error");
@@ -1072,18 +1080,21 @@ param_list1	: '(' identifier
 		  {
 		    yyerror ("parse error");
 		    error ("invalid parameter list");
 		    ABORT_PARSE;
 		  }
 		;
 
 identifier	: NAME
-		  { $$ = new tree_identifier
-		      ($1->sym_rec (), $1->line (), $1->column ()); }
+		  {
+		    $$ = new tree_identifier
+		      ($1->sym_rec (), $1->line (), $1->column ());
+		  }
+		;
 
 arg_list	: arg_list1
 		  { $$ = $1->reverse (); }
 		;
 
 arg_list1	: ':'
 		  {
 		    tree_constant *colon;
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -25,17 +25,16 @@ Software Foundation, 675 Mass Ave, Cambr
 #define octave_tree_const_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <stdlib.h>
 
-#include "Array.h"
 #include "mx-base.h"
 #include "Range.h"
 
 #include "builtins.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tc-rep.h"
 #include "oct-obj.h"
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -1146,16 +1146,17 @@ tree_identifier::eval (int print)
   if (! script_file_executed)
     {
       if (ans == (tree_fvc *) NULL)
 	eval_undefined_error ();
       else
 	{
 	  int nargout = maybe_do_ans_assign ? 0 : 1;
 
+//	  int nargin = (ans->is_constant ()) ? 0 : 1;
 	  Octave_object tmp_args;
 	  Octave_object tmp = ans->eval (0, nargout, tmp_args, 0);
 
 	  if (tmp.length () > 0)
 	    retval = tmp(0);
 	}
     }
 
@@ -1507,17 +1508,18 @@ tree_function::eval (int print, int narg
   args_passed = args;
 
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
   unwind_protect_int (num_named_args);
   unwind_protect_int (curr_arg_number);
 
-  if (param_list != (tree_parameter_list *) NULL)
+  if (param_list != (tree_parameter_list *) NULL
+      && ! param_list->varargs_only ())
     {
       param_list->define_from_arg_vector (args, nargin);
       if (error_state)
 	goto abort;
     }
 
 // The following code is in a separate scope to avoid warnings from
 // G++ about `goto abort' crossing the initialization of some
@@ -2836,16 +2838,28 @@ tree_parameter_list::mark_varargs (void)
 }
 
 int
 tree_parameter_list::takes_varargs (void) const
 {
   return marked_for_varargs;
 }
 
+void
+tree_parameter_list::mark_varargs_only (void)
+{
+  marked_for_varargs = -1;
+}
+
+int
+tree_parameter_list::varargs_only (void)
+{
+  return (marked_for_varargs < 0);
+}
+
 tree_identifier *
 tree_parameter_list::define (tree_constant *t)
 {
   return param->define (t);
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const Octave_object& args,
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -25,18 +25,16 @@ Software Foundation, 675 Mass Ave, Cambr
 #define octave_tree_expr_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <stdio.h>
 
-#include "Array.h"
-
 #include "builtins.h"
 #include "error.h"
 #include "oct-obj.h"
 
 class tree_constant;
 class symbol_record;
 class symbol_table;
 
@@ -577,16 +575,19 @@ tree_parameter_list : public tree
 
   char *name (void) const;
 
   void mark_as_formal_parameters (void);
 
   void mark_varargs (void);
   int takes_varargs (void) const;
 
+  void mark_varargs_only (void);
+  int varargs_only (void);
+
   tree_identifier *define (tree_constant *t);
 
   void define_from_arg_vector (const Octave_object& args, int nargin);
 
   int is_defined (void);
 
   Octave_object convert_to_const_vector (void);
 
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -33,16 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include <string.h>
 #include <fstream.h>
 #include <iostream.h>
 #include <strstream.h>
 
 #include "mx-base.h"
 #include "Range.h"
 
+#include "arith-ops.h"
 #include "variables.h"
 #include "error.h"
 #include "gripes.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "tree-const.h"
@@ -5093,17 +5094,17 @@ tree_constant_rep::do_scalar_index (cons
 		ComplexMatrix cm (rows, cols, *complex_scalar);
 		return tree_constant (cm);
 	      }
 	    else
 	      panic_impossible ();
 	  }
 	  break;
 	default:
-	  ::error ("illegal number of arguments for scalar type");
+	  ::error ("invalid number of arguments for scalar type");
 	  return tree_constant ();
 	  break;
 	}
     }
 
   ::error ("index invalid or out of range for scalar type");
   return tree_constant ();
 }
