# HG changeset patch
# User jwe
# Date 1031162464 0
#      Wed Sep 04 18:01:04 2002 +0000
# Node ID 2a2108853c701a40e286272d98b44dcb9e4aa8d5
# Parent  016ec66e252359626bfe46a9ff0049bc4cc02aad
[project @ 2002-09-04 18:01:04 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2002-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc: Use % instead of # as comment character in ascii
+	data files.
+
 2002-08-17  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* c-file-ptr-stream.h (c_file_ptr_buf::c_file_ptr_buf): Add Intel
 	C++ runtime support.
 
 	* Cell.h, gripes.cc, ov-base-scalar.cc, ov-colon.cc, ov-fcn.cc,
 	ov-file.cc, ov-mapper.h, ov-va-args.cc, token.cc, xpow.cc,
 	OPERATORS/op-b-b.cc, OPERATORS/op-bm-b.cc, OPERATORS/op-bm-bm.cc,
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4362,19 +4362,19 @@ save_mat_binary_data (std::ostream& os, 
 
   return os;
 }
 
 static void
 ascii_save_type (std::ostream& os, const char *type, bool mark_as_global)
 {
   if (mark_as_global)
-    os << "# type: global ";
+    os << "% type: global ";
   else
-    os << "# type: ";
+    os << "% type: ";
 
   os << type << "\n";
 }
 
 static Matrix
 strip_infnan (const Matrix& m)
 {
   int nr = m.rows ();
@@ -4466,44 +4466,44 @@ save_ascii_data (std::ostream& os, const
 		 int precision)
 {
   bool success = true;
 
   if (! precision)
     precision = Vsave_precision;
 
   if (! name.empty ())
-    os << "# name: " << name << "\n";
+    os << "% name: " << name << "\n";
 
   long old_precision = os.precision ();
   os.precision (precision);
 
   if (tc.is_string ())
     {
       ascii_save_type (os, "string array", mark_as_global);
       charMatrix chm = tc.char_matrix_value ();
       int elements = chm.rows ();
-      os << "# elements: " << elements << "\n";
+      os << "% elements: " << elements << "\n";
       for (int i = 0; i < elements; i++)
 	{
 	  unsigned len = chm.cols ();
-	  os << "# length: " << len << "\n";
+	  os << "% length: " << len << "\n";
 	  std::string tstr = chm.row_as_string (i, false, true);
 	  const char *tmp = tstr.data ();
 	  if (tstr.length () > len)
 	    panic_impossible ();
 	  os.write (X_CAST (char *, tmp), len);
 	  os << "\n";
 	}
     }
   else if (tc.is_range ())
     {
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
-      os << "# base, limit, increment\n"
+      os << "% base, limit, increment\n"
 	 << tmp.base () << " "
 	 << tmp.limit () << " "
 	 << tmp.inc () << "\n";
     }
   else if (tc.is_real_scalar ())
     {
       ascii_save_type (os, "scalar", mark_as_global);
 
@@ -4532,18 +4532,18 @@ save_ascii_data (std::ostream& os, const
 
 	  os << d << "\n";
 	}
     }
   else if (tc.is_real_matrix ())
     {
       ascii_save_type (os, "matrix", mark_as_global);
 
-      os << "# rows: " << tc.rows () << "\n"
-	 << "# columns: " << tc.columns () << "\n";
+      os << "% rows: " << tc.rows () << "\n"
+	 << "% columns: " << tc.columns () << "\n";
 
       Matrix tmp = tc.matrix_value ();
 
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
       else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
 	{
 	  warning ("save: Inf or NaN values may not be reloadable");
@@ -4588,18 +4588,18 @@ save_ascii_data (std::ostream& os, const
 
 	  os << c << "\n";
 	}
     }
   else if (tc.is_complex_matrix ())
     {
       ascii_save_type (os, "complex matrix", mark_as_global);
 
-      os << "# rows: " << tc.rows () << "\n"
-	 << "# columns: " << tc.columns () << "\n";
+      os << "% rows: " << tc.rows () << "\n"
+	 << "% columns: " << tc.columns () << "\n";
 
       ComplexMatrix tmp = tc.complex_matrix_value ();
 
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
       else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
 	{
 	  warning ("save: Inf or NaN values may not be reloadable");
@@ -5164,20 +5164,20 @@ save_three_d (std::ostream& os, const oc
 {
   bool fail = false;
 
   int nr = tc.rows ();
   int nc = tc.columns ();
 
   if (tc.is_real_matrix ())
     {
-      os << "# 3D data...\n"
-	 << "# type: matrix\n"
-	 << "# total rows: " << nr << "\n"
-	 << "# total columns: " << nc << "\n";
+      os << "% 3D data...\n"
+	 << "% type: matrix\n"
+	 << "% total rows: " << nr << "\n"
+	 << "% total columns: " << nc << "\n";
 
       if (parametric)
 	{
 	  int extras = nc % 3;
 	  if (extras)
 	    warning ("ignoring last %d columns", extras);
 
 	  Matrix tmp = tc.matrix_value ();
@@ -5239,17 +5239,17 @@ default_save_format (void)
 
   return status;
 }
 
 static std::string
 default_save_header_format (void)
 {
   return
-    std::string ("# Created by Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <")
+    std::string ("% Created by Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <")
     + octave_env::get_user_name ()
     + std::string ("@")
     + octave_env::get_host_name ()
     + std::string (">");
 }
 
 static int
 save_header_format_string (void)
@@ -5315,17 +5315,17 @@ This variable specifies the the format s
 that is written at the beginning of text-format data files saved by\n\
 Octave.  The format string is passed to @code{strftime} and should\n\
 begin with the character @samp{#} and contain no newline characters.\n\
 If the value of @code{save_header_format_string} is the empty string,\n\
 the header comment is omitted from text-format data files.  The\n\
 default value is\n\
 \n\
 @example\n\
-\"# Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
+\"% Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
 @end example\n\
 @seealso{strftime}\n\
 @end defvr");
 
   DEFVAR (save_precision, 15.0, save_precision,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} save_precision\n\
 This variable specifies the number of digits to keep when saving data in\n\
