# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1257244559 -3600
#      Tue Nov 03 11:35:59 2009 +0100
# Node ID 01f897d8a1300740569505f2b40954ae58f36727
# Parent  3ac8ea48279b5ba6a2ba121d971c68bddc9df60a
optimize memory manipulation by arrays & indexing

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -72,17 +72,17 @@ Array<T>::fill (const T& val)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (length (), val);
       slice_data = rep->data;
     }
   else
-    std::fill (slice_data, slice_data + slice_len, val);
+    octave_fill (slice_len, val, slice_data);
 }
 
 template <class T>
 void
 Array<T>::clear (void)
 {
   if (--rep->count <= 0)
     delete rep;
@@ -563,17 +563,20 @@ private:
   // Recursive N-d generalized transpose
   template <class T>
   T *do_permute (const T *src, T *dest, int lev) const
     {
       if (lev == 0)
         {
           octave_idx_type step = stride[0], len = dim[0];
           if (step == 1)
-            dest = std::copy (src, src + len, dest);
+            {
+              octave_ucopy (len, src, dest);
+              dest += len;
+            }
           else
             {
               for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                 dest[i] = src[j];
 
               dest += len;
             }
         }
@@ -824,26 +827,26 @@ public:
 
 private:
   // recursive resizing
   template <class T>
   void do_resize_fill (const T* src, T *dest, const T& rfv, int lev) const
     {
       if (lev == 0)
         {
-          T* destc = std::copy (src, src + cext[0], dest);
-          std::fill (destc, dest + dext[0], rfv);
+          octave_ucopy (cext[0], src, dest);
+          octave_fill (dext[0] - cext[0], rfv, dest + cext[0]);
         }
       else
         {
           octave_idx_type sd = sext[lev-1], dd = dext[lev-1], k;
           for (k = 0; k < cext[lev]; k++)
             do_resize_fill (src + k * sd, dest + k * dd, rfv, lev - 1);
 
-          std::fill (dest + k * dd, dest + dext[lev], rfv);
+          octave_fill (dext[lev] - k * dd, rfv, dest + k * dd);
         }
     }
 public:
   template <class T>
   void resize_fill (const T* src, T *dest, const T& rfv) const 
     { do_resize_fill (src, dest, rfv, n-1); }
 
 };
@@ -1109,30 +1112,30 @@ Array<T>::resize_fill (octave_idx_type n
                 }
               else
                 {
                   static const octave_idx_type max_stack_chunk = 1024;
                   octave_idx_type nn = n + std::min (nx, max_stack_chunk);
                   Array<T> tmp (Array<T> (nn), dv, 0, n);
                   T *dest = tmp.fortran_vec ();
 
-                  std::copy (data (), data () + nx, dest);
+                  octave_ucopy (nx, data (), dest);
                   dest[nx] = rfv;
 
                   *this = tmp;
                 }
             }
           else if (n != nx)
             {
               Array<T> tmp = Array<T> (dv);
               T *dest = tmp.fortran_vec ();
 
               octave_idx_type n0 = std::min (n, nx), n1 = n - n0;
-              dest = std::copy (data (), data () + n0, dest);
-              std::fill (dest, dest + n1, rfv);
+              octave_ucopy (n0, data (), dest);
+              octave_fill (n1, rfv, dest + n0);
 
               *this = tmp;
             }
         }
     }
   else
     gripe_invalid_resize ();
 }
@@ -1148,29 +1151,33 @@ Array<T>::resize_fill (octave_idx_type r
         {
           Array<T> tmp = Array<T> (dim_vector (r, c));
           T *dest = tmp.fortran_vec ();
 
           octave_idx_type r0 = std::min (r, rx), r1 = r - r0;
           octave_idx_type c0 = std::min (c, cx), c1 = c - c0;
           const T *src = data ();
           if (r == rx)
-            dest = std::copy (src, src + r * c0, dest);
+            {
+              octave_ucopy (r * c0, src, dest);
+              dest += r * c0;
+            }
           else
             {
               for (octave_idx_type k = 0; k < c0; k++)
                 {
-                  dest = std::copy (src, src + r0, dest);
+                  octave_ucopy (r0, src, dest);
                   src += rx;
-                  std::fill (dest, dest + r1, rfv);
+                  dest += r0;
+                  octave_fill (r1, rfv, dest);
                   dest += r1;
                 }
             }
 
-          std::fill (dest, dest + r * c1, rfv);
+          octave_fill (r * c1, rfv, dest);
 
           *this = tmp;
         }
     }
   else
     gripe_invalid_resize ();
 
 }
@@ -1545,18 +1552,18 @@ Array<T>::delete_elements (const idx_vec
         }
       else if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type m = n + l - u;
           Array<T> tmp (dim_vector (col_vec ? m : 1, !col_vec ? m : 1));
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
-          dest = std::copy (src, src + l, dest);
-          dest = std::copy (src + u, src + n, dest);
+          octave_ucopy (l, src, dest);
+          octave_ucopy (n - u, src + u, dest + l);
           *this = tmp;
         }
       else
         {
           // Use index.
           *this = index (i.complement (n));
         }
     }
@@ -1597,18 +1604,20 @@ Array<T>::delete_elements (int dim, cons
 
           // Special case deleting a contiguous range.
           Array<T> tmp = Array<T> (rdv);
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
           l *= dl; u *= dl; n *= dl;
           for (octave_idx_type k = 0; k < du; k++)
             {
-              dest = std::copy (src, src + l, dest);
-              dest = std::copy (src + u, src + n, dest);
+              octave_ucopy (l, src, dest);
+              dest += l;
+              octave_ucopy (n - u, src + u, dest);
+              dest += n - u;
               src += n;
             }
 
           *this = tmp;
         }
       else
         {
           // Use index.
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 
 #include "dim-vector.h"
 #include "idx-vector.h"
 #include "lo-traits.h"
 #include "lo-utils.h"
 #include "oct-sort.h"
 #include "quit.h"
+#include "oct-mem.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 class
 Array
 {
@@ -56,39 +57,39 @@ protected:
   {
   public:
 
     T *data;
     octave_idx_type len;
     int count;
 
     ArrayRep (T *d, octave_idx_type l, bool copy = false) 
-      : data (copy ? new T [l] : d), len (l), count (1) 
+      : data (copy ? octave_new<T> (l) : d), len (l), count (1) 
         { 
           if (copy)
-            std::copy (d, d + l, data);
+            octave_ucopy (l, d, data);
         }
 
     ArrayRep (void) : data (0), len (0), count (1) { }
 
-    explicit ArrayRep (octave_idx_type n) : data (new T [n]), len (n), count (1) { }
+    explicit ArrayRep (octave_idx_type n) : data (octave_new<T> (n)), len (n), count (1) { }
 
     explicit ArrayRep (octave_idx_type n, const T& val)
-      : data (new T [n]), len (n), count (1)
+      : data (octave_new<T> (n)), len (n), count (1)
       {
-        std::fill (data, data + n, val);
+        octave_fill (n, val, data);
       }
 
     ArrayRep (const ArrayRep& a)
-      : data (new T [a.len]), len (a.len), count (1)
+      : data (octave_new<T> (a.len)), len (a.len), count (1)
       {
-        std::copy (a.data, a.data + a.len, data);
+        octave_ucopy (a.len, a.data, data);
       }
  
-    ~ArrayRep (void) { delete [] data; }
+    ~ArrayRep (void) { octave_delete<T> (data); }
 
     octave_idx_type length (void) const { return len; }
 
   private:
 
     // No assignment!
 
     ArrayRep& operator = (const ArrayRep& a);
@@ -163,17 +164,17 @@ private:
 
       return nr;
     }
 
   template <class U>
   T *
   coerce (const U *a, octave_idx_type len)
   {
-    T *retval = new T [len];
+    T *retval = octave_new<T> (len);
 
     for (octave_idx_type i = 0; i < len; i++)
       retval[i] = T (a[i]);
 
     return retval;
   }
 
 public:
@@ -728,19 +729,19 @@ public:
   T& operator () (octave_idx_type i, octave_idx_type j)
     { return ArrayClass::xelem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
     { return ArrayClass::xelem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx)
     { return ArrayClass::xelem (ra_idx); }
 };
 
-#endif
-
 template <class T>
 std::ostream&
 operator << (std::ostream& os, const Array<T>& a);
 
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2009-11-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-mem.h: New source.
+	* Makefile.in: Include it.
+	* Array.h (Array<T>::ArrayRep::ArrayRep (...)): Use octave_new,
+	octave_ucopy and octave_fill.
+	(Array<T>::ArrayRep::~ArrayRep): Use octave_delete.
+	(Array<T>::coerce): Use octave_new.
+	* Array.cc (Array<T>::fill, rec_resize_helper::do_resize_fill,
+	Array<T>::resize_fill, rec_permute_helper::do_permute,
+	Array<T>::delete_elements): Use octave_ucopy and octave_fill.
+	* idx-vector.h (index_vector::index, index_vector::assign): Use
+	octave_ucopy.
+	* idx-vector.cc (index_vector::copy_data): Ditto.
+
 2009-11-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::maybe_reduce): Implement (i:k:end, :)
 	and (i:k:end, p:q) reductions.
 
 2009-11-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (twosum_accum): Remove FLOAT_TRUNCATE.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -91,17 +91,17 @@ INCLUDES := CollocWt.h DAE.h DAEFunc.h D
 	ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h functor.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
 	lo-ieee.h lo-mappers.h lo-math.h lo-specfun.h lo-sysdep.h \
 	lo-traits.h lo-utils.h mach-info.h md5.h oct-alloc.h oct-cmplx.h \
 	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-inttypes.h \
-	oct-locbuf.h oct-md5.h oct-mutex.h oct-norm.h \
+	oct-locbuf.h oct-md5.h oct-mem.h oct-mutex.h oct-norm.h \
         oct-passwd.h oct-rand.h oct-rl-edit.h oct-rl-hist.h oct-shlib.h \
         oct-sort.h oct-spparms.h oct-syscalls.h oct-sparse.h oct-time.h \
         oct-uname.h pathlen.h pathsearch.h prog-args.h \
 	randgamma.h randmtzig.h randpoisson.h regex-match.h \
 	sparse-sort.h statdefs.h str-vec.h \
 	sparse-util.h sun-utils.h sysdir.h systime.h syswait.h \
 	$(MATRIX_INC)
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -631,17 +631,17 @@ idx_vector::copy_data (octave_idx_type *
           idx_scalar_rep * r = dynamic_cast<idx_scalar_rep *> (rep);
           *data = r->get_data ();
         }
       break;
     case class_vector:
         {
           idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
           const octave_idx_type *rdata = r->get_data ();
-          std::copy (rdata, rdata + len, data);
+          octave_ucopy (len, rdata, data);
         }
       break;
     default:
       assert (false);
       break;
     }
 
 }
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <cassert>
 
 #include <algorithm>
 #include <iosfwd>
 
 #include "dim-vector.h"
 #include "oct-inttypes.h"
 #include "oct-alloc.h"
+#include "oct-mem.h"
 
 template<class T> class Array;
 template<class T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
 // 4 types of index objects: a magic colon, a range, a scalar, or an index vector.
@@ -512,25 +513,25 @@ public:
   template <class T>
   octave_idx_type
   index (const T *src, octave_idx_type n, T *dest) const
     {
       octave_idx_type len = rep->length (n);
       switch (rep->idx_class ())
         {
         case class_colon:
-          std::copy (src, src + len, dest);
+          octave_ucopy (len, src, dest);
           break;
         case class_range:
           {
             idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
             octave_idx_type start = r->get_start (), step = r->get_step ();
             const T *ssrc = src + start;
             if (step == 1)
-              std::copy (ssrc, ssrc + len, dest);
+              octave_ucopy (len, ssrc, dest);
             else if (step == -1)
               std::reverse_copy (ssrc - len + 1, ssrc + 1, dest);
             else if (step == 0)
               std::fill_n (dest, len, *ssrc);
             else
               {
                 for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                   dest[i] = ssrc[j];
@@ -570,25 +571,25 @@ public:
   template <class T>
   octave_idx_type
   assign (const T *src, octave_idx_type n, T *dest) const
     {
       octave_idx_type len = rep->length (n);
       switch (rep->idx_class ())
         {
         case class_colon:
-          std::copy (src, src + len, dest);
+          octave_ucopy (len, src, dest);
           break;
         case class_range:
           {
             idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
             octave_idx_type start = r->get_start (), step = r->get_step ();
             T *sdest = dest + start;
             if (step == 1)
-              std::copy (src, src + len, sdest);
+              octave_ucopy (len, src, sdest);
             else if (step == -1)
               std::reverse_copy (src, src + len, sdest - len + 1);
             else
               {
                 for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                   sdest[j] = src[i];
               }
           }
