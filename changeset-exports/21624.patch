# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1460325607 -3600
#      Sun Apr 10 23:00:07 2016 +0100
# Node ID cf227735d5fd3f9aac176c02559c4b90ec55347a
# Parent  555b6c78d6775f532c9e329dc9229a86da1b3e81
pkg: remove support for autoload (automatically loading package at start).

* pkg.m, pkg/private/install.m, pkg/private/load_packages.m,
pkg/private/rebuild.m: remove support for automatically loading packages.
Having octave itself and the package manager automatically load packages
is a bad idea. If a user wants to load a package at startup then it should
specify it on its octaverc file.  This can also be done on the system-wide
octaverc file.  This also simplifies pkg (this patch only removes code).
* startup/version-rcfile: do not run 'pkg ("load", "auto")' at startup.
* doc/interpreter/package.txi: remove mention of package autoload from the
manual.

diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -381,23 +381,16 @@ Optional keyword describing the package 
 given this is mandatory).
 
 @item Problems
 Optional list of known problems.
 
 @item Url
 Optional list of homepages related to the package.
 
-@item Autoload
-Optional field that sets the default loading behavior for the package.
-If set to @code{yes}, @code{true} or @code{on}, then Octave will
-automatically load the package when starting.  Otherwise the package
-must be manually loaded with the pkg load command.  This default
-behavior can be overridden when the package is installed.
-
 @item Depends
 A list of other Octave packages that this package depends on.  This can
 include dependencies on particular versions, with a format
 
 @example
 Depends: package (>= 1.0.0)
 @end example
 
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -43,24 +43,16 @@
 ## in which a package is installed.  These options can be one or more of
 ##
 ## @table @code
 ## @item -nodeps
 ## The package manager will disable dependency checking.  With this option it
 ## is possible to install a package even when it depends on another package
 ## which is not installed on the system.  @strong{Use this option with care.}
 ##
-## @item -noauto
-## The package manager will not automatically load the installed package
-## when starting Octave.  This overrides any setting within the package.
-##
-## @item -auto
-## The package manager will automatically load the installed package when
-## starting Octave.  This overrides any setting within the package.
-##
 ## @item -local
 ## A local installation (package available only to current user) is forced,
 ## even if the user has system privileges.
 ##
 ## @item -global
 ## A global installation (package available to all users) is forced, even if
 ## the user doesn't normally have system privileges.
 ##
@@ -266,25 +258,16 @@
 ## where @code{builddir} is the name of a directory where the temporary
 ## installation will be produced and the binary packages will be found.
 ## The options @option{-verbose} and @option{-nodeps} are respected, while
 ## all other options are ignored.
 ##
 ## @item rebuild
 ## Rebuild the package database from the installed directories.  This can
 ## be used in cases where the package database has been corrupted.
-## It can also take the @option{-auto} and @option{-noauto} options to allow
-## the autoloading state of a package to be changed.  For example,
-##
-## @example
-## pkg rebuild -noauto image
-## @end example
-##
-## @noindent
-## will remove the autoloading status of the image package.
 ##
 ## @end table
 ## @seealso{ver, news}
 ## @end deftypefn
 
 function [local_packages, global_packages] = pkg (varargin)
 
   ## Installation prefix (FIXME: what should these be on windows?)
@@ -315,28 +298,32 @@ function [local_packages, global_package
                        "describe", "update"};
 
   ## Parse input arguments
   if (isempty (varargin) || ! iscellstr (varargin))
     print_usage ();
   endif
   files = {};
   deps = true;
-  auto = 0;
   action = "none";
   verbose = false;
   octave_forge = false;
   for i = 1:numel (varargin)
     switch (varargin{i})
       case "-nodeps"
         deps = false;
+      ## TODO completely remove these warnings after some releases.
       case "-noauto"
-        auto = -1;
+        warning ("Octave:deprecated-option",
+                 ["pkg: autoload is no longer supported.  The -noauto "...
+                  "option is no longer required."]);
       case "-auto"
-        auto = 1;
+        warning ("Octave:deprecated-option",
+                 ["pkg: autoload is no longer supported.  Add a "...
+                  "'pkg load ...' command to octaverc instead."]);
       case "-verbose"
         verbose = true;
         ## Send verbose output to pager immediately.  Change setting locally.
         page_output_immediately (true, "local");
       case "-forge"
         if (! __octave_config_info__ ("CURL_LIBS"))
           error ("pkg: can't download from forge without the cURL library");
         endif
@@ -402,32 +389,32 @@ function [local_packages, global_package
           succ = [succ{:}];
           if (! all (succ))
             i = find (! succ, 1);
             error ("pkg: could not download file %s from url %s",
                    local_files{i}, urls{i});
           endif
         endif
 
-        install (files, deps, auto, prefix, archprefix, verbose, local_list,
+        install (files, deps, prefix, archprefix, verbose, local_list,
                  global_list, global_install);
 
       unwind_protect_cleanup
         cellfun ("unlink", local_files);
       end_unwind_protect
 
     case "uninstall"
       if (isempty (files))
         error ("pkg: uninstall action requires at least one package name");
       endif
       uninstall (files, deps, verbose, local_list, global_list, global_install);
 
     case "load"
       if (isempty (files))
-        error ("pkg: load action requires at least one package, 'all', or 'auto'");
+        error ("pkg: load action requires at least one package or 'all'");
       endif
       load_packages (files, deps, local_list, global_list);
 
     case "unload"
       if (isempty (files))
         error ("pkg: unload action requires at least one package or 'all'");
       endif
       unload_packages (files, deps, local_list, global_list);
@@ -503,25 +490,25 @@ function [local_packages, global_package
         global_list = canonicalize_file_name (global_list);
       else
         error ("pkg: specify a global_list file, or request an output argument");
       endif
 
     case "rebuild"
       if (global_install)
         global_packages = rebuild (prefix, archprefix, global_list, files,
-                                   auto, verbose);
+                                   verbose);
         global_packages = save_order (global_packages);
         save (global_list, "global_packages");
         if (nargout)
           local_packages = global_packages;
         endif
       else
         local_packages = rebuild (prefix, archprefix, local_list, files,
-                                  auto, verbose);
+                                  verbose);
         local_packages = save_order (local_packages);
         save (local_list, "local_packages");
         if (! nargout)
           clear ("local_packages");
         endif
       endif
 
     case "build"
@@ -566,9 +553,8 @@ function [local_packages, global_package
         endif
       endfor
 
     otherwise
       error ("pkg: invalid action.  See 'help pkg' for available actions");
   endswitch
 
 endfunction
-
diff --git a/scripts/pkg/private/install.m b/scripts/pkg/private/install.m
--- a/scripts/pkg/private/install.m
+++ b/scripts/pkg/private/install.m
@@ -13,21 +13,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} install (@var{files}, @var{handle_deps}, @var{autoload}, @var{prefix}, @var{archprefix}, @var{verbose}, @var{local_list}, @var{global_list}, @var{global_install})
+## @deftypefn {} {} install (@var{files}, @var{handle_deps}, @var{prefix}, @var{archprefix}, @var{verbose}, @var{local_list}, @var{global_list}, @var{global_install})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function install (files, handle_deps, autoload, prefix, archprefix, verbose,
+function install (files, handle_deps, prefix, archprefix, verbose,
                   local_list, global_list, global_install)
 
   ## Check that the directory in prefix exist. If it doesn't: create it!
   if (! exist (prefix, "dir"))
     warning ("creating installation directory %s", prefix);
     [status, msg] = mkdir (prefix);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
@@ -249,39 +249,16 @@ function install (files, handle_deps, au
         && dirempty (getarchdir (descriptions{i})))
       warning ("package %s is empty\n", descriptions{i}.name);
       rmdir (descriptions{i}.dir, "s");
       rmdir (getarchdir (descriptions{i}), "s");
       descriptions(i) = [];
     endif
   endfor
 
-  ## If the package requested that it is autoloaded, or the installer
-  ## requested that it is, then mark the package as autoloaded.
-  str_true = {"true", "on", "yes", "1"};
-  for i = length (descriptions):-1:1
-
-    desc_autoload = false;
-    if (isfield (descriptions{i}, "autoload"))
-      a = descriptions{i}.autoload;
-      desc_autoload = ((isnumeric (a) && a > 0)
-                       || (ischar (a)
-                           && any (strcmpi (a, str_true))));
-    endif
-
-    if (autoload > 0 || (autoload == 0 && desc_autoload))
-      fclose (fopen (fullfile (descriptions{i}.dir, "packinfo",
-                               ".autoload"), "wt"));
-      descriptions{i}.autoload = 1;
-    else
-      descriptions{i}.autoload = 0;
-    endif
-
-  endfor
-
   ## Add the packages to the package list.
   try
     if (global_install)
       idx = setdiff (1:length (global_packages), packages_to_uninstall);
       global_packages = save_order ({global_packages{idx}, descriptions{:}});
       save (global_list, "global_packages");
       installed_pkgs_lst = {local_packages{:}, global_packages{:}};
     else
@@ -309,35 +286,16 @@ function install (files, handle_deps, au
   ## All is well, let's clean up.
   for i = 1:length (tmpdirs)
     [status, msg] = rmdir (tmpdirs{i}, "s");
     if (status != 1 && exist (tmpdirs{i}, "dir"))
       warning ("couldn't clean up after my self: %s\n", msg);
     endif
   endfor
 
-  ## Add the newly installed packages to the path, so the user
-  ## can begin using them. Only load them if they are marked autoload.
-  if (length (descriptions) > 0)
-    idx = [];
-    for i = 1:length (descriptions)
-      if (descriptions{i}.autoload > 0)
-        nm = descriptions{i}.name;
-        for j = 1:length (installed_pkgs_lst)
-          if (strcmp (nm, installed_pkgs_lst{j}.name))
-            idx(end + 1) = j;
-            break;
-          endif
-        endfor
-      endif
-    endfor
-    load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst,
-                                    global_install);
-  endif
-
   ## If there is a NEWS file, mention it.
   ## Check if desc exists too because it's possible to get to this point
   ## without creating it such as giving an invalid filename for the package
   if (exist ("desc", "var")
       && exist (fullfile (desc.dir, "packinfo", "NEWS"), "file"))
     printf ("For information about changes from previous versions of the %s package, run 'news %s'.\n",
             desc.name, desc.name);
   endif
diff --git a/scripts/pkg/private/load_packages.m b/scripts/pkg/private/load_packages.m
--- a/scripts/pkg/private/load_packages.m
+++ b/scripts/pkg/private/load_packages.m
@@ -31,25 +31,16 @@ function load_packages (files, handle_de
   for i = 1:num_packages
     pnames{i} = installed_pkgs_lst{i}.name;
     pdirs{i} = installed_pkgs_lst{i}.dir;
   endfor
 
   ## Load all.
   if (length (files) == 1 && strcmp (files{1}, "all"))
     idx = [1:length(installed_pkgs_lst)];
-  ## Load auto.
-  elseif (length (files) == 1 && strcmp (files{1}, "auto"))
-    idx = [];
-    for i = 1:length (installed_pkgs_lst)
-      if (exist (fullfile (pdirs{i}, "packinfo", ".autoload"), "file"))
-        idx(end + 1) = i;
-      endif
-    endfor
-  ## Load package_name1 ...
   else
     idx = [];
     for i = 1:length (files)
       idx2 = find (strcmp (pnames, files{i}));
       if (! any (idx2))
           error ("package %s is not installed", files{i});
       endif
       idx(end + 1) = idx2;
diff --git a/scripts/pkg/private/rebuild.m b/scripts/pkg/private/rebuild.m
--- a/scripts/pkg/private/rebuild.m
+++ b/scripts/pkg/private/rebuild.m
@@ -13,21 +13,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {@var{descriptions} =} rebuild (@var{prefix}, @var{archprefix}, @var{list}, @var{files}, @var{auto}, @var{verbose})
+## @deftypefn {} {@var{descriptions} =} rebuild (@var{prefix}, @var{archprefix}, @var{list}, @var{files}, @var{verbose})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function descriptions = rebuild (prefix, archprefix, list, files, auto, verbose)
+function descriptions = rebuild (prefix, archprefix, list, files, verbose)
   if (isempty (files))
     [dirlist, err, msg] = readdir (prefix);
     if (err)
       error ("couldn't read directory %s: %s", prefix, msg);
     endif
     ## the two first entries of dirlist are "." and ".."
     dirlist([1,2]) = [];
   else
@@ -45,33 +45,16 @@ function descriptions = rebuild (prefix,
     descfile = fullfile (prefix, dirlist{k}, "packinfo", "DESCRIPTION");
     if (verbose)
       printf ("recreating package description from %s\n", dirlist{k});
     endif
     if (exist (descfile, "file"))
       desc = get_description (descfile);
       desc.dir = fullfile (prefix, dirlist{k});
       desc.archprefix = fullfile (archprefix, [desc.name "-" desc.version]);
-      if (auto != 0)
-        if (exist (fullfile (desc.dir, "packinfo", ".autoload"), "file"))
-          unlink (fullfile (desc.dir, "packinfo", ".autoload"));
-        endif
-        if (auto < 0)
-          desc.autoload = 0;
-        elseif (auto > 0)
-          desc.autoload = 1;
-          fclose (fopen (fullfile (desc.dir, "packinfo", ".autoload"), "wt"));
-        endif
-      else
-        if (exist (fullfile (desc.dir, "packinfo", ".autoload"), "file"))
-          desc.autoload = 1;
-        else
-          desc.autoload = 0;
-        endif
-      endif
       descriptions{end + 1} = desc;
     elseif (verbose)
       warning ("directory %s is not a valid package", dirlist{k});
     endif
   endfor
 
   if (! isempty (files))
     ## We are rebuilding for a particular package(s) so we should take
diff --git a/scripts/startup/version-rcfile b/scripts/startup/version-rcfile
--- a/scripts/startup/version-rcfile
+++ b/scripts/startup/version-rcfile
@@ -11,20 +11,16 @@ readline_read_init_file (sprintf ("%s%s%
                                   __octave_config_info__ ("startupfiledir"),
                                   filesep, "inputrc"));
 
 ## Configure LESS pager if present
 if (strcmp (PAGER (), "less") && isempty (getenv ("LESS")))
   PAGER_FLAGS ('-e -X -P"-- less ?pB(%pB\\%):--. (f)orward, (b)ack, (q)uit$"');
 endif
 
-## This appears here instead of in the pkg/PKG_ADD file so that --norc
-## will also skip automatic loading of packages.
-pkg ("load", "auto");
-
 ## For Matlab compatibility, run startup.m when starting Octave.
 if (exist ("startup", "file"))
   startup;  # No arg list here since startup might be a script.
 endif
 
 ## For Matlab compatibility, schedule finish.m to run when exiting Octave.
 atexit ("__finish__");
 
