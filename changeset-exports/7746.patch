# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1209659679 -7200
#      Thu May 01 18:34:39 2008 +0200
# Node ID 95dce69538ec27d8e38c224ec8d84fef9cadb3db
# Parent  0ff0fc033f2834d1b44af74fe99c8c34810bf401
Allow additional options to stairs plots

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,19 @@
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
 	* elfun/acot.m, elfun/acsc.m, elfun/acsch.m, elfun/asec.m,
 	elfun/asech.m, specfun/pow2.m: Fix tests.
 
+2008-05-01  David Bateman  <dbateman@free.fr>
+
+	* plot/plot.m: Remove documentation of 'L' option.
+	* plot/stairs.m: Allow axis handles, properties and linespecs to
+	be passed.
+
 2008-04-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* specfun/log2.m: Delete. 
 	* specfun/Makefile.in (SOURCES): Delete it from the list.
 
 2008-04-29  David Bateman  <dbateman@free.fr>
 
 	pkg/pkg.m: Also set archprefix with the -local and -global options.
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -104,19 +104,16 @@
 ## Set lines plot style (default).
 ##
 ## @item .
 ## Set dots plot style.
 ##
 ## @item ^
 ## Set impulses plot style.
 ##
-## @item L
-## Set steps plot style.
-##
 ## @item @var{n}
 ## Interpreted as the plot color if @var{n} is an integer in the range 1 to
 ## 6.
 ##
 ## @item @var{nm}
 ## If @var{nm} is a two digit integer and @var{m} is an integer in the
 ## range 1 to 6, @var{m} is interpreted as the point style.  This is only
 ## valid in combination with the @code{@@} or @code{-@@} specifiers.
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -14,16 +14,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stairs (@var{x}, @var{y})
+## @deftypefnx {Function File} {} stairs (@dots{}, @var{style})
+## @deftypefnx {Function File} {} stairs (@dots{}, @var{prop}, @var{val})
+## @deftypefnx {Function File} {} stairs (@var{h}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} stairs (@dots{})
 ## Produce a stairstep plot.  The arguments may be vectors or matrices.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## If two output arguments are specified, the data are generated but
 ## not plotted.  For example,
 ##
@@ -44,30 +48,56 @@
 ## @noindent
 ## are equivalent.
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, xlabel, ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
-function [xs, ys] = stairs (x, y)
+function [xs, ys] = stairs (varargin)
 
-  if (nargin < 1 || nargin > 2)
-    print_usage ();
-  endif
+  [ax, varargin, nargin] = __plt_get_axis_arg__ ("stairs", varargin{:});
 
-  if (nargin == 1)
-    if (ismatrix (x))
-      if (isvector (x))
-	x = x(:);
+  if (nargin < 1)
+    print_usage ();
+  else
+    if (nargout > 1)
+      [h, xs, ys] = __stairs__ (false, varargin{:});
+    else
+      oldax = gca ();
+      unwind_protect
+	axes (ax);
+	newplot ();
+	[h, xxs, yys] = __stairs__ (true, varargin{:});
+      unwind_protect_cleanup
+	axes (oldax);
+      end_unwind_protect
+    endif
+    if (nargout == 1)
+      xs = h;
+    endif
+  endif
+endfunction
+
+function [h, xs, ys] = __stairs__ (doplot, varargin)
+
+  if (nargin == 1 || ischar (varargin{2}))
+    idx = 1;
+    y = varargin {1};
+    if (ismatrix (y))
+      if (isvector (y))
+	y = y(:);
       endif
-      y = x;
       x = 1:rows (y);
     endif
+  else
+    idx = 2;
+    x = varargin{1};
+    y = varargin{2};
   endif
 
   if (ndims (x) > 2 || ndims (y) > 2)
     error ("stairs: expecting 2-d arguments");
   endif
 
   vec_x = isvector (x);
 
@@ -88,35 +118,34 @@ function [xs, ys] = stairs (x, y)
       if (x_nr != nr || x_nc != nc)
 	error ("stairs: argument size mismatch");
       endif
     endif
   endif
 
   len = 2*nr - 1;
 
-  tmp_xs = tmp_ys = zeros (len, nc);
+  xs = ys = zeros (len, nc);
 
-  tmp_xs(1,:) = x(1,:);
-  tmp_ys(1,:) = y(1,:);
+  xs(1,:) = x(1,:);
+  ys(1,:) = y(1,:);
 
-  tmp_x = x(2:nr,:);
+  x = x(2:nr,:);
   ridx = 2:2:len-1;
-  tmp_xs(ridx,:) = tmp_x;
-  tmp_ys(ridx,:) = y(1:nr-1,:);
+  xs(ridx,:) = x;
+  ys(ridx,:) = y(1:nr-1,:);
 
   ridx = 3:2:len;
-  tmp_xs(ridx,:) = tmp_x;
-  tmp_ys(ridx,:) = y(2:nr,:);
+  xs(ridx,:) = x;
+  ys(ridx,:) = y(2:nr,:);
 
-  if (nargout == 0)
-    plot (tmp_xs, tmp_ys);
+  if (doplot)
+    h = plot (xs, ys, varargin{idx+1:end});
   else
-    xs = tmp_xs;
-    ys = tmp_ys;
+    h = 0;
   endif
 
 endfunction
 
 %!demo
 %! x = 1:10;
 %! y = rand (1, 10);
 ## stairs (x, y);
