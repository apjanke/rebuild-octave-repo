# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1538938927 -7200
#      Sun Oct 07 21:02:07 2018 +0200
# Node ID ea5182364e5f36d1222a18ed2ee73551b8d7e400
# Parent  a533a7c4d2ccd5ef58a271e11e422afc09bc3d48
Implement "resize" property for Qt figures (bug #54774)

* Figure.h/cc (Figure::m_resizable): New data member.
  (Figure::set_geometry): New private method that allows resizing a figure
  even when its size has been fixed.
  (Figure::update): Handle the "resize" property. Call QWidget::setSizePolicy
  and QWidget::setFixedSize to (dis)allow figure resizing and set m_resizable.
  (Figure::Figure, Figure::update, Figure::showFigureToolBar,
  Figure::updateFigureHeight, Figure::addCustomToolBar,
  Figure::showCustomToolBar): Make use of Figure::set_geometry rather that
  directly calling QMainWindow::setGeometry.

* genpropdoc.m: Document the "resize" figure property.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -517,17 +517,20 @@ and width and height of the figure.  \
 
       case "renderer"
         s.doc = doc_unused;
 
       case "renderermode"
         s.doc = doc_unused;
 
       case "resize"
-        s.doc = doc_unused;
+        s.doc = "Control whether the figure can be resized by dragging the \
+window borders and corners using a mouse.  When __prop__ is @qcode{\"off\"} \
+mouse interactions are disabled but the figure can still be resized by \
+changing its @qcode{\"position\"} property.";
 
       case "resizefcn"
         s.doc = "__prop__ is deprecated.  Use @code{sizechangedfcn} instead.";
         s.valid = valid_fcn;
 
       case "selectiontype"
         ## FIXME: docstring explaining what "{normal}|open|alt|extend" mean.
 
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -106,17 +106,17 @@ namespace QtHandles
   Figure::create (const graphics_object& go)
   {
     return new Figure (go, new FigureWindow ());
   }
 
   Figure::Figure (const graphics_object& go, FigureWindow *win)
     : Object (go, win), m_blockUpdates (false), m_figureToolBar (nullptr),
       m_menuBar (nullptr), m_innerRect (), m_outerRect (),
-      m_mouseModeGroup (nullptr)
+      m_mouseModeGroup (nullptr), m_previousHeight (0), m_resizable (true)
   {
     m_container = new Container (win);
     win->setCentralWidget (m_container);
 
     figure::properties& fp = properties<figure> ();
 
     // Register for the signal that indicates when a window has moved
     // to a different screen
@@ -142,17 +142,17 @@ namespace QtHandles
       {
         m_figureToolBar->hide ();
         m_statusBar->hide ();
       }
 
     m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
     m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
 
-    win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
+    set_geometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
 
     // Enable mouse tracking unconditionally
     enableMouseTracking ();
 
     // When this constructor gets called all properties are already
     // set, even non default. We force "update" here to get things right.
 
     // Figure title
@@ -161,16 +161,19 @@ namespace QtHandles
     // Decide what keyboard events we listen to
     m_container->canvas (m_handle)->setEventMask (0);
     update (figure::properties::ID_KEYPRESSFCN);
     update (figure::properties::ID_KEYRELEASEFCN);
 
     // modal style
     update (figure::properties::ID_WINDOWSTYLE);
 
+    // Handle resizing constraints
+    update (figure::properties::ID_RESIZE);
+
     // Visibility
     update (figure::properties::ID_VISIBLE);
 
     connect (this, SIGNAL (asyncUpdate (void)),
              this, SLOT (updateContainer (void)));
 
     win->addReceiver (this);
     m_container->addReceiver (this);
@@ -312,16 +315,36 @@ namespace QtHandles
   {
     if (m_mouseModeGroup)
       {
         m_blockUpdates = true;
         m_mouseModeGroup->setMode (mouseMode ());
         m_blockUpdates = false;
       }
   }
+  
+  void
+  Figure::set_geometry (QRect r)
+  {
+    QMainWindow *win = qWidget<QMainWindow> ();
+    
+    if (! m_resizable)
+      {
+        win->setSizePolicy (QSizePolicy::Preferred, QSizePolicy::Preferred);
+        win->setFixedSize (QSize( QWIDGETSIZE_MAX, QWIDGETSIZE_MAX));
+      }
+
+    win->setGeometry (r);
+    
+    if (! m_resizable)
+      {
+        win->setSizePolicy (QSizePolicy::Fixed, QSizePolicy::Fixed);
+        win->setFixedSize(win->size ());
+      }
+  }
 
   Container*
   Figure::innerContainer (void)
   {
     return m_container;
   }
 
   void
@@ -430,17 +453,17 @@ namespace QtHandles
               toffset += tb->sizeHint ().height ();
 
           if (! m_menuBar->isHidden ())
             toffset += m_menuBar->sizeHint ().height ();
 
           if (! m_statusBar->isHidden ())
             boffset += m_statusBar->sizeHint ().height ();
 
-          win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
+          set_geometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
         }
         break;
 
       case figure::properties::ID_NAME:
       case figure::properties::ID_NUMBERTITLE:
         win->setWindowTitle (Utils::fromStdString (fp.get_title ()));
         break;
 
@@ -453,16 +476,31 @@ namespace QtHandles
                 gh_manager::auto_lock lock;
                 fp.set ("__gl_window__", "on");
               }
           }
         else
           win->hide ();
         break;
 
+      case figure::properties::ID_RESIZE:
+        if (fp.is_resize ())
+          {
+            win->setSizePolicy (QSizePolicy::Preferred, QSizePolicy::Preferred);
+            win->setFixedSize (QSize( QWIDGETSIZE_MAX, QWIDGETSIZE_MAX));
+            m_resizable = true;
+          }
+        else
+          {
+            win->setSizePolicy (QSizePolicy::Fixed, QSizePolicy::Fixed);
+            win->setFixedSize(win->size ());
+            m_resizable = false;
+          }
+        break;
+
       case figure::properties::ID_TOOLBAR:
         if (fp.toolbar_is ("none"))
           showFigureToolBar (false);
         else if (fp.toolbar_is ("figure"))
           showFigureToolBar (true);
         else // "auto"
           showFigureToolBar (! hasUiControlChildren (fp) &&
                              fp.menubar_is ("figure"));
@@ -526,17 +564,17 @@ namespace QtHandles
         QRect r = qWidget<QWidget> ()->geometry ();
 
         if (! visible)
           r.adjust (0, dy1, 0, -dy2);
         else
           r.adjust (0, -dy1, 0, dy2);
 
         m_blockUpdates = true;
-        qWidget<QWidget> ()->setGeometry (r);
+        set_geometry (r);
         m_figureToolBar->setVisible (visible);
         m_statusBar->setVisible (visible);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
@@ -548,17 +586,17 @@ namespace QtHandles
 
     if (go.valid_object () && dh != 0)
       {
         QRect r = qWidget<QWidget> ()->geometry ();
 
         r.adjust (0, dh, 0, 0);
 
         m_blockUpdates = true;
-        qWidget<QWidget> ()->setGeometry (r);
+        set_geometry (r);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
   void
   Figure::updateStatusBar (ColumnVector pt)
@@ -826,17 +864,17 @@ namespace QtHandles
       {
         QSize sz = bar->sizeHint ();
         QRect r = win->geometry ();
         //qDebug () << "Figure::addCustomToolBar:" << r;
 
         r.adjust (0, -sz.height (), 0, 0);
 
         m_blockUpdates = true;
-        win->setGeometry (r);
+        set_geometry (r);
         win->addToolBarBreak ();
         win->addToolBar (bar);
         m_blockUpdates = false;
 
         //qDebug () << "Figure::addCustomToolBar:" << win->geometry ();
         updateBoundingBox (false);
       }
   }
@@ -852,17 +890,17 @@ namespace QtHandles
         QRect r = win->geometry ();
 
         if (visible)
           r.adjust (0, -sz.height (), 0, 0);
         else
           r.adjust (0, sz.height (), 0, 0);
 
         m_blockUpdates = true;
-        win->setGeometry (r);
+        set_geometry (r);
         bar->setVisible (visible);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
   void
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -101,18 +101,18 @@ namespace QtHandles
     void updateBoundingBox (bool internal = false, int flags = 0);
     void beingDeleted (void);
 
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
     void addCustomToolBar (QToolBar *bar, bool visible);
     void showCustomToolBar (QToolBar *bar, bool visible);
-
     void updateFigureToolBarAndMenuBar (void);
+    void set_geometry (QRect r);
 
     static void updateBoundingBoxHelper (void*);
 
     void close_figure_callback (void);
 
     void enableMouseTracking (void);
 
   private slots:
@@ -136,13 +136,14 @@ namespace QtHandles
     bool m_blockUpdates;
     QToolBar *m_figureToolBar;
     MenuBar *m_menuBar;
     QStatusBar *m_statusBar;
     QRect m_innerRect;
     QRect m_outerRect;
     MouseModeActionGroup *m_mouseModeGroup;
     int m_previousHeight;
+    bool m_resizable;
   };
 
 }
 
 #endif
