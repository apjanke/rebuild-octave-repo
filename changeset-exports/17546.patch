# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1380758692 14400
#      Wed Oct 02 20:04:52 2013 -0400
# Node ID 53ae37d37b167d48268cbec305acdcd0dfc393d4
# Parent  2eeea8b67b63cfdc1eea4910dbf076f7f1279fbd
rename curl_handle and curl_handle_rep classes

* urlwrite.cc (curl_object): Rename from curl_handle.
(curl_object_rep): Rename from curl_handle_rep.
(reset_path): Pass object by reference.

diff --git a/libinterp/dldfcn/urlwrite.cc b/libinterp/dldfcn/urlwrite.cc
--- a/libinterp/dldfcn/urlwrite.cc
+++ b/libinterp/dldfcn/urlwrite.cc
@@ -76,32 +76,30 @@ read_data (void *buffer, size_t size, si
 }
 
 static size_t
 throw_away (void *, size_t size, size_t nmemb, void *)
 {
   return static_cast<size_t>(size * nmemb);
 }
 
-class
-curl_handle
+class curl_object
 {
 private:
-  class
-  curl_handle_rep
+  class curl_object_rep
   {
   public:
-    curl_handle_rep (void) : count (1), valid (true), ascii (false)
+    curl_object_rep (void) : count (1), valid (true), ascii (false)
       {
         curl = curl_easy_init ();
         if (!curl)
-          error ("can not create curl handle");
+          error ("can not create curl object");
       }
 
-    ~curl_handle_rep (void)
+    ~curl_object_rep (void)
       {
         if (curl)
           curl_easy_cleanup (curl);
       }
 
     bool is_valid (void) const
       {
         return valid;
@@ -123,17 +121,17 @@ private:
             else
               retval = true;
 
             END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           }
         return retval;
       }
 
-    CURL* handle (void) const
+    CURL *object (void) const
       {
         return curl;
       }
 
     bool is_ascii (void) const
       {
         return ascii;
       }
@@ -151,70 +149,70 @@ private:
     bool ascii;
     mutable CURLcode errnum;
 
   private:
     CURL *curl;
 
     // No copying!
 
-    curl_handle_rep (const curl_handle_rep& ov);
+    curl_object_rep (const curl_object_rep& ov);
 
-    curl_handle_rep& operator = (const curl_handle_rep&);
+    curl_object_rep& operator = (const curl_object_rep&);
   };
 
 public:
 
-// I'd love to rewrite this as a private method of the curl_handle
+// I'd love to rewrite this as a private method of the curl_object
 // class, but you can't pass the va_list from the wrapper setopt to
 // the curl_easy_setopt function.
 #define setopt(option, parameter) \
   { \
-    CURLcode res = curl_easy_setopt (rep->handle (), option, parameter); \
+    CURLcode res = curl_easy_setopt (rep->object (), option, parameter); \
     if (res != CURLE_OK) \
       error ("%s", curl_easy_strerror (res)); \
   }
 
-  curl_handle (void) : rep (new curl_handle_rep ())
+  curl_object (void) : rep (new curl_object_rep ())
     {
       rep->valid = false;
     }
 
-  curl_handle (const std::string& _host, const std::string& user,
+  curl_object (const std::string& _host, const std::string& user,
                const std::string& passwd) :
-    rep (new curl_handle_rep ())
+    rep (new curl_object_rep ())
     {
       rep->host = _host;
       init (user, passwd, std::cin, octave_stdout);
 
       rep->url = "ftp://" + _host;
       setopt (CURLOPT_URL, rep->url.c_str ());
 
       // Setup the link, with no transfer
       if (!error_state)
         perform ();
     }
 
-  curl_handle (const std::string& url, const std::string& method,
+  curl_object (const std::string& url, const std::string& method,
                const Cell& param, std::ostream& os, bool& retval) :
-    rep (new curl_handle_rep ())
+    rep (new curl_object_rep ())
     {
       retval = false;
 
       init ("", "", std::cin, os);
 
       setopt (CURLOPT_NOBODY, 0);
 
       // Restore the default HTTP request method to GET after setting
       // NOBODY to true and back to false.  This is needed for backward
       // compatibility with versions of libcurl < 7.18.2.
       setopt (CURLOPT_HTTPGET, 1);
 
       // Don't need to store the parameters here as we can't change
-      // the URL after the handle is created
+      // the URL after the object is created
       std::string query_string = form_query_string (param);
 
       if (method == "get")
         {
           query_string = url + "?" + query_string;
           setopt (CURLOPT_URL, query_string.c_str ());
         }
       else if (method == "post")
@@ -224,28 +222,28 @@ public:
         }
       else
         setopt (CURLOPT_URL, url.c_str ());
 
       if (!error_state)
         retval = perform (false);
     }
 
-  curl_handle (const curl_handle& h) : rep (h.rep)
+  curl_object (const curl_object& h) : rep (h.rep)
     {
       rep->count++;
     }
 
-  ~curl_handle (void)
+  ~curl_object (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
-  curl_handle& operator = (const curl_handle& h)
+  curl_object& operator = (const curl_object& h)
     {
       if (this != &h)
         {
           if (--rep->count == 0)
             delete rep;
 
           rep = h.rep;
           rep->count++;
@@ -465,20 +463,20 @@ public:
               fileisdir = true;
               filetime = -1;
               filesize = 0;
             }
           else
             {
               fileisdir = false;
               time_t ft;
-              curl_easy_getinfo (rep->handle (), CURLINFO_FILETIME, &ft);
+              curl_easy_getinfo (rep->object (), CURLINFO_FILETIME, &ft);
               filetime = ft;
               double fs;
-              curl_easy_getinfo (rep->handle (),
+              curl_easy_getinfo (rep->object (),
                                  CURLINFO_CONTENT_LENGTH_DOWNLOAD, &fs);
               filesize = fs;
             }
         }
 
       setopt (CURLOPT_WRITEFUNCTION, write_data);
       setopt (CURLOPT_HEADERFUNCTION, 0);
       setopt (CURLOPT_FILETIME, 0);
@@ -522,31 +520,31 @@ public:
     }
 
   bool perform (bool curlerror = true) const
     {
       return rep->perform (curlerror);
     }
 
 private:
-  curl_handle_rep *rep;
+  curl_object_rep *rep;
 
   std::string form_query_string (const Cell& param)
     {
       std::ostringstream query;
 
       for (int i = 0; i < param.numel (); i += 2)
         {
           std::string name = param(i).string_value ();
           std::string text = param(i+1).string_value ();
 
           // Encode strings.
-          char *enc_name = curl_easy_escape (rep->handle (), name.c_str (),
+          char *enc_name = curl_easy_escape (rep->object (), name.c_str (),
                                              name.length ());
-          char *enc_text = curl_easy_escape (rep->handle (), text.c_str (),
+          char *enc_text = curl_easy_escape (rep->object (), text.c_str (),
                                              text.length ());
 
           query << enc_name << "=" << enc_text;
 
           curl_free (enc_name);
           curl_free (enc_text);
 
           if (i < param.numel ()-1)
@@ -601,18 +599,18 @@ private:
 #undef setopt
 };
 
 class
 curl_handles
 {
 public:
 
-  typedef std::map<std::string, curl_handle>::iterator iterator;
-  typedef std::map<std::string, curl_handle>::const_iterator const_iterator;
+  typedef std::map<std::string, curl_object>::iterator iterator;
+  typedef std::map<std::string, curl_object>::const_iterator const_iterator;
 
   curl_handles (void) : map ()
    {
      curl_global_init (CURL_GLOBAL_DEFAULT);
    }
 
   ~curl_handles (void)
     {
@@ -629,55 +627,55 @@ public:
   iterator end (void) { return iterator (map.end ()); }
   const_iterator end (void) const { return const_iterator (map.end ()); }
 
   iterator seek (const std::string& k) { return map.find (k); }
   const_iterator seek (const std::string& k) const { return map.find (k); }
 
   std::string key (const_iterator p) const { return p->first; }
 
-  curl_handle& contents (const std::string& k)
+  curl_object& contents (const std::string& k)
     {
       return map[k];
     }
 
-  curl_handle contents (const std::string& k) const
+  curl_object contents (const std::string& k) const
     {
       const_iterator p = seek (k);
-      return p != end () ? p->second : curl_handle ();
+      return p != end () ? p->second : curl_object ();
     }
 
-  curl_handle& contents (iterator p)
+  curl_object& contents (iterator p)
     { return p->second; }
 
-  curl_handle contents (const_iterator p) const
+  curl_object contents (const_iterator p) const
     { return p->second; }
 
   void del (const std::string& k)
     {
       iterator p = map.find (k);
 
       if (p != map.end ())
         map.erase (p);
     }
 
 private:
-  std::map<std::string, curl_handle> map;
+  std::map<std::string, curl_object> map;
 };
 
 static curl_handles handles;
 
 static void
 cleanup_urlwrite (std::string filename)
 {
   octave_unlink (filename);
 }
 
 static void
-reset_path (const curl_handle curl)
+reset_path (const curl_object& curl)
 {
   curl.cwd ("..");
 }
 
 static void
 delete_file (std::string file)
 {
   octave_unlink (file);
@@ -810,17 +808,17 @@ urlwrite (\"http://www.google.com/search
       return retval;
     }
 
   unwind_protect_safe frame;
 
   frame.add_fcn (cleanup_urlwrite, filename);
 
   bool ok;
-  curl_handle curl = curl_handle (url, method, param, ofile, ok);
+  curl_object curl = curl_object (url, method, param, ofile, ok);
 
   ofile.close ();
 
   if (!error_state)
     frame.discard ();
   else
     frame.run ();
 
@@ -944,17 +942,17 @@ s = urlread (\"http://www.google.com/sea
           error ("urlread: number of elements in PARAM must be even");
           return retval;
         }
     }
 
   std::ostringstream buf;
 
   bool ok;
-  curl_handle curl = curl_handle (url, method, param, buf, ok);
+  curl_object curl = curl_object (url, method, param, buf, ok);
 
   if (nargout > 0)
     {
       // Return empty string if no error occured.
       retval(2) = ok ? "" : curl.lasterror ();
       retval(1) = ok;
       retval(0) = buf.str ();
     }
@@ -993,17 +991,17 @@ Undocumented internal function\n\
       if (nargin > 1)
         user = args(2).string_value ();
 
       if (nargin > 2)
         passwd = args(3).string_value ();
 
       if (!error_state)
         {
-          handles.contents (handle) = curl_handle (host, user, passwd);
+          handles.contents (handle) = curl_object (host, user, passwd);
 
           if (error_state)
             handles.del (handle);
         }
     }
 #else
   gripe_disabled_feature ("__ftp__", "FTP");
 #endif
@@ -1024,17 +1022,17 @@ Undocumented internal function\n\
   if (nargin != 1)
     error ("__ftp_pwd__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             retval = curl.pwd ();
           else
             error ("__ftp_pwd__: invalid ftp handle");
         }
     }
 #else
@@ -1060,17 +1058,17 @@ Undocumented internal function\n\
       std::string handle = args(0).string_value ();
       std::string path = "";
 
       if (nargin > 1)
         path  = args(1).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.cwd (path);
           else
             error ("__ftp_cwd__: invalid ftp handle");
         }
     }
 #else
@@ -1093,17 +1091,17 @@ Undocumented internal function\n\
   if (nargin != 1)
     error ("__ftp_dir__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             {
               if (nargout == 0)
                 curl.dir ();
               else
                 {
                   string_vector sv = curl.list ();
@@ -1172,17 +1170,17 @@ Undocumented internal function\n\
   if (nargin != 1)
     error ("__ftp_ascii__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.ascii ();
           else
             error ("__ftp_ascii__: invalid ftp handle");
         }
     }
 #else
@@ -1204,17 +1202,17 @@ Undocumented internal function\n\
   if (nargin != 1)
     error ("__ftp_binary__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.binary ();
           else
             error ("__ftp_binary__: invalid ftp handle");
         }
     }
 #else
@@ -1263,17 +1261,17 @@ Undocumented internal function\n\
     error ("__ftp_mode__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
 
 
       if (! error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             retval = (curl.is_ascii () ? "ascii" : "binary");
           else
             error ("__ftp_binary__: invalid ftp handle");
         }
     }
 #else
@@ -1296,17 +1294,17 @@ Undocumented internal function\n\
     error ("__ftp_delete__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
       std::string file = args(1).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.del (file);
           else
             error ("__ftp_delete__: invalid ftp handle");
         }
     }
 #else
@@ -1329,17 +1327,17 @@ Undocumented internal function\n\
     error ("__ftp_rmdir__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
       std::string dir = args(1).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.rmdir (dir);
           else
             error ("__ftp_rmdir__: invalid ftp handle");
         }
     }
 #else
@@ -1362,17 +1360,17 @@ Undocumented internal function\n\
     error ("__ftp_mkdir__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
       std::string dir = args(1).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.mkdir (dir);
           else
             error ("__ftp_mkdir__: invalid ftp handle");
         }
     }
 #else
@@ -1396,34 +1394,34 @@ Undocumented internal function\n\
   else
     {
       std::string handle = args(0).string_value ();
       std::string oldname = args(1).string_value ();
       std::string newname = args(2).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             curl.rename (oldname, newname);
           else
             error ("__ftp_rename__: invalid ftp handle");
         }
     }
 #else
   gripe_disabled_feature ("__ftp_rename__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 #ifdef HAVE_CURL
 static string_vector
-mput_directory (const curl_handle& curl, const std::string& base,
+mput_directory (const curl_object& curl, const std::string& base,
                 const std::string& dir)
 {
   string_vector retval;
 
   if (! curl.mkdir (dir, false))
     warning ("__ftp_mput__: can not create the remote directory ""%s""",
              (base.length () == 0 ? dir : base +
               file_ops::dir_sep_str () + dir).c_str ());
@@ -1517,17 +1515,17 @@ Undocumented internal function\n\
     error ("__ftp_mput__: incorrect number of arguments");
   else
     {
       std::string handle = args(0).string_value ();
       std::string pat = args(1).string_value ();
 
       if (!error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             {
               glob_match pattern (file_ops::tilde_expand (pat));
               string_vector files = pattern.glob ();
 
               for (octave_idx_type i = 0; i < files.length (); i++)
                 {
@@ -1578,17 +1576,17 @@ Undocumented internal function\n\
   gripe_disabled_feature ("__ftp_mput__", "FTP");
 #endif
 
   return (nargout > 0 ? octave_value (retval) : octave_value ());
 }
 
 #ifdef HAVE_CURL
 static void
-getallfiles (const curl_handle& curl, const std::string& dir,
+getallfiles (const curl_object& curl, const std::string& dir,
              const std::string& target)
 {
   std::string sep = file_ops::dir_sep_str ();
   file_stat fs (dir);
 
   if (!fs || !fs.is_dir ())
     {
       std::string msg;
@@ -1673,17 +1671,17 @@ Undocumented internal function\n\
       std::string file = args(1).string_value ();
       std::string target;
 
       if (nargin == 3)
         target = args(2).string_value () + file_ops::dir_sep_str ();
 
       if (! error_state)
         {
-          const curl_handle curl = handles.contents (handle);
+          const curl_object curl = handles.contents (handle);
 
           if (curl.is_valid ())
             {
               string_vector sv = curl.list ();
               octave_idx_type n = 0;
               glob_match pattern (file);
 
               for (octave_idx_type i = 0; i < sv.length (); i++)
