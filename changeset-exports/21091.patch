# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452888716 18000
#      Fri Jan 15 15:11:56 2016 -0500
# Node ID 72eefc36c6b7fd36e38fc29b53d0260639d49883
# Parent  93d2945112778b41df60542895f45e97e1ac510e
use correct value extractor functions in glpk

* __glpk__.cc: Use x*_value functions when passing error message.

diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -441,22 +441,22 @@ Undocumented internal function.\n\
           ub[i] = octave_Inf;
         }
       else
         freeUB(i) = 0;
     }
 
   // 6th Input. A column array containing the sense of each constraint
   //            in the constraint matrix.
-  charMatrix CTYPE = args(5).char_matrix_value ("__glpk__: invalid value of CTYPE");
+  charMatrix CTYPE = args(5).xchar_matrix_value ("__glpk__: invalid value of CTYPE");
 
   char *ctype = CTYPE.fortran_vec ();
 
   // 7th Input. A column array containing the types of the variables.
-  charMatrix VTYPE = args(6).char_matrix_value ("__glpk__: invalid value of VARTYPE");
+  charMatrix VTYPE = args(6).xchar_matrix_value ("__glpk__: invalid value of VARTYPE");
 
   Array<int> vartype (dim_vector (mrowsc, 1));
   int isMIP = 0;
   for (int i = 0; i < mrowsc ; i++)
     {
       if (VTYPE(i,0) == 'I')
         {
           isMIP = 1;
@@ -589,20 +589,21 @@ Undocumented internal function.\n\
   double fmin = octave_NA;
   ColumnVector lambda (mrowsA, octave_NA);
   ColumnVector redcosts (mrowsc, octave_NA);
   double time;
   int status;
 
   int errnum = glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
                      cn.fortran_vec (), a.fortran_vec (), b, ctype,
-                     freeLB.fortran_vec (), lb, freeUB.fortran_vec (), ub,
-                     vartype.fortran_vec (), isMIP, lpsolver, save_pb, scale,
-                     &par, xmin.fortran_vec (), &fmin, &status,
-                     lambda.fortran_vec (), redcosts.fortran_vec (), &time);
+                     freeLB.fortran_vec (), lb, freeUB.fortran_vec (),
+                     ub, vartype.fortran_vec (), isMIP, lpsolver,
+                     save_pb, scale, &par, xmin.fortran_vec (), &fmin,
+                     &status, lambda.fortran_vec (),
+                     redcosts.fortran_vec (), &time);
 
   octave_scalar_map extra;
 
   if (! isMIP)
     {
       extra.assign ("lambda", lambda);
       extra.assign ("redcosts", redcosts);
     }
