# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294904265 18000
#      Thu Jan 13 02:37:45 2011 -0500
# Node ID 367bfee35ba00e69e82adeb60f68d2c211ee86ab
# Parent  7bddd70bc838902b6a710a7b77493c1f4203b2c1
data member initialization fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,42 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* CmplxCHOL.h (ComplexCHOL::ComplexCHOL): Initialize all data
+	members in constructor initialization lists.
+	* CmplxGEPBAL.h (ComplexGEPBALANCE::ComplexGEPBALANCE): Likewise.
+	* CmplxHESS.h (ComplexHESS::ComplexHESS): Likewise.
+	* CmplxSCHUR.h, CmplxSCHUR.cc (ComplexSCHUR::ComplexSCHUR): Likewise.
+	* CmplxSVD.h (ComplexSVD::ComplexSVD): Likewise.
+	* DET.h (base_det::base_det): Likewise.
+	* EIG.h (EIG::EIG): Likewise.
+	* SparseCmplxQR.cc
+	(SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep):
+	Likewise.
+	* SparseQR.cc (SparseQR::SparseQR_rep::SparseQR_rep): Likewise.
+	* dbleCHOL.h (CHOL::CHOL): Likewise.
+	* dbleGEPBAL.h (GEPBALANCE::GEPBALANCE): Likewise.
+	* dbleHESS.h (HESS::HESS): Likewise.
+	* dbleSCHUR.h, dbleSCHUR.cc (SCHUR::SCHUR): Likewise.
+	* dbleSVD.h (SVD::SVD): Likewise.
+	* fCmplxCHOL.h (FloatComplexCHOL::FloatComplexCHOL): Likewise.
+	* fCmplxGEPBAL.h
+	(FloatComplexGEPBALANCE::FloatComplexGEPBALANCE): Likewise.
+	* fCmplxHESS.h (FloatComplexHESS::FloatComplexHESS): Likewise.
+	* fCmplxSCHUR.h, fCmplxSCHUR.cc
+	(FloatComplexSCHUR::FloatComplexSCHUR): Likewise.
+	* fCmplxSVD.h (FloatComplexSVD::FloatComplexSVD):
+	Likewise.
+	* fEIG.h (FloatEIG::FloatEIG): Likewise.
+	* floatCHOL.h (FloatCHOL::FloatCHOL): Likewise.
+	* floatGEPBAL.h (FloatGEPBALANCE::FloatGEPBALANCE): Likewise.
+	* floatHESS.h (FloatHESS::FloatHESS): Likewise.
+	* floatSCHUR.h, floatSCHUR.cc (FloatSCHUR::FloatSCHUR): Likewise.
+	* floatSVD.h (FloatSVD::FloatSVD): Likewise.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* LSODE.cc, DASSL.cc, DASRT.cc, DASPK.cc, CmplxSVD.cc,
 	CmplxSCHUR.cc, CmplxHESS.cc, CmplxGEPBAL.cc, CmplxCHOL.cc,
 	EIG.cc, dbleCHOL.cc, dbleGEPBAL.cc, dbleHESS.cc, dbleSCHUR.cc,
 	dbleSVD.cc, fCmplxCHOL.cc, fCmplxGEPBAL.cc, fCmplxHESS.cc,
 	fCmplxSCHUR.cc, fCmplxSVD.cc, fEIG.cc, floatCHOL.cc,
 	floatGEPBAL.cc, floatHESS.cc, floatSCHUR.cc, floatSVD.cc:
diff --git a/liboctave/CmplxCHOL.h b/liboctave/CmplxCHOL.h
--- a/liboctave/CmplxCHOL.h
+++ b/liboctave/CmplxCHOL.h
@@ -31,21 +31,27 @@ along with Octave; see the file COPYING.
 #include "CColVector.h"
 
 class
 OCTAVE_API
 ComplexCHOL
 {
 public:
 
-  ComplexCHOL (void) : chol_mat () { }
+  ComplexCHOL (void) : chol_mat (), xrcond (0) { }
 
-  ComplexCHOL (const ComplexMatrix& a, bool calc_cond = false) { init (a, calc_cond); }
+  ComplexCHOL (const ComplexMatrix& a, bool calc_cond = false)
+    : chol_mat (), xrcond (0)
+    {
+      init (a, calc_cond);
+    }
 
-  ComplexCHOL (const ComplexMatrix& a, octave_idx_type& info, bool calc_cond = false)
+  ComplexCHOL (const ComplexMatrix& a, octave_idx_type& info,
+               bool calc_cond = false)
+    : chol_mat (), xrcond (0)
     {
       info = init (a, calc_cond);
     }
 
   ComplexCHOL (const ComplexCHOL& a)
     : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
 
   ComplexCHOL& operator = (const ComplexCHOL& a)
diff --git a/liboctave/CmplxGEPBAL.h b/liboctave/CmplxGEPBAL.h
--- a/liboctave/CmplxGEPBAL.h
+++ b/liboctave/CmplxGEPBAL.h
@@ -31,26 +31,30 @@ along with Octave; see the file COPYING.
 #include "dMatrix.h"
 
 class
 OCTAVE_API
 ComplexGEPBALANCE
 {
 public:
 
-  ComplexGEPBALANCE (void) : balanced_mat (), balancing_mat () { }
+  ComplexGEPBALANCE (void)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
+    { }
 
-  ComplexGEPBALANCE (const ComplexMatrix& a, const ComplexMatrix& b, const std::string& balance_job)
+  ComplexGEPBALANCE (const ComplexMatrix& a, const ComplexMatrix& b,
+                     const std::string& balance_job)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
     {
       init (a, b, balance_job); 
     }
 
   ComplexGEPBALANCE (const ComplexGEPBALANCE& a)
     : balanced_mat (a.balanced_mat), balanced_mat2 (a.balanced_mat2),
-    balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
+      balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
 
   ComplexGEPBALANCE& operator = (const ComplexGEPBALANCE& a)
     {
       if (this != &a)
         {
           balanced_mat = a.balanced_mat;
           balanced_mat2 = a.balanced_mat2;
           balancing_mat = a.balancing_mat;
diff --git a/liboctave/CmplxHESS.h b/liboctave/CmplxHESS.h
--- a/liboctave/CmplxHESS.h
+++ b/liboctave/CmplxHESS.h
@@ -31,19 +31,27 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 ComplexHESS
 {
 public:
 
   ComplexHESS (void) : hess_mat (), unitary_hess_mat () { }
 
-  ComplexHESS (const ComplexMatrix& a) { init (a); }
+  ComplexHESS (const ComplexMatrix& a)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      init (a);
+    }
 
-  ComplexHESS (const ComplexMatrix& a, octave_idx_type& info) { info = init (a); }
+  ComplexHESS (const ComplexMatrix& a, octave_idx_type& info)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      info = init (a);
+    }
 
   ComplexHESS (const ComplexHESS& a)
     : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   ComplexHESS& operator = (const ComplexHESS& a)
     {
       if (this != &a)
         {
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -143,28 +143,28 @@ ComplexSCHUR::init (const ComplexMatrix&
                              pwork, lwork, prwork, pbwork, info
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
 
-ComplexSCHUR::ComplexSCHUR (const ComplexMatrix& s, 
-                            const ComplexMatrix& u)
-: schur_mat (s), unitary_mat (u)
+ComplexSCHUR::ComplexSCHUR (const ComplexMatrix& s, const ComplexMatrix& u)
+  : schur_mat (s), unitary_mat (u), selector (0)
 {
   octave_idx_type n = s.rows ();
   if (s.columns () != n || u.rows () != n || u.columns () != n)
     (*current_liboctave_error_handler)
       ("schur: inconsistent matrix dimensions");
 }
 
 ComplexSCHUR::ComplexSCHUR (const SCHUR& s)
-: schur_mat (s.schur_matrix ()), unitary_mat (s.unitary_matrix ())
+  : schur_mat (s.schur_matrix ()), unitary_mat (s.unitary_matrix ()),
+    selector (0)
 {
   octave_idx_type n = schur_mat.rows ();
   if (n > 0)
     {
       OCTAVE_LOCAL_BUFFER (double, c, n-1);
       OCTAVE_LOCAL_BUFFER (double, sx, n-1);
 
       F77_XFCN (zrsf2csf, ZRSF2CSF, (n, schur_mat.fortran_vec (),
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -31,29 +31,36 @@ along with Octave; see the file COPYING.
 #include "dbleSCHUR.h"
 
 class
 OCTAVE_API
 ComplexSCHUR
 {
 public:
 
-  ComplexSCHUR (void)
-    : schur_mat (), unitary_mat () { }
+  ComplexSCHUR (void) : schur_mat (), unitary_mat (), selector (0) { }
 
   ComplexSCHUR (const ComplexMatrix& a, const std::string& ord,
                 bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      init (a, ord, calc_unitary);
+    }
 
-  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord, octave_idx_type& info,
+  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord,
+                octave_idx_type& info,
                 bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      info = init (a, ord, calc_unitary);
+    }
 
   ComplexSCHUR (const ComplexSCHUR& a)
-    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat), selector (0)
+    { }
 
   ComplexSCHUR (const ComplexMatrix& s, const ComplexMatrix& u);
 
   ComplexSCHUR (const SCHUR& s);
 
   ComplexSCHUR& operator = (const ComplexSCHUR& a)
     {
       if (this != &a)
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -31,33 +31,39 @@ along with Octave; see the file COPYING.
 #include "dbleSVD.h"
 
 class
 OCTAVE_API
 ComplexSVD
 {
 public:
 
-  ComplexSVD (void) { }
+  ComplexSVD (void)
+    : type_computed (), sigma (), left_sm (), right_sm ()
+    { }
 
-  ComplexSVD (const ComplexMatrix& a, 
-              SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+  ComplexSVD (const ComplexMatrix& a, SVD::type svd_type = SVD::std,
+              SVD::driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
-    { init (a, svd_type, svd_driver); }
+      init (a, svd_type, svd_driver);
     }
 
   ComplexSVD (const ComplexMatrix& a, octave_idx_type& info,
-              SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+              SVD::type svd_type = SVD::std,
+              SVD::driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
       info = init (a, svd_type, svd_driver);
     }
 
   ComplexSVD (const ComplexSVD& a)
-    : type_computed (a.type_computed),
-      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed), sigma (a.sigma),
+      left_sm (a.left_sm), right_sm (a.right_sm)
+    { }
 
   ComplexSVD& operator = (const ComplexSVD& a)
     {
       if (this != &a)
         {
           type_computed = a.type_computed;
           sigma = a.sigma;
           left_sm = a.left_sm;
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -34,42 +34,69 @@ class
 OCTAVE_API
 EIG
 {
 friend class Matrix;
 friend class ComplexMatrix;
 
 public:
 
-  EIG (void)
-    : lambda (), v () { }
+  EIG (void) : lambda (), v () { }
 
   EIG (const Matrix& a, bool calc_eigenvectors = true)
-    { init (a, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    init (a, calc_eigenvectors);
+  }
 
   EIG (const Matrix& a, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    info = init (a, calc_eigenvectors);
+  }
 
   EIG (const Matrix& a, const Matrix& b, bool calc_eigenvectors = true)
-    { init (a, b, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    init (a, b, calc_eigenvectors);
+  }
 
-  EIG (const Matrix& a, const Matrix& b, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, b, calc_eigenvectors); }
+  EIG (const Matrix& a, const Matrix& b, octave_idx_type& info,
+       bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, b, calc_eigenvectors);
+  }
 
   EIG (const ComplexMatrix& a, bool calc_eigenvectors = true)
-    { init (a, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    init (a, calc_eigenvectors);
+  }
 
-  EIG (const ComplexMatrix& a, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, calc_eigenvectors); }
+  EIG (const ComplexMatrix& a, octave_idx_type& info,
+       bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, calc_eigenvectors);
+  }
 
-  EIG (const ComplexMatrix& a, const ComplexMatrix& b, bool calc_eigenvectors = true)
-    { init (a, b, calc_eigenvectors); }
+  EIG (const ComplexMatrix& a, const ComplexMatrix& b,
+       bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    init (a, b, calc_eigenvectors);
+  }
 
-  EIG (const ComplexMatrix& a, const ComplexMatrix& b, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, b, calc_eigenvectors); }
+  EIG (const ComplexMatrix& a, const ComplexMatrix& b,
+       octave_idx_type& info, bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, b, calc_eigenvectors);
+  }
 
   EIG (const EIG& a)
     : lambda (a.lambda), v (a.v) { }
 
   EIG& operator = (const EIG& a)
     {
       if (this != &a)
         {
@@ -88,19 +115,32 @@ public:
   friend std::ostream&  operator << (std::ostream& os, const EIG& a);
 
 private:
 
   ComplexColumnVector lambda;
   ComplexMatrix v;
 
   octave_idx_type init (const Matrix& a, bool calc_eigenvectors);
-  octave_idx_type init (const Matrix& a, const Matrix& b, bool calc_eigenvectors);
+
+  octave_idx_type init (const Matrix& a, const Matrix& b,
+                        bool calc_eigenvectors);
+
   octave_idx_type init (const ComplexMatrix& a, bool calc_eigenvectors);
-  octave_idx_type init (const ComplexMatrix& a, const ComplexMatrix& b, bool calc_eigenvectors);
+
+  octave_idx_type init (const ComplexMatrix& a, const ComplexMatrix& b,
+                        bool calc_eigenvectors);
 
   octave_idx_type symmetric_init (const Matrix& a, bool calc_eigenvectors);
-  octave_idx_type symmetric_init (const Matrix& a, const Matrix& b, bool calc_eigenvectors);
-  octave_idx_type hermitian_init (const ComplexMatrix& a, bool calc_eigenvectors);
-  octave_idx_type hermitian_init (const ComplexMatrix& a, const ComplexMatrix& b, bool calc_eigenvectors);
+
+  octave_idx_type symmetric_init (const Matrix& a, const Matrix& b,
+                                  bool calc_eigenvectors);
+
+  octave_idx_type hermitian_init (const ComplexMatrix& a,
+                                  bool calc_eigenvectors);
+
+  octave_idx_type hermitian_init (const ComplexMatrix& a,
+                                  const ComplexMatrix& b,
+                                  bool calc_eigenvectors);
+
 };
 
 #endif
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -44,17 +44,18 @@ typedef double _Complex cs_complex_t;
 #else
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, (n));
 #define OCTAVE_C99_ZERO cs_complex_t(0., 0.);
 #define OCTAVE_C99_ONE cs_complex_t(1., 0.);
 #endif
 
 SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep 
-(GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
+  (GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
+  : count (1), nrows (0), N (0), S (0)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_ZNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 #include <vector>
 
 #include "lo-error.h"
 #include "SparseQR.h"
 #include "oct-locbuf.h"
 
 SparseQR::SparseQR_rep::SparseQR_rep (const SparseMatrix& a, int order)
+  : count (1), nrows (0), N (0), S (0)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_DNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
diff --git a/liboctave/dbleCHOL.h b/liboctave/dbleCHOL.h
--- a/liboctave/dbleCHOL.h
+++ b/liboctave/dbleCHOL.h
@@ -31,22 +31,29 @@ along with Octave; see the file COPYING.
 #include "dColVector.h"
 
 class
 OCTAVE_API
 CHOL
 {
 public:
 
-  CHOL (void) : chol_mat () { }
+  CHOL (void) : chol_mat (), xrcond (0) { }
 
-  CHOL (const Matrix& a, bool calc_cond = false) { init (a, calc_cond); }
+  CHOL (const Matrix& a, bool calc_cond = false)
+    : chol_mat (), xrcond (0)
+    {
+      init (a, calc_cond);
+    }
 
   CHOL (const Matrix& a, octave_idx_type& info, bool calc_cond = false) 
-    { info = init (a, calc_cond); }
+    : chol_mat (), xrcond (0)
+    {
+      info = init (a, calc_cond);
+    }
 
   CHOL (const CHOL& a) : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
 
   CHOL& operator = (const CHOL& a)
     {
       if (this != &a)
         {
           chol_mat = a.chol_mat;
diff --git a/liboctave/dbleGEPBAL.h b/liboctave/dbleGEPBAL.h
--- a/liboctave/dbleGEPBAL.h
+++ b/liboctave/dbleGEPBAL.h
@@ -30,26 +30,30 @@ along with Octave; see the file COPYING.
 #include "dMatrix.h"
 
 class
 OCTAVE_API
 GEPBALANCE
 {
 public:
 
-  GEPBALANCE (void) : balanced_mat (), balancing_mat () { }
+  GEPBALANCE (void)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
+    { }
 
   GEPBALANCE (const Matrix& a, const Matrix& b, const std::string& balance_job)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
     {
       init (a, b, balance_job); 
     }
 
   GEPBALANCE (const GEPBALANCE& a)
     : balanced_mat (a.balanced_mat), balanced_mat2 (a.balanced_mat2),
-    balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
+      balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2)
+    { }
 
   GEPBALANCE& operator = (const GEPBALANCE& a)
     {
       if (this != &a)
         {
           balanced_mat = a.balanced_mat;
           balanced_mat2 = a.balanced_mat2;
           balancing_mat = a.balancing_mat;
diff --git a/liboctave/dbleHESS.h b/liboctave/dbleHESS.h
--- a/liboctave/dbleHESS.h
+++ b/liboctave/dbleHESS.h
@@ -31,19 +31,23 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 HESS
 {
 public:
 
   HESS (void) : hess_mat (), unitary_hess_mat () { }
 
-  HESS (const Matrix& a) { init (a); }
+  HESS (const Matrix& a) : hess_mat (), unitary_hess_mat () { init (a); }
 
-  HESS (const Matrix& a, octave_idx_type& info) { info = init (a); }
+  HESS (const Matrix& a, octave_idx_type& info)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      info = init (a);
+    }
 
   HESS (const HESS& a)
     : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   HESS& operator = (const HESS& a)
     {
       if (this != &a)
         {
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -153,16 +153,16 @@ operator << (std::ostream& os, const SCH
 {
   os << a.schur_matrix () << "\n";
   os << a.unitary_matrix () << "\n";
 
   return os;
 }
 
 SCHUR::SCHUR (const Matrix& s, const Matrix& u)
-: schur_mat (s), unitary_mat (u)
+  : schur_mat (s), unitary_mat (u), selector (0)
 {
   octave_idx_type n = s.rows ();
   if (s.columns () != n || u.rows () != n || u.columns () != n)
     (*current_liboctave_error_handler)
       ("schur: inconsistent matrix dimensions");
 }
 
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -30,28 +30,34 @@ along with Octave; see the file COPYING.
 #include "dMatrix.h"
 
 class
 OCTAVE_API
 SCHUR
 {
 public:
 
-  SCHUR (void)
-    : schur_mat (), unitary_mat () { }
+  SCHUR (void) : schur_mat (), unitary_mat (), selector (0) { }
 
   SCHUR (const Matrix& a, const std::string& ord, bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      init (a, ord, calc_unitary);
+    }
 
   SCHUR (const Matrix& a, const std::string& ord, int& info, 
          bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      info = init (a, ord, calc_unitary);
+    }
 
   SCHUR (const SCHUR& a)
-    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat), selector (0)
+    { }
 
   SCHUR (const Matrix& s, const Matrix& u);
 
   SCHUR& operator = (const SCHUR& a)
     {
       if (this != &a)
         {
           schur_mat = a.schur_mat;
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -43,31 +43,36 @@ public:
     };
 
   enum driver
     {
       GESVD,
       GESDD
     };
 
-  SVD (void) : sigma (), left_sm (), right_sm () { }
+  SVD (void) : type_computed (), sigma (), left_sm (), right_sm () { }
 
   SVD (const Matrix& a, 
        type svd_type = SVD::std, driver svd_driver = SVD::GESVD) 
-    { init (a, svd_type, svd_driver); }
+    : type_computed (), sigma (), left_sm (), right_sm ()
+    {
+      init (a, svd_type, svd_driver);
+    }
 
   SVD (const Matrix& a, octave_idx_type& info, 
        type svd_type = SVD::std, driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
       info = init (a, svd_type, svd_driver);
     }
 
   SVD (const SVD& a)
-    : type_computed (a.type_computed),
-      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed), sigma (a.sigma),
+      left_sm (a.left_sm), right_sm (a.right_sm)
+    { }
 
   SVD& operator = (const SVD& a)
     {
       if (this != &a)
         {
           type_computed = a.type_computed;
           sigma = a.sigma;
           left_sm = a.left_sm;
diff --git a/liboctave/fCmplxCHOL.h b/liboctave/fCmplxCHOL.h
--- a/liboctave/fCmplxCHOL.h
+++ b/liboctave/fCmplxCHOL.h
@@ -31,21 +31,27 @@ along with Octave; see the file COPYING.
 #include "fCColVector.h"
 
 class
 OCTAVE_API
 FloatComplexCHOL
 {
 public:
 
-  FloatComplexCHOL (void) : chol_mat () { }
+  FloatComplexCHOL (void) : chol_mat (), xrcond (0) { }
 
-  FloatComplexCHOL (const FloatComplexMatrix& a, bool calc_cond = false) { init (a, calc_cond); }
+  FloatComplexCHOL (const FloatComplexMatrix& a, bool calc_cond = false)
+    : chol_mat (), xrcond (0)
+    {
+      init (a, calc_cond);
+    }
 
-  FloatComplexCHOL (const FloatComplexMatrix& a, octave_idx_type& info, bool calc_cond = false)
+  FloatComplexCHOL (const FloatComplexMatrix& a, octave_idx_type& info,
+                    bool calc_cond = false)
+    : chol_mat (), xrcond (0)
     {
       info = init (a, calc_cond);
     }
 
   FloatComplexCHOL (const FloatComplexCHOL& a)
     : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
 
   FloatComplexCHOL& operator = (const FloatComplexCHOL& a)
@@ -66,23 +72,25 @@ public:
   FloatComplexMatrix inverse (void) const;
 
   void set (const FloatComplexMatrix& R);
 
   void update (const FloatComplexColumnVector& u);
 
   octave_idx_type downdate (const FloatComplexColumnVector& u);
 
-  octave_idx_type insert_sym (const FloatComplexColumnVector& u, octave_idx_type j);
+  octave_idx_type insert_sym (const FloatComplexColumnVector& u,
+                              octave_idx_type j);
 
   void delete_sym (octave_idx_type j);
 
   void shift_sym (octave_idx_type i, octave_idx_type j);
 
-  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatComplexCHOL& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os,
+                                               const FloatComplexCHOL& a);
 
 private:
 
   FloatComplexMatrix chol_mat;
 
   float xrcond;
 
   octave_idx_type init (const FloatComplexMatrix& a, bool calc_cond);
diff --git a/liboctave/fCmplxGEPBAL.h b/liboctave/fCmplxGEPBAL.h
--- a/liboctave/fCmplxGEPBAL.h
+++ b/liboctave/fCmplxGEPBAL.h
@@ -31,26 +31,32 @@ along with Octave; see the file COPYING.
 #include "fCMatrix.h"
 
 class
 OCTAVE_API
 FloatComplexGEPBALANCE
 {
 public:
 
-  FloatComplexGEPBALANCE (void) : balanced_mat (), balancing_mat () { }
+  FloatComplexGEPBALANCE (void)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
+    { }
 
-  FloatComplexGEPBALANCE (const FloatComplexMatrix& a, const FloatComplexMatrix& b, const std::string& balance_job)
+  FloatComplexGEPBALANCE (const FloatComplexMatrix& a,
+                          const FloatComplexMatrix& b,
+                          const std::string& balance_job)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
     {
       init (a, b, balance_job); 
     }
 
   FloatComplexGEPBALANCE (const FloatComplexGEPBALANCE& a)
     : balanced_mat (a.balanced_mat), balanced_mat2 (a.balanced_mat2),
-    balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
+      balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2)
+    { }
 
   FloatComplexGEPBALANCE& operator = (const FloatComplexGEPBALANCE& a)
     {
       if (this != &a)
         {
           balanced_mat = a.balanced_mat;
           balanced_mat2 = a.balanced_mat2;
           balancing_mat = a.balancing_mat;
diff --git a/liboctave/fCmplxHESS.h b/liboctave/fCmplxHESS.h
--- a/liboctave/fCmplxHESS.h
+++ b/liboctave/fCmplxHESS.h
@@ -31,19 +31,27 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 FloatComplexHESS
 {
 public:
 
   FloatComplexHESS (void) : hess_mat (), unitary_hess_mat () { }
 
-  FloatComplexHESS (const FloatComplexMatrix& a) { init (a); }
+  FloatComplexHESS (const FloatComplexMatrix& a)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      init (a);
+    }
 
-  FloatComplexHESS (const FloatComplexMatrix& a, octave_idx_type& info) { info = init (a); }
+  FloatComplexHESS (const FloatComplexMatrix& a, octave_idx_type& info)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      info = init (a);
+    }
 
   FloatComplexHESS (const FloatComplexHESS& a)
     : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   FloatComplexHESS& operator = (const FloatComplexHESS& a)
     {
       if (this != &a)
         {
diff --git a/liboctave/fCmplxSCHUR.cc b/liboctave/fCmplxSCHUR.cc
--- a/liboctave/fCmplxSCHUR.cc
+++ b/liboctave/fCmplxSCHUR.cc
@@ -144,26 +144,27 @@ FloatComplexSCHUR::init (const FloatComp
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
 
 FloatComplexSCHUR::FloatComplexSCHUR (const FloatComplexMatrix& s, 
                                       const FloatComplexMatrix& u)
-: schur_mat (s), unitary_mat (u)
+  : schur_mat (s), unitary_mat (u), selector (0)
 {
   octave_idx_type n = s.rows ();
   if (s.columns () != n || u.rows () != n || u.columns () != n)
     (*current_liboctave_error_handler)
       ("schur: inconsistent matrix dimensions");
 }
 
 FloatComplexSCHUR::FloatComplexSCHUR (const FloatSCHUR& s)
-: schur_mat (s.schur_matrix ()), unitary_mat (s.unitary_matrix ())
+  : schur_mat (s.schur_matrix ()), unitary_mat (s.unitary_matrix ()),
+    selector (0)
 {
   octave_idx_type n = schur_mat.rows ();
   if (n > 0)
     {
       OCTAVE_LOCAL_BUFFER (float, c, n-1);
       OCTAVE_LOCAL_BUFFER (float, sx, n-1);
 
       F77_XFCN (crsf2csf, CRSF2CSF, (n, schur_mat.fortran_vec (),
diff --git a/liboctave/fCmplxSCHUR.h b/liboctave/fCmplxSCHUR.h
--- a/liboctave/fCmplxSCHUR.h
+++ b/liboctave/fCmplxSCHUR.h
@@ -31,29 +31,35 @@ along with Octave; see the file COPYING.
 #include "floatSCHUR.h"
 
 class
 OCTAVE_API
 FloatComplexSCHUR
 {
 public:
 
-  FloatComplexSCHUR (void)
-    : schur_mat (), unitary_mat () { }
+  FloatComplexSCHUR (void) : schur_mat (), unitary_mat (), selector (0) { }
 
   FloatComplexSCHUR (const FloatComplexMatrix& a, const std::string& ord,
                 bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      init (a, ord, calc_unitary);
+    }
 
-  FloatComplexSCHUR (const FloatComplexMatrix& a, const std::string& ord, octave_idx_type& info,
-                bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
+  FloatComplexSCHUR (const FloatComplexMatrix& a, const std::string& ord,
+                     octave_idx_type& info, bool calc_unitary = true)
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      info = init (a, ord, calc_unitary);
+    }
 
   FloatComplexSCHUR (const FloatComplexSCHUR& a)
-    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat), selector (0)
+    { }
 
   FloatComplexSCHUR (const FloatComplexMatrix& s, const FloatComplexMatrix& u);
 
   FloatComplexSCHUR (const FloatSCHUR& s);
 
   FloatComplexSCHUR& operator = (const FloatComplexSCHUR& a)
     {
       if (this != &a)
diff --git a/liboctave/fCmplxSVD.h b/liboctave/fCmplxSVD.h
--- a/liboctave/fCmplxSVD.h
+++ b/liboctave/fCmplxSVD.h
@@ -31,33 +31,40 @@ along with Octave; see the file COPYING.
 #include "dbleSVD.h"
 
 class
 OCTAVE_API
 FloatComplexSVD
 {
 public:
 
-  FloatComplexSVD (void) { }
+  FloatComplexSVD (void)
+    : type_computed (), sigma (), left_sm (), right_sm ()
+    { }
 
   FloatComplexSVD (const FloatComplexMatrix& a, 
-                   SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+                   SVD::type svd_type = SVD::std,
+                   SVD::driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
       init (a, svd_type, svd_driver);
     }
 
   FloatComplexSVD (const FloatComplexMatrix& a, octave_idx_type& info,
-                   SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+                   SVD::type svd_type = SVD::std,
+                   SVD::driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
       info = init (a, svd_type, svd_driver);
     }
 
   FloatComplexSVD (const FloatComplexSVD& a)
-    : type_computed (a.type_computed),
-      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed), sigma (a.sigma),
+      left_sm (a.left_sm), right_sm (a.right_sm)
+    { }
 
   FloatComplexSVD& operator = (const FloatComplexSVD& a)
     {
       if (this != &a)
         {
           type_computed = a.type_computed;
           sigma = a.sigma;
           left_sm = a.left_sm;
diff --git a/liboctave/fEIG.h b/liboctave/fEIG.h
--- a/liboctave/fEIG.h
+++ b/liboctave/fEIG.h
@@ -38,41 +38,70 @@ friend class FloatMatrix;
 friend class FloatComplexMatrix;
 
 public:
 
   FloatEIG (void)
     : lambda (), v () { }
 
   FloatEIG (const FloatMatrix& a, bool calc_eigenvectors = true)
-    { init (a, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    init (a, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatMatrix& a, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, calc_eigenvectors); }
+  FloatEIG (const FloatMatrix& a, octave_idx_type& info,
+            bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatMatrix& a, const FloatMatrix& b, bool calc_eigenvectors = true)
-    { init (a, b, calc_eigenvectors); }
+  FloatEIG (const FloatMatrix& a, const FloatMatrix& b,
+            bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    init (a, b, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatMatrix& a, const FloatMatrix& b, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, b, calc_eigenvectors); }
+  FloatEIG (const FloatMatrix& a, const FloatMatrix& b, octave_idx_type& info,
+            bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, b, calc_eigenvectors);
+  }
 
   FloatEIG (const FloatComplexMatrix& a, bool calc_eigenvectors = true)
-    { init (a, calc_eigenvectors); }
+    : lambda (), v ()
+  {
+    init (a, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatComplexMatrix& a, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, calc_eigenvectors); }
+  FloatEIG (const FloatComplexMatrix& a, octave_idx_type& info,
+            bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatComplexMatrix& a, const FloatComplexMatrix& b, bool calc_eigenvectors = true)
-    { init (a, b, calc_eigenvectors); }
+  FloatEIG (const FloatComplexMatrix& a, const FloatComplexMatrix& b,
+            bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    init (a, b, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatComplexMatrix& a, const FloatComplexMatrix& b, octave_idx_type& info, bool calc_eigenvectors = true)
-    { info = init (a, b, calc_eigenvectors); }
+  FloatEIG (const FloatComplexMatrix& a, const FloatComplexMatrix& b,
+            octave_idx_type& info, bool calc_eigenvectors = true)
+    : lambda (), v ()
+  {
+    info = init (a, b, calc_eigenvectors);
+  }
 
-  FloatEIG (const FloatEIG& a)
-    : lambda (a.lambda), v (a.v) { }
+  FloatEIG (const FloatEIG& a) : lambda (a.lambda), v (a.v) { }
 
   FloatEIG& operator = (const FloatEIG& a)
     {
       if (this != &a)
         {
           lambda = a.lambda;
           v = a.v;
         }
diff --git a/liboctave/floatCHOL.h b/liboctave/floatCHOL.h
--- a/liboctave/floatCHOL.h
+++ b/liboctave/floatCHOL.h
@@ -31,22 +31,30 @@ along with Octave; see the file COPYING.
 #include "fColVector.h"
 
 class
 OCTAVE_API
 FloatCHOL
 {
 public:
 
-  FloatCHOL (void) : chol_mat () { }
+  FloatCHOL (void) : chol_mat (), xrcond (0) { }
 
-  FloatCHOL (const FloatMatrix& a, bool calc_cond = false) { init (a, calc_cond); }
+  FloatCHOL (const FloatMatrix& a, bool calc_cond = false)
+    : chol_mat (), xrcond (0)
+    {
+      init (a, calc_cond);
+    }
 
-  FloatCHOL (const FloatMatrix& a, octave_idx_type& info, bool calc_cond = false) 
-    { info = init (a, calc_cond); }
+  FloatCHOL (const FloatMatrix& a, octave_idx_type& info,
+             bool calc_cond = false) 
+    : chol_mat (), xrcond (0)
+    {
+      info = init (a, calc_cond);
+    }
 
   FloatCHOL (const FloatCHOL& a) : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
 
   FloatCHOL& operator = (const FloatCHOL& a)
     {
       if (this != &a)
         {
           chol_mat = a.chol_mat;
diff --git a/liboctave/floatGEPBAL.h b/liboctave/floatGEPBAL.h
--- a/liboctave/floatGEPBAL.h
+++ b/liboctave/floatGEPBAL.h
@@ -30,26 +30,29 @@ along with Octave; see the file COPYING.
 #include "fMatrix.h"
 
 class
 OCTAVE_API
 FloatGEPBALANCE
 {
 public:
 
-  FloatGEPBALANCE (void) : balanced_mat (), balancing_mat () { }
-
-  FloatGEPBALANCE (const FloatMatrix& a, const FloatMatrix& b, const std::string& balance_job)
+  FloatGEPBALANCE (void)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
+    { }
+  FloatGEPBALANCE (const FloatMatrix& a, const FloatMatrix& b,
+                   const std::string& balance_job)
+    : balanced_mat (), balanced_mat2 (), balancing_mat (), balancing_mat2 ()
     {
       init (a, b, balance_job); 
     }
 
   FloatGEPBALANCE (const FloatGEPBALANCE& a)
     : balanced_mat (a.balanced_mat), balanced_mat2 (a.balanced_mat2),
-    balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
+      balancing_mat (a.balancing_mat), balancing_mat2 (a.balancing_mat2) { }
 
   FloatGEPBALANCE& operator = (const FloatGEPBALANCE& a)
     {
       if (this != &a)
         {
           balanced_mat = a.balanced_mat;
           balanced_mat2 = a.balanced_mat2;
           balancing_mat = a.balancing_mat;
diff --git a/liboctave/floatHESS.h b/liboctave/floatHESS.h
--- a/liboctave/floatHESS.h
+++ b/liboctave/floatHESS.h
@@ -31,19 +31,27 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 FloatHESS
 {
 public:
 
   FloatHESS (void) : hess_mat (), unitary_hess_mat () { }
 
-  FloatHESS (const FloatMatrix& a) { init (a); }
+  FloatHESS (const FloatMatrix& a)
+     : hess_mat (), unitary_hess_mat ()
+    {
+      init (a);
+    }
 
-  FloatHESS (const FloatMatrix& a, octave_idx_type& info) { info = init (a); }
+  FloatHESS (const FloatMatrix& a, octave_idx_type& info)
+    : hess_mat (), unitary_hess_mat ()
+    {
+      info = init (a);
+    }
 
   FloatHESS (const FloatHESS& a)
     : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   FloatHESS& operator = (const FloatHESS& a)
     {
       if (this != &a)
         {
diff --git a/liboctave/floatSCHUR.cc b/liboctave/floatSCHUR.cc
--- a/liboctave/floatSCHUR.cc
+++ b/liboctave/floatSCHUR.cc
@@ -144,17 +144,17 @@ FloatSCHUR::init (const FloatMatrix& a, 
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
 
 FloatSCHUR::FloatSCHUR (const FloatMatrix& s, const FloatMatrix& u)
-: schur_mat (s), unitary_mat (u)
+  : schur_mat (s), unitary_mat (u), selector (0)
 {
   octave_idx_type n = s.rows ();
   if (s.columns () != n || u.rows () != n || u.columns () != n)
     (*current_liboctave_error_handler)
       ("schur: inconsistent matrix dimensions");
 }
 
 std::ostream&
diff --git a/liboctave/floatSCHUR.h b/liboctave/floatSCHUR.h
--- a/liboctave/floatSCHUR.h
+++ b/liboctave/floatSCHUR.h
@@ -30,28 +30,35 @@ along with Octave; see the file COPYING.
 #include "fMatrix.h"
 
 class
 OCTAVE_API
 FloatSCHUR
 {
 public:
 
-  FloatSCHUR (void)
-    : schur_mat (), unitary_mat () { }
+  FloatSCHUR (void) : schur_mat (), unitary_mat (), selector (0) { }
 
-  FloatSCHUR (const FloatMatrix& a, const std::string& ord, bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
+  FloatSCHUR (const FloatMatrix& a, const std::string& ord,
+              bool calc_unitary = true)
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      init (a, ord, calc_unitary);
+    }
 
   FloatSCHUR (const FloatMatrix& a, const std::string& ord, int& info, 
-         bool calc_unitary = true)
-    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
+              bool calc_unitary = true)
+    : schur_mat (), unitary_mat (), selector (0)
+    {
+      info = init (a, ord, calc_unitary);
+    }
 
   FloatSCHUR (const FloatSCHUR& a)
-    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat), selector (0)
+    { }
 
   FloatSCHUR (const FloatMatrix& s, const FloatMatrix& u);
 
   FloatSCHUR& operator = (const FloatSCHUR& a)
     {
       if (this != &a)
         {
           schur_mat = a.schur_mat;
diff --git a/liboctave/floatSVD.h b/liboctave/floatSVD.h
--- a/liboctave/floatSVD.h
+++ b/liboctave/floatSVD.h
@@ -31,31 +31,37 @@ along with Octave; see the file COPYING.
 #include "dbleSVD.h"
 
 class
 OCTAVE_API
 FloatSVD
 {
 public:
 
-  FloatSVD (void) : sigma (), left_sm (), right_sm () { }
+  FloatSVD (void) : type_computed (), sigma (), left_sm (), right_sm () { }
 
   FloatSVD (const FloatMatrix& a, 
             SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
-    { init (a, svd_type, svd_driver); }
+    : type_computed (), sigma (), left_sm (), right_sm ()
+    {
+      init (a, svd_type, svd_driver);
+    }
 
   FloatSVD (const FloatMatrix& a, octave_idx_type& info, 
-            SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+            SVD::type svd_type = SVD::std,
+            SVD::driver svd_driver = SVD::GESVD) 
+    : type_computed (), sigma (), left_sm (), right_sm ()
     {
       info = init (a, svd_type, svd_driver);
     }
 
   FloatSVD (const FloatSVD& a)
-    : type_computed (a.type_computed),
-      sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
+    : type_computed (a.type_computed), sigma (a.sigma),
+      left_sm (a.left_sm), right_sm (a.right_sm)
+    { }
 
   FloatSVD& operator = (const FloatSVD& a)
     {
       if (this != &a)
         {
           type_computed = a.type_computed;
           sigma = a.sigma;
           left_sm = a.left_sm;
