# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1467274777 -36000
#      Thu Jun 30 18:19:37 2016 +1000
# Node ID 0a4c5a90f28638b69e0146a59a03815fd8a37095
# Parent  20257791e3583e0b1501f103db1e497fcf9799f7
Allow tab completion of arrays of structures.

* input.h, input.cc (find_indexed_expression): New function.  Parse a
partial command line back, skipping () & {}, until a variable name
is found.

* variables.cc (generate_struct_completions): Call the above if prefix
starts with ".".

* input.cc (generate_completion): Handle manipulation of prefix by
generate_struct_completions.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -343,23 +343,26 @@ get_input_from_stdin (void)
   octave::command_editor::set_input_stream (stdin);
   return octave::command_editor::get_input_stream ();
 }
 
 // FIXME: make this generate filenames when appropriate.
 
 static string_vector
 generate_possible_completions (const std::string& text, std::string& prefix,
-                               std::string& hint)
+                               std::string& hint, bool& deemed_struct)
 {
   string_vector names;
 
   prefix = "";
 
-  if (looks_like_struct (text))
+  char prev_char = octave::command_editor::get_prev_char (text.length ());
+  deemed_struct = looks_like_struct (text, prev_char);
+
+  if (deemed_struct)
     names = generate_struct_completions (text, prefix, hint);
   else
     names = make_name_list ();
 
   // Sort and remove duplicates.
 
   names.sort (true);
 
@@ -414,26 +417,36 @@ generate_completion (const std::string& 
 
       prefix = "";
 
       hint = text;
 
       // No reason to display symbols while completing a
       // file/directory operation.
 
+      bool deemed_struct = false;
+
       if (is_completing_dirfns ())
         name_list = string_vector ();
       else
-        name_list = generate_possible_completions (text, prefix, hint);
+        name_list = generate_possible_completions (text, prefix, hint,
+                                                   deemed_struct);
 
       name_list_len = name_list.numel ();
 
-      file_name_list = octave::command_editor::generate_filename_completions (text);
+      // If the line was something like "a{1}." then text = "." but
+      // we don't want to expand all the . files.
+      if (! deemed_struct)
+        {
 
-      name_list.append (file_name_list);
+          file_name_list = octave::command_editor::generate_filename_completions (text);
+
+          name_list.append (file_name_list);
+
+        }
 
       name_list_total_len = name_list.numel ();
 
       hint_len = hint.length ();
 
       matches = 0;
 
       for (int i = 0; i < name_list_len; i++)
@@ -446,25 +459,26 @@ generate_completion (const std::string& 
       while (list_index < name_list_total_len)
         {
           std::string name = name_list[list_index];
 
           list_index++;
 
           if (hint == name.substr (0, hint_len))
             {
+                    // Special case: array reference forces prefix="."
+                    //               in generate_struct_completions ()
               if (list_index <= name_list_len && ! prefix.empty ())
-                retval = prefix + "." + name;
+                retval = (prefix == "." ? "" : prefix) + "." + name;
               else
                 retval = name;
 
-              // FIXME: looks_like_struct is broken for now,
-              //        so it always returns false.
-
-              if (matches == 1 && looks_like_struct (retval))
+              char prev_char = octave::command_editor::get_prev_char
+                                                       (text.length ());
+              if (matches == 1 && looks_like_struct (retval, prev_char))
                 {
                   // Don't append anything, since we don't know
                   // whether it should be '(' or '.'.
 
                   octave::command_editor::set_completion_append_character ('\0');
                 }
               else
                 octave::command_editor::set_completion_append_character
@@ -482,16 +496,63 @@ static std::string
 quoting_filename (const std::string &text, int, char quote)
 {
   if (quote)
     return text;
   else
     return (std::string ("'") + text);
 }
 
+// Try to parse a partial command line in reverse, excluding trailing TEXT.
+// If it appears a variable has been indexed by () or {},
+// return that expression,
+// to allow autocomplete of field names of arrays of structures.
+std::string
+find_indexed_expression (const std::string& text)
+{
+  std::string line = octave::command_editor::get_line_buffer ();
+
+  int pos = line.length () - text.length ();
+  int curly_count = 0;
+  int paren_count = 0;
+
+  int last = --pos;
+
+  while (pos >= 0 && (line[pos] == ')' || line[pos] == '}'))
+    {
+      if (line[pos] == ')')
+        paren_count++;
+      else if (line[pos] == '}')
+        curly_count++;
+
+      while (curly_count + paren_count > 0 && --pos >= 0)
+        {
+          if (line[pos] == ')')
+            paren_count++;
+          else if (line[pos] == '(')
+            paren_count--;
+          else if (line[pos] == '}')
+            curly_count++;
+          else if (line[pos] == '{')
+            curly_count--;
+        }
+
+      while (--pos >= 0 && line[pos] == ' ')
+        ;
+    }
+
+  while (pos >= 0 && (isalnum (line[pos]) || line[pos] == '_'))
+    pos--;
+
+  if (++pos >= 0)
+    return (line.substr (pos, last + 1 - pos));
+  else
+    return std::string ();
+}
+
 void
 initialize_command_input (void)
 {
   // If we are using readline, this allows conditional parsing of the
   // .inputrc file.
 
   octave::command_editor::set_name ("Octave");
 
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -48,16 +48,18 @@ extern bool octave_completion_matches_ca
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
 extern OCTINTERP_API bool Vdebugging;
 
 // TRUE if we are not executing a command direct from debug> prompt.
 extern OCTINTERP_API bool Vtrack_line_num;
 
+extern std::string find_indexed_expression (const std::string& text);
+
 extern void initialize_command_input (void);
 
 extern bool octave_yes_or_no (const std::string& prompt);
 
 extern octave_value do_keyboard (const octave_value_list& args
                                  = octave_value_list ());
 
 extern void remove_input_event_hook_functions (void);
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -233,29 +233,36 @@ is_variable (const std::string& name)
 
 string_vector
 generate_struct_completions (const std::string& text,
                              std::string& prefix, std::string& hint)
 {
   string_vector names;
 
   size_t pos = text.rfind ('.');
+  bool array = false;
 
   if (pos != std::string::npos)
     {
       if (pos == text.length ())
         hint = "";
       else
         hint = text.substr (pos+1);
 
       prefix = text.substr (0, pos);
 
+      if (prefix == "")
+        {
+          array = true;
+          prefix = find_indexed_expression (text);
+        }
+
       std::string base_name = prefix;
 
-      pos = base_name.find_first_of ("{(.");
+      pos = base_name.find_first_of ("{(. ");
 
       if (pos != std::string::npos)
         base_name = base_name.substr (0, pos);
 
       if (is_variable (base_name))
         {
           int parse_status;
 
@@ -279,26 +286,30 @@ generate_struct_completions (const std::
             }
           catch (const octave_execution_exception&)
             {
               recover_from_exception ();
             }
         }
     }
 
+  // Undo look-back that found the array expression,
+  // but insert an extra "." to distinguish from the non-struct case.
+  if (array)
+    prefix = ".";
+
   return names;
 }
 
 // FIXME: this will have to be much smarter to work "correctly".
-
 bool
-looks_like_struct (const std::string& text)
+looks_like_struct (const std::string& text, char prev_char)
 {
   bool retval = (! text.empty ()
-                 && text != "."
+                 && (text != "." || prev_char == ')' || prev_char == '}')
                  && text.find_first_of (octave::sys::file_ops::dir_sep_chars ()) == std::string::npos
                  && text.find ("..") == std::string::npos
                  && text.rfind ('.') != std::string::npos);
 
 #if 0
   symbol_record *sr = curr_sym_tab->lookup (text);
 
   if (sr && ! sr->is_function ())
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -63,17 +63,17 @@ extract_function (const octave_value& ar
 extern OCTINTERP_API string_vector
 get_struct_elts (const std::string& text);
 
 extern OCTINTERP_API string_vector
 generate_struct_completions (const std::string& text, std::string& prefix,
                              std::string& hint);
 
 extern OCTINTERP_API bool
-looks_like_struct (const std::string& text);
+looks_like_struct (const std::string& text, char prev_char);
 
 extern OCTINTERP_API int
 symbol_exist (const std::string& name, const std::string& type = "any");
 
 extern OCTINTERP_API std::string
 unique_symbol_name (const std::string& basename);
 
 extern OCTINTERP_API octave_value
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -148,16 +148,18 @@ namespace octave
 
     string_vector
     do_generate_filename_completions (const std::string& text);
 
     std::string do_get_line_buffer (void) const;
 
     std::string do_get_current_line (void) const;
 
+    char do_get_prev_char (int) const;
+
     void do_replace_line (const std::string& text, bool clear_undo);
 
     void do_kill_full_line (void);
 
     void do_insert_text (const std::string& text);
 
     void do_newline (void);
 
@@ -642,16 +644,27 @@ namespace octave
   {
     std::string retval;
     char *buf = ::octave_rl_copy_line ();
     retval = buf;
     free (buf);
     return retval;
   }
 
+  // Return the character (offset+1) to the left of the cursor,
+  // or '\0' if the cursor is at the start of the line.
+  char
+  gnu_readline::do_get_prev_char (int offset) const
+  {
+    const char *buf = ::octave_rl_line_buffer ();
+    int p = ::octave_rl_point ();
+
+    return p > offset ? buf[p - offset - 1] : '\0';
+  }
+
   void
   gnu_readline::do_replace_line (const std::string& text, bool clear_undo)
   {
     ::octave_rl_replace_line (text.c_str (), clear_undo);
   }
 
   void
   gnu_readline::do_kill_full_line (void)
@@ -922,16 +935,18 @@ namespace octave
     FILE *do_get_output_stream (void);
 
     string_vector do_generate_filename_completions (const std::string& text);
 
     std::string do_get_line_buffer (void) const;
 
     std::string do_get_current_line (void) const;
 
+    char do_get_prev_char (int) const;
+
     void do_replace_line (const std::string& text, bool clear_undo);
 
     void do_kill_full_line (void);
 
     void do_insert_text (const std::string& text);
 
     void do_newline (void);
 
@@ -998,16 +1013,22 @@ namespace octave
 
   std::string
   default_command_editor::do_get_current_line (void) const
   {
     // FIXME
     return "";
   }
 
+  char
+  default_command_editor::do_get_prev_char (int) const
+  {
+    return '\0';
+  }
+
   void
   default_command_editor::do_replace_line (const std::string&, bool)
   {
     // FIXME
   }
 
   void
   default_command_editor::do_kill_full_line (void)
@@ -1406,16 +1427,24 @@ namespace octave
   }
 
   std::string
   command_editor::get_current_line (void)
   {
     return (instance_ok ()) ? instance->do_get_current_line () : "";
   }
 
+  // Return the character (offset+1) to the left of the cursor,
+  // or '\0' if the cursor is at the start of the line.
+  char
+  command_editor::get_prev_char (int offset)
+  {
+    return (instance_ok ()) ? instance->do_get_prev_char (offset) : '\0';
+  }
+
   void
   command_editor::replace_line (const std::string& text, bool clear_undo)
   {
     if (instance_ok ())
       instance->do_replace_line (text, clear_undo);
   }
 
   void
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -132,16 +132,18 @@ namespace octave
     static user_accept_line_fcn get_user_accept_line_function (void);
 
     static string_vector generate_filename_completions (const std::string& text);
 
     static std::string get_line_buffer (void);
 
     static std::string get_current_line (void);
 
+    static char get_prev_char (int);
+
     static void replace_line (const std::string& text, bool clear_undo = true);
 
     static void kill_full_line (void);
 
     static void insert_text (const std::string& text);
 
     static void newline (void);
 
@@ -303,16 +305,18 @@ namespace octave
 
     virtual string_vector
       do_generate_filename_completions (const std::string& text) = 0;
 
     virtual std::string do_get_line_buffer (void) const = 0;
 
     virtual std::string do_get_current_line (void) const = 0;
 
+    virtual char do_get_prev_char (int) const = 0;
+
     virtual void do_replace_line (const std::string& text, bool clear_undo) = 0;
 
     virtual void do_kill_full_line (void) = 0;
 
     virtual void do_insert_text (const std::string& text) = 0;
 
     virtual void do_newline (void) = 0;
 
diff --git a/liboctave/util/oct-rl-edit.c b/liboctave/util/oct-rl-edit.c
--- a/liboctave/util/oct-rl-edit.c
+++ b/liboctave/util/oct-rl-edit.c
@@ -168,16 +168,22 @@ octave_rl_newline (int count, int key)
 
 const char *
 octave_rl_line_buffer (void)
 {
   return rl_line_buffer;
 }
 
 int
+octave_rl_point (void)
+{
+  return rl_point;
+}
+
+int
 octave_rl_do_undo (void)
 {
   return rl_do_undo ();
 }
 
 void
 octave_rl_clear_undo_list (void)
 {
diff --git a/liboctave/util/oct-rl-edit.h b/liboctave/util/oct-rl-edit.h
--- a/liboctave/util/oct-rl-edit.h
+++ b/liboctave/util/oct-rl-edit.h
@@ -81,16 +81,18 @@ extern void octave_rl_replace_line (cons
 extern void octave_rl_kill_full_line (void);
 
 extern void octave_rl_insert_text (const char *);
 
 extern int octave_rl_newline (int, int);
 
 extern const char *octave_rl_line_buffer (void);
 
+extern int octave_rl_point (void);
+
 extern int octave_rl_do_undo (void);
 
 extern void octave_rl_clear_undo_list (void);
 
 extern void octave_rl_set_name (const char *);
 
 extern char *octave_rl_readline (const char *);
 
