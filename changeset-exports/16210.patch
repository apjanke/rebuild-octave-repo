# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362628616 18000
#      Wed Mar 06 22:56:56 2013 -0500
# Node ID 78365c56a7622a17718648ba621a6ce6c1ecfb39
# Parent  e7ff32e7cf828cf3efd65a36dea8839497068323
make global line_editing variable static in octave.cc

* octave.cc (line_editing): Declare static.
* input.h, input.cc (line_editing): Delete.  Remove
* oct-parse.in.yy (eval_string, parse_fcn_file): Don't protect.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -151,18 +151,16 @@ octave_base_reader::do_input_echo (const
 
 static std::string
 gnu_readline (const std::string& s, bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  assert (line_editing);
-
   std::string retval = command_editor::readline (s, eof);
 
   if (! eof && retval.empty ())
     retval = "\n";
 
   return retval;
 }
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -92,16 +92,20 @@ static string_vector octave_argv;
 
 // The name used to invoke Octave.
 static std::string
 octave_program_invocation_name;
 
 // The last component of octave_program_invocation_name.
 static std::string octave_program_name;
 
+// TRUE means we are using readline.
+// (--no-line-editing)
+static bool line_editing = true;
+
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
 // TRUE means we read the site-wide octaverc files.
 // (--norc; --no-site-file; -f)
 static bool read_site_files = true;
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -90,20 +90,16 @@ octave_lexer *CURR_LEXER = 0;
 // Calls to the following functions appear in the generated output from
 // Bison without the namespace tag.  Redefine them so we will use them
 // via the gnulib namespace.
 #define fclose GNULIB_NAMESPACE::fclose
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define malloc GNULIB_NAMESPACE::malloc
 #endif
 
-// TRUE means we are using readline.
-// (--no-line-editing)
-bool line_editing = true;
-
 // TRUE means we printed messages about reading startup files.
 bool reading_startup_message_printed = false;
 
 // Keep track of symbol table information when parsing functions.
 symtab_context parser_symtab_context;
 
 // List of autoloads (function -> file mapping).
 static std::map<std::string, std::string> autoload_map;
@@ -3156,20 +3152,16 @@ parse_fcn_file (const std::string& full_
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
 
   FILE *in_stream = command_editor::get_input_stream ();
 
   frame.add_fcn (command_editor::set_input_stream, in_stream);
 
-  frame.protect_var (line_editing);
-
-  line_editing = false;
-
   frame.add_fcn (command_history::ignore_entries,
                  command_history::ignoring_entries ());
 
   command_history::ignore_entries ();
 
   FILE *ffile = 0;
 
   if (! full_file.empty ())
@@ -3883,20 +3875,16 @@ eval_string (const std::string& eval_str
 
   unwind_protect frame;
 
   // octave_parser constructor sets this for us.
   frame.protect_var (CURR_LEXER);
 
   octave_parser curr_parser (eval_str);
 
-  frame.protect_var (line_editing);
-
-  line_editing = false;
-
   do
     {
       curr_parser.reset ();
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -65,19 +65,16 @@ class tree_switch_case;
 class tree_switch_case_list;
 class tree_switch_command;
 
 #include "oct-obj.h"
 
 // Nonzero means print parser debugging info (-d).
 extern int octave_debug;
 
-// TRUE means we are using readline.
-extern bool line_editing;
-
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 extern OCTINTERP_API std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
                     std::string& file);
 
 extern OCTINTERP_API std::string
