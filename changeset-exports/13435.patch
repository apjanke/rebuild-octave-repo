# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302767323 -7200
#      Thu Apr 14 09:48:43 2011 +0200
# Node ID 58f63589f1ded3600a8aa10abe9604a56a28fc0b
# Parent  73af3d75ddcd6023dfa28446192a8c9c276393b8
Hidden variables are now being displayed separately, and globals are separated from locals.

diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -193,20 +193,18 @@ int OctaveLink::processOctaveServerData(
 }
 
 
 //*************************************************************************
 void OctaveLink::retrieveVariables() {
     QList<SymbolRecord> currentVariables;
     std::list<SymbolRecord> allVariables = symbol_table::all_variables();
     std::list<SymbolRecord>::iterator iterator;
-    for(iterator = allVariables.begin(); iterator != allVariables.end(); iterator++) {
-        if(!QString(iterator->name().c_str()).startsWith("."))
-            currentVariables.append(*iterator);
-    }
+    for(iterator = allVariables.begin(); iterator != allVariables.end(); iterator++)
+        currentVariables.append(*iterator);
 
     m_variableSymbolTableList = currentVariables;
 }
 
 
 //*************************************************************************
 int OctaveLink::processRequestedVariables( void )
 {
diff --git a/gui//src/VariablesDockWidget.cpp b/gui//src/VariablesDockWidget.cpp
--- a/gui//src/VariablesDockWidget.cpp
+++ b/gui//src/VariablesDockWidget.cpp
@@ -29,62 +29,75 @@ void VariablesDockWidget::construct() {
     treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Global"));
     m_variablesTreeWidget->insertTopLevelItem(1, treeWidgetItem);
 
     treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Persistent"));
     m_variablesTreeWidget->insertTopLevelItem(2, treeWidgetItem);
 
+    treeWidgetItem = new QTreeWidgetItem();
+    treeWidgetItem->setData(0, 0, QString("Hidden"));
+    m_variablesTreeWidget->insertTopLevelItem(3, treeWidgetItem);
+
     m_variablesTreeWidget->expandAll();
 }
 
 void VariablesDockWidget::updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord) {
     treeItem->setData(0, 0, QString(symbolRecord.name().c_str()));
     treeItem->setData(1, 0, QString(symbolRecord.varval().type_name().c_str()));
 
     QString type = QString(symbolRecord.varval().type_name().c_str());
     if(type == "string") {
-        QString stringValue(symbolRecord.varval().string_value().c_str());
+        QString stringValue = QString("\"%1\"").arg(symbolRecord.varval().string_value().c_str());
         treeItem->setData(2, 0, stringValue);
     } else if(type == "scalar") {
         double scalarValue = symbolRecord.varval().scalar_value();
         treeItem->setData(2, 0, QString("%1").arg(scalarValue));
     } else if(type == "matrix") {
         Matrix matrixValue = symbolRecord.varval().matrix_value();
-        // TODO: Display matrix.
+        // TODO: Display matrix values.
+        treeItem->setData(2, 0, QString("{%1 x %2}").arg(matrixValue.rows()).arg(matrixValue.cols()));
     } else {
         treeItem->setData(2, 0, QString("<Type not recognized>"));
     }
 }
 
 void VariablesDockWidget::setVariablesList(QList<SymbolRecord> symbolTable) {
 
     // Split the symbol table into its different scopes.
     QList<SymbolRecord> localSymbolTable;
     QList<SymbolRecord> globalSymbolTable;
     QList<SymbolRecord> persistentSymbolTable;
+    QList<SymbolRecord> hiddenSymbolTable;
 
     foreach(SymbolRecord symbolRecord, symbolTable) {
-        if(symbolRecord.is_local()) {
+        // It's true that being global or hidden includes it's can mean it's also locally visible,
+        // but we want to distinguish that here.
+        if(symbolRecord.is_local() && !symbolRecord.is_global() && !symbolRecord.is_hidden()) {
             localSymbolTable.append(symbolRecord);
         }
 
         if(symbolRecord.is_global()) {
             globalSymbolTable.append(symbolRecord);
         }
 
         if(symbolRecord.is_persistent()) {
             persistentSymbolTable.append(symbolRecord);
         }
+
+        if(symbolRecord.is_hidden()) {
+            hiddenSymbolTable.append(symbolRecord);
+        }
     }
 
     updateScope(0, localSymbolTable);
     updateScope(1, globalSymbolTable);
     updateScope(2, persistentSymbolTable);
+    updateScope(3, hiddenSymbolTable);
 }
 
 void VariablesDockWidget::updateScope(int topLevelItemIndex, QList<SymbolRecord> symbolTable) {
     // This method may be a little bit confusing; variablesList is a complete list of all
     // variables that are in the workspace currently.
     QTreeWidgetItem *topLevelItem = m_variablesTreeWidget->topLevelItem(topLevelItemIndex);
 
     // First we check, if any variables that exist in the model tree have to be updated
