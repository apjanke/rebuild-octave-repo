# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327439524 -3600
#      Tue Jan 24 22:12:04 2012 +0100
# Node ID b8d787001038b7a3c6aa9917706367485fd3c6d0
# Parent  d649d67078e91d78898d9c0bcb3f331ccbdb0cc4
Fixed bug with creating multiple ptys.

diff --git a/libqterminal/PseudoTerminal.cpp b/libqterminal/PseudoTerminal.cpp
--- a/libqterminal/PseudoTerminal.cpp
+++ b/libqterminal/PseudoTerminal.cpp
@@ -142,19 +142,17 @@ void PseudoTerminal::addEnvironmentVaria
         }
     }
 }
 
 int PseudoTerminal::start(const QString& program,
                const QStringList& programArguments, 
                const QStringList& environment, 
                ulong winid, 
-               bool addToUtmp,
-               int masterFd,
-               int slaveFd
+               bool addToUtmp
 //               const QString& dbusService,
 //               const QString& dbusSession)
 		)
 {
   clearArguments();
 
   setBinaryExecutable(program.toLatin1());
 
@@ -180,17 +178,17 @@ int PseudoTerminal::start(const QString&
   //
   // this can happen if LANG contains a language which KDE
   // does not have a translation for
   //
   // BR:149300
   if (!environment.contains("LANGUAGE"))
       setEnvironment("LANGUAGE",QString());
 
-  setUsePty(All, addToUtmp, masterFd, slaveFd);
+  setUsePty(All, addToUtmp, _pty);
 
   pty()->open();
   
   struct ::termios ttmode;
   pty()->tcGetAttr(&ttmode);
   if (!_xonXoff)
     ttmode.c_iflag &= ~(IXOFF | IXON);
   else
@@ -239,36 +237,36 @@ PseudoTerminal::PseudoTerminal()
   connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
 	  this, SLOT(dataReceived(K3Process *,char *, int)));
   connect(this, SIGNAL(processExited(K3Process *)),
           this, SLOT(donePty()));
   connect(this, SIGNAL(wroteStdin(K3Process *)),
           this, SLOT(writeReady()));
   _pty = new KPty;
 
-  setUsePty(All, false, -1, -1); // utmp will be overridden later
+  setUsePty(All, false); // utmp will be overridden later
 }
 
-PseudoTerminal::PseudoTerminal(int masterFd, int slaveFd)
+PseudoTerminal::PseudoTerminal(KPty *kpty)
     : _bufferFull(false),
       _windowColumns(0),
       _windowLines(0),
       _eraseChar(0),
       _xonXoff(true),
       _utf8(true)
 {
   connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
           this, SLOT(dataReceived(K3Process *,char *, int)));
   connect(this, SIGNAL(processExited(K3Process *)),
           this, SLOT(donePty()));
   connect(this, SIGNAL(wroteStdin(K3Process *)),
           this, SLOT(writeReady()));
-  _pty = new KPty(masterFd, slaveFd);
+  _pty = kpty;
 
-  setUsePty(All, false, masterFd, slaveFd); // utmp will be overridden later
+  setUsePty(All, false, _pty); // utmp will be overridden later
 }
 
 PseudoTerminal::~PseudoTerminal()
 {
     delete _pty;
 }
 
 void PseudoTerminal::writeReady()
diff --git a/libqterminal/PseudoTerminal.h b/libqterminal/PseudoTerminal.h
--- a/libqterminal/PseudoTerminal.h
+++ b/libqterminal/PseudoTerminal.h
@@ -57,17 +57,17 @@ Q_OBJECT
      * 
      * Connect to the sendData() slot and receivedData() signal to prepare
      * for sending and receiving data from the terminal process.
      *
      * To start the terminal process, call the run() method with the 
      * name of the program to start and appropriate arguments.
      */
     PseudoTerminal();
-    PseudoTerminal(int masterFd, int slaveFd);
+    PseudoTerminal(KPty *kpty);
 
     ~PseudoTerminal();
 
     /**
      * Starts the terminal process.  
      *
      * Returns 0 if the process was started successfully or non-zero
      * otherwise.
@@ -85,19 +85,17 @@ Q_OBJECT
      * environment variable in the process's environment.
      * @param dbusSession Specifies the value of the KONSOLE_DBUS_SESSION
      * environment variable in the process's environment. 
      */
     int start( const QString& program, 
                const QStringList& arguments, 
                const QStringList& environment, 
                ulong winid, 
-               bool addToUtmp,
-               int masterFd,
-               int slaveFd
+               bool addToUtmp
 //               const QString& dbusService,
 //               const QString& dbusSession
              );
 
     /** TODO: Document me */
     void setWriteable(bool writeable);
 
     /** 
diff --git a/libqterminal/QTerminal.cpp b/libqterminal/QTerminal.cpp
--- a/libqterminal/QTerminal.cpp
+++ b/libqterminal/QTerminal.cpp
@@ -30,24 +30,23 @@ QTerminal::QTerminal(QWidget *parent)
     
     this->setFocusProxy(m_sessionView);
 }
 
 void QTerminal::init()
 {
     KPty *kpty = new KPty();
     kpty->open();
-    int fdm = kpty->masterFd();
     int fds = kpty->slaveFd();
 
     dup2 (fds, 0);
     dup2 (fds, 1);
     dup2 (fds, 2);
 
-    m_sessionModel = new SessionModel(fdm, fds);
+    m_sessionModel = new SessionModel(kpty);
 
     m_sessionModel->setTitle(SessionModel::NameRole, "QTermWidget");
     m_sessionModel->setProgram("/bin/bash");
     QStringList args("");
     m_sessionModel->setArguments(args);
     m_sessionModel->setAutoClose(true);
     m_sessionModel->setCodec(QTextCodec::codecForName("UTF-8"));
     m_sessionModel->setFlowControlEnabled(true);
diff --git a/libqterminal/SessionModel.cpp b/libqterminal/SessionModel.cpp
--- a/libqterminal/SessionModel.cpp
+++ b/libqterminal/SessionModel.cpp
@@ -40,17 +40,17 @@
 
 #include "PseudoTerminal.h"
 #include "SessionView.h"
 #include "ShellCommand.h"
 #include "Vt102Emulation.h"
 
 int SessionModel::lastSessionId = 0;
 
-SessionModel::SessionModel(int masterFd, int slaveFd) :
+SessionModel::SessionModel(KPty *kpty) :
     _shellProcess(0)
   , _emulation(0)
   , _monitorActivity(false)
   , _monitorSilence(false)
   , _notifiedActivity(false)
   , _autoClose(true)
   , _wantedClose(false)
   , _silenceSeconds(10)
@@ -62,30 +62,24 @@ SessionModel::SessionModel(int masterFd,
   , _flowControl(true)
   , _fullScripting(false)
   , _sessionId(0)
   //   , _zmodemBusy(false)
   //   , _zmodemProc(0)
   //   , _zmodemProgress(0)
   , _hasDarkBackground(false)
 {
-    _masterFd = masterFd;
-    _slaveFd = slaveFd;
 
     //prepare DBus communication
     //    new SessionAdaptor(this);
     _sessionId = ++lastSessionId;
     //    QDBusConnection::sessionBus().registerObject(QLatin1String("/Sessions/")+QString::number(_sessionId), this);
 
     //create teletype for I/O with shell process
-    if(_masterFd >= 0) {
-        _shellProcess = new PseudoTerminal(_masterFd, _slaveFd);
-    } else {
-        _shellProcess = new PseudoTerminal();
-    }
+    _shellProcess = new PseudoTerminal(kpty);
 
     //create emulation backend
     _emulation = new Vt102Emulation();
 
     connect( _emulation, SIGNAL( titleChanged( int, const QString & ) ),
              this, SLOT( setUserTitle( int, const QString & ) ) );
     connect( _emulation, SIGNAL( stateSet(int) ),
              this, SLOT( activityStateSet(int) ) );
@@ -302,19 +296,17 @@ void SessionModel::run()
     // the color scheme as "black on white" or "white on black" depending on whether
     // the background color is deemed dark or not
     QString backgroundColorHint = _hasDarkBackground ? "COLORFGBG=15;0" : "COLORFGBG=0;15";
 
     int result = _shellProcess->start(QFile::encodeName(_program),
                                       arguments,
                                       _environment << backgroundColorHint,
                                       windowId(),
-                                      _addToUtmp,
-                                      _masterFd,
-                                      _slaveFd);
+                                      _addToUtmp);
 
     if (result < 0)
     {
         return;
     }
 
     _shellProcess->setWriteable(false);  // We are reachable via kwrited.
 
diff --git a/libqterminal/SessionModel.h b/libqterminal/SessionModel.h
--- a/libqterminal/SessionModel.h
+++ b/libqterminal/SessionModel.h
@@ -27,16 +27,17 @@
 
 // Qt
 #include <QtCore/QStringList>
 #include <QtCore>
 #include <QWidget>
 
 // Konsole
 #include "History.h"
+#include "kpty.h"
 
 class KProcess;
 
 class Emulation;
 class PseudoTerminal;
 class SessionView;
 
 /**
@@ -65,17 +66,17 @@ public:
    * To start the terminal process, call the run() method,
    * after specifying the program and arguments
    * using setProgram() and setArguments()
    *
    * If no program or arguments are specified explicitly, the Session
    * falls back to using the program specified in the SHELL environment
    * variable.
    */
-  SessionModel(int masterFd = -1, int slaveFd = -1);
+  SessionModel(KPty *kpty);
   ~SessionModel();
 
   /**
    * Returns true if the session is currently running.  This will be true
    * after run() has been called successfully.
    */
   bool isRunning() const;
 
@@ -479,17 +480,17 @@ private slots:
 
 private:
 
   void updateTerminalSize();
   WId windowId() const;
 
   int            _uniqueIdentifier;
 
-  PseudoTerminal*          _shellProcess;
+  PseudoTerminal* _shellProcess;
   Emulation*    _emulation;
 
   QList<SessionView*> _views;
 
   bool           _monitorActivity;
   bool           _monitorSilence;
   bool           _notifiedActivity;
   bool           _masterMode;
diff --git a/libqterminal/k3process.cpp b/libqterminal/k3process.cpp
--- a/libqterminal/k3process.cpp
+++ b/libqterminal/k3process.cpp
@@ -726,26 +726,23 @@ void K3Process::setUseShell(bool useShel
   // dunno, maybe superfluous?
   if (!access( "/usr/ucb/sh", X_OK ))
     d->shell = "/usr/ucb/sh";
   else
 #endif
     d->shell = "/bin/sh";
 }
 
-void K3Process::setUsePty(Communication usePty, bool addUtmp, int masterFd, int slaveFd)
+void K3Process::setUsePty(Communication usePty, bool addUtmp, KPty *kpty)
 {
   d->usePty = usePty;
   d->addUtmp = addUtmp;
   if (usePty) {
     if (!d->pty) {
-      if(masterFd >= 0)
-          d->pty = new KPty(masterFd, slaveFd);
-      else
-          d->pty = new KPty;
+          d->pty = kpty;
     }
   } else {
     delete d->pty;
     d->pty = 0;
   }
 }
 
 KPty *K3Process::pty() const
diff --git a/libqterminal/k3process.h b/libqterminal/k3process.h
--- a/libqterminal/k3process.h
+++ b/libqterminal/k3process.h
@@ -509,17 +509,17 @@ public:
    * command.
    * This function should be called before starting the process.
    *
    * @param comm for which stdio handles to use a pty. Note that it is not
    *  allowed to specify Stdout and Stderr at the same time both here and to
    * start (there is only one pty, so they cannot be distinguished).
    * @param addUtmp true if a utmp entry should be created for the pty
    */
-  void setUsePty(Communication comm, bool addUtmp, int masterFd, int slaveFd);
+  void setUsePty(Communication comm, bool addUtmp, KPty *kpty = 0);
 
   /**
    * Obtains the pty object used by this process. The return value is
    * valid only after setUsePty() was used with a non-zero argument.
    * The pty is open only while the process is running.
    * @return a pointer to the pty object
    */
   KPty *pty() const;
