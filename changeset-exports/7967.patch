# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216761857 14400
#      Tue Jul 22 17:24:17 2008 -0400
# Node ID 6add0f974aee3bf641842a71472a6014fdf4f442
# Parent  5747be3ac49701b528693d40996e8c39db0dbf73
Add __go_execute_callback__

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2008-07-22  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* graphics.cc (F__go_execute_callback__): New function.
+
 	* DLD-FUNCTIONS/fltk_backend.cc: Undefine min/max after FLTK headers
 	inclusion.
 
 	* graphics.h.in (class base_graphics_event, class graphics_event): New
 	classes (replace gh_manager::event_data).
 	(class gh_manager::event_data): Remove.
 	(gh_manager::post_function, gh_manager::do_post_function): Use
 	graphics_event::event_fcn type.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4410,16 +4410,62 @@ DEFUN (__go_figure_handles__, , ,
 Undocumented internal function.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
   return octave_value (gh_manager::figure_handle_list ());
 }
 
+DEFUN (__go_execute_callback__, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __go_execute_callback__ (@var{h}, @var{name})\n\
+@deftypefnx {Built-in Function} {} __go_execute_callback__ (@var{h}, @var{name}, @var{param})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 2 || nargin == 3)
+    {
+      double val = args(0).double_value ();
+
+      if (! error_state)
+	{
+	  graphics_handle h = gh_manager::lookup (val);
+
+	  if (h.ok ())
+	    {
+	      std::string name = args(1).string_value ();
+
+	      if (! error_state)
+		{
+		  if (nargin == 2)
+		    gh_manager::execute_callback (h, name);
+		  else
+		    gh_manager::execute_callback (h, name, args(2));
+		}
+	      else
+		error ("__go_execute_callback__: invalid callback name");
+	    }
+	  else
+	    error ("__go_execute_callback__: invalid graphics object (= %g)",
+		   val);
+	}
+      else
+	error ("__go_execute_callback__: invalid graphics object");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (available_backends, , ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} available_backends ()\n\
 Returns resgistered graphics backends.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
