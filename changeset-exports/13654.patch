# HG changeset patch
# User ttl <ttl@justmail.de>
# Date 1314295951 -7200
#      Thu Aug 25 20:12:31 2011 +0200
# Node ID c67f7d390a1a6d1794b43cd8cc0aa09e7e5cee0d
# Parent  0ee1b81a0538c22a8f230e2c2948c37a2554b90a
editor: comment/uncomment selected text

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -242,16 +242,55 @@ void
 FileEditorMdiSubWindow::runFile ()
 {
   if (m_editor->isModified ())
     saveFile(m_fileName);
   m_terminalEmulation->transmitText (QString ("run \'%1\'\n").arg (m_fileName));
   //m_terminalEmulation->setFocus ();
 }
 
+
+// (un)comment selected text
+void
+FileEditorMdiSubWindow::commentSelectedText ()
+{
+  doCommentSelectedText (true);
+}
+void
+FileEditorMdiSubWindow::uncommentSelectedText ()
+{
+  doCommentSelectedText (false);
+}
+void
+FileEditorMdiSubWindow::doCommentSelectedText (bool comment)
+{
+  if ( m_editor->hasSelectedText() )
+    {
+      int lineFrom, lineTo, colFrom, colTo, i;
+      m_editor->getSelection (&lineFrom,&colFrom,&lineTo,&colTo);
+      if ( colTo == 0 )  // the beginning of last line is not selected
+        lineTo--;        // stop at line above
+      for ( i=lineFrom; i<=lineTo; i++ )
+        {
+          if ( comment )
+            m_editor->insertAt("%",i,0);
+          else
+            {
+              QString line(m_editor->text(i));
+              if ( line.startsWith("%") )
+                {
+                  m_editor->setSelection(i,0,i,1);
+                  m_editor->removeSelectedText();
+                }
+            }
+        }
+    }
+}
+
+
 // remove bookmarks
 void
 FileEditorMdiSubWindow::removeBookmark ()
 {
   m_editor->markerDeleteAll(MARKER_BOOKMARK);
 }
 // toggle bookmark
 void
@@ -409,17 +448,19 @@ FileEditorMdiSubWindow::construct ()
         QIcon::fromTheme("edit-redo",style->standardIcon (QStyle::SP_ArrowRight)),
         tr("&Redo"), m_toolBar);
   m_copyAction = new QAction (QIcon::fromTheme("edit-copy"),tr("&Copy"),m_toolBar);
   m_cutAction = new QAction (QIcon::fromTheme("edit-cut"),tr("Cu&t"),m_toolBar);
   QAction *pasteAction = new QAction (QIcon::fromTheme("edit-paste"),tr("&Paste"),m_toolBar);
   QAction *nextBookmarkAction = new QAction (tr("&Next Bookmark"),m_toolBar);
   QAction *prevBookmarkAction = new QAction (tr("Pre&vious Bookmark"),m_toolBar);
   QAction *toggleBookmarkAction = new QAction (tr("Toggle &Bookmark"),m_toolBar);
-  QAction *removeBookmarkAction = new QAction (tr("&Remove All &Bookmarks"),m_toolBar);
+  QAction *removeBookmarkAction = new QAction (tr("&Remove All Bookmarks"),m_toolBar);
+  QAction *commentSelectedAction = new QAction (tr("&Comment Selected Text"),m_toolBar);
+  QAction *uncommentSelectedAction = new QAction (tr("&Uncomment Selected Text"),m_toolBar);
   QAction *runAction = new QAction (
         QIcon::fromTheme("media-play",style->standardIcon (QStyle::SP_MediaPlay)),
         tr("&Run File"), m_toolBar);
 
   // some actions are disabled from the beginning
   m_copyAction->setEnabled(false);
   m_cutAction->setEnabled(false);
   connect(m_editor,SIGNAL(copyAvailable(bool)),this,SLOT(handleCopyAvailable(bool)));
@@ -433,16 +474,18 @@ FileEditorMdiSubWindow::construct ()
   redoAction->setShortcut(QKeySequence::Redo);
   m_copyAction->setShortcut(QKeySequence::Copy);
   m_cutAction->setShortcut(QKeySequence::Cut);
   pasteAction->setShortcut(QKeySequence::Paste);
   runAction->setShortcut(Qt::Key_F5);
   nextBookmarkAction->setShortcut(Qt::Key_F2);
   prevBookmarkAction->setShortcut(Qt::SHIFT + Qt::Key_F2);
   toggleBookmarkAction->setShortcut(Qt::Key_F7);
+  commentSelectedAction->setShortcut(Qt::CTRL + Qt::Key_T);
+  uncommentSelectedAction->setShortcut(Qt::CTRL + Qt::Key_U);
 
   // toolbar
   m_toolBar->setIconSize(QSize(16,16)); // smaller icons (make configurable in user settings?)
   m_toolBar->addAction (closeAction);
   m_toolBar->addAction (newAction);
   m_toolBar->addAction (openAction);
   m_toolBar->addAction (saveAction);
   m_toolBar->addAction (saveAsAction);
@@ -467,16 +510,19 @@ FileEditorMdiSubWindow::construct ()
   QMenu *editMenu = new QMenu(tr("&Edit"),m_menuBar);
   editMenu->addAction(undoAction);
   editMenu->addAction(redoAction);
   editMenu->addSeparator();
   editMenu->addAction(m_copyAction);
   editMenu->addAction(m_cutAction);
   editMenu->addAction(pasteAction);
   editMenu->addSeparator();
+  editMenu->addAction(commentSelectedAction);
+  editMenu->addAction(uncommentSelectedAction);
+  editMenu->addSeparator();
   editMenu->addAction(toggleBookmarkAction);
   editMenu->addAction(nextBookmarkAction);
   editMenu->addAction(prevBookmarkAction);
   editMenu->addAction(removeBookmarkAction);
   m_menuBar->addMenu(editMenu);
   QMenu *runMenu = new QMenu(tr("&Run"),m_menuBar);
   runMenu->addAction(runAction);
   m_menuBar->addMenu(runMenu);
@@ -500,16 +546,18 @@ FileEditorMdiSubWindow::construct ()
   connect (pasteAction, SIGNAL (triggered ()), m_editor, SLOT (paste ()));
   connect (saveAction, SIGNAL (triggered ()), this, SLOT (saveFile ()));
   connect (saveAsAction, SIGNAL (triggered ()), this, SLOT (saveFileAs ()));
   connect (runAction, SIGNAL (triggered ()), this, SLOT (runFile ()));
   connect (toggleBookmarkAction, SIGNAL (triggered ()), this, SLOT (toggleBookmark ()));
   connect (nextBookmarkAction, SIGNAL (triggered ()), this, SLOT (nextBookmark ()));
   connect (prevBookmarkAction, SIGNAL (triggered ()), this, SLOT (prevBookmark ()));
   connect (removeBookmarkAction, SIGNAL (triggered ()), this, SLOT (removeBookmark ()));
+  connect (commentSelectedAction, SIGNAL (triggered ()), this, SLOT (commentSelectedText ()));
+  connect (uncommentSelectedAction, SIGNAL (triggered ()), this, SLOT (uncommentSelectedText ()));
 
   // TODO: Do we still need tool tips in the status bar? Tool tips are now
   //       shown directly at the theme icons
   connect (newAction, SIGNAL (hovered ()), this, SLOT (showToolTipNew ()));
   connect (openAction, SIGNAL (hovered ()), this, SLOT (showToolTipOpen ()));
   connect (undoAction, SIGNAL (hovered ()), this, SLOT (showToolTipUndo ()));
   connect (redoAction, SIGNAL (hovered ()), this, SLOT (showToolTipRedo ()));
   connect (saveAction, SIGNAL (hovered ()), this, SLOT (showToolTipSave ()));
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -64,16 +64,17 @@ public slots:
   void registerModified (bool modified);
 
 protected:
   void closeEvent(QCloseEvent *event);
 
 private:
   int checkFileModified (QString msg);
   void construct ();
+  void doCommentSelectedText (bool comment);
   QMenuBar *m_menuBar;
   QToolBar *m_toolBar;
   QsciScintilla *m_editor;
   QStatusBar *m_statusBar;
   QString m_fileName;
   TerminalEmulation* m_terminalEmulation;
   QAction* m_copyAction;
   QAction* m_cutAction;
@@ -84,12 +85,14 @@ private slots:
   void handleModificationChanged(bool modified);
   void handleMarginClicked(int line, int margin, Qt::KeyboardModifiers state);
   void handleCopyAvailable(bool enableCopy);
   void runFile();
   void removeBookmark ();
   void toggleBookmark ();
   void nextBookmark();
   void prevBookmark();
+  void commentSelectedText();
+  void uncommentSelectedText();
 
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
