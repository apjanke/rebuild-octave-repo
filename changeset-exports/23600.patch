# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497213446 14400
#      Sun Jun 11 16:37:26 2017 -0400
# Node ID db947ba52118fee0ba482c1a3a888de2dc2248ef
# Parent  5cb3a2bb5e1ef8a8928967f8ff279cecd9f6efd4
explicitly limit anonymous functions to a single expression

* ov-fcn-handle.cc (octave_fcn_handle::print_raw): Handle anonymous
  function body as a single expression.

* parse.h, oct-parse.in.yy: Now expect 8 shift/reduce conflicts.
(expr_no_assign): New non-terminal.
(expression): Split into expr_no_assign and assign_expr.
(anon_fcn_handle): Define body as expr_no_assign instead of statement.
(base_parser::make_anon_fcn_handle): Handle body as a single
expression instead of statement.

* pt-eval.cc (tree_evaluator::visit_anon_fcn_handle): Handle body as a
single expression instead of statement.

* pt-fcn-handle.h, pt-fcn-handle.cc (class tree_anon_fcn_handle):
Handle body as a single expression.  Eliminate return list.

* pt-pr-code.h, pt-pr-code.cc (tree_print_code::print_fcn_handle_body):
Handle anonymous function handle body as single expression.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1439,17 +1439,31 @@ octave_fcn_handle::print_raw (std::ostre
 
           os << "@(";
 
           if (p)
             p->accept (tpc);
 
           os << ") ";
 
-          tpc.print_fcn_handle_body (f->body ());
+          octave::tree_statement_list *b = f->body ();
+
+          assert (b->length () == 1);
+
+          octave::tree_statement *s = b->front ();
+
+          if (s)
+            {
+              assert (s->is_expression ());
+
+              octave::tree_expression *e = s->expression ();
+
+              if (e)
+                tpc.print_fcn_handle_body (e);
+            }
 
           printed = true;
         }
     }
 
   if (! printed)
     octave_print_internal (os, "@" + nm, pr_as_read_syntax,
                            current_print_indent_level ());
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -106,20 +106,20 @@ static void yyerror (octave::base_parser
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wold-style-cast"
 #endif
 
 %}
 
 // Bison declarations.
 
-// The grammar currently has 14 shift/reduce conflicts.  Ensure that
+// The grammar currently has 8 shift/reduce conflicts.  Ensure that
 // we notice if that number changes.
 
-%expect 14
+%expect 8
 
 %API_PREFIX_DECL%
 
 // We are using the pure parser interface and the reentrant lexer
 // interface but the Octave parser and lexer are NOT properly
 // reentrant because both still use many global variables.  It should be
 // safe to create a parser object and call it while anotehr parser
 // object is active (to parse a callback function while the main
@@ -239,17 +239,17 @@ static void yyerror (octave::base_parser
 %type <punct_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows
 %type <tree_cell_type> cell_rows
 %type <tree_expression_type> matrix cell
-%type <tree_expression_type> primary_expr oper_expr power_expr
+%type <tree_expression_type> primary_expr oper_expr power_expr expr_no_assign
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier fcn_name magic_tilde
 %type <tree_funcall_type> superclass_identifier meta_identifier
 %type <octave_user_function_type> function1 function2
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
@@ -600,17 +600,17 @@ cell_or_matrix_row
 
 fcn_handle      : '@' FCN_HANDLE
                   {
                     $$ = parser.make_fcn_handle ($2);
                     lexer.looking_at_function_handle--;
                   }
                 ;
 
-anon_fcn_handle : '@' param_list stmt_begin statement
+anon_fcn_handle : '@' param_list stmt_begin expr_no_assign
                   {
                     $$ = parser.make_anon_fcn_handle ($2, $4);
                     lexer.nesting_level.remove ();
                   }
                 ;
 
 primary_expr    : identifier
                   { $$ = $1; }
@@ -904,41 +904,44 @@ assign_expr     : assign_lhs '=' express
                 | assign_lhs EPOW_EQ expression
                   { $$ = parser.make_assign_op (EPOW_EQ, $1, $2, $3); }
                 | assign_lhs AND_EQ expression
                   { $$ = parser.make_assign_op (AND_EQ, $1, $2, $3); }
                 | assign_lhs OR_EQ expression
                   { $$ = parser.make_assign_op (OR_EQ, $1, $2, $3); }
                 ;
 
-expression      : simple_expr
+expr_no_assign  : simple_expr
                   {
                     if ($1 && ($1->is_matrix () || $1->iscell ()))
                       {
                         if (parser.validate_array_list ($1))
                           $$ = $1;
                         else
                           {
                             delete $1;
                             YYABORT;
                           }
                       }
                     else
                       $$ = $1;
                   }
+                | anon_fcn_handle
+                  { $$ = $1; }
+                ;
+
+expression      : expr_no_assign
+                  { $$ = $1; }
                 | assign_expr
                   {
                     if (! $1)
                       YYABORT;
 
                     $$ = $1;
                   }
-                | anon_fcn_handle
-                  { $$ = $1; }
-                ;
 
 // ================================================
 // Commands, declarations, and function definitions
 // ================================================
 
 command         : declaration
                   { $$ = $1; }
                 | select_command
@@ -2475,39 +2478,34 @@ namespace octave
 
     return retval;
   }
 
   // Make an anonymous function handle.
 
   tree_anon_fcn_handle *
   base_parser::make_anon_fcn_handle (tree_parameter_list *param_list,
-                                     tree_statement *stmt)
+                                     tree_expression *expr)
   {
     // FIXME: need to get these from the location of the @ symbol.
     int l = lexer.input_line_number;
     int c = lexer.current_input_column;
 
-    tree_parameter_list *ret_list = 0;
-
     symbol_table::scope_id fcn_scope = lexer.symtab_context.curr_scope ();
     symbol_table::scope_id parent_scope = lexer.symtab_context.parent_scope ();
 
     lexer.symtab_context.pop ();
 
-    stmt->set_print_flag (false);
-
-    tree_statement_list *body = new tree_statement_list (stmt);
-
-    body->mark_as_anon_function_body ();
+    expr->set_print_flag (false);
 
     tree_anon_fcn_handle *retval
-      = new tree_anon_fcn_handle (param_list, ret_list, body, fcn_scope,
+      = new tree_anon_fcn_handle (param_list, expr, fcn_scope,
                                   parent_scope, l, c);
-    // FIXME: Stash the filename.  This does not work and produces
+
+// FIXME: Stash the filename.  This does not work and produces
     // errors when executed.
     //retval->stash_file_name (lexer.fcn_file_name);
 
     return retval;
   }
 
   // Build a binary expression.
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -174,17 +174,18 @@ namespace octave
     // Build a constant.
     tree_constant * make_constant (int op, token *tok_val);
 
     // Build a function handle.
     tree_fcn_handle * make_fcn_handle (token *tok_val);
 
     // Build an anonymous function handle.
     tree_anon_fcn_handle *
-    make_anon_fcn_handle (tree_parameter_list *param_list, tree_statement *stmt);
+    make_anon_fcn_handle (tree_parameter_list *param_list,
+                          tree_expression * expr);
 
     // Build a binary expression.
     tree_expression *
     make_binary_op (int op, tree_expression *op1, token *tok_val,
                     tree_expression *op2);
 
     // Build a boolean expression.
     tree_expression *
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -83,42 +83,53 @@ namespace octave
   tree_evaluator::reset (void)
   {
     m_value_stack.clear ();
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   void
-  tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle& expr)
+  tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle& anon_fh)
   {
     // FIXME: should CMD_LIST be limited to a single expression?
     // I think that is what Matlab does.
 
-    tree_parameter_list *param_list = expr.parameter_list ();
-    tree_parameter_list *ret_list = expr.return_list ();
-    tree_statement_list *stmt_list = expr.body ();
-
-    symbol_table::scope_id af_sid = expr.scope ();
+    tree_parameter_list *param_list = anon_fh.parameter_list ();
+    tree_expression *expr = anon_fh.expression ();
+
+    symbol_table::scope_id af_sid = anon_fh.scope ();
 
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     symbol_table::scope_id af_parent_sid
-      = expr.has_parent_scope () ? symtab.current_scope () : -1;
+      = anon_fh.has_parent_scope () ? symtab.current_scope () : -1;
 
     symbol_table::scope_id new_scope = symtab.dup_scope (af_sid);
 
     if (new_scope > 0 && af_parent_sid > 0)
       symtab.inherit (new_scope, af_parent_sid);
 
+    tree_parameter_list *param_list_dup
+      = param_list ? param_list->dup (new_scope, 0) : 0;
+
+    tree_parameter_list *ret_list = 0;
+
+    tree_statement_list *stmt_list = 0;
+
+    if (expr)
+      {
+        tree_expression *expr_dup = expr->dup (new_scope, 0);
+        tree_statement *stmt = new tree_statement (expr_dup, 0);
+        stmt_list = new tree_statement_list (stmt);
+      }
+
     octave_user_function *af
-      = new octave_user_function (new_scope,
-                                  param_list ? param_list->dup (new_scope, 0) : 0,
-                                  ret_list ? ret_list->dup (new_scope, 0) : 0,
-                                  stmt_list ? stmt_list->dup (new_scope, 0) : 0);
+      = new octave_user_function (new_scope, param_list_dup, ret_list,
+                                  stmt_list);
 
     if (af_parent_sid > 0)
       symtab.set_parent (new_scope, af_parent_sid);
 
     octave_function *curr_fcn = m_call_stack.current ();
 
     if (curr_fcn)
       {
@@ -128,18 +139,20 @@ namespace octave
         af->stash_parent_fcn_name (curr_fcn->name ());
         af->stash_dir_name (curr_fcn->dir_name ());
 
         if (curr_fcn->is_class_method () || curr_fcn->is_class_constructor ())
           af->stash_dispatch_class (curr_fcn->dispatch_class ());
       }
 
     af->mark_as_anonymous_function ();
-    af->stash_fcn_file_name (expr.file_name ());
-    af->stash_fcn_location (expr.line (), expr.column ());
+
+    // FIXME: these should probably come from ANON_FH.
+    //    af->stash_fcn_file_name (expr.file_name ());
+    //    af->stash_fcn_location (expr.line (), expr.column ());
 
     octave_value ov_fcn (af);
 
     octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, this));
 
     m_value_stack.push (ovl (fh));
   }
 
diff --git a/libinterp/parse-tree/pt-fcn-handle.cc b/libinterp/parse-tree/pt-fcn-handle.cc
--- a/libinterp/parse-tree/pt-fcn-handle.cc
+++ b/libinterp/parse-tree/pt-fcn-handle.cc
@@ -62,43 +62,40 @@ namespace octave
     new_fh->copy_base (*this);
 
     return new_fh;
   }
 
   tree_anon_fcn_handle::~tree_anon_fcn_handle (void)
   {
     delete m_parameter_list;
-    delete m_return_list;
-    delete m_statement_list;
+    delete m_expression;
   }
 
   tree_expression *
   tree_anon_fcn_handle::dup (symbol_table::scope_id,
                              symbol_table::context_id) const
   {
     tree_parameter_list *param_list = parameter_list ();
-    tree_parameter_list *ret_list = return_list ();
-    tree_statement_list *stmt_list = body ();
+    tree_expression *expr = expression ();
 
     symbol_table::scope_id af_sid = scope ();
     symbol_table::scope_id af_parent_sid = parent_scope ();
 
     symbol_table& symtab
       = octave::__get_symbol_table__ ("tree_anon_fcn_handle::dup");
 
     symbol_table::scope_id new_scope = symtab.dup_scope (af_sid);
 
     if (new_scope > 0)
       symtab.inherit (new_scope);
 
     tree_anon_fcn_handle *new_afh = new
       tree_anon_fcn_handle (param_list ? param_list->dup (new_scope, 0) : 0,
-                            ret_list ? ret_list->dup (new_scope, 0) : 0,
-                            stmt_list ? stmt_list->dup (new_scope, 0) : 0,
+                            expr ? expr->dup (new_scope, 0) : 0,
                             new_scope, af_parent_sid, line (), column ());
 
     new_afh->copy_base (*this);
 
     return new_afh;
   }
 }
 
diff --git a/libinterp/parse-tree/pt-fcn-handle.h b/libinterp/parse-tree/pt-fcn-handle.h
--- a/libinterp/parse-tree/pt-fcn-handle.h
+++ b/libinterp/parse-tree/pt-fcn-handle.h
@@ -87,27 +87,26 @@ namespace octave
     std::string nm;
   };
 
   class tree_anon_fcn_handle : public tree_expression
   {
   public:
 
     tree_anon_fcn_handle (int l = -1, int c = -1)
-      : tree_expression (l, c), m_parameter_list (0), m_return_list (0),
-        m_statement_list (0), m_sid (-1), m_parent_sid (-1), m_file_name ()
+      : tree_expression (l, c), m_parameter_list (0), m_expression (0),
+        m_sid (-1), m_parent_sid (-1), m_file_name ()
     { }
 
-    tree_anon_fcn_handle (tree_parameter_list *pl, tree_parameter_list *rl,
-                          tree_statement_list *cl, symbol_table::scope_id sid,
+    tree_anon_fcn_handle (tree_parameter_list *pl, tree_expression *ex,
+                          symbol_table::scope_id sid,
                           symbol_table::scope_id parent_sid,
                           int l = -1, int c = -1)
-      : tree_expression (l, c), m_parameter_list (pl), m_return_list (rl),
-        m_statement_list (cl), m_sid (sid), m_parent_sid (parent_sid),
-        m_file_name ()
+      : tree_expression (l, c), m_parameter_list (pl), m_expression (ex),
+        m_sid (sid), m_parent_sid (parent_sid), m_file_name ()
     { }
 
     // No copying!
 
     tree_anon_fcn_handle (const tree_anon_fcn_handle&) = delete;
 
     tree_anon_fcn_handle& operator = (const tree_anon_fcn_handle&) = delete;
 
@@ -117,19 +116,17 @@ namespace octave
 
     bool rvalue_ok (void) const { return true; }
 
     tree_parameter_list * parameter_list (void) const
     {
       return m_parameter_list;
     }
 
-    tree_parameter_list * return_list (void) const { return m_return_list; }
-
-    tree_statement_list * body (void) const { return m_statement_list; }
+    tree_expression * expression (void) const { return m_expression; }
 
     symbol_table::scope_id scope (void) const { return m_sid; }
 
     symbol_table::scope_id parent_scope (void) const { return m_parent_sid; }
 
     bool has_parent_scope (void) const { return m_parent_sid > 0; }
 
     tree_expression * dup (symbol_table::scope_id scope,
@@ -141,21 +138,18 @@ namespace octave
 
     std::string file_name (void) const { return m_file_name; }
 
   private:
 
     // Inputs parameters.
     tree_parameter_list *m_parameter_list;
 
-    // Output parameters.
-    tree_parameter_list *m_return_list;
-
-    // Function body.
-    tree_statement_list *m_statement_list;
+    // Function body, limited to a single expression.
+    tree_expression *m_expression;
 
     // Function scope.
     symbol_table::scope_id m_sid;
 
     // Parent scope, or -1 if none.
     symbol_table::scope_id m_parent_sid;
 
     // Filename where the handle was defined.
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -47,17 +47,17 @@ namespace octave
 
     tree_parameter_list *param_list = afh.parameter_list ();
 
     if (param_list)
       param_list->accept (*this);
 
     os << ") ";
 
-    print_fcn_handle_body (afh.body ());
+    print_fcn_handle_body (afh.expression ());
 
     print_parens (afh, ")");
   }
 
   void
   tree_print_code::visit_argument_list (tree_argument_list& lst)
   {
     tree_argument_list::iterator p = lst.begin ();
@@ -1147,46 +1147,23 @@ namespace octave
 
     if (expr)
       expr->accept (*this);
 
     newline ();
   }
 
   void
-  tree_print_code::print_fcn_handle_body (tree_statement_list *b)
+  tree_print_code::print_fcn_handle_body (tree_expression *e)
   {
-    if (b)
+    if (e)
       {
-        assert (b->length () == 1);
-
-        tree_statement *s = b->front ();
-
-        if (s)
-          {
-            if (s->is_expression ())
-              {
-                tree_expression *e = s->expression ();
-
-                if (e)
-                  {
-                    suppress_newlines++;
-                    e->accept (*this);
-                    suppress_newlines--;
-                  }
-              }
-            else
-              {
-                tree_command *c = s->command ();
-
-                suppress_newlines++;
-                c->accept (*this);
-                suppress_newlines--;
-              }
-          }
+        suppress_newlines++;
+        e->accept (*this);
+        suppress_newlines--;
       }
   }
 
   // Each print_code() function should call this before printing anything.
 
   void
   tree_print_code::indent (void)
   {
diff --git a/libinterp/parse-tree/pt-pr-code.h b/libinterp/parse-tree/pt-pr-code.h
--- a/libinterp/parse-tree/pt-pr-code.h
+++ b/libinterp/parse-tree/pt-pr-code.h
@@ -143,17 +143,17 @@ namespace octave
     void visit_try_catch_command (tree_try_catch_command&);
 
     void visit_unwind_protect_command (tree_unwind_protect_command&);
 
     void visit_while_command (tree_while_command&);
 
     void visit_do_until_command (tree_do_until_command&);
 
-    void print_fcn_handle_body (tree_statement_list *);
+    void print_fcn_handle_body (tree_expression *);
 
   private:
 
     std::ostream& os;
 
     std::string prefix;
 
     std::stack<char> nesting;
