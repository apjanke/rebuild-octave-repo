# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1417728146 18000
#      Thu Dec 04 16:22:26 2014 -0500
# Node ID 5db5619fe54e0e6a59cf2daf4bc2e523b7301f0a
# Parent  9ef286208da194e92fdb8d72b04957923aa5feaf
# Parent  c1ce43276b8616108a8eefe0eec599fc6cc8de54
maint: Periodic merge of gui-release to default.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2193,23 +2193,32 @@ main_window::execute_debug_callback ()
       QString debug = _dbg_queue->takeFirst ();
       if (_dbg_queue->isEmpty ())
         _dbg_processing.release ();  // cmd queue empty, processing will stop
       else
         repost = true;          // not empty, repost at end
       _dbg_queue_mutex.unlock ();
 
       if (debug == "step")
-        Fdbstep ();
+        {
+          Fdb_next_breakpoint_quiet ();
+          Fdbstep ();
+        }
       else if (debug == "cont")
-        Fdbcont ();
+        {
+          Fdb_next_breakpoint_quiet ();
+          Fdbcont ();
+        }
       else if (debug == "quit")
         Fdbquit ();
       else
-        Fdbstep (ovl (debug.toStdString ()));
+        {
+          Fdb_next_breakpoint_quiet ();
+          Fdbstep (ovl (debug.toStdString ()));
+        }
 
       command_editor::interrupt (true);
     }
 
   if (repost)  // queue not empty, so repost event for further processing
     octave_link::post_event (this, &main_window::execute_debug_callback);
 
 }
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1541,8 +1541,43 @@ Return true if in debugging mode, otherw
 
   if (args.length () == 0)
     retval = Vdebugging;
   else
     print_usage ();
 
   return retval;
 }
+
+DEFUN (db_next_breakpoint_quiet, args, ,
+       "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} db_next_breakpoint_quiet ()\n\
+@deftypefnx {Built-in Function} {} db_next_breakpoint_quiet (@var{flag})\n\
+Disable line info printing at the next breakpoint.  With a logical\n\
+argument, set the state on or off.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 0 || nargin == 1)
+    {
+      bool state = true;
+
+      if (nargin == 1)
+        {
+          state = args(0).bool_value ();
+
+          if (error_state)
+            {
+              gripe_wrong_type_arg ("db_next_breakpoint", args(0), true);
+              return retval;
+            }
+        }
+
+      tree_evaluator::quiet_breakpoint_flag = state;
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -179,20 +179,23 @@ octave_base_reader::do_input_echo (const
 static std::string
 gnu_readline (const std::string& s, bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
   std::string retval = command_editor::readline (s, eof);
-
+  
   if (! eof && retval.empty ())
     retval = "\n";
 
+  if (command_editor::interrupt (false))
+    retval = "";
+
   return retval;
 }
 
 static inline std::string
 interactive_input (const std::string& s, bool& eof)
 {
   Vlast_prompt_time.stamp ();
 
@@ -503,16 +506,19 @@ execute_in_debugger_handler (const std::
   octave_link::execute_in_debugger_event (arg.first, arg.second);
 }
 
 static void
 get_debug_input (const std::string& prompt)
 {
   unwind_protect frame;
 
+  bool silent = tree_evaluator::quiet_breakpoint_flag;
+  tree_evaluator::quiet_breakpoint_flag = false;
+          
   octave_user_code *caller = octave_call_stack::caller_user_code ();
   std::string nm;
   int curr_debug_line;
 
   bool have_file = false;
 
   if (caller)
     {
@@ -539,39 +545,48 @@ get_debug_input (const std::string& prom
           buf << ctrl_z << ctrl_z << nm << ":" << curr_debug_line;
         }
       else
         {
           // FIXME: we should come up with a clean way to detect
           // that we are stopped on the no-op command that marks the
           // end of a function or script.
 
-          buf << "stopped in " << nm;
+          if (! silent)
+            {
+              buf << "stopped in " << nm;
 
-          if (curr_debug_line > 0)
-            buf << " at line " << curr_debug_line;
+              if (curr_debug_line > 0)
+                buf << " at line " << curr_debug_line;
+            }
 
           if (have_file)
             {
               octave_link::enter_debugger_event (nm, curr_debug_line);
 
               octave_link::set_workspace ();
 
               frame.add_fcn (execute_in_debugger_handler,
                              std::pair<std::string, int> (nm, curr_debug_line));
 
-              std::string line_buf
-                = get_file_line (nm, curr_debug_line);
+              if (! silent)
+                {
+                  std::string line_buf
+                    = get_file_line (nm, curr_debug_line);
 
-              if (! line_buf.empty ())
-                buf << "\n" << curr_debug_line << ": " << line_buf;
+                  if (! line_buf.empty ())
+                    buf << "\n" << curr_debug_line << ": " << line_buf;
+                }
             }
         }
     }
 
+  if (silent)
+    command_editor::erase_empty_line (true);
+  
   std::string msg = buf.str ();
 
   if (! msg.empty ())
     std::cerr << msg << std::endl;
 
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
@@ -590,17 +605,17 @@ get_debug_input (const std::string& prom
       reset_error_handler ();
 
       curr_parser.reset ();
 
       int retval = curr_parser.run ();
 
       if (command_editor::interrupt (false))
         break;
-      else
+       else
         {
           if (retval == 0 && curr_parser.stmt_list)
             {
               curr_parser.stmt_list->accept (*current_evaluator);
 
               if (octave_completion_matches_called)
                 octave_completion_matches_called = false;
             }
@@ -905,16 +920,17 @@ If @code{keyboard} is invoked without ar
 
       frame.add_fcn (octave_call_stack::restore_frame,
                      octave_call_stack::current_frame ());
 
       // Skip the frame assigned to the keyboard function.
       octave_call_stack::goto_frame_relative (0);
 
       tree_evaluator::debug_mode = true;
+      tree_evaluator::quiet_breakpoint_flag = false;
 
       tree_evaluator::current_frame = octave_call_stack::current_frame ();
 
       do_keyboard (args);
     }
   else
     print_usage ();
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -3432,39 +3432,29 @@ octave_lexer::fill_flex_buffer (char *bu
       bool eof = false;
       current_input_line = input_reader.get_input (eof);
       input_buf.fill (current_input_line, eof);
     }
 
   if (! input_buf.empty ())
     status = input_buf.copy_chunk (buf, max_size);
   else
-    {
-      status = YY_NULL;
-
-      if (! input_buf.at_eof ())
-        fatal_error ("octave_base_lexer::fill_flex_buffer failed");
-    }
+    status = YY_NULL;
 
   return status;
 }
 
 int
 octave_push_lexer::fill_flex_buffer (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty () && ! input_buf.at_eof ())
     input_buf.fill (std::string (1, static_cast<char> (1)), false);
  
   if (! input_buf.empty ())
     status = input_buf.copy_chunk (buf, max_size);
   else
-    {
-      status = YY_NULL;
-
-      if (! input_buf.at_eof ())
-        fatal_error ("octave_base_lexer::fill_flex_buffer failed");
-    }
+    status = YY_NULL;
 
   return status;
 }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -52,16 +52,18 @@ static tree_evaluator std_evaluator;
 tree_evaluator *current_evaluator = &std_evaluator;
 
 int tree_evaluator::dbstep_flag = 0;
 
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
+bool tree_evaluator::quiet_breakpoint_flag = false;
+
 tree_evaluator::stmt_list_type tree_evaluator::statement_context
   = tree_evaluator::other;
 
 bool tree_evaluator::in_loop_command = false;
 
 // Maximum nesting level for functions, scripts, or sourced files called
 // recursively.
 int Vmax_recursion_depth = 256;
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -146,16 +146,18 @@ public:
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
 
   static bool debug_mode;
 
+  static bool quiet_breakpoint_flag;
+
   // Possible types of evaluation contexts.
   enum stmt_list_type
   {
     function,  // function body
     script,    // script file
     other      // command-line input or eval string
   };
 
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -103,16 +103,18 @@ public:
   void do_set_screen_size (int ht, int wd);
 
   std::string newline_chars (void);
 
   void do_restore_terminal_state (void);
 
   void do_blink_matching_paren (bool flag);
 
+  bool do_erase_empty_line (bool flag);
+
   void do_set_basic_word_break_characters (const std::string& s);
 
   void do_set_completer_word_break_characters (const std::string& s);
 
   void do_set_basic_quote_characters (const std::string& s);
 
   void do_set_filename_quote_characters (const std::string& s);
 
@@ -374,16 +376,22 @@ gnu_readline::do_restore_terminal_state 
 }
 
 void
 gnu_readline::do_blink_matching_paren (bool flag)
 {
   ::octave_rl_enable_paren_matching (flag ? 1 : 0);
 }
 
+bool
+gnu_readline::do_erase_empty_line (bool flag)
+{
+  return ::octave_rl_erase_empty_line (flag ? 1 : 0);
+}
+
 void
 gnu_readline::do_set_basic_word_break_characters (const std::string& s)
 {
   ::octave_rl_set_basic_word_break_characters (s.c_str ());
 }
 
 void
 gnu_readline::do_set_completer_word_break_characters (const std::string& s)
@@ -1172,16 +1180,22 @@ command_editor::restore_terminal_state (
 
 void
 command_editor::blink_matching_paren (bool flag)
 {
   if (instance_ok ())
     instance->do_blink_matching_paren (flag);
 }
 
+bool
+command_editor::erase_empty_line (bool flag)
+{
+  return instance_ok () ? instance->do_erase_empty_line (flag) : false;
+}
+
 void
 command_editor::set_basic_word_break_characters (const std::string& s)
 {
   if (instance_ok ())
     instance->do_set_basic_word_break_characters (s);
 }
 
 void
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -86,16 +86,18 @@ public:
   static void set_screen_size (int ht, int wd);
 
   static std::string decode_prompt_string (const std::string& s);
 
   static void restore_terminal_state (void);
 
   static void blink_matching_paren (bool flag);
 
+  static bool erase_empty_line (bool flag);
+
   static void set_basic_word_break_characters (const std::string& s);
 
   static void set_completer_word_break_characters (const std::string& s);
 
   static void set_basic_quote_characters (const std::string& s);
 
   static void set_filename_quote_characters (const std::string& s);
 
@@ -257,16 +259,18 @@ protected:
   virtual std::string do_decode_prompt_string (const std::string&);
 
   virtual std::string newline_chars (void) { return "\n"; }
 
   virtual void do_restore_terminal_state (void) { }
 
   virtual void do_blink_matching_paren (bool) { }
 
+  virtual bool do_erase_empty_line (bool) { return false; }
+
   virtual void do_set_basic_word_break_characters (const std::string&) { }
 
   virtual void do_set_completer_word_break_characters (const std::string&) { }
 
   virtual void do_set_basic_quote_characters (const std::string&) { }
 
   virtual void do_set_filename_quote_characters (const std::string&) { }
 
diff --git a/liboctave/util/oct-rl-edit.c b/liboctave/util/oct-rl-edit.c
--- a/liboctave/util/oct-rl-edit.c
+++ b/liboctave/util/oct-rl-edit.c
@@ -69,16 +69,24 @@ octave_rl_screen_width (void)
 }
 
 void
 octave_rl_enable_paren_matching (int val)
 {
   rl_variable_bind ("blink-matching-paren", val ? "1" : "0");
 }
 
+int
+octave_rl_erase_empty_line (int val)
+{
+  int retval = rl_erase_empty_line;
+  rl_erase_empty_line = val;
+  return retval;
+}
+
 /* It would be much simpler if we could just call _rl_clear_screen to
    only clear the screen, but it is not a public function, and on some
    systems, it is not exported from shared library versions of
    readline, so we can't use it.
 
    Instead, temporarily redefine the redisplay function to do nothing.
 
    FIXME -- It would be safer to do this when protected from
diff --git a/liboctave/util/oct-rl-edit.h b/liboctave/util/oct-rl-edit.h
--- a/liboctave/util/oct-rl-edit.h
+++ b/liboctave/util/oct-rl-edit.h
@@ -51,16 +51,18 @@ extern "C"
 extern void octave_rl_redisplay (void);
 
 extern int octave_rl_screen_height (void);
 
 extern int octave_rl_screen_width (void);
 
 extern void octave_rl_enable_paren_matching (int);
 
+extern int octave_rl_erase_empty_line (int);
+
 extern void octave_rl_init (void);
 
 extern void octave_rl_clear_screen (int skip_redisplay);
 
 extern void octave_rl_resize_terminal (void);
 
 extern void octave_rl_resize_terminal (void);
 
