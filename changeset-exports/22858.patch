# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480707357 18000
#      Fri Dec 02 14:35:57 2016 -0500
# Node ID a183a0929653fdfc4575a3dfb52158e89c182ddb
# Parent  d90e0c79aa4545e2725dfc224f935e73303181d8
eliminate size limit for token cache; provide destructor for class

* lex.h (token_cache::~token_cache): New destructor.  Clear cache so
that tokens are properly deleted when the token cache is deleted.
(token_cache::sz): Delete data member and all uses.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -177,25 +177,33 @@ namespace octave
       std::stack<int> context;
     };
 
     class token_cache
     {
     public:
 
       // Store an "unlimited" number of tokens.
-      token_cache (size_t sz_arg = std::numeric_limits<size_t>::max ())
-        : buffer (), sz (sz_arg)
-      { }
+
+      // Tokens are allocated with new.  Delete them when they are
+      // removed from the cache.
+      //
+      // One of the reasons for using this class instead of std::deque
+      // directly is that we can ensure that memory is cleaned up
+      // properly.  It's more tedious to do that with deque since the
+      // deque destructor and clear method don't call delete on the
+      // elements that it stores.  Another reason is that it makes it
+      // easier to change the implementation later if needed.
+
+      token_cache (void) : buffer () { }
+
+      ~token_cache (void) { clear (); }
 
       void push (token *tok)
       {
-        if (buffer.size () == sz)
-          pop ();
-
         buffer.push_front (tok);
       }
 
       void pop (void)
       {
         if (! empty ())
           {
             delete buffer.back ();
@@ -230,33 +238,31 @@ namespace octave
         return empty () ? 0 : buffer.back ();
       }
 
       const token *back (void) const
       {
         return empty () ? 0 : buffer.back ();
       }
 
-      // Number of elements currently in the buffer, max of sz.
+      // Number of elements currently in the buffer.
       size_t size (void) const { return buffer.size (); }
 
       bool empty (void) const { return buffer.empty (); }
 
       void clear (void)
       {
         while (! empty ())
           pop ();
       }
 
     private:
 
       std::deque<token *> buffer;
 
-      size_t sz;
-
       // No copying!
 
       token_cache (const token_cache&);
 
       token_cache& operator = (const token_cache&);
     };
 
     lexical_feedback (void)
