# HG changeset patch
# User Muhali <muhali@shaw.ca>
# Date 1382385522 25200
#      Mon Oct 21 12:58:42 2013 -0700
# Node ID e243a3a198317053af30720c80af9b024c1c6a79
# Parent  ccc0576641f9e11fd56077b9d72bb499fd3ec8e8
qqplot.m: Accept 2nd vector and use empirical_inv for compatibility w/Matlab (bug #39938).

* scripts/statistics/base/qqplot.m: Update docstring.  Rename output variables
so they are not automatically returned unless nargout > 0.  When plotting, avoid
TeX markup of '_inv'.  Strip anonymous function header from xlabel.

diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -13,30 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{q}, @var{s}] =} qqplot (@var{x})
+## @deftypefnx {Function File} {[@var{q}, @var{s}] =} qqplot (@var{x}, @var{y})
 ## @deftypefnx {Function File} {[@var{q}, @var{s}] =} qqplot (@var{x}, @var{dist})
-## @deftypefnx {Function File} {[@var{q}, @var{s}] =} qqplot (@var{x}, @var{dist}, @var{params})
+## @deftypefnx {Function File} {[@var{q}, @var{s}] =} qqplot (@var{x}, @var{y}, @var{params})
 ## @deftypefnx {Function File} {} qqplot (@dots{})
 ## Perform a QQ-plot (quantile plot).
 ##
 ## If F is the CDF of the distribution @var{dist} with parameters
 ## @var{params} and G its inverse, and @var{x} a sample vector of length
 ## @var{n}, the QQ-plot graphs ordinate @var{s}(@var{i}) = @var{i}-th
 ## largest element of x versus abscissa @var{q}(@var{i}f) = G((@var{i} -
 ## 0.5)/@var{n}).
 ##
 ## If the sample comes from F, except for a transformation of location
 ## and scale, the pairs will approximately follow a straight line.
 ##
+## If the second argument is a vector @var{y} the empirical CDF of @var{y}
+## is used as @var{dist}.
+##
 ## The default for @var{dist} is the standard normal distribution.  The
 ## optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, for a quantile plot of the uniform
 ## distribution on [2,4] and @var{x}, use
 ##
 ## @example
 ## qqplot (x, "unif", 2, 4)
 ## @end example
@@ -47,54 +51,64 @@
 ## @var{dist}.
 ##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a QQ-plot (quantile plot)
 
-function [q, s] = qqplot (x, dist, varargin)
+function [qout, sout] = qqplot (x, dist, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
   if (!(isnumeric (x) && isvector (x)))
     error ("qqplot: X must be a numeric vector");
   endif
 
   if (nargin == 1)
     f = @stdnormal_inv;
   else
-    if (   exist (invname = sprintf ("%sinv", dist))
-        || exist (invname = sprintf ("%s_inv", dist)))
+    if (isnumeric (dist))
+      f = @(y) empirical_inv (y, dist);
+    elseif (ischar (dist) && (exist (invname = [dist "inv"])
+                              || exist (invname = [dist "%s_inv"])))
       f = str2func (invname);
     else
       error ("qqplot: no inverse CDF found for distribution DIST");
     endif
   endif;
 
   s = sort (x);
   n = length (x);
   t = ((1 : n)' - .5) / n;
   if (nargin <= 2)
-    q = feval (f, t);
+    q = f (t);
     q_label = func2str (f);
   else
-    q = feval (f, t, varargin{:});
-    if (nargin > 3)
-      tmp = sprintf (", %g", varargin{2:end});
+    q = f (t, varargin{:});
+    if (nargin == 3)
+      q_label = sprintf ("%s with parameter %g", func2str (f), varargin{1});
     else
-      tmp = "";
+      q_label = sprintf ("%s with parameters %g", func2str (f), varargin{1});
+      param_str = sprintf (", %g", varargin{2:end});
+      q_label = [q_label param_str]; 
     endif
-    q_label = sprintf ("%s with parameter(s) %g%s",
-                        func2str (f),        varargin{1}, tmp);
   endif
 
   if (nargout == 0)
     plot (q, s);
+    q_label = strrep (q_label, '_inv', '\_inv');
+    if (q_label(1) == '@')
+      q_label = q_label(6:end);  # Strip "@(y) " from anon. function
+    endif
     xlabel (q_label);
     ylabel ("sample points");
+  else
+    qout = q;
+    sout = s;
   endif
 
 endfunction
 
+
