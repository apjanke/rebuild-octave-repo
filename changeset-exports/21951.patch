# HG changeset patch
# User Carnë Draug <carandraug@octave.org>
# Date 1466296113 -3600
#      Sun Jun 19 01:28:33 2016 +0100
# Node ID f0303b64e59aabd84f0de08bda0d8d6120ac6857
# Parent  b76a0738a662b17a2ba048aa98c03905aa1ba318
pkg build: do not assume entry for root directory after untar (bug #48096)

* pkg/private/build.m: after unpack() some tarballs, there is no entry for
the root directory so we can't use min to find.  So we use DESCRIPTION
which must be on the package root.  Also, avoid cd'ingc when creating the
tar by specifying tar()'s ROOTDIR.  And do not catch any error if we have
no real error handling.

diff --git a/scripts/pkg/private/build.m b/scripts/pkg/private/build.m
--- a/scripts/pkg/private/build.m
+++ b/scripts/pkg/private/build.m
@@ -1,10 +1,9 @@
-## Copyright (C) 2005-2015 Søren Hauberg
-## Copyright (C) 2010 VZLU Prague, a.s.
+## Copyright (C) 2016 Carnë Draug
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,45 +43,52 @@ function build (builddir, tarballs, verb
     [status, msg] = mkdir (builddir);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
     endif
   endif
 
   for i = 1:numel(tarballs)
     filelist = unpack (tarballs{i}, builddir);
-    [~, root_idx] = min (cellfun ("numel", filelist));
-    package_root = filelist{root_idx};
-    build_root = fullfile (builddir, filelist{root_idx});
 
-    desc = get_description (fullfile (build_root, "DESCRIPTION"));
+    ## We want the path for the package root but we can't assume that
+    ## exists in the filelist (see patch #9030).  So we deduce it from
+    ## the path of the DESCRIPTION file (smallest in case there's another
+    ## file named DESCRIPTION somewhere).
+    desc_pos = regexp (filelist, "DESCRIPTION$");
+    desc_mask = ! cellfun ("isempty", desc_pos);
+    [~, desc_r_idx] = min ([desc_pos{desc_mask}]);
+    desc_path = fullfile (builddir, filelist(desc_mask){desc_r_idx});
+    build_root = desc_path(1:end-12); # do not include the last filesep
+
+    desc = get_description (desc_path);
 
     ## If there is no configure or Makefile within src/, there is nothing
     ## to do to prepare a "binary" package.  We only repackage to add more
-    ## info on the filename (version and arch).
+    ## info to the tarball filename (version and arch).
     if (! exist (fullfile (build_root, "src", "configure"), "file")
         && ! exist (fullfile (build_root, "src", "Makefile"), "file"))
       arch_abi = "any-none";
     else
       arch_abi = getarch ();
       configure_make (desc, build_root, verbose);
       unlink (fullfile (build_root, "src", "configure"));
       unlink (fullfile (build_root, "src", "Makefile"));
     endif
-    tfile = [desc.name "-" desc.version "-" arch_abi ".tar"];
+    tar_name = [desc.name "-" desc.version "-" arch_abi ".tar"];
+    tar_path = fullfile (builddir, tar_name);
 
-    init_wd = pwd ();
-    unwind_protect
-      chdir (builddir);
-      try
-        tar (tfile, package_root);
-        rmdir (package_root, "s");
-        gzip (tfile);
-        unlink (tfile);
-      catch
-        warning ("failed to create and compress %s", tfile);
-      end_try_catch
-    unwind_protect_cleanup
-      chdir (init_wd);
-    end_unwind_protect
+    ## Figure out the directory name of the build.  Note that fileparts
+    ## gets confused with the version string (the periods makes it think
+    ## it's a file extension).
+    [~, package_root, package_ext] = fileparts (build_root);
+    package_root = [package_root, package_ext];
+
+    tar (tar_path, package_root, builddir);
+    gzip (tar_path, builddir);
+    rmdir (build_root, "s");
+
+    ## Currently does nothing because gzip() removes the original tar
+    ## file but that should change in the future (bug #43431).
+    unlink (tar_path);
   endfor
 
 endfunction
