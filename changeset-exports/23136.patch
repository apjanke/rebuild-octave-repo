# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1485984139 -3600
#      Wed Feb 01 22:22:19 2017 +0100
# Node ID 2165993aed7d9883d4edbc5b731543a931ba0a10
# Parent  be2654b2f34f1966305f4ffb8a29ac5c1089f274
Lock the graphics mutex before manipulating text_renderer objects (bug #50189)

* graphics.cc: instantiate an auto_lock object before every call to
   text_renderer methods

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6454,16 +6454,17 @@ axes::properties::update_font (std::stri
 
       gh_manager::get_object (get_xlabel ()).set (prop, val);
       gh_manager::get_object (get_ylabel ()).set (prop, val);
       gh_manager::get_object (get_zlabel ()).set (prop, val);
       gh_manager::get_object (get_title ()).set (prop, tval);
 
     }
 
+  gh_manager::auto_lock guard;
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
                          get ("__fontsize_points__").double_value ());
 }
 
 // The INTERNAL flag defines whether position or outerposition is used.
 
@@ -7344,16 +7345,17 @@ axes::properties::get_ticklabel_extents 
       if (limits(0) <= val && val <= limits(1))
         {
           std::string label (ticklabels(i));
           label.erase (0, label.find_first_not_of (" "));
           label = label.substr (0, label.find_last_not_of (" ")+1);
 
           if (txt_renderer.ok ())
             {
+              gh_manager::auto_lock guard;
               ext = txt_renderer.get_extent (label, 0.0,
                                              get_ticklabelinterpreter ());
 
               wmax = std::max (wmax, ext(0));
               hmax = std::max (hmax, ext(1));
             }
           else
             {
@@ -8313,16 +8315,17 @@ text::properties::update_fontunits (cons
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   set_fontsize (octave_value (fontsz));
 }
 
 void
 text::properties::update_font (void)
 {
+  gh_manager::auto_lock guard;
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
                          get ("__fontsize_points__").double_value ());
 
   txt_renderer.set_color (get_color_rgb ());
 }
 
@@ -8349,16 +8352,17 @@ text::properties::update_text_extent (vo
   Matrix bbox;
 
   // FIXME: string should be parsed only when modified, for efficiency
 
   octave_value string_prop = get_string ();
 
   string_vector sv = string_prop.string_vector_value ();
 
+  gh_manager::auto_lock guard;
   txt_renderer.text_to_pixels (sv.join ("\n"), pixels, bbox,
                                halign, valign, get_rotation (),
                                get_interpreter ());
   // The bbox is relative to the text's position.  We'll leave it that
   // way, because get_position does not return valid results when the
   // text is first constructed.  Conversion to proper coordinates is
   // performed in get_extent.
   set_extent (bbox);
@@ -9045,16 +9049,17 @@ uicontrol::properties::update_text_exten
   octave::text_renderer txt_renderer;
   Matrix box;
 
   // FIXME: parsed content should be cached for efficiency
   // FIXME: support multiline text
 
   elt = text_parser::parse (get_string_string (), "none");
 
+  gh_manager::auto_lock guard;
   txt_renderer.set_font (get_fontname (), get_fontweight (),
                          get_fontangle (), get_fontsize ());
 
   box = txt_renderer.get_extent (elt, 0);
 
   delete elt;
 
   Matrix ext (1, 4);
