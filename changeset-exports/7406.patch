# HG changeset patch
# User jwe
# Date 1200728535 0
#      Sat Jan 19 07:42:15 2008 +0000
# Node ID e9b2e44f9341a1b7e8fb1c93724761d9ee0603fb
# Parent  b0734cf13ad46cb91070434a22568ed844a38cf2
[project @ 2008-01-19 07:37:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-01-19  John W. Eaton  <jwe@octave.org>
+
+	* genprops.awk (emit_source): Use "pname" for property name argument.
+
 2008-01-19  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h.in (class figure::properties): New properties:
 	alphamap, currentcharacter, currentobject, current_point,
 	dockcontrols, doublebuffer, filename, integerhandle,
 	inverthardcopy, keypressfcn, keyreleasefcn, menubar, mincolormap,
 	name, numbertitle, paperunits, paperposition, paperpositionmode,
 	papersize, papertype, pointer, pointershapecdata,
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -200,19 +200,19 @@ function emit_get_data (i)
 
 ## common section
 
 function emit_common_declarations ()
 {
   printf ("public:\n");
   printf ("  properties (const graphics_handle& mh, const graphics_handle& p);\n\n");
   printf ("  ~properties (void) { }\n\n");
-  printf ("  void set (const caseless_str& name, const octave_value& val);\n\n");
+  printf ("  void set (const caseless_str& pname, const octave_value& val);\n\n");
   printf ("  octave_value get (bool all = false) const;\n\n");
-  printf ("  octave_value get (const caseless_str& name) const;\n\n");
+  printf ("  octave_value get (const caseless_str& pname) const;\n\n");
   printf ("  std::string graphics_object_name (void) const { return go_name; }\n\n");
   printf ("  static property_list::pval_map_type factory_defaults (void);\n\n");
   printf ("private:\n  static std::string go_name;\n\n");
 }
 
 function emit_declarations ()
 {
   if (class_name)
@@ -332,27 +332,27 @@ function emit_source ()
       if (hidden[i])
         printf ("  %s.set_hidden (true);\n", name[i]) >> filename;
     }
 
     printf ("  init ();\n}\n\n") >> filename;
 
     ## set method
 
-    printf ("void\n%s::properties::set (const caseless_str& name, const octave_value& val)\n{\n",
+    printf ("void\n%s::properties::set (const caseless_str& pname, const octave_value& val)\n{\n",
             class_name) >> filename;
 
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
-        printf ("  %sif (name.compare (\"%s\"))\n    set_%s (val);\n",
+        printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
                 (i > 1 ? "else " : ""), name[i], name[i]) >> filename;
     }
 
-    printf ("  else\n    base_properties::set (name, val);\n}\n\n") >> filename;
+    printf ("  else\n    base_properties::set (pname, val);\n}\n\n") >> filename;
 
     ## get "all" method
 
     printf ("octave_value\n%s::properties::get (bool all) const\n{\n", class_name) >> filename;
     printf ("  Octave_map m = base_properties::get (all).map_value ();\n\n") >> filename;
 
     for (i = 1; i <= idx; i++)
     {
@@ -363,29 +363,29 @@ function emit_source ()
         printf ("  m.assign (\"%s\", get_%s ()%s);\n", name[i], name[i],
                 (type[i] == "handle_property" ? ".as_octave_value ()" : "")) >> filename;
     }
 
     printf ("\n  return m;\n}\n\n") >> filename;
     
     ## get "one" method
 
-    printf ("octave_value\n%s::properties::get (const caseless_str& name) const\n{\n",
+    printf ("octave_value\n%s::properties::get (const caseless_str& pname) const\n{\n",
             class_name) >> filename;
     printf ("  octave_value retval;\n\n") >> filename;
 
     for (i = 1; i<= idx; i++)
     {
-      printf ("  %sif (name.compare (\"%s\"))\n",
+      printf ("  %sif (pname.compare (\"%s\"))\n",
               (i > 1 ? "else " : ""), name[i]) >> filename;
       printf ("    retval = get_%s ()%s;\n", name[i],
               (type[i] == "handle_property" ? ".as_octave_value ()" : "")) >> filename;
     }
 
-    printf ("  else\n    retval = base_properties::get (name);\n\n") >> filename;
+    printf ("  else\n    retval = base_properties::get (pname);\n\n") >> filename;
     printf ("  return retval;\n}\n\n") >> filename;
 
     ## factory defaults method
 
     printf ("property_list::pval_map_type\n%s::properties::factory_defaults (void)\n{\n",
             class_name) >> filename;
     printf ("  property_list::pval_map_type m;\n\n") >> filename;
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -963,17 +963,17 @@ public:
   base_properties (const std::string& ty = "unknown",
                    const graphics_handle& mh = graphics_handle (),
                    const graphics_handle& p = graphics_handle ())
     : beingdeleted ("beingdeleted", mh, false),
       busyaction ("parent", mh, "{queue}|cancel"),
       buttondownfcn ("buttondownfcn", mh, Matrix ()),
       children (),
       clipping ("clipping", mh, true),
-      createfcn ("createfcn" , mh, Matrix ()),
+      createfcn ("createfcn", mh, Matrix ()),
       deletefcn ("deletefcn", mh, Matrix ()),
       handlevisibility ("handlevisibility", mh, "{on}|callback|off"),
       hittest ("hittest", mh, true),
       interruptible ("interruptible", mh, true),
       parent ("parent", mh, p), 
       selected ("selected", mh, false),
       selectionhighlight ("selectionhighlight", mh, true),
       tag ("tag", mh),
@@ -1802,21 +1802,21 @@ public:
       radio_property xvisualmode , "{auto}|manual"
       callback_property buttondownfcn , Matrix ()
     END_PROPERTIES
     
   protected:
     void init (void)
       {
         colormap.add_constraint (dim_vector (-1, 3));
-	alphamap.add_constraint (dim_vector (-1 , 1));
-	paperposition.add_constraint (dim_vector (1 , 4));
-	pointershapecdata.add_constraint (dim_vector (16 , 16));
-	pointershapehotspot.add_constraint (dim_vector (1 , 2));
-	position.add_constraint (dim_vector (1 , 4));
+	alphamap.add_constraint (dim_vector (-1, 1));
+	paperposition.add_constraint (dim_vector (1, 4));
+	pointershapecdata.add_constraint (dim_vector (16, 16));
+	pointershapehotspot.add_constraint (dim_vector (1, 2));
+	position.add_constraint (dim_vector (1, 4));
       }
   };
 
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
