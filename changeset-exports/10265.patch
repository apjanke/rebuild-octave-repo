# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265273788 18000
#      Thu Feb 04 03:56:28 2010 -0500
# Node ID 8c583af2cf645d53cbe326c617866e32960f894d
# Parent  e58c1711d752cf59697c9861c4d425a94d575bc1
validate text object children of axes objects

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-02-04  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (gh_manager::lookup (const octave_value&)):
+	New function.
+	* graphics.cc (axes::properties::set_text_child): Validate value.
+	Allow value to be character string or handle of text object.
+
 2010-02-04  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (OCTAVE_LIBS): Include all liboctave library
 	dependencies here.
 
 2010-02-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-fcn-handle.h (octave_fcn_handle::anonymous): New static field.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2659,17 +2659,38 @@ axes::properties::sync_positions (void)
   update_transform ();
 }
 
 void
 axes::properties::set_text_child (handle_property& hp,
 				  const std::string& who,
 				  const octave_value& v)
 {
-  graphics_handle val = ::reparent (v, "set", who, __myhandle__, false);
+  graphics_handle val;
+
+  if (v.is_string ())
+    {
+      val = gh_manager::make_graphics_handle ("text", __myhandle__, false);
+
+      xset (val, "string", v);
+    }
+  else
+    {
+      graphics_object go = gh_manager::get_object (gh_manager::lookup (v));
+
+      if (go.isa ("text"))
+        val = ::reparent (v, "set", who, __myhandle__, false);
+      else
+        {
+          std::string cname = v.class_name ();
+
+          error ("set: expecting text graphics object or character string for %s property, found %s",
+                 who.c_str (), cname.c_str ());
+        }
+    }
 
   if (! error_state)
     {
       xset (val, "handlevisibility", "off");
 
       gh_manager::free (hp.handle_value ());
 
       base_properties::remove_child (hp.handle_value ());
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3866,16 +3866,22 @@ public:
       instance->do_free (h);
   }
 
   static graphics_handle lookup (double val)
   {
     return instance_ok () ? instance->do_lookup (val) : graphics_handle ();
   }
 
+  static graphics_handle lookup (const octave_value& val)
+  {
+    return val.is_real_scalar ()
+      ? lookup (val.double_value ()) : graphics_handle ();
+  }
+
   static graphics_object get_object (const graphics_handle& h)
   {
     return instance_ok () ? instance->do_get_object (h) : graphics_object ();
   }
 
   static graphics_handle
   make_graphics_handle (const std::string& go_name,
 			const graphics_handle& parent, bool do_createfcn = true)
