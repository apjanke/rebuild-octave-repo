# HG changeset patch
# User Rik <rik@octave.org>
# Date 1553541186 25200
#      Mon Mar 25 12:13:06 2019 -0700
# Node ID abfae20a2bf7323d89314e5c48931a36bfd0e734
# Parent  342fc514de46084988167615a0dd362d45886e13
mkoctfile.m: Emit an error when called in command form and compilation fails.

* mkoctfile.m: If compilation fails, and no outputs were requested, emit an
error to stop further Octave execution.  If an output was requested, emit only
a warning.  Change docstring to document this and emphasize it is the
programmer's responsibility to check return status if they have requested it.
Use @file macro around file extensions such as .mex in documentation.

diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -22,18 +22,22 @@
 ##
 ## The @code{mkoctfile} function compiles source code written in C, C++, or
 ## Fortran.  Depending on the options used with @code{mkoctfile}, the
 ## compiled code can be called within Octave or can be used as a stand-alone
 ## application.
 ##
 ## @code{mkoctfile} can be called from the shell prompt or from the Octave
 ## prompt.  Calling it from the Octave prompt simply delegates the call to
-## the shell prompt.  The output is stored in the @var{output} variable and
-## the exit status in the @var{status} variable.
+## the shell prompt.  Any output is stored in the @var{output} variable and
+## the exit status in the @var{status} variable.  If called with no outputs
+## and the compilation fails then Octave will emit an error.  If the programmer
+## requests @var{output} or @var{status}, however, Octave will merely issue
+## a warning and it is the programmer's responsibility to verify the command
+## was successful.
 ##
 ## @code{mkoctfile} accepts the following options, all of which are optional
 ## except for the filename of the code you wish to compile:
 ##
 ## @table @samp
 ## @item -I DIR
 ## Add the include directory DIR to compile commands.
 ##
@@ -64,18 +68,18 @@
 ## @item -c
 ## Compile but do not link.
 ##
 ## @item -g
 ## Enable debugging options for compilers.
 ##
 ## @item  -o FILE
 ## @itemx --output FILE
-## Output filename.  Default extension is .oct (or .mex if @samp{--mex} is
-## specified) unless linking a stand-alone executable.
+## Output filename.  Default extension is @file{.oct} (or @file{.mex} if
+## @samp{--mex} is specified) unless linking a stand-alone executable.
 ##
 ## @item  -p VAR
 ## @itemx --print VAR
 ## Print configuration variable VAR@.  There are three categories of
 ## variables:
 ##
 ## Octave configuration variables that users may override with environment
 ## variables.  These are used in commands that @code{mkoctfile} executes.
@@ -155,18 +159,18 @@
 ##    LOCALARCHLIBDIR
 ## @end group
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
 ## @item --mex
-## Assume we are creating a MEX file.  Set the default output extension to
-## ".mex".
+## Assume creation of a MEX file.  Set the default output extension to
+## @file{.mex}.
 ##
 ## @item  -s
 ## @itemx --strip
 ## Strip the output file.
 ##
 ## @item  -v
 ## @itemx --verbose
 ## Echo commands as they are executed.
@@ -208,21 +212,23 @@ function [output, status] = mkoctfile (v
     __gripe_missing_component__ ("mkoctfile", "mkoctfile");
   endif
 
   cmd = ['"' shell_script '"'];
   for i = 1:nargin
     cmd = [cmd ' "' varargin{i} '"'];
   endfor
 
-  [sys, out] = system (cmd);
+  [sts, out] = system (cmd);
 
   if (nargout > 0)
-    [output, status] = deal (out, sys);
+    [output, status] = deal (out, sts);
+    if (sts != 0)
+      warning ("mkoctfile: building exited with failure status\n");
+    endif
   else
     printf ("%s", out);
-  endif
-
-  if (sys != 0)
-    warning ("mkoctfile: building exited with failure status\n");
+    if (sts != 0)
+      error ("mkoctfile: building exited with failure status\n");
+    endif
   endif
 
 endfunction
