# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452770428 18000
#      Thu Jan 14 06:20:28 2016 -0500
# Node ID e1ee2203efe0da943f6b45a66b83f39a192fde27
# Parent  a9f2c2d72892ba63df9918ab8770e4e3397aa0eb
allow location info to be passed to octave_base_parser::bison_error

* parse.h, oct-parse.in.yy (octave_base_parser::bison_error):
Accept line and column arguments.  Use std::string instead of char *
for message argument.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3971,30 +3971,31 @@ octave_base_parser::append_statement_lis
   set_stmt_print_flag (list, sep, warn_missing_semi);
 
   list->append (stmt);
 
   return list;
 }
 
 void
-octave_base_parser::bison_error (const char *s)
+octave_base_parser::bison_error (const std::string& str, int l, int c)
 {
-  int err_col = lexer.current_input_column - 1;
+  int err_line = l < 0 ? lexer.input_line_number : l;
+  int err_col = c < 0 ? lexer.current_input_column - 1 : c;
 
   std::ostringstream output_buf;
 
   if (lexer.reading_fcn_file || lexer.reading_script_file || lexer.reading_classdef_file)
-    output_buf << "parse error near line " << lexer.input_line_number
+    output_buf << "parse error near line " << err_line
                << " of file " << lexer.fcn_file_full_name;
   else
     output_buf << "parse error:";
 
-  if (s && strcmp (s, "parse error") != 0)
-    output_buf << "\n\n  " << s;
+  if (str != "parse error")
+    output_buf << "\n\n  " << str;
 
   output_buf << "\n\n";
 
   std::string curr_line = lexer.current_input_line;
 
   if (! curr_line.empty ())
     {
       size_t len = curr_line.length ();
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -384,17 +384,17 @@ public:
   tree_statement_list *make_statement_list (tree_statement *stmt);
 
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
   // Generic error messages.
-  void bison_error (const char *s);
+  void bison_error (const std::string& s, int l = -1, int c = -1);
 
   // Have we found an explicit end to a function?
   bool endfunction_found;
 
   // TRUE means we are in the process of autoloading a function.
   bool autoloading;
 
   // TRUE means the current function file was found in a relative path
