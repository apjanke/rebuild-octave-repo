# HG changeset patch
# User jwe
# Date 779118648 0
#      Fri Sep 09 13:50:48 1994 +0000
# Node ID 93c63deed7aa17a013844e663f9af86d143af012
# Parent  d13c89674a0a86e230f88a84f0ade1e619e48799
[project @ 1994-09-09 13:50:40 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,20 +16,20 @@ dnl Octave is distributed in the hope th
 dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 dnl FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 dnl for more details.
 dnl 
 dnl You should have received a copy of the GNU General Public License
 dnl along with Octave; see the file COPYING.  If not, write to the Free
 dnl Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 dnl
-AC_REVISION($Revision: 1.41 $)dnl
+AC_REVISION($Revision: 1.42 $)dnl
 AC_PREREQ(1.8)dnl
 AC_INIT(src/octave.cc)
-AC_CONFIG_HEADER(config.h)
+AC_CONFIG_HEADER(config.h kpathsea/c-auto.h)
 dnl
 AC_DEFINE(OCTAVE_SOURCE, 1)dnl
 dnl
 dnl See if we were given the target host type.  If not, use
 dnl config.guess to try to guess the target host type.
 dnl
 if test $# -gt 0; then
   TARGET=`eval echo $\{\`echo $#\`\}`
@@ -77,32 +77,32 @@ dnl some defaults
 dnl
 exec_prefix='$(prefix)'
 bindir='$(exec_prefix)/bin'
 datadir='$(prefix)/lib'
 libdir='$(exec_prefix)/lib'
 includedir='$(prefix)/include'
 mandir='$(prefix)/man/man1'
 infodir='$(prefix)/info'
-fcnfiledir='$(datadir)/octave/$(version)/m'
+fcnfiledir='$(datadir)/octave/$(version)/m//'
 localfcnfilepath='$(datadir)/octave/site-m'
 archlibdir='$(libdir)/octave/$(version)/$(target_host_type)/exec'
 octfiledir='$(archlibdir)/oct'
 localoctfilepath='$(datadir)/octave/$(target_host_type)/site-oct'
 fcnfilepath='.:$(localoctfilepath):$(localfcnfilepath):$(octfiledir):$(fcnfiledir)'
 dnl
 dnl Handle --enable-run-in-place.  This option makes Octave look for
 dnl info and function files in the same directory tree as the sources.
 dnl
 AC_ENABLE(run-in-place, [
   run_in_place=true;
   if test "$enableval" = "yes"; then
     builddir="."
   else
-    builddir=enableval
+    builddir=$enableval
   fi
 ], run_in_place=false)dnl
 dnl
 if $run_in_place; then
   AC_DEFINE(RUN_IN_PLACE, 1)dnl
   case "$srcdir" in
     /*)
       absolute_srcdir=$srcdir
@@ -119,17 +119,17 @@ if $run_in_place; then
     *)
       AC_WARN([making builddir absolute -- may lose with automounter])
       absolute_builddir=`(cd $builddir; pwd)`
     ;;
   esac
   absolute_builddir=$absolute_builddir
   prefix=$absolute_srcdir
   infodir=$absolute_srcdir/info
-  fcnfiledir=$absolute_srcdir/scripts
+  fcnfiledir=$absolute_srcdir/scripts//
   archlibdir=$absolute_builddir
   fcnfilepath='.:$(fcnfiledir)'
 fi
 AC_VERBOSE([setting prefix to $prefix])
 AC_VERBOSE([setting exec_prefix to $exec_prefix])
 AC_VERBOSE([setting bindir to $bindir])
 AC_VERBOSE([setting datadir to $datadir])
 AC_VERBOSE([setting libdir to $libdir])
@@ -324,16 +324,25 @@ case "$FLOAT_FORMAT" in
   *)
     AC_WARN("unrecognized floating point format!")
   ;;
 esac
 dnl
 dnl Does the C compiler handle alloca() and const correctly?
 dnl
 AC_ALLOCA
+dnl
+dnl It would be nicer to test for the requisite putenv features directly,
+dnl but can't figure out how to do that.
+dnl
+if test "`(uname) 2>/dev/null`" = NetBSD \
+   || test "`(uname) 2>/dev/null`" = FreeBSD; then
+  AC_DEFINE(SMART_PUTENV)
+fi
+dnl
 AC_CONST
 dnl
 dnl If we haven't been forced to use f2c, try to find a Fortran compiler
 dnl under any one of several common Un*x Fortran compiler names. 
 dnl Put fc last to avoid confusion with some vendor's /bin/sh fc
 dnl builtin.
 dnl
 dnl    xlf : IBM / AIX
@@ -423,16 +432,17 @@ AC_SUBST(FLIBS)dnl
 AC_SUBST(F2C)dnl
 AC_SUBST(F2CFLAGS)dnl
 AC_SUBST(DEFAULT_DOT_C_FROM_DOT_F)dnl
 AC_SUBST(DEFAULT_DOT_O_FROM_DOT_F)dnl
 dnl
 dnl Checks for header files.
 dnl
 AC_STDC_HEADERS
+AC_HAVE_HEADERS(assert.h float.h limits.h memory.h pwd.h stdlib.h)dnl
 AC_HAVE_HEADERS(string.h varargs.h unistd.h floatingpoint.h)dnl
 AC_HAVE_HEADERS(sys/utsname.h sys/time.h sys/fcntl.h)dnl
 AC_HAVE_HEADERS(sys/ttold.h sys/ptem.h sys/select.h)dnl
 AC_DIR_HEADER
 dnl
 dnl Use sgtty on Ultrix so that using DEC Migrate to convert a Mips
 dnl binary to an Alpha binary will work.
 dnl
@@ -458,17 +468,17 @@ case "$DEFS" in
     AC_ERROR([I couldn't find termios.h, termio.h, or sgtty.h!])
   ;;
 esac
 dnl
 dnl Checks for functions.
 dnl
 AC_HAVE_FUNCS(setvbuf getcwd gethostname bzero rindex vfprintf vsprintf)dnl
 AC_HAVE_FUNCS(stricmp strnicmp strcasecmp strncasecmp strerror)dnl
-AC_HAVE_FUNCS(atexit on_exit tempnam)dnl
+AC_HAVE_FUNCS(atexit on_exit tempnam memmove putenv)dnl
 dnl
 dnl Check to see if we have IEEE math functions, and if so, which ones.
 dnl
 dnl For Linux: add -mieee-fp flag to CFLAGS when checking for IEEE FP
 dnl functions, otherwise we may not find them.
 dnl
 dnl Also just using AC_HAVE_FUNCS doesn't seem to work to find isinf
 dnl and isnan on Linux systems, so we use AC_FUNC_CHECK, and if that
@@ -708,11 +718,11 @@ define([tmpe], [libcruft/minpack/Makefil
 define([tmpf], [libcruft/npsol/Makefile libcruft/odepack/Makefile])dnl
 define([tmpg], [libcruft/qpsol/Makefile libcruft/quadpack/Makefile])dnl
 define([tmph], [libcruft/ranlib/Makefile libcruft/villad/Makefile])dnl 
 define([cruftdirs], [tmpa tmpb tmpc tmpd tmpe tmpf tmpg tmph])dnl
 define([tmpA], [Makefile Makeconf libcruft/Makefile libcruft/Makerules])dnl
 define([tmpB], [liboctave/Makefile src/Makefile dld/Makefile])dnl
 define([tmpC], [info/Makefile readline/Makefile readline/doc/Makefile])dnl
 define([tmpD], [readline/examples/Makefile doc/Makefile])dnl
-define([tmpE], [scripts/Makefile test/Makefile])dnl
+define([tmpE], [scripts/Makefile test/Makefile kpathsea/Makefile])dnl
 define([srcdirs], [tmpA tmpB tmpC tmpD tmpE])dnl
 AC_OUTPUT([srcdirs cruftdirs])dnl
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -56,16 +56,21 @@ extern int initialize_info_session ();
 extern int index_entry_exists ();
 extern int do_info_index_search ();
 extern void finish_info_session ();
 extern char *replace_in_documentation ();
 
 // XXX FIXME XXX
 #undef __FUNCTION_DEF
 #include <readline/tilde.h>
+
+#define boolean kpathsea_boolean
+#define false kpathsea_false
+#define true kpathsea_true
+#include <kpathsea/pathsearch.h>
 }
 
 static help_list operators[] =
 {
   { "!",
     "Logical not operator.  See also `~'.\n", },
 
   { "!=",
@@ -383,33 +388,43 @@ simple_help (void)
 
   LIST_SYMBOLS (symbol_def::BUILTIN_VARIABLE, "builtin variables");
 
 // Also need to list variables and currently compiled functions from
 // the symbol table, if there are any.
 
 // Also need to search octave_path for script files.
 
-  char **path = pathstring_to_vector (user_pref.loadpath);
+  char *path_elt = kpse_path_element (user_pref.loadpath);
 
-  char **ptr = path;
-  if (ptr)
+  while (path_elt)
     {
-      while (*ptr)
+      str_llist_type *elt_dirs = kpse_element_dirs (path_elt);
+
+      str_llist_elt_type *dir;
+      for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
 	{
-	  int count;
-	  char **names = get_fcn_file_names (count, *ptr, 0);
-	  output_buf << "\n*** function files in "
-		     << make_absolute (*ptr, the_current_working_directory)
-		     << ":\n\n";
-	  if (names && count > 0)
-	    list_in_columns (output_buf, names);
-	  delete [] names;
-	  ptr++;
+	  char *elt_dir = STR_LLIST (*dir);
+
+	  if (elt_dir)
+	    {
+	      int count;
+	      char **names = get_fcn_file_names (count, elt_dir, 0);
+
+	      output_buf << "\n*** function files in "
+		<< make_absolute (elt_dir, the_current_working_directory)
+		  << ":\n\n";
+
+	      if (names && count > 0)
+		list_in_columns (output_buf, names);
+
+	      delete [] names;
+	    }
 	}
+      path_elt = kpse_path_element (0);
     }
 
   additional_help_message (output_buf);
   output_buf << ends;
   maybe_page_output (output_buf);
 }
 
 static int
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -40,20 +40,22 @@ Software Foundation, 675 Mass Ave, Cambr
 
 extern "C"
 {
 #include <setjmp.h>
 
 #ifndef HAVE_STRNCASECMP
 extern int strncasecmp (const char*, const char*, size_t);
 #endif
-}
 
-extern "C"
-{
+#define boolean kpathsea_boolean
+#define false kpathsea_false
+#define true kpathsea_true
+#include <kpathsea/pathsearch.h>
+
 #if defined (HAVE_TERMIOS_H)
 #include <termios.h>
 #elif defined (HAVE_TERMIO_H)
 #include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #include <sgtty.h>
 #else
 LOSE! LOSE!
@@ -197,16 +199,17 @@ octave_tmp_file_name (void)
   retval = tempnam (0, "oct-");
 
   if (! retval)
     error ("can't open temporary file!");
 
   return retval;
 }
 
+#if 0
 char **
 pathstring_to_vector (char *pathstring)
 {
   static char **path = 0;
 
   if (pathstring)
     {
       int nelem = 0;
@@ -245,16 +248,17 @@ pathstring_to_vector (char *pathstring)
 	  i++;
 	}
 
       delete [] tmp_path;
     }
 
   return path;
 }
+#endif
 
 // Return to the main command loop in octave.cc.
 
 void
 jump_to_top_level (void)
 {
   run_all_unwind_protects ();
 
@@ -416,48 +420,55 @@ get_fcn_file_names (int& num, const char
 
 char **
 get_fcn_file_names (int& num, int no_suffix)
 {
   static int num_max = 1024;
   char **retval = new char * [num_max];
   int i = 0;
 
-  char **path = pathstring_to_vector (user_pref.loadpath);
+  char *path_elt = kpse_path_element (user_pref.loadpath);
 
-  char **ptr = path;
-  if (ptr)
+  while (path_elt)
     {
-      while (*ptr)
+      str_llist_type *elt_dirs = kpse_element_dirs (path_elt);
+
+      str_llist_elt_type *dir;
+      for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
 	{
-	  int tmp_num;
-	  char **names = get_fcn_file_names (tmp_num, *ptr, no_suffix);
+	  char *elt_dir = STR_LLIST (*dir);
 
-	  if (i + tmp_num >= num_max - 1)
+	  if (elt_dir)
 	    {
+	      int tmp_num;
+	      char **names = get_fcn_file_names (tmp_num, elt_dir, no_suffix);
+
+	      if (i + tmp_num >= num_max - 1)
+		{
 // Reallocate the array.  Only copy pointers, not the strings they
 // point to, then only delete the original array of pointers, and not
 // the strings they point to.
 
-	      num_max += 1024;
-	      char **tmp = new char * [num_max];
-	      for (int j = 0; j < i; j++)
-		tmp[j] = retval[j];
+		  num_max += 1024;
+		  char **tmp = new char * [num_max];
+		  for (int j = 0; j < i; j++)
+		    tmp[j] = retval[j];
 
-	      delete [] retval;
+		  delete [] retval;
 
-	      retval = tmp;
-	    }
+		  retval = tmp;
+		}
 
-	  int k = 0;
-	  while (k < tmp_num)
-	    retval[i++] = names[k++];
+	      int k = 0;
+	      while (k < tmp_num)
+		retval[i++] = names[k++];
+	    }
+	}
 
-	  ptr++;
-	}
+      path_elt = kpse_path_element (0);
     }
 
   retval[i] = 0;
   num = i;
 
   return retval;
 }
 
@@ -604,51 +615,36 @@ list_in_columns (ostrstream& os, char **
 
 // See if the given file is in the path.
 
 char *
 file_in_path (const char *name, const char *suffix)
 {
   char *retval = 0;
 
-  char *nm = strconcat ("/", name);
+  char *nm = strsave (name);
   if (suffix)
     {
       char *tmp = nm;
       nm = strconcat (tmp, suffix);
       delete [] tmp;
     }
 
   if (! the_current_working_directory)
     get_working_directory ("file_in_path");
 
-  char **path = pathstring_to_vector (user_pref.loadpath);
+  char *tmp = kpse_path_search (user_pref.loadpath, nm, kpathsea_true);
 
-  char **ptr = path;
-  if (ptr)
+  if (tmp)
     {
-      while (*ptr)
-	{
-	  char *tmp = strconcat (*ptr, nm);
-	  char *p = make_absolute (tmp, the_current_working_directory);
-	  delete [] tmp;
-	  ifstream in_file (p);
-	  if (in_file)
-	    {
-	      in_file.close ();
-	      retval = p;
-	      goto done;
-	    }
-	  delete [] p;
-	  ptr++;
-	}
+      retval = make_absolute (tmp, the_current_working_directory);
+      free (tmp);
+      delete [] nm;
     }
 
- done:
-  delete [] nm;
   return retval;
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 char *
 fcn_file_in_path (const char *name)
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -46,17 +46,19 @@ extern char *read_until (istream&, char)
 #endif
 
 extern char *file_in_path (const char *, const char *);
 extern char *fcn_file_in_path (const char *);
 extern char *oct_file_in_path (const char *);
 
 extern char *octave_tmp_file_name (void);
 
+if 0
 extern char **pathstring_to_vector (char *pathstring);
+#endif
 
 extern void jump_to_top_level (void);
 
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
