# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1501616314 14400
#      Tue Aug 01 15:38:34 2017 -0400
# Node ID 1a08d0ac510fd5f147c84de3557243decc282be3
# Parent  5d8ef9b859f88b22c1f6d0f219da0ddf11c552e4
move union field type punning code to C (bug #51638)

* cmach-info.h, cmach-info.c: New files, extracted and adapted from
mach-info.h and mach-info.cc.

* liboctave/system/module.mk: Update.

* mach-info.cc: Include cmach-info.h.

* mach-info.h (enum float_format): Set explicit values and note that
other code must change if the values change.

diff --git a/liboctave/system/cmach-info.c b/liboctave/system/cmach-info.c
new file mode 100644
--- /dev/null
+++ b/liboctave/system/cmach-info.c
@@ -0,0 +1,142 @@
+/*
+
+Copyright (C) 1996-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <stdint.h>
+
+#include "cmach-info.h"
+#include "f77-fcn.h"
+
+extern double F77_FUNC (d1mach, D1MACH) (const F77_INT*);
+
+typedef union
+{
+  double d;
+  int32_t i[2];
+} equiv;
+
+typedef struct
+{
+  int fp_fmt;
+  equiv fp_par[4];
+} float_params;
+
+#define INIT_FLT_PAR(fp, fmt, sm1, sm2, lrg1, lrg2, rt1, rt2, dv1, dv2) \
+  do                                                                    \
+    {                                                                   \
+      fp.fp_fmt = (fmt);                                                \
+      fp.fp_par[0].i[0] = (sm1);  fp.fp_par[0].i[1] = (sm2);            \
+      fp.fp_par[1].i[0] = (lrg1); fp.fp_par[1].i[1] = (lrg2);           \
+      fp.fp_par[2].i[0] = (rt1);  fp.fp_par[2].i[1] = (rt2);            \
+      fp.fp_par[3].i[0] = (dv1);  fp.fp_par[3].i[1] = (dv2);            \
+    }                                                                   \
+  while (0)
+
+static int equiv_compare (const equiv *std, const equiv *v, int len)
+{
+  int i;
+  for (i = 0; i < len; i++)
+    if (v[i].i[0] != std[i].i[0] || v[i].i[1] != std[i].i[1])
+      return 0;
+  return 1;
+}
+
+// Return 0 if the floating point format is unknown, 1 if it is IEEE
+// little endian, or 2 if it is IEEE big endian.
+//
+// If the return values change, you must also change the values of the
+// float format enum in mach-info.h and the correspondence between the
+// integer and enum values in octave::mach_info::get_float_format.
+
+int
+octave_get_float_format (void)
+{
+  int retval = 0;
+
+  float_params fp[3];
+
+  INIT_FLT_PAR (fp[0], 1,
+                0,    1048576,
+                -1, 2146435071,
+                0, 1017118720,
+                0, 1018167296);
+
+  INIT_FLT_PAR (fp[1], 2,
+                1048576,  0,
+                2146435071, -1,
+                1017118720,  0,
+                1018167296,  0);
+
+  INIT_FLT_PAR (fp[2], 0,
+                0, 0,
+                0, 0,
+                0, 0,
+                0, 0);
+
+  equiv mach_fp_par[4];
+
+  F77_INT opt;
+
+  opt = 1;
+  mach_fp_par[0].d = F77_FUNC (d1mach, D1MACH) (&opt);
+
+  opt = 2;
+  mach_fp_par[1].d = F77_FUNC (d1mach, D1MACH) (&opt);
+
+  opt = 3;
+  mach_fp_par[2].d = F77_FUNC (d1mach, D1MACH) (&opt);
+
+  opt = 4;
+  mach_fp_par[3].d = F77_FUNC (d1mach, D1MACH) (&opt);
+
+  int i = 0;
+  do
+    {
+      if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
+        {
+          retval = fp[i].fp_fmt;
+          break;
+        }
+    }
+  while (fp[++i].fp_fmt != 0);
+
+  return retval;
+}
+
+int
+octave_is_big_endian (void)
+{
+  // Are we little or big endian?  From Harbison & Steele.
+
+  union
+  {
+    long l;
+    char c[sizeof (long)];
+  } u;
+
+  u.l = 1;
+
+  return (u.c[sizeof (long) - 1] == 1);
+}
diff --git a/liboctave/system/cmach-info.h b/liboctave/system/cmach-info.h
new file mode 100644
--- /dev/null
+++ b/liboctave/system/cmach-info.h
@@ -0,0 +1,38 @@
+/*
+
+Copyright (C) 1996-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_cmach_info_h)
+#define octave_cmach_info_h 1
+
+#if defined (__cplusplus)
+extern "C" {
+#endif
+
+extern int octave_get_float_format (void);
+
+extern int octave_is_big_endian (void);
+
+#if defined (__cplusplus)
+}
+#endif
+
+#endif
diff --git a/liboctave/system/mach-info.cc b/liboctave/system/mach-info.cc
--- a/liboctave/system/mach-info.cc
+++ b/liboctave/system/mach-info.cc
@@ -25,113 +25,43 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "mach-info.h"
 
 extern "C"
 {
-  double F77_FUNC (d1mach, D1MACH) (const F77_INT&);
+  int octave_get_float_format (void);
+
+  int octave_is_big_endian (void);
 }
 
 namespace octave
 {
   namespace mach_info
   {
-    union equiv
-    {
-      double d;
-      int i[2];
-    };
-
-    struct float_params
-    {
-      float_format fp_fmt;
-      equiv fp_par[4];
-    };
-
-#define INIT_FLT_PAR(fp, fmt, sm1, sm2, lrg1, lrg2, rt1, rt2, dv1, dv2) \
-    do                                                                  \
-      {                                                                 \
-        fp.fp_fmt = (fmt);                                              \
-        fp.fp_par[0].i[0] = (sm1);  fp.fp_par[0].i[1] = (sm2);          \
-        fp.fp_par[1].i[0] = (lrg1); fp.fp_par[1].i[1] = (lrg2);         \
-        fp.fp_par[2].i[0] = (rt1);  fp.fp_par[2].i[1] = (rt2);          \
-        fp.fp_par[3].i[0] = (dv1);  fp.fp_par[3].i[1] = (dv2);          \
-      }                                                                 \
-    while (0)
-
-    static int equiv_compare (const equiv *std, const equiv *v, int len)
-    {
-      int i;
-      for (i = 0; i < len; i++)
-        if (v[i].i[0] != std[i].i[0] || v[i].i[1] != std[i].i[1])
-          return 0;
-      return 1;
-    }
-
     static float_format get_float_format (void)
     {
-      float_format retval = flt_fmt_unknown;
-
-      float_params fp[5];
-
-      INIT_FLT_PAR (fp[0], flt_fmt_ieee_big_endian,
-                    1048576,  0,
-                    2146435071, -1,
-                    1017118720,  0,
-                    1018167296,  0);
-
-      INIT_FLT_PAR (fp[1], flt_fmt_ieee_little_endian,
-                    0,    1048576,
-                    -1, 2146435071,
-                    0, 1017118720,
-                    0, 1018167296);
+      switch (octave_get_float_format ())
+        {
+        case 1:
+          return flt_fmt_ieee_little_endian;
 
-      INIT_FLT_PAR (fp[4], flt_fmt_unknown,
-                    0, 0,
-                    0, 0,
-                    0, 0,
-                    0, 0);
-
-      equiv mach_fp_par[4];
-
-      mach_fp_par[0].d = F77_FUNC (d1mach, D1MACH) (1);
-      mach_fp_par[1].d = F77_FUNC (d1mach, D1MACH) (2);
-      mach_fp_par[2].d = F77_FUNC (d1mach, D1MACH) (3);
-      mach_fp_par[3].d = F77_FUNC (d1mach, D1MACH) (4);
+        case 2:
+          return flt_fmt_ieee_big_endian;
 
-      int i = 0;
-      do
-        {
-          if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
-            {
-              retval = fp[i].fp_fmt;
-              break;
-            }
+        default:
+          return flt_fmt_unknown;
         }
-      while (fp[++i].fp_fmt != flt_fmt_unknown);
-
-      return retval;
     }
 
     static bool is_big_endian (void)
     {
-      // Are we little or big endian?  From Harbison & Steele.
-
-      union
-      {
-        long l;
-        char c[sizeof (long)];
-      } u;
-
-      u.l = 1;
-
-      return (u.c[sizeof (long) - 1] == 1);
+      return octave_is_big_endian ();
     }
 
     float_format native_float_format (void)
     {
       static float_format fmt = get_float_format ();
 
       return fmt;
     }
diff --git a/liboctave/system/mach-info.h b/liboctave/system/mach-info.h
--- a/liboctave/system/mach-info.h
+++ b/liboctave/system/mach-info.h
@@ -28,19 +28,22 @@ along with Octave; see the file COPYING.
 #include <string>
 
 namespace octave
 {
   namespace mach_info
   {
     enum float_format
     {
-      flt_fmt_unknown,
-      flt_fmt_ieee_little_endian,
-      flt_fmt_ieee_big_endian,
+      // If these values change, you must also change the values
+      // returned by octave_get_float_format.
+
+      flt_fmt_unknown = 0,
+      flt_fmt_ieee_little_endian = 1,
+      flt_fmt_ieee_big_endian = 2,
     };
 
     float_format native_float_format (void);
 
     bool words_big_endian (void);
 
     bool words_little_endian (void);
 
diff --git a/liboctave/system/module.mk b/liboctave/system/module.mk
--- a/liboctave/system/module.mk
+++ b/liboctave/system/module.mk
@@ -9,28 +9,32 @@ SYSTEM_INC = \
   %reldir%/oct-group.h \
   %reldir%/oct-passwd.h \
   %reldir%/oct-syscalls.h \
   %reldir%/oct-time.h \
   %reldir%/oct-uname.h
 
 SYSTEM_SRC = \
   %reldir%/child-list.cc \
+  %reldir%/cmach-info.c \
   %reldir%/dir-ops.cc \
   %reldir%/file-ops.cc \
   %reldir%/file-stat.cc \
   %reldir%/lo-sysdep.cc \
   %reldir%/mach-info.cc \
   %reldir%/oct-env.cc \
   %reldir%/oct-group.cc \
   %reldir%/oct-passwd.cc \
   %reldir%/oct-syscalls.cc \
   %reldir%/oct-time.cc \
   %reldir%/oct-uname.cc
 
+noinst_HEADERS += \
+  %reldir%/cmach-info.h
+
 noinst_LTLIBRARIES += %reldir%/libsystem.la
 
 %canon_reldir%_libsystem_la_SOURCES = $(SYSTEM_SRC)
 
 %canon_reldir%_libsystem_la_CPPFLAGS = $(liboctave_liboctave_la_CPPFLAGS)
 
 %canon_reldir%_libsystem_la_CFLAGS = $(liboctave_liboctave_la_CFLAGS)
 
