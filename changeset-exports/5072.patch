# HG changeset patch
# User jwe
# Date 1099979591 0
#      Tue Nov 09 05:53:11 2004 +0000
# Node ID 97b62f0c1beeb0f5a41aee85488810d5a9b2bf5a
# Parent  7b24fd17c263c0a24955b0dfba5fc8051d49d63b
[project @ 2004-11-09 05:51:30 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2004-11-08  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.cc: New file.
+	* Makefile.in (TI_SRC): Add it to the list.
+	* oct-inttypes.h (OCTAVE_US_TYPE1_CMP_OP, OCTAVE_US_TYPE1_CMP_OPS,
+	OCTAVE_SU_TYPE1_CMP_OP, OCTAVE_SU_TYPE1_CMP_OPS,
+	OCTAVE_TYPE1_CMP_OPS, OCTAVE_US_TYPE2_CMP_OP,
+	OCTAVE_US_TYPE2_CMP_OPS, OCTAVE_SU_TYPE2_CMP_OP,
+	OCTAVE_SU_TYPE2_CMP_OPS, OCTAVE_TYPE2_CMP_OPS):
+	New macros for comparison operations.  Avoid potential
+	problems with default conversions when comparing signed and
+	unsigned values.
+
 2004-11-03  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.cc (Matrix::inverse): Return info == -1 for any failure.
 	* CMatrix.cc (ComplexMatrix::inverse): Likewise.
 
 2004-10-19  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assignN): Avoid resizing if assignment will fail.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -67,17 +67,18 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	$(VX_OP_INC)
 
 TEMPLATE_SRC := Array.cc ArrayN.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MArrayN.cc MDiagArray2.cc \
 	base-lu.cc oct-sort.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-so.cc Array-str.cc Array-idx-vec.cc \
-	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
+	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc \
+	oct-inttypes.cc
 
 MATRIX_SRC := Array-flags.cc Array-util.cc CColVector.cc \
 	CDiagMatrix.cc CMatrix.cc CNDArray.cc CRowVector.cc \
 	CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc CmplxHESS.cc \
 	CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc \
 	EIG.cc boolMatrix.cc boolNDArray.cc chMatrix.cc \
 	chNDArray.cc dColVector.cc dDiagMatrix.cc dMatrix.cc \
 	dNDArray.cc dRowVector.cc dbleAEPBAL.cc dbleCHOL.cc \
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-inttypes.cc
@@ -0,0 +1,381 @@
+/*
+
+Copyright (C) 2004 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "oct-inttypes.h"
+
+#define INSTANTIATE_INT_DOUBLE_BIN_OP(T, OP) \
+  template octave_int<T> operator OP (const octave_int<T>&, double)
+
+#define INSTANTIATE_INT_DOUBLE_BIN_OPS(T) \
+  INSTANTIATE_INT_DOUBLE_BIN_OP (T, +); \
+  INSTANTIATE_INT_DOUBLE_BIN_OP (T, -); \
+  INSTANTIATE_INT_DOUBLE_BIN_OP (T, *); \
+  INSTANTIATE_INT_DOUBLE_BIN_OP (T, /)
+
+#define INSTANTIATE_DOUBLE_INT_BIN_OP(T, OP) \
+  template octave_int<T> operator OP (double, const octave_int<T>&)
+
+#define INSTANTIATE_DOUBLE_INT_BIN_OPS(T) \
+  INSTANTIATE_DOUBLE_INT_BIN_OP (T, +); \
+  INSTANTIATE_DOUBLE_INT_BIN_OP (T, -); \
+  INSTANTIATE_DOUBLE_INT_BIN_OP (T, *); \
+  INSTANTIATE_DOUBLE_INT_BIN_OP (T, /)
+
+#define INSTANTIATE_INT_DOUBLE_CMP_OP(T, OP) \
+  template bool operator OP (const octave_int<T>&, const double&)
+
+#define INSTANTIATE_INT_DOUBLE_CMP_OPS(T) \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, <); \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, <=); \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, >=); \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, >); \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, ==); \
+  INSTANTIATE_INT_DOUBLE_CMP_OP (T, !=)
+
+#define INSTANTIATE_DOUBLE_INT_CMP_OP(T, OP) \
+  template bool operator OP (const double&, const octave_int<T>&)
+
+#define INSTANTIATE_DOUBLE_INT_CMP_OPS(T) \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, <); \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, <=); \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, >=); \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, >); \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, ==); \
+  INSTANTIATE_DOUBLE_INT_CMP_OP (T, !=)
+
+#define INSTANTIATE_INT_BITCMP_OP(T, OP) \
+  template octave_int<T> \
+  operator OP (const octave_int<T>&, const octave_int<T>&)
+
+#define INSTANTIATE_INT_BITCMP_OPS(T) \
+  INSTANTIATE_INT_BITCMP_OP (T, &); \
+  INSTANTIATE_INT_BITCMP_OP (T, |); \
+  INSTANTIATE_INT_BITCMP_OP (T, ^)
+
+#define INSTANTIATE_INTTYPE(T) \
+  template class octave_int<T>; \
+  template octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
+  template octave_int<T> pow (double, const octave_int<T>&); \
+  template octave_int<T> pow (const octave_int<T>&, double b); \
+  template std::ostream& operator << (std::ostream&, const octave_int<T>&); \
+  template std::istream& operator >> (std::istream&, octave_int<T>&); \
+  template octave_int<T> \
+  bitshift (const octave_int<T>&, int, const octave_int<T>&); \
+  INSTANTIATE_INT_DOUBLE_BIN_OPS (T); \
+  INSTANTIATE_DOUBLE_INT_BIN_OPS (T); \
+  INSTANTIATE_INT_DOUBLE_CMP_OPS (T); \
+  INSTANTIATE_DOUBLE_INT_CMP_OPS (T); \
+  INSTANTIATE_INT_BITCMP_OPS (T)
+
+INSTANTIATE_INTTYPE (octave_int8_t);
+INSTANTIATE_INTTYPE (octave_int16_t);
+INSTANTIATE_INTTYPE (octave_int32_t);
+INSTANTIATE_INTTYPE (octave_int64_t);
+
+INSTANTIATE_INTTYPE (octave_uint8_t);
+INSTANTIATE_INTTYPE (octave_uint16_t);
+INSTANTIATE_INTTYPE (octave_uint32_t);
+INSTANTIATE_INTTYPE (octave_uint64_t);
+
+#define INSTANTIATE_INTTYPE_BIN_OP(T1, T2, OP) \
+  template octave_int<octave_int_binop_traits<T1, T2>::TR> \
+  operator OP (const octave_int<T1>&, const octave_int<T2>&)
+
+#define INSTANTIATE_INTTYPE_BIN_OPS(T1, T2) \
+  INSTANTIATE_INTTYPE_BIN_OP (T1, T2, +); \
+  INSTANTIATE_INTTYPE_BIN_OP (T1, T2, -); \
+  INSTANTIATE_INTTYPE_BIN_OP (T1, T2, *); \
+  INSTANTIATE_INTTYPE_BIN_OP (T1, T2, /)
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int8_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int16_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int32_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_int64_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint8_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint16_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint32_t, octave_uint64_t);
+
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_int8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_int16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_int32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_int64_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_uint8_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_uint16_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_uint32_t);
+INSTANTIATE_INTTYPE_BIN_OPS (octave_uint64_t, octave_uint64_t);
+
+#define INSTANTIATE_INTTYPE_SHIFT_OP(T, OP) \
+  template octave_int<T> operator OP (const octave_int<T>&, const int&)
+
+#define INSTANTIATE_INTTYPE_SHIFT_OPS(T) \
+  INSTANTIATE_INTTYPE_SHIFT_OP (T, <<); \
+  INSTANTIATE_INTTYPE_SHIFT_OP (T, >>)
+
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_int8_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_int16_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_int32_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_int64_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_uint8_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_uint16_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_uint32_t);
+INSTANTIATE_INTTYPE_SHIFT_OPS (octave_uint64_t);
+
+#define INSTANTIATE_OCTAVE_INT_CMP_OP(OP, T1, T2) \
+  template bool operator OP (const octave_int<T1>&, const octave_int<T2>&)
+
+#define INSTANTIATE_OCTAVE_INT_CMP_OPS(T1, T2) \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (<, T1, T2); \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (<=, T1, T2); \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (>=, T1, T2); \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (>, T1, T2); \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (==, T1, T2); \
+  INSTANTIATE_OCTAVE_INT_CMP_OP (!=, T1, T2)
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_uint16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_uint32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int8_t, octave_uint64_t);
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_uint16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_uint32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int16_t, octave_uint64_t);
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_uint16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_uint32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int32_t, octave_uint64_t);
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_uint16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_uint32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_int64_t, octave_uint64_t);
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_uint16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_uint32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint8_t, octave_uint64_t);
+
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_int8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_int16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_int32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_uint16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_uint32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint16_t, octave_uint64_t);
+
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_int8_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_int16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_int32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_uint16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_uint32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint32_t, octave_uint64_t);
+
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_int8_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_int16_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_int32_t);
+// INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_int64_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_uint8_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_uint16_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_uint32_t);
+INSTANTIATE_OCTAVE_INT_CMP_OPS (octave_uint64_t, octave_uint64_t);
+
+// The following apply if the unsigned type is at least as wide as the
+// signed type (then we can cast postive signed values to the unsigned
+// type and compare).
+
+#define OCTAVE_US_TYPE1_CMP_OP(OP, LTZ_VAL, UT, ST) \
+  bool \
+  operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs) \
+  { \
+    return rhs.value () < 0 ? LTZ_VAL \
+      : lhs.value () OP static_cast<UT> (rhs.value ()); \
+  }
+
+#define OCTAVE_US_TYPE1_CMP_OPS(UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (<, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (<=, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (>=, true, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (>, true, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (==, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP (!=, true, UT, ST)
+
+#define OCTAVE_SU_TYPE1_CMP_OP(OP, LTZ_VAL, ST, UT) \
+  bool \
+  operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs) \
+  { \
+    return lhs.value () < 0 ? LTZ_VAL \
+      : static_cast<UT> (lhs.value ()) OP rhs.value (); \
+  }
+
+#define OCTAVE_SU_TYPE1_CMP_OPS(ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (<, true, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (<=, true, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (>=, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (>, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (==, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP (!=, true, ST, UT)
+
+#define OCTAVE_TYPE1_CMP_OPS(UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OPS (UT, ST) \
+  OCTAVE_SU_TYPE1_CMP_OPS (ST, UT)
+
+OCTAVE_TYPE1_CMP_OPS (octave_uint32_t, octave_int8_t)
+OCTAVE_TYPE1_CMP_OPS (octave_uint32_t, octave_int16_t)
+OCTAVE_TYPE1_CMP_OPS (octave_uint32_t, octave_int32_t)
+
+OCTAVE_TYPE1_CMP_OPS (octave_uint64_t, octave_int8_t)
+OCTAVE_TYPE1_CMP_OPS (octave_uint64_t, octave_int16_t)
+OCTAVE_TYPE1_CMP_OPS (octave_uint64_t, octave_int32_t)
+OCTAVE_TYPE1_CMP_OPS (octave_uint64_t, octave_int64_t)
+
+// The following apply if the signed type is wider than the unsigned
+// type (then we can cast unsigned values to the signed type and
+// compare if the signed value is positive).
+
+#define OCTAVE_US_TYPE2_CMP_OP(OP, LTZ_VAL, UT, ST) \
+  bool \
+  operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs) \
+  { \
+    return rhs.value () < 0 ? LTZ_VAL \
+      : static_cast<ST> (lhs.value ()) OP rhs.value (); \
+  }
+
+#define OCTAVE_US_TYPE2_CMP_OPS(ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (<, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (<=, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (>=, true, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (>, true, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (==, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP (!=, true, ST, UT)
+
+#define OCTAVE_SU_TYPE2_CMP_OP(OP, LTZ_VAL, ST, UT) \
+  bool \
+  operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs) \
+  { \
+    return lhs.value () < 0 ? LTZ_VAL \
+      : lhs.value () OP static_cast<ST> (rhs.value ()); \
+  }
+
+#define OCTAVE_SU_TYPE2_CMP_OPS(ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (<, true, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (<=, true, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (>=, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (>, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (==, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP (!=, true, ST, UT)
+
+#define OCTAVE_TYPE2_CMP_OPS(UT, ST) \
+  OCTAVE_US_TYPE2_CMP_OPS (UT, ST) \
+  OCTAVE_SU_TYPE2_CMP_OPS (ST, UT)
+
+OCTAVE_TYPE2_CMP_OPS (octave_uint32_t, octave_int64_t)
+
+
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -137,64 +137,64 @@ octave_int_fit_to_range (const T1& x, co
 }
 
 // If X is unsigned and the new type is signed, then we only have to
 // check the upper limit, but we should cast the maximum value of the
 // new type to an unsigned type before performing the comparison.
 // This should always be OK because the maximum value should always be
 // positive.
 
-#define US_S_FTR(T1, T2, TC) \
+#define OCTAVE_US_S_FTR(T1, T2, TC) \
   template <> \
   inline T2 \
   octave_int_fit_to_range<T1, T2> (const T1& x, const T2&, const T2& mx) \
   { \
     return x > static_cast<TC> (mx) ? mx : x; \
   }
 
-#define US_S_FTR_FCNS(T) \
-  US_S_FTR(T, char, unsigned char) \
-  US_S_FTR(T, signed char, unsigned char) \
-  US_S_FTR(T, short, unsigned short) \
-  US_S_FTR(T, int, unsigned int) \
-  US_S_FTR(T, long, unsigned long) \
-  US_S_FTR(T, long long, unsigned long long)
+#define OCTAVE_US_S_FTR_FCNS(T) \
+  OCTAVE_US_S_FTR (T, char, unsigned char) \
+  OCTAVE_US_S_FTR (T, signed char, unsigned char) \
+  OCTAVE_US_S_FTR (T, short, unsigned short) \
+  OCTAVE_US_S_FTR (T, int, unsigned int) \
+  OCTAVE_US_S_FTR (T, long, unsigned long) \
+  OCTAVE_US_S_FTR (T, long long, unsigned long long)
 
-US_S_FTR_FCNS (unsigned char)
-US_S_FTR_FCNS (unsigned short)
-US_S_FTR_FCNS (unsigned int)
-US_S_FTR_FCNS (unsigned long)
-US_S_FTR_FCNS (unsigned long long)
+OCTAVE_US_S_FTR_FCNS (unsigned char)
+OCTAVE_US_S_FTR_FCNS (unsigned short)
+OCTAVE_US_S_FTR_FCNS (unsigned int)
+OCTAVE_US_S_FTR_FCNS (unsigned long)
+OCTAVE_US_S_FTR_FCNS (unsigned long long)
 
 // If X is signed and the new type is unsigned, then we only have to
 // check the lower limit (which will always be 0 for an unsigned
 // type).  The upper limit will be enforced correctly by converting to
 // the new type, even if the type of X is wider than the new type.
 
-#define S_US_FTR(T1, T2) \
+#define OCTAVE_S_US_FTR(T1, T2) \
   template <> \
   inline T2 \
   octave_int_fit_to_range<T1, T2> (const T1& x, const T2&, const T2&) \
   { \
     return x < 0 ? 0 : x; \
   }
 
-#define S_US_FTR_FCNS(T) \
-  S_US_FTR(T, unsigned char) \
-  S_US_FTR(T, unsigned short) \
-  S_US_FTR(T, unsigned int) \
-  S_US_FTR(T, unsigned long) \
-  S_US_FTR(T, unsigned long long)
+#define OCTAVE_S_US_FTR_FCNS(T) \
+  OCTAVE_S_US_FTR (T, unsigned char) \
+  OCTAVE_S_US_FTR (T, unsigned short) \
+  OCTAVE_S_US_FTR (T, unsigned int) \
+  OCTAVE_S_US_FTR (T, unsigned long) \
+  OCTAVE_S_US_FTR (T, unsigned long long)
 
-S_US_FTR_FCNS (char)
-S_US_FTR_FCNS (signed char)
-S_US_FTR_FCNS (short)
-S_US_FTR_FCNS (int)
-S_US_FTR_FCNS (long)
-S_US_FTR_FCNS (long long)
+OCTAVE_S_US_FTR_FCNS (char)
+OCTAVE_S_US_FTR_FCNS (signed char)
+OCTAVE_S_US_FTR_FCNS (short)
+OCTAVE_S_US_FTR_FCNS (int)
+OCTAVE_S_US_FTR_FCNS (long)
+OCTAVE_S_US_FTR_FCNS (long long)
 
 #define OCTAVE_INT_FIT_TO_RANGE(r, T) \
   octave_int_fit_to_range (r, \
                            std::numeric_limits<T>::min (), \
                            std::numeric_limits<T>::max ())
 
 #define OCTAVE_INT_MIN_VAL2(T1, T2) \
   std::numeric_limits<typename octave_int_binop_traits<T1, T2>::TR>::min ()
@@ -400,17 +400,16 @@ typedef octave_int<octave_int32_t> octav
 typedef octave_int<octave_int64_t> octave_int64;
 
 typedef octave_int<octave_uint8_t> octave_uint8;
 typedef octave_int<octave_uint16_t> octave_uint16;
 typedef octave_int<octave_uint32_t> octave_uint32;
 typedef octave_int<octave_uint64_t> octave_uint64;
 
 #define OCTAVE_INT_BIN_OP(OP) \
- \
   template <class T1, class T2> \
   octave_int<typename octave_int_binop_traits<T1, T2>::TR> \
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double ty = static_cast<double> (y.value ()); \
     double r = tx OP ty; \
     return OCTAVE_INT_FIT_TO_RANGE2 (r, T1, T2); \
@@ -426,34 +425,32 @@ operator / (const octave_int<T1>& x, con
 {
   double tx = static_cast<double> (x.value ());
   double ty = static_cast<double> (y.value ());
   double r = (tx == 0 && ty == 0) ? 0 : tx / ty;
   return OCTAVE_INT_FIT_TO_RANGE2 (r, T1, T2);
 }
 
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP) \
- \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, double y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double r = xround (tx OP y); \
     r = lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
 OCTAVE_INT_DOUBLE_BIN_OP(+)
 OCTAVE_INT_DOUBLE_BIN_OP(-)
 OCTAVE_INT_DOUBLE_BIN_OP(*)
 OCTAVE_INT_DOUBLE_BIN_OP(/)
 
 #define OCTAVE_DOUBLE_INT_BIN_OP(OP) \
- \
   template <class T> \
   octave_int<T> \
   operator OP (double x, const octave_int<T>& y) \
   { \
     double ty = static_cast<double> (y.value ()); \
     double r = x OP ty; \
     r = lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
@@ -492,17 +489,16 @@ OCTAVE_INT_DOUBLE_CMP_OP (!=)
 OCTAVE_DOUBLE_INT_CMP_OP (<)
 OCTAVE_DOUBLE_INT_CMP_OP (<=)
 OCTAVE_DOUBLE_INT_CMP_OP (>=)
 OCTAVE_DOUBLE_INT_CMP_OP (>)
 OCTAVE_DOUBLE_INT_CMP_OP (==)
 OCTAVE_DOUBLE_INT_CMP_OP (!=)
 
 #define OCTAVE_INT_BITCMP_OP(OP) \
- \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, const octave_int<T>& y) \
   { \
     return x.value () OP y.value (); \
   }
 
 OCTAVE_INT_BITCMP_OP (&)
@@ -533,62 +529,143 @@ bitshift (const octave_int<T>& a, int n,
   if (n > 0)
     return (a << n) & mask;
   else if (n < 0)
     return (a >> -n) & mask;
   else
     return a;
 }
 
-// XXX FIXME XXX -- need partial specializations for int64 and uint64
-// types.
-
 #define OCTAVE_INT_CMP_OP(OP) \
- \
   template <class T1, class T2> \
   bool \
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
-    double tx = static_cast<double> (x.value ()); \
-    double ty = static_cast<double> (y.value ()); \
-    return tx OP ty; \
+    return x.value () OP y.value (); \
   }
 
 OCTAVE_INT_CMP_OP (<)
 OCTAVE_INT_CMP_OP (<=)
 OCTAVE_INT_CMP_OP (>=)
 OCTAVE_INT_CMP_OP (>)
 OCTAVE_INT_CMP_OP (==)
 OCTAVE_INT_CMP_OP (!=)
 
+// The following apply if the unsigned type is at least as wide as the
+// signed type (then we can cast postive signed values to the unsigned
+// type and compare).
+
+#define OCTAVE_US_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
+  bool operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+
+#define OCTAVE_US_TYPE1_CMP_OP_DECLS(UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (<, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (<=, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (>=, true, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (>, true, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (==, false, UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECL (!=, true, UT, ST)
+
+#define OCTAVE_SU_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
+  bool operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+
+#define OCTAVE_SU_TYPE1_CMP_OP_DECLS(ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (<, true, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (<=, true, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (>=, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (>, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (==, false, ST, UT) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECL (!=, true, ST, UT)
+
+#define OCTAVE_TYPE1_CMP_OP_DECLS(UT, ST) \
+  OCTAVE_US_TYPE1_CMP_OP_DECLS (UT, ST) \
+  OCTAVE_SU_TYPE1_CMP_OP_DECLS (ST, UT)
+
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint32_t, octave_int8_t)
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint32_t, octave_int16_t)
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint32_t, octave_int32_t)
+
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint64_t, octave_int8_t)
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint64_t, octave_int16_t)
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint64_t, octave_int32_t)
+OCTAVE_TYPE1_CMP_OP_DECLS (octave_uint64_t, octave_int64_t)
+
+// The following apply if the signed type is wider than the unsigned
+// type (then we can cast unsigned values to the signed type and
+// compare if the signed value is positive).
+
+#define OCTAVE_US_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
+  bool operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+
+#define OCTAVE_US_TYPE2_CMP_OP_DECLS(ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (<, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (<=, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (>=, true, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (>, true, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
+  OCTAVE_US_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
+
+#define OCTAVE_SU_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
+  bool operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+
+#define OCTAVE_SU_TYPE2_CMP_OP_DECLS(ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (<, true, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (<=, true, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (>=, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (>, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
+
+#define OCTAVE_TYPE2_CMP_OP_DECLS(UT, ST) \
+  OCTAVE_US_TYPE2_CMP_OP_DECLS (UT, ST) \
+  OCTAVE_SU_TYPE2_CMP_OP_DECLS (ST, UT)
+
+OCTAVE_TYPE2_CMP_OP_DECLS (octave_uint32_t, octave_int64_t)
+
 #define OCTAVE_INT_CONCAT_FN(TYPE) \
 intNDArray< TYPE > \
 concat (const intNDArray< TYPE >& ra, const intNDArray< TYPE >& rb, \
 	const Array<int>& ra_idx) \
 { \
   intNDArray< TYPE > retval (ra); \
   retval.insert (rb, ra_idx); \
   return retval; \
 }
 
 #define OCTAVE_INT_CONCAT_DECL(TYPE) \
 intNDArray< TYPE > \
 concat (const intNDArray< TYPE >& ra, const intNDArray< TYPE >& rb, \
 	const Array<int>& ra_idx);
 
-#undef OCTAVE_INT_TRAIT
 #undef OCTAVE_INT_BINOP_TRAIT
-#undef OCTAVE_INT_MIN_VAL
-#undef OCTAVE_INT_MAX_VAL
+#undef OCTAVE_US_S_FTR
+#undef OCTAVE_US_S_FTR_FCNS
+#undef OCTAVE_S_US_FTR
+#undef OCTAVE_S_US_FTR_FCNS
 #undef OCTAVE_INT_FIT_TO_RANGE
 #undef OCTAVE_INT_MIN_VAL2
 #undef OCTAVE_INT_MAX_VAL2
 #undef OCTAVE_INT_FIT_TO_RANGE2
 #undef OCTAVE_INT_BIN_OP
+#undef OCTAVE_INT_DOUBLE_BIN_OP
+#undef OCTAVE_DOUBLE_INT_BIN_OP
+#undef OCTAVE_INT_DOUBLE_CMP_OP
+#undef OCTAVE_DOUBLE_INT_CMP_OP
+#undef OCTAVE_INT_BITCMP_OP
 #undef OCTAVE_INT_CMP_OP
+#undef OCTAVE_US_TYPE1_CMP_OP_DECL
+#undef OCTAVE_US_TYPE1_CMP_OP_DECLS
+#undef OCTAVE_SU_TYPE1_CMP_OP_DECL
+#undef OCTAVE_SU_TYPE1_CMP_OP_DECLS
+#undef OCTAVE_TYPE1_CMP_OP_DECLS
+#undef OCTAVE_US_TYPE2_CMP_OP_DECL
+#undef OCTAVE_US_TYPE2_CMP_OP_DECLS
+#undef OCTAVE_SU_TYPE2_CMP_OP_DECL
+#undef OCTAVE_SU_TYPE2_CMP_OP_DECLS
+#undef OCTAVE_TYPE2__DECLS
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2004-11-08  John W. Eaton  <jwe@octave.org>
+
+	* plot/__plt2vm__.m: Delete debugging statement.
+	From Dmitri A. Sergatskov <dmitri@unm.edu>.
+
 2004-11-04  John W. Eaton  <jwe@octave.org>
 
 	* plot/hist.m: Always return row vectors for vector args.
 
 2004-09-23  John W. Eaton  <jwe@octave.org>
 
 	* strings/strcmp.m: If args are not strings or cell arrays of
 	strings, return zero instead of reporting an error.
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -65,15 +65,14 @@ function __plt2vm__ (x, y, fmt)
     endif
     for i = 2:y_nc
       cmd = sprintf ("%s, tmp(:,%d:%d:%d) %s", cmd, 1, i, i+1,
                      deblank (fmt (k, :)));
       if (k < fmt_nr)
         k++;
       endif
     endfor
-    cmd
     eval (cmd);
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
