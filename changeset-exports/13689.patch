# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318446531 14400
#      Wed Oct 12 15:08:51 2011 -0400
# Node ID b68d95054947875dfcbf296ab8a206be440da971
# Parent  80f7564a38496bba0268292f97e36c79a3be7f63
print show_octave_dbstack output to std::cerr

* debug.cc (do_dbstack): New function, extracted from Fdbstack.
(Fdbstack, show_octave_dbstack): Call do_dbstack.

diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -830,23 +830,18 @@ List script file with line numbers.\n\
         default:
           error ("dbtype: expecting zero, one, or two arguments\n");
         }
     }
 
   return retval;
 }
 
-DEFUN (dbstack, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} dbstack (@var{n})\n\
-Print or return current stack information.  With optional argument\n\
-@var{n}, omit the @var{n} innermost stack frames.\n\
-@seealso{dbclear, dbstatus, dbstop}\n\
-@end deftypefn")
+static octave_value_list
+do_dbstack (const octave_value_list& args, int nargout, std::ostream& os)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   octave_idx_type curr_frame = -1;
 
   size_t nskip = 0;
@@ -877,17 +872,17 @@ Print or return current stack informatio
       octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
 
       if (nargout == 0)
         {
           octave_idx_type nframes_to_display = stk.numel ();
 
           if (nframes_to_display > 0)
             {
-              octave_stdout << "stopped in:\n\n";
+              os << "stopped in:\n\n";
 
               Cell names = stk.contents ("name");
               Cell files = stk.contents ("file");
               Cell lines = stk.contents ("line");
 
               bool show_top_level = true;
 
               size_t max_name_len = 0;
@@ -903,25 +898,25 @@ Print or return current stack informatio
                 {
                   std::string name = names(i).string_value ();
                   std::string file = files(i).string_value ();
                   int line = lines(i).int_value ();
 
                   if (show_top_level && i == curr_frame)
                     show_top_level = false;
 
-                  octave_stdout << (i == curr_frame ? "  --> " : "      ")
-                                << std::setw (max_name_len) << name
-                                << " at line " << line
-                                << " [" << file << "]"
-                                << std::endl;
+                  os << (i == curr_frame ? "  --> " : "      ")
+                     << std::setw (max_name_len) << name
+                     << " at line " << line
+                     << " [" << file << "]"
+                     << std::endl;
                 }
 
               if (show_top_level)
-                octave_stdout << "  --> top level" << std::endl;
+                os << "  --> top level" << std::endl;
             }
         }
       else
         {
           retval(1) = curr_frame < 0 ? 1 : curr_frame + 1;
           retval(0) = stk;
         }
     }
@@ -932,17 +927,28 @@ Print or return current stack informatio
 // A function that can be easily called from a debugger print the Octave
 // stack.  This can be useful for finding what line of code the
 // interpreter is currently executing when the debugger is stopped in
 // some C++ function, for example.
 
 static void
 show_octave_dbstack (void)
 {
-  Fdbstack (octave_value_list (), 0);
+  do_dbstack (octave_value_list (), 0, std::cerr);
+}
+
+DEFUN (dbstack, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} dbstack (@var{n})\n\
+Print or return current stack information.  With optional argument\n\
+@var{n}, omit the @var{n} innermost stack frames.\n\
+@seealso{dbclear, dbstatus, dbstop}\n\
+@end deftypefn")
+{
+  return do_dbstack (args, nargout, octave_stdout);
 }
 
 static void
 do_dbupdown (const octave_value_list& args, const std::string& who)
 {
   int n = 1;
 
   if (args.length () == 1)
