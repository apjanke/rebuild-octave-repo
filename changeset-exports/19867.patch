# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424996699 18000
#      Thu Feb 26 19:24:59 2015 -0500
# Node ID 6ba3d0f7c6e8cc4edafceafdf8c901d75c87aa1c
# Parent  726df008104d350202bdbd098e72a6a637b4af3a
improve mouse zooming for Qt plotting (bug #44302)

* Figure.h (enum MouseMode): Split ZoomMode into ZoomInMode and
ZoomOutMode.  Change all uses.
* Canvas.cc (Canvas::canvasMouseReleaseEvent,
Canvas::canvasWheelEvent): Make meaning of zoom factor consistent with
zoom function.  Make direction of wheel event consistent with other
programs.
* __init_fltk__.cc (plot_window::handle): Make meaning of zoom factor
consistent with zoom function.
* MouseModeActionGroup.cc (MouseModeActionGroup::MouseModeActionGroup):
Provide buttons for zooming in and out.
* graphics.cc (figure::properties::set_toolkit): Handle zoom direction.
(do_zoom): Make factor > 1 zoom in.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -66,17 +66,18 @@ void Canvas::setCursor (MouseMode mode)
 
       switch (mode)
         {
         case PanMode:
         case RotateMode:
           w->setCursor (Qt::OpenHandCursor);
           break;
 
-        case ZoomMode:
+        case ZoomInMode:
+        case ZoomOutMode:
           // FIXME: distinguish zoom in/out.
           w->setCursor (QBitmap (":/images/zoom.png"));
           break;
 
         default:
           w->setCursor (origCursor);
           break;
         }
@@ -201,17 +202,17 @@ void Canvas::canvasToggleGrid (const gra
 void Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
     {
       gh_manager::auto_lock lock;
 
       draw (m_handle);
 
-      if (m_mouseMode == ZoomMode && m_mouseAxes.ok ())
+      if (m_mouseMode == ZoomInMode && m_mouseAxes.ok ())
         drawZoomBox (m_mouseAnchor, m_mouseCurrent);
     }
 }
 
 void Canvas::canvasMouseMoveEvent (QMouseEvent* event)
 {
   gh_manager::auto_lock lock;
   graphics_object ax = gh_manager::get_object (m_mouseAxes);
@@ -230,17 +231,18 @@ void Canvas::canvasMouseMoveEvent (QMous
             // Update current mouse position
             m_mouseCurrent = event->pos ();
 
             // Force immediate redraw
             redraw (true);
           }
           break;
 
-        case ZoomMode:
+        case ZoomInMode:
+        case ZoomOutMode:
           m_mouseCurrent = event->pos ();
           redraw (true);
           break;
 
         case PanMode:
           {
             ColumnVector p0 = ap.pixel2coord (m_mouseCurrent.x (),
                                               m_mouseCurrent.y ());
@@ -541,17 +543,18 @@ void Canvas::canvasMousePressEvent (QMou
           break;
 
         case TextMode:
           // Handle text insertion here.
           break;
 
         case PanMode:
         case RotateMode:
-        case ZoomMode:
+        case ZoomInMode:
+        case ZoomOutMode:
           if (axesObj)
             {
               bool redraw_figure = true;
 
               if (event->modifiers () == Qt::NoModifier)
                 {
                   switch (event->buttons ())
                     {
@@ -604,36 +607,35 @@ void Canvas::canvasMousePressEvent (QMou
         default:
           break;
         }
     }
 }
 
 void Canvas::canvasMouseReleaseEvent (QMouseEvent* event)
 {
-  if (m_mouseMode == ZoomMode && m_mouseAxes.ok ())
+  if ((m_mouseMode == ZoomInMode || m_mouseMode == ZoomOutMode)
+      && m_mouseAxes.ok ())
     {
       gh_manager::auto_lock lock;
       graphics_object ax = gh_manager::get_object (m_mouseAxes);
 
       if (ax.valid_object ())
         {
           axes::properties& ap = Utils::properties<axes> (ax);
 
           graphics_object obj = gh_manager::get_object (m_handle);
 
           graphics_object figObj (obj.get_ancestor ("figure"));
 
           std::string zm = zoom_mode (figObj);
 
           if (m_mouseAnchor == event->pos ())
             {
-              // FIXME: check direction here.
-
-              double factor = 2.0;
+              double factor = m_mouseMode == ZoomInMode ? 2.0 : 0.5;
 
               ap.zoom (zm, factor);
             }
           else
             {
               ColumnVector p0 = ap.pixel2coord (m_mouseAnchor.x (),
                                                 m_mouseAnchor.y ());
               ColumnVector p1 = ap.pixel2coord (event->x (),
@@ -715,55 +717,51 @@ void Canvas::canvasWheelEvent (QWheelEve
 
           if (axesObj.get_properties ().handlevisibility_is ("on"))
             {
               Utils::properties<figure> (figObj)
                 .set_currentaxes (axesObj.get_handle ().as_octave_value ());
 
               if (zoom_enabled (figObj))
                 {
-                  newMouseMode = ZoomMode;
+                  if (event->delta () > 0)
+                    newMouseMode = ZoomInMode;
+                  else
+                    newMouseMode = ZoomOutMode;
 
                   mode = zoom_mode (figObj);
                 }
               else if (pan_enabled (figObj))
                 {
                   newMouseMode = PanMode;
 
                   mode = pan_mode (figObj);
                 }
             }
 
           bool redrawFigure = true;
 
           switch (newMouseMode)
             {
-            case ZoomMode:
+            case ZoomInMode:
+            case ZoomOutMode:
               {
                 axes::properties& ap = Utils::properties<axes> (axesObj);
 
                 // Control how fast to zoom when using scroll wheel.
                 double wheel_zoom_speed = ap.get_mousewheelzoom ();
 
                 // Determine if we're zooming in or out.
-                double factor = (event->delta () > 0
+                double factor = (newMouseMode == ZoomInMode
                                  ? 1 / (1.0 - wheel_zoom_speed)
                                  : 1.0 - wheel_zoom_speed);
 
-                ap.zoom (mode, factor);
+                // FIXME: should we zoom about point for 2D plots?
 
-#if 0
-                Matrix view = ap.get_view ().matrix_value ();
-                if (view(1) != 90)
-                  {
-                    Matrix zlimits = ap.get_zlim ().matrix_value ();
-                    zlimits = factor * zlimits;
-                    ap.set_zlim (zlimits);
-                  }
-#endif
+                ap.zoom (mode, factor);
               }
               break;
 
             case PanMode:
               {
                 axes::properties& ap = Utils::properties<axes> (axesObj);
 
                 double factor = event->delta () > 0 ? 0.1 : -0.1;
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -174,18 +174,21 @@ static std::string mouse_mode_to_string 
   switch (mode)
     {
     case NoMode:
       return "none";
 
     case RotateMode:
       return "rotate";
 
-    case ZoomMode:
-      return "zoom";
+    case ZoomInMode:
+      return "zoom in";
+
+    case ZoomOutMode:
+      return "zoom out";
 
     case PanMode:
       return "pan";
 
     case TextMode:
       return "text";
 
     case SelectMode:
@@ -199,18 +202,20 @@ static std::string mouse_mode_to_string 
 }
 
 static MouseMode mouse_mode_from_string (const std::string& mode)
 {
   if (mode == "none")
     return NoMode;
   else if (mode == "rotate")
     return RotateMode;
-  else if (mode == "zoom")
-    return ZoomMode;
+  else if (mode == "zoom in")
+    return ZoomInMode;
+  else if (mode == "zoom out")
+    return ZoomOutMode;
   else if (mode == "pan")
     return PanMode;
   else if (mode == "text")
     return TextMode;
   else if (mode == "select")
     return SelectMode;
   else
     return NoMode;
@@ -239,16 +244,25 @@ void Figure::setFileName (const QString&
 MouseMode Figure::mouseMode (void)
 {
   gh_manager::auto_lock lock;
 
   const figure::properties& fp = properties<figure> ();
 
   std::string mode = fp.get___mouse_mode__ ();
 
+  if (mode == "zoom")
+    {
+      octave_scalar_map zm = fp.get___zoom_mode__ ().scalar_map_value ();
+
+      std::string direction = zm.getfield ("Direction").string_value ();
+
+      mode += " " + direction;
+    }    
+
   return mouse_mode_from_string (mode);
 }
 
 void Figure::createFigureToolBarAndMenuBar (void)
 {
   QMainWindow* win = qWidget<QMainWindow> ();
 
   m_figureToolBar = win->addToolBar (tr ("Figure ToolBar"));
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -37,20 +37,21 @@ namespace QtHandles
 
 enum MouseMode
 {
   // NOTE: These values must match the order of the buttons in the
   // MouseModeActionGroup object.
 
   NoMode        = 0,
   RotateMode    = 1,
-  ZoomMode      = 2,
-  PanMode       = 3,
-  TextMode      = 4,
-  SelectMode    = 5
+  ZoomInMode    = 2,
+  ZoomOutMode   = 3,
+  PanMode       = 4,
+  TextMode      = 5,
+  SelectMode    = 6
 };
 
 class Container;
 class FigureWindow;
 class MenuBar;
 class ToolBar;
 
 class MouseModeActionGroup;
diff --git a/libgui/graphics/MouseModeActionGroup.cc b/libgui/graphics/MouseModeActionGroup.cc
--- a/libgui/graphics/MouseModeActionGroup.cc
+++ b/libgui/graphics/MouseModeActionGroup.cc
@@ -33,27 +33,33 @@ along with Octave; see the file COPYING.
 namespace QtHandles
 {
 
 MouseModeActionGroup::MouseModeActionGroup (QObject* xparent)
   : QObject (xparent), m_current (0)
 {
   m_actions.append (new QAction (QIcon (":/images/rotate.png"),
                                  tr ("Rotate"), this));
-  m_actions.append (new QAction (QIcon (":/images/zoom.png"),
-                                 tr ("Zoom"), this));
+  QAction *zoom_in = new QAction ("Z+", this);
+  zoom_in->setToolTip (tr ("Zoom In")); 
+  m_actions.append (zoom_in);
+
+  QAction *zoom_out = new QAction ("Z-", this);
+  zoom_out->setToolTip (tr ("Zoom Out")); 
+  m_actions.append (zoom_out);
+
   m_actions.append (new QAction (QIcon (":/images/pan.png"),
                                  tr ("Pan"), this));
   m_actions.append (new QAction (QIcon::fromTheme ("insert-text"),
                                  tr ("Insert Text"), this));
   m_actions.append (new QAction (QIcon (":/images/select.png"),
                                  tr ("Select"), this));
 
-  m_actions[3]->setEnabled (false);
   m_actions[4]->setEnabled (false);
+  m_actions[5]->setEnabled (false);
 
   foreach (QAction* a, m_actions)
     {
       a->setCheckable (true);
       connect (a, SIGNAL (toggled (bool)), this, SLOT (actionToggled (bool)));
     }
 }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1805,37 +1805,72 @@ figure::properties::set_toolkit (const g
 
   if (toolkit)
     initialize_r (get___myhandle__ ());
 
   mark_modified ();
 }
 
 void
-figure::properties::set___mouse_mode__ (const octave_value& val)
+figure::properties::set___mouse_mode__ (const octave_value& val_arg)
 {
   if (! error_state)
     {
-      if (__mouse_mode__.set (val, true))
-        {
-          std::string mode = __mouse_mode__.current_value ();
-
-          octave_scalar_map pm = get___pan_mode__ ().scalar_map_value ();
-          pm.setfield ("Enable", mode == "pan" ? "on" : "off");
-          set___pan_mode__ (pm);
-
-          octave_scalar_map rm = get___rotate_mode__ ().scalar_map_value ();
-          rm.setfield ("Enable", mode == "rotate" ? "on" : "off");
-          set___rotate_mode__ (rm);
-
-          octave_scalar_map zm = get___zoom_mode__ ().scalar_map_value ();
-          zm.setfield ("Enable", mode == "zoom" ? "on" : "off");
-          set___zoom_mode__ (zm);
-
-          mark_modified ();
+      std::string direction = "in";
+
+      octave_value val = val_arg;
+
+      if (val.is_string ())
+        {
+          std::string modestr = val.string_value ();
+
+          if (modestr == "zoom in")
+            {
+              val = modestr = "zoom";
+              direction = "in";
+            }
+          else if (modestr == "zoom out")
+            {
+              val = modestr = "zoom";
+              direction = "out";
+            }
+
+          if (__mouse_mode__.set (val, true))
+            {
+              std::string mode = __mouse_mode__.current_value ();
+
+              octave_scalar_map pm = get___pan_mode__ ().scalar_map_value ();
+              pm.setfield ("Enable", mode == "pan" ? "on" : "off");
+              set___pan_mode__ (pm);
+
+              octave_scalar_map rm = get___rotate_mode__ ().scalar_map_value ();
+              rm.setfield ("Enable", mode == "rotate" ? "on" : "off");
+              set___rotate_mode__ (rm);
+
+              octave_scalar_map zm = get___zoom_mode__ ().scalar_map_value ();
+              zm.setfield ("Enable", mode == "zoom" ? "on" : "off");
+              zm.setfield ("Direction", direction);
+              set___zoom_mode__ (zm);
+
+              mark_modified ();
+            }
+          else if (modestr == "zoom")
+            {
+              octave_scalar_map zm = get___zoom_mode__ ().scalar_map_value ();
+              std::string curr_direction
+                = zm.getfield ("Direction").string_value ();
+
+              if (direction != curr_direction)
+                {
+                  zm.setfield ("Direction", direction);
+                  set___zoom_mode__ (zm);
+
+                  mark_modified ();
+                }
+            }
         }
     }
 }
 
 // ---------------------------------------------------------------------
 
 void
 property_list::set (const caseless_str& name, const octave_value& val)
@@ -7567,18 +7602,18 @@ do_zoom (double val, double factor, cons
         {
           hi = std::log10 (hi);
           lo = std::log10 (lo);
           val = std::log10 (val);
         }
     }
 
   // Perform the zooming
-  lo = val + factor * (lo - val);
-  hi = val + factor * (hi - val);
+  lo = val + (lo - val) / factor;
+  hi = val + (hi - val) / factor;
 
   if (is_logscale)
     {
       if (is_negative)
         {
           double tmp = -std::pow (10.0, hi);
           hi = -std::pow (10.0, lo);
           lo = tmp;
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1583,25 +1583,28 @@ private:
                   {
                     axes::properties& ap =
                       dynamic_cast<axes::properties&> (ax.get_properties ());
 
                     // Control how fast to zoom when using scroll wheel.
                     double wheel_zoom_speed = ap.get_mousewheelzoom ();
 
                     // Determine if we're zooming in or out.
-                    const double factor =
-                      (Fl::event_dy () > 0) ? 1 / (1.0 - wheel_zoom_speed)
-                      : 1.0 - wheel_zoom_speed;
+                    const double factor = (Fl::event_dy () < 0
+                                           ? 1 / (1.0 - wheel_zoom_speed)
+                                           : 1.0 - wheel_zoom_speed);
+
 
                     // Get the point we're zooming about.
                     double x1, y1;
                     pixel2pos (ax, Fl::event_x (), Fl::event_y () - menu_dy (),
                                x1, y1);
 
+                    // FIXME: should we only zoom about point for 2D plots?
+
                     ap.zoom_about_point ("both", x1, y1, factor, false);
                     mark_modified ();
                     return 1;
                   }
               }
 
             case FL_RELEASE:
               if (fp.get_windowbuttonupfcn ().is_defined ())
