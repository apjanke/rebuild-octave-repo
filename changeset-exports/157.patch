# HG changeset patch
# User jwe
# Date 750545104 0
#      Wed Oct 13 20:45:04 1993 +0000
# Node ID 94aa0774c4171e693869c1cccc86d9b2f87b2918
# Parent  8dc079be9dc5bc07e74ac6c29fc53249b6f6f866
[project @ 1993-10-13 20:45:04 by jwe]
(qpsol): Check to ensure that the bounds on linear constraints are
vectors.

diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -67,46 +67,46 @@ Handle all of the following:
 
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   ColumnVector x = args[1].to_vector ();
   if (x.capacity () == 0)
     {
-      message ("qpsol", "expecting vector as first argument");
+      error ("qpsol: expecting vector as first argument");
       return retval;
     }
 
   Matrix H = args[2].to_matrix ();
   if (H.rows () != H.columns () || H.rows () != x.capacity ())
     {
-      message ("qpsol", "H must be a square matrix consistent with the\
+      error ("qpsol: H must be a square matrix consistent with the\
  size of x");
       return retval;
     }
 
   ColumnVector c = args[3].to_vector ();
   if (c.capacity () != x.capacity ())
     {
-      message ("qpsol", "c must be a vector the same size as x");
+      error ("qpsol: c must be a vector the same size as x");
       return retval;
     }
 
   Bounds bounds;
   if (nargin == 6 || nargin == 9)
     {
       ColumnVector lb = args[4].to_vector ();
       ColumnVector ub = args[5].to_vector ();
 
       int lb_len = lb.capacity ();
       int ub_len = ub.capacity ();
       if (lb_len != ub_len || lb_len != x.capacity ())
 	{
-	  message ("qpsol", "lower and upper bounds and decision variable\n\
+	  error ("qpsol: lower and upper bounds and decision variable\n\
        vector must all have the same number of elements");
 	  return retval;
 	}
 
       bounds.resize (lb_len);
       bounds.set_lower_bounds (lb);
       bounds.set_upper_bounds (ub);
     }
@@ -137,16 +137,22 @@ Handle all of the following:
     }
 
   if (nargin == 7 || nargin == 9)
     {
       ColumnVector lub = args[nargin-1].to_vector ();
       Matrix A = args[nargin-2].to_matrix ();
       ColumnVector llb = args[nargin-3].to_vector ();
 
+      if (llb.capacity () == 0 || lub.capacity () == 0)
+	{
+	  error ("qpsol: bounds for linear constraints must be vectors");
+	  return retval;
+	}
+
       if (! linear_constraints_ok (x, llb, A, lub, "qpsol", 1))
 	return retval;
 
       LinConst linear_constraints (llb, A, lub);
 
       if (nargin == 9)
 	{
 	  // 3. qpsol (x, H, c, lb, ub, llb, A, lub)
