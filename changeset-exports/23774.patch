# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500062759 14400
#      Fri Jul 14 16:05:59 2017 -0400
# Node ID 41795b504a8b616547af77007ed15aa50cfcde30
# Parent  5ff24576b78351b33538dcafbd593e4e9fb47a18
don't use singleton for gtk_manager

* graphics-handle.h, graphics-toolkit.cc, graphics-toolkit.h,
gtk-manager.cc, gtk-manager.h: New files, extracted from graphics.cc
and graphics.in.h.
* libinterp/corefcn/module.mk: Update.

* graphics.cc (Favailable_graphics_toolkits,
Fregister_graphics_toolkit, Floaded_graphics_toolkits): Now defined
with DEFMETHOD.

* main-window.cc (octave_interpreter::execute): Pass interpreter
object to Fregister_graphics_toolkit.

* interpreter-private.cc, interpreter-private.h
(__get_gtk_manager__): New function.

* interpreter.cc, interpreter.h
(interpreter::m_gtk_manager): New data member.
(interpreter::get_gtk_manager): New function.
(interpreter::cleanup): Update call to unload_all_toolkits.

* __init_qt__.cc (__init__): Pass reference to interpreter.
Update caller.
(__shutdown__): Don't call gtk_manager::unload_toolkit here.
(F__init_qt__): Define with DEFMETHOD.

* __init_fltk__.cc (F__init_fltk__): Access gtk_manager through
interpreter object.

* __init_gnuplot__.cc (gnuplot_graphics_toolkit::close):
Don't call gtk_manager::unload_toolkit here.
F__init_gnuplot__): Access gtk_manager through interpreter object.

diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -27,43 +27,46 @@ along with Octave; see the file COPYING.
 #include <QApplication>
 #include <QDir>
 #include <QFileDialog>
 #include <QMetaType>
 #include <QPalette>
 #include <QRegExp>
 
 #include "graphics.h"
+#include "gtk-manager.h"
 #include "interpreter.h"
 #include "defun.h"
 
 #include "Backend.h"
 #include "QtHandlesUtils.h"
 #include "__init_qt__.h"
 
 namespace QtHandles
 {
 
   static bool qtHandlesInitialized = false;
 
   bool
-  __init__ (void)
+  __init__ (octave::interpreter& interp)
   {
     if (! qtHandlesInitialized)
       {
         if (qApp)
           {
             gh_manager::auto_lock lock;
 
             qRegisterMetaType<graphics_object> ("graphics_object");
 
             gh_manager::enable_event_processing (true);
 
+            octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
             graphics_toolkit tk (new Backend ());
-            gtk_manager::load_toolkit (tk);
+            gtk_mgr.load_toolkit (tk);
 
             octave::interpreter::add_atexit_function ("__shutdown_qt__");
 
             // Change some default settings to use Qt default colors
             QPalette p;
             graphics_object root = gh_manager::get_object (0);
 
             /*
@@ -107,33 +110,30 @@ namespace QtHandles
 
   bool
   __shutdown__ (void)
   {
     if (qtHandlesInitialized)
       {
         gh_manager::auto_lock lock;
 
-        gtk_manager::unload_toolkit ("qt");
-
         gh_manager::enable_event_processing (false);
 
         qtHandlesInitialized = false;
 
         return true;
       }
 
     return false;
   }
-
 }
 
-DEFUN (__init_qt__, , , "")
+DEFMETHOD (__init_qt__, interp, , , "")
 {
-  QtHandles::__init__ ();
+  QtHandles::__init__ (interp);
 
   return octave_value ();
 }
 
 DEFUN (__shutdown_qt__, , , "")
 {
   QtHandles::__shutdown__ ();
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -116,17 +116,17 @@ octave_interpreter::execute (void)
 
           emit octave_ready_signal ();
 
           // Start executing commands in the command window.
 
 #if defined (HAVE_QT_GRAPHICS)
           install___init_qt___functions ();
 
-          Fregister_graphics_toolkit (ovl ("qt"));
+          Fregister_graphics_toolkit (interp, ovl ("qt"));
 #endif
 
           exit_status = interp.execute ();
         }
     }
   catch (const octave::exit_exception& ex)
     {
       exit_status = ex.exit_status ();
diff --git a/libinterp/corefcn/graphics-handle.h b/libinterp/corefcn/graphics-handle.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/graphics-handle.h
@@ -0,0 +1,32 @@
+/*
+
+Copyright (C) 2007-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_graphics_handle_h)
+#define octave_graphics_handle_h 1
+
+#include "octave-config.h"
+
+#include "oct-handle.h"
+
+typedef octave_handle graphics_handle;
+
+#endif
diff --git a/libinterp/corefcn/graphics-toolkit.cc b/libinterp/corefcn/graphics-toolkit.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/graphics-toolkit.cc
@@ -0,0 +1,44 @@
+/*
+
+Copyright (C) 2007-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "graphics.h"
+#include "gtk-manager.h"
+
+void
+base_graphics_toolkit::update (const graphics_handle& h, int id)
+{
+  graphics_object go = gh_manager::get_object (h);
+
+  update (go, id);
+}
+
+bool
+base_graphics_toolkit::initialize (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (h);
+
+  return initialize (go);
+}
diff --git a/libinterp/corefcn/graphics-toolkit.h b/libinterp/corefcn/graphics-toolkit.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/graphics-toolkit.h
@@ -0,0 +1,226 @@
+/*
+
+Copyright (C) 2007-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_graphics_toolkit_h)
+#define octave_graphics_toolkit_h 1
+
+#include "octave-config.h"
+
+#include <map>
+#include <string>
+
+#include "dMatrix.h"
+
+#include "Cell.h"
+#include "error.h"
+#include "graphics-handle.h"
+
+class graphics_toolkit;
+class graphics_object;
+
+class base_graphics_toolkit
+{
+public:
+  friend class graphics_toolkit;
+
+public:
+  base_graphics_toolkit (const std::string& nm)
+    : name (nm), count (0) { }
+
+  virtual ~base_graphics_toolkit (void) = default;
+
+  std::string get_name (void) const { return name; }
+
+  virtual bool is_valid (void) const { return false; }
+
+  virtual void redraw_figure (const graphics_object&) const
+  { gripe_if_tkit_invalid ("redraw_figure"); }
+
+  virtual void print_figure (const graphics_object&, const std::string&,
+                             const std::string&,
+                             const std::string& = "") const
+  { gripe_if_tkit_invalid ("print_figure"); }
+
+  virtual uint8NDArray get_pixels (const graphics_object&) const
+  {
+    gripe_if_tkit_invalid ("get_pixels");
+    return uint8NDArray ();
+  }
+
+  virtual Matrix get_canvas_size (const graphics_handle&) const
+  {
+    gripe_if_tkit_invalid ("get_canvas_size");
+    return Matrix (1, 2, 0.0);
+  }
+
+  virtual double get_screen_resolution (void) const
+  {
+    gripe_if_tkit_invalid ("get_screen_resolution");
+    return 72.0;
+  }
+
+  virtual Matrix get_screen_size (void) const
+  {
+    gripe_if_tkit_invalid ("get_screen_size");
+    return Matrix (1, 2, 0.0);
+  }
+
+  // Callback function executed when the given graphics object
+  // changes.  This allows the graphics toolkit to act on property
+  // changes if needed.
+  virtual void update (const graphics_object&, int)
+  { gripe_if_tkit_invalid ("base_graphics_toolkit::update"); }
+
+  void update (const graphics_handle&, int);
+
+  // Callback function executed when the given graphics object is
+  // created.  This allows the graphics toolkit to do toolkit-specific
+  // initializations for a newly created object.
+  virtual bool initialize (const graphics_object&)
+  {
+    gripe_if_tkit_invalid ("base_graphics_toolkit::initialize");
+    return false;
+  }
+
+  bool initialize (const graphics_handle&);
+
+  // Callback function executed just prior to deleting the given
+  // graphics object.  This allows the graphics toolkit to perform
+  // toolkit-specific cleanup operations before an object is deleted.
+  virtual void finalize (const graphics_object&)
+  { gripe_if_tkit_invalid ("base_graphics_toolkit::finalize"); }
+
+  void finalize (const graphics_handle&);
+
+  // Close the graphics toolkit.
+  virtual void close (void)
+  { gripe_if_tkit_invalid ("base_graphics_toolkit::close"); }
+
+private:
+  std::string name;
+  octave::refcount<int> count;
+
+private:
+  void gripe_if_tkit_invalid (const std::string& fname) const
+  {
+    if (! is_valid ())
+      error ("%s: invalid graphics toolkit", fname.c_str ());
+  }
+};
+
+class graphics_toolkit
+{
+public:
+  graphics_toolkit (void)
+    : rep (new base_graphics_toolkit ("unknown"))
+  {
+    rep->count++;
+  }
+
+  graphics_toolkit (base_graphics_toolkit *b)
+    : rep (b)
+  {
+    rep->count++;
+  }
+
+  graphics_toolkit (const graphics_toolkit& b)
+    : rep (b.rep)
+  {
+    rep->count++;
+  }
+
+  ~graphics_toolkit (void)
+  {
+    if (--rep->count == 0)
+      delete rep;
+  }
+
+  graphics_toolkit& operator = (const graphics_toolkit& b)
+  {
+    if (rep != b.rep)
+      {
+        if (--rep->count == 0)
+          delete rep;
+
+        rep = b.rep;
+        rep->count++;
+      }
+
+    return *this;
+  }
+
+  operator bool (void) const { return rep->is_valid (); }
+
+  std::string get_name (void) const { return rep->get_name (); }
+
+  void redraw_figure (const graphics_object& go) const
+  { rep->redraw_figure (go); }
+
+  void print_figure (const graphics_object& go, const std::string& term,
+                     const std::string& file,
+                     const std::string& debug_file = "") const
+  { rep->print_figure (go, term, file, debug_file); }
+
+  uint8NDArray get_pixels (const graphics_object& go) const
+  { return rep->get_pixels (go); }
+
+  Matrix get_canvas_size (const graphics_handle& fh) const
+  { return rep->get_canvas_size (fh); }
+
+  double get_screen_resolution (void) const
+  { return rep->get_screen_resolution (); }
+
+  Matrix get_screen_size (void) const
+  { return rep->get_screen_size (); }
+
+  // Notifies graphics toolkit that object't property has changed.
+  void update (const graphics_object& go, int id)
+  { rep->update (go, id); }
+
+  void update (const graphics_handle& h, int id)
+  { rep->update (h, id); }
+
+  // Notifies graphics toolkit that new object was created.
+  bool initialize (const graphics_object& go)
+  { return rep->initialize (go); }
+
+  bool initialize (const graphics_handle& h)
+  { return rep->initialize (h); }
+
+  // Notifies graphics toolkit that object was destroyed.
+  // This is called only for explicitly deleted object.
+  // Children are deleted implicitly and graphics toolkit isn't notified.
+  void finalize (const graphics_object& go)
+  { rep->finalize (go); }
+
+  void finalize (const graphics_handle& h)
+  { rep->finalize (h); }
+
+  // Close the graphics toolkit.
+  void close (void) { rep->close (); }
+
+private:
+
+  base_graphics_toolkit *rep;
+};
+
+#endif
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -46,16 +46,17 @@ along with Octave; see the file COPYING.
 #include "singleton-cleanup.h"
 
 #include "builtin-defun-decls.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "graphics.h"
 #include "input.h"
+#include "interpreter-private.h"
 #include "interpreter.h"
 #include "ov.h"
 #include "ovl.h"
 #include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "text-renderer.h"
@@ -501,16 +502,25 @@ default_figure_paperposition (void)
   m(0) = 0.25;
   m(1) = 2.50;
   m(2) = 8.00;
   m(3) = 6.00;
 
   return m;
 }
 
+static std::string
+default_graphics_toolkit (void)
+{
+  octave::gtk_manager& gtk_mgr
+    = octave::__get_gtk_manager__ ("default_graphics_toolkit");
+
+  return gtk_mgr.default_toolkit ();
+}
+
 static Matrix
 default_control_position (void)
 {
   Matrix retval (1, 4);
 
   retval(0) = 0;
   retval(1) = 0;
   retval(2) = 80;
@@ -2910,32 +2920,16 @@ xinitialize (const graphics_handle& h)
 
   if (go)
     go.initialize ();
 }
 
 // ---------------------------------------------------------------------
 
 void
-base_graphics_toolkit::update (const graphics_handle& h, int id)
-{
-  graphics_object go = gh_manager::get_object (h);
-
-  update (go, id);
-}
-
-bool
-base_graphics_toolkit::initialize (const graphics_handle& h)
-{
-  graphics_object go = gh_manager::get_object (h);
-
-  return initialize (go);
-}
-
-void
 base_graphics_toolkit::finalize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   finalize (go);
 }
 
 static int
@@ -3732,16 +3726,53 @@ figure::properties::remove_child (const 
               break;
             }
         }
 
       currentaxes = new_currentaxes;
     }
 }
 
+graphics_toolkit
+figure::properties::get_toolkit (void) const
+{
+  if (! toolkit)
+    {
+      octave::gtk_manager& gtk_mgr
+        = octave::__get_gtk_manager__ ("figure::properties::get_toolkit");
+
+      toolkit = gtk_mgr.get_toolkit ();
+    }
+
+  return toolkit;
+}
+
+void
+figure::properties::set___graphics_toolkit__ (const octave_value& val)
+{
+  if (! val.is_string ())
+    error ("set___graphics_toolkit__ must be a string");
+
+  std::string nm = val.string_value ();
+
+  octave::gtk_manager& gtk_mgr
+    = octave::__get_gtk_manager__ ("figure::properties::set___graphics_toolkit__");
+
+  graphics_toolkit b = gtk_mgr.find_toolkit (nm);
+
+  if (b.get_name () != nm)
+    error ("set___graphics_toolkit__: invalid graphics toolkit");
+
+  if (nm != get___graphics_toolkit__ ())
+    {
+      set_toolkit (b);
+      mark_modified ();
+    }
+}
+
 void
 figure::properties::adopt (const graphics_handle& h)
 {
   base_properties::adopt (h);
 
   if (! get_currentaxes ().ok ())
     {
       graphics_object go = gh_manager::get_object (h);
@@ -9503,18 +9534,20 @@ base_graphics_object::get_factory_defaul
 gh_manager::gh_manager (void)
   : handle_map (), handle_free_list (),
     next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0)),
     figure_list (), graphics_lock (),  event_queue (),
     callback_objects (), event_processing (0)
 {
   handle_map[0] = graphics_object (new root_figure ());
 
+  octave::gtk_manager& gtk_mgr = octave::__get_gtk_manager__ ("gh_manager");
+
   // Make sure the default graphics toolkit is registered.
-  gtk_manager::default_toolkit ();
+  gtk_mgr.default_toolkit ();
 }
 
 void
 gh_manager::create_instance (void)
 {
   instance = new gh_manager ();
 
   if (instance)
@@ -11109,143 +11142,63 @@ Internal function: returns the pixel siz
     dynamic_cast<image::properties&> (go.get_properties ());
 
   Matrix dp = Matrix (1, 2);
   dp(0) = ip.pixel_xsize ();
   dp(1) = ip.pixel_ysize ();
   return ovl (dp);
 }
 
-gtk_manager *gtk_manager::instance = nullptr;
-
-void
-gtk_manager::create_instance (void)
-{
-  instance = new gtk_manager ();
-
-  if (instance)
-    singleton_cleanup_list::add (cleanup_instance);
-}
-
-graphics_toolkit
-gtk_manager::do_get_toolkit (void) const
-{
-  graphics_toolkit retval;
-
-  if (dtk.empty ())
-    error ("no graphics toolkits are available!");
-
-  const_loaded_toolkits_iterator pl = loaded_toolkits.find (dtk);
-
-  if (pl == loaded_toolkits.end ())
-    {
-      const_available_toolkits_iterator pa = available_toolkits.find (dtk);
-
-      if (pa == available_toolkits.end ())
-        error ("default graphics toolkit '%s' is not available!",
-               dtk.c_str ());
-
-      octave_value_list args;
-      args(0) = dtk;
-      octave::feval ("graphics_toolkit", args);
-
-      pl = loaded_toolkits.find (dtk);
-
-      if (pl == loaded_toolkits.end ())
-        error ("failed to load %s graphics toolkit", dtk.c_str ());
-
-      retval = pl->second;
-    }
-  else
-    retval = pl->second;
-
-  return retval;
-}
-
-void
-gtk_manager::do_register_toolkit (const std::string& name)
-{
-  if (dtk.empty () || name == "qt"
-      || (name == "fltk"
-          && available_toolkits.find ("qt") == available_toolkits.end ()))
-    dtk = name;
-
-  available_toolkits.insert (name);
-}
-
-void
-gtk_manager::do_unregister_toolkit (const std::string& name)
-{
-  available_toolkits.erase (name);
-
-  if (dtk == name)
-    {
-      if (available_toolkits.empty ())
-        dtk.clear ();
-      else
-        {
-          const_available_toolkits_iterator pa = available_toolkits.begin ();
-
-          dtk = *pa++;
-
-          while (pa != available_toolkits.end ())
-            {
-              std::string tk_name = *pa++;
-
-              if (tk_name == "qt"
-                  || (tk_name == "fltk"
-                      && (available_toolkits.find ("qt")
-                          == available_toolkits.end ())))
-                dtk = tk_name;
-            }
-        }
-    }
-}
-
-DEFUN (available_graphics_toolkits, , ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (available_graphics_toolkits, interp, , ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} available_graphics_toolkits ()
 Return a cell array of registered graphics toolkits.
 @seealso{graphics_toolkit, register_graphics_toolkit}
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
-  return ovl (gtk_manager::available_toolkits_list ());
-}
-
-DEFUN (register_graphics_toolkit, args, ,
-       doc: /* -*- texinfo -*-
+  octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
+  return ovl (gtk_mgr.available_toolkits_list ());
+}
+
+DEFMETHOD (register_graphics_toolkit, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} register_graphics_toolkit (@var{toolkit})
 List @var{toolkit} as an available graphics toolkit.
 @seealso{available_graphics_toolkits}
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
   if (args.length () != 1)
     print_usage ();
 
   std::string name = args(0).xstring_value ("register_graphics_toolkit: TOOLKIT must be a string");
 
-  gtk_manager::register_toolkit (name);
+  octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
+  gtk_mgr.register_toolkit (name);
 
   return ovl ();
 }
 
-DEFUN (loaded_graphics_toolkits, , ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (loaded_graphics_toolkits, interp, , ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} loaded_graphics_toolkits ()
 Return a cell array of the currently loaded graphics toolkits.
 @seealso{available_graphics_toolkits}
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
-  return ovl (gtk_manager::loaded_toolkits_list ());
+  octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
+  return ovl (gtk_mgr.loaded_toolkits_list ());
 }
 
 DEFUN (drawnow, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} drawnow ()
 @deftypefnx {} {} drawnow ("expose")
 @deftypefnx {} {} drawnow (@var{term}, @var{file}, @var{debug_file})
 Update figure windows and their children.
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -33,32 +33,31 @@ along with Octave; see the file COPYING.
 #include <map>
 #include <set>
 #include <sstream>
 #include <string>
 
 #include "caseless-str.h"
 
 #include "errwarn.h"
-#include "oct-handle.h"
+#include "graphics-handle.h"
+#include "graphics-toolkit.h"
 #include "oct-map.h"
 #include "oct-mutex.h"
 #include "oct-refcount.h"
 #include "ov.h"
 #include "text-renderer.h"
 
 // FIXME: maybe this should be a configure option?
 // Matlab defaults to "Helvetica", but that causes problems for many
 // gnuplot users.
 #if ! defined (OCTAVE_DEFAULT_FONTNAME)
 #define OCTAVE_DEFAULT_FONTNAME "*"
 #endif
 
-typedef octave_handle graphics_handle;
-
 // ---------------------------------------------------------------------
 
 class base_scaler
 {
 public:
   base_scaler (void) { }
 
   virtual ~base_scaler (void) = default;
@@ -2168,379 +2167,16 @@ public:
   octave_scalar_map as_struct (const std::string& prefix_arg) const;
 
 private:
   plist_map_type plist_map;
 };
 
 // ---------------------------------------------------------------------
 
-class graphics_toolkit;
-class graphics_object;
-
-class base_graphics_toolkit
-{
-public:
-  friend class graphics_toolkit;
-
-public:
-  base_graphics_toolkit (const std::string& nm)
-    : name (nm), count (0) { }
-
-  virtual ~base_graphics_toolkit (void) = default;
-
-  std::string get_name (void) const { return name; }
-
-  virtual bool is_valid (void) const { return false; }
-
-  virtual void redraw_figure (const graphics_object&) const
-  { gripe_if_tkit_invalid ("redraw_figure"); }
-
-  virtual void print_figure (const graphics_object&, const std::string&,
-                             const std::string&,
-                             const std::string& = "") const
-  { gripe_if_tkit_invalid ("print_figure"); }
-
-  virtual uint8NDArray get_pixels (const graphics_object&) const
-  {
-    gripe_if_tkit_invalid ("get_pixels");
-    return uint8NDArray ();
-  }
-
-  virtual Matrix get_canvas_size (const graphics_handle&) const
-  {
-    gripe_if_tkit_invalid ("get_canvas_size");
-    return Matrix (1, 2, 0.0);
-  }
-
-  virtual double get_screen_resolution (void) const
-  {
-    gripe_if_tkit_invalid ("get_screen_resolution");
-    return 72.0;
-  }
-
-  virtual Matrix get_screen_size (void) const
-  {
-    gripe_if_tkit_invalid ("get_screen_size");
-    return Matrix (1, 2, 0.0);
-  }
-
-  // Callback function executed when the given graphics object
-  // changes.  This allows the graphics toolkit to act on property
-  // changes if needed.
-  virtual void update (const graphics_object&, int)
-  { gripe_if_tkit_invalid ("base_graphics_toolkit::update"); }
-
-  void update (const graphics_handle&, int);
-
-  // Callback function executed when the given graphics object is
-  // created.  This allows the graphics toolkit to do toolkit-specific
-  // initializations for a newly created object.
-  virtual bool initialize (const graphics_object&)
-  {
-    gripe_if_tkit_invalid ("base_graphics_toolkit::initialize");
-    return false;
-  }
-
-  bool initialize (const graphics_handle&);
-
-  // Callback function executed just prior to deleting the given
-  // graphics object.  This allows the graphics toolkit to perform
-  // toolkit-specific cleanup operations before an object is deleted.
-  virtual void finalize (const graphics_object&)
-  { gripe_if_tkit_invalid ("base_graphics_toolkit::finalize"); }
-
-  void finalize (const graphics_handle&);
-
-  // Close the graphics toolkit.
-  virtual void close (void)
-  { gripe_if_tkit_invalid ("base_graphics_toolkit::close"); }
-
-private:
-  std::string name;
-  octave::refcount<int> count;
-
-private:
-  void gripe_if_tkit_invalid (const std::string& fname) const
-  {
-    if (! is_valid ())
-      error ("%s: invalid graphics toolkit", fname.c_str ());
-  }
-};
-
-class graphics_toolkit
-{
-public:
-  graphics_toolkit (void)
-    : rep (new base_graphics_toolkit ("unknown"))
-  {
-    rep->count++;
-  }
-
-  graphics_toolkit (base_graphics_toolkit *b)
-    : rep (b)
-  {
-    rep->count++;
-  }
-
-  graphics_toolkit (const graphics_toolkit& b)
-    : rep (b.rep)
-  {
-    rep->count++;
-  }
-
-  ~graphics_toolkit (void)
-  {
-    if (--rep->count == 0)
-      delete rep;
-  }
-
-  graphics_toolkit& operator = (const graphics_toolkit& b)
-  {
-    if (rep != b.rep)
-      {
-        if (--rep->count == 0)
-          delete rep;
-
-        rep = b.rep;
-        rep->count++;
-      }
-
-    return *this;
-  }
-
-  operator bool (void) const { return rep->is_valid (); }
-
-  std::string get_name (void) const { return rep->get_name (); }
-
-  void redraw_figure (const graphics_object& go) const
-  { rep->redraw_figure (go); }
-
-  void print_figure (const graphics_object& go, const std::string& term,
-                     const std::string& file,
-                     const std::string& debug_file = "") const
-  { rep->print_figure (go, term, file, debug_file); }
-
-  uint8NDArray get_pixels (const graphics_object& go) const
-  { return rep->get_pixels (go); }
-
-  Matrix get_canvas_size (const graphics_handle& fh) const
-  { return rep->get_canvas_size (fh); }
-
-  double get_screen_resolution (void) const
-  { return rep->get_screen_resolution (); }
-
-  Matrix get_screen_size (void) const
-  { return rep->get_screen_size (); }
-
-  // Notifies graphics toolkit that object't property has changed.
-  void update (const graphics_object& go, int id)
-  { rep->update (go, id); }
-
-  void update (const graphics_handle& h, int id)
-  { rep->update (h, id); }
-
-  // Notifies graphics toolkit that new object was created.
-  bool initialize (const graphics_object& go)
-  { return rep->initialize (go); }
-
-  bool initialize (const graphics_handle& h)
-  { return rep->initialize (h); }
-
-  // Notifies graphics toolkit that object was destroyed.
-  // This is called only for explicitly deleted object.
-  // Children are deleted implicitly and graphics toolkit isn't notified.
-  void finalize (const graphics_object& go)
-  { rep->finalize (go); }
-
-  void finalize (const graphics_handle& h)
-  { rep->finalize (h); }
-
-  // Close the graphics toolkit.
-  void close (void) { rep->close (); }
-
-private:
-
-  base_graphics_toolkit *rep;
-};
-
-class gtk_manager
-{
-public:
-
-  static graphics_toolkit get_toolkit (void)
-  {
-    return instance_ok () ? instance->do_get_toolkit () : graphics_toolkit ();
-  }
-
-  static void register_toolkit (const std::string& name)
-  {
-    if (instance_ok ())
-      instance->do_register_toolkit (name);
-  }
-
-  static void unregister_toolkit (const std::string& name)
-  {
-    if (instance_ok ())
-      instance->do_unregister_toolkit (name);
-  }
-
-  static void load_toolkit (const graphics_toolkit& tk)
-  {
-    if (instance_ok ())
-      instance->do_load_toolkit (tk);
-  }
-
-  static void unload_toolkit (const std::string& name)
-  {
-    if (instance_ok ())
-      instance->do_unload_toolkit (name);
-  }
-
-  static graphics_toolkit find_toolkit (const std::string& name)
-  {
-    return instance_ok ()
-           ? instance->do_find_toolkit (name) : graphics_toolkit ();
-  }
-
-  static Cell available_toolkits_list (void)
-  {
-    return instance_ok () ? instance->do_available_toolkits_list () : Cell ();
-  }
-
-  static Cell loaded_toolkits_list (void)
-  {
-    return instance_ok () ? instance->do_loaded_toolkits_list () : Cell ();
-  }
-
-  static void unload_all_toolkits (void)
-  {
-    if (instance_ok ())
-      instance->do_unload_all_toolkits ();
-  }
-
-  static std::string default_toolkit (void)
-  {
-    return instance_ok () ? instance->do_default_toolkit () : "";
-  }
-
-private:
-
-  gtk_manager (void) { }
-
-  ~gtk_manager (void) = default;
-
-  OCTINTERP_API static void create_instance (void);
-
-  static bool instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      create_instance ();
-
-    if (! instance)
-      error ("unable to create gh_manager!");
-
-    return retval;
-  }
-
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-
-  OCTINTERP_API static gtk_manager *instance;
-
-  // The name of the default toolkit.
-  std::string dtk;
-
-  // The list of toolkits that we know about.
-  std::set<std::string> available_toolkits;
-
-  // The list of toolkits we have actually loaded.
-  std::map<std::string, graphics_toolkit> loaded_toolkits;
-
-  typedef std::set<std::string>::iterator available_toolkits_iterator;
-
-  typedef std::set<std::string>::const_iterator
-    const_available_toolkits_iterator;
-
-  typedef std::map<std::string, graphics_toolkit>::iterator
-    loaded_toolkits_iterator;
-
-  typedef std::map<std::string, graphics_toolkit>::const_iterator
-    const_loaded_toolkits_iterator;
-
-  graphics_toolkit do_get_toolkit (void) const;
-
-  void do_register_toolkit (const std::string& name);
-
-  void do_unregister_toolkit (const std::string& name);
-
-  void do_load_toolkit (const graphics_toolkit& tk)
-  {
-    loaded_toolkits[tk.get_name ()] = tk;
-  }
-
-  void do_unload_toolkit (const std::string& name)
-  {
-    loaded_toolkits.erase (name);
-  }
-
-  graphics_toolkit do_find_toolkit (const std::string& name) const
-  {
-    const_loaded_toolkits_iterator p = loaded_toolkits.find (name);
-
-    if (p != loaded_toolkits.end ())
-      return p->second;
-    else
-      return graphics_toolkit ();
-  }
-
-  Cell do_available_toolkits_list (void) const
-  {
-    Cell m (1, available_toolkits.size ());
-
-    octave_idx_type i = 0;
-    for (const auto& tkit : available_toolkits)
-      m(i++) = tkit;
-
-    return m;
-  }
-
-  Cell do_loaded_toolkits_list (void) const
-  {
-    Cell m (1, loaded_toolkits.size ());
-
-    octave_idx_type i = 0;
-    for (const auto& nm_tkit_p : loaded_toolkits)
-      m(i++) = nm_tkit_p.first;
-
-    return m;
-  }
-
-  void do_unload_all_toolkits (void)
-  {
-    while (! loaded_toolkits.empty ())
-      {
-        loaded_toolkits_iterator p = loaded_toolkits.begin ();
-
-        std::string name = p->first;
-
-        p->second.close ();
-
-        // The toolkit may have unloaded itself.  If not, we'll do it here.
-        if (loaded_toolkits.find (name) != loaded_toolkits.end ())
-          unload_toolkit (name);
-      }
-  }
-
-  std::string do_default_toolkit (void) { return dtk; }
-};
-
-// ---------------------------------------------------------------------
-
 class base_graphics_object;
 class graphics_object;
 
 class OCTINTERP_API base_properties
 {
 public:
   base_properties (const std::string& ty = "unknown",
                    const graphics_handle& mh = graphics_handle (),
@@ -3441,43 +3077,21 @@ public:
     {
       integerhandle = val;
     }
 
     void remove_child (const graphics_handle& h);
 
     void set_visible (const octave_value& val);
 
-    graphics_toolkit get_toolkit (void) const
-    {
-      if (! toolkit)
-        toolkit = gtk_manager::get_toolkit ();
-
-      return toolkit;
-    }
+    graphics_toolkit get_toolkit (void) const;
 
     void set_toolkit (const graphics_toolkit& b);
 
-    void set___graphics_toolkit__ (const octave_value& val)
-    {
-      if (! val.is_string ())
-        error ("set___graphics_toolkit__ must be a string");
-
-      std::string nm = val.string_value ();
-      graphics_toolkit b = gtk_manager::find_toolkit (nm);
-
-      if (b.get_name () != nm)
-        error ("set___graphics_toolkit__: invalid graphics toolkit");
-
-      if (nm != get___graphics_toolkit__ ())
-        {
-          set_toolkit (b);
-          mark_modified ();
-        }
-    }
+    void set___graphics_toolkit__ (const octave_value& val);
 
     void adopt (const graphics_handle& h);
 
     void set_position (const octave_value& val,
                        bool do_notify_toolkit = true);
 
     void set_outerposition (const octave_value& val,
                             bool do_notify_toolkit = true);
@@ -3556,17 +3170,17 @@ public:
       callback_property windowkeyreleasefcn , Matrix ()
       callback_property windowscrollwheelfcn , Matrix ()
       radio_property windowstyle , "{normal}|modal|docked"
       // Octave-specific properties
       mutable string_property __gl_extensions__ hr , ""
       mutable string_property __gl_renderer__ hr , ""
       mutable string_property __gl_vendor__ hr , ""
       mutable string_property __gl_version__ hr , ""
-      string_property __graphics_toolkit__ hs , gtk_manager::default_toolkit ()
+      string_property __graphics_toolkit__ hs , default_graphics_toolkit ()
       any_property __guidata__ h , Matrix ()
       radio_property __mouse_mode__ hS , "{none}|pan|rotate|select|text|zoom"
       any_property __pan_mode__ h , Matrix ()
       any_property __plot_stream__ h , Matrix ()
       any_property __rotate_mode__ h , Matrix ()
       any_property __zoom_mode__ h , Matrix ()
 
       // Obsolete properties: doublebuffer, mincolormap, wvisual, wvisualmode,
diff --git a/libinterp/corefcn/gtk-manager.cc b/libinterp/corefcn/gtk-manager.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/gtk-manager.cc
@@ -0,0 +1,109 @@
+/*
+
+Copyright (C) 2007-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "error.h"
+#include "graphics-toolkit.h"
+#include "gtk-manager.h"
+#include "ovl.h"
+#include "parse.h"
+
+namespace octave
+{
+  graphics_toolkit
+  gtk_manager::get_toolkit (void) const
+  {
+    graphics_toolkit retval;
+
+    if (dtk.empty ())
+      error ("no graphics toolkits are available!");
+
+    const_loaded_toolkits_iterator pl = loaded_toolkits.find (dtk);
+
+    if (pl == loaded_toolkits.end ())
+      {
+        const_available_toolkits_iterator pa = available_toolkits.find (dtk);
+
+        if (pa == available_toolkits.end ())
+          error ("default graphics toolkit '%s' is not available!",
+                 dtk.c_str ());
+
+        octave_value_list args;
+        args(0) = dtk;
+        octave::feval ("graphics_toolkit", args);
+
+        pl = loaded_toolkits.find (dtk);
+
+        if (pl == loaded_toolkits.end ())
+          error ("failed to load %s graphics toolkit", dtk.c_str ());
+
+        retval = pl->second;
+      }
+    else
+      retval = pl->second;
+
+    return retval;
+  }
+
+  void
+  gtk_manager::register_toolkit (const std::string& name)
+  {
+    if (dtk.empty () || name == "qt"
+        || (name == "fltk"
+            && available_toolkits.find ("qt") == available_toolkits.end ()))
+      dtk = name;
+
+    available_toolkits.insert (name);
+  }
+
+  void
+  gtk_manager::unregister_toolkit (const std::string& name)
+  {
+    available_toolkits.erase (name);
+
+    if (dtk == name)
+      {
+        if (available_toolkits.empty ())
+          dtk.clear ();
+        else
+          {
+            const_available_toolkits_iterator pa = available_toolkits.begin ();
+
+            dtk = *pa++;
+
+            while (pa != available_toolkits.end ())
+              {
+                std::string tk_name = *pa++;
+
+                if (tk_name == "qt"
+                    || (tk_name == "fltk"
+                        && (available_toolkits.find ("qt")
+                            == available_toolkits.end ())))
+                  dtk = tk_name;
+              }
+          }
+      }
+  }
+}
diff --git a/libinterp/corefcn/gtk-manager.h b/libinterp/corefcn/gtk-manager.h
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/gtk-manager.h
@@ -0,0 +1,138 @@
+/*
+
+Copyright (C) 2007-2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_gtk_manager_h)
+#define octave_gtk_manager_h 1
+
+#include "octave-config.h"
+
+#include <map>
+#include <set>
+#include <string>
+
+#include "Cell.h"
+#include "graphics-toolkit.h"
+
+namespace octave
+{
+  class gtk_manager
+  {
+  public:
+
+    gtk_manager (void) { }
+
+    ~gtk_manager (void)
+    {
+      unload_all_toolkits ();
+    }
+
+    graphics_toolkit get_toolkit (void) const;
+
+    void register_toolkit (const std::string& name);
+
+    void unregister_toolkit (const std::string& name);
+
+    void load_toolkit (const graphics_toolkit& tk)
+    {
+      loaded_toolkits[tk.get_name ()] = tk;
+    }
+
+    void unload_toolkit (const std::string& name)
+    {
+      loaded_toolkits.erase (name);
+    }
+
+    graphics_toolkit find_toolkit (const std::string& name) const
+    {
+      const_loaded_toolkits_iterator p = loaded_toolkits.find (name);
+
+      if (p != loaded_toolkits.end ())
+        return p->second;
+      else
+        return graphics_toolkit ();
+    }
+
+    Cell available_toolkits_list (void) const
+    {
+      Cell m (1, available_toolkits.size ());
+
+      octave_idx_type i = 0;
+      for (const auto& tkit : available_toolkits)
+        m(i++) = tkit;
+
+      return m;
+    }
+
+    Cell loaded_toolkits_list (void) const
+    {
+      Cell m (1, loaded_toolkits.size ());
+
+      octave_idx_type i = 0;
+      for (const auto& nm_tkit_p : loaded_toolkits)
+        m(i++) = nm_tkit_p.first;
+
+      return m;
+    }
+
+    void unload_all_toolkits (void)
+    {
+      while (! loaded_toolkits.empty ())
+        {
+          loaded_toolkits_iterator p = loaded_toolkits.begin ();
+
+          std::string name = p->first;
+
+          p->second.close ();
+
+          // The toolkit may have unloaded itself.  If not, we'll do it here.
+          if (loaded_toolkits.find (name) != loaded_toolkits.end ())
+            unload_toolkit (name);
+        }
+    }
+
+    std::string default_toolkit (void) const { return dtk; }
+
+  private:
+
+    // The name of the default toolkit.
+    std::string dtk;
+
+    // The list of toolkits that we know about.
+    std::set<std::string> available_toolkits;
+
+    // The list of toolkits we have actually loaded.
+    std::map<std::string, graphics_toolkit> loaded_toolkits;
+
+    typedef std::set<std::string>::iterator available_toolkits_iterator;
+
+    typedef std::set<std::string>::const_iterator
+    const_available_toolkits_iterator;
+
+    typedef std::map<std::string, graphics_toolkit>::iterator
+    loaded_toolkits_iterator;
+
+    typedef std::map<std::string, graphics_toolkit>::const_iterator
+    const_loaded_toolkits_iterator;
+  };
+}
+
+#endif
diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <string>
 
 #include "call-stack.h"
 #include "error.h"
+#include "gtk-manager.h"
 #include "help.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "symtab.h"
 
 namespace octave
@@ -110,9 +111,16 @@ namespace octave
   }
 
   cdef_manager& __get_cdef_manager__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_cdef_manager ();
   }
+
+  gtk_manager& __get_gtk_manager__ (const std::string& who)
+  {
+    interpreter& interp = __get_interpreter__ (who);
+
+    return interp.get_gtk_manager ();
+  }
 }
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 
 class cdef_manager;
 
 namespace octave
 {
   class interpreter;
   class dynamic_loader;
+  class gtk_manager;
   class help_system;
   class load_path;
   class tree_evaluator;
   class call_stack;
 
   extern interpreter& __get_interpreter__ (const std::string& who);
 
   extern dynamic_loader& __get_dynamic_loader__ (const std::string& who);
@@ -55,11 +56,13 @@ namespace octave
   extern symbol_table::scope *
   __require_current_scope__ (const std::string& who);
 
   extern tree_evaluator& __get_evaluator__ (const std::string& who);
 
   extern call_stack& __get_call_stack__ (const std::string& who);
 
   extern cdef_manager& __get_cdef_manager__ (const std::string& who);
+
+  extern gtk_manager& __get_gtk_manager__ (const std::string& who);
 }
 
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -352,16 +352,17 @@ namespace octave
       m_help_system (*this),
       m_dynamic_loader (*this),
       m_load_path (),
       m_symbol_table (),
       m_evaluator (*this),
       m_stream_list (*this),
       m_url_handle_manager (),
       m_cdef_manager (*this),
+      m_gtk_manager (),
       m_interactive (false),
       m_read_site_files (true),
       m_read_init_files (m_app_context != 0),
       m_verbose (false),
       m_inhibit_startup_message (false),
       m_load_path_initialized (false),
       m_history_initialized (false),
       m_initialized (false)
@@ -1130,17 +1131,17 @@ namespace octave
 
     OCTAVE_SAFE_CALL (octave_history_write_timestamp, ());
 
     if (! command_history::ignoring_entries ())
       OCTAVE_SAFE_CALL (command_history::clean_up_and_save, ());
 
     OCTAVE_SAFE_CALL (gh_manager::close_all_figures, ());
 
-    OCTAVE_SAFE_CALL (gtk_manager::unload_all_toolkits, ());
+    m_gtk_manager.unload_all_toolkits ();
 
     OCTAVE_SAFE_CALL (cleanup_tmp_files, ());
 
     // FIXME:  May still need something like this to ensure that
     // destructors for class objects will run properly.  Should that be
     // done earlier?  Before or after atexit functions are executed?
     m_symbol_table.cleanup ();
 
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "quit.h"
 #include "str-vec.h"
 
 #include "dynamic-ld.h"
 #include "environment.h"
+#include "gtk-manager.h"
 #include "help.h"
 #include "load-path.h"
 #include "oct-stream.h"
 #include "ov-classdef.h"
 #include "pt-eval.h"
 #include "symtab.h"
 #include "url-handle-manager.h"
 
@@ -180,16 +181,21 @@ namespace octave
 
     url_handle_manager& get_url_handle_manager (void);
 
     cdef_manager& get_cdef_manager (void)
     {
       return m_cdef_manager;
     }
 
+    gtk_manager& get_gtk_manager (void)
+    {
+      return m_gtk_manager;
+    }
+
     void mlock (void);
 
     void munlock (const std::string& nm);
 
     bool mislocked (const std::string& nm);
 
     static void recover_from_exception (void);
 
@@ -234,16 +240,18 @@ namespace octave
     tree_evaluator m_evaluator;
 
     stream_list m_stream_list;
 
     url_handle_manager m_url_handle_manager;
 
     cdef_manager m_cdef_manager;
 
+    gtk_manager m_gtk_manager;
+
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
 
     bool m_read_site_files;
 
     bool m_read_init_files;
 
     bool m_verbose;
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -33,17 +33,20 @@ COREFCN_INC = \
   %reldir%/environment.h \
   %reldir%/error.h \
   %reldir%/errwarn.h \
   %reldir%/event-queue.h \
   %reldir%/file-io.h \
   %reldir%/ft-text-renderer.h \
   %reldir%/gl-render.h \
   %reldir%/gl2ps-print.h \
+  %reldir%/graphics-handle.h \
+  %reldir%/graphics-toolkit.h \
   %reldir%/gripes.h \
+  %reldir%/gtk-manager.h \
   %reldir%/help.h \
   %reldir%/hook-fcn.h \
   %reldir%/input.h \
   %reldir%/interpreter.h \
   %reldir%/load-path.h \
   %reldir%/load-save.h \
   %reldir%/ls-ascii-helper.h \
   %reldir%/ls-hdf5.h \
@@ -152,19 +155,21 @@ COREFCN_SRC = \
   %reldir%/gammainc.cc \
   %reldir%/gcd.cc \
   %reldir%/getgrent.cc \
   %reldir%/getpwent.cc \
   %reldir%/getrusage.cc \
   %reldir%/givens.cc \
   %reldir%/gl-render.cc \
   %reldir%/gl2ps-print.cc \
+  %reldir%/graphics-toolkit.cc \
   %reldir%/graphics.cc \
   %reldir%/gripes.cc \
   %reldir%/gsvd.cc \
+  %reldir%/gtk-manager.cc \
   %reldir%/hash.cc \
   %reldir%/help.cc \
   %reldir%/hess.cc \
   %reldir%/hex2num.cc \
   %reldir%/hook-fcn.cc \
   %reldir%/input.cc \
   %reldir%/inv.cc \
   %reldir%/interpreter-private.cc \
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -87,16 +87,17 @@ To initialize:
 #include "oct-env.h"
 
 #include "Cell.h"
 #include "builtin-defun-decls.h"
 #include "display.h"
 #include "gl-render.h"
 #include "gl2ps-print.h"
 #include "graphics.h"
+#include "gtk-manager.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "oct-opengl.h"
 #include "ov-fcn-handle.h"
 #include "ov.h"
 #include "ovl.h"
 #include "parse.h"
 #include "variables.h"
@@ -2489,19 +2490,21 @@ Undocumented internal function.
 {
 #if defined (HAVE_FLTK)
   if (! octave::display_info::display_available ())
     error ("__init_fltk__: no graphics DISPLAY available");
   else if (! toolkit_loaded)
     {
       interp.mlock ();
 
+      octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
       fltk_graphics_toolkit *fltk = new fltk_graphics_toolkit (interp);
       graphics_toolkit tk (fltk);
-      gtk_manager::load_toolkit (tk);
+      gtk_mgr.load_toolkit (tk);
       toolkit_loaded = true;
 
       octave_value fcn (new octave_builtin (F__fltk_check__));
       octave_value fcn_handle (new octave_fcn_handle (fcn, "@__fltk_check__"));
       octave_value_list id = Fadd_input_event_hook (fcn_handle, 1);
 
       fltk->set_input_event_hook_id (id);
     }
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -136,18 +136,16 @@ public:
   { return Matrix (1, 2, 0.0); }
 
   void close (void)
   {
     if (toolkit_loaded)
       {
         m_interpreter.munlock ("__init_gnuplot__");
 
-        gtk_manager::unload_toolkit ("gnuplot");
-
         toolkit_loaded = false;
       }
   }
 
 private:
 
   void send_quit (const octave_value& pstream) const
   {
@@ -222,18 +220,20 @@ Undocumented internal function.
 @end deftypefn */)
 {
   if (! have_gnuplot_binary ())
     error ("__init_gnuplot__: the gnuplot program is not available, see 'gnuplot_binary'");
   else if (! toolkit_loaded)
     {
       interp.mlock ();
 
+      octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
+
       graphics_toolkit tk (new gnuplot_graphics_toolkit (interp));
-      gtk_manager::load_toolkit (tk);
+      gtk_mgr.load_toolkit (tk);
 
       toolkit_loaded = true;
     }
 
   return octave_value_list ();
 }
 
 DEFUN_DLD (__have_gnuplot__, , ,
