# HG changeset patch
# User jwe
# Date 1077310774 0
#      Fri Feb 20 20:59:34 2004 +0000
# Node ID a62215ab8a03b5217becd2ec1adbaada1ea1b922
# Parent  d2038299c683f6cd50668706d6585e7007bcbe5b
[project @ 2004-02-20 20:59:34 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2004-02-20  Per Persson  <persquare@mac.com>
+
+	* mkoctfile.in (LINK_DEPS): Include $LDFLAGS in the list.
+
 2004-02-18  Per Persson  <persquare@mac.com>
 
 	* configure.in (*-*-darwin*): Define SONAME_FLAGS.
 
 2004-02-16  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Test for the presence of FFTW 3.x and use it in
 	preference to FFTW 2.x.  Define HAVE_FFTW3
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.h (OCTAVE_QUIT): Set octave_interrupt_state to -1
+	while we are handling interrupts.
+
 2004-02-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (LINK_DEPS): Always define.
 
 2003-11-12  John Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/machar.c (machar) [CRAY]: Kluge to make it work.
 
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -63,30 +63,34 @@ extern void octave_restore_signal_mask (
 class
 octave_interrupt_exception
 {
 };
 #endif
 
 extern sig_atomic_t octave_interrupt_immediately;
 
+// > 0: interrupt pending
+//   0: no interrupt pending
+// < 0: handling interrupt
+//
 extern sig_atomic_t octave_interrupt_state;
 
 extern sig_atomic_t octave_allocation_error;
 
 extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
 
 extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
 
 #define OCTAVE_QUIT \
   do \
     { \
-      if (octave_interrupt_state) \
+      if (octave_interrupt_state > 0) \
         { \
-          octave_interrupt_state = 0; \
+          octave_interrupt_state = -1; \
           octave_throw_interrupt_exception (); \
         } \
     } \
   while (0)
 
 /* Normally, you just want to use
 
      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -378,17 +378,17 @@ if $link; then
       cmd="$LD_CXX $CPPFLAGS $ALL_CXXFLAGS $RDYNAMIC_FLAG $ALL_LDFLAGS $output_option $objfiles $ldflags $LFLAGS $RLD_FLAG $OCTAVE_LIBS $BLAS_LIBS $FFTW_LIBS $LIBREADLINE $LIBS $FLIBS"
       $dbg $cmd
       eval $cmd
     else
       echo "mkoctfile: no way to link stand-alone executable file" 1>&2
       exit 1
     fi
   else
-    LINK_DEPS="$LFLAGS $OCTAVE_LIBS $BLAS_LIBS $FFTW_LIBS $LIBS $FLIBS"
+    LINK_DEPS="$LFLAGS $OCTAVE_LIBS $LDFLAGS $BLAS_LIBS $FFTW_LIBS $LIBS $FLIBS"
     cmd="$DL_LD $DL_LDFLAGS -o $octfile $objfiles $ldflags $LINK_DEPS"
     $dbg $cmd
     eval $cmd
   fi
 
 # Maybe strip it.
 
   if $strip; then
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2004-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (sigfpe_handler, sigpipe_handler):
+	Don't increment	octave_interrupt_state if it is less than 0.
+	(sigint_handler): If octave_interrupt_state is less than zero,
+	reset it.
+
+	* pt-except.cc (do_catch_code): Call OCTAVE_QUIT here so the catch
+	code won't run if an interrupt is pending.  Don't run catch code
+	if intterrupt_state is less than zero.
+
+2004-02-20  Per Persson  <persquare@mac.com>
+
+	* Makefile.in (OCT_LINK_DEPS, OCTINTERP_LINK_DEPS):
+	Include	$(LIBS) in the list before $(FLIBS).
+
 2004-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pr-output.cc (octave_print_internal (std::ostream&, const
 	Range&, bool, int)): Don't print values beyond the limits of the
 	range.
 
 	* sighandlers.cc (sigint_handler): Print message after two
 	consecutive interrupts, dump core after three or more.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -190,21 +190,21 @@ DOC_FILES := $(sort $(DEF_FILES) $(patsu
 OCTAVE_LFLAGS = -L$(TOPDIR)/liboctave -L$(TOPDIR)/libcruft \
   -L$(TOPDIR)/src $(RLD_FLAG)
 
 OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAVE) \
   $(SPECIAL_MATH_LIB) $(LIBCRUFT) \
   $(LIBPLPLOT) $(LIBGLOB) $(LIBDLFCN)
 
 OCTINTERP_LINK_DEPS = \
-  -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT) $(FLIBS)
+  -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT) $(LIBS) $(FLIBS)
 
 OCT_LINK_DEPS = \
   -L../libcruft $(LIBCRUFT) -L../liboctave $(LIBOCTAVE) \
-  -L. $(LIBOCTINTERP) $(BLAS_LIBS) $(FFTW_LIBS) $(FLIBS)
+  -L. $(LIBOCTINTERP) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBS) $(FLIBS)
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
 	DOCSTRINGS mkbuiltins mk-oct-links \
 	defaults.h.in oct-conf.h.in octave.gperf oct-gperf.h \
 	octave.cc parse.cc lex.cc y.tab.h \
 	$(INCLUDES) $(DIST_SRC) $(OPT_HANDLERS)
 
 ifeq ($(SHARED_LIBS), true)
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -52,17 +52,37 @@ tree_try_catch_command::~tree_try_catch_
   delete lead_comm;
   delete mid_comm;
   delete trail_comm;
 }
 
 static void
 do_catch_code (void *ptr)
 {
-  if (octave_interrupt_immediately)
+  // Is it safe to call OCTAVE_QUIT here?  We are already running
+  // something on the unwind_protect stack, but the element for this
+  // action would have already been popped from the top of the stack,
+  // so we should not be attempting to run it again.
+
+  OCTAVE_QUIT;
+
+  // If we are interrupting immediately, or if an interrupt is in
+  // progress (octave_interrupt_state < 0), then we don't want to run
+  // the catch code (it should only run on errors, not interrupts).
+
+  // If octave_interrupt_state is positive, an interrupt is pending.
+  // The only way that could happen would be for the interrupt to
+  // come in after the OCTAVE_QUIT above and before the if statement
+  // below -- it's possible, but unlikely.  In any case, we should
+  // probably let the catch code throw the exception because we don't
+  // want to skip that and potentially run some other code.  For
+  // example, an error may have originally brought us here for some
+  // cleanup operation and we shouldn't skip that.
+
+  if (octave_interrupt_immediately || octave_interrupt_state < 0)
     return;
 
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
   // Set up for letting the user print any messages from errors that
   // occurred in the body of the try_catch statement.
 
   buffer_error_messages--;
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -232,17 +232,17 @@ sigfpe_handler (int /* sig */)
 
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
   std::cerr << "error: floating point exception -- trying to return to prompt\n";
 
   // XXX FIXME XXX -- will setting octave_interrupt_state really help
   // here?
 
-  if (can_interrupt)
+  if (can_interrupt && octave_interrupt_state >= 0)
     octave_interrupt_state++;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if defined (SIGHUP) || defined (SIGTERM)
@@ -329,16 +329,23 @@ sigint_handler (int sig)
 	    // Clear the flag and do normal interrupt stuff.
 	    octave_debug_on_interrupt_state = false;
 	}
 
       if (octave_interrupt_immediately)
 	octave_jump_to_enclosing_context ();
       else
 	{
+	  // If we are already cleaning up from a previous interrupt,
+	  // take note of the fact that another interrupt signal has
+	  // arrived.
+
+	  if (octave_interrupt_state < 0)
+	    octave_interrupt_state = 0;
+
 	  octave_interrupt_state++;
 
 	  if (interactive && octave_interrupt_state == 2)
 	    std::cerr << "Press Control-C again to abort." << std::endl;
 
 	  if (octave_interrupt_state >= 3)
 	    my_friendly_exit (sys_siglist[sig], sig, true);
 	}
@@ -358,17 +365,17 @@ sigpipe_handler (int /* sig */)
   if (pipe_handler_error_count++ == 0)
     std::cerr << "warning: broken pipe\n";
 
   // Don't loop forever on account of this.
 
   // XXX FIXME XXX -- will setting octave_interrupt_state really help
   // here?
 
-  if (pipe_handler_error_count  > 100)
+  if (pipe_handler_error_count  > 100 && octave_interrupt_state >= 0)
     octave_interrupt_state++;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(SIGPIPE) */
 
 octave_interrupt_handler
 octave_catch_interrupts (void)
