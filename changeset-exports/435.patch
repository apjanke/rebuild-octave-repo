# HG changeset patch
# User jwe
# Date 769910342 0
#      Wed May 25 23:59:02 1994 +0000
# Node ID 5e778965b6ea93ee82e0800d529379870cabf72b
# Parent  ec2a6ad30162dfc7f81f8202161c47f1bbc04a72
[project @ 1994-05-25 23:59:02 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1905,16 +1905,72 @@ tree_constant_rep::convert_to_str (void)
     case magic_colon:
     default:
       panic_impossible ();
       break;
     }
   return retval;
 }
 
+void
+tree_constant_rep::convert_to_row_or_column_vector (void)
+{
+  assert (type_tag == matrix_constant || type_tag == complex_matrix_constant);
+
+  int nr = rows ();
+  int nc = columns ();
+
+  int len = nr * nc;
+
+  assert (len > 0);
+
+  int new_nr = 1;
+  int new_nc = 1;
+
+  if (user_pref.prefer_column_vectors)
+    new_nr = len;
+  else
+    new_nc = len;
+
+  if (type_tag == matrix_constant)
+    {
+      Matrix *m = new Matrix (new_nr, new_nc);
+
+      double *cop_out = matrix->fortran_vec ();
+
+      for (int i = 0; i < len; i++)
+	{
+	  if (new_nr == 1)
+	    m->elem (0, i) = *cop_out++;
+	  else
+	    m->elem (i, 0) = *cop_out++;
+	}
+
+      delete matrix;
+      matrix = m;
+    }
+  else
+    {
+      ComplexMatrix *cm = new ComplexMatrix (new_nr, new_nc);
+
+      Complex *cop_out = complex_matrix->fortran_vec ();
+
+      for (int i = 0; i < len; i++)
+	{
+	  if (new_nr == 1)
+	    cm->elem (0, i) = *cop_out++;
+	  else
+	    cm->elem (i, 0) = *cop_out++;
+	}
+
+      delete complex_matrix;
+      complex_matrix = cm;
+    }
+}
+
 int
 tree_constant_rep::is_true (void) const
 {
   if (type_tag == string_constant || type_tag == range_constant)
     {
       tree_constant tmp = make_numeric ();
       return tmp.is_true ();
     }
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -460,16 +460,18 @@ public:
   int columns (void) const;
 
   tree_constant all (void) const;
   tree_constant any (void) const;
   tree_constant isstr (void) const;
 
   tree_constant convert_to_str (void);
 
+  void convert_to_row_or_column_vector (void);
+
   int is_true (void) const;
 
   tree_constant cumprod (void) const;
   tree_constant cumsum (void) const;
   tree_constant prod (void) const;
   tree_constant sum (void) const;
   tree_constant sumsq (void) const;
 
@@ -718,16 +720,21 @@ public:
 
 
   tree_constant all (void) const { return rep->all (); }
   tree_constant any (void) const { return rep->any (); }
   tree_constant isstr (void) const { return rep->isstr (); }
 
   tree_constant convert_to_str (void) { return rep->convert_to_str (); }
 
+  void convert_to_row_or_column_vector (void)
+    {
+      rep->convert_to_row_or_column_vector ();
+    }
+
   int is_true (void) const { return rep->is_true (); }
 
   tree_constant cumprod (void) const { return rep->cumprod (); }
   tree_constant cumsum (void) const { return rep->cumsum (); }
   tree_constant prod (void) const { return rep->prod (); }
   tree_constant sum (void) const { return rep->sum (); }
   tree_constant sumsq (void) const { return rep->sumsq (); }
 
diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -81,19 +81,28 @@ tree_constant_rep::assign (tree_constant
 void
 tree_constant_rep::do_scalar_assignment (tree_constant& rhs,
 					 tree_constant *args, int nargs)
 {
   assert (type_tag == unknown_constant
 	  || type_tag == scalar_constant
 	  || type_tag == complex_scalar_constant);
 
-  if (rhs.is_scalar_type () && valid_scalar_indices (args, nargs))
+  if ((rhs.is_scalar_type () || rhs.is_zero_by_zero)
+      && valid_scalar_indices (args, nargs))
     {
-      if (type_tag == unknown_constant || type_tag == scalar_constant)
+      if (rhs.is_zero_by_zero ())
+	{
+	  if (type_tag == complex_scalar_constant)
+	    delete complex_scalar;
+
+	  matrix = new Matrix (0, 0);
+	  type_tag = matrix_constant;
+	}
+      else if (type_tag == unknown_constant || type_tag == scalar_constant)
 	{
 	  if (rhs.const_type () == scalar_constant)
 	    {
 	      scalar = rhs.double_value ();
 	      type_tag = scalar_constant;
 	    }
 	  else if (rhs.const_type () == complex_scalar_constant)
 	    {
@@ -105,16 +114,17 @@ tree_constant_rep::do_scalar_assignment 
 	      ::error ("invalid assignment to scalar");
 	      return;
 	    }
 	}
       else
 	{
 	  if (rhs.const_type () == scalar_constant)
 	    {
+	      delete complex_scalar;
 	      scalar = rhs.double_value ();
 	      type_tag = scalar_constant;
 	    }
 	  else if (rhs.const_type () == complex_scalar_constant)
 	    {
 	      *complex_scalar = rhs.complex_value ();
 	      type_tag = complex_scalar_constant;
 	    }
@@ -264,16 +274,21 @@ tree_constant_rep::do_matrix_assignment 
 // check to see if the assignment conforms, but that seems like more
 // work than it's worth right now...
 
 // The assignment functions can't handle empty matrices, so don't let
 // any pass through here. 
 	  return;
 	}
 
+// We can't handle the case of assigning to a vector first, since even
+// then, the two operations are not equivalent.  For example, the
+// expression V(:) = M is handled differently depending on whether the
+// user specified do_fortran_indexing = "true".
+
       if (user_pref.do_fortran_indexing)
 	fortran_style_matrix_assignment (rhs, i_arg);
       else if (nr <= 1 || nc <= 1)
 	vector_assignment (rhs, i_arg);
       else
 	panic_impossible ();
     }
   else
@@ -300,25 +315,47 @@ tree_constant_rep::fortran_style_matrix_
   int rhs_nc = rhs.columns ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int i = NINT (tmp_i.double_value ());
-	if (index_check (i-1, "") < 0)
+	int idx = i - 1;
+
+	if (rhs_nr == 0 && rhs_nc == 0)
+	  {
+	    if (idx < nr * nc)
+	      {
+		convert_to_row_or_column_vector ();
+
+		nr = rows ();
+		nc = columns ();
+
+		if (nr == 1)
+		  delete_column (idx);
+		else if (nc == 1)
+		  delete_row (idx);
+		else
+		  panic_impossible ();
+	      }
+	    return;
+	  }
+
+	if (index_check (idx, "") < 0)
 	  return;
+
 	if (nr <= 1 || nc <= 1)
 	  {
-	    maybe_resize (i-1);
+	    maybe_resize (idx);
 	    if (error_state)
 	      return;
 	  }
-	else if (range_max_check (i-1, nr * nc) < 0)
+	else if (range_max_check (idx, nr * nc) < 0)
 	  return;
 
 	nr = rows ();
 	nc = columns ();
 
 	if (! indexed_assign_conforms (1, 1, rhs_nr, rhs_nc))
 	  {
 	    ::error ("for A(int) = X: X must be a scalar");
@@ -333,16 +370,48 @@ tree_constant_rep::fortran_style_matrix_
     case matrix_constant:
       {
 	Matrix mi = tmp_i.matrix_value ();
 	int len = nr * nc;
 	idx_vector ii (mi, 1, "", len);  // Always do fortran indexing here...
 	if (! ii)
 	  return;
 
+	if (rhs_nr == 0 && rhs_nc == 0)
+	  {
+	    ii.sort_uniq ();
+	    int num_to_delete = 0;
+	    for (int i = 0; i < ii.length (); i++)
+	      {
+		if (ii.elem (i) < len)
+		  num_to_delete++;
+		else
+		  break;
+	      }
+
+	    if (num_to_delete > 0)
+	      {
+		if (num_to_delete != ii.length ())
+		  ii.shorten (num_to_delete);
+
+		convert_to_row_or_column_vector ();
+
+		nr = rows ();
+		nc = columns ();
+
+		if (nr == 1)
+		  delete_columns (ii);
+		else if (nc == 1)
+		  delete_rows (ii);
+		else
+		  panic_impossible ();
+	      }
+	    return;
+	  }
+
 	if (nr <= 1 || nc <= 1)
 	  {
 	    maybe_resize (ii.max ());
 	    if (error_state)
 	      return;
 	  }
 	else if (range_max_check (ii.max (), len) < 0)
 	  return;
@@ -374,17 +443,21 @@ tree_constant_rep::fortran_style_matrix_
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       gripe_range_invalid ();
       break;
     case magic_colon:
-      fortran_style_matrix_assignment (rhs, magic_colon);
+// a(:) = [] is equivalent to a(:,:) = foo.
+      if (rhs_nr == 0 && rhs_nc == 0)
+	do_matrix_assignment (rhs, magic_colon, magic_colon);
+      else
+	fortran_style_matrix_assignment (rhs, magic_colon);
       break;
     default:
       panic_impossible ();
       break;
     }
 }
 
 /*
@@ -1988,20 +2061,25 @@ tree_constant_rep::delete_row (int idx)
 }
 
 void
 tree_constant_rep::delete_rows (idx_vector& iv)
 {
   iv.sort_uniq ();
   int num_to_delete = iv.length ();
 
+  int nr = rows ();
+  int nc = columns ();
+
+// If deleting all rows of a column vector, make result 0x0.
+  if (nc == 1 && num_to_delete == nr)
+    nc = 0;
+
   if (type_tag == matrix_constant)
     {
-      int nr = matrix->rows ();
-      int nc = matrix->columns ();
       Matrix *new_matrix = new Matrix (nr-num_to_delete, nc);
       if (nr > num_to_delete)
 	{
 	  int ii = 0;
 	  int idx = 0;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (i == iv.elem (idx))
@@ -2014,18 +2092,16 @@ tree_constant_rep::delete_rows (idx_vect
 		}
 	    }
 	}
       delete matrix;
       matrix = new_matrix;
     }
   else if (type_tag == complex_matrix_constant)
     {
-      int nr = complex_matrix->rows ();
-      int nc = complex_matrix->columns ();
       ComplexMatrix *new_matrix = new ComplexMatrix (nr-num_to_delete, nc);
       if (nr > num_to_delete)
 	{
 	  int ii = 0;
 	  int idx = 0;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (i == iv.elem (idx))
@@ -2046,25 +2122,30 @@ tree_constant_rep::delete_rows (idx_vect
 }
 
 void
 tree_constant_rep::delete_rows (Range& ri)
 {
   ri.sort ();
   int num_to_delete = ri.nelem ();
 
+  int nr = rows ();
+  int nc = columns ();
+
+// If deleting all rows of a column vector, make result 0x0.
+  if (nc == 1 && num_to_delete == nr)
+    nc = 0;
+
   double ib = ri.base ();
   double iinc = ri.inc ();
 
   int max_idx = tree_to_mat_idx (ri.max ());
 
   if (type_tag == matrix_constant)
     {
-      int nr = matrix->rows ();
-      int nc = matrix->columns ();
       Matrix *new_matrix = new Matrix (nr-num_to_delete, nc);
       if (nr > num_to_delete)
 	{
 	  int ii = 0;
 	  int idx = 0;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      double itmp = ib + idx * iinc;
@@ -2080,18 +2161,16 @@ tree_constant_rep::delete_rows (Range& r
 		}
 	    }
 	}
       delete matrix;
       matrix = new_matrix;
     }
   else if (type_tag == complex_matrix_constant)
     {
-      int nr = complex_matrix->rows ();
-      int nc = complex_matrix->columns ();
       ComplexMatrix *new_matrix = new ComplexMatrix (nr-num_to_delete, nc);
       if (nr > num_to_delete)
 	{
 	  int ii = 0;
 	  int idx = 0;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      double itmp = ib + idx * iinc;
@@ -2158,20 +2237,25 @@ tree_constant_rep::delete_column (int id
 }
 
 void
 tree_constant_rep::delete_columns (idx_vector& jv)
 {
   jv.sort_uniq ();
   int num_to_delete = jv.length ();
 
+  int nr = rows ();
+  int nc = columns ();
+
+// If deleting all columns of a row vector, make result 0x0.
+  if (nr == 1 && num_to_delete == nc)
+    nr = 0;
+
   if (type_tag == matrix_constant)
     {
-      int nr = matrix->rows ();
-      int nc = matrix->columns ();
       Matrix *new_matrix = new Matrix (nr, nc-num_to_delete);
       if (nc > num_to_delete)
 	{
 	  int jj = 0;
 	  int idx = 0;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == jv.elem (idx))
@@ -2184,18 +2268,16 @@ tree_constant_rep::delete_columns (idx_v
 		}
 	    }
 	}
       delete matrix;
       matrix = new_matrix;
     }
   else if (type_tag == complex_matrix_constant)
     {
-      int nr = complex_matrix->rows ();
-      int nc = complex_matrix->columns ();
       ComplexMatrix *new_matrix = new ComplexMatrix (nr, nc-num_to_delete);
       if (nc > num_to_delete)
 	{
 	  int jj = 0;
 	  int idx = 0;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == jv.elem (idx))
@@ -2216,25 +2298,30 @@ tree_constant_rep::delete_columns (idx_v
 }
 
 void
 tree_constant_rep::delete_columns (Range& rj)
 {
   rj.sort ();
   int num_to_delete = rj.nelem ();
 
+  int nr = rows ();
+  int nc = columns ();
+
+// If deleting all columns of a row vector, make result 0x0.
+  if (nr == 1 && num_to_delete == nc)
+    nr = 0;
+
   double jb = rj.base ();
   double jinc = rj.inc ();
 
   int max_idx = tree_to_mat_idx (rj.max ());
 
   if (type_tag == matrix_constant)
     {
-      int nr = matrix->rows ();
-      int nc = matrix->columns ();
       Matrix *new_matrix = new Matrix (nr, nc-num_to_delete);
       if (nc > num_to_delete)
 	{
 	  int jj = 0;
 	  int idx = 0;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      double jtmp = jb + idx * jinc;
@@ -2250,18 +2337,16 @@ tree_constant_rep::delete_columns (Range
 		}
 	    }
 	}
       delete matrix;
       matrix = new_matrix;
     }
   else if (type_tag == complex_matrix_constant)
     {
-      int nr = complex_matrix->rows ();
-      int nc = complex_matrix->columns ();
       ComplexMatrix *new_matrix = new ComplexMatrix (nr, nc-num_to_delete);
       if (nc > num_to_delete)
 	{
 	  int jj = 0;
 	  int idx = 0;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      double jtmp = jb + idx * jinc;
