# HG changeset patch
# User Rik <rik@octave.org>
# Date 1405311807 25200
#      Sun Jul 13 21:23:27 2014 -0700
# Branch gui-release
# Node ID 2c1e8de41649bee0cb5ab748f52d49573ec6383d
# Parent  62eb2927917ea882792438092dcdc260aff3c42d
# Parent  5999e654f2564cbbb8244e63fd72c3ebf71935c7
maint: Periodic merge of stable to gui-release.

diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -32,16 +32,32 @@ along with Octave; see the file COPYING.
 #include <algorithm>
 #include <iostream>
 #include <fstream>
 #include <vector>
 #include <cstdlib>
 
 #include <unistd.h>
 
+// This mess suggested by the autoconf manual.
+
+#include <sys/types.h>
+
+#if defined HAVE_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
+
+#ifndef WIFEXITED
+#define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
+#endif
+
+#ifndef WEXITSTATUS
+#define WEXITSTATUS(stat_val) (static_cast<unsigned> (stat_val) >> 8)
+#endif
+
 static std::map<std::string, std::string> vars;
 
 #ifndef OCTAVE_VERSION
 #define OCTAVE_VERSION %OCTAVE_CONF_VERSION%
 #endif
 
 #ifndef OCTAVE_PREFIX
 #define OCTAVE_PREFIX %OCTAVE_CONF_PREFIX%
@@ -339,17 +355,23 @@ ends_with (const std::string& s, const s
           && s.rfind (suffix) == s.length () - suffix.length ());
 }
 
 static int
 run_command (const std::string& cmd)
 {
   if (debug)
     std::cout << cmd << std::endl;
-  return system (cmd.c_str ());
+
+  int result = system (cmd.c_str ());
+
+  if (WIFEXITED (result))
+    result = WEXITSTATUS (result);
+
+  return result;
 }
 
 bool
 is_true (const std::string& s)
 {
   return (s == "yes" || s == "true");
 }
 
@@ -621,17 +643,17 @@ main (int argc, char **argv)
             }
           pclose (fd);
           fo.close ();
         }
 
       return 0;
     }
 
-  for (it = f77files.begin (); it != f77files.end (); ++it)
+  for (it = f77files.begin (); it != f77files.end () && !result; ++it)
     {
       std::string f = *it, b = basename (f, true);
       if (!vars["F77"].empty ())
         {
           std::string o;
           if (!outputfile.empty ())
             {
               if (link)
@@ -650,17 +672,17 @@ main (int argc, char **argv)
       else
         {
           std::cerr << "mkoctfile: no way to compile Fortran file "
                     << f << std::endl;
           return 1;
         }
     }
 
-  for (it = cfiles.begin (); it != cfiles.end (); ++it)
+  for (it = cfiles.begin (); it != cfiles.end () && !result; ++it)
     {
       std::string f = *it;
       if (!vars["CC"].empty ())
         {
           std::string b = basename (f, true), o;
           if (!outputfile.empty ())
             {
               if (link)
@@ -680,17 +702,17 @@ main (int argc, char **argv)
       else
         {
           std::cerr << "mkoctfile: no way to compile C file " << f
                     << std::endl;
           return 1;
         }
     }
 
-  for (it = ccfiles.begin (); it != ccfiles.end (); ++it)
+  for (it = ccfiles.begin (); it != ccfiles.end () && !result; ++it)
     {
       std::string f = *it;
       if (!vars["CXX"].empty ())
         {
           std::string b = basename (f, true), o;
           if (!outputfile.empty ())
             {
               if (link)
@@ -710,17 +732,17 @@ main (int argc, char **argv)
       else
         {
           std::cerr << "mkoctfile: no way to compile C++ file " << f
                     << std::endl;
           return 1;
         }
     }
 
-  if (link && !objfiles.empty ())
+  if (link && !objfiles.empty () && !result)
     {
       if (link_stand_alone)
         {
           if (!vars["LD_CXX"].empty ())
             {
               std::string cmd = vars["LD_CXX"] + " " + vars["CPPFLAGS"] + " "
                 + vars["ALL_CXXFLAGS"] + " " + vars["RDYNAMIC_FLAG"]
                 + " " + vars["ALL_LDFLAGS"] + " "
