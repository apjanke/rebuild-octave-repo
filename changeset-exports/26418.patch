# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546561305 28800
#      Thu Jan 03 16:21:45 2019 -0800
# Branch stable
# Node ID 7bdeaa38f2b8132ac3b0262f090b5df2551d4040
# Parent  4166610a41bc9f39e403b6ca24e58243aee7054f
graphics.cc: Fix static analyzer detected issues (bug #55347).

* graphics.cc (validate_property_name): Replace final
"else if (num_matches == 1)" with just else.
* graphics.cc (reparent): Do declaration and initialization of graphics_handle
h in one statement.
* graphics.cc (set_parent):  Do declaration and initialization of graphics_handle
new_parent in one statement.
* graphics.cc (axes::properties::update_camera): Don't initialize x_normrender
as it will be assigned later.
* graphics.cc (Fset): Eliminate unnecessary assignment "request_drawnow = true"
in final else branch.
* graphics.cc (set_property_in_handle): Rewrite function to remove intermediate
variable ret.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -112,17 +112,17 @@ validate_property_name (const std::strin
 
       sv.list_in_columns (os);
 
       std::string match_list = os.str ();
 
       error ("%s: ambiguous %s property name %s; possible matches:\n\n%s",
              who.c_str (), what.c_str (), pname.c_str (), match_list.c_str ());
     }
-  else if (num_matches == 1)
+  else  // num_matches == 1
     {
       // Exact match was handled above.
       std::string possible_match = *(matches.begin ());
 
       warning_with_id ("Octave:abbreviated-property-match",
                        "%s: allowing %s to match %s property %s",
                        who.c_str (), pname.c_str (), what.c_str (),
                        possible_match.c_str ());
@@ -2833,22 +2833,20 @@ xget (const graphics_handle& h, const ca
   return go.get (pname);
 }
 
 static graphics_handle
 reparent (const octave_value& ov, const std::string& who,
           const std::string& pname, const graphics_handle& new_parent,
           bool adopt = true)
 {
-  graphics_handle h = octave::numeric_limits<double>::NaN ();
-
   double hv = ov.xdouble_value ("%s: %s must be a graphics handle",
                                 who.c_str (), pname.c_str ());
 
-  h = gh_manager::lookup (hv);
+  graphics_handle h = gh_manager::lookup (hv);
 
   if (! h.ok ())
     error ("%s: invalid graphics handle (= %g) for %s",
            who.c_str (), hv, pname.c_str ());
 
   graphics_object go = gh_manager::get_object (h);
 
   graphics_handle parent_h = go.get_parent ();
@@ -3242,24 +3240,20 @@ base_properties::get_property_dynamic (c
 
   return it->second;
 }
 
 void
 base_properties::set_parent (const octave_value& val)
 {
   double hp = val.xdouble_value ("set: parent must be a graphics handle");
-
-  graphics_handle new_parent = octave::numeric_limits<double>::NaN ();
-
   if (hp == __myhandle__)
     error ("set: can not set object parent to be object itself");
 
-  new_parent = gh_manager::lookup (hp);
-
+  graphics_handle new_parent = gh_manager::lookup (hp);
   if (! new_parent.ok ())
     error ("set: invalid graphics handle (= %g) for parent", hp);
 
   // Remove child from current parent
   graphics_object old_parent_go;
   old_parent_go = gh_manager::get_object (get_parent ());
 
   if (old_parent_go.get_handle () != hp)
@@ -5814,17 +5808,17 @@ axes::properties::update_camera (void)
       cameraupvector = xform2cam (c_upv);
     }
   else
     c_upv = cam2xform (get_cameraupvector ().matrix_value ());
 
   Matrix x_view = xform_matrix ();
   Matrix x_projection = xform_matrix ();
   Matrix x_viewport = xform_matrix ();
-  Matrix x_normrender = xform_matrix ();
+  Matrix x_normrender;
   Matrix x_pre = xform_matrix ();
 
   x_render = xform_matrix ();
   x_render_inv = xform_matrix ();
 
   scale (x_pre, pb(0), pb(1), pb(2));
   translate (x_pre, -0.5, -0.5, -0.5);
   scale (x_pre, xd/(xlimits(1)-xlimits(0)), yd/(ylimits(1)-ylimits(0)),
@@ -11235,19 +11229,17 @@ graphics_handle
 gh_manager::do_make_graphics_handle (const std::string& go_name,
                                      const graphics_handle& p,
                                      bool integer_figure_handle,
                                      bool do_createfcn,
                                      bool do_notify_toolkit)
 {
   graphics_handle h = get_handle (integer_figure_handle);
 
-  base_graphics_object *bgo = nullptr;
-
-  bgo = make_graphics_object_from_type (go_name, h, p);
+  base_graphics_object *bgo = make_graphics_object_from_type (go_name, h, p);
 
   if (! bgo)
     error ("gh_manager::do_make_graphics_handle: invalid object type '%s'",
            go_name.c_str ());
 
   graphics_object go (bgo);
 
   handle_map[h] = go;
@@ -12226,17 +12218,16 @@ being @qcode{"portrait"}.
               std::string s = go.values_as_string ();
 
               octave_stdout << s;
             }
         }
       else
         {
           go.set (args.splice (0, 1));
-          request_drawnow = true;
         }
 
       request_drawnow = true;
     }
 
   if (request_drawnow)
     Vdrawnow_requested = true;
 
@@ -13418,27 +13409,24 @@ get_property_from_handle (double handle,
 }
 
 bool
 set_property_in_handle (double handle, const std::string& property,
                         const octave_value& arg, const std::string& func)
 {
   gh_manager::auto_lock guard;
 
-  int ret = false;
   graphics_object go = gh_manager::get_object (handle);
 
   if (! go)
     error ("%s: invalid handle (= %g)", func.c_str (), handle);
 
   go.set (caseless_str (property), arg);
 
-  ret = true;
-
-  return ret;
+  return true;
 }
 
 static bool
 compare_property_values (const octave_value& ov1, const octave_value& ov2)
 {
   octave_value_list args(2);
 
   args(0) = ov1;
