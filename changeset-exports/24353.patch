# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512077515 18000
#      Thu Nov 30 16:31:55 2017 -0500
# Node ID b153e3a70cfdadcdd6539636ee1b20e8b53a7ed9
# Parent  bff8e3884a88c6bf1b1c08998596b913caca266d
avoid shadowed variable warnings from GCC

* eigs-base.cc (EigsRealNonSymmetricMatrix,
EigsRealNonSymmetricMatrixShift, EigsRealNonSymmetricFunc):
Use ii and jj as loop counters to avoid shadowed variable warnings.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -1811,27 +1811,27 @@ EigsRealNonSymmetricMatrix (const M& m, 
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
           if (have_cplx_eig)
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (),
                              octave::numeric_limits<double>::NaN ());
             }
           else
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (), 0.);
             }
           if (note3)
             eig_vec = utsolve (bt, permB, eig_vec);
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
@@ -2193,27 +2193,27 @@ EigsRealNonSymmetricMatrixShift (const M
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
           if (have_cplx_eig)
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (),
                              octave::numeric_limits<double>::NaN ());
             }
           else
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (), 0.);
             }
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
@@ -2520,27 +2520,27 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
                         eig_vec(j,i+1) =
                           Complex (z[j+off1],-z[j+off2]);
                     }
                   i+=2;
                 }
             }
           if (have_cplx_eig)
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (),
                              octave::numeric_limits<double>::NaN ());
             }
           else
             {
-              for (F77_INT i = ip(4); i < k; i++)
-                for (F77_INT j = 0; j < n; j++)
-                  eig_vec(j,i) =
+              for (F77_INT ii = ip(4); ii < k; ii++)
+                for (F77_INT jj = 0; jj < n; jj++)
+                  eig_vec(jj,ii) =
                     Complex (octave::numeric_limits<double>::NaN (), 0.);
             }
         }
       if (k0 < k)
         {
           eig_val.resize (k0);
           eig_vec.resize (n, k0);
         }
