# HG changeset patch
# User jwe
# Date 1192035203 0
#      Wed Oct 10 16:53:23 2007 +0000
# Node ID cc049a392a97ae15bce619e20b45b73a05eb938c
# Parent  6d0d8d6215321195af6866a9d4586569266706d8
[project @ 2007-10-10 16:51:51 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-10  Ben Abbott  <bpabbott@mac.com>
+
+	* polynomial/mpoles.m: Return indx = ordr(indx), not indx(ordr).
+
 2007-10-10  John W. Eaton  <jwe@octave.org>
 
 	* general/num2str.m: Always allow for sign for automatically
 	computed format widths.
 
 2007-10-09  David Bateman  <dbateman@free.fr>
 
 	* plot/patch.m: Accept a handle as the first argument.
diff --git a/scripts/polynomial/mpoles.m b/scripts/polynomial/mpoles.m
--- a/scripts/polynomial/mpoles.m
+++ b/scripts/polynomial/mpoles.m
@@ -102,11 +102,11 @@ function [multp, indx] = mpoles (p, tol,
     endif
     k = find (dp < tol * p0);
     m = 1:numel (k);
     multp(k) = m;
     indx = [indx; k];
     n = find (multp == 0, 1);
   endwhile
   multp = multp(indx);
-  indx = indx(ordr);
+  indx = ordr(indx);
 
 endfunction
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -297,32 +297,30 @@ function [pnum, pden, multp] = rresidue 
   pden = polyreduce (pden);
 
 endfunction
 
 %!test
 %! b = [1, 1, 1];
 %! a = [1, -5, 8, -4];
 %! [r, p, k, e] = residue (b, a);
-%! assert ((abs (r - [-2; 7; 3]) < 1e-5
-%! && abs (p - [2; 2; 1]) < 1e-7
-%! && isempty (k)
-%! && e == [1; 2; 1]));
+%! assert (abs (r - [-2; 7; 3]) < 1e-5
+%!   && abs (p - [2; 2; 1]) < 1e-7
+%!   && isempty (k)
+%!   && e == [1; 2; 1]);
 %! k = [1 0];
 %! [b, a] = residue (r, p, k);
 %! assert ((abs (b - [1, -5, 9, -3, 1]) < 1e-12
-%! && abs (a - [1, -5, 8, -4]) < 1e-12));
+%!   && abs (a - [1, -5, 8, -4]) < 1e-12));
 
 %!test
 %! b = [1, 0, 1];
 %! a = [1, 0, 18, 0, 81];
 %! [r, p, k, e] = residue(b, a);
 %! r1 = [-5i; 12; +5i; 12]/54;
 %! r2 = conj(r1);
 %! p1 = [+3i; +3i; -3i; -3i];
-%! p2 = conj(p1);
-%! assert ((((abs (r - r1) < 1e-7) && (abs (p - p1) < 1e-7))
-%! ||       ((abs (r - r2) < 1e-7) && (abs (p - p2) < 1e-7)))
-%! && isempty (k)
-%! && (e == [1; 2; 1; 2]));
+%! assert (abs (r - r1) < 1e-7 && abs (p - p1) < 1e-7
+%!   && isempty (k)
+%!   && e == [1; 2; 1; 2]);
 %! [br, ar] = residue (r, p, k);
 %! assert ((abs (br - b) < 1e-12
-%! && abs (ar - a) < 1e-12));
+%!   && abs (ar - a) < 1e-12));
