# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1368391616 14400
#      Sun May 12 16:46:56 2013 -0400
# Node ID fd43631f09c216432332d82f3226754939142105
# Parent  784c765225ba7a254fb692c4e2ea67210998c4ba
Fix Qt error messages w/o QScintilla-dev installed (Bug #38878)

* libgui/src/main-window.cc
  (main_window::construct): #ifdef HAVE_QSCINTILLA around connects for editor_window debug operations.
  (main_window::construct_octave_qt_link): #ifdef HAVE_QSCINTILLA block around connects for editor_window edit_file_signal.
  (main_window::construct_file_menu): #ifdef HAVE_QSCINTILLA block around connects for editor_window request_open_file.
  (main_window::construct_new_menu): #ifdef HAVE_QSCINTILLA block around connects for editor_window request_new_XXXX slots.
  (main_window::construct_window_menu): #ifdef HAVE_QSCINTILLA block around connects for editor_window focus slot.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -827,30 +827,32 @@ main_window::construct (void)
     win_y = 720;
 
   setGeometry (0, 0, win_x, win_y);
 
   setStatusBar (status_bar);
 
   construct_octave_qt_link ();
 
+#ifdef HAVE_QSCINTILLA
   connect (this,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
            editor_window,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (this,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
            editor_window,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   connect (this,
            SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
            editor_window,
            SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
+#endif
 
   QDir curr_dir;
   set_current_working_directory (curr_dir.absolutePath ());
 
   octave_link::post_event (this, &main_window::resize_command_window_callback);
 }
 
 void
@@ -897,20 +899,22 @@ main_window::construct_octave_qt_link (v
            history_window, SLOT (clear_history (void)));
 
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
+#ifdef HAVE_QSCINTILLA
   connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
            editor_window,
            SLOT (handle_edit_file_request (const QString&)));
+#endif
 
   connect (_octave_qt_link,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
            this,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
@@ -981,18 +985,20 @@ main_window::construct_file_menu (QMenuB
   file_menu->addSeparator ();
 
   QAction *exit_action = file_menu->addAction (tr ("Exit"));
   exit_action->setShortcut (QKeySequence::Quit);
 
   connect (preferences_action, SIGNAL (triggered ()),
            this, SLOT (process_settings_dialog_request ()));
 
+#ifdef HAVE_QSCINTILLA
   connect (_open_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_open_file ()));
+#endif
 
   connect (load_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_load_workspace_request ()));
 
   connect (save_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_save_workspace_request ()));
 
   connect (exit_action, SIGNAL (triggered ()),
@@ -1009,21 +1015,23 @@ main_window::construct_new_menu (QMenu *
                            tr ("Script"));
 
   QAction *new_function_action = new_menu->addAction (tr ("Function"));
   new_function_action->setEnabled (true);
 
   QAction *new_figure_action = new_menu->addAction (tr ("Figure"));
   new_figure_action->setEnabled (true);
 
+#ifdef HAVE_QSCINTILLA
   connect (_new_script_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_new_script ()));
 
   connect (new_function_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_new_function ()));
+#endif
 
   connect (new_figure_action, SIGNAL (triggered ()),
            this, SLOT (handle_new_figure_request ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
@@ -1248,18 +1256,20 @@ main_window::construct_window_menu (QMen
            workspace_window, SLOT (focus ()));
 
   connect (history_action, SIGNAL (triggered ()),
            history_window, SLOT (focus ()));
 
   connect (file_browser_action, SIGNAL (triggered ()),
            file_browser_window, SLOT (focus ()));
 
+#ifdef HAVE_QSCINTILLA
   connect (editor_action, SIGNAL (triggered ()),
            editor_window, SLOT (focus ()));
+#endif
 
   connect (documentation_action, SIGNAL (triggered ()),
            doc_browser_window, SLOT (focus ()));
 
   connect (reset_windows_action, SIGNAL (triggered ()),
            this, SLOT (reset_windows ()));
 }
 
