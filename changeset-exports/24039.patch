# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1505388164 -7200
#      Thu Sep 14 13:22:44 2017 +0200
# Node ID 530d5e9202eea8760bd9b94df76a6a14494608c4
# Parent  bb5c1e76703921eadbd7c2fecd8906c95100646c
doc: Improve Doxygen documentation.

* libinters/octave-value/ov-base.h(btyp_mixed_numeric): Make comment a
Doxygen comment.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -90,26 +90,30 @@ inline bool btyp_isinteger (builtin_type
 { return btyp >= btyp_int8 && btyp <= btyp_uint64; }
 
 inline bool btyp_isfloat (builtin_type_t btyp)
 { return btyp <= btyp_float_complex; }
 
 inline bool btyp_isarray (builtin_type_t btyp)
 { return btyp <= btyp_char; }
 
-// Compute numeric type for a possible mixed-type operation, using these rules:
-// bool -> double
-// single + double -> single
-// real + complex -> complex
-// integer + real -> integer
-// uint + uint -> uint (the bigger one)
-// sint + sint -> sint (the bigger one)
-//
-// failing otherwise.
-
+/*!
+ * \brief Determine the resulting type for a possible mixed-type operation.
+ *
+ * Rules for the resulting type:
+ *   - bool -> double
+ *   - single + double -> single
+ *   - real + complex -> complex
+ *   - integer + real -> integer
+ *   - uint + uint -> uint (the bigger one)
+ *   - sint + sint -> sint (the bigger one)
+ *
+ * \return The resulting type or "unknown type", if the resulting type cannot
+ *         be determined.
+ */
 extern OCTINTERP_API
 builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y);
 
 template <typename T>
 struct class_to_btyp
 {
   static const builtin_type_t btyp = btyp_unknown;
 };
