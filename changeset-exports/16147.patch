# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362004092 18000
#      Wed Feb 27 17:28:12 2013 -0500
# Node ID ed8ce5da525f31001fbda40b4be72c7c96facff3
# Parent  b6050fc0a2d91bb755a24fabf9113359f8a0fd6c
don't access lexer values directly when grabbing help text from .m files.

* oct-parse.yy (text_getc): Don't update line number.
(stdio_stream_reader::line_num, stdio_stream_reader:column_num):
New data members.
(stdio_stream_reader::stdio_stream_reader): New args for line and
column numbers.
(stdio_stream_reader::getc): Set line and column info here.
(stdio_stream_reader:ungetc): Set local line number here.
(gobble_leading_white_space): New args, line_num and column_num.  Pass
them to stdio_stream_reader constructor.
(gobble_leading_white_space): Provide additional function without line
and column number arguments.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3149,40 +3149,70 @@ text_getc (FILE *f)
 
       if (c != '\n')
         {
           ungetc (c, f);
           c = '\n';
         }
     }
 
-  if (c == '\n')
-    curr_lexer->input_line_number++;
-
   return c;
 }
 
 class
 stdio_stream_reader : public stream_reader
 {
 public:
-  stdio_stream_reader (FILE *f_arg) : stream_reader (), f (f_arg) { }
-
-  int getc (void) { return ::text_getc (f); }
+
+  stdio_stream_reader (FILE *f_arg, int& l, int& c)
+    : stream_reader (), f (f_arg), line_num (l), column_num (c)
+  { }
+
+  int getc (void)
+  {
+    char c = ::text_getc (f);
+
+    if (c == '\n')
+      {
+        line_num++;
+        column_num = 0;
+      }
+    else
+      {
+        // FIXME -- try to be smarter about tabs?
+        column_num++;
+      }
+        
+    return c;
+  }
+
   int ungetc (int c)
   {
     if (c == '\n')
-      curr_lexer->input_line_number--;
+      {   
+        line_num--;
+        column_num = 0;
+      }
+    else
+      {
+        // FIXME -- try to be smarter about tabs?
+        column_num--;
+      }
 
     return ::ungetc (c, f);
   }
 
 private:
+
   FILE *f;
 
+  int& line_num;
+
+  int& column_num;
+
   // No copying!
 
   stdio_stream_reader (const  stdio_stream_reader&);
 
   stdio_stream_reader & operator = (const  stdio_stream_reader&);
 };
 
 static bool
@@ -3191,21 +3221,17 @@ skip_white_space (stream_reader& reader)
   int c = 0;
 
   while ((c = reader.getc ()) != EOF)
     {
       switch (c)
         {
         case ' ':
         case '\t':
-          curr_lexer->current_input_column++;
-          break;
-
         case '\n':
-          curr_lexer->current_input_column = 1;
           break;
 
         default:
           reader.ungetc (c);
           goto done;
         }
     }
 
@@ -3229,28 +3255,29 @@ looking_at_classdef_keyword (FILE *ffile
     status = true;
 
   gnulib::fseek (ffile, pos, SEEK_SET);
 
   return status;
  }
 
 static std::string
-gobble_leading_white_space (FILE *ffile, bool& eof)
+gobble_leading_white_space (FILE *ffile, bool& eof, int& line_num,
+                            int& column_num)
 {
   std::string help_txt;
 
   eof = false;
 
   // TRUE means we have already cached the help text.
   bool have_help_text = false;
 
   std::string txt;
 
-  stdio_stream_reader stdio_reader (ffile);
+  stdio_stream_reader stdio_reader (ffile, line_num, column_num);
 
   while (true)
     {
       eof = skip_white_space (stdio_reader);
 
       if (eof)
         break;
 
@@ -3269,16 +3296,25 @@ gobble_leading_white_space (FILE *ffile,
 
       if (eof)
         break;
     }
 
   return help_txt;
 }
 
+static std::string
+gobble_leading_white_space (FILE *ffile, bool& eof)
+{
+  int line_num = 1;
+  int column_num = 1;
+
+  return gobble_leading_white_space (ffile, eof, line_num, column_num);
+}
+
 static bool
 looking_at_function_keyword (FILE *ffile)
 {
   bool status = false;
 
   long pos = gnulib::ftell (ffile);
 
   char buf [10];
