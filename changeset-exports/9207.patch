# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242575691 -7200
#      Sun May 17 17:54:51 2009 +0200
# Node ID 25f50d2d76b3e4b9a8b371546c711134fcd9a54b
# Parent  5f36c6c9be13d6904662ce217a3cba2ea3bb3bf1
improve TR updating strategy for fminunc and fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-05-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fminunc.m: Improve TR updating strategy.
+	* optimization/fsolve.m: Ditto.
+
 2009-05-15  John W. Eaton  <jwe@octave.org>
 
 	* general/nargchk.m: Don't generate error if output is struct.
 	Uncomment some additional tests.
 	From Alois Schloegl <alois.schloegl@tugraz.at>
 
 2009-05-14  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -194,16 +194,18 @@ function [x, fval, info, output, grad, h
     ## of perturbations of x, then norm (hesr*e) <= eps*xn, i.e. by
     ## tolf ~ eps we demand as much accuracy as we can expect.
     if (norm (grad) <= tolf*n*xn)
       info = 1;
       break;
     endif
 
     suc = false;
+    decfac = 0.5;
+
     ## Inner loop.
     while (! suc && niter <= maxiter && nfev < maxfev && ! info)
 
       s = - __dogleg__ (hesr, grad, dg, delta, true);
 
       sn = norm (dg .* s);
       if (niter == 1)
         delta = min (delta, sn);
@@ -226,29 +228,31 @@ function [x, fval, info, output, grad, h
         prered = -t/(abs (fval) + abs (fval + t));
         ratio = actred / prered;
       else
         prered = 0;
         ratio = 0;
       endif
 
       ## Update delta.
-      if (ratio < min(max(0.1, lastratio), 0.9))
-        delta *= 0.5;
+      if (ratio < min(max(0.1, 0.8*lastratio), 0.9))
+        delta *= decfac;
+        decfac ^= 1.4142;
         if (delta <= 1e1*macheps*xn)
           ## Trust region became uselessly small.
           info = -3;
           break;
         endif
       else
         lastratio = ratio;
+        decfac = 0.5;
         if (abs (1-ratio) <= 0.1)
-          delta = 2*sn;
+          delta = 1.4142*sn;
         elseif (ratio >= 0.5)
-          delta = max (delta, 2*sn);
+          delta = max (delta, 1.4142*sn);
         endif
       endif
 
       if (ratio >= 1e-4)
         ## Successful iteration.
         x += s;
         xn = norm (dg .* x);
         fval = fval1;
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -251,16 +251,18 @@ function [x, fvec, info, output, fjac] =
     ## It also seems that in the case of fast (and inhomogeneously) changing
     ## jacobian, the Broyden updates are of little use, so maybe we could
     ## skip them if a big disproportional change is expected. The question is,
     ## of course, how to define the above terms :)
 
     lastratio = 0;
     nfail = 0;
     nsuc = 0;
+    decfac = 0.5;
+
     ## Inner loop.
     while (niter <= maxiter && nfev < maxfev && ! info)
 
       ## Get trust-region model (dogleg) minimizer.
       if (useqr)
         qtf = q'*fvec;
         s = - __dogleg__ (r, qtf, dg, delta);
         w = qtf + r * s;
@@ -291,33 +293,35 @@ function [x, fvec, info, output, fjac] =
         prered = 1 - (t/fn)^2;
         ratio = actred / prered;
       else
         prered = 0;
         ratio = 0;
       endif
 
       ## Update delta.
-      if (ratio < min(max(0.1, lastratio), 0.9))
+      if (ratio < min(max(0.1, 0.8*lastratio), 0.9))
         nsuc = 0;
         nfail ++;
-        delta *= 0.5;
+        delta *= decfac;
+        decfac ^= 1.4142;
         if (delta <= 1e1*macheps*xn)
           ## Trust region became uselessly small.
           info = -3;
           break;
         endif
       else
         lastratio = ratio;
+        decfac = 0.5;
         nfail = 0;
         nsuc ++;
         if (abs (1-ratio) <= 0.1)
-          delta = 2*sn;
+          delta = 1.4142*sn;
         elseif (ratio >= 0.5 || nsuc > 1)
-          delta = max (delta, 2*sn);
+          delta = max (delta, 1.4142*sn);
         endif
       endif
 
       if (ratio >= 1e-4)
         ## Successful iteration.
         x += s;
         xn = norm (dg .* x);
         fvec = fvec1;
