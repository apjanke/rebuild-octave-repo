# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1399233383 -7200
#      Sun May 04 21:56:23 2014 +0200
# Node ID 868dcab453bd7fc2b781773883ee2dec84f849ef
# Parent  5baada25d5a270e91b7d083221e29729210ba55f
Distinguish axes when checking for recursion in axes limits updates (bug #40005).

* graphics.cc: change static variables "updating_aspectratios" and "updating_axis_limits" type to std::set<double> in order to store all currently updating axes.
* graphics.cc (axes::properties::update_aspectratios, axes::update_axis_limits): update to use the new types and be able to distinguish what axes is being updated.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -5667,22 +5667,23 @@ max_axes_scale (double& s, Matrix& limit
           limits(1) = maxval;
           s = xmax(s, (maxval - minval) / (pbfactor * dafactor));
         }
     }
   else
     s = xmax(s, (limits(1) - limits(0)) / (pbfactor * dafactor));
 }
 
-static bool updating_aspectratios = false;
+static std::set<double> updating_aspectratios;
 
 void
 axes::properties::update_aspectratios (void)
 {
-  if (updating_aspectratios)
+  if (updating_aspectratios.find (get___myhandle__ ().value ()) !=
+      updating_aspectratios.end ())
     return;
 
   Matrix xlimits = get_xlim ().matrix_value ();
   Matrix ylimits = get_ylim ().matrix_value ();
   Matrix zlimits = get_zlim ().matrix_value ();
 
   double dx = (xlimits(1)-xlimits(0));
   double dy = (ylimits(1)-ylimits(0));
@@ -5738,17 +5739,17 @@ axes::properties::update_aspectratios (v
         }
 
       if (modified_limits)
         {
 
           unwind_protect frame;
           frame.protect_var (updating_aspectratios);
 
-          updating_aspectratios = true;
+          updating_aspectratios.insert (get___myhandle__ ().value ());
 
           dx = pba(0) *da(0);
           dy = pba(1) *da(1);
           dz = pba(2) *da(2);
           if (xisinf (s))
             s = 1 / xmin (xmin (dx, dy), dz);
 
           if (xlimmode_is ("auto"))
@@ -6686,23 +6687,24 @@ get_children_limits (double& min_val, do
         }
       break;
 
     default:
       break;
     }
 }
 
-static bool updating_axis_limits = false;
+static std::set<double> updating_axis_limits;
 
 void
 axes::update_axis_limits (const std::string& axis_type,
                           const graphics_handle& h)
 {
-  if (updating_axis_limits)
+  if (updating_axis_limits.find (get_handle ().value ()) != 
+      updating_axis_limits.end ())
     return;
 
   Matrix kids = Matrix (1, 1, h.value ());
 
   double min_val = octave_Inf;
   double max_val = -octave_Inf;
   double min_pos = octave_Inf;
   double max_neg = -octave_Inf;
@@ -6851,17 +6853,17 @@ axes::update_axis_limits (const std::str
 
     }
 
 #undef FIX_LIMITS
 
   unwind_protect frame;
   frame.protect_var (updating_axis_limits);
 
-  updating_axis_limits = true;
+  updating_axis_limits.insert (get_handle ().value ());
 
   switch (update_type)
     {
     case 'x':
       xproperties.set_xlim (limits);
       xproperties.set_xlimmode ("auto");
       xproperties.update_xlim ();
       break;
@@ -6894,17 +6896,20 @@ axes::update_axis_limits (const std::str
 
   xproperties.update_transform ();
 
 }
 
 void
 axes::update_axis_limits (const std::string& axis_type)
 {
-  if (updating_axis_limits || updating_aspectratios)
+  if ((updating_axis_limits.find (get_handle ().value ()) != 
+       updating_axis_limits.end ()) ||
+      (updating_aspectratios.find (get_handle ().value ()) !=
+       updating_aspectratios.end ()))
     return;
 
   Matrix kids = xproperties.get_children ();
 
   double min_val = octave_Inf;
   double max_val = -octave_Inf;
   double min_pos = octave_Inf;
   double max_neg = -octave_Inf;
@@ -7010,17 +7015,17 @@ axes::update_axis_limits (const std::str
           update_type = 'a';
         }
 
     }
 
   unwind_protect frame;
   frame.protect_var (updating_axis_limits);
 
-  updating_axis_limits = true;
+  updating_axis_limits.insert (get_handle ().value ());
 
   switch (update_type)
     {
     case 'x':
       xproperties.set_xlim (limits);
       xproperties.set_xlimmode ("auto");
       xproperties.update_xlim ();
       break;
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -305,46 +305,16 @@ function update_colorbar_clim (hax, d, h
     hiax = get (hi, "parent");
     if (vert)
       set (hi, "ydata", [cmin, cmax]);
       set (hiax, "ylim", cext);
     else
       set (hi, "xdata", [cmin, cmax]);
       set (hiax, "xlim", cext);
     endif
-
-    ##########################################################################
-    ## FIXME: Setting xlim or ylim from within a listener callback
-    ##        causes the axis to change size rather than change limits.
-    ##        Workaround it by jiggling the position property which forces
-    ##        a redraw of the axis object.
-    ##
-    ## To see the problem:
-    ## Comment out the 5 lines below the comment box which jiggle position
-    ## 
-    ## Now run the the following code:
-    ##   clear -f
-    ##   clf; contour (peaks ()); colorbar (); 
-    ##   caxis ([0 5]);
-    ## Up to this point everything is fine.
-    ##   caxis ("auto");
-    ## Now colorbar will be badly sized.
-    ##
-    ## The problem line is
-    ##   set (hiax, "ylim", cext) 
-    ##
-    ## The issue seems to be that the axes object is redrawn to the wrong size
-    ## and then is marked as clean so that further internal calls which set the
-    ## correct size do not cause the object to be refreshed.
-    ##########################################################################
-    pos = get (hiax, "position");
-    pos(1) += eps;
-    set (hiax, "position", pos);
-    pos(1) -= eps;
-    set (hiax, "position", pos);
   endif
 endfunction
 
 function update_colorbar_cmap (hf, d, hi, vert, init_sz)
   persistent sz = init_sz;
 
   if (ishandle (hf) && strcmp (get (hf, "type"), "figure")
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off")))
