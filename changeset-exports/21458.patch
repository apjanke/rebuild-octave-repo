# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458186775 25200
#      Wed Mar 16 20:52:55 2016 -0700
# Node ID 348e335c49dd7ae295f9feeb372e3aabfba2ce93
# Parent  05ffef4ebf62be944d796305eb4b37752a2998e4
Fix failing BIST tests on big-endian systems

* data.cc: Fix base64_encode test relying on little-endian byte order.
* io.tst: Fix fread/fwrite tests relying on little-endian byte order.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -7814,17 +7814,25 @@ Encode a double matrix or array @var{x} 
           ::free (out);
         }
     }
 
   return retval;
 }
 
 /*
-%!assert (base64_encode (single (pi)), "2w9JQA==")
+%!test
+%! ## FIXME: better test for endianness?
+%! if (bitunpack (uint16 (1))(1) == 1)
+%!   expected = "2w9JQA==";
+%! else
+%!   expected = "QEkP2w==";
+%! endif
+%! assert (base64_encode (single (pi)), expected);
+
 %!assert (base64_encode (uint8 ([0 0 0])), "AAAA")
 %!assert (base64_encode (uint16 ([0 0 0])), "AAAAAAAA")
 %!assert (base64_encode (uint32 ([0 0 0])), "AAAAAAAAAAAAAAAA")
 %!assert (base64_encode (uint64 ([0 0 0])), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
 %!assert (base64_encode (uint8 ([255 255 255])), "////")
 
 %!error base64_encode ()
 %!error base64_encode (1,2)
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -570,32 +570,42 @@
 %!error fseek ("foo", 0, SEEK_SET)
 
 %!error <Invalid call to frewind> frewind ()
 %!error <Invalid call to frewind> frewind (1, 2)
 %!error frewind ("foo")
 
 %!test
 %! id = tmpfile ();
+%! ## FIXME: better test for endianness?
+%! big_endian = (bitunpack (uint16 (1))(1) == 0);
 %! fwrite (id, "abcdefg");
 %! frewind (id);
 %! [data, count] = fread (id);
 %! assert (data, [97; 98; 99; 100; 101; 102; 103]);
 %! assert (count, 7);
 %! frewind (id);
 %! [data, count] = fread (id, 'int16');
-%! assert (data, [25185; 25699; 26213]);
+%! expected = [25185; 25699; 26213];
+%! if (big_endian)
+%!   expected = double (swapbytes (int16 (expected)));
+%! endif
+%! assert (data, expected);
 %! assert (count, 3);
 %! frewind (id);
 %! [data, count] = fread (id, [10, 2], 'int16');
-%! assert (data, [25185; 25699; 26213]);
+%! assert (data, expected);
 %! assert (count, 3);
 %! frewind (id);
 %! [data, count] = fread (id, [2, 10], 'int16');
-%! assert (data, [25185, 26213; 25699, 0]);
+%! expected = [25185, 26213; 25699, 0];
+%! if (big_endian)
+%!   expected = double (swapbytes (int16 (expected)));
+%! endif
+%! assert (data, expected);
 %! assert (count, 3);
 %! fclose (id);
 
 %!test
 %! id = tmpfile ();
 %! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, inf, "2*uint8", 2);
@@ -618,29 +628,41 @@
 %! assert (count, 2);
 %! [data, count] = fread (id, 3, "2*uint8", 3);
 %! assert (data, []);
 %! assert (count, 0);
 %! fclose (id);
 
 %!test
 %! id = tmpfile ();
+%! ## FIXME: better test for endianness?
+%! big_endian = (bitunpack (uint16 (1))(1) == 0);
 %! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, [1, Inf], "4*uint16", 3);
-%! assert (data, [256, 770, 1284, 1798, 3083, 3597]);
+%! expected = [256, 770, 1284, 1798, 3083, 3597];
+%! if (big_endian)
+%!   expected = double (swapbytes (uint16 (expected)));
+%! endif
+%! assert (data, expected);
 %! assert (count, 6);
 %! fclose (id);
 
 %!test
 %! id = tmpfile ();
+%! ## FIXME: better test for endianness?
+%! big_endian = (bitunpack (uint16 (1))(1) == 0);
 %! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, [3, Inf], "4*uint16", 3);
-%! assert (data, [256, 1798; 770, 3083; 1284, 3597]);
+%! expected = [256, 1798; 770, 3083; 1284, 3597];
+%! if (big_endian)
+%!   expected = double (swapbytes (uint16 (expected)));
+%! endif
+%! assert (data, expected);
 %! assert (count, 6);
 %! fclose (id);
 
 %!test
 %! id = tmpfile ();
 %! fwrite (id, "abcd");
 %! frewind (id);
 %! [data, count] = fread (id, [2, 3], "char");
