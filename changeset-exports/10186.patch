# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264163444 18000
#      Fri Jan 22 07:30:44 2010 -0500
# Node ID 095a1e670e68d0496d751fcfafcd39419b336c33
# Parent  455759a5fcbe2cd426d3c47623954596d44ee866
make dbstep work with keyboard function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2010-01-22  John W. Eaton  <jwe@octave.org>
+
+	* debug.cc (Fdbcont, Fdbquit): Call reset_debug_state.
+	(Fdbquit): Set Vdebugging to false.
+	* input.cc (Fkeyboard): Set tree_evaluator::debug_state to true.
+	Set tree_evaluator::current_frame to the initial stack frame
+	that is active for debugging commands.
+	* pt-eval.cc (tree_evaluator::reset_debug_state): New function.
+	* pt-eval.h (tree_evaluator::reset_debug_state): Provide decl.
+	* toplev.cc (main_loop): Call tree_evaluator::reset_debug_state
+	if at top level.
+
 2010-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fnorm): Don't special-case empty matrix.
 	* DLD-FUNCTIONS/svd.cc (Fsvd): Fix empty matrix case. Add tests.
 
 2010-01-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-builtin.cc (octave_builtin::do_multi_index_op): Partially undo
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -1070,17 +1070,17 @@ In debugging mode, quit debugging mode a
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
 	{
 	  Vdebugging = false;
 
-	  tree_evaluator::dbstep_flag = 0;
+          tree_evaluator::reset_debug_state ();
 	}
       else
 	print_usage ();
     }
   else
     error ("dbcont: can only be called in debug mode");
 
   return octave_value_list ();
@@ -1092,17 +1092,19 @@ DEFUN (dbquit, args, ,
 In debugging mode, quit debugging mode and return to the top level.\n\
 @seealso{dbstep, dbcont}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
 	{
-	  tree_evaluator::dbstep_flag = 0;
+	  Vdebugging = false;
+
+          tree_evaluator::reset_debug_state ();
 
 	  octave_throw_interrupt_exception ();
 	}
       else
 	print_usage ();
     }
   else
     error ("dbquit: can only be called in debug mode");
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1006,22 +1006,27 @@ If @code{keyboard} is invoked without ar
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0 || nargin == 1)
     {
       unwind_protect frame;
+
       frame.add_fcn (octave_call_stack::restore_frame, 
                      octave_call_stack::current_frame ());
 
       // Skip the frame assigned to the keyboard function.
       octave_call_stack::goto_frame_relative (0);
 
+      tree_evaluator::debug_mode = true;
+
+      tree_evaluator::current_frame = octave_call_stack::current_frame ();
+
       do_keyboard (args);
     }
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 
 #include <cctype>
 
 #include <iostream>
 
 #include <fstream>
 #include <typeinfo>
 
+#include "debug.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "variables.h"
 #include "pt-all.h"
@@ -101,16 +102,24 @@ tree_evaluator::visit_colon_expression (
 
 void
 tree_evaluator::visit_continue_command (tree_continue_command&)
 {
   if (! error_state)
     tree_continue_command::continuing = 1;
 }
 
+void
+tree_evaluator::reset_debug_state (void)
+{
+  debug_mode = bp_table::have_breakpoints ();
+
+  dbstep_flag = 0;
+}
+
 static inline void
 do_global_init (tree_decl_elt& elt)
 {
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->mark_global ();
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -129,16 +129,18 @@ public:
   void do_unwind_protect_cleanup_code (tree_statement_list *list);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 
+  static void reset_debug_state (void);
+
   // If > 0, stop executing at the (N-1)th stopping point, counting
   //         from the the current execution point in the current frame.
   //
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -551,16 +551,19 @@ main_loop (void)
       try
 	{
 	  unwind_protect frame;
 
 	  reset_error_handler ();
 
 	  reset_parser ();
 
+          if (symbol_table::at_top_level ())
+            tree_evaluator::reset_debug_state ();
+
 	  // Do this with an unwind-protect cleanup function so that
 	  // the forced variables will be unmarked in the event of an
 	  // interrupt.
 	  symbol_table::scope_id scope = symbol_table::top_scope ();
 	  frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
