# HG changeset patch
# User Rik <rik@octave.org>
# Date 1516032512 28800
#      Mon Jan 15 08:08:32 2018 -0800
# Node ID 845ec6f4fb968dbc9f8aae7547a05bcd64783c06
# Parent  e578e68ba1e03c1bea42108c82c63f61f48d0586
Fix incorrect regexprep on ARM platforms (bug #52810).

* lo-regexp.cc (regexp::replace): Extend static_cast<size_t> to surround entire
length calculations of (end - start + 1).

diff --git a/liboctave/util/lo-regexp.cc b/liboctave/util/lo-regexp.cc
--- a/liboctave/util/lo-regexp.cc
+++ b/liboctave/util/lo-regexp.cc
@@ -225,17 +225,18 @@ namespace octave
     std::string buf_str = buf.str ();
 
     int pcre_options
       = (  (options.case_insensitive () ? PCRE_CASELESS : 0)
          | (options.dotexceptnewline () ? 0 : PCRE_DOTALL)
          | (options.lineanchors () ? PCRE_MULTILINE : 0)
          | (options.freespacing () ? PCRE_EXTENDED : 0));
 
-    data = pcre_compile (buf_str.c_str (), pcre_options, &err, &erroffset, nullptr);
+    data = pcre_compile (buf_str.c_str (), pcre_options,
+                         &err, &erroffset, nullptr);
 
     if (! data)
       (*current_liboctave_error_handler)
         ("%s: %s at position %d of expression", who.c_str (), err, erroffset);
   }
 
   regexp::match_data
   regexp::match (const std::string& buffer)
@@ -516,20 +517,21 @@ namespace octave
             double start = p->start ();
             double end = p->end ();
 
             const Matrix pairs (p->token_extents ());
             size_t pairlen = 0;
             for (int j = 0; j < num_tokens; j++)
               {
                 if (tokens[j].num == 0)
-                  pairlen += static_cast<size_t> (end - start) + 1;
+                  pairlen += static_cast<size_t> (end - start + 1);
                 else if (tokens[j].num <= pairs.rows ())
                   pairlen += static_cast<size_t> (pairs(tokens[j].num-1,1)
-                                                  - pairs(tokens[j].num-1,0)) + 1;
+                                                  - pairs(tokens[j].num-1,0)
+                                                  + 1);
               }
             delta += (static_cast<int> (replen + pairlen)
                       - static_cast<int> (end - start + 1));
             p++;
           }
 
         // Build replacement string
         rep.reserve (buffer.size () + delta);
@@ -538,39 +540,39 @@ namespace octave
         for (size_t i = 0; i < num_matches; i++)
           {
             octave_quit ();
 
             double start = p->start ();
             double end = p->end ();
 
             const Matrix pairs (p->token_extents ());
-            rep.append (&buffer[from], static_cast<size_t> (start - 1) - from);
+            rep.append (&buffer[from], static_cast<size_t> (start - 1 - from));
             from = static_cast<size_t> (end);
 
             size_t cur_pos = 0;
 
             for (int j = 0; j < num_tokens; j++)
               {
                 rep.append (&repstr[cur_pos], (tokens[j].pos) - cur_pos);
                 cur_pos = tokens[j].pos+2;
 
                 int k = tokens[j].num;
                 if (k == 0)
                   {
                     // replace with entire match
                     rep.append (&buffer[static_cast<size_t> (end - 1)],
-                                static_cast<size_t> (end - start) + 1);
+                                static_cast<size_t> (end - start + 1));
                   }
                 else if (k <= pairs.rows ())
                   {
                     // replace with group capture
                     rep.append (&buffer[static_cast<size_t> (pairs(k-1,0)-1)],
                                 static_cast<size_t> (pairs(k-1,1)
-                                                     - pairs(k-1,0)) + 1);
+                                                     - pairs(k-1,0) + 1));
                   }
                 else
                   {
                     // replace with nothing
                   }
               }
             if (cur_pos < repstr.size ())
               rep.append (&repstr[cur_pos], repstr.size () - cur_pos);
@@ -598,17 +600,17 @@ namespace octave
         rep.reserve (buffer.size () + delta);
         size_t from = 0;
         p = rx_lst.begin ();
         for (size_t i = 0; i < num_matches; i++)
           {
             octave_quit ();
 
             rep.append (&buffer[from],
-                        static_cast<size_t> (p->start () - 1) - from);
+                        static_cast<size_t> (p->start () - 1 - from));
             from = static_cast<size_t> (p->end ());
             rep.append (repstr);
             p++;
           }
         rep.append (&buffer[from], buffer.size () - from);
       }
 
     retval = rep;
