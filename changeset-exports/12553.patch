# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1301580813 25200
#      Thu Mar 31 07:13:33 2011 -0700
# Node ID 7c915d013b9c75dc183d79b3534bccd8ede63a80
# Parent  1cfa3d9adf0ab3f4e264cf0a8e2ed874c8bdf8a2
quadcc: Add reference to original paper in docstring.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2011-03-31  Rik  <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/quadcc.cc: Add reference to original paper in docstring.
+
 2011-03-30  Jordi Guti√©rrez Hermoso  <jordigh@gmail.com>
 
 	* file-io.cc: Document the "all" parameter to fclose.
 
 2011-03-29  Ben Abbott  <bpabbott@mac.com>
 
 	* graphics.cc: Prevent ticks from being cropped by round-off errors
 	when limmode == auto (bug #32701).
diff --git a/src/DLD-FUNCTIONS/quadcc.cc b/src/DLD-FUNCTIONS/quadcc.cc
--- a/src/DLD-FUNCTIONS/quadcc.cc
+++ b/src/DLD-FUNCTIONS/quadcc.cc
@@ -1476,24 +1476,23 @@ downdate (double *c, int n, int d, int *
 
 /* The actual integration routine.
     */
 
 DEFUN_DLD (quadcc, args, nargout,
 "-*- texinfo -*-\n\
 @deftypefn  {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
-Numerically evaluates an integral using the doubly-adaptive\n\
-quadrature described by P. Gonnet in @cite{Increasing the\n\
-Reliability of Adaptive Quadrature Using Explicit Interpolants},\n\
-ACM Transactions on Mathematical Software, in Press, 2010.\n\
+Numerically evaluate an integral using the doubly-adaptive\n\
+Clenshaw-Curtis quadrature described by P. Gonnet in @cite{Increasing the\n\
+Reliability of Adaptive Quadrature Using Explicit Interpolants}.\n\
 The algorithm uses Clenshaw-Curtis quadrature rules of increasing\n\
 degree in each interval and bisects the interval if either the\n\
 function does not appear to be smooth or a rule of maximum\n\
-degree has been reached. The error estimate is computed from the\n\
+degree has been reached.  The error estimate is computed from the\n\
 L2-norm of the difference between two successive interpolations\n\
 of the integrand over the nodes of the respective quadrature rules.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
    int = quadcc (f, a, b, 1.0e-6);\n\
 @end example\n\
@@ -1528,26 +1527,29 @@ If the adaptive integration did not conv
 therefore recommended to verify this value for difficult\n\
 integrands.\n\
 \n\
 If either @var{a} or @var{b} are @code{+/-Inf}, @code{quadcc}\n\
 integrates @var{f} by substituting the variable of integration\n\
 with @code{x=tan(pi/2*u)}.\n\
 \n\
 @code{quadcc} is capable of dealing with non-numeric\n\
-values of the integrand such as @code{NaN}, @code{Inf}\n\
-or @code{-Inf}, as in the above example at x=0.\n\
+values of the integrand such as @code{NaN} or @code{Inf}\n\
+, as in the above example at x=0.\n\
 If the integral diverges and @code{quadcc} detects this, \n\
 a warning is issued and @code{Inf} or @code{-Inf} is returned.\n\
 \n\
 Note that @code{quadcc} is a general purpose quadrature algorithm\n\
 and as such may be less efficient for smooth or otherwise\n\
 well-behaved integrand than other methods such as\n\
 @code{quadgk} or @code{trapz}.\n\
 \n\
+Reference: P. Gonnet, @cite{Increasing the Reliability of Adaptive\n\
+Quadrature Using Explicit Interpolants}, ACM Transactions on\n\
+Mathematical Software, Vol. 37, Issue 3, Article No. 3, 2010.\n\
 @seealso{quad, quadv, quadl, quadgk, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
 
   /* Some constants that we will need. */
   static const int n[4] = { 4, 8, 16, 32 };
   static const int skip[4] = { 8, 4, 2, 1 };
   static const int idx[4] = { 0, 5, 14, 31 };
