# HG changeset patch
# User jwe
# Date 947218746 0
#      Fri Jan 07 04:19:06 2000 +0000
# Node ID ee5f222025c38c85e7b3017411c699ff039cc00f
# Parent  010909651e8458df74fa4f8220371166b732b1fe
[project @ 2000-01-07 04:19:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2000-01-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-stream.cc (do_scanf): Do the right thing again for character
+	conversions.
+
 	* help.cc (display_help_text): Also strip out leading spaces
 	before Texinfo @-commands before sending doc string to makeinfo.
 	(display_help_text): Improve format of `See also' string.
 
 2000-01-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* help.cc (display_help_text): Pass a definition for @seealso
 	through the filter.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -951,16 +951,56 @@ template void
 do_scanf_conv (istream&, const char*, float*, Matrix&, double*, int&,
 	       int&, int, int, bool);
 #endif
 
 template void
 do_scanf_conv (istream&, const char*, double*, Matrix&, double*, int&,
 	       int&, int, int, bool);
 
+#define FINISH_CHARACTER_CONVERSION() \
+  do \
+    { \
+      width = strlen (tmp); \
+ \
+      if (is) \
+	{ \
+	  int i = 0; \
+ \
+	  if (! discard) \
+	    { \
+	      conversion_count++; \
+ \
+	      while (i < width && tmp[i] != '\0') \
+		{ \
+		  if (data_index == max_size) \
+		    { \
+		      max_size *= 2; \
+ \
+		      if (nr > 0) \
+			mval.resize (nr, max_size / nr, 0.0); \
+		      else \
+			{ \
+			  if (all_char_conv && one_elt_size_spec) \
+			    mval.resize (1, max_size, 0.0); \
+			  else \
+			    mval.resize (max_size, 1, 0.0); \
+			} \
+ \
+		      data = mval.fortran_vec (); \
+		    } \
+ \
+		  data[data_index++] = tmp[i++]; \
+		} \
+	    } \
+	} \
+ \
+      delete [] tmp; \
+    } \
+  while (0)
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, bool one_elt_size_spec,
 			      int& conversion_count)
 {
   conversion_count = 0;
 
@@ -987,30 +1027,28 @@ octave_base_stream::do_scanf (scanf_form
 
   int final_nr = 0;
   int final_nc = 0;
 
   if (all_char_conv)
     {
       if (one_elt_size_spec)
 	{
-	  mval.resize (1, 512, 0.0);
+	  max_size = 512;
+	  mval.resize (1, max_size, 0.0);
 	  data = mval.fortran_vec ();
-	  max_size = 512;
-	  
+
 	  if (nr > 0)
 	    max_conv = nr;
 	}
       else if (nr > 0 && nc > 0)
 	{
-	  mval.resize (nr, 32, 0.0);
+	  mval.resize (nr, nc, 0.0);
 	  data = mval.fortran_vec ();
-	  max_size = nr * 32;
-
-	  max_conv = nr * nc;
+	  max_size = max_conv = nr * nc;
 	}
     }
   else if (nr > 0)
     {
       if (nc > 0)
 	{
 	  mval.resize (nr, nc, 0.0);
 	  data = mval.fortran_vec ();
@@ -1056,28 +1094,29 @@ octave_base_stream::do_scanf (scanf_form
 		      final_nr = nr;
 		      final_nc = (data_index - 1) / nr + 1;
 		    }
 
 		  break;
 		}
 	      else if (data_index == max_size)
 		{
+		  max_size *= 2;
+
 		  if (nr > 0)
-		    {
-		      max_size *= 2;
-		      mval.resize (nr, max_size / nr, 0.0);
-		      data = mval.fortran_vec ();
-		    }
+		    mval.resize (nr, max_size / nr, 0.0);
 		  else
 		    {
-		      max_size *= 2;
-		      mval.resize (max_size, 1, 0.0);
-		      data = mval.fortran_vec ();
+		      if (all_char_conv && one_elt_size_spec)
+			mval.resize (1, max_size, 0.0);
+		      else
+			mval.resize (max_size, 1, 0.0);
 		    }
+
+		  data = mval.fortran_vec ();
 		}
 
 	      const char *fmt = elt->text;
 
 	      bool discard = elt->discard;
 
 	      switch (elt->type)
 		{
@@ -1129,26 +1168,42 @@ octave_base_stream::do_scanf (scanf_form
 
 		    do_scanf_conv (is, fmt, &tmp, mval, data,
 				   data_index, conversion_count,
 				   nr, max_size, discard);
 		  }
 		break;
 
 		case 'c':
-		  is.unsetf (ios::skipws);
-		  // Fall through...
+		  {
+		    is.unsetf (ios::skipws);
+
+		    int width = elt->width;
+
+		    if (width == 0)
+		      width = 1;
+
+		    char *tmp = new char[width+1];
+
+		    int c = EOF;
+		    int n = 0;
+
+		    while (is && n < width && (c = is.get ()) != EOF)
+		      tmp[n++] = (char) c;
+
+		    tmp[n] = '\0';
+
+		    FINISH_CHARACTER_CONVERSION ();
+		  }
+		  break;
 
 		case 's':
 		  {
 		    int width = elt->width;
 
-		    if (elt->type == 'c' && width == 0)
-		      width = 1;
-
 		    char *tmp = 0;
 
 		    if (width)
 		      {
 			tmp = new char [width+1];
 
 			is.scan (fmt, tmp);
 
@@ -1173,46 +1228,17 @@ octave_base_stream::do_scanf (scanf_form
 			while (is && (c = is.get ()) != EOF && ! isspace (c))
 			  buf << (char) c;
 
 			buf << ends;
 
 			tmp = buf.str ();
 		      }
 
-		    width = strlen (tmp);
-
-		    if (is)
-		      {
-			int i = 0;
-
-			if (! discard)
-			  {
-			    conversion_count++;
-
-			    while (i < width && tmp[i] != '\0')
-			      {
-				if (data_index == max_size)
-				  {
-				    max_size *= 2;
-
-				    if (nr > 0)
-				      mval.resize (nr, max_size / nr, 0.0);
-				    else
-				      mval.resize (max_size, 1, 0.0);
-
-				    data = mval.fortran_vec ();
-				  }
-
-				data[data_index++] = tmp[i++];
-			      }
-			  }
-		      }
-
-		    delete [] tmp;
+		    FINISH_CHARACTER_CONVERSION ();
 
 		    is.setf (flags);
 		  }
 		break;
 
 		case 'p': case '[':
 		  error ("fscanf: unsupported format specifier");
 		  break;
