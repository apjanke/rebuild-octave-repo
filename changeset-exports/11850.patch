# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1221978112 -7200
#      Sun Sep 21 08:21:52 2008 +0200
# Branch release-3-0-x
# Node ID f25094e4389709edf29ea6878eff83675d1e640f
# Parent  74802398931b8cf2dc664eaaa244de78988442bf
clear index before throwing error in Array indexed assignment functions

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2003,18 +2003,22 @@ Array<T>::value (void) const
 
       retval = index (idx_i, idx_j);
     }
   else if (n_idx == 1)
     {
       retval = index (idx[0]);
     }
   else
-    (*current_liboctave_error_handler)
-      ("Array<T>::value: invalid number of indices specified");
+    {
+      clear_index ();
+
+      (*current_liboctave_error_handler)
+	("Array<T>::value: invalid number of indices specified");
+    }
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Array<T>
@@ -2527,24 +2531,28 @@ assign1 (Array<LT>& lhs, const Array<RT>
 		    {
 		      octave_idx_type ii = lhs_idx.elem (i);
 		      lhs.xelem (ii) = scalar;
 		    }
 		}
 	    }
 	  else
 	    {
+	      lhs.clear_index ();
+
 	      (*current_liboctave_error_handler)
 		("A(I) = X: X must be a scalar or a vector with same length as I");
 
 	      retval = 0;
 	    }
 	}
       else
 	{
+	  lhs.clear_index ();
+
 	  (*current_liboctave_error_handler)
 	    ("A(I) = X: unable to resize A");
 
 	  retval = 0;
 	}
     }
   else if (lhs_idx.is_colon ())
     {
@@ -2555,21 +2563,27 @@ assign1 (Array<LT>& lhs, const Array<RT>
 	  lhs.make_unique ();
 
 	  lhs.resize_no_fill (rhs_len);
 
 	  for (octave_idx_type i = 0; i < rhs_len; i++)
 	    lhs.xelem (i) = rhs.elem (i);
 	}
       else if (rhs_len != lhs_len)
-	(*current_liboctave_error_handler)
-	  ("A(:) = X: A must be the same size as X");
+	{
+	  lhs.clear_index ();
+
+	  (*current_liboctave_error_handler)
+	    ("A(:) = X: A must be the same size as X");
+	}
     }
   else if (! (rhs_len == 1 || rhs_len == 0))
     {
+      lhs.clear_index ();
+
       (*current_liboctave_error_handler)
 	("A([]) = X: X must also be an empty matrix or a scalar");
 
       retval = 0;
     }
 
   lhs.clear_index ();
 
@@ -2621,16 +2635,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	  break;
 
 	case 2:
 	  rhs_nr = dv_tmp.elem (0);
 	  rhs_nc = dv_tmp.elem (1);
 	  break;
 
 	default:
+	  lhs.clear_index ();
 	  (*current_liboctave_error_handler)
 	    ("Array<T>::assign2: Dimension mismatch");
 	  return 0;
 	}
     }
 
   bool rhs_is_scalar = rhs_nr == 1 && rhs_nc == 1;
 
@@ -2735,30 +2750,30 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			    }
 			}
 		    }
 		}
 	      else if (n == 0 && m == 0)
 		{
 		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
 		    {
+		      lhs.clear_index ();
+
 		      (*current_liboctave_error_handler)
 		("A([], []) = X: X must be an empty matrix or a scalar");
 
 		      retval = 0;
 		    }
 		}
 	      else
 		{
-		  (*current_liboctave_error_handler)
-    ("A(I, J) = X: X must be a scalar or the number of elements in I must");
+		  lhs.clear_index ();
+
 		  (*current_liboctave_error_handler)
-    ("match the number of rows in X and the number of elements in J must");
-		  (*current_liboctave_error_handler)
-    ("match the number of columns in X");
+    ("A(I, J) = X: X must be a scalar or the number of elements in I must match the number of rows in X and the number of elements in J must match the number of columns in X");
 
 		  retval = 0;
 		}
 	    }
 	}
       // idx_vector::freeze() printed an error message for us.
     }
   else if (n_idx == 1)
@@ -2866,18 +2881,24 @@ assign2 (Array<LT>& lhs, const Array<RT>
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else if (len == 0)
 		{
 		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
-		    (*current_liboctave_error_handler)
-		      ("A([]) = X: X must be an empty matrix or scalar");
+		    {
+		      lhs.clear_index ();
+
+		      (*current_liboctave_error_handler)
+			("A([]) = X: X must be an empty matrix or scalar");
+
+		      retval = 0;
+		    }
 		}
 	      else if (len == rhs_nr * rhs_nc)
 		{
 		  lhs.make_unique ();
 
 		  if (idx_i.is_colon ())
 		    {
 		      for (octave_idx_type i = 0; i < len; i++)
@@ -2909,16 +2930,18 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			{
 			  octave_idx_type ii = idx_i.elem (i);
 			  lhs.xelem (ii) = scalar;
 			}
 		    }
 		}
 	      else
 		{
+		  lhs.clear_index ();
+
 		  (*current_liboctave_error_handler)
       ("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 		  retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
@@ -2955,16 +2978,18 @@ assignN (Array<LT>& lhs, const Array<RT>
   Array<idx_vector> idx = conv_to_array (idx_vex, n_idx);
 
   if (rhs_dims_len == 2 && rhs_dims(0) == 0 && rhs_dims(1) == 0)
     {
       lhs.maybe_delete_elements (idx, rfv);
     }
   else if (n_idx == 0)
     {
+      lhs.clear_index ();
+
       (*current_liboctave_error_handler)
 	("invalid number of indices for matrix expression");
 
       retval = 0;
     }
   else if (n_idx == 1)
     {
       idx_vector iidx = idx(0);
@@ -2981,16 +3006,18 @@ assignN (Array<LT>& lhs, const Array<RT>
       octave_idx_type len = iidx.freeze (lhs_len, "N-d arrray");
 
       if (iidx)
 	{
 	  if (len == 0)
 	    {
 	      if (! (rhs_dims.all_ones () || rhs_dims.any_zero ()))
 		{
+		  lhs.clear_index ();
+
 		  (*current_liboctave_error_handler)
 		    ("A([]) = X: X must be an empty matrix or scalar");
 
 		  retval = 0;
 		}
 	    }
 	  else if (len == rhs.length ())
 	    {
@@ -3029,16 +3056,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 		      octave_idx_type ii = iidx.elem (i);
 
 		      lhs.xelem (ii) = scalar;
 		    }
 		}
 	    }
 	  else
 	    {
+	      lhs.clear_index ();
+
 	      (*current_liboctave_error_handler)
 		("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 	      retval = 0;
 	    }
 
 	  // idx_vector::freeze() printed an error message for us.
 	}
@@ -3140,16 +3169,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 			    if (idx(i).is_colon ())
 			      new_dims (i) = rhs_dims (k++);
 			}
 		      else
 			new_dims (fcolon) = rhs_dims_numel;
 		    }
 		  else if (new_dims_numel != rhs_dims_numel || new_dims_vec > 1)
 		    {
+		      lhs.clear_index ();
+
 		      (*current_liboctave_error_handler)
 			("A(IDX-LIST) = RHS: mismatched index and RHS dimension");
 		      return retval;
 		    }
 		}
 	    }
 	  else
 	    {
@@ -3167,16 +3198,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 		    {
 		      octave_idx_type nelem = idx(i).capacity ();
 
 		      if (nelem >= 1 
 			  && (k < rhs_dims_len && nelem == rhs_dims(k)))
 			k++;
 		      else if (nelem != 1)
 			{
+			  lhs.clear_index ();
+
 			  (*current_liboctave_error_handler)
 			    ("A(IDX-LIST) = RHS: mismatched index and RHS dimension");
 			  return retval;
 			}
 		      new_dims(i) = idx(i).orig_empty () ? 0 : 
 			idx(i).max () + 1;
 		    }
 		}
@@ -3209,16 +3242,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 	  if (! orig_empty
 	      && n_idx < orig_lhs_dims_len
 	      && new_dims(n_idx-1) != lhs_dims(n_idx-1))
 	    {
 	      // We reshaped and the last dimension changed.  This has to
 	      // be an error, because we don't know how to undo that
 	      // later...
 
+	      lhs.clear_index ();
+
 	      (*current_liboctave_error_handler)
 		("array index %d (= %d) for assignment requires invalid resizing operation",
 		 n_idx, new_dims(n_idx-1));
 
 	      retval = 0;
 	    }
 	  else
 	    {
@@ -3335,16 +3370,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 	      else
 		{
 		  // RHS is matrix or higher dimension.
 
 		  octave_idx_type n = Array<LT>::get_size (frozen_len);
 
 		  if (n != rhs.numel ())
 		    {
+		      lhs.clear_index ();
+
 		      (*current_liboctave_error_handler)
 			("A(IDX-LIST) = X: X must be a scalar or size of X must equal number of elements indexed by IDX-LIST");
 
 			  retval = 0;
 		    }
 		  else
 		    {
 		      lhs.make_unique ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-09-19  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assign1, assign2, assignN):
+	Clear lhs index before throwing error.
+	(Array<T>::value): Clear index before throwing error.
+
 2008-09-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (maybe_delete_elements_2 (idx_vector&)): Fix tests to get
 	better Matlab compatibility.
 	(maybe_delete_elements (idx_vector&, idx_vector&)): Fix tests to get
 	better Matlab compatibility, simplify, gripe on invalid 2-D deletion.
 
 2008-01-18  Marco Caliari  <marco.caliari@univr.it>
