# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1407691902 -7200
#      Sun Aug 10 19:31:42 2014 +0200
# Branch gui-release
# Node ID 00b1d60500bd76f5bd80b3457b3f6c5e7ed0dad2
# Parent  2675b285f55f4710d11c37ab87882f6fad014ffb
improved finding a function file for editing in gui (case 1 in bug #41509)

* octave-qscintilla.cc (contextmenu_edit): call F__which__ to get the
  correct path of a function file even it is a class function

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #ifdef HAVE_QSCINTILLA
 
 #include <Qsci/qscilexer.h>
 #include <Qsci/qscicommandset.h>
 #include <QShortcut>
+#include <QMessageBox>
+#include <oct-map.h>
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
 #include "shortcut-manager.h"
 
 octave_qscintilla::octave_qscintilla (QWidget *p)
   : QsciScintilla (p)
 {
@@ -260,17 +262,50 @@ octave_qscintilla::contextmenu_help_doc 
   else
     command = "help ";
   emit execute_command_in_terminal_signal (command + _word_at_cursor);
 }
 
 void
 octave_qscintilla::contextmenu_edit (bool)
 {
-  emit execute_command_in_terminal_signal (QString("edit ") + _word_at_cursor);
+  octave_value_list fct = F__which__ (ovl (_word_at_cursor.toStdString ()),0);
+  octave_map map = fct(0).map_value ();
+
+  QString type = QString::fromStdString (
+                         map.contents ("type").data ()[0].string_value ());
+  QString name = QString::fromStdString (
+                         map.contents ("name").data ()[0].string_value ());
+
+  QString message = QString ();
+
+  if (type.isEmpty ())
+    message = tr ("Can not find function %1");
+  else if (type == QString("built-in function"))
+    message = tr ("%1 is a built-in function");
+
+  if (! message.isEmpty ())
+    {
+      QMessageBox *msgBox
+          = new QMessageBox (QMessageBox::Critical,
+                             tr ("Octave Editor"),
+                             message.arg (name),
+                             QMessageBox::Ok, this);
+
+      msgBox->setWindowModality (Qt::NonModal);
+      msgBox->setAttribute (Qt::WA_DeleteOnClose);
+      msgBox->show ();
+      return;
+    }
+
+  QString filename = QString::fromStdString (
+                         map.contents ("file").data ()[0].string_value ());
+
+  emit execute_command_in_terminal_signal (QString("edit ")
+                                           + "\""+filename+"\"");
 }
 
 void
 octave_qscintilla::contextmenu_run (bool)
 {
   QStringList commands = selectedText ().split (QRegExp("[\r\n]"),
                                                 QString::SkipEmptyParts);
   for (int i = 0; i < commands.size (); i++ )
