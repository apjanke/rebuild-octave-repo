# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511902671 28800
#      Tue Nov 28 12:57:51 2017 -0800
# Node ID a35bceb4b5190be46349d0b1d1fdc7b5059cf4c4
# Parent  bc65aa8a5ff15141a63287854931253fbe79fe55
isequal.m, isequaln.m: Fix comparsion of struct arrays (bug #51403).

* isequal.m, isequaln.m: For scalar structs, pass each field directly to
recursive isequalX.  For struct arrays, each element for a given field may have
a different class of value.  In this case, wrap results of field in to a cell
array and pass cell array to isequalX.

diff --git a/scripts/general/isequal.m b/scripts/general/isequal.m
--- a/scripts/general/isequal.m
+++ b/scripts/general/isequal.m
@@ -114,22 +114,33 @@ function t = isequal (x, varargin)
         ## Test that all the field names are equal.
         if (t)
           s_fnm_x = sort (fieldnames (x));
           t = all (strcmp (s_fnm_x, sort (fieldnames (y))));
         endif
 
         ## Test that all field values are equal.  Slow because of recursion.
         if (t)
-          for fldnm = s_fnm_x.'
-            t = isequal (x.(fldnm{1}), y.(fldnm{1}));
-            if (! t)
-              break;
-            endif
-          endfor
+          if (isscalar (x))
+            for fldnm = s_fnm_x.'
+              t = isequal (x.(fldnm{1}), y.(fldnm{1}));
+              if (! t)
+                break;
+              endif
+            endfor
+          else
+            ## struct arrays have to have the contents of each field wrapped
+            ## in a cell since it expands to a collection of values.
+            for fldnm = s_fnm_x.'
+              t = isequal ({x.(fldnm{1})}, {y.(fldnm{1})});
+              if (! t)
+                break;
+              endif
+            endfor
+          endif
         endif
 
       elseif (iscellstr (x) && iscellstr (y))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         t = strcmp (char (x), char (y));
@@ -192,28 +203,45 @@ function t = isequal (x, varargin)
             t = all (strcmp (fnm_x, sort (fnm_v{idx})));
             idx += 1;
           endwhile
         endif
 
         ## Test that all field values are equal.  Slow because of recursion.
         if (t)
           args = cell (1, 1 + nvarargin);
-          for fldnm = fnm_x.'
-            args(1) = x.(fldnm{1});
-            for argn = 1:nvarargin
-              args(argn+1) = varargin{argn}.(fldnm{1});
-            endfor
+          if (isscalar (x))
+            for fldnm = fnm_x.'
+              args{1} = x.(fldnm{1});
+              for argn = 1:nvarargin
+                args{argn+1} = varargin{argn}.(fldnm{1});
+              endfor
+
+              t = isequal (args{:});
 
-            t = isequal (args{:});
+              if (! t)
+                break;
+              endif
+            endfor
+          else
+            ## struct arrays have to have the contents of each field wrapped
+            ## in a cell since it expands to a collection of values.
+            for fldnm = fnm_x.'
+              args{1} = { x.(fldnm{1}) };
+              for argn = 1:nvarargin
+                args{argn+1} = { varargin{argn}.(fldnm{1}) };
+              endfor
 
-            if (! t)
-              break;
-            endif
-          endfor
+              t = isequal (args{:});
+
+              if (! t)
+                break;
+              endif
+            endfor
+          endif
         endif
 
       elseif (iscellstr (x) && all (cellfun (@iscellstr, varargin)))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         idx = 1;
@@ -362,16 +390,27 @@ endfunction
 %! assert (isequal (x, y), false);
 %! assert (isequal (x, x, y), false);
 %! y = x;
 %! y.b = rmfield (y.b, "b");
 %! y.b.b.a = "bba1";
 %! assert (isequal (x, y), false);
 %! assert (isequal (x, x, y), false);
 
+## struct array
+%!test
+%! x(1).a = 'A';
+%! x(2).a = magic (3);
+%! assert (isequal (x, x), true);
+%! assert (isequal (x, x, x), true);
+%! y = x;
+%! y(2).a = { magic(3) };
+%! assert (isequal (x, y), false);
+%! assert (isequal (x, x, y), false);
+
 ## test cellstr
 %!assert (isequal (cell (1,1), cell (1,1)), true)
 %!assert (isequal (cell (1,1), cell (1,2)), false)
 %!assert (isequal ({"a","b";"c","d"}, {"a","b";"c","d"}), true)
 %!assert (isequal ({"a","b";"c","d"}, {"a","b";"c","d"}, {"a","b";"c","d"}),
 %!                 true)
 %!assert (isequal ({"a","b","c","d"}, {"a";"b";"c";"d"}), false)
 %!assert (isequal ({"a","b","c","d"}, {"a","b","c","d"}, {"a";"b";"c";"d"}),
diff --git a/scripts/general/isequaln.m b/scripts/general/isequaln.m
--- a/scripts/general/isequaln.m
+++ b/scripts/general/isequaln.m
@@ -120,22 +120,33 @@ function t = isequaln (x, varargin)
         ## Test that all the field names are equal.
         if (t)
           s_fnm_x = sort (fieldnames (x));
           t = all (strcmp (s_fnm_x, sort (fieldnames (y))));
         endif
 
         ## Test that all field values are equal.  Slow because of recursion.
         if (t)
-          for fldnm = s_fnm_x.'
-            t = isequaln (x.(fldnm{1}), y.(fldnm{1}));
-            if (! t)
-              break;
-            endif
-          endfor
+          if (isscalar (x))
+            for fldnm = s_fnm_x.'
+              t = isequaln (x.(fldnm{1}), y.(fldnm{1}));
+              if (! t)
+                break;
+              endif
+            endfor
+          else
+            ## struct arrays have to have the contents of each field wrapped
+            ## in a cell since it expands to a collection of values.
+            for fldnm = s_fnm_x.'
+              t = isequaln ({x.(fldnm{1})}, {y.(fldnm{1})});
+              if (! t)
+                break;
+              endif
+            endfor
+          endif
         endif
 
       elseif (iscellstr (x) && iscellstr (y))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         t = strcmp (char (x), char (y));
@@ -202,28 +213,45 @@ function t = isequaln (x, varargin)
             t = all (strcmp (fnm_x, sort (fnm_v{idx})));
             idx += 1;
           endwhile
         endif
 
         ## Test that all field values are equal.  Slow because of recursion.
         if (t)
           args = cell (1, 1 + nvarargin);
-          for fldnm = fnm_x.'
-            args(1) = x.(fldnm{1});
-            for argn = 1:nvarargin
-              args(argn+1) = varargin{argn}.(fldnm{1});
-            endfor
+          if (isscalar (x))
+            for fldnm = fnm_x.'
+              args{1} = x.(fldnm{1});
+              for argn = 1:nvarargin
+                args{argn+1} = varargin{argn}.(fldnm{1});
+              endfor
+
+              t = isequaln (args{:});
 
-            t = isequaln (args{:});
+              if (! t)
+                break;
+              endif
+            endfor
+          else
+            ## struct arrays have to have the contents of each field wrapped
+            ## in a cell since it expands to a collection of values.
+            for fldnm = fnm_x.'
+              args{1} = { x.(fldnm{1}) };
+              for argn = 1:nvarargin
+                args{argn+1} = { varargin{argn}.(fldnm{1}) };
+              endfor
 
-            if (! t)
-              break;
-            endif
-          endfor
+              t = isequaln (args{:});
+
+              if (! t)
+                break;
+              endif
+            endfor
+          endif
         endif
 
       elseif (iscellstr (x) && all (cellfun (@iscellstr, varargin)))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         idx = 1;
