# HG changeset patch
# User jwe
# Date 1158029193 0
#      Tue Sep 12 02:46:33 2006 +0000
# Node ID 14078139f94114bec9993fd7963f3039a315bd93
# Parent  5f662c1cfbbe7c2e28d1c3fdbbe1d2b446e27634
[project @ 2006-09-12 02:46:33 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2006-09-11  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* signal/freqz.m: Update tests.
+
+2006-09-11  Ken Kouno  <kouno@mk.ecei.tohoku.ac.jp>
+
+	* signal/freqz.m: Corretly postpad arrays.
+	Don't call fliplr on a column vector.
+
 2006-09-11  Luis F. Ortiz  <lortiz@interactivesupercomputing.com>
 
 	* general/shiftdim.m: Use permute instead of reshape.
 
 2006-09-05  Alexander Barth  <abarth93@users.sourceforge.net>
 
 	* miscellaneous/parseparams.m: New function.
 
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -117,18 +117,19 @@ function [h_r, f_r] = freqz (b, a, n, re
   a = a(:);
   b = b(:);
 
   if (! isscalar (n)) ## Explicit frequency vector given
     w = f = n;
     if (nargin == 4)  ## Sampling rate Fs was specified
       w = 2*pi*f/Fs;
     endif
-    hb = polyval (fliplr(b), exp(j*w));
-    ha = polyval (fliplr(a), exp(j*w));
+    k = max (length (b), length (a));
+    hb = polyval (postpad (b, k), exp (j*w));
+    ha = polyval (postpad (a, k), exp (j*w));
   elseif (strcmp (region, "whole"))
     f = Fs * (0:n-1)' / n;
     ## polyval(fliplr(P),exp(jw)) is O(p n) and fft(x) is O(n log(n)),
     ## where p is the order of the the polynomial P.  For small p it
     ## would be faster to use polyval but in practice the overhead for
     ## polyval is much higher and the little bit of time saved isn't
     ## worth the extra code.
     hb = fft (postpad (b, n));
@@ -163,16 +164,16 @@ endfunction
 %! b = [1 1 1]/3; # 3-sample average
 %! [h,w] = freqz(b,1,32,'whole');
 %! assert(h(2:16),conj(h(32:-1:18)),20*eps);
 %! [h2,w2] = freqz(b,1,16,'half');
 %! assert(h(1:16),h2,20*eps);
 %! assert(w(1:16),w2,20*eps);
 
 %!test # Sampling frequency properly interpreted
-%! b = [1 1 1]/3;
-%! [h,f] = freqz(b,1,16,320);
+%! b = [1 1 1]/3; a = [1 0.2];
+%! [h,f] = freqz(b,a,16,320);
 %! assert(f,[0:15]'*10,10*eps);
-%! [h2,f2] = freqz(b,1,[0:15]*10,320);
+%! [h2,f2] = freqz(b,a,[0:15]*10,320);
 %! assert(f2,[0:15]*10,10*eps);
-%! assert(h,h2',20*eps);
-%! [h3,f3] = freqz(b,1,32,'whole',320);
+%! assert(h,h2.',20*eps);
+%! [h3,f3] = freqz(b,a,32,'whole',320);
 %! assert(f3,[0:31]'*10,10*eps);
