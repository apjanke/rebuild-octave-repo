# HG changeset patch
# User jwe
# Date 981436893 0
#      Tue Feb 06 05:21:33 2001 +0000
# Node ID 7ed917c1ca60451afae29c00b629b5b17d76d953
# Parent  13905c3a24af43e50c5dc5d4a7dc8ab49d1613e0
[project @ 2001-02-06 05:21:32 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
+2001-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-mappers.h (tanh (const Complex&)): Only declare if not
+	CXX_ISO_COMPLIANT_LIBRARY.
+
 2001-02-05  Mumit Khan  <khan@nanotech.wisc.edu>
 
+	* lo-mappers.cc (tanh (const Complex&)): Only define if not
+	CXX_ISO_COMPLIANT_LIBRARY.
+
 	* Makefile.in (TEMPLATE_AR, TEMPLATE_ARFLAGS): Use to create
 	archive libraries containing templates.
 
 	* ArrayN-idx.h (freeze, all_ok, any_orig_empty, any_zero_len,
 	get_zero_len_size, all_colon_equiv): Inline. 
 	(ArrayN<T>::index): Rename idx to arr_idx.
 	* ArrayN.cc (ArrayN<T>::index, ArrayN<T>::compute_index, 
 	ArrayN<T>::get_size, ArrayN<T>::range_error, ArrayN<T>::range_error,
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -263,22 +263,26 @@ round (const Complex& x)
 }
 
 Complex
 signum (const Complex& x)
 {
   return x / abs (x);
 }
 
+#if !defined (CXX_ISO_COMPLIANT_LIBRARY)
+
 Complex
 tanh (const Complex& x)
 {
   return sinh (x) / cosh (x);
 }
 
+#endif
+
 // complex -> bool mappers.
 
 bool
 xisnan (const Complex& x)
 {
 #if defined (HAVE_ISNAN)
   return (isnan (real (x)) || isnan (imag (x)));
 #else
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -48,17 +48,20 @@ extern Complex asin (const Complex& x);
 extern Complex asinh (const Complex& x);
 extern Complex atan (const Complex& x);
 extern Complex atanh (const Complex& x);
 extern Complex ceil (const Complex& x);
 extern Complex fix (const Complex& x);
 extern Complex floor (const Complex& x);
 extern Complex round (const Complex& x);
 extern Complex signum (const Complex& x);
+
+#if !defined (CXX_ISO_COMPLIANT_LIBRARY)
 extern Complex tanh (const Complex& x);
+#endif
 
 extern bool xisnan (const Complex& x);
 extern bool xfinite (const Complex& x);
 extern bool xisinf (const Complex& x);
 
 extern Complex xmin (const Complex& x, const Complex& y);
 extern Complex xmax (const Complex& x, const Complex& y);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2001-02-05  Mumit Khan  <khan@nanotech.wisc.edu>
 
+	* pr-output.cc (set_format): Add std:: namespace qualifier as
+	needed.
+
 	* oct-stream.cc (octave_scan): Implement, and specialize for
 	char*. Delete the old template instantiations.
 	(BEGIN_S_CONVERSION): Use strings instead of ostrstreambuf.
 	(octave_base_stream::do_scanf): Pass correct parameter to
 	do_scan_conv.
 
 	* Makefile.in (TEMPLATE_AR, TEMPLATE_ARFLAGS): Use to create
 	archive libraries containing templates.
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -492,17 +492,17 @@ set_format (const Matrix& m, int& fw, do
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
 			  int_or_inf_or_nan, fw);
 }
 
 static inline void
 set_format (const Matrix& m)
 {
@@ -843,17 +843,17 @@ set_format (const ComplexMatrix& cm, int
     ? 0 : static_cast<int> (floor (log10 (i_max_abs) + 1.0));
 
   int i_x_min = i_min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (i_min_abs) + 1.0));
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
-  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || int_or_inf_or_nan) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
 			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
@@ -984,17 +984,17 @@ set_format (const Range& r, int& fw, dou
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
   int x_max = max_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (max_abs) + 1.0));
 
   int x_min = min_abs == 0.0
     ? 0 : static_cast<int> (floor (log10 (min_abs) + 1.0));
 
-  scale = (x_max == 0 || all_ints) ? 1.0 : pow (10.0, x_max - 1);
+  scale = (x_max == 0 || all_ints) ? 1.0 : std::pow (10.0, x_max - 1);
 
   set_range_format (sign, x_max, x_min, all_ints, fw);
 }
 
 static inline void
 set_format (const Range& r)
 {
   int fw;
