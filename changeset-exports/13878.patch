# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1321534750 0
#      Thu Nov 17 12:59:10 2011 +0000
# Branch gui
# Node ID e3066c972c6a4c365ecdcb0386c41ac32a66a21c
# Parent  5336db83b935f7310e66facb87d579907286aa15
[Win32] Make standard IO setup more robust in QConsole.

* src/terminal/win32/QConsole.cpp (QConsolePrivate::closeStandardIO,
QConsolePrivate::setupStandardIO): New helper methods.
(QConsolePrivate::QConsolePrivate): Use them.

diff --git a/gui/src/terminal/win32/QConsole.cpp b/gui/src/terminal/win32/QConsole.cpp
--- a/gui/src/terminal/win32/QConsole.cpp
+++ b/gui/src/terminal/win32/QConsole.cpp
@@ -95,16 +95,20 @@ public:
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
   void monitorConsole (void);
   void startCommand (void);
 
   void log (const char* fmt, ...);
 
+  void closeStandardIO (int fd, DWORD stdHandleId, const char* name);
+  void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
+                        const char* devName);
+
 private:
   QConsole* q;
 
 private:
   QFont m_font;
   QColor m_backgroundColor;
   QString m_command;
   QConsoleColors m_colors;
@@ -130,33 +134,23 @@ private:
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsolePrivate::QConsolePrivate (QConsole* parent, const QString& cmd)
     : q (parent), m_command (cmd), m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
-  HANDLE hStdOut = GetStdHandle (STD_OUTPUT_HANDLE);
-  if (hStdOut)
-    {
-      // FIXME: should we detach from the existing console and create
-      //        a new one?
-      log ("STDIN: %p, STDOUT: %p, STDERR: %p.\n",
-           GetStdHandle (STD_INPUT_HANDLE), GetStdHandle (STD_OUTPUT_HANDLE),
-           GetStdHandle (STD_ERROR_HANDLE));
-      log ("Console existing, detaching...\n", hStdOut);
-      FreeConsole ();
-      log ("STDIN: %p, STDOUT: %p, STDERR: %p.\n",
-           GetStdHandle (STD_INPUT_HANDLE), GetStdHandle (STD_OUTPUT_HANDLE),
-           GetStdHandle (STD_ERROR_HANDLE));
-      close (0);
-      close (1);
-      close (2);
-    }
+  // Possibly detach from any existing console
+  log ("Detaching from existing console (if any)...\n");
+  FreeConsole ();
+  log ("Closing standard IO...\n");
+  closeStandardIO (0, STD_INPUT_HANDLE, "STDIN");
+  closeStandardIO (1, STD_OUTPUT_HANDLE, "STDOUT");
+  closeStandardIO (2, STD_ERROR_HANDLE, "STDERR");
 
 #ifdef HIDDEN_CONSOLE
   HWINSTA hOrigSta, hNewSta;
 
   // Create new (hidden) console
   hOrigSta = GetProcessWindowStation ();
   hNewSta = CreateWindowStation (NULL, 0, GENERIC_ALL, NULL);
   log ("Current Windows station: %p.\nNew Windows station: %p.\n", hOrigSta,
@@ -168,100 +162,37 @@ QConsolePrivate::QConsolePrivate (QConso
     log ("Failed to create new console.\n");
 #ifdef HIDDEN_CONSOLE
   if (! SetProcessWindowStation (hOrigSta))
     log ("Failed to restore original Windows station.\n");
   if (! CloseWindowStation (hNewSta))
     log ("Failed to close new Windows station.\n");
 #endif
 
-  log ("Hidden console created.\n");
-  log ("STDIN: %p, STDOUT: %p, STDERR: %p.\n",
-       GetStdHandle (STD_INPUT_HANDLE), GetStdHandle (STD_OUTPUT_HANDLE),
-       GetStdHandle (STD_ERROR_HANDLE));
-
-  // Setup stdin/stdout/stderr
-  int fd_in = _open_osfhandle ((intptr_t) GetStdHandle (STD_INPUT_HANDLE),
-                               _O_RDONLY | _O_BINARY);
-  int fd_out = _open_osfhandle ((intptr_t) GetStdHandle (STD_OUTPUT_HANDLE),
-                                _O_WRONLY | _O_BINARY);
-  int fd_err = _open_osfhandle ((intptr_t) GetStdHandle (STD_ERROR_HANDLE),
-                                _O_WRONLY | _O_BINARY);
-
-  log ("Win32 standard handles opened: fd_in=%d, fd_out=%d, fd_err=%d\n",
-       fd_in, fd_out, fd_err);
+  log ("New (hidden) console created.\n");
 
-  if (fd_in == -1)
-    {
-      log ("Invalid STDIN, trying to open CONIN$ instead...\n");
-      fd_in = open ("CONIN$", _O_RDWR | _O_BINARY);
-      if (fd_in != -1)
-        {
-          log ("CONIN$ opened, assigning as STDIN...\n");
-          SetStdHandle (STD_INPUT_HANDLE, (HANDLE) _get_osfhandle (fd_in));
-        }
-    }
-  if (fd_in != -1 && fd_in != 0)
-    {
-      log ("Duplicating standard input in 0 file descriptor\n");
-      dup2 (fd_in, 0);
-      close (fd_in);
-      SetStdHandle (STD_INPUT_HANDLE, (HANDLE) _get_osfhandle (0));
-    }
-  if (fd_out == -1)
-    {
-      log ("Invalid STDOUT, trying to open CONOUT$ instead...\n");
-      fd_out = open ("CONOUT$", _O_RDWR | _O_BINARY);
-      if (fd_out != -1)
-        {
-          log ("CONOUT$ opened, assigning as STDOUT...\n");
-          SetStdHandle (STD_OUTPUT_HANDLE, (HANDLE) _get_osfhandle (fd_out));
-        }
-    }
-  if (fd_out != -1 && fd_out != 1)
-    {
-      log ("Duplicating standard output in 1 file descriptor\n");
-      dup2 (fd_out, 1);
-      close (fd_out);
-      SetStdHandle (STD_OUTPUT_HANDLE, (HANDLE) _get_osfhandle (1));
-    }
-  if (fd_err == -1)
-    {
-      log ("Invalid STDERR, trying to open CONOUT$ instead...\n");
-      fd_err = open ("CONOUT$", _O_RDWR | _O_BINARY);
-      if (fd_err != -1)
-        {
-          log ("CONOUT$ opened, assigning as STDERR...\n");
-          SetStdHandle (STD_ERROR_HANDLE, (HANDLE) _get_osfhandle (fd_err));
-        }
-    }
-  if (fd_err != -1 && fd_err != 2)
-    {
-      log ("Duplicating standard error in 2 file descriptor\n");
-      dup2 (fd_err, 2);
-      close (fd_err);
-      SetStdHandle (STD_ERROR_HANDLE, (HANDLE) _get_osfhandle (2));
-    }
+  setupStandardIO (STD_INPUT_HANDLE,  0, "STDIN",  "CONIN$");
+  setupStandardIO (STD_OUTPUT_HANDLE, 1, "STDOUT", "CONOUT$");
+  setupStandardIO (STD_ERROR_HANDLE,  2, "STDERR", "CONOUT$");
 
-  log ("Win32 standard handles fixed/duplicated: "
-       "fd_in=%d, fd_out=%d, fd_err=%d\n", fd_in, fd_out, fd_err);
+  log ("Standard input/output/error set up.\n");
 
   *stdin = *(fdopen (0, "rb"));
   *stdout = *(fdopen (1, "wb"));
   *stderr = *(fdopen (2, "wb"));
 
   log ("POSIX standard streams created.\n");
 
   setvbuf (stdin, NULL, _IONBF, 0);
   setvbuf (stdout, NULL, _IONBF, 0);
   setvbuf (stderr, NULL, _IONBF, 0);
 
   log ("POSIX standard stream buffers adjusted.\n");
 
-  hStdOut = GetStdHandle (STD_OUTPUT_HANDLE);
+  HANDLE hStdOut = GetStdHandle (STD_OUTPUT_HANDLE);
 
   log ("Console allocated: hStdOut: %p\n", hStdOut);
 
   m_stdOut = hStdOut;
   m_consoleWindow = GetConsoleWindow ();
 
   // In case the console window hasn't been created hidden...
   ShowWindow (m_consoleWindow, SW_HIDE);
@@ -345,16 +276,57 @@ QConsolePrivate::~QConsolePrivate (void)
   if (m_buffer)
     delete [] m_buffer;
   if (m_tmpBuffer)
     delete [] m_tmpBuffer;
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
+void QConsolePrivate::setupStandardIO (DWORD stdHandleId, int targetFd,
+                                       const char* name, const char* devName)
+{
+  log ("Opening %s...\n", devName);
+
+  int fd = open (devName, _O_RDWR | _O_BINARY);
+
+  if (fd != -1)
+    {
+      if (fd != targetFd)
+        {
+          log ("Opened %s is not at target file descriptor %d, "
+               "duplicating...\n", name, targetFd);
+          if (dup2 (fd, targetFd) == -1)
+            log ("Failed to duplicate file descriptor: errno=%d.\n", errno);
+          if (close (fd) == -1)
+            log ("Failed to close original file descriptor: errno=%d.\n",
+                 errno);
+        }
+      else
+        log ("%s opened and assigned to file descriptor %d.\n", devName, fd);
+      if (! SetStdHandle (stdHandleId, (HANDLE) _get_osfhandle (targetFd)))
+        log ("Failed to re-assign %s: error=%08x.\n", name, GetLastError ());
+    }
+  else
+    log ("Failed to open %s: errno=%d.\n", devName, errno);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+
+void QConsolePrivate::closeStandardIO (int fd, DWORD stdHandleId,
+                                       const char* name)
+{
+  if (close (fd) == -1)
+    log ("Failed to close file descriptor %d: errno=%d.\n", fd, errno);
+  if (! CloseHandle (GetStdHandle (stdHandleId)))
+    log ("Failed to close Win32 %s: error=%08x.\n", name, GetLastError ());
+}
+
+//////////////////////////////////////////////////////////////////////////////
+
 void QConsolePrivate::log (const char* fmt, ...)
 {
 #ifdef DEBUG_QCONSOLE
   if (fmt)
     {
       va_list l;
       FILE* flog = fopen (LOGFILENAME, "ab");
 
