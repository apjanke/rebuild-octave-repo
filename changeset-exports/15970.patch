# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1358802661 18000
#      Mon Jan 21 16:11:01 2013 -0500
# Node ID ca6202597201c9fef9d5982c5e43d4ea1a47cb21
# Parent  139f4b19a3ac02cb1baaa8407a7c073ad70d06ea
Use C-style comments in C code.

* xgl2ps.c, randmtzig.c: Use C-style comments for consistency and to
compile with gcc -std=c90.

diff --git a/libinterp/interp-core/xgl2ps.c b/libinterp/interp-core/xgl2ps.c
--- a/libinterp/interp-core/xgl2ps.c
+++ b/libinterp/interp-core/xgl2ps.c
@@ -15,18 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-// Wrapper for "imported" file gl2ps.c so that config.h will be included
-// before any other system or gnulib headers.
+/*
+ * Wrapper for "imported" file gl2ps.c so that config.h will be included
+ * before any other system or gnulib headers.
+ */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #if defined (HAVE_OPENGL)
 
 #include "gl2ps.c"
diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -632,17 +632,17 @@ oct_rande (void)
     create_ziggurat_tables ();
 
   while (1)
     {
       ZIGINT ri = ERANDI;
       const int idx = (int)(ri & 0xFF);
       const double x = ri * we[idx];
       if (ri < ke[idx])
-        return x;               // 98.9% of the time we return here 1st try
+        return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
            * x = r - ln(U);
            */
           return ZIGGURAT_EXP_R - log (RANDU);
@@ -799,17 +799,17 @@ oct_float_rande (void)
     create_ziggurat_float_tables ();
 
   while (1)
     {
       ZIGINT ri = ERANDI;
       const int idx = (int)(ri & 0xFF);
       const float x = ri * fwe[idx];
       if (ri < fke[idx])
-        return x;               // 98.9% of the time we return here 1st try
+        return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
            * x = r - ln(U);
            */
           return ZIGGURAT_EXP_R - log (RANDU);
