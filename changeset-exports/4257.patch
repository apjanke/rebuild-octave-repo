# HG changeset patch
# User jwe
# Date 1041477282 0
#      Thu Jan 02 03:14:42 2003 +0000
# Node ID e556870ce8f018ccc0b5b5e497dbfcb3d173d11b
# Parent  2b9c6dc2544931eae425174e580fae4b38e7980c
[project @ 2003-01-02 03:14:41 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2003-01-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* strings/strcmp.m: Handle cell arrays of strings.
+
 2002-12-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/int2str.m: Handle matrices.
 	* general/num2str.m: Likewise.
 	Also handle optional precision, and format args.
 
 2002-12-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/scripts/strings/strcmp.m b/scripts/strings/strcmp.m
--- a/scripts/strings/strcmp.m
+++ b/scripts/strings/strcmp.m
@@ -23,28 +23,123 @@
 ##
 ## @strong{Note:}  For compatibility with @sc{Matlab}, Octave's strcmp
 ## function returns 1 if the strings are equal, and 0 otherwise.  This is
 ## just the opposite of the corresponding C library function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function status = strcmp (s1, s2)
+function retval = strcmp (s1, s2)
 
   if (nargin != 2)
     usage ("strcmp (s, t)");
   endif
 
-  status = 0;
-  if (isstr (s1) && isstr(s2))
+  retval = 0;
+
+  if (isstr (s1))
+    [r1, c1] = size (s1);
+    if (isstr (s2))
+      [r2, c2] = size (s2);
+      if (r1 == r2 && c1 == c2)
+	if (c1 == 0)
+          retval = 1;
+	else
+          retval = all (all (s1 == s2));
+	endif
+      endif
+    elseif (iscell (s2))
+      [r2, c2] = size (s2);
+      if (r1 == 1)
+	t2 = s2(:);
+	n = length (t2);
+	retval = zeros (n, 1);
+	for i = 1:n
+	  retval(i) = strcmp (s1, t2{i});
+	endfor
+	retval = reshape (retval, r2, c2);
+      elseif (r1 > 1)
+	if (r2 == 1 && c2 == 1)
+	  t2 = s2{1};
+	  retval = zeros (r1, 1);
+	  for i = 1:r1
+	    retval(i) = strcmp (deblank (s1(i,:)), t2);
+	  endfor
+	else
+	  t2 = s2(:);
+	  n = length (t2);
+	  if (n == r1)
+	    retval = zeros (n, 1);
+	    for i = 1:n
+	      retval(i) = strcmp (deblank (s1(i,:)), t2{i});
+	    endfor
+	    retval = reshape (retval, r2, c2);
+	  endif
+	endif
+      endif
+    endif
+  elseif (iscell (s1))
     [r1, c1] = size (s1);
-    [r2, c2] = size (s2);
-    if (r1 == r2 && c1 == c2)
-      if (c1 == 0)
-        status = 1;
+    if (isstr (s2))
+      [r2, c2] = size (s2);
+      if (r2 == 1)
+	t1 = s1(:);
+	n = length (t1);
+	retval = zeros (n, 1);
+	for i = 1:n
+	  retval(i) = strcmp (t1{i}, s2);
+	endfor
+	retval = reshape (retval, r1, c1);
+      elseif (r2 > 1)
+	if (r1 == 1 && c1 == 1)
+	  t1 = s1{1};
+	  retval = zeros (r2, 1);
+	  for i = 1:r2
+	    retval(i) = strcmp (t1, deblank (s2(i,:)));
+	  endfor
+	else
+	  t1 = s1(:);
+	  n = length (t1);
+	  if (n == r2)
+	    retval = zeros (n, 1);
+	    for i = 1:n
+	      retval(i) = strcmp (t2{i}, deblank (s2(i,:)));
+	    endfor
+	    retval = reshape (retval, r1, c1);
+	  endif
+	endif
+      endif      
+    elseif (iscell (s2))
+      [r2, c2] = size (s2);
+      if (r1 == 1 && c1 == 1)
+	t1 = s1{:};
+	t2 = s2(:);
+	n = length (t2);
+	retval = zeros (n, 1);
+	for i = 1:n
+	  retval(i) = strcmp (t1, t2{i});
+	endfor
+	retval = reshape (retval, r2, c2);
+      elseif (r2 == 1 && c2 == 1)
+	t1 = s1(:);
+	t2 = s2{:};
+	n = length (t1);
+	retval = zeros (n, 1);
+	for i = 1:n
+	  retval(i) = strcmp (t1{i}, t2);
+	endfor
+	retval = reshape (retval, r1, c1);
+      elseif (r1 == r2 && c1 == c2)
+	t1 = s1(:);
+	t2 = s2(:);
+	n = length (t1);
+	for i = 1:n
+	  retval(i) = strcmp (t1{i}, t2{i});
+	endfor
+	retval = reshape (retval, r1, c1);
       else
-        status = all (all (s1 == s2));
+	error ("strcmp: nonconformant cell arrays");
       endif
     endif
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2003-01-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-base.cc (octave_base_value::char_matrix_value,
+	octave_base_value::all_strings,	octave_base_value::string_value):
+	Attempt conversions here if Vimplicit_num_to_num_ok is true.
+
+	* ov.cc (Vimplicit_num_to_str_ok): Move here from pt-mat.cc and
+	make extern.
+	* ov.h: Provide decl.
+
+	* oct-stream.cc (printf_value_cache::looking_at_string): Delete.
+	(printf_value_cache::string_value): Just attempt conversion.
+	(octave_base_stream::do_printf): When doing '%s' format,
+	just attempt converstion.
+
+	* file-io.cc (Ffread): Allow size to be omitted even when
+	additional arguments are given.
+
 2002-12-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-arg-list.cc (F__end__): Fail if rows or columns is negative.
 	(tree_argument_list::convert_to_const_vector): Only protect and
 	save pointer to the indexed object if it is a constant.
 
 	* syscalls.cc (Fmkfifo): Use long_value instead of cast.
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1179,27 +1179,34 @@ values read is returned in @code{count}\
     {
       retval(1) = -1.0;
       retval(0) = Matrix ();
 
       octave_stream os = octave_stream_list::lookup (args(0), "fread");
 
       if (! error_state)
 	{
-	  octave_value size = (nargin > 1)
-	    ? args(1) : octave_value (lo_ieee_inf_value ());
+	  octave_value size = lo_ieee_inf_value ();
+	  octave_value prec = "uchar";
+	  octave_value skip = 0;
+	  octave_value arch = "unknown";
 
-	  octave_value prec = (nargin > 2)
-	    ? args(2) : octave_value ("uchar");
+	  int idx = 1;
 
-	  octave_value skip = (nargin > 3)
-	    ? args(3) : octave_value (0.0);
+	  if (nargin > 1 && ! args(idx).is_string ())
+	    size = args(idx++);
+
+	  if (nargin > idx)
+	    prec = args(idx++);
 
-	  octave_value arch = (nargin > 4)
-	    ? args(4) : octave_value ("unknown");
+	  if (nargin > idx)
+	    skip = args(idx++);
+
+	  if (nargin > idx)
+	    arch = args(idx++);
 
 	  int count = -1;
 
 	  octave_value tmp = do_fread (os, size, prec, skip, arch, count);
 
 	  retval(1) = count;
 	  retval(0) = tmp;
 	}
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2036,18 +2036,16 @@ public:
 
   // Get the current value as a string and advance the internal pointer.
   std::string string_value (void);
 
   operator bool () const { return (curr_state == ok); }
 
   bool exhausted (void) { return (val_idx >= n_vals); }
 
-  bool looking_at_string (void);
-
 private:
 
   const octave_value_list values;
   int val_idx;
   int elt_idx;
   int n_vals;
   int n_elts;
   const double *data;
@@ -2060,29 +2058,16 @@ private:
 
   // No copying!
 
   printf_value_cache (const printf_value_cache&);
 
   printf_value_cache& operator = (const printf_value_cache&);
 };
 
-bool
-printf_value_cache::looking_at_string (void)
-{
-  bool retval = false;
-
-  int idx = (elt_idx == 0) ? val_idx : -1;
-
-  if (idx >= 0 && idx < n_vals)
-    retval = values(idx).is_string ();
-
-  return retval;
-}
-
 double
 printf_value_cache::double_value (void)
 {
   double retval = 0.0;
 
   if (exhausted ())
     curr_state = conversion_error;
 
@@ -2153,41 +2138,39 @@ printf_value_cache::int_value (void)
   return retval;
 }
 
 std::string
 printf_value_cache::string_value (void)
 {
   std::string retval;
 
-  if (looking_at_string ())
+  octave_value tval = values (val_idx++);
+
+  if (tval.rows () == 1)
+    retval = tval.string_value ();
+  else
     {
-      octave_value tval = values (val_idx++);
-
-      if (tval.rows () == 1)
-	retval = tval.string_value ();
-      else
-	{
-	  // In the name of Matlab compatibility.
-
-	  charMatrix chm = tval.char_matrix_value ();
-
-	  int nr = chm.rows ();
-	  int nc = chm.columns ();
-
-	  int k = 0;
-
-	  retval.resize (nr * nc, '\0');
-
-	  for (int j = 0; j < nc; j++)
-	    for (int i = 0; i < nr; i++)
-	      retval[k++] = chm(i,j);
-	}
+      // In the name of Matlab compatibility.
+
+      charMatrix chm = tval.char_matrix_value ();
+
+      int nr = chm.rows ();
+      int nc = chm.columns ();
+
+      int k = 0;
+
+      retval.resize (nr * nc, '\0');
+
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  retval[k++] = chm(i,j);
     }
-  else
+
+  if (error_state)
     curr_state = conversion_error;
 
   return retval;
 }
 
 // Ugh again and again.
 
 template <class T>
@@ -2293,17 +2276,17 @@ octave_base_stream::do_printf (printf_fo
 		  os << "%";
 		  retval++;
 		}
 	      else if (elt->args == 0 && elt->text)
 		{
 		  os << elt->text;
 		  retval += strlen (elt->text);
 		}	      
-	      else if (elt->type == 's' && val_cache.looking_at_string ())
+	      else if (elt->type == 's')
 		{
 		  std::string val = val_cache.string_value ();
 
 		  if (val_cache)
 		    retval += do_printf_conv (os, fmt, nsa, sa_1,
 					      sa_2, val.c_str ());
 		  else
 		    break;
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -296,34 +296,63 @@ octave_base_value::complex_matrix_value 
 			type_name ());
   return retval;
 }
 
 charMatrix
 octave_base_value::char_matrix_value (bool) const
 {
   charMatrix retval;
-  gripe_wrong_type_arg ("octave_base_value::char_matrix_value()",
-			type_name ());
+
+  if (Vimplicit_num_to_str_ok)
+    {
+      octave_value tmp = convert_to_str ();
+
+      if (! error_state)
+	retval = tmp.char_matrix_value ();
+    }
+  else
+    gripe_wrong_type_arg ("octave_base_value::char_matrix_value()",
+			  type_name ());
   return retval;
 }
 
 string_vector
 octave_base_value::all_strings (void) const
 {
   string_vector retval;
-  gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
+
+  if (Vimplicit_num_to_str_ok)
+    {
+      octave_value tmp = convert_to_str ();
+
+      if (! error_state)
+	retval = tmp.all_strings ();
+    }
+  else
+    gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
+
   return retval;
 }
 
 std::string
 octave_base_value::string_value (void) const
 {
   std::string retval;
-  gripe_wrong_type_arg ("octave_base_value::string_value()", type_name ());
+
+  if (Vimplicit_num_to_str_ok)
+    {
+      octave_value tmp = convert_to_str ();
+
+      if (! error_state)
+	retval = tmp.string_value ();
+    }
+  else
+    gripe_wrong_type_arg ("octave_base_value::string_value()", type_name ());
+
   return retval;
 }
 
 Range
 octave_base_value::range_value (void) const
 {
   Range retval;
   gripe_wrong_type_arg ("octave_base_value::range_value()", type_name ());
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -75,16 +75,19 @@ static bool Vsilent_functions;
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 bool Vdo_fortran_indexing;
 
+// Should `[97, 98, 99, "123"]' be a string?
+bool Vimplicit_num_to_str_ok;
+
 // Should we allow things like:
 //
 //   octave> 'abc' + 0
 //   97 98 99
 //
 // to happen?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
@@ -1718,16 +1721,24 @@ do_fortran_indexing (void)
   Vdo_fortran_indexing = check_preference ("do_fortran_indexing");
 
   liboctave_dfi_flag = Vdo_fortran_indexing;
 
   return 0;
 }
 
 static int
+implicit_num_to_str_ok (void)
+{
+  Vimplicit_num_to_str_ok = check_preference ("implicit_num_to_str_ok");
+
+  return 0;
+}
+
+static int
 implicit_str_to_num_ok (void)
 {
   Vimplicit_str_to_num_ok = check_preference ("implicit_str_to_num_ok");
 
   return 0;
 }
 
 static int
@@ -1816,16 +1827,34 @@ symbols_of_ov (void)
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} do_fortran_indexing\n\
 If the value of @code{do_fortran_indexing} is nonzero, Octave allows \n\
 you to select elements of a two-dimensional matrix using a single index\n\
 by treating the matrix as a single vector created from the columns of\n\
 the matrix.  The default value is 0. \n\
 @end defvr");
 
+  DEFVAR (implicit_num_to_str_ok, false, implicit_num_to_str_ok,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} implicit_num_to_str_ok\n\
+If the value of @code{implicit_num_to_str_ok} is nonzero, implicit\n\
+conversions of numbers to their ASCII character equivalents are\n\
+allowed when strings are constructed using a mixture of strings and\n\
+numbers in matrix notation.  Otherwise, an error message is printed and\n\
+control is returned to the top level. The default value is 0.  For\n\
+example,\n\
+\n\
+@example\n\
+@group\n\
+[ \"f\", 111, 111 ]\n\
+     @result{} \"foo\"\n\
+@end group\n\
+@end example\n\
+@end defvr");
+
   DEFVAR (implicit_str_to_num_ok, false, implicit_str_to_num_ok,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} implicit_str_to_num_ok\n\
 If the value of @code{implicit_str_to_num_ok} is nonzero, implicit\n\
 conversions of strings to their numeric ASCII equivalents are allowed.\n\
 Otherwise, an error message is printed and control is returned to the\n\
 top level.  The default value is 0.\n\
 @end defvr");
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -699,16 +699,19 @@ OV_BINOP_FN (op_struct_ref)
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 extern bool Vdo_fortran_indexing;
 
+// Should `[97, 98, 99, "123"]' be a string?
+extern bool Vimplicit_num_to_str_ok;
+
 // Should we allow things like:
 //
 //   octave> 'abc' + 0
 //   97 98 99
 //
 // to happen?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -43,19 +43,16 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 // Are empty elements in a matrix list ok?  For example, is the empty
 // matrix in an expression like `[[], 1]' ok?  A positive value means
 // yes.  A negative value means yes, but print a warning message.
 // Zero means it should be considered an error.
 static int Vempty_list_elements_ok;
 
-// Should `[97, 98, 99, "123"]' be a string?
-static bool Vimplicit_num_to_str_ok;
-
 // The character to fill with when creating string arrays.
 char Vstring_fill_char = ' ';
 
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
 // other matrices, variables, and functions.
 
 // But first, some internal classes that make our job much easier.
@@ -580,24 +577,16 @@ static int
 empty_list_elements_ok (void)
 {
   Vempty_list_elements_ok = check_preference ("empty_list_elements_ok");
 
   return 0;
 }
 
 static int
-implicit_num_to_str_ok (void)
-{
-  Vimplicit_num_to_str_ok = check_preference ("implicit_num_to_str_ok");
-
-  return 0;
-}
-
-static int
 string_fill_char (void)
 {
   int status = 0;
 
   std::string s = builtin_string_variable ("string_fill_char");
 
   switch (s.length ())
     {
@@ -635,34 +624,16 @@ a = [1, [], 3, [], 5]\n\
 @end example\n\
 \n\
 @noindent\n\
 and the variable @code{a} will be assigned the value @code{[ 1, 3, 5 ]}.\n\
 \n\
 The default value is 1.\n\
 @end defvr");
 
-  DEFVAR (implicit_num_to_str_ok, false, implicit_num_to_str_ok,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} implicit_num_to_str_ok\n\
-If the value of @code{implicit_num_to_str_ok} is nonzero, implicit\n\
-conversions of numbers to their ASCII character equivalents are\n\
-allowed when strings are constructed using a mixture of strings and\n\
-numbers in matrix notation.  Otherwise, an error message is printed and\n\
-control is returned to the top level. The default value is 0.  For\n\
-example,\n\
-\n\
-@example\n\
-@group\n\
-[ \"f\", 111, 111 ]\n\
-     @result{} \"foo\"\n\
-@end group\n\
-@end example\n\
-@end defvr");
-
   DEFVAR (string_fill_char, " ", string_fill_char,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} string_fill_char\n\
 The value of this variable is used to pad all strings in a string matrix\n\
 to the same length.  It should be a single character.  The default value\n\
 is @code{\" \"} (a single space).  For example,\n\
 \n\
 @example\n\
