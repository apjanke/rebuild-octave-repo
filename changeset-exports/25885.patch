# HG changeset patch
# User Rik <rik@octave.org>
# Date 1537206727 25200
#      Mon Sep 17 10:52:07 2018 -0700
# Node ID 75ed70a1c1089ed369d4beafa58707540e1f4016
# Parent  4e108574385c161a1f1ac83cabeee9868b0b143a
Overhaul unpack and associated functions (bug #54567).

* unpack.m: Add input validation for third input FILETYPE.  Add BIST test for
input validation.  Require FILETYPE to be a valid extension matching
documentation such as "gz" or "zip".  Override ext variable with specified
filetype.  Guarantee output variable filelist is set even when function
fails to recognize FILETYPE.  Adjust BIST test for gunzip to pass new function.

* bunzip2.m: Call unpack with "bz2" filetype.

* gunzip.m: Call unpack with "gz" filetype.

* untar.m: Call unpack with "tar" filetype.

* unzip.m: Call unpack with "zip" filetype.

* build.m: Use Octave coding convention for space after function call.

* test/pkg/pkg.tst: Use tar.gz archives for testing, not zip files which are
not an allowed format.

diff --git a/scripts/miscellaneous/bunzip2.m b/scripts/miscellaneous/bunzip2.m
--- a/scripts/miscellaneous/bunzip2.m
+++ b/scripts/miscellaneous/bunzip2.m
@@ -36,19 +36,19 @@ function filelist = bunzip2 (bzfile, dir
     print_usage ();
   endif
 
   if (isempty (dir))
     dir = fileparts (bzfile);
   endif
 
   if (nargout > 0)
-    filelist = unpack (bzfile, dir, "bunzip2");
+    filelist = unpack (bzfile, dir, "bz2");
   else
-    unpack (bzfile, dir, "bunzip2");
+    unpack (bzfile, dir, "bz2");
   endif
 
 endfunction
 
 
 ## Tests for this m-file are located in bzip2.m
 ## Remove from test statistics
 %!assert (1)
diff --git a/scripts/miscellaneous/gunzip.m b/scripts/miscellaneous/gunzip.m
--- a/scripts/miscellaneous/gunzip.m
+++ b/scripts/miscellaneous/gunzip.m
@@ -39,19 +39,19 @@ function filelist = gunzip (gzfile, dir 
     print_usage ();
   endif
 
   if (isempty (dir))
     dir = fileparts (gzfile);
   endif
 
   if (nargout > 0)
-    filelist = unpack (gzfile, dir, "gunzip");
+    filelist = unpack (gzfile, dir, "gz");
   else
-    unpack (gzfile, dir, "gunzip");
+    unpack (gzfile, dir, "gz");
   endif
 
 endfunction
 
 
 ## Tests for this m-file are located in gzip.m
 ## Remove from test statistics
 %!assert (1)
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -81,18 +81,18 @@ function filelist = unpack (file, dir = 
     error ("unpack: FILE must be a string or cell array of strings");
   endif
 
   ## Convert char arrays to cell strings to simplify further processing
   if (ischar (file))
     file = cellstr (file);
   endif
   if (numel (file) == 1)
+    ## FIXME: The code below is not a perfect test for a URL
     if (isempty (strfind (file{1}, "://")))
-      ## FIXME: The above code is not a perfect test for a URL
       gfile = glob (file);
       if (isempty (gfile))
         error ('unpack: FILE "%s" not found', file{1});
       else
         file = gfile;
       endif
     endif
   endif
@@ -110,26 +110,39 @@ function filelist = unpack (file, dir = 
       filelist = files;
     endif
     return;
 
   else
     file = file{1};
   endif
 
+  if (nargin == 3 && (! ischar (filetype) || ! isrow (filetype)))
+    error ("unpack: FILETYPE must be a string");
+  endif
+
   if (isfolder (file))
     if (isempty (filetype))
       error ("unpack: FILETYPE must be given for a directory");
-    elseif (! any (strcmpi (filetype, "gunzip")))
-      error ('unpack: FILETYPE must be "gunzip" for a directory');
+    elseif (! strcmpi (filetype, "gz"))
+      error ('unpack: FILETYPE must be "gz" for a directory');
     endif
     ext = ".gz";
   else
     [pathstr, name, ext] = fileparts (file);
 
+    if (nargin == 3 && ! strcmpi (ext, filetype))
+      ## override extension with given filetype 
+      if (isempty (ext))
+        ext = filetype;
+      else
+        ext = regexprep (ext, '(\.?)\S*$', ['$1' filetype]);
+      endif
+    endif
+
     ## Check to see if it's .tar.gz, .tar.Z, etc.
     if (any (strcmpi ({".gz" ".Z" ".bz2" ".bz"}, ext)))
       [~, tmpname, tmpext] = fileparts (name);
       if (strcmpi (tmpext, ".tar"))
         name = tmpname;
         ext = [tmpext ext];
       endif
     endif
@@ -188,17 +201,17 @@ function filelist = unpack (file, dir = 
     commandlist.tbz2 = commandlist.tarbz2;
     commandlist.tbz = commandlist.tarbz2;
     commandlist.zip = {'unzip -n "%s"', ...
                        'unzip -nq "%s"', ...
                        @__parse_zip__, false};
   endif
 
   ## Unzip doesn't actually care about the extension
-  if (strcmpi (filetype, "unzip"))
+  if (strcmpi (filetype, "zip"))
     nodotext = "zip";
   else
     nodotext = ext(ext != '.');
   endif
 
   if (ispc && strcmp (nodotext, "tar"))
     ## Change file pathname into a mingw style acceptable for tar
     file = __w2mpth__ (file);
@@ -219,18 +232,18 @@ function filelist = unpack (file, dir = 
     endif
     needmove = move && ! strcmp (cstartdir, cenddir);
     if (nargout > 0 || needmove)
       command = commandv;
     else
       command = commandq;
     endif
   else
-    warning ("unpack: unrecognized FILETYPE <%s>", ext);
-    files = file;
+    warning ("unpack: unrecognized FILETYPE <%s>", nodotext);
+    filelist = {};
     return;
   endif
 
   ## Create the directory if necessary.
   s = stat (dir);
   if (isempty (s))
     [status, msg] = mkdir (dir);
     if (! status)
@@ -361,20 +374,21 @@ endfunction
 
 ## Test input validation
 %!error unpack ()
 %!error unpack (1,2,3,4)
 %!error <FILE must be a string or cell array of strings> unpack (1)
 %!error <FILE "_%NOT_A_FILENAME%_" not found> unpack ("_%NOT_A_FILENAME%_")
 %!error <FILE "_%NOT_A_FILENAME%_" not found> unpack ({"_%NOT_A_FILENAME%_"})
 %!error <FILE "_%NOT_A_FILENAME%_" not found> unpack ({"_%NOT_A_FILENAME%_", "2nd_filename"})
+%!error <FILETYPE must be a string> unpack ("/", [], 1)
 %!error <FILETYPE must be given for a directory>
 %! if (isunix || ismac)
 %!   unpack ("/");
 %! else
 %!   unpack ('C:\');
 %! endif
-%!error <FILETYPE must be "gunzip" for a directory>
+%!error <FILETYPE must be "gz" for a directory>
 %! if (isunix || ismac)
 %!   unpack ("/", [], "foobar");
 %! else
 %!   unpack ('C:\', [], "foobar");
 %! endif
diff --git a/scripts/miscellaneous/untar.m b/scripts/miscellaneous/untar.m
--- a/scripts/miscellaneous/untar.m
+++ b/scripts/miscellaneous/untar.m
@@ -37,19 +37,19 @@ function filelist = untar (tarfile, dir 
     print_usage ();
   endif
 
   if (isempty (dir))
     dir = fileparts (tarfile);
   endif
 
   if (nargout > 0)
-    filelist = unpack (tarfile, dir, "untar");
+    filelist = unpack (tarfile, dir, "tar");
   else
-    unpack (tarfile, dir, "untar");
+    unpack (tarfile, dir, "tar");
   endif
 
 endfunction
 
 
 ## Tests for this m-file are located in tar.m
 ## Remove from test statistics
 %!assert (1)
diff --git a/scripts/miscellaneous/unzip.m b/scripts/miscellaneous/unzip.m
--- a/scripts/miscellaneous/unzip.m
+++ b/scripts/miscellaneous/unzip.m
@@ -37,19 +37,19 @@ function filelist = unzip (zipfile, dir 
     print_usage ();
   endif
 
   if (isempty (dir))
     dir = fileparts (zipfile);
   endif
 
   if (nargout > 0)
-    filelist = unpack (zipfile, dir, "unzip");
+    filelist = unpack (zipfile, dir, "zip");
   else
-    unpack (zipfile, dir, "unzip");
+    unpack (zipfile, dir, "zip");
   endif
 
 endfunction
 
 
 ## Tests for this m-file are located in zip.m
 ## Remove from test statistics
 %!assert (1)
diff --git a/scripts/pkg/private/build.m b/scripts/pkg/private/build.m
--- a/scripts/pkg/private/build.m
+++ b/scripts/pkg/private/build.m
@@ -41,17 +41,17 @@ function build (builddir, tarballs, verb
   if (! isfolder (builddir))
     warning ("creating build directory %s", builddir);
     [status, msg] = mkdir (builddir);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
     endif
   endif
 
-  for i = 1:numel(tarballs)
+  for i = 1:numel (tarballs)
     filelist = unpack (tarballs{i}, builddir);
 
     ## We want the path for the package root but we can't assume that
     ## exists in the filelist (see patch #9030).  So we deduce it from
     ## the path of the DESCRIPTION file (smallest in case there's another
     ## file named DESCRIPTION somewhere).
     desc_pos = regexp (filelist, "DESCRIPTION$");
     desc_mask = ! cellfun ("isempty", desc_pos);
diff --git a/test/pkg/pkg.tst b/test/pkg/pkg.tst
--- a/test/pkg/pkg.tst
+++ b/test/pkg/pkg.tst
@@ -17,17 +17,17 @@
 ## <https://www.gnu.org/licenses/>.
 
 ############################################################
 ## Test suite for pkg.m
 ## Tests are organized first by action, and then by options.
 ## All actions should be tested, and ideally all options are tested.
 ############################################################
 
-%!shared old_prefix, old_archprefix, old_local_list, old_global_list, prefix, restorecfg, restorecache, restoreglobalcache, rmtmpdir, mfile_pkg_name, mfile_pkg_zip
+%!shared old_prefix, old_archprefix, old_local_list, old_global_list, prefix, restorecfg, restorecache, restoreglobalcache, rmtmpdir, mfile_pkg_name, mfile_pkg_tgz
 %!
 %! ## Do all tests in a temporary directory
 %! [old_prefix, old_archprefix] = pkg ("prefix");
 %! restorecfg = onCleanup (@() pkg ("prefix", old_prefix, old_archprefix));
 %! old_local_list = pkg ("local_list");
 %! restorecache = onCleanup (@() pkg ("local_list", old_local_list));
 %! old_global_list = pkg ("global_list");
 %! restoreglobalcache = onCleanup (@() pkg ("global_list", old_global_list));
@@ -37,41 +37,43 @@
 %!   error ("pkg.tst: Could not create temporary directory for pkg testing");
 %!   return;  # abort further testing
 %! endif
 %! pkg ("prefix", prefix, prefix);
 %! pkg ("local_list", fullfile (prefix, "octave_packages"));
 %! pkg ("global_list", fullfile (prefix, "octave_packages"));
 %! rmtmpdir = @onCleanup (@() confirm_recursive_rmdir (0, "local") && rmdir (prefix, "s"));
 %!
-%! ## Create zip file packages of testing directories in prefix directory
+%! ## Create tar.gz file packages of testing directories in prefix directory
 %! mfile_pkg_name = {"mfile_basic_test", "mfile_minimal_test"};
-%! mfile_pkg_zip = fullfile (prefix, strcat (mfile_pkg_name, ".zip"));
+%! mfile_pkg_tar = fullfile (prefix, strcat (mfile_pkg_name, ".tar"));
+%! mfile_pkg_tgz = strcat (mfile_pkg_tar, ".gz");
 %! for i = 1:numel (mfile_pkg_name)
-%!   zip (mfile_pkg_zip{i}, mfile_pkg_name{i});
+%!   tar (mfile_pkg_tar{i}, mfile_pkg_name{i});
+%!   gzip (mfile_pkg_tar{i});
 %! endfor
 
 ## Avoids printing to stdout when installing
 %!function silent_pkg_install (varargin)
 %!  evalc (["pkg install", sprintf(" %s", varargin{:})]);
 %!endfunction
 
 ## Action install/uninstall
 %!test
 %! for i = 1:numel (mfile_pkg_name)
-%!   silent_pkg_install (mfile_pkg_zip{i});
+%!   silent_pkg_install (mfile_pkg_tgz{i});
 %!   pkg ("uninstall", mfile_pkg_name{i});
 %! endfor
 %!
 %!error pkg ("install", "nonexistent.zip")
 
 # -local
 %!test
 %! for i = 1:numel (mfile_pkg_name)
-%!   silent_pkg_install ("-local", mfile_pkg_zip{i});
+%!   silent_pkg_install ("-local", mfile_pkg_tgz{i});
 %!   pkg ("uninstall", mfile_pkg_name{i});
 %! endfor
 
 # -forge (need check for options?)
 ## FIXME: Need test
 # We do not test this yet ... fails if no internet connection
 # use dataframe which is an mfile only package
 #%!test
@@ -83,17 +85,17 @@
 
 # -verbose
 ## FIXME: Need test
 
 ## Action load/unload (within install/uninstall)
 %!test
 %! for i = 1:numel (mfile_pkg_name)
 %!  name = mfile_pkg_name{i};
-%!  silent_pkg_install ("-local", mfile_pkg_zip{i});
+%!  silent_pkg_install ("-local", mfile_pkg_tgz{i});
 %!  unwind_protect
 %!    pkg ("load", name);
 %!    pkg ("unload", name);
 %!  unwind_protect_cleanup
 %!    pkg ("uninstall", name);
 %!  end_unwind_protect
 %! endfor
 %!
@@ -110,17 +112,17 @@
 %! [user_packages, system_packages] = pkg ("list");
 
 # -forge
 #%!test
 #%! oct_forge_pkgs = pkg ("list", "-forge");
 
 ## Action describe
 %!test
-%! silent_pkg_install ("-local", mfile_pkg_zip{1});
+%! silent_pkg_install ("-local", mfile_pkg_tgz{1});
 %! [desc, flag] = pkg ("describe", mfile_pkg_name{1});
 %! ## FIXME: this only tests that the describe command runs,
 %! ##        not that the output is in anyway correct.
 %! pkg ("uninstall", mfile_pkg_name{1});
 
 # -verbose
 ## FIXME: Need test
 
