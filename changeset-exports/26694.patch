# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549564389 0
#      Thu Feb 07 18:33:09 2019 +0000
# Node ID ce7ed7f27e180ade326cd4c800b20a452bf92291
# Parent  1da1d9e60bf3e3bb841f50d45eede3b934bbe28f
eliminate unused octave_fcn_binder class

Early binding of functions referenced by function handles can cause
trouble for overloading class methods.  This attempted optimization
has been disabled since the great call stack refactoring of 2019.  It
seems best to also remove the unused code now.

* ov-fcn-handle.h, ov-fcn-handle.cc (class octave_fcn_binder):
Delete unused class.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1902,216 +1902,22 @@ Return true if @var{x} is a function han
 %!assert (is_function_handle (finline))
 %!assert (! is_function_handle ({fh}))
 %!assert (! is_function_handle (1))
 
 %!error is_function_handle ()
 %!error is_function_handle (1, 2)
 */
 
-octave_fcn_binder::octave_fcn_binder (const octave_value& f,
-                                      const octave_value& root,
-                                      const octave_value_list& templ,
-                                      const std::vector<int>& mask,
-                                      int exp_nargin)
-  : octave_fcn_handle (f), root_handle (root), arg_template (templ),
-    arg_mask (mask), expected_nargin (exp_nargin)
-{ }
-
-octave_fcn_handle *
-octave_fcn_binder::maybe_binder (const octave_value& f,
-                                 octave::interpreter& interp)
-{
-  octave_fcn_handle *retval = nullptr;
-
-  octave_user_function *usr_fcn = f.user_function_value (false);
-  octave::tree_parameter_list *param_list = (usr_fcn ? usr_fcn->parameter_list ()
-                                                     : nullptr);
-
-  octave::tree_statement_list *cmd_list = nullptr;
-  octave::tree_expression *body_expr = nullptr;
-
-  if (usr_fcn)
-    {
-      cmd_list = usr_fcn->body ();
-      if (cmd_list)
-        {
-          // Verify that body is a single expression (always true in theory).
-          body_expr = (cmd_list->length () == 1
-                       ? cmd_list->front ()->expression () : nullptr);
-        }
-    }
-
-  if (body_expr && body_expr->is_index_expression ()
-      && ! (param_list && param_list->takes_varargs ()))
-    {
-      // It's an index expression.
-      octave::tree_index_expression *idx_expr = dynamic_cast<octave::tree_index_expression *> (body_expr);
-      octave::tree_expression *head_expr = idx_expr->expression ();
-      std::list<octave::tree_argument_list *> arg_lists = idx_expr->arg_lists ();
-      std::string type_tags = idx_expr->type_tags ();
-
-      if (type_tags.length () == 1 && type_tags[0] == '('
-          && head_expr->is_identifier ())
-        {
-          assert (arg_lists.size () == 1);
-
-          // It's a single index expression: a(x,y,....)
-          octave::tree_identifier *head_id =
-            dynamic_cast<octave::tree_identifier *> (head_expr);
-          octave::tree_argument_list *arg_list = arg_lists.front ();
-
-          // Build a map of input params to their position.
-          std::map<std::string, int> arginmap;
-          int npar = 0;
-
-          if (param_list)
-            {
-              for (auto& param_p : *param_list)
-                {
-                  octave::tree_decl_elt *elt = param_p;
-                  octave::tree_identifier *id = (elt ? elt->ident () : nullptr);
-                  if (id && ! id->is_black_hole ())
-                    arginmap[id->name ()] = npar;
-                }
-            }
-
-          octave::tree_evaluator& tw = interp.get_evaluator ();
-
-          if (arg_list && arg_list->length () > 0)
-            {
-              bool bad = false;
-              int nargs = arg_list->length ();
-              octave_value_list arg_template (nargs);
-              std::vector<int> arg_mask (nargs);
-
-              // Verify that each argument is either a named param, a constant,
-              // or a defined identifier.
-              int iarg = 0;
-              for (auto it = arg_list->begin ();
-                   it != arg_list->end (); ++it, ++iarg)
-                {
-                  octave::tree_expression *elt = *it;
-                  if (elt && elt->is_constant ())
-                    {
-                      arg_template(iarg) = tw.evaluate (elt);
-                      arg_mask[iarg] = -1;
-                    }
-                  else if (elt && elt->is_identifier ())
-                    {
-                      octave::tree_identifier *elt_id =
-                        dynamic_cast<octave::tree_identifier *> (elt);
-                      if (arginmap.find (elt_id->name ()) != arginmap.end ())
-                        {
-                          arg_mask[iarg] = arginmap[elt_id->name ()];
-                        }
-                      else if (tw.is_defined (elt_id))
-                        {
-                          arg_template(iarg) = tw.evaluate (elt_id);
-                          arg_mask[iarg] = -1;
-                        }
-                      else
-                        {
-                          bad = true;
-                          break;
-                        }
-                    }
-                  else
-                    {
-                      bad = true;
-                      break;
-                    }
-                }
-
-              octave_value root_val;
-
-              if (! bad)
-                {
-                  // If the head is a value, use it as root.
-                  if (tw.is_defined (head_id))
-                    root_val = tw.evaluate (head_id);
-                  else
-                    {
-                      // It's a name.
-                      std::string head_name = head_id->name ();
-
-                      if (head_name == "eval" || head_name == "feval")
-                        bad = true;
-                      else
-                        {
-                          // Simulate try/catch.
-                          octave::unwind_protect frame;
-                          interpreter_try (frame);
-
-                          try
-                            {
-                              root_val
-                                = octave::make_fcn_handle (interp, head_name);
-                            }
-                          catch (const octave::execution_exception&)
-                            {
-                              octave::interpreter::recover_from_exception ();
-
-                              bad = true;
-                            }
-                        }
-                    }
-                }
-
-              if (! bad)
-                {
-                  // Stash proper name tags.
-                  std::list<string_vector> arg_names = idx_expr->arg_names ();
-                  assert (arg_names.size () == 1);
-                  arg_template.stash_name_tags (arg_names.front ());
-
-                  retval = new octave_fcn_binder (f, root_val, arg_template,
-                                                  arg_mask, npar);
-                }
-            }
-        }
-    }
-
-  if (! retval)
-    retval = new octave_fcn_handle (f, octave_fcn_handle::anonymous);
-
-  return retval;
-}
-
 /*
 %!test
 %! f = @(t) eval ('2*t');
 %! assert (f (21), 42);
 */
 
-octave_value_list
-octave_fcn_binder::call (int nargout, const octave_value_list& args)
-{
-  octave_value_list retval;
-
-  if (args.length () == expected_nargin)
-    {
-      for (int i = 0; i < arg_template.length (); i++)
-        {
-          int j = arg_mask[i];
-          if (j >= 0)
-            arg_template(i) = args(j); // May force a copy...
-        }
-
-      // Make a shallow copy of arg_template, to ensure consistency throughout
-      // the following call even if we happen to get back here.
-      octave_value_list tmp (arg_template);
-      retval = octave::feval (root_handle, tmp, nargout);
-    }
-  else
-    retval = octave_fcn_handle::call (nargout, args);
-
-  return retval;
-}
-
 /*
 %!function r = __f (g, i)
 %!  r = g(i);
 %!endfunction
 %!test
 %! x = [1,2;3,4];
 %! assert (__f (@(i) x(:,i), 1), [1;3]);
 */
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -23,20 +23,18 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_ov_fcn_handle_h)
 #define octave_ov_fcn_handle_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
 #include <string>
-#include <memory>
 
 #include "ov-base.h"
-#include "ov-base-mat.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
 namespace octave
 {
   class interpreter;
 }
 
@@ -182,34 +180,9 @@ protected:
 };
 
 namespace octave
 {
   extern octave_value
   make_fcn_handle (interpreter& interp, const std::string& nm);
 }
 
-class
-OCTINTERP_API
-octave_fcn_binder : public octave_fcn_handle
-{
-private:
-  // Private ctor.
-  octave_fcn_binder (const octave_value& f, const octave_value& root,
-                     const octave_value_list& templ,
-                     const std::vector<int>& mask, int exp_nargin);
-
-public:
-
-  // Factory method.
-  static octave_fcn_handle * maybe_binder (const octave_value& f,
-                                           octave::interpreter& interp);
-
-protected:
-
-  octave_value_list call (int nargout, const octave_value_list& args);
-
-  octave_value root_handle;
-  octave_value_list arg_template;
-  std::vector<int> arg_mask;
-  int expected_nargin;
-};
 #endif
