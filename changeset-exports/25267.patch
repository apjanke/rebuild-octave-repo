# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523914773 25200
#      Mon Apr 16 14:39:33 2018 -0700
# Node ID 308a272bbe3c61185d9920b34e510293dd9b4c6d
# Parent  6f9d5153664311de8d7c1f71d638aef692f8fc50
Emit an error if binary operator functions (or, plus, etc.) are called with 1 arg (bug 53450).

* data.cc (binary_assoc_op_defun_body): Verify at least two args given or
* data.cc (Fplus): Add BIST tests for function.  Add input validation tests
for all functions which call binary_assoc_op_defun_body().

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5901,24 +5901,22 @@ binary_op_defun_body (octave_value::bina
 
 static octave_value
 binary_assoc_op_defun_body (octave_value::binary_op op,
                             octave_value::assign_op aop,
                             const octave_value_list& args)
 {
   int nargin = args.length ();
 
-  if (nargin == 0)
+  if (nargin < 2)
     print_usage ();
 
   octave_value retval;
 
-  if (nargin == 1)
-    retval = args(0);
-  else if (nargin == 2)
+  if (nargin == 2)
     retval = do_binary_op (op, args(0), args(1));
   else
     {
       retval = do_binary_op (op, args(0), args(1));
 
       for (int i = 2; i < nargin; i++)
         retval.assign (aop, args(i));
     }
@@ -5942,16 +5940,27 @@ cumulatively from left to right:
 At least one argument is required.
 @seealso{minus, uplus}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_add,
                                      octave_value::op_add_eq, args);
 }
 
+/*
+%!assert (plus (1,1), 2)
+%!assert (plus (1:3, 1), 2:4)
+%!assert (plus (1:3, 1, 3), 5:7)
+%!assert (plus (1,2,3,4,5,6,7,8,9), sum (1:9))
+
+## Test input validation for all functions which use binary_assoc_op_defun_body
+%!error plus ()
+%!error plus (1)
+*/
+
 DEFUN (minus, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} minus (@var{x}, @var{y})
 This function and @w{@tcode{@var{x} - @var{y}}} are equivalent.
 @seealso{plus, uminus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_sub, args);
