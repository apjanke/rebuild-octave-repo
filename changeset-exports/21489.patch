# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1458341548 0
#      Fri Mar 18 22:52:28 2016 +0000
# Node ID ea81c2fdd5683dcb01473fa189d1a4ae25ee0dc0
# Parent  9dbc8f8bc2d7a7be6245a2b17d4398dcbe720657
imformats: return empty instead of error if there's no support for image IO.

* __magick_read__.cc (__magick_formats__): if Octave was built without
support for image IO, return an empty struct instead of error. If we
have no support for image format, it doesn't matter if that's because
of limited configuration on the GraphicsMagick build or Octave.
Remember we can't even promise support for all formats at the same time,
that's dependent on the configuration of GraphicsMagick.
* imformats.m: add simple test for even when we were built without
support for image IO.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -2221,24 +2221,24 @@ Use @code{imfinfo} instead.\n\
 DEFUN_DLD (__magick_formats__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __magick_imformats__ (@var{formats})\n\
 Fill formats info with GraphicsMagick CoderInfo.\n\
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
-#ifdef HAVE_MAGICK
-  maybe_initialize_magick ();
-
   if (args.length () != 1 || ! args(0).is_map ())
     print_usage ();
 
   octave_map formats = args(0).map_value ();
 
+#ifdef HAVE_MAGICK
+  maybe_initialize_magick ();
+
   for (octave_idx_type idx = 0; idx < formats.numel (); idx++)
     {
       try
         {
           octave_scalar_map fmt = formats.checkelem (idx);
           Magick::CoderInfo coder (fmt.getfield ("coder").string_value ());
 
           fmt.setfield ("description", octave_value (coder.description ()));
@@ -2255,19 +2255,19 @@ Fill formats info with GraphicsMagick Co
         {
           // Exception here are missing formats. So we remove the format
           // from the structure and reduce idx.
           formats.delete_elements (idx);
           idx--;
         }
     }
 
-  return ovl (formats);
+#else
+  formats = octave_map (dim_vector (1, 0), formats.fieldnames ());
+#endif
 
-#else
-  err_disabled_feature ("imformats", "Image IO");
-#endif
+  return ovl (formats);
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -310,16 +310,30 @@ function pretty_print_formats (formats)
   yes_no_cols(! empty) = "yes";
 
   descriptions = {formats.description};
   table = cat (2, extensions(:), yes_no_cols, descriptions(:));
   printf ([template "\n"], table'{:});
 
 endfunction
 
+## This must work, even without support for image IO
+%!test
+%! formats = imformats ();
+%! assert (isstruct (formats))
+%!
+%! min_fields = {"ext", "read", "isa", "write", "info", "alpha", "description"};
+%! assert (all (ismember (min_fields, fieldnames (formats))))
+%!
+%! if (__have_feature__ ("MAGICK"))
+%!   assert (numel (formats) > 0)
+%! else
+%!   assert (numel (formats), 0)
+%! endif
+
 ## When imread or imfinfo are called, the file must exist or the
 ## function defined by imformats will never be called.  Because
 ## of this, we must create a file for the tests to work.
 
 ## changing the function that does the reading
 %!testif HAVE_MAGICK
 %! fname = [tempname() ".jpg"];
 %! def_fmt = imformats ();
