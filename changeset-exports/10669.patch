# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1275016371 25200
#      Thu May 27 20:12:51 2010 -0700
# Node ID cab3b148d4e44b206931caea969e7b830320271d
# Parent  72585f1ca7a29d3a717ab3e183df7abf99d65b06
Improve validation of input arguments for base statistics functions.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2010-05-26  Rik <octave@nomad.inbox5.com>
+
+        * statistics/base/histc.m, statistics/base/iqr.m, 
+        statistics/base/kurtosis.m, statistics/base/mode.m, 
+        statistics/base/ranks.m, statistics/base/run_count.m, 
+        statistics/base/skewness.m, statistics/base/statistics.m, 
+        statistics/base/studentize.m: Improve validation of input arguments. 
+
 2010-05-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* specfun/isprime.m: Fix and further optimize.
 
 2010-05-26  Rik <octave@nomad.inbox5.com>
 
         * plot/legend.m: Improve documentation string.
 
diff --git a/scripts/statistics/base/histc.m b/scripts/statistics/base/histc.m
--- a/scripts/statistics/base/histc.m
+++ b/scripts/statistics/base/histc.m
@@ -27,59 +27,66 @@
 ## @var{y} that fall in the histogram bins defined by @var{edges}.  This must be
 ## a vector of monotonically non-decreasing values that define the edges of the
 ## histogram bins.  So, @code{@var{n} (k)} contains the number of elements in
 ## @var{y} for which @code{@var{edges} (k) <= @var{y} < @var{edges} (k+1)}.
 ## The final element of @var{n} contains the number of elements of @var{y}
 ## that was equal to the last element of @var{edges}.
 ##
 ## When @var{y} is a @math{N}-dimensional array, the same operation as above is
-## repeated along dimension @var{dim}.  If this argument is given, the operation
-## is performed along the first non-singleton dimension.
+## repeated along dimension @var{dim}.  If not specified @var{dim} defaults
+## to the first non-singleton dimension.
 ##
 ## If a second output argument is requested an index matrix is also returned.
 ## The @var{idx} matrix has same size as @var{y}.  Each element of @var{idx}
 ## contains the index of the histogram bin in which the corresponding element
 ## of @var{y} was counted.
 ##
 ## @seealso{hist}
 ## @end deftypefn
 
 function [n, idx] = histc (data, edges, dim)
   ## Check input
-  if (nargin < 2)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  sz = size (data);
-  if (nargin < 3)
-    dim = find (sz > 1, 1);
-    if (isempty (dim))
-      dim = 1;
-    endif
+  if (!isreal (data))
+    error ("histc: Y argument must be real-valued, not complex");
   endif
 
-  if (!isreal (data))
-    error ("histc: first argument must be real a vector");
-  endif
-  
-  ## Make sure 'edges' is sorted
   num_edges = numel (edges);
   if (num_edges == 0)
-    error ("histc: edges must not be empty")
+    error ("histc: EDGES must not be empty")
   endif
 
-  if (isreal (edges))
+  if (!isreal (edges))
+    error ("histc: EDGES must be real-valued, not complex");
+  else
+    ## Make sure 'edges' is sorted
     edges = edges (:);
     if (! issorted (edges) || edges(1) > edges(end))
       warning ("histc: edge values not sorted on input");
       edges = sort (edges);
     endif
+  endif
+
+  nd = ndims (data);
+  sz = size (data);
+  if (nargin < 3)
+    ## Find the first non-singleton dimension.
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
+      dim = 1;
+    endif
   else
-    error ("histc: second argument must be a vector");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("histc: DIM must be an integer and a valid dimension");
+    endif
   endif
 
   nsz = sz;
   nsz (dim) = num_edges;
   
   ## the splitting point is 3 bins
 
   if (num_edges <= 3)
diff --git a/scripts/statistics/base/iqr.m b/scripts/statistics/base/iqr.m
--- a/scripts/statistics/base/iqr.m
+++ b/scripts/statistics/base/iqr.m
@@ -31,33 +31,33 @@
 ## Description: Interquartile range
 
 function y = iqr (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("iqr: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
   nel = numel (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("iqr: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("iqr: DIM must be an integer and a valid dimension");
     endif
   endif
 
   ## This code is a bit heavy, but is needed until empirical_inv 
   ## takes other than vector arguments.
   c = sz(dim);
   sz(dim) = 1;
   y = zeros (sz);
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -45,39 +45,35 @@
 ## Adapted-By: jwe
 
 function retval = kurtosis (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("kurtosis: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("kurtosis: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("kurtosis: DIM must be an integer and a valid dimension");
     endif
   endif
   
-  if (! ismatrix (x))
-    error ("kurtosis: x has to be a matrix or a vector");
-  endif
-
   c = sz(dim);
   sz(dim) = 1;
   idx = ones (1, nd);
   idx(dim) = c;
   x = x - repmat (mean (x, dim), idx);
   retval = zeros (sz);
   s = std (x, [], dim);
   x = sum(x.^4, dim);
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -30,33 +30,32 @@
 ## @end deftypefn
 
 function [m, f, c] = mode (x, dim)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("mode: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
-
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("mode: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("mode: DIM must be an integer and a valid dimension");
     endif
   endif
 
   sz2 = sz;
   sz2 (dim) = 1;
   sz3 = ones (1, nd);
   sz3 (dim) = sz (dim);
 
diff --git a/scripts/statistics/base/ranks.m b/scripts/statistics/base/ranks.m
--- a/scripts/statistics/base/ranks.m
+++ b/scripts/statistics/base/ranks.m
@@ -32,32 +32,32 @@
 ## even uglier!!! At least it handles NDArrays..
 
 function y = ranks (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("ranks: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("ranks: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("ranks: DIM must be an integer and a valid dimension");
     endif
   endif
 
   if (sz(dim) == 1)
     y = ones(sz);
   else
     ## The algorithm works only on dim = 1, so permute if necesary.
     if (dim != 1)
diff --git a/scripts/statistics/base/run_count.m b/scripts/statistics/base/run_count.m
--- a/scripts/statistics/base/run_count.m
+++ b/scripts/statistics/base/run_count.m
@@ -16,53 +16,52 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} run_count (@var{x}, @var{n})
 ## Count the upward runs along the first non-singleton dimension of
 ## @var{x} of length 1, 2, @dots{}, @var{n}-1 and greater than or equal 
-## to @var{n}.  If the optional argument @var{dim} is given operate
-## along this dimension
+## to @var{n}.  If the optional argument @var{dim} is given then operate
+## along this dimension.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Count upward runs
 
 function retval = run_count (x, n, dim)
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("run_count: X must be a numeric matrix or vector");
+  endif
+
+  if (!(isscalar (n) && n == round (n)) || n < 1)
+    error ("run_count: N must be a positive integer");
+  endif
+  
   nd = ndims (x);
   sz = size (x);
   if (nargin != 3)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("run_count: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("run_count: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  if (! (isscalar (n) && n == round (n)) && n > 0)
-    error ("run_count: n must be a positive integer");
-  endif
-  
-  nd = ndims (x);
   if (dim != 1)
     perm = [1 : nd];
     perm(1) = dim;
     perm(dim) = 1;
     x = permute (x, perm);
   endif
 
   sz = size (x);
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -44,39 +44,35 @@
 ## Adapted-By: jwe
 
 function retval = skewness (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("skewness: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("skewness: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("skewness: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  if (! ismatrix (x))
-    error ("skewness: x has to be a matrix or a vector");
-  endif
-
   c = sz(dim);
   idx = ones (1, nd);
   idx (dim) = c;
   x = x - repmat (mean (x, dim), idx);
   sz(dim) = 1;
   retval = zeros (sz);
   s = std (x, [], dim);
   ind = find (s > 0);
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -13,56 +13,57 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} statistics (@var{x})
+## @deftypefn  {Function File} {} statistics (@var{x})
+## @deftypefnx {Function File} {} statistics (@var{x}, @var{dim})
 ## If @var{x} is a matrix, return a matrix with the minimum, first
 ## quartile, median, third quartile, maximum, mean, standard deviation,
-## skewness and kurtosis of the columns of @var{x} as its columns.
+## skewness, and kurtosis of the columns of @var{x} as its columns.
 ##
-## If @var{x} is a vector, calculate the statistics along the 
+## If @var{x} is a vector, calculate the statistics along the first 
 ## non-singleton dimension.
+##
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute basic statistics
 
 function S = statistics (X, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(X) || ischar(X))
+    error ("statistics: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (X);
   sz = size (X);
-  nel = numel (X);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("statistics: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("statistics: DIM must be an integer and a valid dimension");
     endif
   endif
   
-  if (! ismatrix (X) || sz(dim) < 2)
-    error ("statistics: invalid argument");
+  if (sz(dim) < 2)
+    error ("statistics: dimension of X is too small (<2)");
   endif    
 
   emp_inv = quantile (X, [0.25; 0.5; 0.75], dim, 7);
 
   S = cat (dim, min (X, [], dim), emp_inv, max (X, [], dim), mean (X, dim),
            std (X, [], dim), skewness (X, dim), kurtosis (X, dim));
 
 endfunction
diff --git a/scripts/statistics/base/studentize.m b/scripts/statistics/base/studentize.m
--- a/scripts/statistics/base/studentize.m
+++ b/scripts/statistics/base/studentize.m
@@ -31,38 +31,34 @@
 ## Description: Subtract mean and divide by standard deviation
 
 function t = studentize (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
+  if (!ismatrix(x) || ischar(x))
+    error ("studentize: X must be a numeric matrix or vector");
+  endif
+
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim))
-        && dim > 0
-        && dim < (nd + 1))
-      error ("studentize: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("studentize: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  if (! ismatrix (x))
-    error ("studentize: x must be a vector or a matrix");
-  endif
-
   c = sz(dim);
   idx = ones (1, nd);
   idx(dim) = c;
   t = x - repmat (mean (x, dim), idx);
   t = t ./ repmat (max (cat (dim, std(t, [], dim), ! any (t, dim)), [], dim), idx);
 
 endfunction
