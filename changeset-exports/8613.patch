# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233128309 -3600
#      Wed Jan 28 08:38:29 2009 +0100
# Node ID 38482007c834e3ff04149ca4786d258eb007db89
# Parent  20d23d65cc8414fb9443db8d72f180add8b1c066
relax scaling in fsolve and use class-dependent default tolerances

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Use more adaptive rescaling.
+	Put back the default tolerances based on machine eps respecting
+	the used precision. Partially reflect this in the default optimset
+	values.
+
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* miscellaneous/ordefields.m: Use indexed assignment instead of a
 	loop. Fix for multidimensional cases.
 
 2009-01-27  John W. Eaton  <jwe@octave.org>
 
 	* general/arrayfun.m, image/imwrite.m, plot/axis.m, plot/clf.m,
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -72,17 +72,17 @@
 ## @seealso{fzero, optimset}
 ## @end deftypefn
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
-    "Jacobian", "off", "TolX", 1e-7, "TolF", 1e-7,
+    "Jacobian", "off", "TolX", 1.5e-8, "TolF", 1.5e-8,
     "OutputFcn", [], "Updating", "on", "FunValCheck", "off");
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
     print_usage ();
   endif    
 
@@ -106,18 +106,18 @@ function [x, fvec, info, output, fjac] =
     fcn = @(x) guarded_eval (fcn, x);
   endif
 
   ## These defaults are rather stringent. I think that normally, user
   ## prefers accuracy to performance.
 
   macheps = eps (class (x0));
 
-  tolx = optimget (options, "TolX", 1e-7);
-  tolf = optimget (options, "TolFun", 1e-7);
+  tolx = optimget (options, "TolX", sqrt (macheps));
+  tolf = optimget (options, "TolFun", sqrt (macheps));
 
   factor = 100;
   ## FIXME: TypicalX corresponds to user scaling (???)
   autodg = true;
 
   niter = 1;
   nfev = 0;
 
@@ -177,17 +177,29 @@ function [x, fvec, info, output, fjac] =
       endif
       xn = norm (dg .* x);
       ## FIXME: something better?
       delta = max (factor * xn, 1);
     endif
 
     ## Rescale if necessary.
     if (autodg)
-      dg = max (dg, jcn);
+      ## FIXME: the original minpack used the following rescaling strategy:
+      ##   dg = max (dg, jcn);
+      ## but it seems not good if we start with a bad guess yielding jacobian
+      ## columns with large norms that later decrease, because the corresponding
+      ## variable will still be overscaled. So instead, we only give the old
+      ## scaling a small momentum, but do not honor it.
+
+      dg = max (0.1*dg, jcn);
+
+      ## It also seems that in the case of fast (and inhomogeneously) changing
+      ## jacobian, the Broyden updates are of little use, so maybe we could
+      ## skip them if a big disproportional change is expected. The question is,
+      ## of course, how to define the above terms :)
     endif
 
     nfail = 0;
     nsuc = 0;
     ## Inner loop.
     while (niter <= maxiter && nfev < maxfev && ! info)
 
       if (useqr)
