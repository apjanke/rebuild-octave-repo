# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480453625 18000
#      Tue Nov 29 16:07:05 2016 -0500
# Node ID a3bd04422a870a2ad663c8a151a1d88b727d77ec
# Parent  8fb0b766f61a68acca86e1e5a544af2d750f0bf9
don't pass two dimensions to column vector resize method

* CMatrix.cc (ComplexMatrix::lssolve): Call column vector resize
method with single argument.
* dMatrix.cc (Matrix::lssolve): Likewise.
* fCMatrix.cc (FloatComplexMatrix::lssolve): Likewise.
* fMatrix.cc (FloatMatrix::lssolve): Likewise.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2655,17 +2655,17 @@ ComplexMatrix::lssolve (const ComplexCol
 
       if (rank < minmn)
         {
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
 
-          retval.resize (n, nrhs);
+          retval.resize (n);
         }
     }
 
   return retval;
 }
 
 // column vector by row vector -> matrix operations
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -2303,17 +2303,17 @@ Matrix::lssolve (const ColumnVector& b, 
       if (rank < minmn)
         {
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
         }
 
-      retval.resize (n, nrhs);
+      retval.resize (n);
     }
 
   return retval;
 }
 
 ComplexColumnVector
 Matrix::lssolve (const ComplexColumnVector& b) const
 {
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2675,17 +2675,17 @@ FloatComplexMatrix::lssolve (const Float
 
       if (rank < minmn)
         {
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
 
-          retval.resize (n, nrhs);
+          retval.resize (n);
         }
     }
 
   return retval;
 }
 
 // column vector by row vector -> matrix operations
 
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -2330,17 +2330,17 @@ FloatMatrix::lssolve (const FloatColumnV
       if (rank < minmn)
         {
           if (s.elem (0) == 0.0)
             rcon = 0.0;
           else
             rcon = s.elem (minmn - 1) / s.elem (0);
         }
 
-      retval.resize (n, nrhs);
+      retval.resize (n);
     }
 
   return retval;
 }
 
 FloatComplexColumnVector
 FloatMatrix::lssolve (const FloatComplexColumnVector& b) const
 {
