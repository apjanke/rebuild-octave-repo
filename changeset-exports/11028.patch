# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285614496 -7200
#      Mon Sep 27 21:08:16 2010 +0200
# Node ID 7d0d28aff7a925e06775a2cc9209738234a4eb59
# Parent  a2bdd9180a3c66036322907825341b391f190361
simplify lcm

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* elfun/lcm.m: Simplify.
+
 2010-09-27  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Properly crop eps image and fix tests.
 
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* testfun/runtests.m (has_tests): Recode to remove requirement for PCRE.
 	Bug #31025.
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -13,93 +13,49 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Mapping Function} {} lcm (@var{x})
-## @deftypefnx {Mapping Function} {} lcm (@var{x}, @dots{})
-## Compute the least common multiple of the elements of @var{x}, or
-## of the list of all arguments.  For example,
-##
-## @example
-## lcm (a1, @dots{}, ak)
-## @end example
-##
-## @noindent
-## is the same as
-##
-## @example
-## lcm ([a1, @dots{}, ak]).
-## @end example
-##
-## All elements must be the same size or scalar.
+## @deftypefn  {Mapping Function} {} lcm (@var{x}, @var{y})
+## @deftypefnx {Mapping Function} {} lcm (@var{x}, @var{y}, @dots{})
+## Compute the least common multiple of @var{x} and @var{y},
+## or of the list of all arguments. All elements must be the same size or scalar.
 ## @seealso{factor, gcd}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function l = lcm (varargin)
 
-  if (nargin == 0)
-    print_usage ();
-  endif
-
-  if (nargin == 1)
-    a = varargin{1};
-
-    if (round (a) != a)
-      error ("lcm: all arguments must be integer");
+  if (nargin > 1)
+    if (common_size (varargin{:}) != 0)
+      error ("lcm: all args must be of the same size or scalar");
+    elseif (! all (cellfun (@isnumeric, varargin)))
+      error ("lcm: all arguments must be numeric");
     endif
 
-    if (any (a) == 0)
-      l = 0;
-    else
-      a = abs (a);
-      l = a (1);
-      for k = 1:(length (a) - 1)
-        l = l * a(k+1) / gcd (l, a(k+1));
-      endfor
-    endif
-  else
-    
     l = varargin{1};
-    sz = size (l);
-    nel = numel (l);
-
     for i = 2:nargin
-      a = varargin{i};
-
-      if (size (a) != sz)
-        if (nel == 1)
-          sz = size (a);
-          nel = numel (a);
-        elseif (numel (a) != 1)
-          error ("lcm: all arguments must be the same size or scalar");
-        endif
-      endif
-
-      if (round (a) != a)
-        error ("lcm: all arguments must be integer");
-      endif
-
-      idx = find (l == 0 || a == 0);
-      a = abs (a);
-      l = l .* a ./ gcd (l, a);
-      l(idx) = 0;
+      x = varargin{i};
+      msk = l == 0 & x == 0;
+      l .*= x ./ gcd (l, x);
+      l(msk) = 0;
     endfor
+  else
+    print_usage ();
   endif
 
 endfunction
 
-%!assert(lcm (3, 5, 7, 15) == lcm ([3, 5, 7, 15]) && lcm ([3, 5, 7,15]) == 105);
+%!assert(lcm (3, 5, 7, 15) == 105);
 
 %!error lcm ();
 
 %!test
 %! s.a = 1;
 %! fail("lcm (s)");
 
