# HG changeset patch
# User jwe
# Date 1165428013 0
#      Wed Dec 06 18:00:13 2006 +0000
# Node ID 512d72ee321f8a61b7632dfd61b4137b9ba41688
# Parent  e5ed0d1edddc9fdc4c6f27d567504b84b1182f0b
[project @ 2006-12-06 18:00:13 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2006-12-06  Søren Hauberg  <hauberg@gmail.com>
+
+	* pkg/pkg.m (unload_packages): New function.
+	(pkg): Handle unload action.
+
+	* __errplot__.m: Add missing semicolon.
+
 2006-11-30  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/mexext.m: New file.
 
 2006-11-29  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m: Add local_list and global_list options that allow the
 	location of package lists to be probed and set.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -49,16 +49,20 @@
 ## pkg load image
 ## @end example
 ## @noindent
 ## adds the @code{image} package to the path. It is possible to load all
 ## installed packages at once with the command
 ## @example
 ## pkg load all
 ## @end example
+## @item unload
+## Removes named packages from the path. After unloading a package it is
+## no longer possible to use the functions provided by the package.
+## This command behaves like the @code{load} command.
 ## @item list
 ## Show a list of the currently installed packages. By requesting one or two
 ## output argument it is possible to get a list of the currently installed
 ## packages. For example,
 ## @example
 ## installed_packages = pkg list;
 ## @end example
 ## @noindent
@@ -132,17 +136,18 @@ function [local_packages, global_package
     endif
     files = {};
     deps = true;
     action = "none";
     for i = 1:length(varargin)
         switch (varargin{i})
             case "-nodeps"
                 deps = false;
-            case {"list", "install", "uninstall", "load", "prefix", "local_list", "global_list"}
+            case {"list", "install", "uninstall", "load", "unload", ...
+                  "prefix", "local_list", "global_list"}
                 action = varargin{i};
             otherwise
                 files{end+1} = varargin{i};
         endswitch
     endfor
     
     ## Take action
     switch (action)
@@ -166,16 +171,21 @@ function [local_packages, global_package
                 error("You must specify at least one package when calling 'pkg uninstall'");
             endif
             uninstall(files, deps, local_list, global_list);
         case "load"
             if (length(files) == 0)
                 error("You must specify at least one package or 'all' when calling 'pkg load'");
             endif
             load_packages(files, deps, local_list, global_list);
+        case "unload"
+            if (length(files) == 0)
+                error("You must specify at least one package or 'all' when calling 'pkg unload'");
+            endif
+            unload_packages(files, deps, local_list, global_list);
         case "prefix"
             if (length(files) == 0 && nargout == 0)
                 disp(prefix);
             elseif (length(files) == 0 && nargout == 1)
                 local_packages = prefix;
             elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
                 prefix = files{1};
                 if (!strcmp(prefix(end), "/")) prefix(end+1) = "/"; endif
@@ -1163,16 +1173,57 @@ function load_packages(files, handle_dep
     ## Add local binaries, if any, to the EXEC_PATH
     for i = 1:length(dirs)
        if (exist ([dirs{i} "/bin"],"dir"))
          EXEC_PATH ([dirs{i} "/bin:" EXEC_PATH()]);
        endif
     endfor
 endfunction
 
+function unload_packages(files, handle_deps, local_list, global_list)
+    installed_packages = installed_packages(local_list, global_list);
+    num_packages = length(installed_packages);
+    
+    ## Read package names and installdirs into a more convenient format
+    pnames = pdirs = cell(1, num_packages);
+    for i = 1:num_packages
+        pnames{i} = installed_packages{i}.name;
+        pdirs{i} = installed_packages{i}.dir;
+        pdeps{i} = installed_packages{i}.depends;
+    endfor
+    
+    ## Get the current octave path
+    p = split_by(path(), pathsep());
+
+    ## unload all
+    if (length(files) == 1 && strcmp(files{1}, "all"))
+        dirs = pdirs;
+    ## unload package_name1 ...
+    else
+        dirs = {};
+        for i = 1:length(files)
+            idx = strcmp(pnames, files{i});
+            if (!any(idx))
+                error("Package %s is not installed", files{i});
+            endif
+            dirs{end+1} = pdirs{idx};
+        endfor
+    endif
+
+    ## Unload the packages
+    for i = 1:length(dirs)
+        d = dirs{i};
+        idx = strcmp(p, d);
+        if (any(idx))
+            rmpath(d);
+            # XXX: We should also check if we need to remove items from EXEC_PATH
+        endif
+    endfor
+endfunction
+
 function [status_out, msg_out] = rm_rf (dir)
   crr = confirm_recursive_rmdir ();
   unwind_protect
     confirm_recursive_rmdir (false);
     [status, msg] = rmdir (dir, "s");
   unwind_protect_cleanup
     confirm_recursive_rmdir (crr);
   end_unwind_protect
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -49,17 +49,17 @@ function __errplot__ (fstr, a1, a2, a3, 
 
   j = __plot_data_offset__{cf}(mxi,myi);
 
   [fmt, key] = __pltopt__ ("__errplot__", fstr);
 
   [len, nplots] = size (a1);
 
   for i = 1:nplots
-    ifmt = fmt{1+mod(i-1,numel(fmt))}
+    ifmt = fmt{1+mod(i-1,numel(fmt))};
     switch (nargin - 1)
       case 2
 	tmp = [(1:len)', a1(:,i), a2(:,i)];
       case 3
 	tmp = [a1(:,i), a2(:,i), a3(:,i)];
       case 4
 	if (index (ifmt, "boxxy") || index (ifmt, "xyerr"))
 	  tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i)];
