# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225602911 -3600
#      Sun Nov 02 06:15:11 2008 +0100
# Node ID f7d44b6a74df4e81acfa47c6b74bed845ffb5bb9
# Parent  4b9bce36109bac79a8a6a27e0cb475e453de70a7
fix out-of-bounds checks in null assignments

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-11-02  Jaroslav Hajek <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::is_complement): Set resulting extent
+	correctly.
+
 2008-10-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.h (idx_vector::idx_range_rep::extent): Don't change
 	extent when len is zero.
 	* idx-vector.h (idx_vector::idx_range_rep::idx_range_rep (void)):
 	Create empty range by default.
 
 2008-10-30  Jaroslav Hajek <highegg@gmail.com>
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -513,17 +513,19 @@ idx_vector::complement (octave_idx_type 
           cnt--;
         }
     }
 
   octave_idx_type len = cnt, *data = new octave_idx_type[len];
   for (octave_idx_type i = 0, j = 0; i < n; i++)
     if (left[i]) data[j++] = i;
 
-  return new idx_vector_rep (data, len, data[len-1], dim_vector (1, len), DIRECT);
+  return new idx_vector_rep (data, len, 
+                             len ? data[len-1]+1 : 0, 
+                             dim_vector (1, len), DIRECT);
 }
 
 octave_idx_type 
 idx_vector::freeze (octave_idx_type z_len, const char *tag, bool resize_ok)
 {
   if (! resize_ok && extent (z_len) > z_len)
     {
       (*current_liboctave_error_handler)
