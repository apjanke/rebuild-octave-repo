# HG changeset patch
# User jwe
# Date 862371420 0
#      Wed Apr 30 03:37:00 1997 +0000
# Node ID 5ed08801583970244ae5253cd0f308aabfce0a06
# Parent  0d79a8c11a2bcd9cadad28e69d6f9cd9306052b9
[project @ 1997-04-30 03:26:56 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -49,18 +49,16 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
-#include "pt-const.h"
-#include "pt-exp.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
@@ -829,26 +827,24 @@ display the definition of each NAME that
 		output_buf << argv[i] << " is a builtin function\n";
 	      else if (sym_rec->is_user_variable ()
 		       || sym_rec->is_builtin_variable ())
 		{
 		  octave_symbol *defn = sym_rec->def ();
 
 		  assert (defn && defn->is_constant ());
 
-		  tree_constant *tmp = static_cast<tree_constant *> (defn);
-
 		  int var_ok = 1;
 
 		  // XXX FIXME XXX -- need to handle structure
 		  // references correctly.
 
-		  if (tmp)
+		  if (defn)
 		    {
-		      octave_value vtmp = tmp->value ();
+		      octave_value vtmp = defn->eval ();
 
 		      if (vtmp.is_map ())
 			error ("type: operations on structs not implemented");
 		    }
 
 		  if (! error_state)
 		    {
 		      if (nargout == 0 && ! quiet)
@@ -871,17 +867,17 @@ display the definition of each NAME that
 				output_buf << "type: `" << id
 					   << "' has unknown type!\n";
 			    }
 			}
 
 		      tree_print_code tpc (output_buf, "", pr_orig_txt);
 
 		      // XXX FIXME XXX
-		      // tmp->accept (tpc);
+		      // defn->accept (tpc);
 
 		      if (nargout == 0)
 			output_buf << "\n";
 		    }
 		}
 	      else
 		output_buf << "type: `" << argv[i] << "' has unknown type!\n";
 	    }
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1097,21 +1097,23 @@ get_user_input (const octave_value_list&
 	}
       else if (read_as_string)
 	{
 	  retval = input_buf;
 	}
       else
 	{
 	  int parse_status = 0;
+
 	  retval = eval_string (input_buf, true, parse_status);
+
 	  if (retval.is_defined ())
 	    {
 	      if (debug)
-		retval.print ();
+		retval.print (octave_stdout);
 	    }
 	  else
 	    retval = Matrix ();
 	}
     }
   else
     error ("input: reading user-input failed!");
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -581,16 +581,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 "/"	{ BIN_OP_RETURN ('/', false); }
 "\\"	{ BIN_OP_RETURN (LEFTDIV, false); }
 ";"	{ BIN_OP_RETURN (';', true); }
 ","	{ BIN_OP_RETURN (',', true); }
 {POW}	{ BIN_OP_RETURN (POW, false); }
 "="	{ BIN_OP_RETURN ('=', true); }
 "&&"	{ BIN_OP_RETURN (EXPR_AND_AND, false); }
 "||"	{ BIN_OP_RETURN (EXPR_OR_OR, false); }
+"<<"	{ BIN_OP_RETURN (LSHIFT, false); }
+">>"	{ BIN_OP_RETURN (RSHIFT, false); }
 
 {NOT} {
     if (lexer_flags.plotting && ! lexer_flags.in_plot_range)
       lexer_flags.past_plot_range = true;
     BIN_OP_RETURN (EXPR_NOT, false);
   }
 
 "+" { 
@@ -633,16 +635,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 "*="	{ BIN_OP_RETURN (MUL_EQ, false); }
 "/="	{ BIN_OP_RETURN (DIV_EQ, false); }
 ".+="	{ BIN_OP_RETURN (ADD_EQ, false); }
 ".-="	{ BIN_OP_RETURN (SUB_EQ, false); }
 ".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
 "./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
 "&="	{ BIN_OP_RETURN (AND_EQ, false); }
 "|="	{ BIN_OP_RETURN (OR_EQ, false); }
+"<<="	{ BIN_OP_RETURN (LSHIFT_EQ, false); }
+">>="	{ BIN_OP_RETURN (RSHIFT_EQ, false); }
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     current_input_column++;
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "oct-obj.h"
+#include "pager.h"
 #include "pt-const.h"
 #include "pt-walk.h"
 
 // We are likely to have a lot of tree_constant objects to allocate,
 // so make the grow_size large.
 octave_allocator
 tree_constant::allocator (sizeof (tree_constant), 1024);
 
@@ -47,17 +48,17 @@ tree_constant::print (ostream& os, bool 
   else
     val.print (os, pr_as_read_syntax);
 }
 
 octave_value
 tree_constant::eval (bool print_result)
 {
   if (print_result)
-    val.print ();
+    val.print (octave_stdout);
 
   return val;
 }
 
 octave_value_list
 tree_constant::eval (bool, int, const octave_value_list& idx)
 {
   return (idx.length () > 0) ? index (idx) : val;
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -84,17 +84,17 @@ public:
   virtual void mark_in_parens (void) { in_parens++; }
 
   virtual bool is_in_parens (void) { return in_parens; }
 
   virtual void mark_for_possible_ans_assign (void);
 
   virtual octave_value eval (bool print = false) = 0;
 
-  virtual const char *oper (void) const { return "<unknown>"; }
+  virtual string oper (void) const { return "<unknown>"; }
 
   virtual string original_text (void) const;
 
 protected:
 
   // Nonzero if this expression appears inside parentheses.
   int in_parens;
 
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -99,43 +99,44 @@ tree_prefix_expression::eval (bool print
 	      if (error_state)
 		eval_error ();
 	    }
 	}
     }
   return retval;
 }
 
-const char *
+string
 tree_prefix_expression::oper (void) const
 {
-  static const char *op;
+  string retval = "<unknown>";
+
   switch (etype)
     {
     case increment:
-      op = "++";
+      retval = "++";
       break;
 
     case decrement:
-      op = "--";
+      retval = "--";
       break;
 
     default:
-      op = "<unknown>";
       break;
     }
-  return op;
+
+  return retval;
 }
 
 void
 tree_prefix_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating prefix operator `%s' near line %d, column %d",
-	     oper (), line (), column ());
+	     oper () . c_str (), line (), column ());
 }
 
 void
 tree_prefix_expression::accept (tree_walker& tw)
 {
   tw.visit_prefix_expression (*this);
 }
 
@@ -178,43 +179,44 @@ tree_postfix_expression::eval (bool prin
 	  retval = octave_value ();
 	  if (error_state)
 	    eval_error ();
 	}
     }
   return retval;
 }
 
-const char *
+string
 tree_postfix_expression::oper (void) const
 {
-  static const char *op;
+  string retval = "<unknown>";
+
   switch (etype)
     {
     case increment:
-      op = "++";
+      retval = "++";
       break;
 
     case decrement:
-      op = "--";
+      retval = "--";
       break;
 
     default:
-      op = "<unknown>";
       break;
     }
-  return op;
+
+  return retval;
 }
 
 void
 tree_postfix_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating postfix operator `%s' near line %d, column %d",
-	     oper (), line (), column ());
+	     oper () . c_str (), line (), column ());
 }
 
 void
 tree_postfix_expression::accept (tree_walker& tw)
 {
   tw.visit_postfix_expression (*this);
 }
 
@@ -265,51 +267,52 @@ tree_unary_expression::eval (bool /* pri
 	      eval_error ();
 	    }
 	}
     }
 
   return retval;
 }
 
-const char *
+string
 tree_unary_expression::oper (void) const
 {
-  static const char *op;
+  string retval = "<unknown>";
+
   switch (etype)
     {
     case unot:
-      op = "!";
+      retval = "!";
       break;
 
     case uminus:
-      op = "-";
+      retval = "-";
       break;
 
     case transpose:
-      op = ".'";
+      retval = ".'";
       break;
 
     case hermitian:
-      op = "'";
+      retval = "'";
       break;
 
     default:
-      op = "<unknown>";
       break;
     }
-  return op;
+
+  return retval;
 }
 
 void
 tree_unary_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating unary operator `%s' near line %d, column %d",
-	     oper (), line (), column ());
+	     oper () . c_str (), line (), column ());
 }
 
 void
 tree_unary_expression::accept (tree_walker& tw)
 {
   tw.visit_unary_expression (*this);
 }
 
@@ -352,29 +355,28 @@ tree_binary_expression::eval (bool /* pr
 	eval_error ();
     }
   else
     eval_error ();
 
   return retval;
 }
 
-const char *
+string
 tree_binary_expression::oper (void) const
 {
-  // XXX FIXME XXX
-  return octave_value::binary_op_as_string (etype) . c_str ();
+  return octave_value::binary_op_as_string (etype);
 }
 
 void
 tree_binary_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating binary operator `%s' near line %d, column %d",
-	     oper (), line (), column ());
+	     oper () . c_str (), line (), column ());
 }
 
 void
 tree_binary_expression::accept (tree_walker& tw)
 {
   tw.visit_binary_expression (*this);
 }
 
@@ -443,35 +445,36 @@ tree_boolean_expression::eval (bool /* p
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
 
-const char *
+string
 tree_boolean_expression::oper (void) const
 {
-  static const char *op;
+  string retval = "<unknown>";
+
   switch (etype)
     {
     case bool_and:
-      op = "&&";
+      retval = "&&";
       break;
 
     case bool_or:
-      op = "||";
+      retval = "||";
       break;
 
     default:
-      op = "<unknown>";
       break;
     }
-  return op;
+
+  return retval;
 }
 
 // Simple assignment expressions.
 
 tree_simple_assignment_expression::tree_simple_assignment_expression
   (tree_identifier *i, tree_expression *r, bool plhs, bool ans_assign,
    int l, int c, octave_value::assign_op t)
     : tree_expression (l, c), lhs_idx_expr (0),
@@ -585,17 +588,17 @@ tree_simple_assignment_expression::eval 
 	}
     }
 
   // Return value is RHS value, but the value we print is the complete
   // LHS value so that expressions like x(2) = 2 (for x previously
   // undefined) print b = [ 0; 2 ], which is more Matlab-like.
 
   if (! error_state && print && lhs_val.is_defined ())
-    lhs_val.print_with_name (lhs->name ());
+    lhs_val.print_with_name (octave_stdout, lhs->name ());
 
   return retval;
 }
 
 void
 tree_simple_assignment_expression::eval_error (void)
 {
   if (error_state > 0)
@@ -604,20 +607,20 @@ tree_simple_assignment_expression::eval_
       int c = column ();
 
       if (l != -1 && c != -1)
 	::error ("evaluating assignment expression near line %d, column %d",
 		 l, c);
     }
 }
 
-const char *
+string
 tree_simple_assignment_expression::oper (void) const
 {
-  return octave_value::assign_op_as_string (etype) . c_str ();
+  return octave_value::assign_op_as_string (etype);
 }
 
 void
 tree_simple_assignment_expression::accept (tree_walker& tw)
 {
   tw.visit_simple_assignment_expression (*this);
 }
 
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -67,17 +67,17 @@ public:
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
   bool is_prefix_expression (void) const
     { return true; }
 
-  const char *oper (void) const;
+  string oper (void) const;
 
   tree_identifier *ident (void) { return id; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Currently, a prefix expression can only apply to an identifier.
@@ -109,17 +109,17 @@ public:
     : tree_expression (l, c), id (i), etype (t) { }
 
   ~tree_postfix_expression (void);
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
-  const char *oper (void) const;
+  string oper (void) const;
 
   tree_identifier *ident (void) { return id; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Currently, a prefix expression can only apply to an identifier.
@@ -154,17 +154,17 @@ public:
 
   ~tree_unary_expression (void)
     { delete op; }
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
-  const char *oper (void) const;
+  string oper (void) const;
 
   bool is_prefix_op (void) { return (etype == unot || etype == uminus); }
 
   tree_expression *operand (void) { return op; }
 
   void accept (tree_walker& tw);
 
 private:
@@ -199,17 +199,17 @@ public:
       delete op_lhs;
       delete op_rhs;
     }
 
   octave_value eval (bool print = false);
 
   void eval_error (void);
 
-  const char *oper (void) const;
+  string oper (void) const;
 
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
   void accept (tree_walker& tw);
 
 protected:
 
@@ -243,17 +243,17 @@ public:
   tree_boolean_expression (tree_expression *a, tree_expression *b,
 			   int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
   ~tree_boolean_expression (void) { }
 
   octave_value eval (bool print = false);
 
-  const char *oper (void) const;
+  string oper (void) const;
 
 private:
 
   // The type of the expression.
   type etype;
 };
 
 // Simple assignment expressions.
@@ -297,17 +297,17 @@ public:
 
   octave_value eval (bool print = false);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   void eval_error (void);
 
-  const char *oper (void) const;
+  string oper (void) const;
 
   tree_indirect_ref *left_hand_side (void) { return lhs; }
 
   tree_argument_list *lhs_index (void) { return index; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   void accept (tree_walker& tw);
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -27,20 +27,21 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "oct-fcn.h"
 #include "oct-sym.h"
-#include "symtab.h"
+#include "pager.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-walk.h"
+#include "symtab.h"
 #include "utils.h"
 
 // Symbols from the symbol table.
 
 string
 tree_identifier::name (void) const
 {
   string retval;
@@ -285,17 +286,17 @@ tree_identifier::eval (bool print)
 
   if (! error_state)
     {
       if (retval.is_defined ())
 	{
 	  if (maybe_do_ans_assign && ! object_to_eval->is_constant ())
 	    bind_ans (retval, print);
 	  else if (print)
-	    retval.print_with_name (name ());
+	    retval.print_with_name (octave_stdout, name ());
 	}
       else if (object_to_eval && object_to_eval->is_constant ())
 	eval_undefined_error ();
     }
 
   return retval;
 }
 
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -29,21 +29,21 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-sym.h"
 #include "pager.h"
-#include "symtab.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-walk.h"
+#include "symtab.h"
 #include "utils.h"
 
 // Indirect references to values (structure elements).
 
 tree_indirect_ref::~tree_indirect_ref (void)
 {
   if (! preserve_ident)
     delete id;
@@ -95,17 +95,17 @@ tree_indirect_ref::eval (bool print)
     {
       retval = value ();
 
       if (! error_state && retval.is_defined ())
 	{
 	  if (maybe_do_ans_assign)
 	    bind_ans (retval, print);
 	  else if (print)
-	    retval.print_with_name (name ());
+	    retval.print_with_name (octave_stdout, name ());
 	}
     }
 
   return retval;
 }
 
 octave_value_list
 tree_indirect_ref::eval (bool print, int nargout,
diff --git a/src/pt-mvr.cc b/src/pt-mvr.cc
--- a/src/pt-mvr.cc
+++ b/src/pt-mvr.cc
@@ -330,17 +330,18 @@ tree_multi_assignment_expression::eval (
 
 	      if (error_state)
 		break;
 
 	      if (print && pad_after)
 		octave_stdout << "\n";
 
 	      if (print)
-		results(i).print_with_name (lhs_expr->name (), 0);
+		results(i).print_with_name (octave_stdout,
+					    lhs_expr->name (), 0);
 
 	      pad_after = true;
 
 	      i++;
 	    }
 	  else
 	    {
 	      tree_simple_assignment_expression tmp_expr
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1156,17 +1156,21 @@ bool tree_print_code::beginning_of_line 
 
 void
 tree_print_code::indent (void)
 {
   assert (curr_print_indent_level >= 0);
  
   if (beginning_of_line)
     {
-      os.form ("%s%*s", prefix.c_str (), curr_print_indent_level, "");
+      os << prefix;
+
+      for (int i = 0; i < curr_print_indent_level; i++)
+	os << " ";
+
       beginning_of_line = false;
     }
 }
 
 // All print_code() functions should use this to print new lines.
 
 void
 tree_print_code::newline (void)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -69,19 +69,17 @@ Software Foundation, 59 Temple Place - S
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "oct-sym.h"
 #include "oct-builtin.h"
 #include "oct-mapper.h"
 #include "oct-usr-fcn.h"
-#include "pt-const.h"
 #include "oct-obj.h"
-#include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-mat.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "pr-output.h"
 #include "syscalls.h"
 #include "toplev.h"
@@ -1002,33 +1000,33 @@ link_to_global_variable (symbol_record *
       error ("can't make static variable `%s' global", nm.c_str ());
       return;
     }
 
   // There must be a better way to do this.   XXX FIXME XXX
 
   if (sr->is_variable ())
     {
-      // Would be nice not to have this cast.  XXX FIXME XXX
+      octave_symbol *tmp = sr->def ();
 
-      tree_constant *tmp = (tree_constant *) sr->def ();
+      octave_value vtmp;
+
       if (tmp)
-	tmp = new tree_constant (*tmp);
-      else
-	tmp = new tree_constant ();
-      gsr->define (tmp);
+	vtmp = tmp->eval ();
+
+      gsr->define (vtmp);
     }
   else
     sr->clear ();
 
   // If the global symbol is currently defined as a function, we need
   // to hide it with a variable.
 
   if (gsr->is_function ())
-    gsr->define ((tree_constant *) 0);
+    gsr->define (octave_value ());
 
   sr->alias (gsr, 1);
   sr->mark_as_linked_to_global ();
 }
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the builtin variable of the same name.
 
@@ -1493,26 +1491,20 @@ alias_builtin (const string& alias, cons
 
 // Defining variables.
 
 void
 bind_ans (const octave_value& val, bool print)
 {
   static symbol_record *sr = global_sym_tab->lookup ("ans", true);
 
-  tree_identifier *ans_id = new tree_identifier (sr);
-  tree_constant *tmp = new tree_constant (val);
+  sr->define (val);
 
-  // XXX FIXME XXX -- making ans_id static, passing its address to
-  // tree_simple_assignment_expression along with a flag to not delete
-  // it seems to create a memory leak.  Hmm.
-
-  tree_simple_assignment_expression tmp_ass (ans_id, tmp, false, true);
-
-  tmp_ass.eval (print);
+  if (print)
+    val.print_with_name (octave_stdout, "ans");
 }
 
 void
 bind_global_error_variable (void)
 {
   *error_message_buffer << ends;
 
   char *error_text = error_message_buffer->str ();
