# HG changeset patch
# User jwe
# Date 1095280871 0
#      Wed Sep 15 20:41:11 2004 +0000
# Node ID fd4d0aab09d77c7c146b2063e5a939f7aadcabb1
# Parent  48d0defe944554ec53d43208267948a11426e9cf
[project @ 2004-09-15 20:41:11 by jwe]

diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -75,39 +75,39 @@ struct vec_index
 {
   double vec;
   int indx;
 };
 
 bool
 double_compare (double a, double b)
 {
-  return (xisnan (b) || (a < b));
+  return (xisnan(b) || (a < b));
 }
 
 bool
 double_compare (vec_index *a, vec_index *b)
 {
-  return (xisnan (b->vec) || (a->vec < b->vec));
+  return (xisnan(b->vec) || (a->vec < b->vec));
 }
 
 template class octave_sort<double>;
 template class octave_sort<vec_index *>;
 #endif
 
 struct complex_vec_index
 {
   Complex vec;
   int indx;
 };
 
 bool
 complex_compare (complex_vec_index *a, complex_vec_index *b)
 {
-  return (xisnan (b->vec) || (abs (a->vec) < abs (b->vec)));
+  return (xisnan(b->vec) || (abs(a->vec) < abs(b->vec)));
 }
 
 template class octave_sort<complex_vec_index *>;
 
 static octave_value_list
 mx_sort (NDArray &m, bool return_idx, int dim)
 {
   octave_value_list retval;
@@ -189,17 +189,17 @@ mx_sort (NDArray &m, bool return_idx, in
 	      for (unsigned int k = 0, l = ns - i + 1; l < ns; l++, k++)
 		{
 		  v[l*stride + offset] = octave_NaN;
 		  idx(l*stride + offset) = itmp[k];
 		}
 	    }
 	}
 
-      retval(1) = idx;
+      retval (1) = idx;
     }
   else
     {
       octave_sort<unsigned EIGHT_BYTE_INT> ieee754_sort;
  
       if (stride == 1)
 	{
 	  for (unsigned int j = 0; j < iter; j++)
@@ -343,17 +343,17 @@ mx_sort (NDArray &m, bool return_idx, in
 	      
 	      for (unsigned int i = 0; i < ns; i++)
 		{
 		  v[i*stride+offset] = vi[i]->vec;
 		  idx(i*stride+offset) = vi[i]->indx;
 		}
 	    }
 	}
-      retval(1) = idx;
+      retval (1) = idx;
     }
   else
     {
       double *v = m.fortran_vec ();
       octave_sort<double> double_sort (double_compare);
 
       if (stride == 1)
 	for (unsigned int j = 0; j < iter; j++)
@@ -480,17 +480,17 @@ mx_sort (ComplexNDArray &m, bool return_
 	    {
 	      for (unsigned int i = 0; i < ns; i++)
 		v[i*stride + offset] = vi[i]->vec;
 	    }
 	}
     }
 
   if (return_idx)
-    retval(1) = idx;
+    retval (1) = idx;
   
   retval(0) = m;
 
   return retval;
 }
 
 struct char_vec_index
 {
@@ -514,17 +514,17 @@ mx_sort (charNDArray &m, bool return_idx
 
   if (m.length () < 1)
     return retval;
 
   dim_vector dv = m.dims ();
   unsigned int ns = dv (dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
-  for (unsigned int i = 0; i < static_cast <unsigned int> (dim); i++)
+  for (unsigned int i = 0; i < (unsigned int)dim; i++)
     stride *= dv(i);
 
   if (return_idx)
     {
       char *v = m.fortran_vec ();
       octave_sort<char_vec_index *> indexed_char_sort (char_compare);
 
       OCTAVE_LOCAL_BUFFER (char_vec_index *, vi, ns);
@@ -580,17 +580,17 @@ mx_sort (charNDArray &m, bool return_idx
 	      
 	      for (unsigned int i = 0; i < ns; i++)
 		{
 		  v[i*stride+offset] = vi[i]->vec;
 		  idx(i*stride+offset) = vi[i]->indx;
 		}
 	    }
 	}
-      retval(1) = idx;
+      retval (1) = idx;
     }
   else
     {
       char *v = m.fortran_vec ();
       octave_sort<char> char_sort;
 
       if (stride == 1)
 	for (unsigned int j = 0; j < iter; j++)
