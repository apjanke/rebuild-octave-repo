# HG changeset patch
# User jwe
# Date 773505102 0
#      Wed Jul 06 14:31:42 1994 +0000
# Node ID 4481fdfb01b4de54eba02092d1463b66bca38a76
# Parent  b7539a7224cc9407b27e92867f1cbd0b2dc03f3e
[project @ 1994-07-06 14:31:07 by jwe]

diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "variables.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "pager.h"
 #include "f-dassl.h"
 
 // Global pointer for user defined function required by dassl.
-static tree *dassl_fcn;
+static tree_fvc *dassl_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_dassl_2 (const tree_constant *args, int nargin, int nargout)
 {
   return dassl (args, nargin, nargout);
 }
 
@@ -89,19 +89,19 @@ dassl_user_function (const ColumnVector&
       double d1 = x.elem (0);
       double d2 = xdot.elem (0);
       tree_constant state (d1);
       tree_constant deriv (d2);
       args[1] = state;
       args[2] = deriv;
     }
 
-  if (dassl_fcn != NULL_TREE)
+  if (dassl_fcn != (tree_fvc *) NULL)
     {
-      tree_constant *tmp = dassl_fcn->eval (args, 4, 1, 0);
+      tree_constant *tmp = dassl_fcn->eval (0, 1, args, 4);
 
       delete [] args;
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
@@ -128,17 +128,17 @@ dassl_user_function (const ColumnVector&
 tree_constant *
 dassl (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   dassl_fcn = is_valid_function (args[1], "dassl", 1);
-  if (dassl_fcn == NULL_TREE
+  if (dassl_fcn == (tree_fvc *) NULL
       || takes_correct_nargs (dassl_fcn, 4, "dassl", 1) != 1)
     return retval;
 
   ColumnVector state = args[2].to_vector ();
   ColumnVector deriv = args[3].to_vector ();
   ColumnVector out_times = args[4].to_vector ();
   ColumnVector crit_times;
   int crit_times_set = 0;
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "variables.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "pager.h"
 #include "f-fsolve.h"
 
 // Global pointer for user defined function required by hybrd1.
-static tree *fsolve_fcn;
+static tree_fvc *fsolve_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_fsolve_2 (const tree_constant *args, int nargin, int nargout)
 {
   return fsolve (args, nargin, nargout);
 }
 
@@ -105,19 +105,19 @@ fsolve_user_function (const ColumnVector
     }
   else
     {
       double d = x.elem (0);
       tree_constant vars (d);
       args[1] = vars;
     }
 
-  if (fsolve_fcn != NULL_TREE)
+  if (fsolve_fcn != (tree_fvc *) NULL)
     {
-      tree_constant *tmp = fsolve_fcn->eval (args, 2, 1, 0);
+      tree_constant *tmp = fsolve_fcn->eval (0, 1, args, 2);
       delete [] args;
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_vector ();
 
 	  delete [] tmp;
 
 	  if (retval.length () <= 0)
@@ -136,17 +136,17 @@ fsolve_user_function (const ColumnVector
 tree_constant *
 fsolve (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   fsolve_fcn = is_valid_function (args[1], "fsolve", 1);
-  if (fsolve_fcn == NULL_TREE
+  if (fsolve_fcn == (tree_fvc *) NULL
       || takes_correct_nargs (fsolve_fcn, 2, "fsolve", 1) != 1)
     return retval;
 
   ColumnVector x = args[2].to_vector ();
 
   if (nargin > 3)
     warning ("fsolve: ignoring extra arguments");
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -47,16 +47,18 @@ static SLStack <token*> token_stack;
 
 #include "user-prefs.h"
 #include "variables.h"
 #include "octave.h"
 #include "symtab.h"
 #include "error.h"
 #include "utils.h"
 #include "tree.h"
+#include "tree-plot.h"
+#include "tree-const.h"
 #include "y.tab.h"
 #include "parse.h"
 #include "lex.h"
 
 // Nonzero means we think we are looking at a set command.
 static int doing_set = 0;
 
 // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "variables.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "pager.h"
 #include "f-lsode.h"
 
 // Global pointer for user defined function required by lsode.
-static tree *lsode_fcn;
+static tree_fvc *lsode_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_lsode_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lsode (args, nargin, nargout);
 }
 
@@ -78,19 +78,19 @@ lsode_user_function (const ColumnVector&
     }
   else
     {
       double d = x.elem (0);
       tree_constant state (d);
       args[1] = state;
     }
 
-  if (lsode_fcn != NULL_TREE)
+  if (lsode_fcn != (tree_fvc *) NULL)
     {
-      tree_constant *tmp = lsode_fcn->eval (args, 3, 1, 0);
+      tree_constant *tmp = lsode_fcn->eval (0, 1, args, 3);
 
       delete [] args;
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
@@ -117,17 +117,17 @@ lsode_user_function (const ColumnVector&
 tree_constant *
 lsode (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   lsode_fcn = is_valid_function (args[1], "lsode", 1);
-  if (lsode_fcn == NULL_TREE
+  if (lsode_fcn == (tree_fvc *) NULL
       || takes_correct_nargs (lsode_fcn, 3, "lsode", 1) != 1)
     return retval;
 
   ColumnVector state = args[2].to_vector ();
   ColumnVector out_times = args[3].to_vector ();
   ColumnVector crit_times;
   int crit_times_set = 0;
   if (nargin > 4)
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -36,18 +36,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "builtins.h"
 #include "gripes.h"
 #include "error.h"
 #include "pager.h"
 #include "utils.h"
 #include "f-npsol.h"
 
 // Global pointers for user defined functions required by npsol.
-static tree *npsol_objective;
-static tree *npsol_constraints;
+static tree_fvc *npsol_objective;
+static tree_fvc *npsol_constraints;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_npsol_2 (const tree_constant *args, int nargin, int nargout)
 {
   return npsol (args, nargin, nargout);
 }
 
@@ -83,19 +83,19 @@ npsol_objective_function (const ColumnVe
   tree_constant *args = new tree_constant [2];
 //  args[0] = name;
   args[1] = decision_vars;
 
   static double retval;
   retval = 0.0;
 
   tree_constant objective_value;
-  if (npsol_objective != NULL_TREE)
+  if (npsol_objective != (tree_fvc *) NULL)
     {
-      tree_constant *tmp = npsol_objective->eval (args, 2, 1, 0);
+      tree_constant *tmp = npsol_objective->eval (0, 1, args, 2);
 
       delete [] args;
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating objective function");
 	  npsol_objective_error = 1; // XXX FIXME XXX
 	  delete [] tmp;
@@ -163,19 +163,19 @@ npsol_constraint_function (const ColumnV
       decision_vars = tree_constant (d);
     }
 
 //  tree_constant name = tree_constant (npsol_constraints->name ());
   tree_constant *args = new tree_constant [2];
 //  args[0] = name;
   args[1] = decision_vars;
 
-  if (npsol_constraints != NULL_TREE)
+  if (npsol_constraints != (tree_fvc *)NULL)
     {
-      tree_constant *tmp = npsol_constraints->eval (args, 2, 1, 0);
+      tree_constant *tmp = npsol_constraints->eval (0, 1, args, 2);
 
       delete [] args;
 
       if (error_state)
 	{
 	  delete [] tmp;
 	  error ("npsol: error evaluating constraints");
 	  return retval;
@@ -286,17 +286,17 @@ Handle all of the following:
 
   if (x.capacity () == 0)
     {
       error ("npsol: expecting vector as first argument");
       return retval;
     }
 
   npsol_objective = is_valid_function (args[2], "npsol", 1);
-  if (npsol_objective == NULL_TREE
+  if (npsol_objective == (tree_fvc *) NULL
       || takes_correct_nargs (npsol_objective, 2, "npsol", 1) != 1)
     return retval;
 
   Objective func (npsol_objective_function);
 
   ColumnVector soln;
 
   Bounds bounds;
@@ -340,23 +340,23 @@ Handle all of the following:
 
       NPSOL nlp (x, func, bounds);
       nlp.copy (npsol_opts);
       soln = nlp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
-  npsol_constraints = NULL_TREE;
+  npsol_constraints = (tree_fvc *) NULL;
   if (nargin == 6 || nargin == 8 || nargin == 9 || nargin == 11)
     npsol_constraints = is_valid_function (args[nargin-2], "npsol", 0);
 
   if (nargin == 8 || nargin == 6)
     {
-      if (npsol_constraints == NULL_TREE)
+      if (npsol_constraints == (tree_fvc *) NULL)
 	{
 	  ColumnVector lub = args[nargin-1].to_vector ();
 	  Matrix c = args[nargin-2].to_matrix ();
 	  ColumnVector llb = args[nargin-3].to_vector ();
 
 	  if (llb.capacity () == 0 || lub.capacity () == 0)
 	    {
 	      error ("npsol: bounds for linear constraints must be vectors");
@@ -419,17 +419,17 @@ Handle all of the following:
 		}
 	      goto solved;
 	    }
 	}
     }
 
   if (nargin == 9 || nargin == 11)
     {
-      if (npsol_constraints == NULL_TREE)
+      if (npsol_constraints == (tree_fvc *) NULL)
 	{
 	  // Produce error message.
 	  is_valid_function (args[nargin-2], "npsol", 1);
 	}
       else
 	{
 	  if (takes_correct_nargs (npsol_constraints, 2, "npsol", 1))
 	    {
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -34,17 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "mappers.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "pager.h"
 #include "f-quad.h"
 
 // Global pointer for user defined function required by quadrature functions.
-static tree *quad_fcn;
+static tree_fvc *quad_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_quad_2 (const tree_constant *args, int nargin, int nargout)
 {
   return do_quad (args, nargin, nargout);
 }
 
@@ -62,19 +62,19 @@ quad_user_function (double x)
 {
   double retval = 0.0;
 
 //  tree_constant name = tree_constant (quad_fcn->name ());
   tree_constant *args = new tree_constant [2];
 //  args[0] = name;
   args[1] = tree_constant (x);
 
-  if (quad_fcn != NULL_TREE)
+  if (quad_fcn != (tree_fvc *) NULL)
     {
-      tree_constant *tmp = quad_fcn->eval (args, 2, 1, 0);
+      tree_constant *tmp = quad_fcn->eval (0, 1, args, 2);
 
       delete [] args;
 
       if (error_state)
 	{
 	  delete [] tmp;
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
@@ -100,17 +100,17 @@ quad_user_function (double x)
 tree_constant *
 do_quad (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   quad_fcn = is_valid_function (args[1], "fsolve", 1);
-  if (quad_fcn == NULL_TREE
+  if (quad_fcn == (tree_fvc *) NULL
       || takes_correct_nargs (quad_fcn, 2, "fsolve", 1) != 1)
     return retval;
 
   double a = args[2].to_scalar ();
   double b = args[3].to_scalar ();
 
   int indefinite = 0;
   IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
