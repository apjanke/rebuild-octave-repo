# HG changeset patch
# User jwe
# Date 863190676 0
#      Fri May 09 15:11:16 1997 +0000
# Node ID ac3368dba5d3e8e2ce02b407663ce6309a53fa2e
# Parent  ca7d3625ee01e5de30505121e15345f2b509153d
[project @ 1997-05-09 15:09:47 by jwe]

diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -19,17 +19,16 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_defun_int_h)
 #define octave_defun_int_h 1
 
 #include "oct-builtin.h"
-#include "variables.h"
 
 // MAKE_BUILTINS is defined to extract function names and related
 // information and create the *.def files that are eventually used to
 // create the buitlins.cc file.
 
 #ifdef MAKE_BUILTINS
 
 // Generate code to install name in the symbol table.  The script
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -71,23 +71,18 @@ Software Foundation, 59 Temple Place - S
 
 #define DEFCONSTX(name, sname, defn, inst_as_fcn, sv_fcn, doc) \
   DEFVAR_INT (name, sname, defn, inst_as_fcn, false, sv_fcn, doc); \
   DEFVAR_INT ("__" ## name ## "__", X ## sname, defn, false, true, sv_fcn, doc)
 
 // How builtin variables are actually installed.
 
 #define DEFVAR_INT(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
-  do \
-    { \
-      builtin_variable sname (name, octave_value (defn), inst_as_fcn, \
-			      protect, (sv_fcn != 0), sv_fcn, doc); \
-      install_builtin_variable (sname); \
-    } \
-  while (0)
+  install_builtin_variable (name, octave_value (defn), inst_as_fcn, \
+			    protect, (sv_fcn != 0), sv_fcn, doc)
 
 // Define a builtin function.
 //
 //   name is the name of the function, unqouted.
 //
 //   args_name is the name of the octave_value_list variable used to pass
 //     the argument list to this function.
 //
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream.h>
 
 #include "lo-ieee.h"
 
 #include "gripes.h"
 #include "oct-map.h"
+#include "oct-var-ref.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
+#include "oct-var-ref.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 #include "variables.h"
 
 octave_allocator
 octave_matrix::allocator (sizeof (octave_matrix));
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
+#include "oct-var-ref.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 octave_allocator
 octave_struct::allocator (sizeof (octave_struct));
 
 int
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array-flags.h"
 #include "str-vec.h"
 
+#include "oct-var-ref.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1528,24 +1528,27 @@ install_builtin_function (octave_builtin
   sym_rec->unprotect ();
   sym_rec->define (f, t);
   sym_rec->document (f->doc_string ());
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
-install_builtin_variable (const builtin_variable& v)
+install_builtin_variable (const string& name, const octave_value& value,
+			  bool install_as_function, bool protect,
+			  bool eternal, symbol_record::sv_function sv_fcn,
+			  const string& help_string);
 {
-  if (v.install_as_function)
-    install_builtin_variable_as_function (v.name, v.value, v.protect,
-					  v.eternal, v.help_string);
+  if (install_as_function)
+    install_builtin_variable_as_function (name, value, protect,
+					  eternal, help_string);
   else
-    bind_builtin_variable (v.name, v.value, v.protect, v.eternal,
-			   v.sv_fcn, v.help_string);
+    bind_builtin_variable (name, value, protect, eternal,
+			   sv_fcn, help_string);
 }
 
 void
 install_builtin_variable_as_function (const string& name,
 				      const octave_value& val,
 				      bool protect, bool eternal,
 				      const string& help)
 {
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -35,32 +35,16 @@ class octave_builtin;
 class octave_mapper;
 class string_vector;
 
 #include <string>
 
 #include "ov.h"
 #include "symtab.h"
 
-struct builtin_variable
-{
-  builtin_variable (const string& n, const octave_value& v, bool iaf,
-		    bool p, bool e, sv_Function svf, const string& h)
-    : name (n), value (v), install_as_function (iaf), protect (p),
-      eternal (e), sv_fcn (svf), help_string (h) { }
-
-  string name;
-  octave_value value;
-  bool install_as_function;
-  bool protect;
-  bool eternal;
-  symbol_record::sv_function sv_fcn;
-  string help_string;
-};
-
 typedef octave_value_list (*Octave_builtin_fcn)(const octave_value_list&, int);
 
 extern void initialize_symbol_tables (void);
 
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *lookup_by_name (const string& nm,
 				      bool exec_script = true);
@@ -109,17 +93,19 @@ extern string_vector make_name_list (voi
 
 extern void
 install_builtin_mapper (octave_mapper *mf);
 
 extern void
 install_builtin_function (octave_builtin *f, bool is_text_fcn = false);
 
 extern void
-install_builtin_variable (const builtin_variable& v);
+install_builtin_variable (const string& n, const octave_value& v,
+			  bool iaf, bool p, bool e,
+			  symbol_record::sv_function svf, const string& h);
 
 extern void
 install_builtin_variable_as_function (const string& name,
 				      const octave_value& val,
 				      bool protect = false,
 				      bool eternal = false,
 				      const string& help = string ());
 
