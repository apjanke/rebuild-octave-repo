# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294902542 18000
#      Thu Jan 13 02:09:02 2011 -0500
# Node ID 8a5e980da6aabb8bc1eed00ac7ea4ed7503e0dac
# Parent  a2c3c43af79ea098486f05fdd3fe77460024f32a
style fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* LSODE.cc, DASSL.cc, DASRT.cc, DASPK.cc, CmplxSVD.cc,
+	CmplxSCHUR.cc, CmplxHESS.cc, CmplxGEPBAL.cc, CmplxCHOL.cc,
+	EIG.cc, dbleCHOL.cc, dbleGEPBAL.cc, dbleHESS.cc, dbleSCHUR.cc,
+	dbleSVD.cc, fCmplxCHOL.cc, fCmplxGEPBAL.cc, fCmplxHESS.cc,
+	fCmplxSCHUR.cc, fCmplxSVD.cc, fEIG.cc, floatCHOL.cc,
+	floatGEPBAL.cc, floatHESS.cc, floatSCHUR.cc, floatSVD.cc:
+	Style fixes.
+
+	* CmplxSCHUR.cc (ComplexSCHUR::ComplexSCHUR): Initialize selector.
+	* fCmplxSCHUR.cc (FloatComplexSCHUR::FloatComplexSCHUR): Likewise.
+	* dbleSCHUR.cc (SCHUR::SCHUR): Likewise.
+	* floatSCHUR.cc (FloatSCHUR::FloatSCHUR): Likewise.
+
 2011-01-12  John W. Eaton  <jwe@octave.org>
 
 	* oct-rl-hist.c (hc_erasedups): Avoid GCC warning.
 
 2011-01-12  Jordi Guti√©rrez Hermoso  <jordigh@gmail.com>
 
 	* oct-rl-hist.h: Replace macros with an enum
 
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -53,36 +53,38 @@ extern "C"
   F77_RET_T
   F77_FUNC (zpocon, ZPOCON) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
                              Complex*, const octave_idx_type&, const double&,
                              double&, Complex*, double*, 
                              octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 #ifdef HAVE_QRUPDATE
 
   F77_RET_T
-  F77_FUNC (zch1up, ZCH1UP) (const octave_idx_type&, Complex*, const octave_idx_type&,
-                             Complex*, double*);
+  F77_FUNC (zch1up, ZCH1UP) (const octave_idx_type&, Complex*,
+                             const octave_idx_type&, Complex*, double*);
 
   F77_RET_T
-  F77_FUNC (zch1dn, ZCH1DN) (const octave_idx_type&, Complex*, const octave_idx_type&,
+  F77_FUNC (zch1dn, ZCH1DN) (const octave_idx_type&, Complex*,
+                             const octave_idx_type&, Complex*, double*,
+                             octave_idx_type&);
+
+  F77_RET_T
+  F77_FUNC (zchinx, ZCHINX) (const octave_idx_type&, Complex*,
+                             const octave_idx_type&, const octave_idx_type&,
                              Complex*, double*, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (zchinx, ZCHINX) (const octave_idx_type&, Complex*, const octave_idx_type&,
-                             const octave_idx_type&, Complex*, double*, 
-                             octave_idx_type&);
+  F77_FUNC (zchdex, ZCHDEX) (const octave_idx_type&, Complex*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             double*);
 
   F77_RET_T
-  F77_FUNC (zchdex, ZCHDEX) (const octave_idx_type&, Complex*, const octave_idx_type&,
-                             const octave_idx_type&, double*);
-
-  F77_RET_T
-  F77_FUNC (zchshx, ZCHSHX) (const octave_idx_type&, Complex*, const octave_idx_type&,
-                             const octave_idx_type&, const octave_idx_type&, 
-                             Complex*, double*);
+  F77_FUNC (zchshx, ZCHSHX) (const octave_idx_type&, Complex*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, Complex*, double*);
 #endif
 }
 
 octave_idx_type
 ComplexCHOL::init (const ComplexMatrix& a, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
diff --git a/liboctave/CmplxGEPBAL.cc b/liboctave/CmplxGEPBAL.cc
--- a/liboctave/CmplxGEPBAL.cc
+++ b/liboctave/CmplxGEPBAL.cc
@@ -31,29 +31,33 @@ along with Octave; see the file COPYING.
 #include "CmplxGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (zggbal, ZGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
-                             Complex* A, const octave_idx_type& LDA, Complex* B,
-                             const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
+  F77_FUNC (zggbal, ZGGBAL) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, Complex* A,
+                             const octave_idx_type& LDA, Complex* B,
+                             const octave_idx_type& LDB,
+                             octave_idx_type& ILO, octave_idx_type& IHI,
                              double* LSCALE, double* RSCALE,
                              double* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dggbak, DGGBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type& N, const octave_idx_type& ILO,
-                             const octave_idx_type& IHI, const double* LSCALE,
-                             const double* RSCALE, octave_idx_type& M, double* V,
+                             const octave_idx_type& N,
+                             const octave_idx_type& ILO,
+                             const octave_idx_type& IHI,
+                             const double* LSCALE, const double* RSCALE,
+                             octave_idx_type& M, double* V,
                              const octave_idx_type& LDV, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
 }
 
 octave_idx_type
 ComplexGEPBALANCE::init (const ComplexMatrix& a, const ComplexMatrix& b, 
diff --git a/liboctave/CmplxHESS.cc b/liboctave/CmplxHESS.cc
--- a/liboctave/CmplxHESS.cc
+++ b/liboctave/CmplxHESS.cc
@@ -28,35 +28,40 @@ along with Octave; see the file COPYING.
 #include "CmplxHESS.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zgebal, ZGEBAL) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, Complex*, const octave_idx_type&,
-                             octave_idx_type&, octave_idx_type&, double*, octave_idx_type&
+                             const octave_idx_type&, Complex*,
+                             const octave_idx_type&, octave_idx_type&,
+                             octave_idx_type&, double*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
  
   F77_RET_T
-  F77_FUNC (zgehrd, ZGEHRD) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             Complex*, const octave_idx_type&, Complex*,
-                             Complex*, const octave_idx_type&, octave_idx_type&);
+  F77_FUNC (zgehrd, ZGEHRD) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, Complex*,
+                             const octave_idx_type&, Complex*, Complex*,
+                             const octave_idx_type&, octave_idx_type&);
  
   F77_RET_T
-  F77_FUNC (zunghr, ZUNGHR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             Complex*, const octave_idx_type&, Complex*,
-                             Complex*, const octave_idx_type&, octave_idx_type&);
+  F77_FUNC (zunghr, ZUNGHR) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, Complex*,
+                             const octave_idx_type&, Complex*, Complex*,
+                             const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zgebak, ZGEBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, double*,
-                             const octave_idx_type&, Complex*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, Complex*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 ComplexHESS::init (const ComplexMatrix& a)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -32,26 +32,29 @@ along with Octave; see the file COPYING.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zgeesx, ZGEESX) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              ComplexSCHUR::select_function,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, Complex*, const octave_idx_type&, octave_idx_type&,
-                             Complex*, Complex*, const octave_idx_type&, double&,
-                             double&, Complex*, const octave_idx_type&, double*, octave_idx_type*,
-                             octave_idx_type&
+                             const octave_idx_type&, Complex*,
+                             const octave_idx_type&, octave_idx_type&,
+                             Complex*, Complex*, const octave_idx_type&,
+                             double&, double&, Complex*,
+                             const octave_idx_type&, double*,
+                             octave_idx_type*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
+
   F77_RET_T
-  F77_FUNC (zrsf2csf, ZRSF2CSF) (const octave_idx_type&,
-                                 Complex *, Complex *, double *, double *);
+  F77_FUNC (zrsf2csf, ZRSF2CSF) (const octave_idx_type&, Complex *,
+                                 Complex *, double *, double *);
 }
 
 static octave_idx_type
 select_ana (const Complex& a)
 {
   return a.real () < 0.0;
 }
 
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -30,29 +30,32 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zgesvd, ZGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, Complex*,
-                             const octave_idx_type&, double*, Complex*, const octave_idx_type&,
-                             Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
-                             double*, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             Complex*, const octave_idx_type&,
+                             double*, Complex*, const octave_idx_type&,
+                             Complex*, const octave_idx_type&, Complex*,
+                             const octave_idx_type&, double*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zgesdd, ZGESDD) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, Complex*,
-                             const octave_idx_type&, double*, Complex*, const octave_idx_type&,
-                             Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
-                             double*, octave_idx_type *, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             Complex*, const octave_idx_type&,
+                             double*, Complex*, const octave_idx_type&,
+                             Complex*, const octave_idx_type&, Complex*,
+                             const octave_idx_type&, double*,
+                             octave_idx_type *, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 ComplexMatrix
 ComplexSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -31,37 +31,43 @@ along with Octave; see the file COPYING.
 
 #include "DASPK.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
 typedef octave_idx_type (*daspk_fcn_ptr) (const double&, const double*,
-                              const double*, const double&,
-                              double*, octave_idx_type&, double*, octave_idx_type*);
+                                          const double*, const double&,
+                                          double*, octave_idx_type&,
+                                          double*, octave_idx_type*);
 
 typedef octave_idx_type (*daspk_jac_ptr) (const double&, const double*,
-                              const double*, double*,
-                              const double&, double*, octave_idx_type*);
+                                          const double*, double*,
+                                          const double&, double*,
+                                          octave_idx_type*);
 
-typedef octave_idx_type (*daspk_psol_ptr) (const octave_idx_type&, const double&,
-                               const double*, const double*,
-                               const double*, const double&,
-                               const double*, double*, octave_idx_type*,
-                               double*, const double&, octave_idx_type&,
-                               double*, octave_idx_type*);
+typedef octave_idx_type (*daspk_psol_ptr) (const octave_idx_type&,
+                                           const double&, const double*,
+                                           const double*, const double*,
+                                           const double&, const double*,
+                                           double*, octave_idx_type*,
+                                           double*, const double&,
+                                           octave_idx_type&, double*,
+                                           octave_idx_type*);
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (ddaspk, DDASPK) (daspk_fcn_ptr, const octave_idx_type&, double&,
-                             double*, double*, double&, const octave_idx_type*,
-                             const double*, const double*, octave_idx_type&,
-                             double*, const octave_idx_type&, octave_idx_type*, const octave_idx_type&,
+  F77_FUNC (ddaspk, DDASPK) (daspk_fcn_ptr, const octave_idx_type&,
+                             double&, double*, double*, double&,
+                             const octave_idx_type*, const double*,
+                             const double*, octave_idx_type&,
+                             double*, const octave_idx_type&,
+                             octave_idx_type*, const octave_idx_type&,
                              const double*, const octave_idx_type*,
                              daspk_jac_ptr, daspk_psol_ptr);
 }
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 static octave_idx_type nn;
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -29,34 +29,44 @@ along with Octave; see the file COPYING.
 #include <sstream>
 
 #include "DASRT.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
-typedef octave_idx_type (*dasrt_fcn_ptr) (const double&, const double*, const double*,
-                              double*, octave_idx_type&, double*, octave_idx_type*);
+typedef octave_idx_type (*dasrt_fcn_ptr) (const double&, const double*,
+                                          const double*, double*,
+                                          octave_idx_type&, double*,
+                                          octave_idx_type*);
 
-typedef octave_idx_type (*dasrt_jac_ptr) (const double&, const double*, const double*,
-                              double*, const double&, double*, octave_idx_type*);
+typedef octave_idx_type (*dasrt_jac_ptr) (const double&, const double*,
+                                          const double*, double*,
+                                          const double&, double*,
+                                          octave_idx_type*);
 
-typedef octave_idx_type (*dasrt_constr_ptr) (const octave_idx_type&, const double&, const double*,
-                                 const octave_idx_type&, double*, double*, octave_idx_type*);
+typedef octave_idx_type (*dasrt_constr_ptr) (const octave_idx_type&,
+                                             const double&, const double*,
+                                             const octave_idx_type&,
+                                             double*, double*,
+                                             octave_idx_type*);
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (ddasrt, DDASRT) (dasrt_fcn_ptr, const octave_idx_type&, double&,
-                             double*, double*, const double&, octave_idx_type*,
-                             const double*, const double*, octave_idx_type&, double*,
-                             const octave_idx_type&, octave_idx_type*, const octave_idx_type&, double*,
-                             octave_idx_type*, dasrt_jac_ptr, dasrt_constr_ptr,
-                             const octave_idx_type&, octave_idx_type*);
+  F77_FUNC (ddasrt, DDASRT) (dasrt_fcn_ptr, const octave_idx_type&,
+                             double&, double*, double*, const double&,
+                             octave_idx_type*, const double*,
+                             const double*, octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type*,
+                             const octave_idx_type&, double*, 
+                             octave_idx_type*, dasrt_jac_ptr,
+                             dasrt_constr_ptr, const octave_idx_type&,
+                             octave_idx_type*);
 }
 
 static DAEFunc::DAERHSFunc user_fsub;
 static DAEFunc::DAEJacFunc user_jsub;
 static DAERTFunc::DAERTConstrFunc user_csub;
 
 static octave_idx_type nn;
 
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -30,29 +30,35 @@ along with Octave; see the file COPYING.
 #include <sstream>
 
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
-typedef octave_idx_type (*dassl_fcn_ptr) (const double&, const double*, const double*,
-                              double*, octave_idx_type&, double*, octave_idx_type*);
+typedef octave_idx_type (*dassl_fcn_ptr) (const double&, const double*,
+                                          const double*, double*,
+                                          octave_idx_type&, double*,
+                                          octave_idx_type*);
 
-typedef octave_idx_type (*dassl_jac_ptr) (const double&, const double*, const double*,
-                              double*, const double&, double*, octave_idx_type*);
+typedef octave_idx_type (*dassl_jac_ptr) (const double&, const double*,
+                                          const double*, double*,
+                                          const double&, double*,
+                                          octave_idx_type*);
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (ddassl, DDASSL) (dassl_fcn_ptr, const octave_idx_type&, double&,
-                             double*, double*, double&, const octave_idx_type*,
-                             const double*, const double*, octave_idx_type&,
-                             double*, const octave_idx_type&, octave_idx_type*, const octave_idx_type&,
+  F77_FUNC (ddassl, DDASSL) (dassl_fcn_ptr, const octave_idx_type&,
+                             double&, double*, double*, double&,
+                             const octave_idx_type*, const double*,
+                             const double*, octave_idx_type&,
+                             double*, const octave_idx_type&,
+                             octave_idx_type*, const octave_idx_type&,
                              const double*, const octave_idx_type*,
                              dassl_jac_ptr);
 }
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 
 static octave_idx_type nn;
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -30,106 +30,113 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgeev, DGEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, double*, const octave_idx_type&, double*,
-                           double*, double*, const octave_idx_type&, double*,
-                           const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, double*, double*,
+                           double*, const octave_idx_type&, double*,
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zgeev, ZGEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, Complex*, const octave_idx_type&, Complex*,
-                           Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
-                           Complex*, const octave_idx_type&, double*, octave_idx_type&
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, Complex*,
+                           Complex*, const octave_idx_type&, Complex*,
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, double*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dsyev, DSYEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, double*, const octave_idx_type&, double*,
-                           double*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, double*, double*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zheev, ZHEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, Complex*, const octave_idx_type&, double*,
-                           Complex*, const octave_idx_type&, double*, octave_idx_type&
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, double*,
+                           Complex*, const octave_idx_type&, double*,
+                           octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL, 
-                           const octave_idx_type&, 
-                           double*, const octave_idx_type&,
-                           octave_idx_type&
-                           F77_CHAR_ARG_LEN_DECL
-                           F77_CHAR_ARG_LEN_DECL);
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zpotrf, ZPOTRF) (F77_CONST_CHAR_ARG_DECL, 
-                           const octave_idx_type&, 
-                           Complex*, const octave_idx_type&,
-                           octave_idx_type&
-                           F77_CHAR_ARG_LEN_DECL
-                           F77_CHAR_ARG_LEN_DECL);
+                             const octave_idx_type&, 
+                             Complex*, const octave_idx_type&,
+                             octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dggev, DGGEV) (F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
                            const octave_idx_type&, 
                            double*, const octave_idx_type&,
                            double*, const octave_idx_type&,
-                           double*, double*, double *,
-                           double*, const octave_idx_type&, double*, const octave_idx_type&,
-                           double*, const octave_idx_type&, octave_idx_type&
+                           double*, double*, double *, double*,
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dsygv, DSYGV) (const octave_idx_type&,
                            F77_CONST_CHAR_ARG_DECL, F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           double*, const octave_idx_type&,
-                           double*, const octave_idx_type&,
-                           double*, double*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, double*,
+                           const octave_idx_type&, double*, double*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zggev, ZGGEV) (F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
                            const octave_idx_type&, 
                            Complex*, const octave_idx_type&,
                            Complex*, const octave_idx_type&,
-                           Complex*, Complex*,
-                           Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
-                           Complex*, const octave_idx_type&, double*, octave_idx_type&
+                           Complex*, Complex*, Complex*,
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, double*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zhegv, ZHEGV) (const octave_idx_type&,
                            F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           Complex*, const octave_idx_type&,
-                           Complex*, const octave_idx_type&,
-                           double*, Complex*, const octave_idx_type&, double*, 
-                           octave_idx_type&
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, Complex*,
+                           const octave_idx_type&, double*, Complex*,
+                           const octave_idx_type&, double*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 EIG::init (const Matrix& a, bool calc_ev)
 {
   if (a.any_element_is_inf_or_nan ())
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -30,30 +30,36 @@ along with Octave; see the file COPYING.
 #include <sstream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
-typedef octave_idx_type (*lsode_fcn_ptr) (const octave_idx_type&, const double&, double*,
-                              double*, octave_idx_type&);
+typedef octave_idx_type (*lsode_fcn_ptr) (const octave_idx_type&,
+                                          const double&, double*,
+                                          double*, octave_idx_type&);
 
-typedef octave_idx_type (*lsode_jac_ptr) (const octave_idx_type&, const double&, double*,
-                              const octave_idx_type&, const octave_idx_type&, double*, const
-                              octave_idx_type&);
+typedef octave_idx_type (*lsode_jac_ptr) (const octave_idx_type&,
+                                          const double&, double*,
+                                          const octave_idx_type&,
+                                          const octave_idx_type&,
+                                          double*, const octave_idx_type&);
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (dlsode, DLSODE) (lsode_fcn_ptr, octave_idx_type&, double*, double&,
-                             double&, octave_idx_type&, double&, const double*, octave_idx_type&,
-                             octave_idx_type&, octave_idx_type&, double*, octave_idx_type&, octave_idx_type*, octave_idx_type&,
-                             lsode_jac_ptr, octave_idx_type&);
+  F77_FUNC (dlsode, DLSODE) (lsode_fcn_ptr, octave_idx_type&, double*,
+                             double&, double&, octave_idx_type&, double&,
+                             const double*, octave_idx_type&,
+                             octave_idx_type&, octave_idx_type&,
+                             double*, octave_idx_type&, octave_idx_type*,
+                             octave_idx_type&, lsode_jac_ptr,
+                             octave_idx_type&);
 }
 
 static ODEFunc::ODERHSFunc user_fun;
 static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 static octave_idx_type
 lsode_f (const octave_idx_type& neq, const double& time, double *,
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -53,36 +53,38 @@ extern "C"
   F77_RET_T
   F77_FUNC (dpocon, DPOCON) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
                              double*, const octave_idx_type&, const double&,
                              double&, double*, octave_idx_type*, 
                              octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 #ifdef HAVE_QRUPDATE
 
   F77_RET_T
-  F77_FUNC (dch1up, DCH1UP) (const octave_idx_type&, double*, const octave_idx_type&,
-                             double*, double*);
+  F77_FUNC (dch1up, DCH1UP) (const octave_idx_type&, double*,
+                             const octave_idx_type&, double*, double*);
 
   F77_RET_T
-  F77_FUNC (dch1dn, DCH1DN) (const octave_idx_type&, double*, const octave_idx_type&,
+  F77_FUNC (dch1dn, DCH1DN) (const octave_idx_type&, double*,
+                             const octave_idx_type&, double*, double*,
+                             octave_idx_type&);
+
+  F77_RET_T
+  F77_FUNC (dchinx, DCHINX) (const octave_idx_type&, double*,
+                             const octave_idx_type&, const octave_idx_type&,
                              double*, double*, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (dchinx, DCHINX) (const octave_idx_type&, double*, const octave_idx_type&,
-                             const octave_idx_type&, double*, double*, 
-                             octave_idx_type&);
+  F77_FUNC (dchdex, DCHDEX) (const octave_idx_type&, double*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             double*);
 
   F77_RET_T
-  F77_FUNC (dchdex, DCHDEX) (const octave_idx_type&, double*, const octave_idx_type&,
+  F77_FUNC (dchshx, DCHSHX) (const octave_idx_type&, double*,
+                             const octave_idx_type&, const octave_idx_type&,
                              const octave_idx_type&, double*);
-
-  F77_RET_T
-  F77_FUNC (dchshx, DCHSHX) (const octave_idx_type&, double*, const octave_idx_type&,
-                             const octave_idx_type&, const octave_idx_type&, 
-                             double*);
 #endif
 }
 
 octave_idx_type
 CHOL::init (const Matrix& a, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
diff --git a/liboctave/dbleGEPBAL.cc b/liboctave/dbleGEPBAL.cc
--- a/liboctave/dbleGEPBAL.cc
+++ b/liboctave/dbleGEPBAL.cc
@@ -31,29 +31,33 @@ along with Octave; see the file COPYING.
 #include "dbleGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (dggbal, DGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
-                             double* A, const octave_idx_type& LDA, double* B,
-                             const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
+  F77_FUNC (dggbal, DGGBAL) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N,
+                             double* A, const octave_idx_type& LDA,
+                             double* B, const octave_idx_type& LDB,
+                             octave_idx_type& ILO, octave_idx_type& IHI,
                              double* LSCALE, double* RSCALE,
                              double* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dggbak, DGGBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type& N, const octave_idx_type& ILO,
-                             const octave_idx_type& IHI, const double* LSCALE,
-                             const double* RSCALE, octave_idx_type& M, double* V,
+                             const octave_idx_type& N,
+                             const octave_idx_type& ILO,
+                             const octave_idx_type& IHI,
+                             const double* LSCALE, const double* RSCALE,
+                             octave_idx_type& M, double* V,
                              const octave_idx_type& LDV, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
 }
 
 octave_idx_type
 GEPBALANCE::init (const Matrix& a, const Matrix& b, 
diff --git a/liboctave/dbleHESS.cc b/liboctave/dbleHESS.cc
--- a/liboctave/dbleHESS.cc
+++ b/liboctave/dbleHESS.cc
@@ -28,35 +28,40 @@ along with Octave; see the file COPYING.
 #include "dbleHESS.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgebal, DGEBAL) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type&,
                              octave_idx_type&, double*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (dgehrd, DGEHRD) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             double*, const octave_idx_type&, double*, double*,
+  F77_FUNC (dgehrd, DGEHRD) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, double*, double*,
                              const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (dorghr, DORGHR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             double*, const octave_idx_type&, double*, double*,
+  F77_FUNC (dorghr, DORGHR) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, double*, double*,
                              const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (dgebak, DGEBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, double*,
-                             const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 HESS::init (const Matrix& a)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -33,20 +33,22 @@ along with Octave; see the file COPYING.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgeesx, DGEESX) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              SCHUR::select_function,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type&,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type&,
                              double*, double*, double*, const octave_idx_type&,
                              double&, double&, double*, const octave_idx_type&,
-                             octave_idx_type*, const octave_idx_type&, octave_idx_type*, octave_idx_type&
+                             octave_idx_type*, const octave_idx_type&,
+                             octave_idx_type*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 static octave_idx_type
 select_ana (const double& a, const double&)
 {
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -31,29 +31,32 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgesvd, DGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, double*,
-                             const octave_idx_type&, double*, double*,
-                             const octave_idx_type&, double*, const octave_idx_type&,
-                             double*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             double*, const octave_idx_type&, double*,
+                             double*, const octave_idx_type&, double*,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dgesdd, DGESDD) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, double*,
-                             const octave_idx_type&, double*, double*,
-                             const octave_idx_type&, double*, const octave_idx_type&,
-                             double*, const octave_idx_type&, octave_idx_type *, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             double*, const octave_idx_type&, double*,
+                             double*, const octave_idx_type&, double*,
+                             const octave_idx_type&, double*,
+                             const octave_idx_type&, octave_idx_type *,
+                             octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 Matrix
 SVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
diff --git a/liboctave/fCmplxCHOL.cc b/liboctave/fCmplxCHOL.cc
--- a/liboctave/fCmplxCHOL.cc
+++ b/liboctave/fCmplxCHOL.cc
@@ -38,51 +38,53 @@ along with Octave; see the file COPYING.
 #ifndef HAVE_QRUPDATE
 #include "dbleQR.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cpotrf, CPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL);
+                             FloatComplex*, const octave_idx_type&,
+                             octave_idx_type& F77_CHAR_ARG_LEN_DECL);
   F77_RET_T
   F77_FUNC (cpotri, CPOTRI) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL);
+                             FloatComplex*, const octave_idx_type&,
+                             octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cpocon, CPOCON) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, const float&,
-                             float&, FloatComplex*, float*, 
+                             FloatComplex*, const octave_idx_type&,
+                             const float&, float&, FloatComplex*, float*, 
                              octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 #ifdef HAVE_QRUPDATE
 
   F77_RET_T
-  F77_FUNC (cch1up, CCH1UP) (const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                             FloatComplex*, float*);
+  F77_FUNC (cch1up, CCH1UP) (const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, FloatComplex*, float*);
 
   F77_RET_T
-  F77_FUNC (cch1dn, CCH1DN) (const octave_idx_type&, FloatComplex*, const octave_idx_type&,
+  F77_FUNC (cch1dn, CCH1DN) (const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, FloatComplex*,
+                             float*, octave_idx_type&);
+
+  F77_RET_T
+  F77_FUNC (cchinx, CCHINX) (const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, const octave_idx_type&,
                              FloatComplex*, float*, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cchinx, CCHINX) (const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                             const octave_idx_type&, FloatComplex*, float*, 
-                             octave_idx_type&);
+  F77_FUNC (cchdex, CCHDEX) (const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             float*);
 
   F77_RET_T
-  F77_FUNC (cchdex, CCHDEX) (const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                             const octave_idx_type&, float*);
-
-  F77_RET_T
-  F77_FUNC (cchshx, CCHSHX) (const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                             const octave_idx_type&, const octave_idx_type&, 
-                             FloatComplex*, float*);
+  F77_FUNC (cchshx, CCHSHX) (const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, FloatComplex*, float*);
 #endif
 }
 
 octave_idx_type
 FloatComplexCHOL::init (const FloatComplexMatrix& a, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
diff --git a/liboctave/fCmplxGEPBAL.cc b/liboctave/fCmplxGEPBAL.cc
--- a/liboctave/fCmplxGEPBAL.cc
+++ b/liboctave/fCmplxGEPBAL.cc
@@ -31,27 +31,30 @@ along with Octave; see the file COPYING.
 #include "fCmplxGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (cggbal, CGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
-                             FloatComplex* A, const octave_idx_type& LDA, FloatComplex* B,
-                             const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
+  F77_FUNC (cggbal, CGGBAL) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N,
+                             FloatComplex* A, const octave_idx_type& LDA,
+                             FloatComplex* B, const octave_idx_type& LDB,
+                             octave_idx_type& ILO, octave_idx_type& IHI,
                              float* LSCALE, float* RSCALE,
                              float* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (sggbak, SGGBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type& N, const octave_idx_type& ILO,
+                             const octave_idx_type& N,
+                             const octave_idx_type& ILO,
                              const octave_idx_type& IHI, const float* LSCALE,
                              const float* RSCALE, octave_idx_type& M, float* V,
                              const octave_idx_type& LDV, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
 }
 
diff --git a/liboctave/fCmplxHESS.cc b/liboctave/fCmplxHESS.cc
--- a/liboctave/fCmplxHESS.cc
+++ b/liboctave/fCmplxHESS.cc
@@ -28,35 +28,42 @@ along with Octave; see the file COPYING.
 #include "fCmplxHESS.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cgebal, CGEBAL) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                             octave_idx_type&, octave_idx_type&, float*, octave_idx_type&
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, octave_idx_type&,
+                             octave_idx_type&, float*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
  
   F77_RET_T
-  F77_FUNC (cgehrd, CGEHRD) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, FloatComplex*,
-                             FloatComplex*, const octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cgehrd, CGEHRD) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, FloatComplex*,
+                             FloatComplex*, const octave_idx_type&,
+                             octave_idx_type&);
  
   F77_RET_T
-  F77_FUNC (cunghr, CUNGHR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, FloatComplex*,
-                             FloatComplex*, const octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cunghr, CUNGHR) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, FloatComplex*,
+                             FloatComplex*, const octave_idx_type&,
+                             octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (cgebak, CGEBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, float*,
-                             const octave_idx_type&, FloatComplex*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 FloatComplexHESS::init (const FloatComplexMatrix& a)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/fCmplxSCHUR.cc b/liboctave/fCmplxSCHUR.cc
--- a/liboctave/fCmplxSCHUR.cc
+++ b/liboctave/fCmplxSCHUR.cc
@@ -32,26 +32,28 @@ along with Octave; see the file COPYING.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cgeesx, CGEESX) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              FloatComplexSCHUR::select_function,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, FloatComplex*, const octave_idx_type&, octave_idx_type&,
-                             FloatComplex*, FloatComplex*, const octave_idx_type&, float&,
-                             float&, FloatComplex*, const octave_idx_type&, float*, octave_idx_type*,
-                             octave_idx_type&
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, octave_idx_type&,
+                             FloatComplex*, FloatComplex*,
+                             const octave_idx_type&, float&, float&,
+                             FloatComplex*, const octave_idx_type&,
+                             float*, octave_idx_type*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
   F77_RET_T
-  F77_FUNC (crsf2csf, CRSF2CSF) (const octave_idx_type&,
-                                 FloatComplex *, FloatComplex *, float *, float *);
+  F77_FUNC (crsf2csf, CRSF2CSF) (const octave_idx_type&, FloatComplex *,
+                                 FloatComplex *, float *, float *);
 }
 
 static octave_idx_type
 select_ana (const FloatComplex& a)
 {
   return a.real () < 0.0;
 }
 
diff --git a/liboctave/fCmplxSVD.cc b/liboctave/fCmplxSVD.cc
--- a/liboctave/fCmplxSVD.cc
+++ b/liboctave/fCmplxSVD.cc
@@ -30,28 +30,32 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cgesvd, CGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, FloatComplex*,
-                             const octave_idx_type&, float*, FloatComplex*, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
+                             const octave_idx_type&, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&, float*,
+                             FloatComplex*, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&,
                              float*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cgesdd, CGESDD) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, FloatComplex*,
-                             const octave_idx_type&, float*, FloatComplex*, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
+                             const octave_idx_type&, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&, float*,
+                             FloatComplex*, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&,
                              float*, octave_idx_type *, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 FloatComplexMatrix
 FloatComplexSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
diff --git a/liboctave/fEIG.cc b/liboctave/fEIG.cc
--- a/liboctave/fEIG.cc
+++ b/liboctave/fEIG.cc
@@ -30,106 +30,110 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgeev, SGEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, float*, const octave_idx_type&, float*,
-                           float*, float*, const octave_idx_type&, float*,
-                           const octave_idx_type&, float*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*, float*, float*,
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cgeev, CGEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, FloatComplex*, const octave_idx_type&, FloatComplex*,
-                           FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                           FloatComplex*, const octave_idx_type&, float*, octave_idx_type&
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, float*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (ssyev, SSYEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, float*, const octave_idx_type&, float*,
-                           float*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*, float*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cheev, CHEEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, FloatComplex*, const octave_idx_type&, float*,
-                           FloatComplex*, const octave_idx_type&, float*, octave_idx_type&
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, float*, FloatComplex*,
+                           const octave_idx_type&, float*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (spotrf, SPOTRF) (F77_CONST_CHAR_ARG_DECL, 
-                           const octave_idx_type&, 
-                           float*, const octave_idx_type&,
-                           octave_idx_type&
-                           F77_CHAR_ARG_LEN_DECL
-                           F77_CHAR_ARG_LEN_DECL);
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cpotrf, CPOTRF) (F77_CONST_CHAR_ARG_DECL, 
-                           const octave_idx_type&, 
-                           FloatComplex*, const octave_idx_type&,
-                           octave_idx_type&
-                           F77_CHAR_ARG_LEN_DECL
-                           F77_CHAR_ARG_LEN_DECL);
+                             const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (sggev, SGGEV) (F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           float*, const octave_idx_type&,
-                           float*, const octave_idx_type&,
-                           float*, float*, float*,
-                           float*, const octave_idx_type&, float*, const octave_idx_type&,
-                           float*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*, float*, float*,
+                           float*, const octave_idx_type&, float*,
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (ssygv, SSYGV) (const octave_idx_type&,
                            F77_CONST_CHAR_ARG_DECL, F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           float*, const octave_idx_type&,
-                           float*, const octave_idx_type&,
-                           float*, float*, const octave_idx_type&, octave_idx_type&
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*,
+                           const octave_idx_type&, float*, float*,
+                           const octave_idx_type&, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cggev, CGGEV) (F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           FloatComplex*, const octave_idx_type&,
-                           FloatComplex*, const octave_idx_type&,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
                            FloatComplex*, FloatComplex*,
-                           FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
-                           FloatComplex*, const octave_idx_type&, float*, octave_idx_type&
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, float*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (chegv, CHEGV) (const octave_idx_type&,
                            F77_CONST_CHAR_ARG_DECL, 
                            F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, 
-                           FloatComplex*, const octave_idx_type&,
-                           FloatComplex*, const octave_idx_type&,
-                           float*, FloatComplex*, const octave_idx_type&, float*, 
-                           octave_idx_type&
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, FloatComplex*,
+                           const octave_idx_type&, float*, FloatComplex*,
+                           const octave_idx_type&, float*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 FloatEIG::init (const FloatMatrix& a, bool calc_ev)
 {
   if (a.any_element_is_inf_or_nan ())
diff --git a/liboctave/floatCHOL.cc b/liboctave/floatCHOL.cc
--- a/liboctave/floatCHOL.cc
+++ b/liboctave/floatCHOL.cc
@@ -53,36 +53,38 @@ extern "C"
   F77_RET_T
   F77_FUNC (spocon, SPOCON) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
                              float*, const octave_idx_type&, const float&,
                              float&, float*, octave_idx_type*, 
                              octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 #ifdef HAVE_QRUPDATE
 
   F77_RET_T
-  F77_FUNC (sch1up, SCH1UP) (const octave_idx_type&, float*, const octave_idx_type&,
-                             float*, float*);
+  F77_FUNC (sch1up, SCH1UP) (const octave_idx_type&, float*,
+                             const octave_idx_type&, float*, float*);
 
   F77_RET_T
-  F77_FUNC (sch1dn, SCH1DN) (const octave_idx_type&, float*, const octave_idx_type&,
+  F77_FUNC (sch1dn, SCH1DN) (const octave_idx_type&, float*,
+                             const octave_idx_type&, float*, float*,
+                             octave_idx_type&);
+
+  F77_RET_T
+  F77_FUNC (schinx, SCHINX) (const octave_idx_type&, float*,
+                             const octave_idx_type&, const octave_idx_type&,
                              float*, float*, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (schinx, SCHINX) (const octave_idx_type&, float*, const octave_idx_type&,
-                             const octave_idx_type&, float*, float*, 
-                             octave_idx_type&);
+  F77_FUNC (schdex, SCHDEX) (const octave_idx_type&, float*,
+                             const octave_idx_type&, const octave_idx_type&,
+                             float*);
 
   F77_RET_T
-  F77_FUNC (schdex, SCHDEX) (const octave_idx_type&, float*, const octave_idx_type&,
+  F77_FUNC (schshx, SCHSHX) (const octave_idx_type&, float*,
+                             const octave_idx_type&, const octave_idx_type&,
                              const octave_idx_type&, float*);
-
-  F77_RET_T
-  F77_FUNC (schshx, SCHSHX) (const octave_idx_type&, float*, const octave_idx_type&,
-                             const octave_idx_type&, const octave_idx_type&, 
-                             float*);
 #endif
 }
 
 octave_idx_type
 FloatCHOL::init (const FloatMatrix& a, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
diff --git a/liboctave/floatGEPBAL.cc b/liboctave/floatGEPBAL.cc
--- a/liboctave/floatGEPBAL.cc
+++ b/liboctave/floatGEPBAL.cc
@@ -31,29 +31,33 @@ along with Octave; see the file COPYING.
 #include "floatGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (sggbal, SGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
-                             float* A, const octave_idx_type& LDA, float* B,
-                             const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
+  F77_FUNC (sggbal, SGGBAL) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, float* A,
+                             const octave_idx_type& LDA, float* B,
+                             const octave_idx_type& LDB,
+                             octave_idx_type& ILO, octave_idx_type& IHI,
                              float* LSCALE, float* RSCALE,
                              float* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (sggbak, SGGBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type& N, const octave_idx_type& ILO,
-                             const octave_idx_type& IHI, const float* LSCALE,
-                             const float* RSCALE, octave_idx_type& M, float* V,
+                             const octave_idx_type& N,
+                             const octave_idx_type& ILO,
+                             const octave_idx_type& IHI,
+                             const float* LSCALE, const float* RSCALE,
+                             octave_idx_type& M, float* V,
                              const octave_idx_type& LDV, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
 }
 
 octave_idx_type
 FloatGEPBALANCE::init (const FloatMatrix& a, const FloatMatrix& b, 
diff --git a/liboctave/floatHESS.cc b/liboctave/floatHESS.cc
--- a/liboctave/floatHESS.cc
+++ b/liboctave/floatHESS.cc
@@ -28,35 +28,40 @@ along with Octave; see the file COPYING.
 #include "floatHESS.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgebal, SGEBAL) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, float*, const octave_idx_type&, octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type&,
                              octave_idx_type&, float*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (sgehrd, SGEHRD) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             float*, const octave_idx_type&, float*, float*,
+  F77_FUNC (sgehrd, SGEHRD) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, float*, float*,
                              const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (sorghr, SORGHR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
-                             float*, const octave_idx_type&, float*, float*,
+  F77_FUNC (sorghr, SORGHR) (const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, float*, float*,
                              const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (sgebak, SGEBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, float*,
-                             const octave_idx_type&, float*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 FloatHESS::init (const FloatMatrix& a)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/floatSCHUR.cc b/liboctave/floatSCHUR.cc
--- a/liboctave/floatSCHUR.cc
+++ b/liboctave/floatSCHUR.cc
@@ -33,20 +33,22 @@ along with Octave; see the file COPYING.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgeesx, SGEESX) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              FloatSCHUR::select_function,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, float*, const octave_idx_type&, octave_idx_type&,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type&,
                              float*, float*, float*, const octave_idx_type&,
                              float&, float&, float*, const octave_idx_type&,
-                             octave_idx_type*, const octave_idx_type&, octave_idx_type*, octave_idx_type&
+                             octave_idx_type*, const octave_idx_type&,
+                             octave_idx_type*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 static octave_idx_type
 select_ana (const float& a, const float&)
 {
diff --git a/liboctave/floatSVD.cc b/liboctave/floatSVD.cc
--- a/liboctave/floatSVD.cc
+++ b/liboctave/floatSVD.cc
@@ -31,29 +31,32 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgesvd, SGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, float*,
-                             const octave_idx_type&, float*, float*,
-                             const octave_idx_type&, float*, const octave_idx_type&,
-                             float*, const octave_idx_type&, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             float*, const octave_idx_type&, float*,
+                             float*, const octave_idx_type&, float*,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (sgesdd, SGESDD) (F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&, const octave_idx_type&, float*,
-                             const octave_idx_type&, float*, float*,
-                             const octave_idx_type&, float*, const octave_idx_type&,
-                             float*, const octave_idx_type&, octave_idx_type *, octave_idx_type&
+                             const octave_idx_type&, const octave_idx_type&,
+                             float*, const octave_idx_type&, float*,
+                             float*, const octave_idx_type&, float*,
+                             const octave_idx_type&, float*,
+                             const octave_idx_type&, octave_idx_type *,
+                             octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 FloatMatrix
 FloatSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
