# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463455250 14400
#      Mon May 16 23:20:50 2016 -0400
# Node ID b28c26ae737c7a9edefd36ef3fff38433eaf270e
# Parent  ff054947d1327e040e7f81339b567477b3bf4bc8
use C++ for random number generator sources

* randgamma.cc: Rename from randgamma.c.  Update for C++.
* randmtzig.cc: Rename from randmtzig.c.  Update for C++.
* randpoisson.cc: Rename from randpoisson.c.  Update for C++.
* randgamma.h, randmtzig.h, randpoisson.h: Update for C++.
* liboctave/numeric/module.mk: Update.

diff --git a/liboctave/numeric/module.mk b/liboctave/numeric/module.mk
--- a/liboctave/numeric/module.mk
+++ b/liboctave/numeric/module.mk
@@ -50,21 +50,16 @@ NUMERIC_INC = \
   liboctave/numeric/randpoisson.h \
   liboctave/numeric/schur.h \
   liboctave/numeric/sparse-chol.h \
   liboctave/numeric/sparse-dmsolve.h \
   liboctave/numeric/sparse-lu.h \
   liboctave/numeric/sparse-qr.h \
   liboctave/numeric/svd.h
 
-NUMERIC_C_SRC = \
-  liboctave/numeric/randgamma.c \
-  liboctave/numeric/randmtzig.c \
-  liboctave/numeric/randpoisson.c
-
 NUMERIC_SRC = \
   liboctave/numeric/CollocWt.cc \
   liboctave/numeric/DASPK.cc \
   liboctave/numeric/DASRT.cc \
   liboctave/numeric/DASSL.cc \
   liboctave/numeric/EIG.cc \
   liboctave/numeric/LSODE.cc \
   liboctave/numeric/ODES.cc \
@@ -80,23 +75,25 @@ NUMERIC_SRC = \
   liboctave/numeric/lu.cc \
   liboctave/numeric/oct-convn.cc \
   liboctave/numeric/oct-fftw.cc \
   liboctave/numeric/oct-norm.cc \
   liboctave/numeric/oct-rand.cc \
   liboctave/numeric/oct-spparms.cc \
   liboctave/numeric/qr.cc \
   liboctave/numeric/qrp.cc \
+  liboctave/numeric/randgamma.cc \
+  liboctave/numeric/randmtzig.cc \
+  liboctave/numeric/randpoisson.cc \
   liboctave/numeric/schur.cc \
   liboctave/numeric/sparse-chol.cc \
   liboctave/numeric/sparse-dmsolve.cc \
   liboctave/numeric/sparse-lu.cc \
   liboctave/numeric/sparse-qr.cc \
-  liboctave/numeric/svd.cc \
-  $(NUMERIC_C_SRC)
+  liboctave/numeric/svd.cc
 
 LIBOCTAVE_TEMPLATE_SRC += \
   liboctave/numeric/bsxfun-defs.cc
 
 ## Special rules for sources which must be built before rest of compilation.
 $(LIBOCTAVE_OPT_INC) : %.h : %.in
 	$(AM_V_GEN)rm -f $@-t $@ && \
 	$(PERL) $(srcdir)/build-aux/mk-opts.pl --opt-class-header $< > $@-t && \
diff --git a/liboctave/numeric/randgamma.c b/liboctave/numeric/randgamma.cc
rename from liboctave/numeric/randgamma.c
rename to liboctave/numeric/randgamma.cc
--- a/liboctave/numeric/randgamma.c
+++ b/liboctave/numeric/randgamma.cc
@@ -76,18 +76,16 @@ Dirichlet(a1,...,ak) for ai > 0
   r = r / sum(r)
   (from GSL, citing Law & Kelton(1991), Simulation Modeling and Analysis)
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <stdio.h>
-
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "randmtzig.h"
 #include "randgamma.h"
 
 #undef NAN
 #define NAN octave_NaN
 #define INFINITE lo_ieee_isinf
diff --git a/liboctave/numeric/randgamma.h b/liboctave/numeric/randgamma.h
--- a/liboctave/numeric/randgamma.h
+++ b/liboctave/numeric/randgamma.h
@@ -23,24 +23,16 @@ along with Octave; see the file COPYING.
 /* Original version written by Paul Kienzle distributed as free
    software in the in the public domain.  */
 
 #if ! defined (octave_randgamma_h)
 #define octave_randgamma_h 1
 
 #include "octave-config.h"
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 extern OCTAVE_API double oct_randg (double a);
 extern OCTAVE_API void oct_fill_randg (double a, octave_idx_type n, double *p);
 
 extern OCTAVE_API float oct_float_randg (float a);
 extern OCTAVE_API void oct_fill_float_randg (float a, octave_idx_type n,
                                              float *p);
 
-#ifdef __cplusplus
-}
 #endif
-
-#endif
diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.cc
rename from liboctave/numeric/randmtzig.c
rename to liboctave/numeric/randmtzig.cc
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.cc
@@ -151,18 +151,18 @@ along with Octave; see the file COPYING.
    void oct_fill_float_randn (octave_idx_type, float [])
    void oct_fill_float_rande (octave_idx_type, float [])
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <stdio.h>
-#include <time.h>
+#include <cstdio>
+#include <ctime>
 
 #ifdef HAVE_GETTIMEOFDAY
 #  include <sys/time.h>
 #endif
 
 #include "lo-math.h"
 #include "randmtzig.h"
 
@@ -264,31 +264,31 @@ oct_init_by_entropy (void)
   FILE* urandom = fopen ("/dev/urandom", "rb");
   if (urandom)
     {
       while (n < MT_N)
         {
           unsigned char word[4];
           if (fread (word, 4, 1, urandom) != 1)
             break;
-          entropy[n++] = word[0]+(word[1]<<8)+(word[2]<<16)+((uint32_t)word[3]<<24);
+          entropy[n++] = word[0]+(word[1]<<8)+(word[2]<<16)+(static_cast<uint32_t>(word[3])<<24);
         }
       fclose (urandom);
     }
 
   /* If there isn't enough entropy, gather some from various sources */
   if (n < MT_N)
-    entropy[n++] = time (NULL); /* Current time in seconds */
+    entropy[n++] = time (0); /* Current time in seconds */
   if (n < MT_N)
     entropy[n++] = clock ();    /* CPU time used (usec) */
 #ifdef HAVE_GETTIMEOFDAY
   if (n < MT_N)
     {
       struct timeval tv;
-      if (gettimeofday (&tv, NULL) != -1)
+      if (gettimeofday (&tv, 0) != -1)
         entropy[n++] = tv.tv_usec;   /* Fractional part of current time */
     }
 #endif
   /* Send all the entropy into the initial state vector */
   oct_init_by_array (entropy,n);
 }
 
 void
@@ -364,41 +364,41 @@ randi53 (void)
   const uint32_t hi = randi32 () & 0x1FFFFF;
 #ifdef HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
-  return (( (uint64_t)hi << 32) | lo);
+  return ((static_cast<uint64_t> (hi) << 32) | lo);
 #endif
 }
 
 static uint64_t
 randi54 (void)
 {
   const uint32_t lo = randi32 ();
   const uint32_t hi = randi32 () & 0x3FFFFF;
 #ifdef HAVE_X86_32
   uint64_t u;
-  uint32_t *p = (uint32_t *)&u;
+  uint32_t *p = static_cast<uint32_t *> (&u);
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
-  return (( (uint64_t)hi << 32 ) | lo);
+  return ((static_cast<uint64_t> (hi) << 32) | lo);
 #endif
 }
 
 /* generates a random number on (0,1)-real-interval */
 static float
 randu32 (void)
 {
-  return ((float)randi32 () + 0.5) * (1.0/4294967296.0);
+  return (static_cast<float> (randi32 ()) + 0.5) * (1.0/4294967296.0);
   /* divided by 2^32 */
 }
 
 /* generates a random number on (0,1) with 53-bit resolution */
 static double
 randu53 (void)
 {
   const uint32_t a = randi32 () >> 5;
@@ -493,27 +493,27 @@ create_ziggurat_tables (void)
   wi[255] = x1 / NMANTISSA;
   fi[255] = exp (-0.5 * x1 * x1);
 
   /* Index zero is special for tail strip, where Marsaglia and Tsang
    * defines this as
    * k_0 = 2^31 * r * f(r) / v, w_0 = 0.5^31 * v / f(r), f_0 = 1,
    * where v is the area of each strip of the ziggurat.
    */
-  ki[0] = (ZIGINT) (x1 * fi[255] / NOR_SECTION_AREA * NMANTISSA);
+  ki[0] = static_cast<ZIGINT> (x1 * fi[255] / NOR_SECTION_AREA * NMANTISSA);
   wi[0] = NOR_SECTION_AREA / fi[255] / NMANTISSA;
   fi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
       x = sqrt (-2. * log (NOR_SECTION_AREA / x1 + fi[i+1]));
-      ki[i+1] = (ZIGINT)(x / x1 * NMANTISSA);
+      ki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       wi[i] = x / NMANTISSA;
       fi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   ki[1] = 0;
 
   /* Zigurrat tables for the exponential distribution */
@@ -521,27 +521,27 @@ create_ziggurat_tables (void)
   we[255] = x1 / EMANTISSA;
   fe[255] = exp (-x1);
 
   /* Index zero is special for tail strip, where Marsaglia and Tsang
    * defines this as
    * k_0 = 2^32 * r * f(r) / v, w_0 = 0.5^32 * v / f(r), f_0 = 1,
    * where v is the area of each strip of the ziggurat.
    */
-  ke[0] = (ZIGINT) (x1 * fe[255] / EXP_SECTION_AREA * EMANTISSA);
+  ke[0] = static_cast<ZIGINT> (x1 * fe[255] / EXP_SECTION_AREA * EMANTISSA);
   we[0] = EXP_SECTION_AREA / fe[255] / EMANTISSA;
   fe[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-x) -> x = -ln(y)
        */
       x = - log (EXP_SECTION_AREA / x1 + fe[i+1]);
-      ke[i+1] = (ZIGINT)(x / x1 * EMANTISSA);
+      ke[i+1] = static_cast<ZIGINT> (x / x1 * EMANTISSA);
       we[i] = x / EMANTISSA;
       fe[i] = exp (-x);
       x1 = x;
     }
   ke[1] = 0;
 
   initt = 0;
 }
@@ -590,20 +590,20 @@ oct_randn (void)
       si = hi & UMASK;
       p[0] = lo;
       p[1] = hi & 0x1FFFFF;
       x = ( si ? -rabs : rabs ) * wi[idx];
 # else /* ! HAVE_X86_32 */
       /* arbitrary mantissa (selected by NRANDI, with 1 bit for sign) */
       const uint64_t r = NRANDI;
       const int64_t rabs = r >> 1;
-      const int idx = (int)(rabs & 0xFF);
+      const int idx = static_cast<int> (rabs & 0xFF);
       const double x = ( (r & 1) ? -rabs : rabs) * wi[idx];
 # endif /* ! HAVE_X86_32 */
-      if (rabs < (int64_t)ki[idx])
+      if (rabs < static_cast<int64_t> (ki[idx]))
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the normal tail, the method of Marsaglia[5] provides:
            * generate x = -ln(U_1)/r, y = -ln(U_2), until y+y > x*x,
            * then return r+x. Except that r+x is always in the positive
@@ -630,17 +630,17 @@ double
 oct_rande (void)
 {
   if (initt)
     create_ziggurat_tables ();
 
   while (1)
     {
       ZIGINT ri = ERANDI;
-      const int idx = (int)(ri & 0xFF);
+      const int idx = static_cast<int> (ri & 0xFF);
       const double x = ri * we[idx];
       if (ri < ke[idx])
         return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
@@ -684,27 +684,27 @@ create_ziggurat_float_tables (void)
   fwi[255] = x1 / NMANTISSA;
   ffi[255] = exp (-0.5 * x1 * x1);
 
   /* Index zero is special for tail strip, where Marsaglia and Tsang
    * defines this as
    * k_0 = 2^31 * r * f(r) / v, w_0 = 0.5^31 * v / f(r), f_0 = 1,
    * where v is the area of each strip of the ziggurat.
    */
-  fki[0] = (ZIGINT) (x1 * ffi[255] / NOR_SECTION_AREA * NMANTISSA);
+  fki[0] = static_cast<ZIGINT> (x1 * ffi[255] / NOR_SECTION_AREA * NMANTISSA);
   fwi[0] = NOR_SECTION_AREA / ffi[255] / NMANTISSA;
   ffi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
       x = sqrt (-2. * log (NOR_SECTION_AREA / x1 + ffi[i+1]));
-      fki[i+1] = (ZIGINT)(x / x1 * NMANTISSA);
+      fki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       fwi[i] = x / NMANTISSA;
       ffi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   fki[1] = 0;
 
   /* Zigurrat tables for the exponential distribution */
@@ -712,27 +712,27 @@ create_ziggurat_float_tables (void)
   fwe[255] = x1 / EMANTISSA;
   ffe[255] = exp (-x1);
 
   /* Index zero is special for tail strip, where Marsaglia and Tsang
    * defines this as
    * k_0 = 2^32 * r * f(r) / v, w_0 = 0.5^32 * v / f(r), f_0 = 1,
    * where v is the area of each strip of the ziggurat.
    */
-  fke[0] = (ZIGINT) (x1 * ffe[255] / EXP_SECTION_AREA * EMANTISSA);
+  fke[0] = static_cast<ZIGINT> (x1 * ffe[255] / EXP_SECTION_AREA * EMANTISSA);
   fwe[0] = EXP_SECTION_AREA / ffe[255] / EMANTISSA;
   ffe[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-x) -> x = -ln(y)
        */
       x = - log (EXP_SECTION_AREA / x1 + ffe[i+1]);
-      fke[i+1] = (ZIGINT)(x / x1 * EMANTISSA);
+      fke[i+1] = static_cast<ZIGINT> (x / x1 * EMANTISSA);
       fwe[i] = x / EMANTISSA;
       ffe[i] = exp (-x);
       x1 = x;
     }
   fke[1] = 0;
 
   inittf = 0;
 }
@@ -758,18 +758,18 @@ oct_float_randn (void)
   if (inittf)
     create_ziggurat_float_tables ();
 
   while (1)
     {
       /* 32-bit mantissa */
       const uint32_t r = randi32 ();
       const uint32_t rabs = r & LMASK;
-      const int idx = (int)(r & 0xFF);
-      const float x = ((int32_t)r) * fwi[idx];
+      const int idx = static_cast<int> (r & 0xFF);
+      const float x = static_cast<int32_t> (r) * fwi[idx];
       if (rabs < fki[idx])
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the normal tail, the method of Marsaglia[5] provides:
            * generate x = -ln(U_1)/r, y = -ln(U_2), until y+y > x*x,
@@ -797,17 +797,17 @@ float
 oct_float_rande (void)
 {
   if (inittf)
     create_ziggurat_float_tables ();
 
   while (1)
     {
       ZIGINT ri = ERANDI;
-      const int idx = (int)(ri & 0xFF);
+      const int idx = static_cast<int> (ri & 0xFF);
       const float x = ri * fwe[idx];
       if (ri < fke[idx])
         return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
diff --git a/liboctave/numeric/randmtzig.h b/liboctave/numeric/randmtzig.h
--- a/liboctave/numeric/randmtzig.h
+++ b/liboctave/numeric/randmtzig.h
@@ -63,42 +63,34 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_randmtzig_h)
 #define octave_randmtzig_h 1
 
 #include "octave-config.h"
 
 #define MT_N 624
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* Mersenne Twister.  */
+// Mersenne Twister.
 extern OCTAVE_API void oct_init_by_int (uint32_t s);
 extern OCTAVE_API void oct_init_by_array (uint32_t *init_key, int key_length);
 extern OCTAVE_API void oct_init_by_entropy (void);
 extern OCTAVE_API void oct_set_state (uint32_t *save);
 extern OCTAVE_API void oct_get_state (uint32_t *save);
 
-/* Array generators.  */
+// Array generators.
 extern OCTAVE_API double oct_randu (void);
 extern OCTAVE_API double oct_randn (void);
 extern OCTAVE_API double oct_rande (void);
 
 extern OCTAVE_API float oct_float_randu (void);
 extern OCTAVE_API float oct_float_randn (void);
 extern OCTAVE_API float oct_float_rande (void);
 
-/* Array generators.  */
+// Array generators.
 extern OCTAVE_API void oct_fill_randu (octave_idx_type n, double *p);
 extern OCTAVE_API void oct_fill_randn (octave_idx_type n, double *p);
 extern OCTAVE_API void oct_fill_rande (octave_idx_type n, double *p);
 
 extern OCTAVE_API void oct_fill_float_randu (octave_idx_type n, float *p);
 extern OCTAVE_API void oct_fill_float_randn (octave_idx_type n, float *p);
 extern OCTAVE_API void oct_fill_float_rande (octave_idx_type n, float *p);
 
-#ifdef __cplusplus
-}
 #endif
-
-#endif
diff --git a/liboctave/numeric/randpoisson.c b/liboctave/numeric/randpoisson.cc
rename from liboctave/numeric/randpoisson.c
rename to liboctave/numeric/randpoisson.cc
--- a/liboctave/numeric/randpoisson.c
+++ b/liboctave/numeric/randpoisson.cc
@@ -30,18 +30,16 @@ along with Octave; see the file COPYING.
  * LGAMMA: log gamma function
  * INFINITE: function to test whether a value is infinite
  */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <stdio.h>
-
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "randmtzig.h"
 #include "randpoisson.h"
 
 #undef NAN
@@ -104,17 +102,17 @@ flogfak (double k)
 
   if (k >= 30.0)
     {
       r  = 1.0 / k;
       rr = r * r;
       return ((k + 0.5)*log (k) - k + C0 + r*(C1 + rr*(C3 + rr*(C5 + rr*C7))));
     }
   else
-    return (logfak[(int)k]);
+    return (logfak[static_cast<int> (k)]);
 }
 
 
 /******************************************************************
  *                                                                *
  * Poisson Distribution - Patchwork Rejection/Inversion           *
  *                                                                *
  ******************************************************************
@@ -312,25 +310,25 @@ poisson_cdf_lookup (double lambda, doubl
    * in the range [0,1], then for lambda==10 we need a table
    * size of 46 instead.  For long doubles, the table size
    * will need to be longer still.  */
 #define TABLESIZE 46
   double t[TABLESIZE];
 
   /* Precompute the table for the u up to and including 0.458.
    * We will almost certainly need it. */
-  int intlambda = (int)floor (lambda);
+  int intlambda = static_cast<int> (floor (lambda));
   double P;
   int tableidx;
   size_t i = n;
 
   t[0] = P = exp (-lambda);
   for (tableidx = 1; tableidx <= intlambda; tableidx++)
     {
-      P = P*lambda/(double)tableidx;
+      P = P*lambda/static_cast<double> (tableidx);
       t[tableidx] = t[tableidx-1] + P;
     }
 
   while (i-- > 0)
     {
       double u = RUNI;
 
       /* If u > 0.458 we know we can jump to floor(lambda) before
@@ -342,84 +340,84 @@ poisson_cdf_lookup (double lambda, doubl
 
       /* We aren't using a for loop here because when we find the
        * right k we want to jump to the next iteration of the
        * outer loop, and the continue statement will only work for
        * the inner loop. */
     nextk:
       if (u <= t[k])
         {
-          p[i] = (double) k;
+          p[i] = static_cast<double> (k);
           continue;
         }
       if (++k < tableidx)
         goto nextk;
 
       /* We only need high values of the table very rarely so we
        * don't automatically compute the entire table. */
       while (tableidx < TABLESIZE)
         {
-          P = P*lambda/(double)tableidx;
+          P = P*lambda/static_cast<double> (tableidx);
           t[tableidx] = t[tableidx-1] + P;
           /* Make sure we converge to 1.0 just in case u is uniform
            * on [0,1] rather than [0,1). */
           if (t[tableidx] == t[tableidx-1]) t[tableidx] = 1.0;
           tableidx++;
           if (u <= t[tableidx-1]) break;
         }
 
       /* We are assuming that the table size is big enough here.
        * This should be true even if RUNI is returning values in
        * the range [0,1] rather than [0,1). */
-      p[i] = (double)(tableidx-1);
+      p[i] = static_cast<double> (tableidx-1);
     }
 }
 
 static void
 poisson_cdf_lookup_float (double lambda, float *p, size_t n)
 {
   double t[TABLESIZE];
 
   /* Precompute the table for the u up to and including 0.458.
    * We will almost certainly need it. */
-  int intlambda = (int)floor (lambda);
+  int intlambda = static_cast<int> (floor (lambda));
   double P;
   int tableidx;
   size_t i = n;
 
   t[0] = P = exp (-lambda);
   for (tableidx = 1; tableidx <= intlambda; tableidx++)
     {
-      P = P*lambda/(double)tableidx;
+      P = P*lambda/static_cast<double> (tableidx);
       t[tableidx] = t[tableidx-1] + P;
     }
 
   while (i-- > 0)
     {
       double u = RUNI;
       int k = (u > 0.458 ? intlambda : 0);
     nextk:
       if (u <= t[k])
         {
-          p[i] = (float) k;
+          p[i] = static_cast<float> (k);
           continue;
         }
       if (++k < tableidx)
         goto nextk;
 
       while (tableidx < TABLESIZE)
         {
-          P = P*lambda/(double)tableidx;
+          P = P*lambda/static_cast<double> (tableidx);
           t[tableidx] = t[tableidx-1] + P;
           if (t[tableidx] == t[tableidx-1]) t[tableidx] = 1.0;
           tableidx++;
           if (u <= t[tableidx-1]) break;
         }
 
-      p[i] = (float)(tableidx-1);
+      p[i] = static_cast<float> (tableidx-1);
     }
 }
 
 /* From Press, et al., Numerical Recipes */
 static void
 poisson_rejection (double lambda, double *p, size_t n)
 {
   double sq = sqrt (2.0*lambda);
diff --git a/liboctave/numeric/randpoisson.h b/liboctave/numeric/randpoisson.h
--- a/liboctave/numeric/randpoisson.h
+++ b/liboctave/numeric/randpoisson.h
@@ -23,29 +23,21 @@ along with Octave; see the file COPYING.
 /* Original version written by Paul Kienzle distributed as free
    software in the in the public domain.  */
 
 #if ! defined (octave_randpoisson_h)
 #define octave_randpoisson_h 1
 
 #include "octave-config.h"
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 extern OCTAVE_API double
 oct_randp (double L);
 
 extern OCTAVE_API void
 oct_fill_randp (double L, octave_idx_type n, double *p);
 
 extern OCTAVE_API float
 oct_float_randp (float L);
 
 extern OCTAVE_API void
 oct_fill_float_randp (float L, octave_idx_type n, float *p);
 
-#ifdef __cplusplus
-}
 #endif
-
-#endif
