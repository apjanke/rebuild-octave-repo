# HG changeset patch
# User jwe
# Date 777852975 0
#      Thu Aug 25 22:16:15 1994 +0000
# Node ID 6a2e35dc94c35271eeb5de74b6fd3ba647a586c7
# Parent  4457d1970b0a06d320407539968c7ab2501ee4cf
[project @ 1994-08-25 22:16:05 by jwe]

diff --git a/info/Makefile.in b/info/Makefile.in
--- a/info/Makefile.in
+++ b/info/Makefile.in
@@ -1,12 +1,12 @@
 # Makefile for Octave's info directory.  Adapted from the makefile for
 # texinfo/info.
 #
-# Copyright (C) 1993 Free Software Foundation, Inc.
+# Copyright (C) 1993, 1994 Free Software Foundation, Inc.
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2, or (at your option)
 # any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -22,16 +22,20 @@
 TOPDIR = ..
 
 srcdir = @srcdir@
 top_srcdir = @top_srcdir@
 VPATH  = @srcdir@:@srcdir@/../src
 
 include $(TOPDIR)/Makeconf
 
+INSTALL = @INSTALL@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_DATA = @INSTALL_DATA@
+
 common = @srcdir@/../src
 
 MAKEINFO= makeinfo
 
 LDEFS = -DNAMED_FUNCTIONS=1 -DDEFAULT_INFOPATH='"$(DEFAULT_INFOPATH)"'
 
 TERMLIBS = @TERMLIBS@
 LIBS = $(TERMLIBS) @LIBS@
diff --git a/info/session.c b/info/session.c
--- a/info/session.c
+++ b/info/session.c
@@ -4153,18 +4153,29 @@ info_get_input_char ()
   if (pending_input_character)
     {
       keystroke = pending_input_character;
       pending_input_character = 0;
     }
   else if (info_get_key_from_typeahead (&keystroke) == 0)
     {
       int rawkey;
-
-      rawkey = getc (info_input_stream);
+      int ignoreeof = 7;
+
+ /* Ugh.  After returning from a C-z that interrupted us while we were
+    waiting on input, Ultrix (and other?) systems return EOF from getc
+    instead of continuing to wait.  Hack around that by trying to read
+    atain up to IGNOREEOF times. */
+
+      do
+	{
+	  rawkey = getc (info_input_stream);
+	}
+      while (rawkey == EOF && --ignoreeof);
+
       keystroke = rawkey;
 
       if (rawkey == EOF)
 	{
 	  if (info_input_stream != stdin)
 	    {
 	      fclose (info_input_stream);
 	      info_input_stream = stdin;
@@ -4172,16 +4183,17 @@ info_get_input_char ()
 	      display_update_display (windows);
 	      display_cursor_at_point (active_window);
 	      rawkey = getc (info_input_stream);
 	      keystroke = rawkey;
 	    }
 
 	  if (rawkey == EOF)
 	    {
+	      keystroke = '\0';
 	      terminal_unprep_terminal ();
 	      close_dribble_file ();
 	      exit (0);
 	    }
 	}
     }
 
   if (info_dribble_file)
diff --git a/info/signals.c b/info/signals.c
--- a/info/signals.c
+++ b/info/signals.c
@@ -135,37 +135,40 @@ info_signal_handler (sig)
 #endif
 #if defined (SIGINT)
     case SIGINT:
 #endif
       {
 #if defined (SIGTSTP)
 	if (sig == SIGTSTP)
 	  old_signal_handler = &old_TSTP;
-	if (sig == SIGTTOU)
+	else if (sig == SIGTTOU)
 	  old_signal_handler = &old_TTOU;
-	if (sig == SIGTTIN)
+	else if (sig == SIGTTIN)
 	  old_signal_handler = &old_TTIN;
 #endif /* SIGTSTP */
-	if (sig == SIGINT)
+#if defined (SIGINT)
+	else if (sig == SIGINT)
 	  old_signal_handler = &old_INT;
+#endif
 
 	/* For stop signals, restore the terminal IO, leave the cursor
 	   at the bottom of the window, and stop us. */
 	terminal_goto_xy (0, screenheight - 1);
 	terminal_clear_to_eol ();
 	fflush (stdout);
 	terminal_unprep_terminal ();
+ 	UNBLOCK_SIGNAL (sig);
 	signal (sig, *old_signal_handler);
- 	UNBLOCK_SIGNAL (sig);
 	kill (getpid (), sig);
 
 	/* The program is returning now.  Restore our signal handler,
 	   turn on terminal handling, redraw the screen, and place the
 	   cursor where it belongs. */
+	
 	terminal_prep_terminal ();
 	*old_signal_handler = (SigHandler *) signal (sig, info_signal_handler);
 	redisplay_after_signal ();
 	fflush (stdout);
       }
       break;
 
 #if defined (SIGWINCH)
