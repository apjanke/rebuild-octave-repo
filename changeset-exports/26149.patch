# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543522525 28800
#      Thu Nov 29 12:15:25 2018 -0800
# Node ID 242aa7b2c783cfed3530ded0fdff08b90d1380b5
# Parent  8c72f0345ee8ea9a6cad81d8ed81bf17db193459
Silence unnecessary warnings about security-format (bug #55046).

* Table.cc, sub2ind.cc, syscalls.cc, symbfact.cc, ov-java.cc, oct-parse.yy,
pt-eval.cc: Supply a format string of "%s" when calling error() or warning()
and a single string to print.

diff --git a/libgui/graphics/Table.cc b/libgui/graphics/Table.cc
--- a/libgui/graphics/Table.cc
+++ b/libgui/graphics/Table.cc
@@ -304,17 +304,17 @@ namespace QtHandles
           text = Utils::fromStdString (b ? "1" : "0");
       }
     else
       {
         std::stringstream warn_string;
         warn_string << "Unknown conversion for datatype " << val.class_name ()
                     << " to " << format
                     << " for value " << val.string_value (true);
-        warning (warn_string.str ().c_str ());
+        warning ("%s", warn_string.str ().c_str ());
 
         text = Utils::fromStdString (val.string_value (true));
       }
 
     return std::make_pair (flag, text);
   }
 
 #undef FORMAT_VALUE
@@ -546,17 +546,17 @@ namespace QtHandles
         octave_value cellEditCallbackEventObject =
           octave_value (new octave_struct (eventData));
 
         gh_manager::post_callback (m_handle,
                                    "celleditcallback",
                                    cellEditCallbackEventObject);
       }
     else if (error.string_value ().length () > 0)
-      warning (error.string_value ().c_str ());
+      warning ("%s", error.string_value ().c_str ());
   }
 
   void
   Table::comboBoxCurrentIndexChanged (const QString& value)
   {
     if (m_blockUpdates)
       return;
 
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -126,17 +126,17 @@ ind = sub2ind ([3, 3], s1, s2)
           if (j > 0 && args(j+1).dims () != args(1).dims ())
             error ("sub2ind: all subscripts must be of the same size");
         }
       catch (octave::index_exception& e)
         {
           e.set_pos_if_unset (nargin-1, j+1);
           e.set_var ();
           std::string msg = e.message ();
-          error_with_id (e.err_id (), msg.c_str ());
+          error_with_id (e.err_id (), "%s", msg.c_str ());
         }
     }
 
   return ovl (sub2ind (dv, idxa));
 }
 
 /*
 ## Test evaluation
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -285,17 +285,17 @@ exit status, it will linger until Octave
 
   int filedesc[2];
   std::string msg;
   pid_t pid;
 
   pid = octave::sys::popen2 (exec_file, arg_list, sync_mode, filedesc, msg);
 
   if (pid < 0)
-    error (msg.c_str ());
+    error ("%s", msg.c_str ());
 
   FILE *ifile = fdopen (filedesc[1], "r");
   FILE *ofile = fdopen (filedesc[0], "w");
 
   octave::stream is
     = octave_stdiostream::create (exec_file + "-in", ifile, std::ios::in);
 
   octave::stream os
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -372,17 +372,17 @@ Cholesky@tie{}factorization as determine
     tmp(i) = ColCount[i];
   retval(0) = tmp;
 
 cleanup:
   CHOLMOD_NAME(free_sparse) (&F, cm);
   CHOLMOD_NAME(finish) (cm);
 
   if (! err_msg.empty ())
-    error (err_msg.c_str ());
+    error ("%s", err_msg.c_str ());
 
   return retval;
 
 #else
 
   octave_unused_parameter (args);
   octave_unused_parameter (nargout);
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1933,17 +1933,17 @@ initialize_java (void)
           JNIEnv *current_env = thread_jni_env ();
 
           octave::command_editor::add_event_hook (java_event_hook);
 
           octave_thread_ID = get_current_thread_ID (current_env);
         }
       catch (std::string msg)
         {
-          error (msg.c_str ());
+          error ("%s", msg.c_str ());
         }
 
       octave_set_default_fpucw ();
     }
 }
 
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_call (JNIEnv *env, jclass, jstring funcName,
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5680,17 +5680,17 @@ Like @code{eval}, except that the expres
 
 static void
 maybe_print_last_error_message (bool *doit)
 {
   if (doit && *doit)
     // Print error message again, which was lost because of the stderr buffer
     // Note: this keeps error_state and last_error_stack intact
     message_with_id ("error", last_error_id ().c_str (),
-                     last_error_message ().c_str ());
+                     "%s", last_error_message ().c_str ());
 }
 
 static void
 restore_octave_stdout (std::streambuf *buf)
 {
   octave_stdout.flush ();
   octave_stdout.rdbuf (buf);
 }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2715,17 +2715,17 @@ namespace octave
                 args.stash_name_tags (string_vector (lhs->name ()));
                 feval ("display", args);
               }
           }
         catch (index_exception& e)
           {
             e.set_var (lhs->name ());
             std::string msg = e.message ();
-            error_with_id (e.err_id (), msg.c_str ());
+            error_with_id (e.err_id (), "%s", msg.c_str ());
           }
       }
 
     push_result (val);
   }
 
   void
   tree_evaluator::visit_statement (tree_statement& stmt)
@@ -3480,17 +3480,17 @@ namespace octave
             if (fp && fp->name () == var)
               extra_message
                 = " (note: variable '" + var + "' shadows function)";
           }
       }
 
     std::string msg = e.message () + extra_message;
 
-    error_with_id (e.err_id (), msg.c_str ());
+    error_with_id (e.err_id (), "%s", msg.c_str ());
   }
 
   void
   tree_evaluator::push_echo_state (unwind_protect& frame, int type,
                                    const std::string& file_name,
                                    size_t pos)
   {
     push_echo_state_cleanup (frame);
