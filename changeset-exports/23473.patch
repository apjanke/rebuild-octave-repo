# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1494263291 14400
#      Mon May 08 13:08:11 2017 -0400
# Node ID 55916f99b8b6de38d30249e2e0aefcca46f55ca8
# Parent  c8722519330af17b7c6f7c109fe1572d38ac7475
prefer feval over do_multi_index_op

* parse.h, oct-parse.in.yy (feval (octave_function *, const
octave_value_list& args, int)): New function.

* bsxfun.cc, cellfun.cc, daspk.cc, dasrt.cc, dassl.cc, data.cc,
hook-fcn.h, lsode.cc, quad.cc, __eigs__.cc, __ode15__.cc:
Use feval for function evaluations instead of do_multi_index_op.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -400,24 +400,24 @@ dimensionality as the other array.
                                            : (dva(i) > dvb(i) ? dva(i)
                                                               : dvb(i))));
 
       if (dva == dvb || dva.numel () == 1 || dvb.numel () == 1)
         {
           octave_value_list inputs (2);
           inputs(0) = A;
           inputs(1) = B;
-          retval = func.do_multi_index_op (1, inputs);
+          retval = octave::feval (func, inputs, 1);
         }
       else if (dvc.numel () < 1)
         {
           octave_value_list inputs (2);
           inputs(0) = A.resize (dvc);
           inputs(1) = B.resize (dvc);
-          retval = func.do_multi_index_op (1, inputs);
+          retval = octave::feval (func, inputs, 1);
         }
       else
         {
           octave_idx_type ncount = 1;
           for (octave_idx_type i = 1; i < nd; i++)
             ncount *= dvc(i);
 
 #define BSXDEF(T)                               \
@@ -449,17 +449,17 @@ dimensionality as the other array.
           for (octave_idx_type i = 0; i < ncount; i++)
             {
               if (maybe_update_column (Ac, A, dva, dvc, i, idxA))
                 inputs(0) = Ac;
 
               if (maybe_update_column (Bc, B, dvb, dvc, i, idxB))
                 inputs(1) = Bc;
 
-              octave_value_list tmp = func.do_multi_index_op (1, inputs);
+              octave_value_list tmp = octave::feval (func, inputs, 1);
 
 #define BSXINIT(T, CLS, EXTRACTOR)                                      \
               (result_type == CLS)                                      \
                 {                                                       \
                   have_ ## T = true;                                    \
                   result_ ## T = tmp(0). EXTRACTOR ## _array_value ();  \
                   result_ ## T .resize (dvc);                           \
                 }
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -71,17 +71,17 @@ get_output_list (octave_idx_type count, 
                  octave_value& error_handler)
 {
   octave_value_list tmp;
 
   bool execution_error = false;
 
   try
     {
-      tmp = func.do_multi_index_op (nargout, inputlist);
+      tmp = octave::feval (func, inputlist, nargout);
     }
   catch (const octave::execution_exception& e)
     {
       if (error_handler.is_defined ())
         {
           octave::interpreter::recover_from_exception ();
 
           execution_error = true;
@@ -101,17 +101,17 @@ get_output_list (octave_idx_type count, 
                       static_cast<double> (count
                                            + static_cast<octave_idx_type>(1)));
 
           octave_value_list errlist = inputlist;
           errlist.prepend (msg);
 
           buffer_error_messages--;
 
-          tmp = error_handler.do_multi_index_op (nargout, errlist);
+          tmp = octave::feval (error_handler, errlist, nargout);
         }
       else
         tmp.clear ();
     }
 
   return tmp;
 }
 
diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "ov-fcn.h"
 #include "ov-cell.h"
 #include "pager.h"
+#include "parse.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "DASPK-opts.cc"
 
 // Global pointer for user defined function required by daspk.
 static octave_function *daspk_fcn;
@@ -72,17 +73,17 @@ daspk_user_function (const ColumnVector&
   args(0) = x;
 
   if (daspk_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = daspk_fcn->do_multi_index_op (1, args);
+          tmp = octave::feval (daspk_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "daspk");
         }
 
       int tlen = tmp.length ();
       if (tlen == 0 || ! tmp(0).is_defined ())
@@ -122,17 +123,17 @@ daspk_user_jacobian (const ColumnVector&
   args(0) = x;
 
   if (daspk_jac)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = daspk_jac->do_multi_index_op (1, args);
+          tmp = octave::feval (daspk_jac, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "daspk");
         }
 
       int tlen = tmp.length ();
       if (tlen == 0 || ! tmp(0).is_defined ())
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -72,17 +72,17 @@ dasrt_user_f (const ColumnVector& x, con
   args(0) = x;
 
   if (dasrt_f)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = dasrt_f->do_multi_index_op (1, args);
+          tmp = octave::feval (dasrt_f, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "dasrt");
         }
 
       if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("dasrt");
@@ -113,17 +113,17 @@ dasrt_user_cf (const ColumnVector& x, do
   args(0) = x;
 
   if (dasrt_cf)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = dasrt_cf->do_multi_index_op (1, args);
+          tmp = octave::feval (dasrt_cf, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "dasrt");
         }
 
       if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("dasrt");
@@ -159,17 +159,17 @@ dasrt_user_j (const ColumnVector& x, con
   args(0) = x;
 
   if (dasrt_j)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = dasrt_j->do_multi_index_op (1, args);
+          tmp = octave::feval (dasrt_j, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "dasrt");
         }
 
       int tlen = tmp.length ();
       if (tlen == 0 || ! tmp(0).is_defined ())
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "ov-fcn.h"
 #include "ov-cell.h"
 #include "pager.h"
+#include "parse.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "DASSL-opts.cc"
 
 // Global pointer for user defined function required by dassl.
 static octave_function *dassl_fcn;
@@ -72,17 +73,17 @@ dassl_user_function (const ColumnVector&
   args(0) = x;
 
   if (dassl_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = dassl_fcn->do_multi_index_op (1, args);
+          tmp = octave::feval (dassl_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "dassl");
         }
 
       int tlen = tmp.length ();
       if (tlen == 0 || ! tmp(0).is_defined ())
@@ -122,17 +123,17 @@ dassl_user_jacobian (const ColumnVector&
   args(0) = x;
 
   if (dassl_jac)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = dassl_jac->do_multi_index_op (1, args);
+          tmp = octave::feval (dassl_jac, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "dassl");
         }
 
       int tlen = tmp.length ();
       if (tlen == 0 || ! tmp(0).is_defined ())
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -54,16 +54,17 @@ along with Octave; see the file COPYING.
 #include "ov-cx-mat.h"
 #include "ov-cx-sparse.h"
 #include "ov-float.h"
 #include "ov-flt-complex.h"
 #include "ov-flt-cx-mat.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
+#include "parse.h"
 #include "pt-mat.h"
 #include "utils.h"
 #include "variables.h"
 #include "xnorm.h"
 
 #if ! defined (HAVE_HYPOTF) && defined (HAVE__HYPOTF)
 #  define hypotf _hypotf
 #  define HAVE_HYPOTF 1
@@ -1632,17 +1633,17 @@ attempt_type_conversion (const octave_va
   octave_value fcn = symbol_table::find_method (dtype, cname);
 
   if (fcn.is_defined ())
     {
       octave_value_list result;
 
       try
         {
-          result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
+          result = octave::feval (fcn, ovl (ov), 1);
         }
       catch (octave::execution_exception& e)
         {
           error (e, "conversion from %s to %s failed", dtype.c_str (),
                  cname.c_str ());
         }
 
       if (result.empty ())
@@ -1660,17 +1661,17 @@ attempt_type_conversion (const octave_va
 
       if (! fcn.is_defined ())
         error ("no constructor for %s!", dtype.c_str ());
 
       octave_value_list result;
 
       try
         {
-          result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
+          result = octave::feval (fcn, ovl (ov), 1);
         }
       catch (octave::execution_exception& e)
         {
           error (e, "%s constructor failed for %s argument", dtype.c_str (),
                  cname.c_str ());
         }
 
       if (result.empty ())
@@ -1697,17 +1698,17 @@ do_class_concat (const octave_value_list
   if (fcn.is_defined ())
     {
       // Have method for dominant type.  Call it and let it handle conversions.
 
       octave_value_list tmp2;
 
       try
         {
-          tmp2 = fcn.do_multi_index_op (1, ovl);
+          tmp2 = octave::feval (fcn, ovl, 1);
         }
       catch (octave::execution_exception& e)
         {
           error (e, "%s/%s method failed", dtype.c_str (), cattype.c_str ());
         }
 
       if (tmp2.empty ())
         error ("%s/%s method did not return a value", dtype.c_str (),
diff --git a/libinterp/corefcn/hook-fcn.h b/libinterp/corefcn/hook-fcn.h
--- a/libinterp/corefcn/hook-fcn.h
+++ b/libinterp/corefcn/hook-fcn.h
@@ -164,17 +164,17 @@ public:
 
   void eval (const octave_value_list& initial_args)
   {
     octave_value_list args = initial_args;
 
     if (data.is_defined ())
       args.append (data);
 
-    fcn_handle.do_multi_index_op (0, args);
+    octave::feval (fcn_handle, args, 0);
   }
 
   std::string id (void) { return ident; }
 
   bool is_valid (void) { return valid; }
 
 private:
 
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "ov-fcn.h"
 #include "ov-cell.h"
 #include "pager.h"
+#include "parse.h"
 #include "pr-output.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "LSODE-opts.cc"
 
 // Global pointer for user defined function required by lsode.
@@ -69,17 +70,17 @@ lsode_user_function (const ColumnVector&
   args(0) = x;
 
   if (lsode_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = lsode_fcn->do_multi_index_op (1, args);
+          tmp = octave::feval (lsode_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "lsode");
         }
 
       if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("lsode");
@@ -109,17 +110,17 @@ lsode_user_jacobian (const ColumnVector&
   args(0) = x;
 
   if (lsode_jac)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = lsode_jac->do_multi_index_op (1, args);
+          tmp = octave::feval (lsode_jac, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "lsode");
         }
 
       if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("lsode");
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include "Quad.h"
 #include "lo-mappers.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "pager.h"
+#include "parse.h"
 #include "ovl.h"
 #include "ov-fcn.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "Quad-opts.cc"
 
@@ -66,17 +67,17 @@ quad_user_function (double x)
   args(0) = x;
 
   if (quad_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = quad_fcn->do_multi_index_op (1, args);
+          tmp = octave::feval (quad_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "quad");
         }
 
       if (! tmp.length () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("quad");
@@ -102,17 +103,17 @@ quad_float_user_function (float x)
   args(0) = x;
 
   if (quad_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = quad_fcn->do_multi_index_op (1, args);
+          tmp = octave::feval (quad_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "quad");
         }
 
       if (! tmp.length () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("quad");
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "oct-map.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
+#include "parse.h"
 #include "variables.h"
 
 #if defined (HAVE_ARPACK)
 
 // Global pointer for user defined function.
 static octave_function *eigs_fcn = nullptr;
 
 // Have we warned about imaginary values returned from user function?
@@ -59,17 +60,17 @@ eigs_func (const ColumnVector& x, int& e
   args(0) = x;
 
   if (eigs_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = eigs_fcn->do_multi_index_op (1, args);
+          tmp = feval (eigs_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
@@ -99,17 +100,17 @@ eigs_complex_func (const ComplexColumnVe
   args(0) = x;
 
   if (eigs_fcn)
     {
       octave_value_list tmp;
 
       try
         {
-          tmp = eigs_fcn->do_multi_index_op (1, args);
+          tmp = feval (eigs_fcn, args, 1);
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -897,17 +897,17 @@ namespace octave
   ColumnVector
   ida_user_function (const ColumnVector& x, const ColumnVector& xdot,
                      double t, octave_function *ida_fc)
   {
     octave_value_list tmp;
 
     try
       {
-        tmp = ida_fc->do_multi_index_op (1, ovl (t, x, xdot));
+        tmp = feval (ida_fc, ovl (t, x, xdot), 1);
       }
     catch (octave::execution_exception& e)
       {
         err_user_supplied_eval (e, "__ode15__");
       }
 
     return tmp(0).vector_value ();
   }
@@ -915,17 +915,17 @@ namespace octave
   Matrix
   ida_dense_jac (const ColumnVector& x, const ColumnVector& xdot,
                  double t, double cj, octave_function *ida_jc)
   {
     octave_value_list tmp;
 
     try
       {
-        tmp = ida_jc->do_multi_index_op (2, ovl (t, x, xdot));
+        tmp = feval (ida_jc, ovl (t, x, xdot), 2);
       }
     catch (octave::execution_exception& e)
       {
         err_user_supplied_eval (e, "__ode15__");
       }
 
     return tmp(0).matrix_value () + cj * tmp(1).matrix_value ();
   }
@@ -933,17 +933,17 @@ namespace octave
   SparseMatrix
   ida_sparse_jac (const ColumnVector& x, const ColumnVector& xdot,
                   double t, double cj, octave_function *ida_jc)
   {
     octave_value_list tmp;
 
     try
       {
-        tmp = ida_jc->do_multi_index_op (2, ovl (t, x, xdot));
+        tmp = feval (ida_jc, ovl (t, x, xdot), 2);
       }
     catch (octave::execution_exception& e)
       {
         err_user_supplied_eval (e, "__ode15__");
       }
 
     return tmp(0).sparse_matrix_value () + cj * tmp(1).sparse_matrix_value ();
   }
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4942,16 +4942,22 @@ namespace octave
       retval = fcn.do_multi_index_op (nargout, args);
     else
       error ("feval: function '%s' not found", name.c_str ());
 
     return retval;
   }
 
   octave_value_list
+  feval (octave_value& fcn, const octave_value_list& args, int nargout)
+  {
+    return fcn.do_multi_index_op (nargout, args);
+  }
+
+  octave_value_list
   feval (octave_function *fcn, const octave_value_list& args, int nargout)
   {
     octave_value_list retval;
 
     if (fcn)
       retval = fcn->do_multi_index_op (nargout, args);
 
     return retval;
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -548,16 +548,21 @@ namespace octave
                const std::string& warn_for = "");
 
   extern OCTINTERP_API octave_value_list
   feval (const std::string& name,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
+  feval (octave_value& fcn,
+         const octave_value_list& args = octave_value_list (),
+         int nargout = 0);
+
+  extern OCTINTERP_API octave_value_list
   feval (octave_function *fcn,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
   feval (const octave_value_list& args, int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
