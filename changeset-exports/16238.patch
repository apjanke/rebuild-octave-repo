# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362870295 18000
#      Sat Mar 09 18:04:55 2013 -0500
# Node ID 38bd5ae8463b254038e5a06cc6cd5db7bdbedf2e
# Parent  70f465930546be9e7cc5cf6964f76e301dd21d45
new opt_semi non-terminal for parser; use opt_comma in cell_or_matrix_row

* oct-parse.in.yy (opt_semi): New non-terminal.
(cell_or_matrix_row): Use opt_comma.
(cell_rows, matrix_rows): Use opt_semi.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -230,17 +230,18 @@ make_statement (T *arg)
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN INPUT_FILE CLASSDEF
 // %token VARARGIN VARARGOUT
 %token CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg classdef_beg
 %type <comment_type> properties_beg methods_beg events_beg enum_beg
-%type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep opt_comma
+%type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
+%type <sep_type> opt_comma opt_semi
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr
@@ -448,19 +449,17 @@ matrix          : '[' ']'
                 | '[' matrix_rows ']'
                   {
                     $$ = curr_parser.finish_matrix ($2);
                     curr_lexer->looking_at_matrix_or_assign_lhs = false;
                     curr_lexer->pending_local_variables.clear ();
                   }
                 ;
 
-matrix_rows     : matrix_rows1
-                  { $$ = $1; }
-                | matrix_rows1 ';'      // Ignore trailing semicolon.
+matrix_rows     : matrix_rows1 opt_semi
                   { $$ = $1; }
                 ;
 
 matrix_rows1    : cell_or_matrix_row
                   { $$ = new tree_matrix ($1); }
                 | matrix_rows1 ';' cell_or_matrix_row
                   {
                     $1->append ($3);
@@ -471,35 +470,31 @@ matrix_rows1    : cell_or_matrix_row
 cell            : '{' '}'
                   { $$ = new tree_constant (octave_value (Cell ())); }
                 | '{' ';' '}'
                   { $$ = new tree_constant (octave_value (Cell ())); }
                 | '{' cell_rows '}'
                   { $$ = curr_parser.finish_cell ($2); }
                 ;
 
-cell_rows       : cell_rows1
-                  { $$ = $1; }
-                | cell_rows1 ';'        // Ignore trailing semicolon.
+cell_rows       : cell_rows1 opt_semi
                   { $$ = $1; }
                 ;
 
 cell_rows1      : cell_or_matrix_row
                   { $$ = new tree_cell ($1); }
                 | cell_rows1 ';' cell_or_matrix_row
                   {
                     $1->append ($3);
                     $$ = $1;
                   }
                 ;
 
 cell_or_matrix_row
-                : arg_list
-                  { $$ = curr_parser.validate_matrix_row ($1); }
-                | arg_list ','  // Ignore trailing comma.
+                : arg_list opt_comma
                   { $$ = curr_parser.validate_matrix_row ($1); }
                 ;
 
 fcn_handle      : '@' FCN_HANDLE
                   {
                     $$ = curr_parser.make_fcn_handle ($2);
                     curr_lexer->looking_at_function_handle--;
                   }
@@ -1453,16 +1448,22 @@ opt_sep         : // empty
                 ;
 
 opt_comma       : // empty
                   { $$ = 0; }
                 | ','
                   { $$ = ','; }
                 ;
 
+opt_semi        : // empty
+                  { $$ = 0; }
+                | ';'
+                  { $$ = ';'; }
+                ;
+
 %%
 
 // Generic error messages.
 
 #undef curr_lexer
 
 static void
 yyerror (octave_parser& curr_parser, const char *s)
