# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1222362197 14400
#      Thu Sep 25 13:03:17 2008 -0400
# Node ID 9a5ef4f632a3bae248d6e746c74a840b583dc904
# Parent  a9ec011ead94f8cf7b92008f934dfd2a2fdb8767
Add class dispatch for [] operator to vertcat/horzcat methods

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-09-25  David Bateman  <dbateman@free.fr>
+
+	* pt-mat.cc (class tm_row_const): Add any_class test
+	(class tm_const): Ditto.
+	(octave_value tree_matrix::rvalue (void)): If any object to
+	concatenate is a class object, dispatch to the appropriate
+	vertcat/horzcat function.
+
 2008-09-25  John W. Eaton  <jwe@octave.org>
 
 	* symtab.cc (symbol_table::do_find): Don't set evaluated_args and
 	args_evaluated here, prior to call to symbol_table::fcn_info::find.
 
 2008-09-24  Soren Hauberg  <hauberg@gmail.com>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (magick_to_octave_value): New
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -62,24 +62,24 @@ private:
   tm_row_const_rep : public octave_base_list<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
       : count (1), dv (0, 0), all_str (false),
 	all_sq_str (false), all_dq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
-	all_mt (true), any_sparse (false),
+	all_mt (true), any_sparse (false), any_class (false),
 	class_nm (octave_base_value::static_class_name ()), ok (false)
     { }
 
     tm_row_const_rep (const tree_argument_list& row)
       : count (1), dv (0, 0), all_str (false), all_sq_str (false),
 	some_str (false), all_real (false), all_cmplx (false),
-	all_mt (true), any_sparse (false),
+	all_mt (true), any_sparse (false), any_class (false),
 	class_nm (octave_base_value::static_class_name ()), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     dim_vector dv;
@@ -87,16 +87,17 @@ private:
     bool all_str;
     bool all_sq_str;
     bool all_dq_str;
     bool some_str;
     bool all_real;
     bool all_cmplx;
     bool all_mt;
     bool any_sparse;
+    bool any_class;
 
     std::string class_nm;
 
     bool ok;
 
     bool do_init_element (tree_expression *, const octave_value&, bool&);
 
     void init (const tree_argument_list&);
@@ -153,26 +154,29 @@ public:
       delete rep;
   }
 
   octave_idx_type rows (void) { return rep->dv(0); }
   octave_idx_type cols (void) { return rep->dv(1); }
 
   bool empty (void) const { return rep->empty (); }
 
+  size_t length (void) const { return rep->length (); }
+
   dim_vector dims (void) { return rep->dv; }
 
   bool all_strings_p (void) const { return rep->all_str; }
   bool all_sq_strings_p (void) const { return rep->all_sq_str; }
   bool all_dq_strings_p (void) const { return rep->all_dq_str; }
   bool some_strings_p (void) const { return rep->some_str; }
   bool all_real_p (void) const { return rep->all_real; }
   bool all_complex_p (void) const { return rep->all_cmplx; }
   bool all_empty_p (void) const { return rep->all_mt; }
   bool any_sparse_p (void) const { return rep->any_sparse; }
+  bool any_class_p (void) const { return rep->any_class; }
 
   std::string class_name (void) const { return rep->class_nm; }
 
   operator bool () const { return (rep && rep->ok); }
 
   iterator begin (void) { return rep->begin (); }
   const_iterator begin (void) const { return rep->begin (); }
 
@@ -340,28 +344,32 @@ tm_row_const::tm_row_const_rep::do_init_
     all_real = false;
 
   if (all_cmplx && ! (val.is_complex_type () || val.is_real_type ()))
     all_cmplx = false;
 
   if (!any_sparse && val.is_sparse_type ())
     any_sparse = true;
 
+  if (!any_class && val.is_object ())
+    any_class = true;
+
   return true;
 }
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
 {
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
   all_real = true;
   all_cmplx = true;
   any_sparse = false;
+  any_class = false;
 
   bool first_elem = true;
 
   for (tree_argument_list::const_iterator p = row.begin ();
        p != row.end ();
        p++)
     {
       OCTAVE_QUIT;
@@ -433,17 +441,17 @@ tm_row_const::tm_row_const_rep::eval_war
 class
 tm_const : public octave_base_list<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
     : dv (0, 0), all_str (false), all_sq_str (false), all_dq_str (false),
       some_str (false), all_real (false), all_cmplx (false),
-      all_mt (true), any_sparse (false),
+      all_mt (true), any_sparse (false), any_class (false),
       class_nm (octave_base_value::static_class_name ()), ok (false)
   { init (tm); }
 
   ~tm_const (void) { }
 
   octave_idx_type rows (void) const { return dv.elem (0); }
   octave_idx_type cols (void) const { return dv.elem (1); }
 
@@ -452,16 +460,17 @@ public:
   bool all_strings_p (void) const { return all_str; }
   bool all_sq_strings_p (void) const { return all_sq_str; }
   bool all_dq_strings_p (void) const { return all_dq_str; }
   bool some_strings_p (void) const { return some_str; }
   bool all_real_p (void) const { return all_real; }
   bool all_complex_p (void) const { return all_cmplx; }
   bool all_empty_p (void) const { return all_mt; }
   bool any_sparse_p (void) const { return any_sparse; }
+  bool any_class_p (void) const { return any_class; }
 
   std::string class_name (void) const { return class_nm; }
 
   operator bool () const { return ok; }
 
 private:
 
   dim_vector dv;
@@ -469,16 +478,17 @@ private:
   bool all_str;
   bool all_sq_str;
   bool all_dq_str;
   bool some_str;
   bool all_real;
   bool all_cmplx;
   bool all_mt;
   bool any_sparse;
+  bool any_class;
 
   std::string class_nm;
 
   bool ok;
 
   tm_const (void);
 
   tm_const (const tm_const&);
@@ -492,16 +502,17 @@ void
 tm_const::init (const tree_matrix& tm)
 {
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
   all_real = true;
   all_cmplx = true;
   any_sparse = false;
+  any_class = false;
 
   bool first_elem = true;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
 
@@ -534,16 +545,19 @@ tm_const::init (const tree_matrix& tm)
 	    all_cmplx = false;
 
 	  if (all_mt && ! tmp.all_empty_p ())
 	    all_mt = false;
 
 	  if (!any_sparse && tmp.any_sparse_p ())
 	    any_sparse = true;
 
+	  if (!any_class && tmp.any_class_p ())
+	    any_class = true;
+
 	  append (tmp);
 	}
       else
 	break;
     }
 
   if (! error_state)
     {
@@ -764,37 +778,100 @@ tree_matrix::rvalue (void)
 
   bool all_strings_p = false;
   bool all_sq_strings_p = false;
   bool all_dq_strings_p = false;
   bool all_empty_p = false;
   bool all_real_p = false;
   bool all_complex_p = false;
   bool any_sparse_p = false;
+  bool any_class_p = false;
   bool frc_str_conv = false;
 
   tm_const tmp (*this);
 
   if (tmp && ! tmp.empty ())
     {
       dim_vector dv = tmp.dims ();
       all_strings_p = tmp.all_strings_p ();
       all_sq_strings_p = tmp.all_sq_strings_p ();
       all_dq_strings_p = tmp.all_dq_strings_p ();
       all_empty_p = tmp.all_empty_p ();
       all_real_p = tmp.all_real_p ();
       all_complex_p = tmp.all_complex_p ();
       any_sparse_p = tmp.any_sparse_p ();
+      any_class_p = tmp.any_class_p ();
       frc_str_conv = tmp.some_strings_p ();
 
       // Try to speed up the common cases.
 
       std::string result_type = tmp.class_name ();
 
-      if (result_type == "double")
+      if (any_class_p)
+	{
+	  octave_value_list tmp3 (tmp.length (), octave_value ());
+
+	  int j = 0;
+	  for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
+	    {
+	      OCTAVE_QUIT;
+
+	      tm_row_const row = *p;
+
+	      if (row.length () == 1)
+		tmp3 (j++) = *(row.begin ());
+	      else
+		{
+		  octave_value_list tmp1 (row.length (), octave_value ());
+
+		  int i = 0;
+		  for (tm_row_const::iterator q = row.begin (); 
+		       q != row.end (); q++)
+		    tmp1 (i++) = *q;
+
+		  octave_value_list tmp2;
+		  octave_value fcn = 
+		    symbol_table::find_function ("horzcat", tmp1);
+
+		  if (fcn.is_defined ())
+		    {
+		      tmp2 = fcn.do_multi_index_op (1, tmp1);
+		      
+		      if (error_state)
+			goto done;
+
+		      tmp3 (j++) = tmp2 (0);
+		    }
+		  else
+		    {
+		      ::error ("cat not find overloaded horzcat function");
+		      goto done;
+		    }
+		}
+	    }
+
+	  if (tmp.length () == 1)
+	    retval = tmp3 (0);
+	  else
+	    {
+	      octave_value_list tmp2;
+	      octave_value fcn = symbol_table::find_function ("vertcat", tmp3);
+
+	      if (fcn.is_defined ())
+		{
+		  tmp2 = fcn.do_multi_index_op (1, tmp3);
+		      
+		  if (! error_state)
+		    retval = tmp2 (0);
+		}
+	      else
+		::error ("cat not find overloaded vertcat function");
+	    }
+	}
+      else if (result_type == "double")
 	{
 	  if (any_sparse_p)
 	    {	    
 	      if (all_real_p)
 		DO_SINGLE_TYPE_CONCAT (SparseMatrix, sparse_matrix_value);
 	      else
 		DO_SINGLE_TYPE_CONCAT (SparseComplexMatrix, sparse_complex_matrix_value);
 	    }
