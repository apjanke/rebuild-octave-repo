# HG changeset patch
# User jwe
# Date 1025191899 0
#      Thu Jun 27 15:31:39 2002 +0000
# Node ID 05485f53259924455c172a3327a39a9ce4b05907
# Parent  e39b0ee1da6cfa55d5d67533615ef423e28560e9
[project @ 2002-06-27 15:31:39 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,16 @@
+2002-06-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* slatec-err/xermsg.f (XERMSG): If MAXMES .LT. 0, messages may be
+	printed an unlimited number of times.
+	* slatec-err/j4save.f (J4SAVE) Default for MAXMES is now -1.
+
+	* misc/f77-fcn.c (xstopx): Pass args in proper order.
+
 2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ordered-qz/dsubsp.f (DSUBSP): Delete decl for unused variable J.
 
 	* misc/f77-fcn.c (xstopx): Return type is void, not volatile void.
 	* misc/f77-fcn.h (xstopx): Provide decl.  Add special gcc noreturn
 	attribute here.
 
diff --git a/libcruft/misc/f77-fcn.c b/libcruft/misc/f77-fcn.c
--- a/libcruft/misc/f77-fcn.c
+++ b/libcruft/misc/f77-fcn.c
@@ -43,17 +43,17 @@ copy_f77_context (void *from, void *to, 
    called us.  Then the calling function should do whatever cleanup
    is necessary.  */
 
 void
 F77_FUNC (xstopx, XSTOPX) (const char *s, long int slen)
 {
   /* Skip printing message if it is just a single blank character.  */
   if (s && slen > 0 && ! (slen == 1 && *s == ' '))
-    (*current_liboctave_error_handler) ("%.*s", s, slen);
+    (*current_liboctave_error_handler) ("%.*s", slen, s);
 
   longjmp (f77_context, 1);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/libcruft/slatec-err/j4save.f b/libcruft/slatec-err/j4save.f
--- a/libcruft/slatec-err/j4save.f
+++ b/libcruft/slatec-err/j4save.f
@@ -50,16 +50,16 @@ C   891214  Prologue converted to Versio
 C   900205  Minor modifications to prologue.  (WRB)
 C   900402  Added TYPE section.  (WRB)
 C   910411  Added KEYWORDS section.  (WRB)
 C   920501  Reformatted the REFERENCES section.  (WRB)
 C***END PROLOGUE  J4SAVE
       LOGICAL ISET
       INTEGER IPARAM(9)
       SAVE IPARAM
-      DATA IPARAM(1),IPARAM(2),IPARAM(3),IPARAM(4)/0,2,0,10/
+      DATA IPARAM(1),IPARAM(2),IPARAM(3),IPARAM(4)/0,2,0,-1/
       DATA IPARAM(5)/1/
       DATA IPARAM(6),IPARAM(7),IPARAM(8),IPARAM(9)/0,0,0,0/
 C***FIRST EXECUTABLE STATEMENT  J4SAVE
       J4SAVE = IPARAM(IWHICH)
       IF (ISET) IPARAM(IWHICH) = IVALUE
       RETURN
       END
diff --git a/libcruft/slatec-err/xermsg.f b/libcruft/slatec-err/xermsg.f
--- a/libcruft/slatec-err/xermsg.f
+++ b/libcruft/slatec-err/xermsg.f
@@ -189,17 +189,18 @@ C***END PROLOGUE  XERMSG
       CHARACTER*72  TEMP
       CHARACTER*20  LFIRST
 C***FIRST EXECUTABLE STATEMENT  XERMSG
       LKNTRL = J4SAVE (2, 0, .FALSE.)
       MAXMES = J4SAVE (4, 0, .FALSE.)
 C
 C       LKNTRL IS A LOCAL COPY OF THE CONTROL FLAG KONTRL.
 C       MAXMES IS THE MAXIMUM NUMBER OF TIMES ANY PARTICULAR MESSAGE
-C          SHOULD BE PRINTED.
+C          SHOULD BE PRINTED.  IF MAXMES IS LESS THAN ZERO, THERE IS
+C          NO LIMIT.
 C
 C       WE PRINT A FATAL ERROR MESSAGE AND TERMINATE FOR AN ERROR IN
 C          CALLING XERMSG.  THE ERROR NUMBER SHOULD BE POSITIVE,
 C          AND THE LEVEL SHOULD BE BETWEEN 0 AND 2.
 C
       IF (NERR.LT.-9999999 .OR. NERR.GT.99999999 .OR. NERR.EQ.0 .OR.
      *   LEVEL.LT.-1 .OR. LEVEL.GT.2) THEN
          CALL XERPRN (' ***', -1, 'FATAL ERROR IN...$$ ' //
@@ -230,19 +231,21 @@ C
 C
       LKNTRL = MAX(-2, MIN(2,LKNTRL))
       MKNTRL = ABS(LKNTRL)
 C
 C       SKIP PRINTING IF THE CONTROL FLAG VALUE AS RESET IN XERCNT IS
 C       ZERO AND THE ERROR IS NOT FATAL.
 C
       IF (LEVEL.LT.2 .AND. LKNTRL.EQ.0) GO TO 30
-      IF (LEVEL.EQ.0 .AND. KOUNT.GT.MAXMES) GO TO 30
-      IF (LEVEL.EQ.1 .AND. KOUNT.GT.MAXMES .AND. MKNTRL.EQ.1) GO TO 30
-      IF (LEVEL.EQ.2 .AND. KOUNT.GT.MAX(1,MAXMES)) GO TO 30
+      IF (LEVEL.EQ.0 .AND. MAXMES.GE.0 .AND. KOUNT.GT.MAXMES) GO TO 30
+      IF (LEVEL.EQ.1 .AND. MAXMES.GE.0 .AND. KOUNT.GT.MAXMES
+     *    .AND. MKNTRL.EQ.1) GO TO 30
+      IF (LEVEL.EQ.2 .AND. MAXMES.GE.0 .AND. KOUNT.GT.MAX(1,MAXMES))
+     *    GO TO 30
 C
 C       ANNOUNCE THE NAMES OF THE LIBRARY AND SUBROUTINE BY BUILDING A
 C       MESSAGE IN CHARACTER VARIABLE TEMP (NOT EXCEEDING 66 CHARACTERS)
 C       AND SENDING IT OUT VIA XERPRN.  PRINT ONLY IF CONTROL FLAG
 C       IS NOT ZERO.
 C
       IF (LKNTRL .NE. 0) THEN
          TEMP(1:21) = 'MESSAGE FROM ROUTINE '
@@ -343,17 +346,18 @@ C       IF THE ERROR IS NOT FATAL OR THE
 C       CONTROL FLAG IS SET FOR RECOVERY, THEN RETURN.
 C
    30 IF (LEVEL.LE.0 .OR. (LEVEL.EQ.1 .AND. MKNTRL.LE.1)) RETURN
 C
 C       THE PROGRAM WILL BE STOPPED DUE TO AN UNRECOVERED ERROR OR A
 C       FATAL ERROR.  PRINT THE REASON FOR THE ABORT AND THE ERROR
 C       SUMMARY IF THE CONTROL FLAG AND THE MAXIMUM ERROR COUNT PERMIT.
 C
-      IF (LKNTRL.GT.0 .AND. KOUNT.LT.MAX(1,MAXMES)) THEN
+      IF (LKNTRL.GT.0
+     *    .AND. (MAXMES.LT.0 .OR. KOUNT.LT.MAX(1,MAXMES))) THEN
          IF (LEVEL .EQ. 1) THEN
             CALL XERPRN
      *         (' ***', -1, 'JOB ABORT DUE TO UNRECOVERED ERROR.', 72)
          ELSE
             CALL XERPRN(' ***', -1, 'JOB ABORT DUE TO FATAL ERROR.', 72)
          ENDIF
          CALL XERSVE (' ', ' ', ' ', -1, 0, 0, KDUMMY)
          CALL XERHLT (' ')
