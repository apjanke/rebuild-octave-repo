# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1292309720 18000
#      Tue Dec 14 01:55:20 2010 -0500
# Node ID 140c8fbe8b0b674be31a25ad156d7243b68bad43
# Parent  2b03258c240bd97a1bc74746740aa81b1022c0c1
use correct types in mod template function

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-12-14  John W. Eaton  <jwe@octave.org>
+
+	* lo-mappers.h (xcopysign (double)): Call copysign, not copysignf.
+	(xmod): Call X_NINT, not D_NINT.  Call xfloor, not floor.
+	Bug #31872.
+
 2010-12-13  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc (operator * (const Matrix& m, const ComplexMatrix&	a)):
 	Fix cut and paste error.
 
 2010-12-09  Marco Atzeri  <marco_atzeri@yahoo.it>
 
 	* lo-specfun.cc (xgamma): Also handle negative integer values as
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 
 #include <limits>
 
 #include "oct-cmplx.h"
 #include "lo-math.h"
 
 // Double Precision 
 extern OCTAVE_API double xtrunc (double x);
-inline double xcopysign (double x, double y) { return copysignf (x, y); }
+inline double xcopysign (double x, double y) { return copysign (x, y); }
 inline double xceil (double x) { return ceil (x); }
 inline double xfloor (double x) { return floor (x); }
 inline double arg (double x) { return atan2 (0.0, x); }
 inline double conj (double x) { return x; }
 inline double fix (double x) { return xtrunc (x); }
 inline double imag (double) { return 0.0; }
 inline double real (double x) { return x; }
 extern OCTAVE_API double xround (double x);
@@ -313,17 +313,17 @@ xmod (T x, T y)
   T retval;
 
   if (y == 0)
     retval = x;
   else
     {
       T q = x / y;
 
-      T n = floor (q);
+      T n = xfloor (q);
 
       if (X_NINT (y) != y)
         {
           if (X_NINT (q) == q)
             n = q;
           else
             {
               if (x >= -1 && x <= 1)
@@ -331,17 +331,17 @@ xmod (T x, T y)
                   if (std::abs (q - X_NINT (q))
                       < std::numeric_limits<T>::epsilon ())
                     n = X_NINT (q);
                 }
               else
                 {
                   if (std::abs ((q - X_NINT (q))/ X_NINT (q))
                       < std::numeric_limits<T>::epsilon ())
-                    n = D_NINT (q);
+                    n = X_NINT (q);
                 }
             }
         }
 
       retval = x - y * n;
     }
 
   if (x != y && y != 0 && retval != 0)
