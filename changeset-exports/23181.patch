# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1487008381 -3600
#      Mon Feb 13 18:53:01 2017 +0100
# Node ID 78f04a9dfeee423387df3423e9b2caf4d7c922fa
# Parent  7520aab218a02ef8e56feed939c53500b9a1508f
allow line breaking in the editor (bug #41555)

* file-editor-tab.cc (file_editor_tab): connect scintillas signal for a new
  character with the new slot handle_char_added;
  (notice_settings): get the users settings on breaking lines;
  (handle_char_added): new slot for added characters, checking for adding
  line breaks if desired

* file-editor-tab.h: new slot handle_char_added, new class variable _line_break

* settings-dialog.cc (settings_dialog): initialize checkbox for line breaking
  with the state read from the settings file;
  (write_changed_settings): write the current state of the checkbox for line
  breaking into the settings file

* settings-dialog.ui: enable the checkbox for automatic line breaks

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -107,16 +107,19 @@ file_editor_tab::file_editor_tab (const 
   _col  = 0;
 
   _bp_lines.clear ();      // start with empty lists of breakpoints
   _bp_conditions.clear ();
 
   connect (_edit_area, SIGNAL (cursorPositionChanged (int, int)),
            this, SLOT (handle_cursor_moved (int,int)));
 
+  connect (_edit_area, SIGNAL (SCN_CHARADDED (int)),
+           this, SLOT (handle_char_added (int)));
+
   connect (_edit_area, SIGNAL (linesChanged ()),
            this, SLOT (handle_lines_changed ()));
 
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
            this, SLOT (handle_context_menu_edit (const QString&)));
 
   // create statusbar for row/col indicator and eol mode
   _status_bar = new QStatusBar (this);
@@ -2346,31 +2349,37 @@ file_editor_tab::notice_settings (const 
   _edit_area->SendScintilla (QsciScintillaBase::SCI_SETHSCROLLBAR,
         settings->value ("editor/show_hscroll_bar",true).toBool ());
   _edit_area->SendScintilla (QsciScintillaBase::SCI_SETSCROLLWIDTH,-1);
   _edit_area->SendScintilla (QsciScintillaBase::SCI_SETSCROLLWIDTHTRACKING,true);
 
   _long_title = settings->value ("editor/longWindowTitle", false).toBool ();
   update_window_title (_edit_area->isModified ());
 
-  _edit_area->setEdgeColumn (
-              settings->value ("editor/long_line_column",80).toInt ());
+  int line_length = settings->value ("editor/long_line_column",80).toInt ();
+  _edit_area->setEdgeColumn (line_length);
   if (settings->value ("editor/long_line_marker",true).toBool ())
     _edit_area->setEdgeMode (QsciScintilla::EdgeLine);
   else
     _edit_area->setEdgeMode (QsciScintilla::EdgeNone);
 
-  // line wrappping
+  // line wrappping and breaking
   _edit_area->setWrapVisualFlags (QsciScintilla::WrapFlagByBorder);
   _edit_area->setWrapIndentMode (QsciScintilla::WrapIndentSame);
+
   if (settings->value ("editor/wrap_lines",false).toBool ())
     _edit_area->setWrapMode (QsciScintilla::WrapWord);
   else
     _edit_area->setWrapMode (QsciScintilla::WrapNone);
 
+  if (settings->value ("editor/break_lines",false).toBool ())
+    _line_break = line_length;
+  else
+    _line_break = 0;
+
   // reload changed files
   _always_reload_changed_files =
         settings->value ("editor/always_reload_changed_files",false).toBool ();
 }
 
 void
 file_editor_tab::auto_margin_width ()
 {
@@ -2648,16 +2657,63 @@ file_editor_tab::handle_cursor_moved (in
 
   _line = line;
   _col  = col;
 
   _row_indicator->setNum (line+1);
   _col_indicator->setNum (col+1);
 }
 
+// Slot that is entered each time a new character was typed.
+// It is used for handling line breaking if this is desired.
+void
+file_editor_tab::handle_char_added (int character)
+{
+  if (_line_break)
+  {
+    // if line breaking is desired, get the current line and column
+    int line, col;
+    _edit_area->getCursorPosition (&line, &col);
+
+    // immediately return if line has not reached the max. line length
+    if (col < _line_break)
+      return;
+
+    if (character == ' ' || character == '\t')
+      {
+        // the new character is space or tab, break already here
+        _edit_area->insertAt (QString ("\n"), line, col);
+      }
+    else
+      {
+        // search backward for the first space or tab
+        int col_space = col - 1;
+        int c = 0, pos;
+
+        while (c != ' ' && c != '\t' && col_space-- > 0)
+          {
+            pos = _edit_area->positionFromLineIndex (line, col_space);
+            c = _edit_area->SendScintilla (QsciScintillaBase::SCI_GETCHARAT,
+                                           pos);
+          }
+
+        // if a space or tab was found, break after that char;
+        // otherwise break at cursor position
+        int col_newline = col - 1;
+        if (c == ' ' || c == '\t')
+          col_newline = col_space + 1;
+        // insert a newline char for breaking the line
+        _edit_area->insertAt (QString ("\n"), line, col_newline);
+      }
+
+    // automatically indent new line to the indentation of previous line
+    _edit_area->setIndentation (line + 1, _edit_area->indentation (line));
+  }
+}
+
 void
 file_editor_tab::do_smart_indent ()
 {
   QString prev_line = _edit_area->text (_line);
 
   QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|do|function"
                           "|unwind_protect|unwind_protect_cleanup|try)"
                           "[\n\t #%]");
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -210,16 +210,17 @@ private slots:
 
   // When apis preparation has finished and is ready to save
   void save_apis_info ();
 
   // When the numer of lines changes -> adapt width of margin
   void auto_margin_width ();
 
   void handle_cursor_moved (int line, int col);
+  void handle_char_added (int character);
   void handle_lines_changed (void);
 
 private:
 
   struct bp_info
   {
     bp_info (const QString& fname, int l = 0, const QString& cond = "");
 
@@ -294,15 +295,16 @@ private:
   bool _find_dialog_is_visible;
   QRect _find_dialog_geometry;
 
   QsciAPIs *_lexer_apis;
   QString _prep_apis_file;
 
   static bool _cancelled;
 
+  int _line_break;
   int _line;
   int _col;
   bool _lines_changed;
 
 };
 
 #endif
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -398,16 +398,18 @@ settings_dialog::settings_dialog (QWidge
   connect (ui->editor_highlightCurrentLine, SIGNAL (toggled (bool)),
            _editor_current_line_color, SLOT (setEnabled (bool)));
   ui->editor_highlightCurrentLine->setChecked (
     settings->value ("editor/highlightCurrentLine",true).toBool ());
   ui->editor_long_line_marker->setChecked (
     settings->value ("editor/long_line_marker",true).toBool ());
   ui->editor_long_line_column->setValue (
     settings->value ("editor/long_line_column",80).toInt ());
+  ui->editor_break_checkbox->setChecked (
+    settings->value ("editor/break_lines",false).toBool ());
   ui->editor_wrap_checkbox->setChecked (
     settings->value ("editor/wrap_lines",false).toBool ());
   ui->cb_edit_status_bar->setChecked (
     settings->value ("editor/show_edit_status_bar",true).toBool ());
   ui->cb_edit_tool_bar->setChecked (
     settings->value ("editor/show_toolbar",true).toBool ());
   ui->cb_code_folding->setChecked (
     settings->value ("editor/code_folding",true).toBool ());
@@ -783,16 +785,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/highlightCurrentLine",
                       ui->editor_highlightCurrentLine->isChecked ());
   settings->setValue ("editor/highlight_current_line_color",
                       _editor_current_line_color->color ());
   settings->setValue ("editor/long_line_marker",
                       ui->editor_long_line_marker->isChecked ());
   settings->setValue ("editor/long_line_column",
                       ui->editor_long_line_column->value ());
+  settings->setValue ("editor/break_lines",
+                      ui->editor_break_checkbox->isChecked ());
   settings->setValue ("editor/wrap_lines",
                       ui->editor_wrap_checkbox->isChecked ());
   settings->setValue ("editor/code_folding",
                       ui->cb_code_folding->isChecked ());
   settings->setValue ("editor/show_edit_status_bar",
                       ui->cb_edit_status_bar->isChecked ());
   settings->setValue ("editor/show_toolbar",
                       ui->cb_edit_tool_bar->isChecked ());
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -47,18 +47,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_2">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>570</width>
+            <height>377</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_17">
            <item>
             <widget class="QGroupBox" name="groupBox">
              <property name="title">
               <string>Interface</string>
              </property>
@@ -1037,17 +1037,17 @@
                   <property name="checked">
                    <bool>false</bool>
                   </property>
                  </widget>
                 </item>
                 <item row="1" column="5">
                  <widget class="QCheckBox" name="editor_break_checkbox">
                   <property name="enabled">
-                   <bool>false</bool>
+                   <bool>true</bool>
                   </property>
                   <property name="sizePolicy">
                    <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
                     <horstretch>0</horstretch>
                     <verstretch>0</verstretch>
                    </sizepolicy>
                   </property>
                   <property name="toolTip">
@@ -1639,18 +1639,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_4">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>488</width>
+            <height>230</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_7">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout_8">
              <item>
               <layout class="QGridLayout" name="gridLayout_7">
                <property name="sizeHint" stdset="0">
@@ -1927,18 +1927,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_5">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>474</width>
+            <height>196</height>
            </rect>
           </property>
           <layout class="QGridLayout" name="gridLayout_8">
            <item row="0" column="0">
             <widget class="QGroupBox" name="groupBox_4">
              <property name="title">
               <string>Behavior</string>
              </property>
@@ -2071,18 +2071,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_6">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>200</width>
+            <height>77</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_19">
            <item>
             <layout class="QGridLayout" name="gridLayout_14">
              <property name="topMargin">
               <number>0</number>
              </property>
@@ -2140,18 +2140,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_8">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>364</width>
+            <height>210</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_25">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout_26">
              <property name="sizeConstraint">
               <enum>QLayout::SetDefaultConstraint</enum>
              </property>
@@ -2339,18 +2339,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_7">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>529</width>
+            <height>199</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_20">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout">
              <item>
               <widget class="QCheckBox" name="checkbox_allow_web_connect">
                <property name="text">
