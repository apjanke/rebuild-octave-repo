# HG changeset patch
# User Benjamin Lindner <lindnerb@users.sourceforge.net>
# Date 1237386194 -3600
#      Wed Mar 18 15:23:14 2009 +0100
# Branch release-3-0-x
# Node ID 278afaecddd48b39c1b639c32113db3d7df8c85c
# Parent  af4fa72ee2504ab057a215aadc4eb252d8a63480
fix leaving stray '\r' in stream when reading from CRLF data file
* * *
fix CRLF issues with text-mode reading in windows when loading ascii data

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2009-03-18  Benjamin Lindner <lindnerb@users.sourceforge.net>
+
+	* ls-oct-ascii.cc (extract_keyword): fix leaving stray '\r' in stream
+	when reading from CRLF data file by replacing loop with call to
+	read_until_newline()
+
+2009-03-03  Benjamin Lindner  <lindnerb@users.sourceforge.net>
+
+	* ls-ascii-helper.h ls-ascii-helper.cc: New files, provide helper 
+	functions skip_until_newline(), skip_preceeding_newline() and
+	read_until_newline() that take care of CR/LF handling.
+	* Makefile.in: add new files
+	* load-save.cc: Open files always in binary mode in Fload
+	* ls-mat-ascii.cc (get_mat_data_input_line), ls-oct-ascii.cc 
+	(extract_keyword, read_ascii_data), ls-oct-ascii.h (extract_keyword), 
+	ov-fcn-handle.cc, ov-fcn-inline.cc, ov-range.cc, ov-str-mat.cc 
+	(load_ascii): Use helper functions 
+	
 2009-02-25  Marco Caliari <marco.caliari@univr.it>
 
 	* graphics.cc (base_properties::remove_child): Fix order of dims.
 
 2009-02-13  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_base_stream::do_gets): Handle CRLF and CR.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -111,17 +111,17 @@ PT_INCLUDES := pt.h pt-all.h pt-arg-list
 	pt-decl.h pt-except.h pt-exp.h pt-fcn-handle.h pt-id.h pt-idx.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h \
 	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h \
 
 INCLUDES := Cell.h base-list.h builtins.h c-file-ptr-stream.h \
 	comment-list.h debug.h defun-dld.h defun-int.h defun.h \
 	dirfns.h dynamic-ld.h error.h file-io.h gripes.h help.h \
 	input.h lex.h load-path.h load-save.h ls-hdf5.h \
-	ls-mat-ascii.h ls-mat4.h ls-mat5.h ls-oct-ascii.h \
+	ls-mat-ascii.h ls-mat4.h ls-mat5.h ls-oct-ascii.h ls-ascii-helper.h \
 	ls-oct-binary.h ls-utils.h mex.h mexproto.h oct-errno.h \
 	oct-fstrm.h oct-hist.h oct-iostrm.h oct-map.h oct-obj.h \
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h oct-stream.h \
 	zfstream.h oct-strstrm.h oct-lvalue.h oct.h octave.h ops.h \
 	pager.h parse.h pr-output.h procstream.h sighandlers.h \
 	siglist.h sparse-xdiv.h sparse-xpow.h symtab.h sysdep.h \
 	token.h toplev.h unwind-prot.h utils.h variables.h \
 	version.h xdiv.h xpow.h \
@@ -181,17 +181,17 @@ PT_SRC := pt.cc pt-arg-list.cc pt-assign
 	pt-decl.cc pt-except.cc pt-exp.cc pt-fcn-handle.cc pt-id.cc \
 	pt-idx.cc pt-jump.cc pt-loop.cc pt-mat.cc pt-misc.cc \
 	pt-pr-code.cc pt-select.cc pt-stmt.cc pt-unop.cc
 
 DIST_SRC := Cell.cc bitfcns.cc c-file-ptr-stream.cc comment-list.cc \
 	cutils.c data.cc debug.cc defaults.cc defun.cc dirfns.cc \
 	dynamic-ld.cc error.cc file-io.cc graphics.cc gripes.cc \
 	help.cc input.cc lex.l load-path.cc load-save.cc ls-hdf5.cc \
-	ls-mat-ascii.cc ls-mat4.cc ls-mat5.cc ls-oct-ascii.cc \
+	ls-mat-ascii.cc ls-mat4.cc ls-mat5.cc ls-oct-ascii.cc ls-ascii-helper.cc \
 	ls-oct-binary.cc ls-utils.cc main.c mappers.cc matherr.c \
 	mex.cc oct-fstrm.cc oct-hist.cc oct-iostrm.cc oct-map.cc \
 	oct-obj.cc oct-prcstrm.cc oct-procbuf.cc oct-stream.cc \
 	octave.cc zfstream.cc oct-strstrm.cc oct-lvalue.cc pager.cc \
 	parse.y pr-output.cc procstream.cc sighandlers.cc \
 	siglist.c sparse-xdiv.cc sparse-xpow.cc strfns.cc \
 	symtab.cc syscalls.cc sysdep.cc token.cc toplev.cc \
 	unwind-prot.cc utils.cc variables.cc xdiv.cc xpow.cc \
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -901,25 +901,22 @@ Force Octave to assume the file is in Oc
 	// don't insert any statements here; the "else" above has to
 	// go with the "if" below!!!!!
       if (format != LS_UNKNOWN)
 	{
 	  i++;
 
 	  std::ios::openmode mode = std::ios::in;
 
-	  if (format == LS_BINARY
-#ifdef HAVE_HDF5
-	      || format == LS_HDF5
-#endif
-	      || format == LS_MAT_BINARY
-	      || format == LS_MAT5_BINARY
-	      || format == LS_MAT7_BINARY)
-	    mode |= std::ios::binary;
-
+	  // Open in binary mode in any case, to fix annoying bug that
+	  // text-mode opened streams cannot be seekg'ed/tellg'ed with
+	  // mingw32 (See http://oldwiki.mingw.org/index.php/Known%20Problems )
+	  // The CR/LF issues are handled in ls-ascii-helper.cc
+	  mode |= std::ios::binary;
+	  
 #ifdef HAVE_ZLIB
 	  if (use_zlib)
 	    {
 	      gzifstream file (fname.c_str (), mode);
 
 	      if (file)
 		{
 		  if (format == LS_BINARY)
diff --git a/src/ls-ascii-helper.cc b/src/ls-ascii-helper.cc
new file mode 100644
--- /dev/null
+++ b/src/ls-ascii-helper.cc
@@ -0,0 +1,160 @@
+/*
+
+Copyright (C) 2003, 2005, 2006, 2007 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+
+#include "ls-ascii-helper.h"
+
+#include <iostream>
+#include <sstream>
+
+// Helper functions when reading from ascii files.
+// These function take care of CR/LF issues when files are opened in text-mode for reading 
+
+// Skip characters from stream IS until a newline is reached.
+// Depending on KEEP_NEWLINE, either eat newline from stream or
+// keep it unread
+
+void
+skip_until_newline( std::istream& is, bool keep_newline )
+{
+  if (!is)
+    return;
+  
+  char c,d;
+  
+  while (is)
+  {
+      c = is.peek();
+      if (c == '\n' || c == '\r')
+      {
+	  // reached newline
+	  if (keep_newline == false)
+	  {
+	      // eat the CR or LF character
+	      is.get(d);
+	      
+	      // make sure that for binary-mode opened ascii files containing CRLF line endings
+	      // we skip the LF after CR...
+	      if (c == '\r' && is.peek()=='\n')
+	      {
+		  // yes, LF following CR, eat it...
+		  is.get(d);
+	      }
+	  }
+	  
+	  // Newline was found, and read from stream if keep_newline==true, so exit loop
+	  break;
+      }
+      else
+	  // no newline charater peeked, so read it and proceed to next character
+	  is.get(d);
+  }
+  
+  return;
+}
+
+
+// If stream IS currently points to a newline (a leftover from a previous read)
+// then eat newline(s) until a non-newline character is found
+
+void
+skip_preceeding_newline( std::istream& is )
+{
+  if (!is)
+    return;
+  
+  char c,d;
+  
+  // Check if IS currently points to newline character
+  c = is.peek();
+  if (c == '\n' || c == '\r')
+  {
+      // Yes, at newline
+      do {
+	  // eat the CR or LF character
+	  is.get(d);
+	  
+	  // make sure that for binary-mode opened ascii files containing CRLF line endings
+	  // we skip the LF after CR...
+	  if (c == '\r' && is.peek() == '\n')
+	  {
+	      // yes, LF following CR, eat it...
+	      is.get(d);
+	  }
+	  
+	  // Peek into next character
+	  c = is.peek();
+      // Loop while still a newline ahead
+      } while( c == '\n' || c == '\r' );
+  }
+  
+  return;
+}
+
+
+// Read charaters from stream IS until a newline is reached.
+// Depending on KEEP_NEWLINE, either eat newline from stream or
+// keep it unread
+// Characters read are stored and returned as std::string
+
+std::string
+read_until_newline( std::istream& is, bool keep_newline )
+{
+  if (!is)
+    return std::string();
+  
+  char c,d;
+  std::ostringstream buf;
+  
+  while (is)
+  {
+      c = is.peek();
+      if (c == '\n' || c == '\r')
+      {
+	  // reached newline
+	  if (keep_newline == false)
+	  {
+	      // eat the CR or LF character
+	      is.get(d);
+	      
+	      // make sure that for binary-mode opened ascii files containing CRLF line endings
+	      // we skip the LF after CR...
+	      if (c == '\r' && is.peek() == '\n')
+	      {
+		  // yes, LF following CR, eat it...
+		  is.get(d);
+	      }
+	  }
+	  
+	  // Newline was found, and read from stream if keep_newline==true, so exit loop
+	  break;
+      }
+      else
+      {
+	  // no newline charater peeked, so read it, store it, and proceed to next
+	  is.get(d);
+	  buf << d;
+      }
+  }
+  
+  return buf.str();
+}
diff --git a/src/ls-ascii-helper.h b/src/ls-ascii-helper.h
new file mode 100644
--- /dev/null
+++ b/src/ls-ascii-helper.h
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2003, 2005, 2006, 2007 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_ls_ascii_helper_h)
+#define octave_ls_ascii_helper_h 1
+
+#include <iosfwd>
+#include <string>
+
+#include "oct-dlldefs.h"
+
+extern OCTINTERP_API void
+skip_until_newline( std::istream& is, bool keep_newline = false );
+
+extern OCTINTERP_API void
+skip_preceeding_newline( std::istream& is );
+
+extern OCTINTERP_API std::string
+read_until_newline( std::istream& is, bool keep_newline = false );
+
+#endif  // !defined (octave_ls_ascii_helper_h)
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -60,40 +60,43 @@ along with Octave; see the file COPYING.
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 
 #include "ls-mat-ascii.h"
+#include "ls-ascii-helper.h"
 
 static std::string
 get_mat_data_input_line (std::istream& is)
 {
   std::string retval;
 
   bool have_data = false;
 
   do
     {
       retval = "";
 
       char c;
       while (is.get (c))
 	{
 	  if (c == '\n' || c == '\r')
-	    break;
+	    {
+	      // Let skip_until_newline handle CR/LF issues...
+	      skip_until_newline (is, false);
+	      break;
+	    }
 
 	  if (c == '%' || c == '#')
 	    {
 	      // skip to end of line
-	      while (is.get (c))
-		if (c == '\n' || c == '\r')
-		  break;
+	      skip_until_newline (is, false);
 
 	      break;
 	    }
 
 	  if (! is.eof ())
 	    {
 	      if (! have_data && c != ' ' && c != '\t')
 		have_data = true;
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -103,24 +103,18 @@ extract_keyword (std::istream& is, const
 	  bool match = (tmp.compare (0, strlen (keyword), keyword) == 0);
 
 	  if (match)
 	    {
 	      std::ostringstream value;
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
-	      if (c != '\n' && c != '\r')
-		{
-		  value << c;
-		  while (is.get (c) && c != '\n' && c != '\r')
-		    value << c;
-		}
-
-	      retval = value.str ();
+	      is.putback(c);
+	      retval = read_until_newline (is, false);
 	      break;
 	    }
 	  else if (next_only)
 	    break;
 	  else
 	    {
 	      while (is.get (c) && c != '\n' && c != '\r')
 		; // Skip to end of line.
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_ls_oct_ascii_h 1
 
 #include <cfloat>
 
 #include <sstream>
 #include <string>
 
 #include "str-vec.h"
+#include "ls-ascii-helper.h"
 
 // Flag for cell elements
 #define CELL_ELT_TAG "<cell-element>"
 
 // Used when converting Inf to something that gnuplot can read.
 
 #ifndef OCT_RBV
 #define OCT_RBV DBL_MAX / 100.0
@@ -98,18 +99,18 @@ extract_keyword (std::istream& is, const
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      is.putback (c);
 	      if (c != '\n' && c != '\r')
 		is >> value;
 	      if (is)
 		status = true;
-	      while (is.get (c) && c != '\n' && c != '\r')
-		; // Skip to beginning of next line;
+	      // Skip to beginning of next line;
+	      skip_until_newline (is, false);
 	      break;
 	    }
 	  else if (next_only)
 	    break;
 	}
     }
   return status;
 }
@@ -160,18 +161,18 @@ extract_keyword (std::istream& is, const
 		  while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		    ; // Skip whitespace and the colon.
 
 		  is.putback (c);
 		  if (c != '\n' && c != '\r')
 		    is >> value;
 		  if (is)
 		    status = true;
-		  while (is.get (c) && c != '\n' && c != '\r')
-		    ; // Skip to beginning of next line;
+		  // Skip to beginning of next line;
+		  skip_until_newline (is, false);
 		  return status;
 		}
 	    }
 
 	  if (next_only)
 	    break;
 	}
     }
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -51,16 +51,17 @@ along with Octave; see the file COPYING.
 #include "load-path.h"
 #include "oct-env.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
+#include "ls-ascii-helper.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function_handle");
 
 void
@@ -325,36 +326,28 @@ octave_fcn_handle::load_ascii (std::istr
     }
 
   is >> nm;
 
   if (nm == "@<anonymous>")
     {
       octave_idx_type len = 0;
       char c;
-      std::ostringstream buf;
+      std::string buf;
 
       // Skip preceeding newline(s).
-      while (is.get (c) && c == '\n')
-	/* do nothing */;
+      skip_preceeding_newline (is);
 
       if (is)
 	{
-	  buf << c;
 
 	  // Get a line of text whitespace characters included, leaving
 	  // newline in the stream.
+	  buf = read_until_newline (is, true);
 
-	  while (is.peek () != '\n')
-	    {
-	      is.get (c);
-	      if (! is)
-		break;
-	      buf << c;
-	    }
 	}
 
       pos = is.tellg ();
       symbol_table *local_sym_tab = 0;
 
       if (extract_keyword (is, "length", len, true) && len >= 0)
 	{
 	  if (len > 0)
@@ -403,17 +396,17 @@ octave_fcn_handle::load_ascii (std::istr
 	  unwind_protect::begin_frame ("anon_ascii_load");
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  if (local_sym_tab)
 	    curr_sym_tab = local_sym_tab;
 
 	  int parse_status;
 	  octave_value anon_fcn_handle = 
-	    eval_string (buf.str (), true, parse_status);
+	    eval_string (buf, true, parse_status);
 
 	  if (parse_status == 0)
 	    {
 	      octave_fcn_handle *fh = 
 		anon_fcn_handle.fcn_handle_value ();
 	      if (fh)
 		fcn = fh->fcn;
 	      else
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -42,16 +42,17 @@ Open Source Initiative (www.opensource.o
 #include "pr-output.h"
 #include "variables.h"
 #include "parse.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
+#include "ls-ascii-helper.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_inline);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_inline,
 				     "inline function",
 				     "function_handle");
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
@@ -134,37 +135,30 @@ octave_fcn_inline::load_ascii (std::istr
       ifargs.resize (nargs);
       for (int i = 0; i < nargs; i++)
 	is >> ifargs(i);
       is >> nm;
       if (nm == "0")
 	nm = "";
 
       char c;
-      std::ostringstream buf;
+      std::string buf;
 
       // Skip preceeding newline(s)
-      while (is.get (c) && c == '\n');
+      skip_preceeding_newline (is);
 
       if (is)
 	{
-	  buf << c;
 
 	  // Get a line of text whitespace characters included, leaving
 	  // newline in the stream
-	  while (is.peek () != '\n')
-	    {
-	      is.get (c);
-	      if (! is)
-		break;
-	      buf << c;
-	    }
+	  buf = read_until_newline (is, true);
 	}
 
-      iftext = buf.str ();
+      iftext = buf;
 
       octave_fcn_inline tmp (iftext, ifargs, nm);
       fcn = tmp.fcn;
 
       return true;
     }
   else
     return false;
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 #include "byte-swap.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
+#include "ls-ascii-helper.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_range);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_range, "range", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
@@ -269,24 +270,19 @@ skip_comments (std::istream& is)
   while (is.get (c))
     {
       if (c == ' ' || c == '\t' || c == '\n')
 	; // Skip whitespace on way to beginning of next line.
       else
 	break;
     }
 
-  for (;;)
-    {
-      if (is && (c == '%' || c == '#'))
-	while (is.get (c) && c != '\n')
-	  ; // Skip to beginning of next line, ignoring everything.
-      else
-	break;
-    }
+  // Skip to beginning of next line, ignoring everything.
+  skip_until_newline (is, false);
+  
 }
 
 bool 
 octave_range::save_ascii (std::ostream& os)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "pr-output.h"
 #include "pt-mat.h"
 #include "utils.h"
+#include "ls-ascii-helper.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_str);
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_sq_str);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string", "char");
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_sq_str, "sq_string", "char");
 
 static octave_base_value *
@@ -339,18 +340,17 @@ octave_char_matrix_str::load_ascii (std:
 
 		  if (tmp.is_empty ())
 		    matrix = tmp;
 		  else
 		    {
 		      char *ftmp = tmp.fortran_vec ();
 
 		      // Skip the return line
-		      if (! is.read (ftmp, 1))
-			return false;
+		      skip_preceeding_newline (is);
 
 		      if (! is.read (ftmp, dv.numel ()) || !is)
 			{
 			  error ("load: failed to load string constant");
 			  success = false;
 			}
 		      else
 			matrix = tmp;
