# HG changeset patch
# User jwe
# Date 1142391100 0
#      Wed Mar 15 02:51:40 2006 +0000
# Node ID ec3ffbf9982b1dd459c84f8993afa1a1762a389d
# Parent  4a48a1df26b774fa347596ddd9fef9b65c8a1af9
[project @ 2006-03-15 02:51:39 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-14  John W. Eaton  <jwe@octave.org>
+
+	* mk-opts.pl (emit_print_function): Buffer extra message here and
+	pass to print_usage.
+
 2006-03-09  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (do-subst-default-vals): Also substitute OCTAVE_RELEASE.
 
 2006-03-08  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Update the test for CXSPARSE for new upstream release.
 	(OCTAVE_VERSION, OCTAVE_HOSTTYPE, OCTAVE_HOME,TEXINFO_UMFPACK, 
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -590,99 +590,104 @@ sub emit_option_table_entry
 
 sub emit_print_function
 {
   local ($i);
 
   ## XXX FIXME XXX -- determine the width of the table automatically.
 
   print "static void
-print_${class_name} (std::ostream& os)
+print_${class_name} (void)
 {
-  print_usage (\"$opt_fcn_name\", 1);
+  OSSTREAM buf;
 
-  os << \"\\n\"
-     << \"Options for $CLASS include:\\n\\n\"
-     << \"  keyword                                             value\\n\"
-     << \"  -------                                             -----\\n\";
+  buf << \"\\n\"
+      << \"Options for $CLASS include:\\n\\n\"
+      << \"  keyword                                             value\\n\"
+      << \"  -------                                             -----\\n\";
 
   $struct_name *list = $static_table_name;\n\n";
 
   for ($i = 0; $i < $opt_num; $i++)
     {
-      print "  {\n    os << \"  \"
-       << std::setiosflags (std::ios::left) << std::setw (50)
-       << list[$i].keyword
-       << std::resetiosflags (std::ios::left)
-       << \"  \";\n\n";
+      print "  {\n    buf << \"  \"
+        << std::setiosflags (std::ios::left) << std::setw (50)
+        << list[$i].keyword
+        << std::resetiosflags (std::ios::left)
+        << \"  \";\n\n";
 
       if ($type[$i] eq "double")
         {
           print "    double val = $static_object_name.$opt[$i] ();\n\n";
-          print "    os << val << \"\\n\";\n";
+          print "    buf << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "int" || $type[$i] eq "octave_idx_type")
         {
           print "    int val = $static_object_name.$opt[$i] ();\n\n";
-          print "    os << val << \"\\n\";\n";
+          print "    buf << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "std::string")
         {
-          print "    os << $static_object_name.$opt[$i] () << \"\\n\";\n";
+          print "    buf << $static_object_name.$opt[$i] () << \"\\n\";\n";
         }
       elsif ($type[$i] eq "Array<int>" || $type[$i] eq "Array<octave_idx_type>")
         {
 	  if ($type[$i] eq "Array<int>")
             {
               $elt_type = "int";
             }
           else
             {
               $elt_type = "octave_idx_type";
             }
           print "    Array<$elt_type> val = $static_object_name.$opt[$i] ();\n\n";
           print "    if (val.length () == 1)
       {
-        os << val(0) << \"\\n\";
+        buf << val(0) << \"\\n\";
       }
     else
       {
-        os << \"\\n\\n\";
+        buf << \"\\n\\n\";
 	octave_idx_type len = val.length ();
 	Matrix tmp (len, 1);
 	for (octave_idx_type i = 0; i < len; i++)
 	  tmp(i,0) = val(i);
-        octave_print_internal (os, tmp, false, 2);
-        os << \"\\n\\n\";
+        octave_print_internal (buf, tmp, false, 2);
+        buf << \"\\n\\n\";
       }\n";
         }
       elsif ($type[$i] eq "Array<double>")
         {
           print "    Array<double> val = $static_object_name.$opt[$i] ();\n\n";
           print "    if (val.length () == 1)
       {
-        os << val(0) << \"\\n\";
+        buf << val(0) << \"\\n\";
       }
     else
       {
-        os << \"\\n\\n\";
+        buf << \"\\n\\n\";
         Matrix tmp = Matrix (ColumnVector (val));
-        octave_print_internal (os, tmp, false, 2);
-        os << \"\\n\\n\";
+        octave_print_internal (buf, tmp, false, 2);
+        buf << \"\\n\\n\";
       }\n";
         }
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "  }\n\n";
     }
 
-  print "  os << \"\\n\";\n}\n\n";
+  print "  buf << OSSTREAM_ENDS;
+
+  print_usage (\"$opt_fcn_name\", true, OSSTREAM_STR (buf));
+
+  OSSTREAM_FREEZE (buf);
+}\n\n";
 }
 
 sub emit_set_functions
 {
   print "static void
 set_${class_name} (const std::string& keyword, const octave_value& val)
 {
   $struct_name *list = $static_table_name;\n\n";
@@ -851,17 +856,17 @@ Options include\\n\\
   print "\@end table\\n\\\n\@end deftypefn\")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      print_${class_name} (octave_stdout);
+      print_${class_name} ();
     }
   else if (nargin == 1 || nargin == 2)
     {
       std::string keyword = args(0).string_value ();
 
       if (! error_state)
         {
           if (nargin == 1)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2006-03-14  Keith Goodman  <kwgoodman@gmail.com>
+
+	* help.cc (Fhelp, Fwhich, Flookfor): Doc string fix.
+
+2006-03-14  John W. Eaton  <jwe@octave.org>
+
+	* defun.cc (print_usage): New arg, extra_msg.
+	
+	* xpow.cc: Omit tests for now.
+
+	* parse.y (QUOTE, TRANSPOSE): For compatibility, now have same
+	precedence as POW and EPOW.
+
 2006-03-14  Bill Denney  <bill@givebillmoney.com>
 
          * load-save.cc (Fload, Fsave): Update docstring for functional form.
 
 2006-03-14  John W. Eaton  <jwe@octave.org>
 
 	* xpow.cc (elem_xpow): Undo previous change.
 
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -29,17 +29,18 @@ 02110-1301, USA.
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "ov-mapper.h"
 #include "symtab.h"
 #include "version.h"
 
 class octave_value;
 
-extern void print_usage (const std::string& nm, bool just_usage = false);
+extern void print_usage (const std::string& nm, bool just_usage = false,
+			 const std::string& extra_msg = std::string ());
 
 extern void check_version (const std::string& version, const std::string& fcn);
 
 extern void
 install_builtin_mapper (octave_mapper *mf);
 
 extern void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -40,17 +40,18 @@ 02110-1301, USA.
 #include "pager.h"
 #include "symtab.h"
 #include "variables.h"
 
 // XXX FIXME XXX -- this function could probably share some code with
 // the help functions.
 
 void
-print_usage (const std::string& nm, bool just_usage)
+print_usage (const std::string& nm, bool just_usage,
+	     const std::string& extra_msg)
 {
   symbol_record *sym_rec = fbi_sym_tab->lookup (nm);
 
   if (sym_rec)
     {
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
@@ -58,17 +59,17 @@ print_usage (const std::string& nm, bool
 	  OSSTREAM buf;
 
 	  buf << "\n*** " << nm << ":\n\n";
 
 	  h = extract_help_from_dispatch (nm) + h;
 
 	  display_help_text (buf, h);
 
-	  buf << "\n";
+	  buf << extra_msg << "\n";
 
 	  if (! just_usage)
 	    additional_help_message (buf);
 
 	  buf << OSSTREAM_ENDS;
 
 	  defun_usage_message (OSSTREAM_STR (buf));
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -924,16 +924,17 @@ the @code{help} command searches the ind
 this manual for the given topics.\n\
 \n\
 For example, the command @kbd{help help} prints a short message\n\
 describing the @code{help} command, and @kbd{help -i help} starts the\n\
 GNU Info browser at this node in the on-line version of the manual.\n\
 \n\
 Once the GNU Info browser is running, help for using it is available\n\
 using the command @kbd{C-h}.\n\
+@seealso{which, lookfor}\n\
 @end deffn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("help");
 
@@ -1111,16 +1112,17 @@ do_which (std::ostream& os, const std::s
     }
 }
 
 DEFCMD (which, args, nargout,
   "-*- texinfo -*-\n\
 @deffn {Command} which name @dots{}\n\
 Display the type of each @var{name}.  If @var{name} is defined from a\n\
 function file, the full name of the file is also displayed.\n\
+@seealso{help, lookfor}\n\
 @end deffn")
 {
   octave_value_list retval;
 
   string_vector argv = args.make_argv ("which");
 
   if (! error_state)
     {
@@ -1532,17 +1534,17 @@ functions to the terminal. Otherwise the
 each of their help strings.\n\
 \n\
 Note that the ability of @code{lookfor} to correctly identify the first\n\
 sentence of the help of the functions is dependent on the format of the\n\
 functions help. All of the functions in octave itself will correctly\n\
 find the first sentence, but the same can not be guaranteed for other\n\
 functions. Therefore the use of the '-all' argument might be necessary\n\
 to find related functions that are not part of octave.\n\
-@seealso{which, help}\n\
+@seealso{help, which}\n\
 @end deffn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   bool first_sentence_only = true;
 
   if (nargin != 1 && nargin != 2)
     {
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -472,19 +472,18 @@ set_stmt_print_flag (tree_statement_list
 %left EXPR_AND_AND
 %left EXPR_OR
 %left EXPR_AND
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
-%left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
-%left POW EPOW
+%left POW EPOW QUOTE TRANSPOSE
 %left '(' '.' '{'
 
 // Where to start.
 %start input
 
 %%
 
 // ==============================
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -1202,56 +1202,12 @@ elem_xpow (const ComplexNDArray& a, cons
       OCTAVE_QUIT;
       result(i) = std::pow (a(i), b(i));
     }
 
   return result;
 }
 
 /*
-%!# a ^ b  for real/complex scalar/matrix
-%!assert (0^-.5, Inf);            # case 1
-
-%!# a .^ b  for real/complex scalar/matrix
-%!shared a, b, ai, bi
-%! a = [0,1];   ai = [0,1i];
-%! b = [-.5,1]; bi = [-.5,1i];
-%!assert ([0.^b](1), Inf)         # case 1
-%!assert ([0.^bi](1), Inf)        # case 2
-%!assert ([a.^-.5](1), Inf)       # case 3   
-%!assert ([a.^b](1), Inf)         # case 4
-%!# matrix.^complex               # case 5
-%!assert ([a.^bi](1), Inf)        # case 6
-%!# complex.^matrix               # case 7
-%!# complex.^complexmatrix        # case 8
-%!assert ([ai.^-.5](1), Inf)      # case 9
-%!assert ([ai.^b](1), Inf)        # case 10
-%!# complexmatrix.^complex        # case 11
-%!assert ([ai.^bi](1), Inf)       # case 12
-
-%!# a .^ b  for real/complex scalar/ndarray
-%!shared a, b, ai, bi
-%! a = ones(1,1,2); ai = ones(1,1,2)*1i;
-%! b = ones(1,1,2); bi = ones(1,1,2)*1i;   
-%! a(1,1,1) = 0; ai(1,1,1) = 0;
-%! b(1,1,1) = -.5; bi(1,1,1) = -.5;
-%!assert ([0.^b](1), Inf)         # case 1
-%!assert ([0.^bi](1), Inf)        # case 2
-%!assert ([a.^-.5](1), Inf)       # case 3   
-%!assert ([a.^b](1), Inf)         # case 4
-%!# matrix.^complex               # case 5
-%!assert ([a.^bi](1), Inf)        # case 6
-%!# complex.^matrix               # case 7
-%!# complex.^complexmatrix        # case 8
-%!assert ([ai.^-.5](1), Inf)      # case 9
-%!assert ([ai.^b](1), Inf)        # case 10
-%!# complexmatrix.^complex        # case 11
-%!assert ([ai.^bi](1), Inf)       # case 12
-
-%!# I don't think sparse is an issue since 
-%!# it ignores zeros in the base.
-*/
-
-/*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-14  John W. Eaton  <jwe@octave.org>
+
+	* fntests.m: Prettier printing of output.
+	* test_eval.m: Disable chatty tests.
+
 2006-03-08  David Bateman  <dbateman@free.fr>
 
 	* test_system.m: Fix recursive rmdir test for recent change.
 
 2006-02-20  David Bateman  <dbateman@free.fr>
 
 	* build_spase_tests.sh: Add tests for ldiv tests for rectangular
 	diagonal, permuted diagonal, triangular and permuted triangular
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -26,17 +26,24 @@ fundirs = {src_tree, script_tree};
 function [dp, dn] = runtestdir (fid, d);
   lst = dir(d);
   dp = dn = 0;
   for i = 1:length(lst)
     nm = lst(i).name;
     if (length(nm) > 5 && strcmp(nm(1:5),"test_") && 
 	strcmp(nm((end-1):end),".m"))
       [p,n] = test(nm(1:(end-2)),"quiet",fid);
-      printf("  %s -> passes %d of %d\n",nm,p,n);
+      filler = repmat (".", 1, 40-length(nm));
+      printf("  %s %s PASS %4d/%-4d",nm,filler,p,n);
+      nfail = n - p;
+      if (nfail > 0)
+	printf (" FAIL %d\n", nfail);
+      else
+	printf ("\n");
+      endif
       dp +=p;
       dn += n;
     endif
   endfor
 endfunction
 
 function y = hastests (f)
   fid = fopen(f);
@@ -47,25 +54,25 @@ function y = hastests (f)
       findstr(str,"%!warning"))
     y = 1;
   else
     y = 0;
   endif
   fclose(fid);
 endfunction
 
-function [dp, dn] = runtestscript (fid, d, ident);
+function [dp, dn] = runtestscript (fid, d);
   global topsrcdir
   lst = dir(d);
   dp = dn = 0;
   for i=1:length(lst)
     nm = lst(i).name;
     if (lst(i).isdir && !strcmp(nm,".") && !strcmp(nm,"..") && 
 	!strcmp(nm,"CVS"))
-      [p, n] = runtestscript (fid, [d, "/",nm], [ident,"  "]);
+      [p, n] = runtestscript (fid, [d, "/",nm]);
       dp += p;
       dn += n;
     endif
   endfor
   for i=1:length(lst)
     nm = lst(i).name;
     if ((length(nm) > 3 && strcmp(nm((end-2):end),".cc")) ||
 	(length(nm) > 2 && strcmp(nm((end-1):end),".m")))
@@ -73,19 +80,26 @@ function [dp, dn] = runtestscript (fid, 
       ## Only run if it contains %!test, %!assert %!error or %!warning
       if (hastests(f))
 	[p, n] = test(f,"quiet",fid);
 	dp += p;
 	dn += n;
       endif
     endif
   endfor 
-  printf("%s%s -> passes %d of %d tests\n", ident,
-	 strrep (d, topsrcdir, "..."), dp, dn);
-##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
+  tmpnm = strrep (d, [topsrcdir,"/"], "");
+  filler = repmat (".", 1, 40-length(tmpnm));
+  printf("  %s %s PASS %4d/%-4d", tmpnm, filler, dp, dn);
+  nfail = dn - dp;
+  if (nfail > 0)
+    printf (" FAIL %d\n", nfail);
+  else
+    printf ("\n");
+  endif
+  ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
 
 function printf_assert(varargin)
   global _assert_printf;
   _assert_printf=cat(2,_assert_printf,sprintf(varargin{:}));
 endfunction
 
 function ret = prog_output_assert(str)
@@ -106,35 +120,32 @@ warning("on","quiet");
 try
   page_screen_output =0;
   fid=fopen("fntests.log","wt");
   if (fid < 0)
     error("could not open fntests.log for writing");
   endif
   test("","explain",fid);
   dp=dn=0;
-  printf("\nIntegrated test scripts\n");
+  printf("\nIntegrated test scripts:\n\n");
   for i=1:length(fundirs)
-    [p,n] = runtestscript(fid,fundirs{i}," ");
+    [p,n] = runtestscript(fid,fundirs{i});
     dp+=p;
     dn+=n;
   endfor
-  printf("\nFixed test scripts\n");
+  printf("\nFixed test scripts:\n\n");
   for i=1:length(testdirs)
     [p, n] = runtestdir (fid, testdirs{i});
     dp+=p;
     dn+=n;
   endfor
-  printf("---> passes %d out of %d tests",dp,dn); 
-  if dp==dn 
-    printf("\n---> success"); 
-  endif;
-  disp("");
-  printf("see fntests.log for details");
-  disp("");
+  printf("\nSummary:\n\n  PASS %6d\n", dp);
+  nfail = dn - dp;
+  printf ("  FAIL %6d\n", nfail);
+  printf("\nSee fntests.log for details.\n");
   fclose(fid);
   page_screen_output = pso;
   warning(warn_state.state,"quiet");
 catch
   page_screen_output = pso;
   warning(warn_state.state,"quiet");
   disp(lasterr());
 end_try_catch
diff --git a/test/test_eval.m b/test/test_eval.m
--- a/test/test_eval.m
+++ b/test/test_eval.m
@@ -1,23 +1,23 @@
 %% Automatically generated from DejaGNU files
 
 %% test/octave.test/eval/eval-1.m
-%!test
+%!#test
 %! x = 1;
 %! assert(eval ("x"),1);
 
 %% test/octave.test/eval/eval-2.m
 %!test
 %! x = 1;
 %! assert(eval ("x;"));
 
 %% test/octave.test/eval/eval-3.m
 %!test
-%! x = 1
+%! x = 1;
 %! assert(eval ("x;"),1);
 
 %% XXX FIXME XXX
 %% Disable this test as adding the ";" is redundant with eval-1 and
 %% in any case is a syntax error with assert
 %% test/octave.test/eval/eval-4.m
 %!#test
 %! x = 1;
@@ -31,31 +31,32 @@
 %% test/octave.test/eval/eval-6.m
 %!function y = f ()
 %!  eval ("flipud = 2;");
 %!  y = flipud;
 %!test
 %! assert(f,2);
 
 %% test/octave.test/eval/eval-7.m
-%!test
+%!#test
 %! eval ("x = 1");
 %! assert(x,1);
 
 %% test/octave.test/eval/eval-8.m
 %!test
 %! eval ("x = 1;")
 %! assert(x,1);
 
 %% test/octave.test/eval/eval-9.m
 %!test
 %! eval ("x = 1;");
 %! assert(x,1);
 
 %% test/octave.test/eval/eval-10.m
+%!#test
 %! eval ("x = 1")
 %! assert(x,1);
 
 %% test/octave.test/eval/eval-11.m
 %!test
 %! x = 1;
 %! y = eval ("x");
 %! assert(y,1);
