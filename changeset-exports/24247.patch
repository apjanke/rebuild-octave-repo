# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1502260326 -7200
#      Wed Aug 09 08:32:06 2017 +0200
# Node ID 4e045a47659889210900220ef89ff5a73fef193b
# Parent  d74d01e39f91e444849cab309a2a8436a80a3af2
jit: jit-typeinfo.cc: Introduce a local variable for clarity

diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -785,20 +785,23 @@ namespace octave
         delete iter->second;
       }
   }
 
   void
   jit_operation::add_overload (const jit_function& func,
                                const std::vector<jit_type*>& args)
   {
-    if (args.size () >= overloads.size ())
-      overloads.resize (args.size () + 1);
+    // Number of input arguments of the overload that is being registered
+    size_t nargs = args.size ();
 
-    Array<jit_function>& over = overloads[args.size ()];
+    if (nargs >= overloads.size ())
+      overloads.resize (nargs + 1);
+
+    Array<jit_function>& over = overloads[nargs];
     dim_vector dv (over.dims ());
     Array<octave_idx_type> idx = to_idx (args);
     bool must_resize = false;
 
     if (dv.length () != idx.numel ())
       {
         dv.resize (idx.numel ());
         must_resize = true;
@@ -815,25 +818,28 @@ namespace octave
       over.resize (dv);
 
     over(idx) = func;
   }
 
   const jit_function&
   jit_operation::overload (const std::vector<jit_type*>& types) const
   {
+  // Number of input arguments of the overload that is being looked for
+  size_t nargs = types.size ();
+
     static jit_function null_overload;
-    for (size_t i = 0; i < types.size (); ++i)
+    for (size_t i = 0; i < nargs; ++i)
       if (! types[i])
         return null_overload;
 
-    if (types.size () >= overloads.size ())
+    if (nargs >= overloads.size ())
       return do_generate (types);
 
-    const Array<jit_function>& over = overloads[types.size ()];
+    const Array<jit_function>& over = overloads[nargs];
     dim_vector dv (over.dims ());
     Array<octave_idx_type> idx = to_idx (types);
     for (octave_idx_type i = 0; i < dv.length (); ++i)
       if (idx(i) >= dv(i))
         return do_generate (types);
 
     const jit_function& ret = over(idx);
     if (! ret.valid ())
