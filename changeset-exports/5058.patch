# HG changeset patch
# User jwe
# Date 1099343204 0
#      Mon Nov 01 21:06:44 2004 +0000
# Node ID 11bea7392e69bcbc1beff9891cee07f62b1376e9
# Parent  3bc00c1098e11e2b3b13471079ec904a5dbbc810
[project @ 2004-11-01 21:06:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2004-11-01  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (INSTANTIATE_EYE): New macro.  Use it to instantiate
+	identity matrix functions for various matrix types.
+
+	* variables.cc (do_who): Fix typo in for loop.
+
+2004-10-28  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (save_mat5_binary_element): Save structure elements
+	in correct order.
+
 2004-10-26  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn.h (octave_function::octave_va_arg): No longer const.
 
 2004-10-22  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/filter.cc: Remove some unnecessary parens.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1392,16 +1392,30 @@ identity_matrix (int nr, int nc)
 	}
 
       retval = m;
     }
 
   return retval;
 }
 
+#define INSTANTIATE_EYE(T) \
+  template octave_value identity_matrix<T> (int, int)
+
+INSTANTIATE_EYE (int8NDArray);
+INSTANTIATE_EYE (uint8NDArray);
+INSTANTIATE_EYE (int16NDArray);
+INSTANTIATE_EYE (uint16NDArray);
+INSTANTIATE_EYE (int32NDArray);
+INSTANTIATE_EYE (uint32NDArray);
+INSTANTIATE_EYE (int64NDArray);
+INSTANTIATE_EYE (uint64NDArray);
+INSTANTIATE_EYE (NDArray);
+INSTANTIATE_EYE (boolNDArray);
+
 static octave_value
 identity_matrix (int nr, int nc, oct_data_conv::data_type dt)
 {
   octave_value retval;
 
   // XXX FIXME XXX -- perhaps this should be made extensible by using
   // the class name to lookup a function to call to create the new
   // value.
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -884,23 +884,24 @@ save_mat5_binary_element (std::ostream& 
 	    std::string tstr = m.key (i);
 	    memset (buf, 0, 32);
 	    strncpy (buf, tstr.c_str (), 31); // only 31 char names permitted
 	    os.write (buf, 32);
 	  }
 
 	int len = m.numel ();
 
-	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
+	for (int j = 0; j < len; j++)
 	  {
 	    // write the data of each element
-	    Cell elts = m.contents (i);
 
-	    for (int j = 0; j < len; j++)
+	    for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
 	      {
+		Cell elts = m.contents (i);
+
 		bool retval2 = save_mat5_binary_element (os, elts(j), "",
 							 mark_as_global,
 							 save_as_floats);
 		if (! retval2)
 		  goto error_cleanup;
 	      }
 	  }
       }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1249,17 +1249,17 @@ do_who (int argc, const string_vector& a
 	}
 
       if (show_verbose)
 	{
 	  int len = names.length ();
 
 	  octave_value_list ovl (len, octave_value ());
 
-	  for (int j = 0; j < len; i++)
+	  for (int j = 0; j < len; j++)
 	    ovl(j) = names(j);
 
 	  retval = Octave_map ("name", ovl);
 	}
       else
 	retval = Cell (names);
     }
   else
