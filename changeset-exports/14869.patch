# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1342539534 14400
#      Tue Jul 17 11:38:54 2012 -0400
# Branch gui
# Node ID db3c84d38345b08924487c01b33fabcaf655eed9
# Parent  3a05cb67dea5204b66509f5e477931d118dbf068
Now supporting c/cc/cpp syntax highlighting.

* file-editor-tab: Added updating lexer dependent on the filename suffix..
* file-editor: Removed initializig a single lexer for all editor tabs.

diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -13,27 +13,28 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-link.h"
+
+#include "resource-manager.h"
 #include <QMessageBox>
 #include <QVBoxLayout>
 
 file_editor_tab::file_editor_tab(file_editor *fileEditor)
   : QWidget ((QWidget*)fileEditor), octave_event_observer ()
 {
   QSettings *settings = resource_manager::instance ()->get_settings ();
   _file_editor = fileEditor;
   _file_name = "";
   _edit_area = new QsciScintilla (this);
-  _edit_area->setLexer (fileEditor->lexer ());
 
   // symbols
   _edit_area->setMarginType (1, QsciScintilla::SymbolMargin);
   _edit_area->setMarginSensitivity (1, true);
   _edit_area->markerDefine (QsciScintilla::RightTriangle, bookmark);
   _edit_area->markerDefine (QPixmap (":/actions/icons/redled.png"), breakpoint);
   _edit_area->markerDefine (QPixmap (":/actions/icons/arrow_right.png"),
                             debugger_position);
@@ -164,16 +165,17 @@ file_editor_tab::closeEvent (QCloseEvent
         }
     }
 }
 
 void
 file_editor_tab::set_file_name (QString fileName)
 {
   _file_name = fileName;
+  update_lexer ();
   update_tracked_file ();
 }
 
 void
 file_editor_tab::handle_margin_clicked(int margin, int line, Qt::KeyboardModifiers state)
 {
   Q_UNUSED (state);
   if (margin == 1)
@@ -197,16 +199,65 @@ file_editor_tab::handle_margin_clicked(i
             {
               request_add_breakpoint (line);
             }
         }
     }
 }
 
 void
+file_editor_tab::update_lexer ()
+{
+  QsciLexer *lexer =  _edit_area->lexer ();
+  delete lexer;
+
+  if (_file_name.endsWith (".m") || _file_name.endsWith (".M"))
+    {
+      lexer = new lexer_octave_gui ();
+
+      // The API info that is used for auto completion
+      // TODO: Where to store a file with API info (raw or prepared?)?
+      // TODO: Also provide infos on octave-forge functions?
+      // TODO: Also provide infos on function parameters?
+      // By now, use the keywords-list from syntax highlighting
+
+      QsciAPIs *lexer_api = new QsciAPIs (lexer);
+
+      QString keyword;
+      QStringList keywordList;
+      keyword = lexer->keywords (1);  // get whole string with all keywords
+      keywordList = keyword.split (QRegExp ("\\s+"));  // split into single strings
+      int i;
+      for (i = 0; i < keywordList.size (); i++)
+        {
+          lexer_api->add (keywordList.at (i));  // add single strings to the API
+        }
+      lexer_api->prepare ();           // prepare API info ... this make take some time
+    }
+  else if (_file_name.endsWith (".c") || _file_name.endsWith (".cc") || _file_name.endsWith (".cpp"))
+    {
+      lexer = new QsciLexerCPP ();
+    }
+
+  QSettings *settings = resource_manager::instance ()->get_settings ();
+
+  // Editor font (default or from settings)
+  lexer->setDefaultFont (QFont (
+                             settings->value ("editor/fontName","Courier").toString (),
+                             settings->value ("editor/fontSize",10).toInt ()));
+
+  // TODO: Autoindent not working as it should
+  lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
+                               QsciScintilla::AiOpening  ||
+                               QsciScintilla::AiClosing);
+
+  _edit_area->setLexer (lexer);
+}
+
+void
 file_editor_tab::request_add_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
   QString path = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
diff --git a/gui/src/m-editor/file-editor-tab.h b/gui/src/m-editor/file-editor-tab.h
--- a/gui/src/m-editor/file-editor-tab.h
+++ b/gui/src/m-editor/file-editor-tab.h
@@ -18,16 +18,21 @@
 #ifndef FILEEDITORTAB_H
 #define FILEEDITORTAB_H
 
 #include <Qsci/qsciscintilla.h>
 #include <QWidget>
 #include <QCloseEvent>
 #include <QFileSystemWatcher>
 
+#include <Qsci/qsciapis.h>
+// Not available in the Debian repos yet!
+// #include <Qsci/qscilexeroctave.h>
+#include "lexer-octave-gui.h"
+#include <Qsci/qscilexercpp.h>
 #include "octave-event-observer.h"
 
 class file_editor;
 class file_editor_tab : public QWidget, public octave_event_observer
 {
   Q_OBJECT
 public:
   file_editor_tab (file_editor *fileEditor);
@@ -74,16 +79,17 @@ signals:
   void editor_state_changed ();
   void close_request ();
 
 protected:
   void closeEvent (QCloseEvent *event);
   void set_file_name (QString fileName);
 
 private:
+  void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void update_tracked_file ();
   int check_file_modified (QString msg, int cancelButton);
   void do_comment_selected_text (bool comment);
 
   file_editor *         _file_editor;
diff --git a/gui/src/m-editor/file-editor.cc b/gui/src/m-editor/file-editor.cc
--- a/gui/src/m-editor/file-editor.cc
+++ b/gui/src/m-editor/file-editor.cc
@@ -34,22 +34,16 @@ file_editor::file_editor (QTerminal *ter
   _main_window = m;
   setVisible (false);
 }
 
 file_editor::~file_editor ()
 {
 }
 
-lexer_octave_gui *
-file_editor::lexer ()
-{
-  return _lexer;
-}
-
 QTerminal *
 file_editor::terminal ()
 {
   return _terminal;
 }
 
 main_window *
 file_editor::get_main_window ()
@@ -470,46 +464,16 @@ file_editor::construct ()
   connect (next_breakpoint_action,      SIGNAL (triggered ()), this, SLOT (request_next_breakpoint ()));
   connect (previous_breakpoint_action,      SIGNAL (triggered ()), this, SLOT (request_previous_breakpoint ()));
   connect (remove_breakpoint_action,    SIGNAL (triggered ()), this, SLOT (request_remove_breakpoint ()));
   connect (comment_selection_action,   SIGNAL (triggered ()), this, SLOT (request_comment_selected_text ()));
   connect (uncomment_selection_action, SIGNAL (triggered ()), this, SLOT (request_uncomment_selected_text ()));
   connect (_tab_widget, SIGNAL (tabCloseRequested (int)), this, SLOT (handle_tab_close_request (int)));
   connect (_tab_widget, SIGNAL (currentChanged(int)), this, SLOT (active_tab_changed (int)));
 
-  // this has to be done only once, not for each editor
-  _lexer = new lexer_octave_gui ();
-
-  // Editor font (default or from settings)
-  _lexer->setDefaultFont (QFont (
-                             settings->value ("editor/fontName","Courier").toString (),
-                             settings->value ("editor/fontSize",10).toInt ()));
-
-  // TODO: Autoindent not working as it should
-  _lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
-                               QsciScintilla::AiOpening  ||
-                               QsciScintilla::AiClosing);
-
-  // The API info that is used for auto completion
-  // TODO: Where to store a file with API info (raw or prepared?)?
-  // TODO: Also provide infos on octave-forge functions?
-  // TODO: Also provide infos on function parameters?
-  // By now, use the keywords-list from syntax highlighting
-  _lexer_api = new QsciAPIs (_lexer);
-
-  QString keyword;
-  QStringList keywordList;
-  keyword = _lexer->keywords (1);  // get whole string with all keywords
-  keywordList = keyword.split (QRegExp ("\\s+"));  // split into single strings
-  int i;
-  for (i = 0; i < keywordList.size (); i++)
-    {
-      _lexer_api->add (keywordList.at (i));  // add single strings to the API
-    }
-  _lexer_api->prepare ();           // prepare API info ... this make take some time
   resize (500, 400);
   setWindowIcon (QIcon::fromTheme ("accessories-text-editor", style->standardIcon (QStyle::SP_FileIcon)));
   setWindowTitle ("Octave Editor");
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f)
 {
diff --git a/gui/src/m-editor/file-editor.h b/gui/src/m-editor/file-editor.h
--- a/gui/src/m-editor/file-editor.h
+++ b/gui/src/m-editor/file-editor.h
@@ -23,20 +23,16 @@
 #include "file-editor-tab.h"
 
 #include <QToolBar>
 #include <QAction>
 #include <QMenuBar>
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <QTabWidget>
-#include <Qsci/qsciapis.h>
-// Not available in the Debian repos yet!
-// #include <Qsci/qscilexeroctave.h>
-#include "lexer-octave-gui.h"
 
 const char UNNAMED_FILE[]     = "<unnamed>";
 const char SAVE_FILE_FILTER[] = "Octave Files (*.m);;All Files (*.*)";
 enum editor_markers
   {
     bookmark,
     breakpoint,
     debugger_position
@@ -46,17 +42,16 @@ class file_editor : public file_editor_i
 {
 Q_OBJECT
 
 public:
   file_editor (QTerminal *terminal, main_window *m);
   ~file_editor ();
   void loadFile (QString fileName);
 
-  lexer_octave_gui *lexer ();
   QTerminal *       terminal ();
   main_window *     get_main_window ();
 
   QMenu *           debug_menu();
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
 
@@ -100,13 +95,11 @@ private:
   QMenuBar *        _menu_bar;
   QToolBar *        _tool_bar;
   QMenu *           _debug_menu;
   QAction *         _copy_action;
   QAction *         _cut_action;
   QAction *         _run_action;
   QTabWidget *      _tab_widget;
   int               _marker_breakpoint;
-  lexer_octave_gui *_lexer;
-  QsciAPIs *        _lexer_api;
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
