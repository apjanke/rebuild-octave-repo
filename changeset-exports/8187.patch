# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1223339639 14400
#      Mon Oct 06 20:33:59 2008 -0400
# Node ID b04109600a828fdd3b5877cc6ceeb8328c5410e8
# Parent  23ff439ea0dd90e14f8dd3c9f187a45d4c52db4b
AIX Build fix

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-06  David Bateman  <dbateman@free.fr>
+	
+	* Sparse-op-defs.h (SPARSE_SMSM_CMP_OPS): Duplicate code for scalar
+	sparse arguments rather than rely on extern function.
+
 2008-10-06  John W. Eaton  <jwe@octave.org>
 
 	* Spasre-op-defs.h: Undo previous change.
 
 2008-10-01  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_int<T>::one, octave_int<T>::zero): Declare
 	constants. 
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -744,25 +744,71 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
     \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
     \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const double&, const M2&); \
-        extern OCTAVE_API SparseBoolMatrix F (const Complex&, const M2&); \
-        r = F (m1.elem(0,0), m2); \
+    if (C1 (m1.elem(0,0)) OP C2 (Z2)) \
+	  { \
+	    r = SparseBoolMatrix (m2_nr, m2_nc, true); \
+	    for (octave_idx_type j = 0; j < m2_nc; j++) \
+	      for (octave_idx_type i = m2.cidx(j); i < m2.cidx(j+1); i++) \
+		if (! (C1 (m1.elem (0,0)) OP C2 (m2.data(i)))) \
+		  r.data (m2.ridx (i) + j * m2_nr) = false; \
+	    r.maybe_compress (true); \
+	  } \
+	else \
+	  { \
+	    r = SparseBoolMatrix (m2_nr, m2_nc, m2.nnz ()); \
+	    r.cidx (0) = static_cast<octave_idx_type> (0); \
+	    octave_idx_type nel = 0; \
+	    for (octave_idx_type j = 0; j < m2_nc; j++) \
+	      { \
+		for (octave_idx_type i = m2.cidx(j); i < m2.cidx(j+1); i++) \
+		  if (C1 (m1.elem (0,0)) OP C2 (m2.data(i))) \
+		    { \
+		      r.ridx (nel) = m2.ridx (i); \
+		      r.data (nel++) = true; \
+		    } \
+		r.cidx (j + 1) = nel; \
+	      }	\
+	    r.maybe_compress (false); \
+	  } \
       } \
     else if (m2_nr == 1 && m2_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const double&); \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const Complex&); \
-        r = F (m1, m2.elem(0,0)); \
+	if (C1 (Z1) OP C2 (m2.elem (0,0))) \
+	  { \
+	    r = SparseBoolMatrix (m1_nr, m1_nc, true); \
+	    for (octave_idx_type j = 0; j < m1_nc; j++) \
+	      for (octave_idx_type i = m1.cidx(j); i < m1.cidx(j+1); i++) \
+		if (! (C1 (m1.data (i)) OP C2 (m2.elem(0,0)))) \
+		  r.data (m1.ridx (i) + j * m1_nr) = false; \
+	    r.maybe_compress (true); \
+	  } \
+	else \
+	  { \
+	    r = SparseBoolMatrix (m1_nr, m1_nc, m1.nnz ()); \
+	    r.cidx (0) = static_cast<octave_idx_type> (0); \
+	    octave_idx_type nel = 0; \
+	    for (octave_idx_type j = 0; j < m1_nc; j++) \
+	      { \
+		for (octave_idx_type i = m1.cidx(j); i < m1.cidx(j+1); i++) \
+		  if (C1 (m1.data (i)) OP C2 (m2.elem(0,0))) \
+		    { \
+		      r.ridx (nel) = m1.ridx (i); \
+		      r.data (nel++) = true; \
+		    } \
+		r.cidx (j + 1) = nel; \
+	      }	\
+	    r.maybe_compress (false); \
+	  } \
       } \
     else if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
             if (C1 (Z1) OP C2 (Z2)) \
 	      { \
                 r = SparseBoolMatrix (m1_nr, m1_nc, true); \
