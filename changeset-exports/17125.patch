# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375313269 25200
#      Wed Jul 31 16:27:49 2013 -0700
# Node ID b5d6314314fc79b64bb78ac8f9c9e1baeca04025
# Parent  7649779e6ebd36fadc732701032648f4f0a445f3
Change various plot functions to take advantage of new isaxes() function.

* scripts/geometry/voronoi.m, scripts/image/imagesc.m,
scripts/plot/__plt_get_axis_arg__.m, scripts/plot/axes.m, scripts/plot/cla.m,
scripts/plot/colorbar.m, scripts/plot/hold.m, scripts/plot/legend.m,
scripts/plot/plotmatrix.m, scripts/plot/plotyy.m,
scripts/plot/private/__errplot__.m, scripts/plot/private/__plt__.m,
scripts/plot/view.m: Use new isaxes function to simplify code.

* scripts/plot/shading.m: Use Octave convention for spacing of parentheses.

* scripts/plot/zlabel.m: Correct %!test incorrectly calling plot3 with figure
handle.

diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -69,23 +69,23 @@
 function [vx, vy] = voronoi (varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
   narg = 1;
   if (isscalar (varargin{1}) && ishandle (varargin{1}))
-    handl = varargin{1};
-    if (! strcmp (get (handl, "type"), "axes"))
-      error ("voronoi: expecting first argument to be an axes object");
+    hax = varargin{1};
+    if (! isaxes (harg))
+      error ("imagesc: HAX argument must be an axes object");
     endif
     narg++;
   elseif (nargout < 2)
-    handl = gca ();
+    hax = gca ();
   endif
 
   if (nargin < 1 + narg || nargin > 3 + narg)
     print_usage ();
   endif
 
   x = varargin{narg++};
   y = varargin{narg++};
@@ -149,17 +149,17 @@ function [vx, vy] = voronoi (varargin)
                 ismember (edges(2, :), poutside);
   edges(:, edgeoutside) = [];
 
   ## Get points of the diagram
   Vvx = reshape (p(edges, 1), size (edges));
   Vvy = reshape (p(edges, 2), size (edges));
 
   if (nargout < 2)
-    h = plot (handl, Vvx, Vvy, linespec{:}, x, y, '+');
+    h = plot (hax, Vvx, Vvy, linespec{:}, x, y, '+');
     lim = [xmin, xmax, ymin, ymax];
     axis (lim + 0.1 * [[-1, 1] * xdelta, [-1, 1] * ydelta]);
     if (nargout == 1)
       vx = h;
     endif
   else
     vx = Vvx;
     vy = Vvy;
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} imagesc (@var{img})
 ## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{img})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, @var{climits})
-## @deftypefnx {Function File} {} imagesc (@var{h}, @dots{})
+## @deftypefnx {Function File} {} imagesc (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imagesc (@dots{})
 ## Display a scaled version of the matrix @var{img} as a color image.  The
 ## colormap is scaled so that the entries of the matrix occupy the entire
 ## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then that
 ## range is set to the "clim" of the current axes.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
@@ -40,24 +40,24 @@
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function h = imagesc (varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   elseif (isscalar (varargin{1}) && ishandle (varargin{1}))
-    harg = varargin{1};
-    if (! strcmp (get (harg, "type"), "axes"))
-      error ("imagesc: expecting first argument to be an axes object");
+    hax = varargin{1};
+    if (! isaxes (hax))
+      error ("imagesc: HAX argument must be an axes object");
     endif
     oldh = gca ();
     unwind_protect
       axes (h);
-      htmp = __imagesc__ (harg, varargin{2:end});
+      htmp = __imagesc__ (hax, varargin{2:end});
     unwind_protect_cleanup
       axes (oldh);
     end_unwind_protect
   else
     htmp = __imagesc__ (gca (), varargin{:});
   endif
 
   if (nargout > 0)
diff --git a/scripts/plot/__plt_get_axis_arg__.m b/scripts/plot/__plt_get_axis_arg__.m
--- a/scripts/plot/__plt_get_axis_arg__.m
+++ b/scripts/plot/__plt_get_axis_arg__.m
@@ -23,34 +23,34 @@
 
 ## Author: jwe
 
 function [h, varargin, narg] = __plt_get_axis_arg__ (caller, varargin)
 
   h = [];
   parent = find (strcmpi (varargin, "parent"), 1);
   
-  ## Look for numeric scalar which is a graphics handle but not the
+
+  ## Look for a scalar which is a graphics handle but not the
   ## Root Figure (0) or an ordinary figure (integer).
-  if (numel (varargin) > 0 && isnumeric (varargin{1})
-      && isscalar (varargin{1}) && ishandle (varargin{1})
-      && varargin{1} != 0 && ! isfigure (varargin{1}))
+  if (numel (varargin) > 0 && numel (varargin{1}) == 1
+      && ishandle (varargin{1}) && varargin{1} != 0 && ! isfigure (varargin{1}))
     htmp = varargin{1};
-    obj = get (htmp);
-    if (strcmp (obj.type, "axes") && ! strcmp (obj.tag, "legend"))
+    if (! isaxes (htmp))
+      error ("%s: expecting first argument to be axes handle", caller);
+    endif
+    if (! strcmp (get (htmp, "tag"), "legend"))
       h = htmp;
       varargin(1) = [];
-    else
-      error ("%s: expecting first argument to be axes handle", caller);
     endif
+  ## Look for "parent"/axis prop/value pair
   elseif (numel (varargin) > 1 && ! isempty (parent))
     if (parent < numel (varargin) && ishandle (varargin{parent+1}))
       htmp = varargin{parent+1};
-      obj = get (htmp);
-      if (strcmp (obj.type, "axes") && ! strcmp (obj.tag, "legend"))
+      if (isaxes (htmp) && ! strcmp (get (htmp, "tag"), "legend"))
         h = htmp;
         varargin(parent:parent+1) = [];
       else
         ## 'parent' property for some other type like hggroup
         h = ancestor (htmp, "axes");
       endif
     else
       error ("%s: expecting parent value to be axes handle", caller);
diff --git a/scripts/plot/axes.m b/scripts/plot/axes.m
--- a/scripts/plot/axes.m
+++ b/scripts/plot/axes.m
@@ -52,18 +52,17 @@ function h = axes (varargin)
     endif
     htmp = __go_axes__ (cf, varargin{:});
     if (__is_handle_visible__ (htmp))
       set (ancestor (cf, "figure"), "currentaxes", htmp);
     endif
   else
     ## ARG is axes handle.
     htmp = varargin{1};
-    if (isscalar (htmp) && ishandle (htmp)
-        && strcmp (get (htmp, "type"), "axes"))
+    if (isscalar (htmp) && isaxes (htmp))
       if (__is_handle_visible__ (htmp))
         parent = ancestor (htmp, "figure");
         set (0, "currentfigure", parent);
         set (parent, "currentaxes", htmp);
 
         ## restack
         ch = get (parent, "children")(:);
         idx = (ch == htmp);
diff --git a/scripts/plot/cla.m b/scripts/plot/cla.m
--- a/scripts/plot/cla.m
+++ b/scripts/plot/cla.m
@@ -42,29 +42,27 @@
 function cla (varargin)
 
   if (nargin > 2)
     print_usage ();
   elseif (nargin == 0)
     hax = gca;
     do_reset = false;
   elseif (nargin == 1)
-    if (isscalar (varargin{1}) && ishandle (varargin{1})
-        && strcmp (get (varargin{1}, "type"), "axes"))
+    if (isscalar (varargin{1}) && isaxes (varargin{1}))
       hax = varargin{1};
       do_reset = false;
     elseif (ischar (varargin{1}) && strcmpi (varargin{1}, "reset"))
       hax = gca;
       do_reset = true;
     else
       print_usage ();
     endif
   else
-    if (isscalar (varargin{1}) && ishandle (varargin{1})
-        && strcmp (get (varargin{1}, "type"), "axes")
+    if (isscalar (varargin{1}) && isaxes (varargin{1})
         && ischar (varargin{2}) && strcmpi (varargin{2}, "reset"))
       hax = varargin{1};
       do_reset = true;
     else
       print_usage ();
     endif
   endif
 
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -103,18 +103,17 @@ function h = colorbar (varargin)
     arg = varargin{i++};
     if (ischar (arg))
       switch (tolower (arg))
         case "peer"
           if (i > nargin)
             error ('colorbar: missing axes handle after "peer"');
           else
             ax = varargin{i++};
-            if (! isscalar (ax) || ! ishandle (ax)
-                || ! strcmp (get (ax, "type"), "axes"))
+            if (! isscalar (ax) && ! isaxes (ax))
               error ('colorbar: expecting an axes handle following "peer"');
             endif
           endif
         case {"north", "south", "east", "west",
               "northoutside", "southoutside", "eastoutside", "westoutside"}
           loc = tolower (arg);
         case "location"
           if (i > nargin)
@@ -248,17 +247,17 @@ function h = colorbar (varargin)
     h = cax;
   endif
 
 endfunction
 
 function deletecolorbar (h, d, hc, orig_props)
   ## Don't delete the colorbar and reset the axis size if the
   ## parent figure is being deleted.
-  if (ishandle (hc) && strcmp (get (hc, "type"), "axes")
+  if (isaxes (hc)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off")))
     if (strcmp (get (hc, "beingdeleted"), "off"))
       delete (hc);
     endif
     if (!isempty (ancestor (h, "axes"))
         && strcmp (get (ancestor (h, "axes"), "beingdeleted"), "off"))
       ax = ancestor (h, "axes");
       units = get (ax, "units");
@@ -267,17 +266,17 @@ function deletecolorbar (h, d, hc, orig_
                             "outerposition", orig_props.outerposition,
                    "activepositionproperty", orig_props.activepositionproperty);
       set (ax, "units", units);
     endif
   endif
 endfunction
 
 function resetaxis (cax, d, ax, orig_props)
-  if (ishandle (ax) && strcmp (get (ax, "type"), "axes"))
+  if (isaxes (ax))
     ## FIXME: Probably don't want to delete everyone's listeners on colormap.
     dellistener (get (ax, "parent"), "colormap");
     dellistener (ax, "clim");
     dellistener (ax, "dataaspectratio");
     dellistener (ax, "dataaspectratiomode");
     dellistener (ax, "plotboxaspectratio");
     dellistener (ax, "plotboxaspectratiomode");
     dellistener (ax, "position");
@@ -287,17 +286,17 @@ function resetaxis (cax, d, ax, orig_pro
     set (ax, "position", orig_props.position,
              "outerposition", orig_props.outerposition,
              "activepositionproperty", orig_props.activepositionproperty);
     set (ax, "units", units);
   endif
 endfunction
 
 function update_colorbar_clim (hax, d, hi, vert)
-  if (ishandle (hax) && strcmp (get (hax, "type"), "axes")
+  if (isaxes (hax)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off")))
     clen = rows (get (get (hax, "parent"), "colormap"));
     cext = get (hax, "clim");
     cdiff = (cext(2) - cext(1)) / clen / 2;
     cmin = cext(1) + cdiff;
     cmax = cext(2) - cdiff;
 
     if (vert)
@@ -326,17 +325,17 @@ function update_colorbar_cmap (hf, d, hi
       ## Also update limits on axis or there will be white gaps
       update_colorbar_clim (get (hi, "parent"), d, hi, vert);
     endif
   endif
 endfunction
 
 function update_colorbar_axis (h, d, cax, orig_props)
 
-  if (ishandle (cax) && strcmp (get (cax, "type"), "axes")
+  if (isaxes (cax)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"),"off")))
     loc = get (cax, "location");
     obj = get (h);
     obj.__cbar_hax__ = h;
     obj.position = orig_props.position;
     obj.outerposition = orig_props.outerposition;
     [pos, cpos, vertical, mirror] =  ...
         __position_colorbox__ (loc, obj, ancestor (h, "figure"));
diff --git a/scripts/plot/hold.m b/scripts/plot/hold.m
--- a/scripts/plot/hold.m
+++ b/scripts/plot/hold.m
@@ -39,61 +39,55 @@
 ## @item hold off
 ## Restore default graphics settings which clear the graph and reset axis
 ## properties before each new plot command.  (default).
 ##
 ## @item hold
 ## Toggle the current hold state.
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, 
-## rather than the current axes returned by @code{gca}.
-##
 ## When given the additional argument @var{hax}, the hold state is modified
 ## for this axis rather than the current axes returned by @code{gca}.
 ##
 ## To query the current hold state use the @code{ishold} function.
 ## @seealso{ishold, cla, clf, newplot}
 ## @end deftypefn
 
 function hold (varargin)
 
-  if (nargin > 0 && isscalar (varargin{1}) && ishandle (varargin{1})
-      && strcmp (get (varargin{1}, "type"), "axes"))
-    [hax, varargin, nargs] = __plt_get_axis_arg__ ("hold", varargin{:});
-    if (isempty (hax))
-      hax = gca ();
-    endif
+  if (nargin > 0 && isscalar (varargin{1}) && isaxes (varargin{1}))
+    hax = vargin{1};
+    varargin(1) = [];
+    nargs = numel (varargin);
     ## FIXME: Should this be ancestor (hax, "parent")?
     hfig = get (hax, "parent");
   elseif (nargin > 0 && numel (varargin{1}) > 1 && ishandle (varargin{1}))
     print_usage ();
   else
     hax = gca ();
     hfig = gcf ();
     nargs = numel (varargin);
   endif
 
   hold_all = false;
   if (nargs == 0)
     turn_hold_off = ishold (hax);
   elseif (nargs == 1)
-    state = varargin{1};
-    if (ischar (state))
-      if (strcmpi (state, "off"))
+    state = tolower (varargin{1});
+    switch (state)
+      case "off"
         turn_hold_off = true;
-      elseif (strcmpi (state, "all"))
+      case "all"
         turn_hold_off = false;
         hold_all = true;
-      elseif (strcmpi (state, "on"))
+      case "on"
         turn_hold_off = false;
-      else
+      otherwise
         error ("hold: invalid hold STATE");
-      endif
-    endif
+    endswitch
   else
     print_usage ();
   endif
 
   if (turn_hold_off)
     set (hax, "nextplot", "replace");
   else
     set (hax, "nextplot", "add");
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -248,18 +248,18 @@ function [hlegend2, hobjects2, hplot2, t
     otherwise
       error ("legend: unrecognized legend location");
   endswitch
 
   ## Find any existing legend object on figure
   hlegend = [];
   fkids = get (fig, "children");
   for i = 1 : numel (fkids)
-    if (ishandle (fkids(i)) && strcmp (get (fkids(i), "type"), "axes")
-        && (strcmp (get (fkids(i), "tag"), "legend")))
+    if (   strcmp (get (fkids(i), "type"), "axes")
+        && strcmp (get (fkids(i), "tag"), "legend"))
       udata = get (fkids(i), "userdata");
       if (! isempty (intersect (udata.handle, ca)))
         hlegend = fkids(i);
         break;
       endif
     endif
   endfor
 
@@ -1054,17 +1054,17 @@ function hideshowlegend (h, d, ca, pos1,
       if (! strcmp (get (kids(i), "visible"), "off"))
         isvisible = true;
         break;
       endif
     endfor
   endif
 
   for i = 1 : numel (ca)
-    if (ishandle (ca(i)) && strcmp (get (ca(i), "type"), "axes")
+    if (isaxes (ca(i))
         && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"),"off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       units = get (ca(i), "units");
       unwind_protect
         set (ca(i), "units", "points");
         if (isvisible)
           set (ca(i), "position", pos2);
         else
@@ -1073,26 +1073,26 @@ function hideshowlegend (h, d, ca, pos1,
       unwind_protect_cleanup
         set (ca(i), "units", units);
       end_unwind_protect
     endif
   endfor
 endfunction
 
 function deletelegend1 (h, d, ca)
-  if (ishandle (ca) && strcmp (get (ca, "type"), "axes")
+  if (isaxes (ca)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off"))
       && strcmp (get (ca, "beingdeleted"), "off"))
     delete (ca);
   endif
 endfunction
 
 function deletelegend2 (h, d, ca, pos, outpos, t1, hplots)
   for i = 1 : numel (ca)
-    if (ishandle (ca(i)) && strcmp (get (ca(i), "type"), "axes")
+    if (isaxes (ca(i))
         && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       if (!isempty (pos) && !isempty(outpos))
         units = get (ca(i), "units");
         unwind_protect
           set (ca(i), "units", "points");
           set (ca(i), "position", pos, "deletefcn", "");
         unwind_protect_cleanup
diff --git a/scripts/plot/plotmatrix.m b/scripts/plot/plotmatrix.m
--- a/scripts/plot/plotmatrix.m
+++ b/scripts/plot/plotmatrix.m
@@ -104,18 +104,17 @@ endfunction
 %!demo
 %! clf;
 %! plotmatrix (randn (100, 3), 'g+');
 
 
 function plotmatrixdelete (h, d, ax)
   for i = 1 : numel (ax)
     hc = ax(i);
-    if (ishandle (hc) && strcmp (get (hc, "type"), "axes")
-        && strcmpi (get (hc, "beingdeleted"), "off"))
+    if (isaxes (hc) && strcmpi (get (hc, "beingdeleted"), "off"))
       parent = get (hc, "parent");
       ## If the parent is invalid or being deleted, then do nothing
       if (ishandle (parent) && strcmpi (get (parent, "beingdeleted"), "off"))
         delete (hc);
       endif
     endif
   endfor
 endfunction
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -110,17 +110,17 @@ function [Ax, H1, H2] = plotyy (varargin
   if (nargin < 4)
     print_usage ();
   endif
 
   unwind_protect
     [ax, h1, h2] = __plotyy__ (ax, varargin{:});
   unwind_protect_cleanup
     ## Only change back to the old axis if we didn't delete it
-    if (ishandle (oldh) && strcmp (get (oldh, "type"), "axes"))
+    if (isaxes (oldh))
       axes (oldh);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     Ax = ax;
     H1 = h1;
     H2 = h2;
@@ -137,32 +137,32 @@ function [ax, h1, h2] = __plotyy__ (ax, 
   if (nargin > 6)
     fun2 = varargin{2};
   else
     fun2 = fun1;
   endif
 
   xlim = [min([x1(:); x2(:)]), max([x1(:); x2(:)])];
 
-  if (ishandle (ax(1)) && strcmp (get (ax(1), "type"), "axes"))
+  if (isaxes (ax(1)))
     axes (ax(1));
   else
     ax(1) = axes ();
   endif
   newplot ();
   h1 = feval (fun1, x1, y1);
 
   set (ax(1), "ycolor", getcolor (h1(1)));
   set (ax(1), "xlim", xlim);
   set (ax(1), "color", "none");
 
   cf = gcf ();
   set (cf, "nextplot", "add");
 
-  if (ishandle (ax(2)) && strcmp (get (ax(2), "type"), "axes"))
+  if (isaxes (ax(2)))
     axes (ax(2));
   else
     ax(2) = axes ();
     set (ax(2), "nextplot", get (ax(1), "nextplot"));
   endif
   newplot ();
 
   colors = get (ax(1), "colororder");
@@ -284,17 +284,17 @@ endfunction
 %! [~, h3, h4] = plotyy (t+1, x, t+1, y);
 %! set ([h3, h4], 'linestyle', '--');
 %! xlabel (hax(1), 'xlabel');
 %! title (hax(2), 'title');
 %! ylabel (hax(1), 'Left axis is Blue');
 %! ylabel (hax(2), 'Right axis is Green');
 
 function deleteplotyy (h, d, ax2, t2)
-  if (ishandle (ax2) && strcmp (get (ax2, "type"), "axes")
+  if (isaxes (ax2)
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"),"off"))
       && strcmp (get (ax2, "beingdeleted"), "off"))
     set (t2, "deletefcn", []);
     delete (ax2);
   endif
 endfunction
 
 function update_nextplot (h, d, ax2)
diff --git a/scripts/plot/private/__errplot__.m b/scripts/plot/private/__errplot__.m
--- a/scripts/plot/private/__errplot__.m
+++ b/scripts/plot/private/__errplot__.m
@@ -193,18 +193,18 @@ function h = __errplot__ (fstr, p, varar
 
   endfor
 
   ## Process legend key
   if (! isempty (fmt.key))    
     hlegend = [];
     fkids = get (gcf (), "children");
     for i = 1 : numel (fkids)
-      if (ishandle (fkids(i)) && strcmp (get (fkids(i), "type"), "axes")
-          && (strcmp (get (fkids(i), "tag"), "legend")))
+      if (   strcmp (get (fkids(i), "type"), "axes")
+          && strcmp (get (fkids(i), "tag"), "legend"))
         udata = get (fkids(i), "userdata");
         if (! isempty (intersect (udata.handle, gca ())))
           hlegend = fkids (i);
           break;
         endif
       endif
     endfor
 
diff --git a/scripts/plot/private/__plt__.m b/scripts/plot/private/__plt__.m
--- a/scripts/plot/private/__plt__.m
+++ b/scripts/plot/private/__plt__.m
@@ -34,21 +34,21 @@ function retval = __plt__ (caller, h, va
     x_set = false;
     y_set = false;
     property_set = false;
     properties = {};
 
     hlegend = [];
     fkids = get (gcf (), "children");
     for i = 1 : numel (fkids)
-      if (ishandle (fkids (i)) && strcmp (get (fkids (i), "type"), "axes")
-          && (strcmp (get (fkids (i), "tag"), "legend")))
-        udata = get (fkids (i), "userdata");
+      if (   strcmp (get (fkids(i), "type"), "axes")
+          && strcmp (get (fkids(i), "tag"), "legend"))
+        udata = get (fkids(i), "userdata");
         if (! isempty (intersect (udata.handle, gca ())))
-          hlegend = fkids (i);
+          hlegend = fkids(i);
           break;
         endif
       endif
     endfor
 
     setlgnd = false;
     if (isempty (hlegend))
       hlgnd = [];
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -59,17 +59,17 @@ function shading (varargin)
   ## Find all patch and surface objects that are descendants of hax
   ## and  which are not part of a contour plot hggroup.
   hlist = [];
   kids = get (hax, "children");
   while (! isempty (kids))
     types = get (kids, "type");
     hlist = [hlist; kids(strcmp(types, "patch"))];
     hlist = [hlist; kids(strcmp(types, "surface"))];
-    parents = kids(strcmp(types, "axes"));
+    parents = kids(strcmp (types, "axes"));
     hglist = kids(strcmp (types, "hggroup"));
     for i = 1 : numel (hglist)
       props = get (hglist(i));
       if (! isfield (props, "levelstep"))
         parents(end+1) = hglist(i); 
       endif
     endfor
     kids = get (parents, "children");
diff --git a/scripts/plot/view.m b/scripts/plot/view.m
--- a/scripts/plot/view.m
+++ b/scripts/plot/view.m
@@ -46,17 +46,17 @@
 
 function [azimuth, elevation] = view (varargin)
 
   if (nargin < 4)
     if (nargin == 0)
       args = {get(gca (), "view")};
     else
       ax = varargin{1};
-      if (ishandle (ax) && strcmp (get (ax, "type"), "axes"))
+      if (isaxes (ax))
         args = varargin(2:end);
       else
         ax = gca;
         args = varargin;
       endif
     endif
     if (length (args) == 1)
       x = args{1};
diff --git a/scripts/plot/zlabel.m b/scripts/plot/zlabel.m
--- a/scripts/plot/zlabel.m
+++ b/scripts/plot/zlabel.m
@@ -67,17 +67,17 @@ endfunction
 %!   assert (get (z, "string"), "zlabel_string");
 %!   assert (get (z, "color"), [1 0 0]);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
 %! hf = figure ("visible", "off");
-%! plot3 (hf, 0, 0, 0);
+%! plot3 (0, 0, 0);
 %! unwind_protect
 %!   z = zlabel ("zlabel_string");
 %!   assert (get (gca, "zlabel"), z);
 %!   assert (get (z, "type"), "text");
 %!   ## FIXME: visible test is failing.  Not sure why.
 %!   #assert (get (z, "visible"), "off");
 %!   assert (get (z, "string"), "zlabel_string");
 %! unwind_protect_cleanup
