# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365136812 14400
#      Fri Apr 05 00:40:12 2013 -0400
# Node ID 919796a440c6fb28367102e8c9f8dee464fb6e66
# Parent  39847dcd25681af07af96620c87893c5ff3b0886
use signal for changing directory

* files-dockwidget.cc (files_dock_widget::files_dock_widget):
Set title to "File Browser", not "Current Directory".

* files-dockwidget.h, files-dockwidget.cc
(files_dock_widget::change_directory_up): Rename from
files_dock_widget::do_up_directory.  Change all uses.
(files_dock_widget::_last_current_directory): Delete variable and all
uses.
(files_dock_widget::accept_directory_line_edit): Rename from
handle_directory_entered.  Change all uses.
(files_dock_widget::item_double_clicked): Call set_current_directory
instead of display_directory.
(files_dock_widget::set_current_directory): Also emit
displayed_directory_changed signal.
(files_dock_widget::display_directory): Sort list.  Don't emit
displayed_directory_changed.
 private:

* file-editor-tab.cc (file_editor_tab::run_file): Delete unused local
variable current_path.

* main-window.h, main-window.cc
(main_window::current_working_directory_has_changed): Delete function
and all uses.
(main_window::browse_for_directory): Rename from
main_window::change_current_working_directory.  Change all uses.
(main_window::change_directory): Rename from
main_window::set_current_working_directory.  Change all uses.  Update
display.
(main_window::change_directory_up): Rename from
main_window::current_working_directory_up.  Change all uses.  Use
absolute path for ".." directory.
(main_window::accept_directory_line_edit): Rename from
main_window::current_working_directory_entered.  Change all uses.
(main_window::construct): Set initial working directory to current
directory at startup.

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_change_directory): New function.
(octave_qt_link::change_directory_signal): New signal.

* octave-event-listener.h
(octave_event_listener::current_directory_has_changed): Delete.

* dirfns.cc (octave_change_to_directory): Also call
octave_link::change_directory.

* octave-link.h, octave-link.cc (octave_link::last_cwd): Delete
variable and all uses.
(octave_link::do_generate_events): Don't track current directory or
post directory changed event.
(octave_link::last_working_directory,
octave_link::do_last_working_directory): Delete.
(octave_link::do_change_directory): Rename from
octave_link::do_last_working_directory.

diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -35,37 +35,36 @@ along with Octave; see the file COPYING.
 #include <QDebug>
 #include <QHeaderView>
 
 files_dock_widget::files_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("FilesDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
-  setWindowTitle (tr ("Current Directory"));
+  setWindowTitle (tr ("File Browser"));
   setWidget (new QWidget (this));
 
   // Create a toolbar
   _navigation_tool_bar = new QToolBar ("", widget ());
   _navigation_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
   _navigation_tool_bar->setMovable (false);
   _navigation_tool_bar->setIconSize (QSize (20, 20));
 
   _directory_icon = QIcon(":/actions/icons/up.png");
   _directory_up_action = new QAction (_directory_icon, "", _navigation_tool_bar);
   _directory_up_action->setStatusTip (tr ("Move up one directory."));
 
-  _last_current_directory = "";
   _current_directory = new QLineEdit (_navigation_tool_bar);
   _current_directory->setStatusTip (tr ("Enter the path or filename."));
 
   _navigation_tool_bar->addAction (_directory_up_action);
   _navigation_tool_bar->addWidget (_current_directory);
   connect (_directory_up_action, SIGNAL (triggered ()), this,
-           SLOT (do_up_directory ()));
+           SLOT (change_directory_up ()));
 
   // TODO: Add other buttons for creating directories
 
   // Create the QFileSystemModel starting in the home directory
   QString homePath = QDir::homePath ();
 
   _file_system_model = new QFileSystemModel (this);
   _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
@@ -100,17 +99,17 @@ files_dock_widget::files_dock_widget (QW
   vbox_layout->setSpacing (0);
   vbox_layout->addWidget (_navigation_tool_bar);
   vbox_layout->addWidget (_file_tree_view);
   vbox_layout->setMargin (1);
   widget ()->setLayout (vbox_layout);
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
   connect (_current_directory, SIGNAL (returnPressed ()),
-           this, SLOT (handle_directory_entered ()));
+           this, SLOT (accept_directory_line_edit ()));
 
   QCompleter *
     completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
   setFocusProxy (_current_directory);
 }
 
@@ -121,62 +120,59 @@ files_dock_widget::~files_dock_widget ()
   Qt::SortOrder sort_order = _file_tree_view->header ()->sortIndicatorOrder ();
   settings->setValue ("filesdockwidget/sort_files_by_column", sort_column);
   settings->setValue ("filesdockwidget/sort_files_by_order", sort_order);
   settings->setValue ("filesdockwidget/column_state", _file_tree_view->header ()->saveState ());
   settings->sync ();
 }
 
 void
-files_dock_widget::item_double_clicked (const QModelIndex & index)
+files_dock_widget::item_double_clicked (const QModelIndex& index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
-  display_directory (fileInfo.absoluteFilePath ());
+
+  set_current_directory (fileInfo.absoluteFilePath ());
 }
 
 void
-files_dock_widget::set_current_directory (const QString& currentDirectory)
+files_dock_widget::set_current_directory (const QString& dir)
 {
-  display_directory (currentDirectory);
+  display_directory (dir);
+
+  emit displayed_directory_changed (dir);
 }
 
 void
-files_dock_widget::handle_directory_entered ()
+files_dock_widget::accept_directory_line_edit (void)
 {
   display_directory (_current_directory->text ());
 }
 
 void
-files_dock_widget::do_up_directory ()
+files_dock_widget::change_directory_up (void)
 {
   QDir dir = QDir (_file_system_model->filePath (_file_tree_view->rootIndex ()));
   dir.cdUp ();
   display_directory (dir.absolutePath ());
 }
 
 void
-files_dock_widget::display_directory (const QString& directory)
+files_dock_widget::display_directory (const QString& dir)
 {
-  QFileInfo fileInfo (directory);
+  QFileInfo fileInfo (dir);
   if (fileInfo.exists ())
     {
       if (fileInfo.isDir ())
         {
           _file_tree_view->setRootIndex (_file_system_model->
                                          index (fileInfo.absoluteFilePath ()));
           _file_system_model->setRootPath (fileInfo.absoluteFilePath ());
+          _file_system_model->sort (0, Qt::AscendingOrder);
           _current_directory->setText (fileInfo.absoluteFilePath ());
-
-          if (_last_current_directory != fileInfo.absoluteFilePath ())
-            {
-              emit displayed_directory_changed (fileInfo.absoluteFilePath ());
-            }
-
-          _last_current_directory = fileInfo.absoluteFilePath ();
         }
       else
         {
           if (QFile::exists (fileInfo.absoluteFilePath ()))
             emit open_file (fileInfo.absoluteFilePath ());
         }
     }
 }
diff --git a/libgui/src/files-dockwidget.h b/libgui/src/files-dockwidget.h
--- a/libgui/src/files-dockwidget.h
+++ b/libgui/src/files-dockwidget.h
@@ -52,43 +52,41 @@ class files_dock_widget : public octave_
   ~files_dock_widget ();
 
 public slots:
 
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
-  void do_up_directory ();
+  void change_directory_up ();
 
   /** Sets the current directory being displayed. */
-  void set_current_directory (const QString& currentDirectory);
+  void set_current_directory (const QString& dir);
 
   /** Accepts user input a the line edit for the current directory. */
-  void handle_directory_entered ();
+  void accept_directory_line_edit ();
 
-  void display_directory (const QString& directory);
+  void display_directory (const QString& dir);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
 signals:
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
-  void displayed_directory_changed (const QString& directory);
+  void displayed_directory_changed (const QString& dir);
 
 protected:
 
 private:
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
-  QString           _last_current_directory;
-
   /** Toolbar for file and directory manipulation. */
   QToolBar *        _navigation_tool_bar;
 
   /** Variables for the up-directory action. */
   QIcon             _directory_icon;
   QAction *         _directory_up_action;
   QToolButton *     _up_directory_button;
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -343,18 +343,16 @@ file_editor_tab::run_file (const QWidget
   if (ID != this)
     return;
 
   if (_edit_area->isModified ())
     save_file (_file_name);
 
   QFileInfo file_info (_file_name);
   QString path = file_info.absolutePath ();
-  QString current_path
-    = QString::fromStdString (octave_link::last_working_directory ());
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
   emit process_octave_code (QString ("cd \'%1\'\n%2\n")
                     .arg(path).arg (function_name));
  
   // TODO: Sending a run event crashes for long scripts. Find out why.
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -265,75 +265,90 @@ main_window::prepare_for_quit ()
 
 void
 main_window::reset_windows ()
 {
   // TODO: Implement.
 }
 
 void
-main_window::current_working_directory_has_changed (const QString& directory)
-{
-  int index = _current_directory_combo_box->findText (directory);
-  if ( index >= 0 )  // directory already in list -> remove it
-    { 
-      _current_directory_combo_box->removeItem (index);
-    }
-  _current_directory_combo_box->insertItem (0,directory);  // add (on top)
-  _current_directory_combo_box->setCurrentIndex (0);  // top is actual
-  _files_dock_widget->set_current_directory (directory);
-}
-
-void
 main_window::update_workspace (void)
 {
   _workspace_view->model_changed ();
 }
 
 void
-main_window::change_current_working_directory ()
+main_window::change_directory (const QString& dir)
 {
-  QString directory =
-    QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
+  // Remove existing entry, if any, then add new directory at top and
+  // mark it as the current directory.  Finally, update the file list
+  // widget.
+
+  int index = _current_directory_combo_box->findText (dir);
+
+  if (index >= 0)
+    _current_directory_combo_box->removeItem (index);
+
+  _current_directory_combo_box->insertItem (0, dir);
+  _current_directory_combo_box->setCurrentIndex (0);
 
-  if (!directory.isEmpty ())
-    {
-      std::string dir = directory.toUtf8 ().data ();
-      octave_link::post_event (this, &main_window::change_directory_callback,dir);
-    }
+  _files_dock_widget->display_directory (dir);
+}
+
+void
+main_window::browse_for_directory (void)
+{
+  QString dir =
+    QFileDialog::getExistingDirectory (this, tr ("Set working directory"));
+
+  if (! dir.isEmpty ())
+    octave_link::post_event (this,
+                             &main_window::change_directory_callback,
+                             dir.toStdString ());
 }
 
 void
-main_window::set_current_working_directory (const QString& directory)
+main_window::set_current_working_directory (const QString& dir)
 {
-  QFileInfo fileInfo (directory);  // check whether this is an existing dir
-  if (fileInfo.exists () && fileInfo.isDir ())   // is dir and exists
-    {
-      std::string dir = directory.toUtf8 ().data ();
-      octave_link::post_event (this, &main_window::change_directory_callback,dir);
-    }
+  // Change to dir if it is an existing directory.
+
+  QString xdir = dir.isEmpty () ? "." : dir;
+    
+  QFileInfo fileInfo (xdir);
+
+  if (fileInfo.exists () && fileInfo.isDir ())
+    octave_link::post_event (this, &main_window::change_directory_callback,
+                             xdir.toStdString ());
 }
 
 void
-main_window::current_working_directory_up ()
+main_window::change_directory_up (void)
 {
-  set_current_working_directory ("..");
+  QDir dir ("..");
+
+  set_current_working_directory (dir.absolutePath ());
 }
 
-// Slot that is called if return is pressed in the line edit of the combobox
-// -> a new or a directory that is already in the drop down list was entered
+// Slot that is called if return is pressed in the line edit of the
+// combobox to change to a new directory or a directory that is already
+// in the drop down list.
+
 void
-main_window::current_working_directory_entered ()
+main_window::accept_directory_line_edit (void)
 {
-  QString dir = _current_directory_line_edit->text ();  // get new directory
-  int index = _current_directory_combo_box->findText (dir);  // already in list?
-  if ( index < 0 )  // directory not yet in list -> set directory
+  // Get new directory name, and change to it if it is new.  Otherwise,
+  // the combo box will triggers the "activated" signal to change to the
+  // directory.
+
+  QString dir = _current_directory_line_edit->text ();
+
+  int index = _current_directory_combo_box->findText (dir);
+
+  if (index < 0)
     set_current_working_directory (dir);
-  // if directory already in list, combobox triggers signal activated ()
-  // to change directory
 }
 
 void
 main_window::focus_command_window ()
 {
   if (!_terminal_dock_widget->isVisible ())
     {
       _terminal_dock_widget->setVisible (true);
@@ -1073,27 +1088,27 @@ main_window::construct ()
            terminal,                    SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
   connect (current_directory_tool_button, SIGNAL (clicked ()),
-           this,                        SLOT   (change_current_working_directory ()));
+           this,                        SLOT   (browse_for_directory ()));
   connect (current_directory_up_tool_button, SIGNAL (clicked ()),
-           this,                        SLOT   (current_working_directory_up()));
+           this,                        SLOT   (change_directory_up ()));
   connect (copy_action,                 SIGNAL (triggered()),
            terminal,                    SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
            terminal,                    SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (set_current_working_directory (QString)));
   connect (_current_directory_line_edit, SIGNAL (returnPressed ()),
-           this,                        SLOT (current_working_directory_entered ()));
+           this,                        SLOT (accept_directory_line_edit ()));
   connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
   connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
   connect (_debug_step_over,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_over ()));
   connect (_debug_step_out,             SIGNAL (triggered ()),
            this,                        SLOT (debug_step_out ()));
@@ -1124,21 +1139,16 @@ main_window::construct ()
     win_y = 720;
   setGeometry (0,0,win_x,win_y);
 
   setStatusBar (_status_bar);
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
 
   connect (_octave_qt_event_listener,
-           SIGNAL (current_directory_has_changed_signal (QString)),
-           this,
-           SLOT (current_working_directory_has_changed (QString)));
-
-  connect (_octave_qt_event_listener,
            SIGNAL (update_workspace_signal ()),
            this,
            SLOT (update_workspace ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (entered_debug_mode_signal ()),
            this,
            SLOT(handle_entered_debug_mode ()));
@@ -1147,16 +1157,19 @@ main_window::construct ()
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
 
   // FIXME -- is it possible to eliminate the event_listenter?
 
   _octave_qt_link = new octave_qt_link ();
 
+  connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+           this, SLOT (change_directory (QString)));
+
   connect (_octave_qt_link,
            SIGNAL (set_history_signal (const QStringList&)),
            _history_dock_widget, SLOT (set_history (const QStringList&)));
 
   connect (_octave_qt_link,
            SIGNAL (append_history_signal (const QString&)),
            _history_dock_widget, SLOT (append_history (const QString&)));
 
@@ -1184,16 +1197,19 @@ main_window::construct ()
            _file_editor,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   _octave_qt_link->execute_interpreter ();
 
   octave_link::connect_link (_octave_qt_link);
 
   octave_link::register_event_listener (_octave_qt_event_listener);
+
+  QDir curr_dir;
+  set_current_working_directory (curr_dir.absolutePath ());
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -80,22 +80,23 @@ public slots:
   void open_bug_tracker_page ();
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
   void notice_settings (const QSettings *settings);
   void prepare_for_quit ();
   void reset_windows ();
-  void current_working_directory_has_changed (const QString& directory);
   void update_workspace (void);
-  void change_current_working_directory ();
-  void set_current_working_directory (const QString& directory);
-  void current_working_directory_up ();
-  void current_working_directory_entered ();
+
+  void change_directory (const QString& dir);
+  void browse_for_directory (void);
+  void set_current_working_directory (const QString& dir);
+  void change_directory_up (void);
+  void accept_directory_line_edit (void);
 
   void focus_command_window ();
   void focus_command_history ();
   void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
   void handle_command_window_visible (bool);
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -39,16 +39,22 @@ octave_qt_link::octave_qt_link (void)
 
 void
 octave_qt_link::execute_interpreter (void)
 {
   main_thread->execute_interpreter ();
 }
 
 void
+octave_qt_link::do_change_directory (const std::string& dir)
+{
+  emit change_directory_signal (QString::fromStdString (dir));
+}
+
+void
 octave_qt_link::do_update_workspace (void)
 {
   if (event_listener)
     {
       event_listener->update_workspace ();
 
       do_process_events ();
     }
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -48,16 +48,18 @@ class octave_qt_link : public QObject, p
 public:
 
   octave_qt_link (void);
 
   ~octave_qt_link (void) { }
 
   void execute_interpreter (void);
 
+  void do_change_directory (const std::string& dir);
+
   void do_update_workspace (void);
 
   void do_set_history (const string_vector& hist);
   void do_append_history (const std::string& hist_entry);
   void do_clear_history (void);
 
   void do_pre_input_event (void);
   void do_post_input_event (void);
@@ -81,16 +83,18 @@ private:
 
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   // Thread running octave_main.
   octave_main_thread *main_thread;
 
 signals:
 
+  void change_directory_signal (const QString& dir);
+
   void set_history_signal (const QStringList& hist);
   void append_history_signal (const QString& hist_entry);
   void clear_history_signal (void);
 
   void update_dbstop_marker_signal (bool insert, const QString& file, int line);
 
   void edit_file_signal (const QString& file);
 
diff --git a/libinterp/interp-core/octave-event-listener.h b/libinterp/interp-core/octave-event-listener.h
--- a/libinterp/interp-core/octave-event-listener.h
+++ b/libinterp/interp-core/octave-event-listener.h
@@ -27,19 +27,16 @@ along with Octave; see the file COPYING.
 
 class octave_event_listener
 {
   public:
     octave_event_listener () { }
     virtual ~octave_event_listener () { }
 
     virtual void
-    current_directory_has_changed (const std::string& directory) = 0;
-
-    virtual void
     update_workspace (void) = 0;
 
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
diff --git a/libinterp/interpfcn/dirfns.cc b/libinterp/interpfcn/dirfns.cc
--- a/libinterp/interpfcn/dirfns.cc
+++ b/libinterp/interpfcn/dirfns.cc
@@ -46,16 +46,17 @@ along with Octave; see the file COPYING.
 #include "Cell.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "load-path.h"
+#include "octave-link.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "procstream.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
@@ -65,26 +66,30 @@ along with Octave; see the file COPYING.
 static bool Vconfirm_recursive_rmdir = true;
 
 // The time we last time we changed directories.
 octave_time Vlast_chdir_time = 0.0;
 
 static int
 octave_change_to_directory (const std::string& newdir)
 {
-  int cd_ok = octave_env::chdir (file_ops::tilde_expand (newdir));
+  std::string xdir = file_ops::tilde_expand (newdir);
+
+  int cd_ok = octave_env::chdir (xdir);
 
   if (cd_ok)
     {
       Vlast_chdir_time.stamp ();
 
-      // FIXME -- should this be handled as a list of functions
+      // FIXME -- should these actions be handled as a list of functions
       // to call so users can add their own chdir handlers?
 
       load_path::update ();
+
+      octave_link::change_directory (xdir);
     }
   else
     error ("%s: %s", newdir.c_str (), gnulib::strerror (errno));
 
   return cd_ok;
 }
 
 DEFUN (cd, args, nargout,
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -52,17 +52,17 @@ octave_exit_hook (int)
 {
   octave_link::about_to_exit ();
 }
 
 octave_link *octave_link::instance = 0;
 
 octave_link::octave_link (void)
   : event_listener (0), event_queue_mutex (new octave_mutex ()),
-    gui_event_queue (), last_cwd (), debugging (false)
+    gui_event_queue (), debugging (false)
 {
   command_editor::add_event_hook (octave_readline_hook);
 
   octave_exit = octave_exit_hook;
 }
 
 // OBJ should be an object of a class that is derived from the base
 // class octave_link, or 0 to disconnect the link.  It is the
@@ -81,26 +81,16 @@ void
 octave_link::do_register_event_listener (octave_event_listener *el)
 {
   event_listener = el;
 }
 
 void
 octave_link::do_generate_events (void)
 {
-  std::string current_working_directory = octave_env::get_current_directory ();
-
-  if (current_working_directory != last_cwd)
-    {
-      last_cwd = current_working_directory;
-
-      if (event_listener)
-        event_listener->current_directory_has_changed (last_cwd);
-    }
-
   if (debugging != Vdebugging)
     {
       debugging = Vdebugging;
 
       if (event_listener)
         {
           if (debugging)
             event_listener->entered_debug_mode ();
@@ -128,22 +118,16 @@ octave_link::do_about_to_exit (void)
   gui_event_queue.discard ();
 
   event_queue_mutex->unlock ();
 
   if (event_listener)
     event_listener->about_to_exit ();
 }
 
-std::string
-octave_link::do_last_working_directory (void)
-{
-  return last_cwd;
-}
-
 bool
 octave_link::instance_ok (void)
 {
   return instance != 0;
 }
 
 DEFUN (__octave_link_edit_file__, args, ,
   "-*- texinfo -*-\n\
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -103,20 +103,20 @@ public:
   }
 
   static void finished_readline_hook (void)
   {
     if (instance_ok ())
       instance->do_finished_readline_hook ();
   }
 
-  static std::string last_working_directory (void)
+  static void change_directory (const std::string& dir)
   {
-    return instance_ok ()
-      ? instance->do_last_working_directory () : std::string ();
+    if (instance_ok ())
+      instance->do_change_directory (dir);
   }
 
   static void update_workspace (void)
   {
     if (instance_ok ())
       instance->do_update_workspace ();
   }
 
@@ -196,19 +196,16 @@ protected:
   octave_event_listener *event_listener;
 
   // Semaphore to lock access to the event queue.
   octave_mutex *event_queue_mutex;
 
   // Event Queue.
   event_queue gui_event_queue;
 
-  // Stores the last known current working directory of octave.
-  std::string last_cwd;
-
   bool debugging;
 
   void do_register_event_listener (octave_event_listener *oel);
 
   void do_generate_events (void);
   void do_process_events (void);
 
   template <class T>
@@ -229,17 +226,17 @@ protected:
     gui_event_queue.add_method (obj, method, arg);
   }
 
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
-  std::string do_last_working_directory (void);
+  virtual void do_change_directory (const std::string& dir) = 0;
 
   virtual void do_update_workspace (void) = 0;
 
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
   virtual void do_clear_history (void) = 0;
 
   virtual void do_pre_input_event (void) = 0;
