# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1283323403 -7200
#      Wed Sep 01 08:43:23 2010 +0200
# Node ID 3cb4889dd6f7a7fd4eed61ebe3050a8d83f82801
# Parent  f6294203286e10f53a39a0a9550c795c5bcd2ea7
support specific empty value in dlmread

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Support "emptyvalue" option.
+	Fix condition for terminating read.
+
 2010-08-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Support reading from a file ID.
 
 2010-08-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (get_current_method_class): Make it an octave_class
 	method. Return class_name as default.
diff --git a/src/DLD-FUNCTIONS/dlmread.cc b/src/DLD-FUNCTIONS/dlmread.cc
--- a/src/DLD-FUNCTIONS/dlmread.cc
+++ b/src/DLD-FUNCTIONS/dlmread.cc
@@ -156,39 +156,54 @@ parse_range_spec (const octave_value& ra
 }
 
 DEFUN_DLD (dlmread, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
+@deftypefnx {Loadable Function} {@var{data} =} dlmread (@dots{}, \"emptyvalue\", @var{EMPTYVAL})\n\
 Read the matrix @var{data} from a text file.  If not defined the separator\n\
 between fields is determined from the file itself.  Otherwise the\n\
 separation character is defined by @var{sep}.\n\
 \n\
 Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
 row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
 The @var{range} parameter may be a 4 element vector containing the upper\n\
 left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
 where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
 range such as 'A2..Q15' or 'T1:AA5' can be used.  The lowest alphabetical\n\
 index 'A' refers to the first column.  The lowest row index is 1.\n\
 \n\
 @var{file} should be a file name or file id given by @code{fopen}. In the\n\
 latter case, the file is read until end of file is reached.\n\
+\n\
+The \"emptyvalue\" option may be used to specify the value used to fill empty\n\
+fields. Default is zero.\n\
 @seealso{csvread,dlmwrite,fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
+  double empty_value = 0.0;
+
+  if (nargin > 2 && args(nargin-2).is_string () 
+      && args(nargin-2).string_value () == "emptyvalue")
+    {
+      empty_value = args(nargin-1).double_value ();
+      if (error_state)
+         return retval;
+      nargin -= 2;
+    }
+
   if (nargin < 1 || nargin > 4) 
     {
       print_usage ();
       return retval;
     }
 
   std::istream *input = 0;
   std::auto_ptr<std::ifstream> input_file;
@@ -271,18 +286,16 @@ latter case, the file is read until end 
       octave_idx_type i = 0, j = 0, r = 1, c = 1, rmax = 0, cmax = 0;
 
       Matrix rdata;
       ComplexMatrix cdata;
 
       bool iscmplx = false;
       bool sepflag = false;
 
-      octave_idx_type maxrows = r1 - r0;
-
       std::string line;
 
       // Skip the r0 leading lines as these might be a header.
       for (octave_idx_type m = 0; m < r0; m++)
         getline (*input, line);
       r1 -= r0;
 
       std::istringstream tmp_stream;
@@ -419,29 +432,29 @@ latter case, the file is read until end 
 
                       if (iscmplx)
                         cdata(i,j++) = Complex (x, y);
                       else
                         rdata(i,j++) = x;
                     }
                 }
               else if (iscmplx)
-                cdata(i,j++) = 0.;
+                cdata(i,j++) = empty_value;
               else
-                rdata(i,j++) = 0.;
+                rdata(i,j++) = empty_value;
 
               if (pos2 != std::string::npos)
                 pos1 = pos2 + 1;
               else
                 pos1 = std::string::npos;
 
             }
           while (pos1 != std::string::npos);
 
-          if (nargin == 3 && i == maxrows)
+          if (i == r1)
             break;
 
           i++;
         }
  
       if (r1 >= r)
         r1 = r - 1;
       if (c1 >= c)
