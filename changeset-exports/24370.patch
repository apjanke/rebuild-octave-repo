# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512598148 28800
#      Wed Dec 06 14:09:08 2017 -0800
# Node ID b1d1229d9e832fde6874f0ec95b248743f284bb8
# Parent  77d976a84d0adf6336f16fef37e14c37908e182b
maint: Use single quotes to simplify excessive backslash escapes in code.

* md5sum.m, __publish_html_output__.m, publish.m, im2double.m, zip.m,
configure_make.m, get_description.m, installed_packages.m, annotation.m,
print.m, __gnuplot_draw_axes__.m, __gnuplot_draw_figure__.m,
__gnuplot_get_var__.m, __gnuplot_ginput__.m, __gnuplot_print__.m,
__print_parse_opts__.m, struct2hdl.m, profexport.m, html_compare_plot_demos.m:
Use single quotes to simplify excessive backslash escapes in code.

diff --git a/scripts/deprecated/md5sum.m b/scripts/deprecated/md5sum.m
--- a/scripts/deprecated/md5sum.m
+++ b/scripts/deprecated/md5sum.m
@@ -20,23 +20,23 @@
 ## @deftypefn  {} {} md5sum (@var{file})
 ## @deftypefnx {} {} md5sum (@var{str}, @var{opt})
 ##
 ## @code{md5sum} is deprecated and will be removed in Octave version 4.6.
 ## For equivalent functionality replace calls like @code{md5sum (@var{file})}
 ## with:
 ##
 ## @example
-## hash (\"md5\", fileread (@var{file}))
+## hash ("md5", fileread (@var{file}))
 ## @end example
 ##
 ## And calls like @code{md5sum (@var{str}, true)} with:
 ##
 ## @example
-## hash (\"md5\", fileread (@var{str}))
+## hash ("md5", fileread (@var{str}))
 ## @end example
 ##
 ## Calculate the MD5 sum of the file @var{file}.
 ##
 ## If the second parameter @var{opt} exists and is true, then calculate the MD5
 ## sum of the string @var{str}.
 ##
 ## @seealso{hash, fileread}
diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -104,33 +104,33 @@ function outstr = __publish_html_output_
 endfunction
 
 function outstr = do_output_file_extension ()
   outstr = ".html";
 endfunction
 
 function outstr = do_header (title_str, intro_str, toc_cstr)
   mathjax_str = sprintf ("%s\n",
-"<script type=\"text/x-mathjax-config\">",
+'<script type="text/x-mathjax-config">',
 "MathJax.Hub.Config({",
 "  tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']] },",
 "  TeX: { equationNumbers: { autoNumber: 'all' } }",
 "});",
 "</script>",
-["<script type=\"text/javascript\" async ", ...
- "src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?", ...
- "config=TeX-MML-AM_CHTML\"></script>"]);
+['<script type="text/javascript" async ', ...
+ 'src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?', ...
+ 'config=TeX-MML-AM_CHTML"></script>']);
 
   stylesheet_str = sprintf ("%s\n",
 "<style>",
 "body > * {",
 "  max-width: 42em;",
 "}",
 "body {",
-"  font-family: \"Roboto Condensed\", sans-serif;",
+'  font-family: "Roboto Condensed", sans-serif;",
 "  padding-left: 7.5em;",
 "  padding-right: 7.5em;",
 "}",
 "pre, code {",
 "  max-width: 50em;",
 "  font-family: monospace;",
 "}",
 "pre.oct-code {",
@@ -152,29 +152,29 @@ function outstr = do_header (title_str, 
 "footer {",
 "  margin-top: 2em;",
 "  font-size: 80%;",
 "}",
 "a, a:visited {",
 "  color: Blue;",
 "}",
 "h2 {",
-"  font-family: \"Roboto Condensed\", serif;",
+'  font-family: "Roboto Condensed", serif;",
 "  margin-top: 1.5em;",
 "}",
 "h2 a, h2 a:visited {",
 "  color: Black;",
 "}",
 "</style>");
 
   outstr = sprintf ("%s\n",
 "<!DOCTYPE html>",
 "<html>",
 "<head>",
-"<meta charset=\"UTF-8\">",
+'<meta charset="UTF-8">',
 ["<title>" title_str "</title>"],
 mathjax_str,
 stylesheet_str,
 "</head>",
 "<body>",
 ["<h1>" title_str "</h1>"],
 intro_str);
 
@@ -190,17 +190,17 @@ intro_str);
 
 endfunction
 
 function outstr = do_footer (m_source_str)
   outstr = sprintf ("%s\n",
 "",
 "<footer>",
 "<hr>",
-["<a href=\"http://www.octave.org\">Published with GNU Octave " version() "</a>"],
+['<a href="http://www.octave.org">Published with GNU Octave ' version() '</a>'],
 "</footer>",
 "<!--",
 "##### SOURCE BEGIN #####",
 m_source_str,
 "##### SOURCE END #####",
 "-->",
 "</body>",
 "</html>");
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -1044,19 +1044,19 @@ function cstr = eval_code_helper (contex
   ## temporary context and returns a cellstring with the eval output.
 
   if (isempty (code))
     return;
   endif
 
   load_snippet = "";
   if (exist (context, "file") == 2)
-    load_snippet = sprintf ("load (\"%s\");", context);
+    load_snippet = sprintf ('load ("%s");', context);
   endif
-  save_snippet = sprintf ("save (\"-binary\", \"%s\");", context);
+  save_snippet = sprintf ('save ("-binary", "%s");', context);
 
   eval (sprintf ("function __eval__ ()\n%s\n%s\n%s\nendfunction",
                  load_snippet, code, save_snippet));
 
   cstr = strsplit (evalc ("__eval__"), "\n");
 endfunction
 
 
diff --git a/scripts/image/im2double.m b/scripts/image/im2double.m
--- a/scripts/image/im2double.m
+++ b/scripts/image/im2double.m
@@ -62,22 +62,22 @@ function img = im2double (img, im_type)
     ## "normal" (non-indexed) images
     switch (class (img))
       case "uint8",   img = double (img) / 255;
       case "uint16",  img = double (img) / 65535;
       case "int16",   img = (double (img) + 32768) / 65535;
       case "single",  img = double (img);
       case "logical", img = double (img);
       case "double",  # do nothing
-      otherwise, error ("im2double: IMG is of unsupported class \"%s\"", class (img));
+      otherwise, error ('im2double: IMG is of unsupported class "%s"', class (img));
     endswitch
   else
     ## indexed images
     if (! strcmpi (im_type, "indexed"))
-      error ("im2double: second input argument must be the string \"indexed\"");
+      error ('im2double: second input argument must be the string "indexed"');
     elseif (any (isa (img, {"uint8", "uint16"})))
       img = double (img) + 1;
     elseif (isfloat (img) || isbool (img))
       img = double (img);
     else
       ## Technically, it could also be of logical class and we do not
       ## enforce positive integers for floating for Matlab compatibility.
       ## Still, no need to tell that to the user.
diff --git a/scripts/miscellaneous/zip.m b/scripts/miscellaneous/zip.m
--- a/scripts/miscellaneous/zip.m
+++ b/scripts/miscellaneous/zip.m
@@ -58,17 +58,17 @@ function filelist = zip (zipfile, files,
   ## FIXME: This is a lot of processing that could be done by the shell
   ##        if Octave had a way to call system without passing a single string.
   ## Escape bad shell characters
   files = regexprep (files, "([|&;<>()$`\\'\" ])", '\\$1');
   files = sprintf (' %s', files{:});   # convert to space separated list
   zipfile = regexprep (zipfile, "'", "\\'");  # escape single quotes
   cmd = sprintf ("zip -r '%s' %s", zipfile, files);
   if (ispc () && ! isunix ())
-    cmd = strrep (cmd, "\\", "/");
+    cmd = strrep (cmd, '\', '/');
   endif
 
   origdir = pwd ();
   cd (rootdir);
   [status, output] = system (cmd);
   cd (origdir);
 
   if (status)
diff --git a/scripts/pkg/private/configure_make.m b/scripts/pkg/private/configure_make.m
--- a/scripts/pkg/private/configure_make.m
+++ b/scripts/pkg/private/configure_make.m
@@ -104,17 +104,17 @@ endfunction
 ## check if sh.exe works.
 ##
 ## If VERBOSE is true, it will prints the output to STDOUT in real time and
 ## the second output argument will be an empty string.  Otherwise, it will
 ## contain the output of the execeuted command.
 function [status, output] = shell (cmd, verbose)
   persistent have_sh;
 
-  cmd = strrep (cmd, "\\", "/");
+  cmd = strrep (cmd, '\', '/');
   if (ispc () && ! isunix ())
     if (isempty (have_sh))
       if (system ('sh.exe -c "exit"'))
         have_sh = false;
       else
         have_sh = true;
       endif
     endif
diff --git a/scripts/pkg/private/get_description.m b/scripts/pkg/private/get_description.m
--- a/scripts/pkg/private/get_description.m
+++ b/scripts/pkg/private/get_description.m
@@ -51,17 +51,17 @@ function desc = get_description (filenam
         keyword = tolower (strtrim (line(1:colon-1)));
         value = strtrim (line (colon+1:end));
         if (length (value) == 0)
             fclose (fid);
             error ("The keyword '%s' of the package '%s' has an empty value",
                     keyword, desc.name);
         endif
         if (isfield (desc, keyword))
-          warning ("pkg: duplicate keyword \"%s\" in DESCRIPTION, ignoring",
+          warning ('pkg: duplicate keyword "%s" in DESCRIPTION, ignoring",
                    keyword);
         else
           desc.(keyword) = value;
         endif
       endif
     endif
     line = fgetl (fid);
   endwhile
diff --git a/scripts/pkg/private/installed_packages.m b/scripts/pkg/private/installed_packages.m
--- a/scripts/pkg/private/installed_packages.m
+++ b/scripts/pkg/private/installed_packages.m
@@ -54,17 +54,17 @@ function [out1, out2] = installed_packag
     else
       installed_names = installed_names(idx);
       installed_pkgs_lst = installed_pkgs_lst(idx);
     endif
   endif
 
   ## Now check if the package is loaded.
   ## FIXME: Couldn't dir_in_loadpath() be used here?
-  tmppath = strrep (path (), "\\", "/");
+  tmppath = strrep (path (), '\', '/');
   for i = 1:numel (installed_pkgs_lst)
     if (strfind (tmppath, strrep (installed_pkgs_lst{i}.dir, '\', '/')))
       installed_pkgs_lst{i}.loaded = true;
     else
       installed_pkgs_lst{i}.loaded = false;
     endif
   endfor
   for i = 1:numel (local_packages)
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -1003,17 +1003,17 @@ function [x, y] = arrowcoordinates (h, n
       y = [0 wd/2 0 -wd/2 0];
     case "plain"
       x = [0 -ln -ln -ln 0];
       y = [0 wd/2 0 -wd/2 0];
     case "none"
       x = [0 0 0];
       y = [0 0 0];
     otherwise
-      error ("annotation: \"%s\" headstyle not implemented", headstyle);
+      error ('annotation: "%s" headstyle not implemented', headstyle);
   endswitch
 
   R = [cos(ang) -sin(ang);
        sin(ang) cos(ang)];
   XY = R * [x; y];
   XY = pts2norm (h, XY);
   XY = pos(1:2).' .+ XY;
 
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -673,17 +673,17 @@ function cmd = epstool (opts, filein, fi
       cmd = "";
     endif
     if (! isempty (cmd))
       cmd = sprintf ("%s --quiet %s %s %s ", opts.epstool_binary,
                      cmd, filein, fileout);
     endif
     if (pipein)
       if (dos_shell)
-        filein(filein=="'") = "\"";
+        filein(filein=="'") = '"';
         gs_cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
                                   "device", epsdevice,
                                   "source", "-",
                                   "output", filein);
         cmd = sprintf ("%s %s & %s", gs_cmd, filein, cmd);
       else
         cmd = sprintf ("cat > %s ; %s", filein, cmd);
       endif
@@ -713,17 +713,17 @@ function cmd = epstool (opts, filein, fi
                                "source", "-",
                                "output", "-");
       else
         cmd = " cat ";
       endif
     elseif (pipein && ! pipeout)
       if (dos_shell)
         ## ghostscript expects double, not single, quotes
-        fileout(fileout=="'") = "\"";
+        fileout(fileout=="'") = '"';
         cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
                                "device", epsdevice,
                                "source", "-",
                                "output", fileout);
       else
         cmd = sprintf (" cat > %s ", fileout);
       endif
     elseif (! pipein && pipeout)
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -142,17 +142,17 @@ function __gnuplot_draw_axes__ (h, plot_
   if (isempty (axis_obj.title) || isempty (get (axis_obj.title, "string")))
     fputs (plot_stream, "unset title;\n");
   else
     if (nd == 2)
       t = get(axis_obj.title);
       colorspec = get_text_colorspec (t.color);
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string", t.interpreter);
       fontspec = create_fontspec (f, s, gnuplot_term);
-      fprintf (plot_stream, "set title \"%s\" %s %s %s;\n",
+      fprintf (plot_stream, ['set title "%s" %s %s %s;' "\n"],
                undo_string_escapes (tt), fontspec, colorspec,
                __do_enhanced_option__ (enhanced, t));
     else
       ## Change meaning of "normalized", but it at least gives user some control
       if (! strcmp (get (axis_obj.title, "units"), "normalized"))
         unwind_protect
           set (axis_obj.title, "units", "normalized");
           set (axis_obj.title, "position", [0.5 1.02 0.5]);
@@ -175,21 +175,21 @@ function __gnuplot_draw_axes__ (h, plot_
     colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset xlabel;\n");
       fprintf (plot_stream, "unset x2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string", t.interpreter);
       fontspec = create_fontspec (f, s, gnuplot_term);
       if (strcmp (axis_obj.xaxislocation, "top"))
-        fprintf (plot_stream, "set x2label \"%s\" %s %s %s",
+        fprintf (plot_stream, 'set x2label "%s" %s %s %s',
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       else
-        fprintf (plot_stream, "set xlabel \"%s\" %s %s %s",
+        fprintf (plot_stream, 'set xlabel "%s" %s %s %s',
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       endif
       fprintf (plot_stream, " rotate by %f;\n", angle);
       if (strcmp (axis_obj.xaxislocation, "top"))
         fprintf (plot_stream, "unset xlabel;\n");
       else
         fprintf (plot_stream, "unset x2label;\n");
@@ -203,21 +203,21 @@ function __gnuplot_draw_axes__ (h, plot_
     colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fprintf (plot_stream, "unset ylabel;\n");
       fprintf (plot_stream, "unset y2label;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string", t.interpreter);
       fontspec = create_fontspec (f, s, gnuplot_term);
       if (strcmp (axis_obj.yaxislocation, "right"))
-        fprintf (plot_stream, "set y2label \"%s\" %s %s %s",
+        fprintf (plot_stream, 'set y2label "%s" %s %s %s',
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       else
-        fprintf (plot_stream, "set ylabel \"%s\" %s %s %s",
+        fprintf (plot_stream, 'set ylabel "%s" %s %s %s',
                  undo_string_escapes (tt), colorspec, fontspec,
                  __do_enhanced_option__ (enhanced, t));
       endif
       fprintf (plot_stream, " rotate by %f;\n", angle);
       if (strcmp (axis_obj.yaxislocation, "right"))
         fprintf (plot_stream, "unset ylabel;\n");
       else
         fprintf (plot_stream, "unset y2label;\n");
@@ -229,17 +229,17 @@ function __gnuplot_draw_axes__ (h, plot_
     t = get (axis_obj.zlabel);
     angle = t.rotation;
     colorspec = get_text_colorspec (t.color);
     if (isempty (t.string))
       fputs (plot_stream, "unset zlabel;\n");
     else
       [tt, f, s] = __maybe_munge_text__ (enhanced, t, "string", t.interpreter);
       fontspec = create_fontspec (f, s, gnuplot_term);
-      fprintf (plot_stream, "set zlabel \"%s\" %s %s %s",
+      fprintf (plot_stream, 'set zlabel "%s" %s %s %s',
                undo_string_escapes (tt), colorspec, fontspec,
                __do_enhanced_option__ (enhanced, t));
       fprintf (plot_stream, " rotate by %f;\n", angle);
     endif
   endif
 
   if (strcmp (axis_obj.xaxislocation, "top"))
     xaxisloc = "x2";
@@ -599,17 +599,17 @@ function __gnuplot_draw_axes__ (h, plot_
           format = "1:2:3";
           imagetype = "rgbimage";
         else
           data{data_idx} = img_data(:);
           format = "1";
           imagetype = "image";
         endif
 
-        titlespec{data_idx} = "title \"\"";
+        titlespec{data_idx} = 'title ""';
         usingclause{data_idx} = sprintf ("binary array=%dx%d scan=yx origin=(%.15g,%.15g) dx=%.15g dy=%.15g using %s",
             x_dim, y_dim, x_origin, y_origin, dx, dy, format);
         withclause{data_idx} = sprintf ("with %s", imagetype);
 
       case "line"
         if (strcmp (get (obj.parent, "type"), "hggroup"))
           hg = get (obj.parent, "children");
           if (hg(1) == h_obj && ! isempty (get (obj.parent, "displayname")))
@@ -663,17 +663,17 @@ function __gnuplot_draw_axes__ (h, plot_
           continue;
         endif
         data_idx += 1;
         is_image_data(data_idx) = false;
         parametric(data_idx) = true;
         have_cdata(data_idx) = false;
         have_3d_patch(data_idx) = false;
         if (isempty (obj.displayname))
-          titlespec{data_idx} = "title \"\"";
+          titlespec{data_idx} = 'title ""';
         else
           tmp = undo_string_escapes (
                   __maybe_munge_text__ (enhanced, obj, "displayname", hlgndntrp)
                 );
           titlespec{data_idx} = ['title "' tmp '"'];
         endif
         usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
         if (nd == 3)
@@ -708,29 +708,29 @@ function __gnuplot_draw_axes__ (h, plot_
                                         style{1}, sidx(1));
 
         if (length (style) > 1)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-          titlespec{data_idx} = "title \"\"";
+          titlespec{data_idx} = 'title ""';
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
           withclause{data_idx} = sprintf ("with %s linestyle %d",
                                           style{2}, sidx(2));
         endif
         if (length (style) > 2)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-          titlespec{data_idx} = "title \"\"";
+          titlespec{data_idx} = 'title ""';
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
           withclause{data_idx} = sprintf ("with %s linestyle %d",
                                           style{3}, sidx(3));
         endif
 
       case "patch"
         persistent do_interp_warning = true;
@@ -786,17 +786,17 @@ function __gnuplot_draw_axes__ (h, plot_
                 local_idx = data_idx;
                 is_image_data(data_idx) = false;
                 parametric(data_idx) = false;
                 have_cdata(data_idx) = false;
                 have_3d_patch(data_idx) = false;
               endif
 
               if (i > 1 || isempty (obj.displayname))
-                titlespec{local_idx} = "title \"\"";
+                titlespec{local_idx} = 'title ""';
               else
                 tmp = undo_string_escapes (
                         __maybe_munge_text__ (enhanced, obj, "displayname", hlgndntrp)
                       );
                 titlespec{local_idx} = ['title "' tmp '"'];
               endif
               if (isfield (obj, "facecolor"))
                 if ((strcmp (obj.facecolor, "flat")
@@ -867,20 +867,20 @@ function __gnuplot_draw_axes__ (h, plot_
                 elseif (numel (ccdat) < 1)
                   ccdat = zcol;
                 endif
                 data{data_3d_idx} = [data{data_3d_idx}, ...
                                      [[xcol; xcol(end)], [ycol; ycol(end)], ...
                                      [zcol; zcol(end)], [ccdat; ccdat(end)]]'];
               else
                 if (isscalar (obj.facealpha))
-                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\" fillstyle transparent solid %f",
+                  colorspec = sprintf ('lc rgb "#%02x%02x%02x" fillstyle transparent solid %f',
                                        round (255*color), obj.facealpha);
                 else
-                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                  colorspec = sprintf ('lc rgb "#%02x%02x%02x"',
                                        round (255*color));
                 endif
 
                 withclause{data_idx} = sprintf ("with filledcurve %s",
                                               colorspec);
                 data{data_idx} = [xcol, ycol]';
                 usingclause{data_idx} = sprintf ("record=%d using ($1):($2)",
                                                  numel (xcol));
@@ -894,17 +894,17 @@ function __gnuplot_draw_axes__ (h, plot_
                      || (strcmp (obj.markeredgecolor, "none")
                          && strcmp (obj.markerfacecolor, "none")))))
 
             data_idx += 1;
             is_image_data(data_idx) = false;
             parametric(data_idx) = false;
             have_cdata(data_idx) = false;
             have_3d_patch(data_idx) = false;
-            titlespec{data_idx} = "title \"\"";
+            titlespec{data_idx} = 'title ""';
             usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
 
             if (isfield (obj, "markersize"))
               mdat = obj.markersize / 3;
             endif
 
             if (isfield (obj, "edgecolor"))
               ## FIXME: This is the wrong thing to do as edgecolor,
@@ -994,17 +994,17 @@ function __gnuplot_draw_axes__ (h, plot_
             if (ischar (color))
               if (columns (ccol) == 1)
                 colorspec = "palette";
               elseif (columns (ccol) == 3)
                 colorspec = "lc rgb variable";
                 ccol = 255*ccol*[0x1; 0x100; 0x10000];
               endif
             else
-              colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+              colorspec = sprintf ('lc rgb "#%02x%02x%02x"',
                                    uint8 (255*color));
             endif
 
             sidx = 1;
             if (isempty (lt))
               style = "";
             else
               style = "lines";
@@ -1037,17 +1037,17 @@ function __gnuplot_draw_axes__ (h, plot_
                 facesame = false;
                 if (! isempty (style))
                   tmpwith{sidx} = sprintf ("with %s %s %s %s",
                                            style, lw, lt,
                                            colorspec);
                   sidx += 1;
                 endif
                 if (isnumeric (obj.markerfacecolor))
-                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                  colorspec = sprintf ('lc rgb "#%02x%02x%02x"',
                                        round (255*obj.markerfacecolor));
                 endif
                 style = "points";
                 if (isfield (obj, "markersize"))
                   if (length (mdat) == nc)
                     m = mdat(i);
                   else
                     m = mdat;
@@ -1094,20 +1094,20 @@ function __gnuplot_draw_axes__ (h, plot_
                                              style, lw, lt,
                                              colorspec);
                   endif
                   sidx += 1;
                 endif
 
                 if (! isempty (pt))
                   if (strcmp (obj.markeredgecolor, "auto"))
-                    colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                    colorspec = sprintf ('lc rgb "#%02x%02x%02x"',
                                          round (255*color));
                   elseif (isnumeric (obj.markeredgecolor))
-                    colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
+                    colorspec = sprintf ('lc rgb "#%02x%02x%02x"',
                                          round (255*obj.markeredgecolor));
                   endif
                   style = "points";
                   if (isfield (obj, "markersize"))
                     if (length (mdat) == nc)
                       m = mdat(i);
                     else
                       m = mdat;
@@ -1172,28 +1172,28 @@ function __gnuplot_draw_axes__ (h, plot_
             endif
 
             if (length (tmpwith) > 1)
               data_idx += 1;
               is_image_data(data_idx) = is_image_data(data_idx - 1);
               parametric(data_idx) = parametric(data_idx - 1);
               have_cdata(data_idx) = have_cdata(data_idx - 1);
               have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-              titlespec{data_idx} = "title \"\"";
+              titlespec{data_idx} = 'title ""';
               usingclause{data_idx} = usingclause{data_idx - 1};
               data{data_idx} = data{data_idx - 1};
               withclause{data_idx} = tmpwith{2};
             endif
             if (length (tmpwith) > 2)
               data_idx += 1;
               is_image_data(data_idx) = is_image_data(data_idx - 1);
               parametric(data_idx) = parametric(data_idx - 1);
               have_cdata(data_idx) = have_cdata(data_idx - 1);
               have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
-              titlespec{data_idx} = "title \"\"";
+              titlespec{data_idx} = 'title ""';
               usingclause{data_idx} = usingclause{data_idx - 1};
               data{data_idx} = data{data_idx - 1};
               withclause{data_idx} = tmpwith{3};
             endif
           endif
         endfor
 
       case "surface"
@@ -1207,17 +1207,17 @@ function __gnuplot_draw_axes__ (h, plot_
           have_cdata(data_idx) = false;
           have_3d_patch(data_idx) = false;
           tmp = undo_string_escapes (
                   __maybe_munge_text__ (enhanced, obj, "displayname", hlgndntrp)
                 );
           titlespec{data_idx} = ['title "' tmp '"'];
           data{data_idx} = NaN (3,1);
           usingclause{data_idx} = sprintf ("record=1 using ($1):($2):($3)");
-          withclause{data_idx} = sprintf ("with line linewidth 10 linecolor rgb \"#%02x%02x%02x\"",
+          withclause{data_idx} = sprintf ('with line linewidth 10 linecolor rgb "#%02x%02x%02x"',
                                           round (255*cmap(end/2,:)));
         endif
 
         xdat = obj.xdata;
         ydat = obj.ydata;
         zdat = obj.zdata;
         cdat = mapcdata (obj.cdata, obj.cdatamapping, clim, cmap_sz);
         err = false;
@@ -1247,17 +1247,17 @@ function __gnuplot_draw_axes__ (h, plot_
         if (! strcmp (obj.facecolor, "none"))
           data_idx += 1;
           is_image_data(data_idx) = false;
           parametric(data_idx) = false;
           have_cdata(data_idx) = true;
           have_3d_patch(data_idx) = false;
 
           titlespec{data_idx} = tspec;
-          tspec = "title \"\"";
+          tspec = 'title ""';
 
           flat_interp_face = (strcmp (obj.facecolor, "flat")
                               || strcmp (obj.facecolor, "interp"));
 
           if (xlen == columns (xdat) && xlen == columns (ydat)
               && ylen == rows (xdat) && ylen == rows (ydat))
             len = 4 * xlen;
             zz = zeros (ylen, len);
@@ -1627,30 +1627,30 @@ function __gnuplot_draw_axes__ (h, plot_
     cmap = [cmap; cmap];
     cmap_sz = 2;
   endif
   if (length (cmap) > 0)
     fprintf (plot_stream,
              "set palette positive color model RGB maxcolors %i;\n",
              cmap_sz);
     fprintf (plot_stream,
-             "set palette file \"-\" binary record=%d using 1:2:3:4;\n",
+             ['set palette file "-" binary record=%d using 1:2:3:4;' "\n"],
              cmap_sz);
     fwrite (plot_stream, [1:cmap_sz; cmap.'], "float32");
     fwrite (plot_stream, "\n");
   endif
 
   fputs (plot_stream, "unset colorbox;\n");
 
   if (have_data)
     for i = 1:data_idx
       ## Images can be obscured by background or foreground image
       if (is_image_data (i))
         if (bg_is_set)
-          fputs (plot_stream, "if (GPVAL_TERM eq \"qt\") unset obj 1;\n");
+          fputs (plot_stream, ['if (GPVAL_TERM eq "qt") unset obj 1;' "\n"]);
           bg_is_set = false;
         endif
         if (fg_is_set)
           fputs (plot_stream, "unset obj 2; \\\n");
           fg_is_set = false;
         endif
         break;
       endif
@@ -1682,16 +1682,18 @@ function __gnuplot_draw_axes__ (h, plot_
       if (view_map && rot_x == 0 && rot_z == 0)
         fputs (plot_stream, "set view map;\n");
       else
         fprintf (plot_stream, "set view %.15g, %.15g;\n", rot_x, rot_z);
       endif
     endif
     if (have_3d_patch (1))
       fputs (plot_stream, "set pm3d depthorder\n");
+      ## FIXME: Must leave strings ending in '\', CHAR in double quotes.
+      ## Otherwise, fprintf routine tries to do escape processing and fails.
       fprintf (plot_stream, "%s \"-\" %s %s %s \\\n", plot_cmd,
                usingclause{1}, titlespec{1}, withclause{1});
     elseif (is_image_data (1))
       fprintf (plot_stream, "%s \"-\" %s %s %s \\\n", plot_cmd,
                usingclause{1}, titlespec{1}, withclause{1});
     else
       fprintf (plot_stream, "%s \"-\" binary format='%%float64' %s %s %s \\\n",
                plot_cmd, usingclause{1}, titlespec{1}, withclause{1});
@@ -1737,17 +1739,17 @@ function __gnuplot_draw_axes__ (h, plot_
   endif
 
   ## Needed to allow mouse rotation if gnuplot was put in map view.
   if (view_map && rot_x == 0 && rot_z == 0)
     fputs (plot_stream, "set view 0,0;\n");
   endif
 
   if (bg_is_set)
-    fputs (plot_stream, "if (GPVAL_TERM eq \"qt\") unset obj 1;\n");
+    fputs (plot_stream, ['if (GPVAL_TERM eq "qt") unset obj 1;' "\n"]);
     bg_is_set = false;
   endif
 
   fflush (plot_stream);
 
 endfunction
 
 function x = flip (x)
@@ -1775,19 +1777,19 @@ function spacing_spec = create_spacingsp
   spc = s / 10 * 1.25;
   spacing_spec = sprintf ("spacing %d", spc);
 
 endfunction
 
 function fontspec = create_fontspec (f, s, gp_term)
 
   if (isempty (f) || strcmp (f, "*") || strcmp (gp_term, "tikz"))
-    fontspec = sprintf ("font \",%d\"", s);
+    fontspec = sprintf ('font ",%d"', s);
   else
-    fontspec = sprintf ("font \"%s,%d\"", f, s);
+    fontspec = sprintf ('font "%s,%d"', f, s);
   endif
 
 endfunction
 
 function idx = do_border_2d (obj, plot_stream, idx)
 
   fprintf (plot_stream, "set border 0\n");
   fprintf (plot_stream, "unset arrow\n");
@@ -1844,22 +1846,22 @@ function idx = do_border_tick_3d (obj, p
 
   tick ('x', obj.xcolor, obj.tickdir, mirrorstr);
   tick ('y', obj.ycolor, obj.tickdir, mirrorstr);
   tick ('z', obj.zcolor, obj.tickdir, mirrorstr);
 
   function tick (axischar, color, tickdir, mirrorstr);
     if (isnumeric (color))
       if (length (color) == 3)
-        colorspec = sprintf ("rgb \"#%02x%02x%02x\"", round (255*color));
+        colorspec = sprintf ('rgb "#%02x%02x%02x"', round (255*color));
       else
         colorspec = sprintf ("palatte %d", round (color));
       endif
     else
-      colorspec = sprintf ("\"%s\"", color);
+      colorspec = sprintf ('"%s"', color);
     endif
     fprintf (plot_stream, "set %ctics %s %s textcolor %s\n",
              axischar, tickdir, mirrorstr, colorspec);
   endfunction
 
 endfunction
 
 function [style, ltidx] = do_linestyle_command (obj, linecolor, idx,
@@ -1875,17 +1877,17 @@ function [style, ltidx] = do_linestyle_c
   if (isnumeric (linecolor))
     color = linecolor;
     if (isfield (obj, "alpha")
         &&  __gnuplot_has_feature__ ("alphablend_linecolor"))
       alphastr = sprintf ("%02x", round (255*(1-obj.alpha)));
     else
       alphastr = "";
     endif
-    fprintf (plot_stream, " linecolor rgb \"#%s%02x%02x%02x\"",
+    fprintf (plot_stream, ' linecolor rgb "#%s%02x%02x%02x"',
              alphastr, round (255*color));
   else
     color = [0, 0, 0];
     flat_interp_edge = (strcmp (obj.edgecolor, "flat")
                         || strcmp (obj.edgecolor, "interp"));
     if (flat_interp_edge)
         fprintf (plot_stream, " palette");
     endif
@@ -1938,17 +1940,17 @@ function [style, ltidx] = do_linestyle_c
         sidx += 1;
         idx += 1;
       else
         fputs (plot_stream, ";\n");
       endif
       fprintf (plot_stream, "set style line %d default;\n", idx);
       fprintf (plot_stream, "set style line %d", idx);
       if (isnumeric (obj.markerfacecolor))
-        fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+        fprintf (plot_stream, ' linecolor rgb "#%02x%02x%02x"',
                  round (255*obj.markerfacecolor));
       else
         fprintf (plot_stream, " palette");
       endif
       if (! isempty (pt2))
         style{sidx} = "points";
         ltidx(sidx) = idx;
         fprintf (plot_stream, " pointtype %s", pt2);
@@ -1985,17 +1987,17 @@ function [style, ltidx] = do_linestyle_c
       fprintf (plot_stream, "set style line %d default;\n", idx);
       fprintf (plot_stream, "set style line %d", idx);
       if (isnumeric (obj.markeredgecolor) || strcmp (obj.markeredgecolor, "auto"))
         if (isnumeric (obj.markeredgecolor))
           edgecolor = obj.markeredgecolor;
         else
           edgecolor = obj.color;
         end
-        fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+        fprintf (plot_stream, ' linecolor rgb "#%02x%02x%02x"',
                  round (255*edgecolor));
       else
         fprintf (plot_stream, " palette");
       endif
       style{sidx} = "points";
       ltidx(sidx) = idx;
       fprintf (plot_stream, " pointtype %s", pt);
       if (isfield (obj, "markersize"))
@@ -2265,17 +2267,17 @@ function do_tics_1 (ticmode, tics, mtics
     if (sgn < 0)
       fmt = ["-" fmt];
     endif
   else
     fmt = "%g";
     num_mtics = 5;
   endif
   colorspec = get_text_colorspec (color);
-  fprintf (plot_stream, "set format %s \"%s\";\n", ax, fmt);
+  fprintf (plot_stream, ['set format %s "%s";' "\n"], ax, fmt);
   if (strcmp (ticmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\nunset m%stics;\n", ax, ax);
       return
     endif
     fprintf (plot_stream, "set %stics %s %s %s %s (", ax, tickdir,
              ticklength, axispos, mirror);
     fprintf (plot_stream, "%.15g", tics(1));
@@ -2291,17 +2293,17 @@ function do_tics_1 (ticmode, tics, mtics
     k = 1;
     ntics = numel (tics);
     labels(end+1:1) = {""};
     labels = repmat (labels(:), ceil (ntics/numel (labels)), 1);
     fprintf (plot_stream, "set %stics add %s %s %s %s (", ax,
              tickdir, ticklength, axispos, mirror);
     labels = strrep (labels, "%", "%%");
     for i = 1:ntics
-      fprintf (plot_stream, " \"%s\" %.15g", labels{k++}, tics(i));
+      fprintf (plot_stream, ' "%s" %.15g', labels{k++}, tics(i));
       if (i < ntics)
         fputs (plot_stream, ", ");
       endif
     endfor
     fprintf (plot_stream, ") %s %s;\n", colorspec, fontspec);
   endif
   if (strcmp (mtics, "on"))
     fprintf (plot_stream, "set m%stics %d;\n", ax, num_mtics);
@@ -2319,17 +2321,17 @@ function ticklabel = ticklabel_to_cell (
     ticklabel = ticklabel;
   else
     error ("__gnuplot_draw_axes__: unsupported type of ticklabel");
   endif
 
 endfunction
 
 function colorspec = get_text_colorspec (color)
-  colorspec = sprintf ("textcolor rgb \"#%02x%02x%02x\"", round (255*color));
+  colorspec = sprintf ('textcolor rgb "#%02x%02x%02x"', round (255*color));
 endfunction
 
 function [f, s, fnt, it, bld] = get_fontname_and_size (t)
 
   if (isempty (t.fontname) || strcmp (t.fontname, "*"))
     if (ispc ())
       ## FIXME: Should really test for "windows" terminal which is the
       ## only terminal to have a problem with a null font specification.
@@ -2821,17 +2823,17 @@ function do_text (stream, gpterm, enhanc
   ## FIXME: Multiline text produced the gnuplot
   ##        "warning: ft_render: skipping glyph"
   if (__calc_dimensions__ (hax) == 3)
     zstr = sprintf (",%.15e", lpos(3));
   else
     zstr = "";
   endif
   fprintf (stream,
-           "set label \"%s\" at %s %.15e,%.15e%s %s rotate by %f offset character %f,%f %s %s front %s;\n",
+           ['set label "%s" at %s %.15e,%.15e%s %s rotate by %f offset character %f,%f %s %s front %s;' "\n"],
            undo_string_escapes (label), units, lpos(1),
            lpos(2), zstr, halign, angle, dx_and_dy, fontspec,
            __do_enhanced_option__ (enhanced, obj), colorspec);
 
 endfunction
 
 function retval = mapcdata (cdata, mode, clim, cmap_sz)
   if (ndims (cdata) == 3)
diff --git a/scripts/plot/util/private/__gnuplot_draw_figure__.m b/scripts/plot/util/private/__gnuplot_draw_figure__.m
--- a/scripts/plot/util/private/__gnuplot_draw_figure__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_figure__.m
@@ -33,17 +33,17 @@ function __gnuplot_draw_figure__ (h, plo
 
     if (nkids > 0)
       fputs (plot_stream, "\nreset;\n");
       fputs (plot_stream, "set autoscale keepfix;\n");
       fputs (plot_stream, "set origin 0, 0\n");
       fputs (plot_stream, "set size 1, 1\n");
       bg = get (h, "color");
       if (isnumeric (bg))
-        fprintf (plot_stream, "if (GPVAL_TERM eq \"qt\") set obj 1 rectangle from screen 0,0 to screen 1,1 behind fc rgb \"#%02x%02x%02x\" fs solid noborder;\n", round (255 * bg));
+        fprintf (plot_stream, ['if (GPVAL_TERM eq "qt") set obj 1 rectangle from screen 0,0 to screen 1,1 behind fc rgb "#%02x%02x%02x" fs solid noborder;' "\n"], round (255 * bg));
         bg_is_set = true;
       else
         bg_is_set = false;
       endif
       fg_was_set = false;
 
       for i = nkids:-1:1
         type = get (kids(i), "type");
@@ -109,17 +109,17 @@ function __gnuplot_draw_figure__ (h, plo
                       else
                         toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(ll,"color"), "linestyle", get(ll,"linestyle"), "marker", "none", "displayname", displayname, "parent", kids(i))];
                       endif
                     elseif (! isempty (lm))
                       toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(lm,"color"), "linestyle", "none", "marker", get(lm,"marker"), "markeredgecolor", get(lm,"markeredgecolor"), "markerfacecolor", get(lm,"markerfacecolor"), "markersize", get (lm, "markersize"), "displayname", displayname, "parent", kids(i))];
                     endif
                   endfor
                   if (bg_is_set)
-                    fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
+                    fprintf (plot_stream, ['set border linecolor rgb "#%02x%02x%02x"' "\n"], round (255 * (1 - bg)));
                   endif
                   __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced,
                                     bg_is_set, false, hlgnd);
                 unwind_protect_cleanup
                   ## Return axes "units" and "position" back to
                   ## their original values.
                   set (ca, "units", orig_axes_units);
                   set (kids(i), "units", legend_axes_units,
@@ -135,28 +135,28 @@ function __gnuplot_draw_figure__ (h, plo
               ## Rely upon listener to convert axes position
               ## to "normalized" units.
               orig_axes_units = get (kids(i), "units");
               orig_axes_position = get (kids(i), "position");
               unwind_protect
                 set (kids(i), "units", "normalized");
                 fg = get (kids(i), "color");
                 if (isnumeric (fg) && strcmp (get (kids(i), "visible"), "on"))
-                  fprintf (plot_stream, "set obj 2 rectangle from graph 0,0 to graph 1,1 behind fc rgb \"#%02x%02x%02x\" fs solid noborder\n", round (255 * fg));
+                  fprintf (plot_stream, ['set obj 2 rectangle from graph 0,0 to graph 1,1 behind fc rgb "#%02x%02x%02x" fs solid noborder' "\n"], round (255 * fg));
                   fg_is_set = true;
                   fg_was_set = true;
                 elseif (fg_was_set)
                   fprintf (plot_stream, "unset obj 2\n");
                   fg_is_set = false;
                   fg_was_set = false;
                 else
                   fg_is_set = false;
                 endif
                 if (bg_is_set)
-                  fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
+                  fprintf (plot_stream, ['set border linecolor rgb "#%02x%02x%02x"' "\n"], round (255 * (1 - bg)));
                 endif
                 ## Find if this axes has an associated legend axes and pass it
                 ## to __gnuplot_draw_axes__
                 hlegend = [];
                 fkids = get (h, "children");
                 for j = 1 : numel (fkids)
                   if (ishandle (fkids (j))
                       && strcmp (get (fkids (j), "type"), "axes")
diff --git a/scripts/plot/util/private/__gnuplot_get_var__.m b/scripts/plot/util/private/__gnuplot_get_var__.m
--- a/scripts/plot/util/private/__gnuplot_get_var__.m
+++ b/scripts/plot/util/private/__gnuplot_get_var__.m
@@ -66,27 +66,27 @@ function gp_var_value = __gnuplot_get_va
   endif
 
   unwind_protect
 
     ## Notes: Variables may be undefined if user closes gnuplot by "q"
     ## or Alt-F4.  Further, this abrupt close also requires the leading
     ## "\n" on the next line.
     if (use_mkfifo)
-      fprintf (ostream, "\nset print \"%s\";\n", gpin_name);
+      fprintf (ostream, ["\n" 'set print "%s";' "\n"], gpin_name);
       fflush (ostream);
       [gpin, err] = fopen (gpin_name, "r");
       if (err)
         ## Try a second time, and then give an error.
         [gpin, err] = fopen (gpin_name, "r");
       endif
       if (err)
         error ("__gnuplot_get_var__: can not open FIFO");
       endif
-      gp_cmd = sprintf ("\nif (exists(\"%s\")) print %s; else print NaN\n",
+      gp_cmd = sprintf (["\n" 'if (exists("%s")) print %s; else print NaN' "\n"],
                         gp_var_name(1:n), gp_var_name);
       fputs (ostream, gp_cmd);
 
       ## Close output file, to force it to be flushed
       fputs (ostream, "set print;\n");
       fflush (ostream);
 
       ## Now read from fifo.
@@ -98,19 +98,19 @@ function gp_var_value = __gnuplot_get_va
           reading = false;
           str = str(1:(end-1));
         endif
       endwhile
       str = strcat (str{:});
       fclose (gpin);
     else
       ## Direct gnuplot to print to <STDOUT>
-      fprintf (ostream, "set print \"-\";\n");
+      fprintf (ostream, ['set print "-";' "\n"]);
       fflush (ostream);
-      gp_cmd = sprintf ("\nif (exists(\"%s\")) print \"OCTAVE: \", %s; else print NaN\n",
+      gp_cmd = sprintf (["\n" 'if (exists("%s")) print "OCTAVE: ", %s; else print NaN' "\n"],
                         gp_var_name(1:n), gp_var_name);
       fputs (ostream, gp_cmd);
       fflush (ostream);
       ## Direct gnuplot to print to <STDERR>
       fputs (ostream, "set print;\n");
       fflush (ostream);
 
       str = {};
diff --git a/scripts/plot/util/private/__gnuplot_ginput__.m b/scripts/plot/util/private/__gnuplot_ginput__.m
--- a/scripts/plot/util/private/__gnuplot_ginput__.m
+++ b/scripts/plot/util/private/__gnuplot_ginput__.m
@@ -75,37 +75,37 @@ function [x, y, button] = __gnuplot_ginp
     k = 0;
     while (true)
       k += 1;
 
       ## Notes: MOUSE_* can be undefined if user closes gnuplot by "q"
       ## or Alt-F4.  Further, this abrupt close also requires the leading
       ## "\n" on the next line.
       if (use_mkfifo)
-        fprintf (ostream, "set print \"%s\";\n", gpin_name);
+        fprintf (ostream, ['set print "%s";' "\n"], gpin_name);
         fflush (ostream);
         [gpin, err] = fopen (gpin_name, "r");
         if (err)
           error ("ginput: Can not open FIFO (%s)", msg);
         endif
         fputs (ostream, "pause mouse any;\n\n");
-        fputs (ostream, "\nif (exists(\"MOUSE_KEY\") && exists(\"MOUSE_X\")) print MOUSE_X, MOUSE_Y, MOUSE_KEY; else print \"0 0 -1\"\n");
+        fputs (ostream, ["\n" 'if (exists("MOUSE_KEY") && exists("MOUSE_X")) print MOUSE_X, MOUSE_Y, MOUSE_KEY; else print "0 0 -1"' "\n"]);
 
         ## Close output file, to force it to be flushed
         fputs (ostream, "set print;\n");
         fflush (ostream);
 
         ## Now read from fifo.
         [x(k), y(k), button(k), count] = fscanf (gpin, "%f %f %d", "C");
         fclose (gpin);
       else
-        fputs (ostream, "set print \"-\";\n");
+        fputs (ostream, ['set print "-";' "\n"]);
         fflush (ostream);
         fputs (ostream, "pause mouse any;\n\n");
-        fputs (ostream, "\nif (exists(\"MOUSE_KEY\") && exists(\"MOUSE_X\")) key = (MOUSE_KEY==1063 ? 1 : MOUSE_KEY); print \"OCTAVE: \", MOUSE_X, MOUSE_Y, key; else print \"0 0 -1\"\n");
+        fputs (ostream, ["\n" 'if (exists("MOUSE_KEY") && exists("MOUSE_X")) key = (MOUSE_KEY==1063 ? 1 : MOUSE_KEY); print "OCTAVE: ", MOUSE_X, MOUSE_Y, key; else print "0 0 -1"' "\n"]);
 
         ## Close output file, to force it to be flushed
         fputs (ostream, "set print;\n");
         fflush (ostream);
 
         str = {};
         while (isempty (str))
           str = fread (istream, "*char")';
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -42,17 +42,17 @@ function opts = __gnuplot_print__ (opts)
       opts.fontsize = axesfontsize;
     endif
   endif
   ## The axes-label and tick-label spacing is determined by
   ## the font spec given in "set terminal ..."
   gp_opts = font_spec (opts);
   bg = get (opts.figure, "color");
   if (isnumeric (bg))
-    gp_opts = sprintf ("%s background rgb \"#%02x%02x%02x\"",
+    gp_opts = sprintf ('%s background rgb "#%02x%02x%02x"',
                        gp_opts, round (255 * bg));
   else
     gp_opts = sprintf ("%s nobackground", gp_opts);
   endif
 
   pipeline = "";
 
   switch (lower (opts.devopt))
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -439,17 +439,17 @@ endfunction
 
 function cmd = __quote_path__ (cmd)
 
   if (! isempty (cmd))
     is_quoted = all (cmd([1, end]) == "'");
     if (! is_quoted)
       dos_shell = ! isunix () && ispc ();
       if (dos_shell && any (cmd == "/"))
-        cmd = strrep (cmd, "/", "\\");
+        cmd = strrep (cmd, '/', '\');
       endif
       if (any (cmd == " "))
         cmd = ['"' strrep(cmd, '"', '""') '"'];
       endif
     endif
   endif
 
 endfunction
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -63,22 +63,22 @@ function [h, pout] = struct2hdl (s, p=[]
     else
       error ("struct2hdl: %s object can't be parent object", get (p).type);
     endif
     hpar = p;
     p = [NaN; hpar];
     ## create appropriate parent if needed
     if (any (strcmp (s.type, othertypes)))
       for ii = (paridx+1) : (numel (partypes)-1)
-        eval (["hpar = " partypes{ii} "(\"parent\", hpar);"]);
+        eval (["hpar = " partypes{ii} '("parent", hpar);']);
         p = [p [NaN; hpar]];
       endfor
     elseif (any (strcmp (s.type, {"hggroup", "axes"})))
       for ii = (paridx+1) : (kididx-1)
-        eval (["hpar = " partypes{ii} "(\"parent\", hpar);"]);
+        eval (["hpar = " partypes{ii} '("parent", hpar);']);
         p = [p [NaN; hpar]];
       endfor
     else
       par = NaN;
     endif
   elseif (isempty (p))
     if (any (strcmp (s.type, othertypes)))
       par = axes ();
diff --git a/scripts/profiler/profexport.m b/scripts/profiler/profexport.m
--- a/scripts/profiler/profexport.m
+++ b/scripts/profiler/profexport.m
@@ -285,20 +285,20 @@ function fn = __dataFilename (name)
 endfunction
 
 function str = __readTemplate (name)
   fn = __dataFilename (name);
   str = fileread (fn);
 endfunction
 
 function str = __escapeHtml (str)
-  str = strrep (str, "&", "&amp;");
-  str = strrep (str, "<", "&lt;");
-  str = strrep (str, ">", "&gt;");
-  str = strrep (str, "\"", "&quot;");
+  str = strrep (str, '&', "&amp;");
+  str = strrep (str, '<', "&lt;");
+  str = strrep (str, '>', "&gt;");
+  str = strrep (str, '"', "&quot;");
 endfunction
 
 ################################################################################
 ## Tests and demo.
 
 %!demo
 %! profile on;
 %! A = rand (100);
diff --git a/scripts/testfun/private/html_compare_plot_demos.m b/scripts/testfun/private/html_compare_plot_demos.m
--- a/scripts/testfun/private/html_compare_plot_demos.m
+++ b/scripts/testfun/private/html_compare_plot_demos.m
@@ -96,53 +96,53 @@ function html_compare_plot_demos (toolki
     fid = fopen (in.output_fmt (page), "w");
     unwind_protect
       fprintf (fid, "%s\n", header);
       fprintf (fid, "<h2>Generated on %s by %s with GNU Octave %s</h2>\n", ...
                datestr (now (), 0), mfilename, version);
 
       ## Create page previous/next
       if (page > 1)
-        prev_page_link = sprintf ("<p><a href=\"%s\">%s</a></p>\n", ...
+        prev_page_link = sprintf (['<p><a href="%s">%s</a></p>' "\n"], ...
                                   in.output_fmt (page - 1), "previous page");
       else
         prev_page_link = "";
       endif
 
       if (! last_page)
-        next_page_link = sprintf ("<p><a href=\"%s\">%s</a></p>\n", ...
+        next_page_link = sprintf (['<p><a href="%s">%s</a></p>' "\n"], ...
                                   in.output_fmt (page + 1), "next page");
       else
         next_page_link = "";
       endif
 
       fprintf (fid, "%s%s", prev_page_link, next_page_link);
 
       ## Create table header
       fprintf (fid, "<table>\n<tr>\n");
       for t = 1:numel(toolkits)
         ## set default
         column_header = upper (toolkits{t});
         if (isfield (in, toolkits{t}))
           column_header = [column_header, in.(toolkits{t})];
         endif
-        fprintf (fid, "<th>%s <a href=\"%s/diary.log\">diary</a></th>\n", ...
+        fprintf (fid, ['<th>%s <a href="%s/diary.log">diary</a></th>' "\n"],
                  column_header, toolkits{t});
       endfor
       fprintf (fid, "</tr>\n");
       for m = start_fig:stop_fig
         [~, file] = fileparts (in.figfiles{m});
         fn = [file "." in.fmt];
-        fprintf (fid, "<tr id=\"%s\">\n", file);
+        fprintf (fid, ['<tr id="%s">' "\n"], file);
         for k = toolkits
           ffn = fullfile (k{:}, fn);
           fprintf (fid, "<td><span>%s</span><br>", ffn);
           if (exist (ffn, "file"))
             fprintf (fid, ...
-                     "<img alt=\"%s\" src=\"%s\" style=\"width:%dpx\">", ...
+                     '<img alt="%s" src="%s" style="width:%dpx">', ...
                      file, ffn, in.column_width);
           else
             err_fn = strrep (ffn, ".png", ".err");
             if (! exist (err_fn, "file"))
               warning("File %s doesn't exist...", err_fn);
             else
               err_fid = fopen (err_fn);
               msg = char (fread (err_fid))';
