# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1530279311 -7200
#      Fri Jun 29 15:35:11 2018 +0200
# Node ID 7fbc39a46be8f32ca331c24a44825300bfd78146
# Parent  8945a6a6c0eb3750ace9307ea25619e3c89ab217
Add wrapper to fopen for files with non-ASCII chars in path on Windows (bug #49118).

* lo-sysdep.[cc/h]: Add new function "octave::sys::fopen".

* gl2ps-print.cc, gzip.cc (CFile), oct-parse.in.yy (parse_fcn_file): Replace
uses of "std::fopen" with "octave::sys::fopen".

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -1111,17 +1111,17 @@ namespace octave
           error (R"(print: failed to open pipe "%s")", stream.c_str ());
 
         frame.add_fcn (safe_pclose, fp);
       }
     else
       {
         // Write gl2ps output directly to file.
 
-        fp = std::fopen (stream.c_str (), "w");
+        fp = octave::sys::fopen (stream.c_str (), "w");
 
         if (! fp)
           error (R"(gl2ps_print: failed to create file "%s")", stream.c_str ());
 
         frame.add_fcn (safe_fclose, fp);
       }
 
     gl2ps_renderer rend (fp, term);
diff --git a/libinterp/dldfcn/gzip.cc b/libinterp/dldfcn/gzip.cc
--- a/libinterp/dldfcn/gzip.cc
+++ b/libinterp/dldfcn/gzip.cc
@@ -93,17 +93,17 @@ namespace octave
 
   class CFile
   {
   public:
 
     CFile (void) = delete;
 
     CFile (const std::string& path, const std::string& mode)
-      : m_fp (std::fopen (path.c_str (), mode.c_str ()))
+      : m_fp (octave::sys::fopen (path, mode))
     {
       if (! m_fp)
         throw std::runtime_error ("unable to open file");
     }
 
     CFile (const CFile&) = delete;
 
     CFile& operator = (const CFile&) = delete;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -59,16 +59,17 @@ along with Octave; see the file COPYING.
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "lex.h"
 #include "load-path.h"
+#include "lo-sysdep.h"
 #include "oct-hist.h"
 #include "oct-map.h"
 #include "ov-classdef.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-null-mat.h"
 #include "pager.h"
 #include "parse.h"
@@ -4501,17 +4502,17 @@ namespace octave
     frame.add_fcn (command_history::ignore_entries,
                    command_history::ignoring_entries ());
 
     command_history::ignore_entries ();
 
     FILE *ffile = nullptr;
 
     if (! full_file.empty ())
-      ffile = std::fopen (full_file.c_str (), "rb");
+      ffile = octave::sys::fopen (full_file, "rb");
 
     if (ffile)
       {
         frame.add_fcn (safe_fclose, ffile);
 
         interpreter& interp = __get_interpreter__ ("parse_fcn_file");
 
         parser parser (ffile, interp);
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -135,16 +135,27 @@ namespace octave
       dirlist = dir.read ();
 
       dir.close ();
 #endif
 
       return true;
     }
 
+    std::FILE *
+    fopen (const std::string& filename, const std::string& mode)
+    {
+#if defined (OCTAVE_USE_WINDOWS_API)
+      return _wfopen (u8_to_wstring (filename).c_str (),
+                      u8_to_wstring (mode).c_str ());
+#else
+      return std::fopen (filename.c_str (), mode.c_str ());
+#endif
+    }
+
     std::wstring
     u8_to_wstring (const std::string& utf8_string)
     {
       wchar_t *wchar = nullptr;
 
       wchar = u8_to_wchar (utf8_string.c_str ());
 
       std::wstring retval = L"";
@@ -168,10 +179,11 @@ namespace octave
       if (mbchar != nullptr)
         {
           retval = std::string (mbchar);
           free (static_cast<void *> (mbchar));
         }
 
       return retval;
     }
+
   }
 }
diff --git a/liboctave/system/lo-sysdep.h b/liboctave/system/lo-sysdep.h
--- a/liboctave/system/lo-sysdep.h
+++ b/liboctave/system/lo-sysdep.h
@@ -39,15 +39,17 @@ namespace octave
   {
     extern std::string getcwd (void);
 
     extern int chdir (const std::string&);
 
     extern bool get_dirlist (const std::string& dirname, string_vector& dirlist,
                              std::string& msg);
 
+    extern std::FILE * fopen (const std::string& name, const std::string& mode);
+
     extern std::wstring u8_to_wstring (const std::string&);
 
     extern std::string u8_from_wstring (const std::wstring&);
   }
 }
 
 #endif
