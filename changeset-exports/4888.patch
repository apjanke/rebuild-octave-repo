# HG changeset patch
# User jwe
# Date 1083349627 0
#      Fri Apr 30 18:27:07 2004 +0000
# Node ID 4a796c5fc7a3fb347c978c1f5a3029729ba87c16
# Parent  bbddd4339cf23e80f12a3f40d92092001dfeaade
[project @ 2004-04-30 18:27:07 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2004-04-30  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (octave_base_stream::clear): Also clear stream state.
+	* oct-stdstrm.h (octave_stdiostream::clear): New function.
+	* c-file-ptr-stream.h (c_file_ptr_buf::clear,
+	i_c_file_ptr_stream::clear, o_c_file_ptr_stream::clear,
+	io_c_file_ptr_stream::clear): New functions.
+
 2004-04-29  David Bateman  <dbateman@free.fr>
 
 	* load-save.cc (Fload, Fsave): Accept -mat as well as -mat-binary.
 
 2004-04-27  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sort.cc: Add missing "class" keywords to template
 	instantiations.
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -221,23 +221,22 @@ the function @math{f} described above, a
 a function to compute the modified Jacobian\n\
 \n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
+@example\n\
 @ifinfo\n\
       df       df\n\
 jac = -- + c ------\n\
       dx     d xdot\n\
-@example\n\
 @end example\n\
-\n\
 @end ifinfo\n\
 \n\
 The modified Jacobian function must have the form\n\
 \n\
 @example\n\
 \n\
 @var{jac} = j (@var{x}, @var{xdot}, @var{t}, @var{c})\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -395,18 +395,18 @@ avoiding difficulties with singularities
 discontinuity in the derivative.\n\
 \n\
 After a successful computation, the value of @var{istate} will be 2\n\
 (consistent with the Fortran version of @sc{Odessa}).\n\
 \n\
 If the computation is not successful, @var{istate} will be something\n\
 other than 2 and @var{msg} will contain additional information.\n\
 \n\
-You can use the function @code{lsode_options} to set optional\n\
-parameters for @code{lsode}.\n\
+You can use the function @code{odessa_options} to set optional\n\
+parameters for @code{odessa}.\n\
 @end deftypefn\n\
 @seealso{daspk, dassl, dasrt, lsode}")
 {
   octave_value_list retval;
 
   warned_fcn_imaginary = false;
   warned_jac_imaginary = false;
   warned_b_imaginary = false;
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -77,16 +77,18 @@ public:
 
   int file_number () const { return f ? fileno (f) : -1; }
 
   int seek (long offset, int origin)
     { return f ? fseek (f, offset, origin) : -1; }
 
   long tell (void) { return f ? ftell (f) : -1; }
 
+  void clear (void) { if (f) clearerr (f); }
+
   static int fclose (FILE *f) { return ::fclose (f); }
 
 protected:
 
   FILE *f;
 
   close_fcn cf;
 
@@ -110,16 +112,18 @@ public:
 
   void close (void) { if (buf) buf->close (); }
 
   int seek (long offset, int origin)
     { return buf ? buf->seek (offset, origin) : -1; }
 
   long tell (void) { return buf ? buf->tell () : -1; }
 
+  void clear (void) { if (buf) buf->clear (); std::istream::clear (); }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
@@ -135,16 +139,18 @@ public:
 
   void close (void) { if (buf) buf->close (); }
 
   int seek (long offset, int origin)
     { return buf ? buf->seek (offset, origin) : -1; }
 
   long tell (void) { return buf ? buf->tell () : -1; }
 
+  void clear (void) { if (buf) buf->clear (); std::ostream::clear (); }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 class
 io_c_file_ptr_stream : public std::iostream
 {
@@ -160,21 +166,22 @@ public:
 
   void close (void) { if (buf) buf->close (); }
 
   int seek (long offset, int origin)
     { return buf ? buf->seek (offset, origin) : -1; }
 
   long tell (void) { return buf ? buf->tell () : -1; }
 
+  void clear (void) { if (buf) buf->clear (); std::iostream::clear (); }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
-
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -930,16 +930,25 @@ octave_base_stream::error (const std::st
 {
   fail = true;
   errmsg = who + msg;
 }
 
 void
 octave_base_stream::clear (void)
 {
+  std::istream *is = input_stream ();
+  std::ostream *os = output_stream ();
+
+  if (is)
+    is->clear ();
+
+  if (os)
+    os->clear ();
+
   fail = false;
   errmsg = "";
 }
 
 // Functions that are defined for all input streams (input streams
 // are those that define is).
 
 std::string
