# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1328004878 -3600
#      Tue Jan 31 11:14:38 2012 +0100
# Node ID eaa7da75d202d56a45505e6a630b8ab8ab171275
# Parent  17ef804ef61498683c43178dddeaca664371e192
Added QTerminalInteface class.

diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -20,13 +20,29 @@ along with Foobar.  If not, see <http://
 
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
 #ifdef __WIN32
     #include "win32/QWinTerminalImpl.h"
+    class QTerminal : public QWinTerminalImpl
+    {
+        Q_OBJECT
+    public:
+        QTerminal(QWidget *parent = 0)
+            : QWinTerminalImpl(parent) { }
+        ~QTerminal() { }
+    };
 #else
     #include "unix/QUnixTerminalImpl.h"
+    class QTerminal : public QUnixTerminalImpl
+    {
+        Q_OBJECT
+    public:
+        QTerminal(QWidget *parent = 0)
+            : QUnixTerminalImpl(parent) { }
+        ~QTerminal() { }
+    };
 #endif
 
 #endif // QTERMINAL_H
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -54,9 +54,10 @@ win32 {
 HEADERS  = win32/QTerminalColors.h \
 		   win32/QWinTerminalImpl.h
 
 SOURCES  = win32/QTerminalColors.cpp \
 		   win32/QWinTerminalImpl.cpp
 }
 
 HEADERS  += QTerminal.h \
-		   QTerminal
+		   QTerminal \
+    QTerminalInterface.h
diff --git a/libqterminal/unix/QUnixTerminalImpl.cpp b/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -19,23 +19,23 @@
 						
 #include <QDebug>
 
 #include "unix/QUnixTerminalImpl.h"
 #include "unix/kpty.h"
 
 #include <termios.h>
 
-QTerminal::QTerminal(QWidget *parent)
-    : QWidget(parent) {
+QUnixTerminalImpl::QUnixTerminalImpl(QWidget *parent)
+    : QTerminalInterface(parent) {
     setMinimumSize(600, 400);
     initialize();
 }
 
-void QTerminal::initialize()
+void QUnixTerminalImpl::initialize()
 {
     m_kpty = new KPty();
     m_kpty->open();
 
     m_sessionModel = new TerminalModel(m_kpty);
 
     m_sessionModel->setAutoClose(true);
     m_sessionModel->setCodec(QTextCodec::codecForName("UTF-8"));
@@ -55,26 +55,25 @@ void QTerminal::initialize()
     font.setPointSize(10);
     font.setStyleHint(QFont::TypeWriter);
     setTerminalFont(font);  
 
     m_sessionModel->run();
     m_sessionModel->addView(m_sessionView);
     m_sessionView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
-    connect(m_sessionModel, SIGNAL(finished()), this, SLOT(sessionFinished()));
     setFocusProxy(m_sessionView);
 
     setFocus(Qt::OtherFocusReason);
     m_sessionView->resize(this->size());
 
     connectToPty();
 }
 
-void QTerminal::connectToPty()
+void QUnixTerminalImpl::connectToPty()
 {
     int fds = m_kpty->slaveFd();
 
     dup2 (fds, STDIN_FILENO);
     dup2 (fds, STDOUT_FILENO);
     dup2 (fds, STDERR_FILENO);
 
     if(!isatty(STDIN_FILENO)) {
@@ -85,90 +84,65 @@ void QTerminal::connectToPty()
         qDebug("Error: stdout is not a tty.");
     }
 
     if(!isatty(STDERR_FILENO)) {
         qDebug("Error: stderr is not a tty.");
     }
 }
 
-QTerminal::~QTerminal()
+QUnixTerminalImpl::~QUnixTerminalImpl()
 {
     emit destroyed();
 }
 
-void QTerminal::setTerminalFont(QFont &font)
+void QUnixTerminalImpl::setTerminalFont(QFont &font)
 {
     if(!m_sessionView)
 	return;
     m_sessionView->setVTFont(font);
 }
 
-void QTerminal::setTextCodec(QTextCodec *codec)
-{
-    if(!m_sessionModel)
-	return;
-    m_sessionModel->setCodec(codec);
-}
-
-void QTerminal::setSize(int h, int v)
+void QUnixTerminalImpl::setSize(int h, int v)
 {
     if(!m_sessionView)
 	return;
     m_sessionView->setSize(h, v);
 }
 
-void QTerminal::setHistorySize(int lines)
-{
-    if(lines < 0)
-        m_sessionModel->setHistoryType(HistoryTypeFile());
-    else
-        m_sessionModel->setHistoryType(HistoryTypeBuffer(lines));
-}
-
-void QTerminal::setReadOnly(bool readonly)
-{
-    m_sessionView->setReadOnly(readonly);
-}
-
-void QTerminal::sendText(QString text)
+void QUnixTerminalImpl::sendText(QString text)
 {
     m_sessionModel->sendText(text);
 }
 
-void QTerminal::focusInEvent(QFocusEvent *focusEvent)
+void QUnixTerminalImpl::focusInEvent(QFocusEvent *focusEvent)
 {
     Q_UNUSED(focusEvent);
     m_sessionView->updateImage();
     m_sessionView->repaint();
     m_sessionView->update();
 }
 
-void QTerminal::showEvent(QShowEvent *)
+void QUnixTerminalImpl::showEvent(QShowEvent *)
 {
     m_sessionView->updateImage();
     m_sessionView->repaint();
     m_sessionView->update();
 }
 
-void QTerminal::resizeEvent(QResizeEvent*)
+void QUnixTerminalImpl::resizeEvent(QResizeEvent*)
 {
     m_sessionView->resize(this->size());
     m_sessionView->updateImage();
     m_sessionView->repaint();
     m_sessionView->update();
 }
 
-void QTerminal::sessionFinished()
-{
-    emit finished();
-}
-
-void QTerminal::copyClipboard()
+void QUnixTerminalImpl::copyClipboard()
 {
     m_sessionView->copyClipboard();
 }
 
-void QTerminal::pasteClipboard()
+void QUnixTerminalImpl::pasteClipboard()
 {
     m_sessionView->pasteClipboard();
 }
 
diff --git a/libqterminal/unix/QUnixTerminalImpl.h b/libqterminal/unix/QUnixTerminalImpl.h
--- a/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libqterminal/unix/QUnixTerminalImpl.h
@@ -13,56 +13,47 @@
 			    
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 						    
 
-#ifndef Q_TERMINAL
-#define Q_TERMINAL
+#ifndef Q_UNIXTERMINALIMPL
+#define Q_UNIXTERMINALIMPL
 
 #include <QtGui>
 #include "unix/kpty.h"
 #include "unix/TerminalModel.h"
 #include "unix/TerminalView.h"
+#include "QTerminalInterface.h"
 
-class QTerminal : public QWidget
+class QUnixTerminalImpl : public QTerminalInterface
 {
     Q_OBJECT
 public:
-    QTerminal(QWidget *parent = 0);
-    ~QTerminal();
+    QUnixTerminalImpl(QWidget *parent = 0);
+    virtual ~QUnixTerminalImpl();
     
     void setTerminalFont(QFont &font); 
-    void setArgs(QStringList &args);
-    void setTextCodec(QTextCodec *codec);
     void setSize(int h, int v);
-    void setHistorySize(int lines);
-    void setReadOnly(bool);
     void sendText(QString text);
-            
-signals:
-    void finished();
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
         
 protected:
     void focusInEvent(QFocusEvent *focusEvent);
     void showEvent(QShowEvent *);
-    virtual void resizeEvent(QResizeEvent *);
-    
-protected slots:
-    void sessionFinished();        
+    virtual void resizeEvent(QResizeEvent *);   
     
 private:
     void initialize();
     void connectToPty();
 
     TerminalView *m_sessionView;
     TerminalModel *m_sessionModel;
     KPty *m_kpty;
 };
 
-#endif // Q_TERMINAL
+#endif // Q_UNIXTERMINALIMPL
diff --git a/libqterminal/win32/QWinTerminalImpl.cpp b/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libqterminal/win32/QWinTerminalImpl.cpp
@@ -48,50 +48,50 @@ along with Foobar.  If not, see <http://
 // Uncomment to create hidden console window
 #define HIDDEN_CONSOLE
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsoleView : public QWidget
 {
 public:
-  QConsoleView (QTerminal* parent = 0) : QWidget (parent), q (parent) { }
+  QConsoleView (QWinTerminalImpl* parent = 0) : QWidget (parent), q (parent) { }
   ~QConsoleView (void) { }
 
 protected:
   void paintEvent (QPaintEvent* event) { q->viewPaintEvent (this, event); }
   void resizeEvent (QResizeEvent* event) { q->viewResizeEvent (this, event); }
 
 private:
-  QTerminal* q;
+  QWinTerminalImpl* q;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsoleThread : public QThread
 {
 public:
-  QConsoleThread (QTerminal* console) : QThread (console), q (console) { }
+  QConsoleThread (QWinTerminalImpl* console) : QThread (console), q (console) { }
 
 protected:
   void run (void)
     { q->start (); }
 
 private:
-  QTerminal* q;
+  QWinTerminalImpl* q;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsolePrivate
 {
-  friend class QTerminal;
+  friend class QWinTerminalImpl;
 
 public:
-  QConsolePrivate (QTerminal* parent, const QString& cmd = QString ());
+  QConsolePrivate (QUnixTerminalImpl* parent, const QString& cmd = QString ());
   ~QConsolePrivate (void);
 
   void updateConsoleSize (bool sync = false);
   void syncConsoleParameters (void);
   void grabConsoleBuffer (CHAR_INFO* buf = 0);
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
@@ -101,17 +101,17 @@ public:
 
   void log (const char* fmt, ...);
 
   void closeStandardIO (int fd, DWORD stdHandleId, const char* name);
   void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
                         const char* devName);
 
 private:
-  QTerminal* q;
+  QWinTerminalImpl* q;
 
 private:
   QFont m_font;
   QColor m_backgroundColor;
   QString m_command;
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
@@ -130,17 +130,17 @@ private:
   QConsoleView* m_consoleView;
   QScrollBar* m_scrollBar;
   QTimer* m_consoleWatcher;
   QConsoleThread *m_consoleThread;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsolePrivate::QConsolePrivate (QTerminal* parent, const QString& cmd)
+QConsolePrivate::QConsolePrivate (QUnixTerminalImpl* parent, const QString& cmd)
     : q (parent), m_command (cmd), m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
   FreeConsole ();
   log ("Closing standard IO...\n");
@@ -681,46 +681,46 @@ void QConsolePrivate::sendConsoleText (c
           nEvents = 0;
           ZeroMemory (events, sizeof (events));
         }
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QTerminal::QTerminal (QWidget* parent)
+QUnixTerminalImpl::QUnixTerminalImpl (QWidget* parent)
     : d (new QConsolePrivate (this))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QTerminal::QTerminal (const QString& cmd, QWidget* parent)
+QUnixTerminalImpl::QUnixTerminalImpl (const QString& cmd, QWidget* parent)
     : d (new QConsolePrivate (this, cmd))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QTerminal::~QTerminal (void)
+QUnixTerminalImpl::~QUnixTerminalImpl (void)
 {
   delete d;
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::viewResizeEvent (QConsoleView*, QResizeEvent*)
+void QUnixTerminalImpl::viewResizeEvent (QConsoleView*, QResizeEvent*)
 {
   d->updateConsoleSize (true);
   d->grabConsoleBuffer ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::viewPaintEvent (QConsoleView* w, QPaintEvent* event)
+void QUnixTerminalImpl::viewPaintEvent (QConsoleView* w, QPaintEvent* event)
 {
   QPainter p (w);
   int cw = d->m_charSize.width (), ch = d->m_charSize.height ();
   int ascent, stride, cx1, cy1, cx2, cy2, x, y;
   WORD attr = 0;
   QString s;
   bool hasChar = false;
 
@@ -800,30 +800,30 @@ void QTerminal::viewPaintEvent (QConsole
   p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
   p.fillRect ((d->m_cursorPos.x () - d->m_consoleRect.x ()) * cw,
               (d->m_cursorPos.y () - d->m_consoleRect.y ()) * ch,
               cw, ch, d->m_colors[7]);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::wheelEvent (QWheelEvent* event)
+void QUnixTerminalImpl::wheelEvent (QWheelEvent* event)
 {
   if (! d->m_inWheelEvent)
     {
       // Forward to the scrollbar (avoid recursion)
       d->m_inWheelEvent = true;
       QApplication::sendEvent (d->m_scrollBar, event);
       d->m_inWheelEvent = false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-bool QTerminal::winEvent (MSG* msg, long* result)
+bool QUnixTerminalImpl::winEvent (MSG* msg, long* result)
 {
   switch (msg->message)
     {
     case WM_KEYDOWN:
     case WM_KEYUP:
     //case WM_CHAR:
       // Forward Win32 message to the console window
       PostMessage (d->m_consoleWindow,
@@ -834,41 +834,41 @@ bool QTerminal::winEvent (MSG* msg, long
       return true;
     default:
       return false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::scrollValueChanged (int value)
+void QUnixTerminalImpl::scrollValueChanged (int value)
 {
   d->setScrollValue (value);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::monitorConsole (void)
+void QUnixTerminalImpl::monitorConsole (void)
 {
   d->monitorConsole ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::focusInEvent (QFocusEvent* event)
+void QUnixTerminalImpl::focusInEvent (QFocusEvent* event)
 {
   QWidget::focusInEvent (event);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::start (void)
+void QUnixTerminalImpl::start (void)
 {
   d->startCommand ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QTerminal::sendText (const QString& s)
+void QUnixTerminalImpl::sendText (const QString& s)
 {
   d->sendConsoleText (s);
 }
 
diff --git a/libqterminal/win32/QWinTerminalImpl.h b/libqterminal/win32/QWinTerminalImpl.h
--- a/libqterminal/win32/QWinTerminalImpl.h
+++ b/libqterminal/win32/QWinTerminalImpl.h
@@ -18,40 +18,40 @@ You should have received a copy of the G
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef __QConsole_h__
 #define __QConsole_h__ 1
 
 #include <QWidget>
-
+#include "QTerminalInterface.h"
 class QFocusEvent;
 class QKeyEvent;
 class QPaintEvent;
 class QResizeEvent;
 class QWheelEvent;
 
 class QConsolePrivate;
 class QConsoleThread;
 class QConsoleView;
 
 //////////////////////////////////////////////////////////////////////////////
 
-class QTerminal : public QWidget
+class QWinTerminalImpl : public QTerminalInterface
 {
   Q_OBJECT
   friend class QConsolePrivate;
   friend class QConsoleThread;
   friend class QConsoleView;
 
 public:
-  QTerminal (QWidget* parent = 0);
-  QTerminal (const QString& cmd, QWidget* parent = 0);
-  ~QTerminal (void);
+  QWinTerminalImpl (QWidget* parent = 0);
+  QWinTerminalImpl (const QString& cmd, QWidget* parent = 0);
+  ~QWinTerminalImpl (void);
 
   void sendText (const QString& s);
 
 signals:
   void terminated (void);
   void titleChanged (const QString&);
 
 protected:
diff --git a/qterminal/main.cpp b/qterminal/main.cpp
--- a/qterminal/main.cpp
+++ b/qterminal/main.cpp
@@ -27,15 +27,14 @@ int main(int argc, char *argv[])
 {
     QApplication app(argc, argv);
     QMainWindow *mainWindow = new QMainWindow();
 
     QTerminal *terminal = new QTerminal();
 
     mainWindow->setCentralWidget(terminal);
     mainWindow->resize(600, 400);
-    QObject::connect(terminal, SIGNAL(finished()), mainWindow, SLOT(close()));
 
     mainWindow->show();    
     return app.exec();
 } 
 
   
