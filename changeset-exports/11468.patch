# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1294604683 -3600
#      Sun Jan 09 21:24:43 2011 +0100
# Node ID e1edf0ba3bcbe6482d1031742893ee9405cb7e94
# Parent  7aab48b6e903f6b4e842f0acfb556ae63955584e
Yet another single precision matlab file fix

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2011-01-09  David Bateman  <dbateman@free.fr>
+
+	* ls-mat5.cc (save_mat5_array_length (const float*, octave_idx_type,
+        bool)): Take in to account the short tags for single data elements.
+	(int save_mat5_element_length (const octave_value&, const std::string&,
+	bool, bool)): Declare sparse matrices const to avoid a copy on read.
+	* ls-utils.cc (save_type get_save_type (float, float)): New function.
+	* ls-utils.h  (save_type get_save_type (float, float)): Declare it.
+
 2011-01-09  John W. Eaton  <jwe@octave.org>
 
 	* token.h, token.cc (token::plot_tok_typ): Delete unused enum.
 	(token::token_type): Delete pttype_token from the list.
 	(token::token (plot_tok_type, int, int)): Delete unused constructor.
 	(token::pttype): Delete unused function.
 	(token::anonymous union): Delete PT element.
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1997,18 +1997,19 @@ save_mat5_array_length (const float* /* 
       //     else if (max_val < 128 && min_val >= -128)
       //       size = 1;
       //     else if (max_val < 32768 && min_val >= -32768)
       //       size = 2;
       //     else if (max_val <= 2147483647L && min_val >= -2147483647L)
       //       size = 4;
       //   }
 
-      // Round nel up to nearest even number of elements
-      return 8 + ((nel + 1) & ~0x1LL) * size;
+      // Round nel up to nearest even number of elements. Take into account
+      // Short tags for 4 byte elements.
+      return PAD ((nel > 0 && nel * size <= 4 ? 4 : 8) + nel * size);
     }
   else
     return 8;
 }
 
 int
 save_mat5_array_length (const Complex* val, octave_idx_type nel,
                         bool save_as_floats)
@@ -2071,29 +2072,29 @@ save_mat5_element_length (const octave_v
       ret += 8;
       if (chm.numel () > 2)
         ret += PAD (2 * chm.numel ());
     }
   else if (tc.is_sparse_type ())
     {
       if (tc.is_complex_type ())
         {
-          SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
+          const SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
           octave_idx_type nc = m.cols ();
           octave_idx_type nnz = m.nzmax (); // Yes its nzmax
 
           ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
           if (nnz > 1)
             ret += PAD (nnz * sizeof (int32_t));
           if (nc > 0)
             ret += PAD ((nc + 1) * sizeof (int32_t));
         }
       else
         {
-          SparseMatrix m = tc.sparse_matrix_value ();
+          const SparseMatrix m = tc.sparse_matrix_value ();
           octave_idx_type nc = m.cols ();
           octave_idx_type nnz = m.nzmax ();
 
           ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
           if (nnz > 1)
             ret += PAD (nnz * sizeof (int32_t));
           if (nc > 0)
             ret += PAD ((nc + 1) * sizeof (int32_t));
@@ -2125,23 +2126,23 @@ save_mat5_element_length (const octave_v
   else if (cname == "uint64")
     INT_LEN (tc.uint64_array_value ().numel (), 8)
   else if (tc.is_bool_type ())
     INT_LEN (tc.bool_array_value ().numel (), 1)
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ())
     {
       if (tc.is_single_type ())
         {
-          FloatNDArray m = tc.float_array_value ();
+          const FloatNDArray m = tc.float_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
       else
         {
-          NDArray m = tc.array_value ();
+          const NDArray m = tc.array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
     }
   else if (tc.is_cell ())
     {
       Cell cell = tc.cell_value ();
       octave_idx_type nel = cell.numel ();
@@ -2149,23 +2150,23 @@ save_mat5_element_length (const octave_v
       for (int i = 0; i < nel; i++)
         ret += 8 + 
           save_mat5_element_length (cell (i), "", save_as_floats, mat7_format);
     }
   else if (tc.is_complex_scalar () || tc.is_complex_matrix ()) 
     {
       if (tc.is_single_type ())
         {
-          FloatComplexNDArray m = tc.float_complex_array_value ();
+          const FloatComplexNDArray m = tc.float_complex_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
       else
         {      
-          ComplexNDArray m = tc.complex_array_value ();
+          const ComplexNDArray m = tc.complex_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
     }
   else if (tc.is_map () || tc.is_inline_function () || tc.is_object ()) 
     {
       int fieldcnt = 0;
       const Octave_map m = tc.map_value ();
diff --git a/src/ls-utils.cc b/src/ls-utils.cc
--- a/src/ls-utils.cc
+++ b/src/ls-utils.cc
@@ -53,8 +53,36 @@ get_save_type (double /* max_val */, dou
   //    st = LS_CHAR;
   //  else if (max_val < 32768 && min_val >= -32768)
   //    st = LS_SHORT;
   //  else if (max_val <= 2147483647L && min_val >= -2147483647L)
   //    st = LS_INT;
 
   return st;
 }
+
+save_type
+get_save_type (float /* max_val */, float /* min_val */)
+{
+  save_type st = LS_FLOAT;
+
+  // Matlab doesn't seem to load the UINT32 type correctly, so let's
+  // avoid it (and the other unsigned types, even though they may not
+  // have the same problem.  And apparently, there are problems with
+  // other smaller types as well.  If we avoid them all, then maybe we
+  // will avoid problems.  Unfortunately, we won't be able to save
+  // space...
+
+  //  if (max_val < 256 && min_val > -1)
+  //    st = LS_U_CHAR;
+  //  else if (max_val < 65536 && min_val > -1)
+  //    st = LS_U_SHORT;
+  //  else if (max_val < 4294967295UL && min_val > -1)
+  //    st = LS_U_INT;
+  //  else if (max_val < 128 && min_val >= -128)
+  //    st = LS_CHAR;
+  //  else if (max_val < 32768 && min_val >= -32768)
+  //    st = LS_SHORT;
+  //  else if (max_val <= 2147483647L && min_val >= -2147483647L)
+  //    st = LS_INT;
+
+  return st;
+}
diff --git a/src/ls-utils.h b/src/ls-utils.h
--- a/src/ls-utils.h
+++ b/src/ls-utils.h
@@ -21,9 +21,12 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_ls_utils_h)
 #define octave_ls_utils 1
 
 extern save_type
 get_save_type (double max_val, double min_val);
 
+extern save_type
+get_save_type (float max_val, float min_val);
+
 #endif
