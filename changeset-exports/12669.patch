# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1305434889 18000
#      Sat May 14 23:48:09 2011 -0500
# Branch stable
# Node ID 2c96207d0e064102bf400b38aba6d394f246c2de
# Parent  e3dc23f7dd54d21d444635286cc9b90153163059
caseless-str.h: Fix implementation of op<

diff --git a/liboctave/caseless-str.h b/liboctave/caseless-str.h
--- a/liboctave/caseless-str.h
+++ b/liboctave/caseless-str.h
@@ -43,32 +43,33 @@ public:
     std::string::operator = (pname);
     return *this;
   }
 
   operator std::string (void) const { return *this; }
 
   bool operator < (const std::string& s) const
   {
-    bool same = true;
     const_iterator p1 = begin ();
     const_iterator p2 = s.begin ();
 
     while (p1 != end () && p2 != s.end ())
       {
-        if (std::tolower (*p2) < std::tolower (*p1))
+        char lp1 = std::tolower (*p1), lp2 = std::tolower (*p2);
+
+        if ( lp1 > lp2 )
           return false;
-        if (same && (std::tolower (*p2) != std::tolower (*p1)))
-	  same = false;
+        if ( lp1 < lp2)
+          return true;
 
-        *p1++;
-        *p2++;
+        p1++;
+        p2++;
       }
 
-    if (same && (length() >= s.length ()))
+    if ( length () >= s.length ())
       return false;
     else
       return true;
   }
 
   // Case-insensitive comparison.
   bool compare (const std::string& s, size_t limit = std::string::npos) const
   {
@@ -77,17 +78,17 @@ public:
 
     size_t k = 0;
 
     while (p1 != end () && p2 != s.end () && k++ < limit)
       {
         if (std::tolower (*p1) != std::tolower (*p2))
           return false;
 
-        *p1++;
-        *p2++;
+        p1++;
+        p2++;
       }
 
     return (limit == std::string::npos) ? size () == s.size () : k == limit;
   }
 };
 
 #endif
