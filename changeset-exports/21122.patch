# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453353287 28800
#      Wed Jan 20 21:14:47 2016 -0800
# Node ID dba88797f69fd0ee5103161213f78671292a6d71
# Parent  f5b17eb2508bb73d7ac004b8d58a1340bf1ea082
doc: Periodic grammarcheck of documentation.

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -107,17 +107,21 @@ Octave provides the following trigonomet
 specified in radians.  To convert from degrees to radians multiply by
 @tex
 $\pi/180$
 @end tex
 @ifnottex
 @code{pi/180}
 @end ifnottex
 or use the @code{deg2rad} function.  For example, @code{sin (30 * pi/180)}
-returns the sine of 30 degrees.  As an alternative, Octave provides a number of trigonometric functions which work directly on an argument specified in degrees.  These functions are named after the base trigonometric function with a @samp{d} suffix.  As an example, @code{sin} expects an angle in radians while @code{sind} expects an angle in degrees.
+returns the sine of 30 degrees.  As an alternative, Octave provides a number of
+trigonometric functions which work directly on an argument specified in
+degrees.  These functions are named after the base trigonometric function with
+a @samp{d} suffix.  As an example, @code{sin} expects an angle in radians while
+@code{sind} expects an angle in degrees.
 
 Octave uses the C library trigonometric functions.  It is expected that these
 functions are defined by the ISO/IEC 9899 Standard.  This Standard is available
 at: @url{http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf}.
 Section F.9.1 deals with the trigonometric functions.  The behavior of most of
 the functions is relatively straightforward.  However, there are some
 exceptions to the standard behavior.  Many of the exceptions involve the
 behavior for -0.  The most complex case is atan2.  Octave exactly implements
diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -138,20 +138,21 @@ Currently implemented solvers are:
   @item @nospell{Runge-Kutta} methods
 
   @itemize
     @item @code{ode45} Integrates a system of non--stiff ordinary differential equations
     (non--stiff ODEs and DAEs) using second order @nospell{Dormand-Prince}
     method.  This is a fourth--order accurate integrator therefore the local
     error normally expected is @math{O(h^5)}.  This solver requires six
     function evaluations per integration step.
+
     @item @code{ode23} Integrates a system of non--stiff ordinary differential equations
     (non-stiff ODEs and DAEs) using second order @nospell{Bogacki-Shampine}
-    method. This is a second-order accurate integrator therefore the local
-    error normally expected is @math{O(h^3)}. This solver requires three
+    method.  This is a second-order accurate integrator therefore the local
+    error normally expected is @math{O(h^3)}.  This solver requires three
     function evaluations per integration step.
   @end itemize
 @end itemize
 
 
 @DOCSTRING(ode45)
 
 @DOCSTRING(ode23)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -944,17 +944,17 @@ the OpenGL based toolkits such as @code{
 @qcode{"interpreter"} property of text objects.  This means that when using
 OpenGL toolkits special symbols drawn with the @qcode{"tex"} interpreter will
 appear correctly on-screen but will be rendered with interpreter @qcode{"none"}
 when printing unless one of the @qcode{standalone} (see below) modes is used.
 These modes provide access to the pdflatex processor and therefore allow full
 use of @LaTeX{} commands.
 
 A complete example showing the capabilities of text printing using the
-@code{-dpdflatexstandalone} option is:
+@option{-dpdflatexstandalone} option is:
 
 @example
 @group
 x = 0:0.01:3;
 hf = figure ();
 plot (x, erf (x));
 hold on;
 plot (x, x, "r");
@@ -973,17 +973,17 @@ open ("plot15_7.pdf");
 @end example
 
 @ifnotinfo
 @noindent
 The result of this example can be seen in @ref{fig:extendedtext}
 
 @float Figure,fig:extendedtext
 @center @image{extended,4in}
-@caption{Example of inclusion of text with use of @code{-dpdflatexstandalone}}
+@caption{Example of inclusion of text with use of @option{-dpdflatexstandalone}}
 @end float
 @end ifnotinfo
 
 @DOCSTRING(print)
 
 @DOCSTRING(saveas)
 
 @DOCSTRING(orient)
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -591,17 +591,17 @@ for i = c
   i
 endfor
 @end group
 @end example
 
 @noindent
 In the above case, the multi-dimensional matrix @var{c} is reshaped to a
 two-dimensional matrix as @code{reshape (c, rows (c), prod (size (c)(2:end)))}
-and then the same behavior as a loop over a two dimensional matrix is produced.
+and then the same behavior as a loop over a two-dimensional matrix is produced.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
 easier to think of this counting as part of looping rather than as
 something to do inside the loop.
 
diff --git a/libinterp/corefcn/hash.cc b/libinterp/corefcn/hash.cc
--- a/libinterp/corefcn/hash.cc
+++ b/libinterp/corefcn/hash.cc
@@ -47,17 +47,17 @@ for now.
 #include "md4.h"
 #include "md5.h"
 #include "sha1.h"
 #include "sha256.h"
 #include "sha512.h"
 
 DEFUN (hash, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {} {} hash (@var{hfun},@var{str})\n\
+@deftypefn {} {} hash (@var{hfun}, @var{str})\n\
 Calculate the hash value of the string @var{str} using the hash function\n\
 @var{hfun}.\n\
 \n\
 The available hash functions are given in the table below.\n\
 \n\
 @table @samp\n\
 @item MD2\n\
 Message-Digest Algorithm 2 (RFC 1319).\n\
@@ -79,17 +79,17 @@ Secure Hash Algorithm 2 (256 Bits, RFC 6
 \n\
 @item SHA384\n\
 Secure Hash Algorithm 2 (384 Bits, RFC 6234)\n\
 \n\
 @item SHA512\n\
 Secure Hash Algorithm 2 (512 Bits, RFC 6234)\n\
 @end table\n\
 \n\
-To calculate for example the MD5 hash value of the string @code{\"abc\"}\n\
+To calculate for example the MD5 hash value of the string @qcode{\"abc\"}\n\
 the @code{hash} function is called as follows:\n\
 \n\
 @example\n\
 @group\n\
 hash (\"md5\", \"abc\")\n\
      @print{} ans = 900150983cd24fb0d6963f7d28e17f72\n\
 @end group\n\
 @end example\n\
@@ -98,17 +98,17 @@ For the same string, the SHA-1 hash valu
 \n\
 @example\n\
 @group\n\
 hash (\"sha1\", \"abc\")\n\
      @print{} ans = a9993e364706816aba3e25717850c26c9cd0d89d\n\
 @end group\n\
 @end example\n\
 \n\
-And to compute the hash value of a file, e.g. @code{file = \"file.txt\"},\n\
+And to compute the hash value of a file, e.g., @code{file = \"file.txt\"},\n\
 call @code{hash} in combination with the @code{fileread}:\n\
 \n\
 @example\n\
 @group\n\
 hash (\"md5\", fileread (file));\n\
 @end group\n\
 @end example\n\
 \n\
diff --git a/scripts/deprecated/md5sum.m b/scripts/deprecated/md5sum.m
--- a/scripts/deprecated/md5sum.m
+++ b/scripts/deprecated/md5sum.m
@@ -34,17 +34,17 @@
 ## hash (\"md5\", fileread (@var{str}))
 ## @end example
 ##
 ## Calculate the MD5 sum of the file @var{file}.
 ##
 ## If the second parameter @var{opt} exists and is true, then calculate the MD5
 ## sum of the string @var{str}.
 ##
-## @seealso{hash,fileread}
+## @seealso{hash, fileread}
 ## @end deftypefn
 
 function r = md5sum (str, opt)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
diff --git a/scripts/general/display.m b/scripts/general/display.m
--- a/scripts/general/display.m
+++ b/scripts/general/display.m
@@ -17,29 +17,31 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} display (@var{obj})
 ## Display the contents of the object @var{obj}.
 ##
 ## The Octave interpreter calls the @code{display} function whenever it needs
 ## to present a class on-screen.  Typically, this would be a statement which
-## does not end in a semicolon to suppress output.  For example,
+## does not end in a semicolon to suppress output.  For example:
 ##
 ## @example
 ## myobj = myclass (@dots{})
 ## @end example
 ##
 ## User-defined classes should overload the @code{display} method so that
 ## something useful is printed for a class object.  Otherwise, Octave will
 ## report only that the object is an instance of its class.
 ##
 ## @example
+## @group
 ## myobj = myclass (@dots{})
 ##   @result{} myobj = <class myclass>
+## @end group
 ## @end example
 ##
 ## @seealso{class, subsref, subsasgn}
 ## @end deftypefn
 
 function display (obj)
 
   if (nargin != 1)
diff --git a/scripts/image/im2double.m b/scripts/image/im2double.m
--- a/scripts/image/im2double.m
+++ b/scripts/image/im2double.m
@@ -38,17 +38,17 @@
 ##
 ## @item double
 ## Returns the same image.
 ##
 ## @end table
 ##
 ## If @var{img} is an indexed image, then the second argument should be
 ## the string @qcode{"indexed"}.  If so, then @var{img} must either be
-## of floating point class, or unsigned integer class  and it will simply
+## of floating point class, or unsigned integer class and it will simply
 ## be cast to double.  If it is an integer class, a +1 offset is applied.
 ##
 ## @seealso{double}
 ## @end deftypefn
 
 ## Author: Søren Hauberg <soren@hauberg.org>
 ## Author: Carnë Draug <carandraug@octave.org>
 
diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -16,38 +16,56 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Author: Thomas Treichl <treichl@users.sourceforge.net>
 
 ## -*- texinfo -*-
 ## @deftypefn {} {[@var{ret}] =} odeplot (@var{t}, @var{y}, @var{flag})
 ##
-## Open a new figure window and plot the results from the variable @var{y} of type column vector over time while solving. The types and the values of the input parameter @var{t} and the output parameter @var{ret} depend on the input value @var{flag} that is of type string. If @var{flag} is
+## Open a new figure window and plot the results from the variable @var{y} of
+## type column vector over time while solving.  The types and the values of
+## the input parameter @var{t} and the output parameter @var{ret} depend on
+## the input value @var{flag} that is of type string.  If @var{flag} is
+##
 ## @table @option
-## @item  @code{"init"}
-## then @var{t} must be a double column vector of length 2 with the first and the last time step and nothing is returned from this function,
-## @item  @code{""}
-## then @var{t} must be a double scalar specifying the actual time step and the return value is false (resp. value 0) for 'not stop solving',
-## @item  @code{"done"}
-## then @var{t} must be a double scalar specifying the last time step and nothing is returned from this function.
+## @item  @qcode{"init"}
+## then @var{t} must be a double column vector of length 2 with the first and
+## the last time step and nothing is returned from this function,
+##
+## @item  @qcode{""}
+## then @var{t} must be a double scalar specifying the actual time step and
+## the return value is false (resp. value 0) for @qcode{"not stop solving"},
+##
+## @item  @qcode{"done"}
+## then @var{t} must be a double scalar specifying the last time step and
+## nothing is returned from this function.
 ## @end table
 ##
-## This function is called by a ode solver function if it was specified in an options structure with the @command{odeset}. This function is an internal helper function therefore it should never be necessary that this function is called directly by a user. There is only little error detection implemented in this function file to achieve the highest performance.
+## This function is called by an ode solver function if it was specified in
+## an options structure with the @command{odeset}.  This function is an
+## internal helper function therefore it should never be necessary that this
+## function is called directly by a user.  There is only little error
+## detection implemented in this function file to achieve the highest
+## performance.
 ##
-## For example, solve an anonymous implementation of the "Van der Pol" equation and display the results while solving
+## For example, solve an anonymous implementation of the
+## @qcode{"Van der Pol"} equation and display the results while solving
+##
 ## @example
+## @group
 ## fvdb = @@(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
 ##
 ## opt = odeset ("OutputFcn", @@odeplot, "RelTol", 1e-6);
 ## sol = ode45 (fvdb, [0 20], [2 0], opt);
+## @end group
 ## @end example
 ## @end deftypefn
 ##
-## @seealso{odeset,odeget}
+## @seealso{odeset, odeget}
 
 function ret = odeplot (t, y, flag, varargin)
 
   ## No input argument check is done for a higher processing speed
   persistent fig; persistent told;
   persistent yold; persistent counter;
 
   if (strcmp (flag, "init"))
diff --git a/scripts/ode/private/known_option_names.m b/scripts/ode/private/known_option_names.m
--- a/scripts/ode/private/known_option_names.m
+++ b/scripts/ode/private/known_option_names.m
@@ -12,19 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {@var{val} =} known_option_names ()
+## @deftypefn {} {@var{val} =} known_option_names ()
 ## Return a list of known names for ode options.
-## @seealso{odeset,odeget}
+## @seealso{odeset, odeget}
 ## @end deftypefn
 
 function ret = known_option_names ()
 
 ret = {"AbsTol"; "BDF"; "Events"; "InitialSlope";
        "InitialStep"; "Jacobian"; "JConstant"; "JPattern";
        "Mass"; "MassConstant"; "MassSingular"; "MaxOrder";
        "MaxStep"; "MStateDependence"; "MvPattern";
diff --git a/scripts/ode/private/runge_kutta_23.m b/scripts/ode/private/runge_kutta_23.m
--- a/scripts/ode/private/runge_kutta_23.m
+++ b/scripts/ode/private/runge_kutta_23.m
@@ -22,39 +22,39 @@
 ## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options})
 ## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in})
 ## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}] =} runge_kutta_23 (@var{@fun}, @var{t}, @var{x}, @var{dt}, @var{options}, @var{k_vals_in}, @var{t_next})
 ## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}, @var{x_est}] =} runge_kutta_23 (@dots{})
 ## @deftypefnx {Function File} {[@var{t_next}, @var{x_next}, @var{x_est}, @var{k_vals_out}] =} runge_kutta_23 (@dots{})
 ##
 ## This function can be used to integrate a system of ODEs with a given initial
 ## condition @var{x} from @var{t} to @var{t+dt}, with the Bogacki-Shampine
-## method of third order. For the definition of this method see
+## method of third order.  For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods}.
 ##
 ## @var{@fun} is a function handle that defines the ODE: @code{y' = f(tau,y)}.
 ## The function must accept two inputs where the first is time @var{tau} and the
 ## second is a column vector of unknowns @var{y}.
 ##
 ## @var{t} is the first extreme of integration interval.
 ##
 ## @var{x} is the initial condition of the system..
 ##
 ## @var{dt} is the timestep, that is the length of the integration interval.
 ##
 ## The optional fourth argument @var{options} specifies options for the ODE
-## solver. It is a structure generated by @code{odeset}. In particular it
+## solver.  It is a structure generated by @code{odeset}.  In particular it
 ## contains the field @var{funarguments} with the optional arguments to be used
 ## in the evaluation of @var{fun}.
 ##
 ## The optional fifth argument @var{k_vals_in} contains the Runge-Kutta
 ## evaluations of the previous step to use in a FSAL scheme.
 ##
 ## The optional sixth argument @var{t_next} (@code{t_next = t + dt}) specifies
-## the end of the integration interval. The output @var{x_next} s the higher
+## the end of the integration interval.  The output @var{x_next} s the higher
 ## order computed solution at time @var{t_next} (local extrapolation is
 ## performed).
 ##
 ## Optionally the functions can also return @var{x_est}, a lower order solution
 ## for the estimation of the error, and @var{k_vals_out}, a matrix containing
 ## the Runge-Kutta evaluations to use in a FSAL scheme or for dense output.
 ##
 ## @seealso{runge_kutta_45_dorpri}
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -120,25 +120,25 @@
 ## @strong{exactly} as they were specified in the plot.  If any special
 ## characters of the @TeX{} mode interpreter were used, the file must be
 ## edited before @LaTeX{} processing.  Specifically, the special characters
 ## must be enclosed with dollar signs (@code{$ @dots{} $}), and other
 ## characters that are recognized by @LaTeX{} may also need editing (.e.g.,
 ## braces).  The @samp{pdflatex} device, and any of the @samp{standalone}
 ## formats, are not available with the Gnuplot toolkit.
 ##
-##   @item epscairo
+##   @item  epscairo
 ##   @itemx pdfcairo
 ##   @itemx epscairolatex
 ##   @itemx pdfcairolatex
 ##   @itemx epscairolatexstandalone
 ##   @itemx pdfcairolatexstandalone
 ##     Generate Cairo based output when using the Gnuplot graphics toolkit.
 ## The @samp{epscairo} and @samp{pdfcairo} devices are synonymous with
-## the @samp{epsc} device. The @LaTeX{} variants generate a @LaTeX{} file,
+## the @samp{epsc} device.  The @LaTeX{} variants generate a @LaTeX{} file,
 ## @file{@var{filename}.tex}, for the text portions of a plot, and an image
 ## file, @file{@var{filename}.(eps|pdf)}, for the graph portion of the plot.
 ## The @samp{standalone} variants behave as described for
 ## @samp{epslatexstandalone} above.
 ##
 ##   @item  ill
 ##   @itemx aifm
 ##     Adobe Illustrator (Obsolete for Gnuplot versions > 4.2)
@@ -187,20 +187,20 @@
 ##
 ##   @item pdf
 ##     Portable document format
 ##   @end table
 ##
 ##   @item svg
 ##     Scalable vector graphics
 ##
-##   @item tikz
+##   @item  tikz
 ##   @itemx tikzstandalone
 ##     Generate a @LaTeX{} file using PGF/TikZ@.  For the FLTK toolkit
-## the result is PGF. The @samp{tikzstandalone} device produces a @LaTeX{}
+## the result is PGF@.  The @samp{tikzstandalone} device produces a @LaTeX{}
 ## document which includes the TikZ file (@samp{tikzstandalone} is only
 ## available for the Gnuplot graphics toolkit).
 ##
 ##   If the device is omitted, it is inferred from the file extension,
 ## or if there is no filename it is sent to the printer as PostScript.
 ##
 ## @item -d@var{ghostscript_device}
 ##   Additional devices are supported by Ghostscript.
