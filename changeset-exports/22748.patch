# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1478714797 -3600
#      Wed Nov 09 19:06:37 2016 +0100
# Node ID 4f144938eb65a96ff47a2ddc48ee9e99c078ab67
# Parent  fb76e570466b06bfbb3792420c97ac562dc2e557
datetick.m: Correct spacing for month ticks (bug #49566).

* datetick.m: Use correct spacing of ticks when labeling months.
Add BIST test.

diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -83,18 +83,27 @@ endfunction
 %! xlabel ("year");
 %! ylabel ("average price");
 %! title ("datetick() with MM/DD/YY format");
 %! ax = gca;
 %! set (ax, "xtick", datenum (1990:5:2005,1,1));
 %! datetick ("x", 2, "keepticks");
 %! set (ax, "ytick", 12:16);
 
-## Remove from test statistics.  No real tests possible.
-%!assert (1)
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   plot ([213:364 0:28], randn (1,181));
+%!   datetick ("x", 3);
+%!   xticks = get (hax, "xtick");
+%!   assert (xticks, [-30 32 92 153 214 275 336 398]);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
 
 function __datetick__ (varargin)
 
   keeplimits = false;
   idx = strcmpi (varargin, "keeplimits");
   if (any (idx))
     keeplimits = true;
     varargin = varargin(! idx);
@@ -196,29 +205,33 @@ function __datetick__ (varargin)
       minmonth = mmin + (dmin - 1) / 30;
       maxmonth = (ymax  - ymin) * 12 + mmax + (dmax - 1) / 30;
 
       if (maxmonth - minmonth < N)
         sep = __calc_tick_sep__ (xmin, xmax);
         xmin = sep * floor (xmin / sep);
         xmax = sep * ceil (xmax / sep);
         nticks = (xmax - xmin) / sep + 1;
+        ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
       elseif (maxyear - minyear < N)
-        sep = __calc_tick_sep__ (minmonth , maxmonth);
-        xmin = datenum (ymin, sep * floor (minmonth / sep), 1);
-        xmax = datenum (ymax, sep * ceil (maxmonth / sep), 1);
-        nticks = ceil (maxmonth / sep) - floor (minmonth / sep) + 1;
+        sep = __calc_tick_sep__ (minmonth, maxmonth);
+        minmonth = sep * floor (minmonth / sep);
+        maxmonth = sep * ceil (maxmonth / sep);
+        xmin = datenum (ymin, minmonth, 1);
+        tick_years = datevec (datenum (floor (minyear), minmonth:maxmonth, 1))(:,1)';
+        tick_month = 12 - mod (-(minmonth:maxmonth), 12);
+        ticks = xmin + [0 cumsum(eomday(tick_years, tick_month))(sep:sep:end)];
       else
         sep = __calc_tick_sep__ (minyear , maxyear);
         xmin = datenum (sep * floor (minyear / sep), 1, 1);
         xmax = datenum (sep * ceil (maxyear / sep), 1, 1);
         nticks = ceil (maxyear / sep) - floor (minyear / sep) + 1;
+        ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
       endif
     endif
-    ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
   endif
 
   if (isempty (form))
     r = max (ticks) - min (ticks);
     if (r < 10/60/24)
       ## minutes and seconds
       form = 13;
     elseif (r < 2)
