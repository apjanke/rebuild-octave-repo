# HG changeset patch
# User dbateman
# Date 1171807287 0
#      Sun Feb 18 14:01:27 2007 +0000
# Node ID 129ef2ae319f13ead07144470f692b9ca2dafe01
# Parent  5e00f09932339e543e6cb53157e22d2c7a31311f
[project @ 2007-02-18 14:01:27 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-18  David Bateman  <dbateman@free.fr>
+
+	* oct-rand.cc (do_old_initialization()): call setcgn(1) prior to
+	calling setall and reset to the current generator after.
+
 2007-02-16  John W. Eaton  <jwe@octave.org>
 
 	* oct-shlib.h (octave_shlib::relative): New data member.
 	(octave_shlib::mark_relative, octave_shlib::is_relative):
 	New functions.
 
 2007-02-16  Michael Goffioul  <michael.goffioul@swing.be>
 
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -102,28 +102,31 @@ force_to_fit_range (octave_idx_type i, o
 // time we start octave unless we specifically set the seed.  The
 // technique used below will cycle monthly, but it it does seem to
 // work ok to give fairly different seeds each time Octave starts.
 
 static void
 do_old_initialization (void)
 {
   octave_localtime tm;
- 
+  int stored_distribution = current_distribution;
+  F77_FUNC (setcgn, SETCGN) (uniform_dist);
+
   int hour = tm.hour() + 1;
   int minute = tm.min() + 1;
   int second = tm.sec() + 1;
 
   octave_idx_type s0 = tm.mday() * hour * minute * second;
   octave_idx_type s1 = hour * minute * second;
 
   s0 = force_to_fit_range (s0, 1, 2147483563);
   s1 = force_to_fit_range (s1, 1, 2147483399);
 
   F77_FUNC (setall, SETALL) (s0, s1);
+  F77_FUNC (setcgn, SETCGN) (stored_distribution);
 
   old_initialized = true;
 }
 
 static inline void
 maybe_initialize (void)
 {
   if (use_old_generators)
