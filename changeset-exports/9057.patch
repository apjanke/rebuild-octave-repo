# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238310344 -7200
#      Sun Mar 29 09:05:44 2009 +0200
# Node ID 8b263623d0f3dacd89a036ea4dc93ef49372e117
# Parent  b06dc393ac42d1addef37829fd57e7cfce6e0fa2
have cellslices index the last dim of n-d arrays

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellslices): Index n-d arrays along the
+	last dimension.
+
 2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/balance.cc (Fbalance): Fix order of output args.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc 
 	(find_nonzero_elem_idx (const Array<T>&, ...)): Move dimensions
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -1219,18 +1219,34 @@ mat2cell (reshape(1:16,4,4),[3,1],[3,1])
 */
 
 template <class NDA>
 Cell 
 do_cellslices_nda (const NDA& array, const idx_vector& lb, const idx_vector& ub)
 {
   octave_idx_type n = lb.length (0);
   Cell retval (1, n);
-  for (octave_idx_type i = 0; i < n && ! error_state; i++)
-    retval(i) = array.index (idx_vector (lb(i), ub(i) + 1));
+  if (array.is_vector ())
+    {
+      for (octave_idx_type i = 0; i < n && ! error_state; i++)
+        retval(i) = array.index (idx_vector (lb(i), ub(i) + 1));
+    }
+  else
+    {
+      dim_vector dv = array.dims ();
+      octave_idx_type nl = 1;
+      for (int i = 0; i < dv.length () - 1; i++) nl *= dv(i);
+      for (octave_idx_type i = 0; i < n && ! error_state; i++)
+        {
+          // Do it with a single index to speed things up.
+          dv(dv.length () - 1) = ub(i) + 1 - lb(i);
+          retval(i) = array.index (idx_vector (nl*lb(i), nl*(ub(i) + 1))).reshape (dv);
+        }
+    }
+
   return retval;
 }
 
 DEFUN_DLD (cellslices, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{sl} =} cellslices (@var{x}, @var{lb}, @var{ub})\n\
 Given a vector @var{x}, this function produces a cell array of slices from the vector\n\
 determined by the index vectors @var{lb}, @var{ub}, for lower and upper bounds, respectively.\n\
@@ -1239,17 +1255,17 @@ In other words, it is equivalent to the 
 @example\n\
 n = length (lb);\n\
 sl = cell (1, n);\n\
 for i = 1:length (lb)\n\
   sl@{i@} = x(lb(i):ub(i));\n\
 endfor\n\
 @end example\n\
 \n\
-If @var{X} is a matrix, linear indexing will be used.\n\
+If @var{X} is a matrix or array, indexing is done along the last dimension.\n\
 @seealso{mat2cell}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
   if (nargin == 3)
     {
       octave_value x = args(0);
@@ -1285,21 +1301,22 @@ If @var{X} is a matrix, linear indexing 
                         retcell = do_cellslices_nda (x.array_value (), lb, ub);
                     }
                 }
               else
                 {
                   // generic code.
                   octave_idx_type n = lb.length (0);
                   retcell = Cell (1, n);
-                  octave_value_list idx (1, octave_value ());
+                  octave_idx_type nind = x.dims ().is_vector () ? 1 : x.ndims ();
+                  octave_value_list idx (nind, octave_value::magic_colon_t);
                   for (octave_idx_type i = 0; i < n && ! error_state; i++)
                     {
-                      idx(0) = Range (static_cast<double> (lb(i)) + 1,
-                                      static_cast<double> (ub(i)) + 1);
+                      idx(nind-1) = Range (static_cast<double> (lb(i)) + 1,
+                                           static_cast<double> (ub(i)) + 1);
                       retcell(i) = x.do_index_op (idx);
                     }
                 }
               if (! error_state)
                 retval = retcell;
             }
         }
     }
