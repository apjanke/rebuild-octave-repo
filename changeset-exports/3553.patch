# HG changeset patch
# User jwe
# Date 949548158 0
#      Thu Feb 03 03:22:38 2000 +0000
# Node ID c5600b44bef95510f04770c4b91c995c615956d5
# Parent  41daa489833a1bde52579c9d12408dd0d1857169
[project @ 2000-02-03 03:22:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-stream.cc (octave_base_stream::read): Rename count to char_count.
+	(octave_base_stream::do_gets): Likewise.
+
+	* octave-stream.cc (octave_base_stream::write): Rename flt_fmt to ffmt.
+	(octave_base_stream::read): Likewise.
+
 	* TEMPLATE-INST/SLStack-sym.cc: Delete meaningless `extern
 	template' declarations.
 	* TEMPLATE-INST/Array-tc.cc: Ditto.
 
 	* TEMPLATE-INST/Map-fnc.cc: Don't try to instantiate goodCHptr or
 	CHptr_to_index here.
 	* TEMPLATE-INST/Map-tc.cc: Likewise.
 
diff --git a/src/mkgendoc b/src/mkgendoc
--- a/src/mkgendoc
+++ b/src/mkgendoc
@@ -35,26 +35,26 @@ cat << \EOF
 #define XDEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 			       d_c_map, c_c_map, lo, hi, \
 			       can_ret_cmplx_for_real, doc) \
   print_doc_string (#name, doc);
 
 static void
 print_doc_string (const string& name, const std::string& doc)
 {
-  cout << "";
+  std::cout << "";
 
   size_t len = name.length ();
 
   if (name[0] == '"' && name[len-1] == '"')
-    cout << name.substr (1, len-2);
+    std::cout << name.substr (1, len-2);
   else
-    cout << name;
+    std::cout << name;
 
-  cout << "\n" << doc << "\n";
+  std::cout << "\n" << doc << "\n";
 }
 
 EOF
 
 for file in $DOC_FILES; do
   fcn=`echo $file | sed 's,^\./,,; s/\.df//; s/-/_/g'`
   echo "static void"
   echo "print_${fcn}_doc_strings (void)"
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -840,18 +840,18 @@ octave_base_stream::file_number (void)
   if (name () == "stderr")
     return 2;
 
   int retval = -1;
 
   std::istream *is = input_stream ();
   std::ostream *os = output_stream ();
 
-  int i_fid = is ? ((filebuf *) (is->rdbuf ()))->fd () : -1;
-  int o_fid = os ? ((filebuf *) (os->rdbuf ()))->fd () : -1;
+  int i_fid = is ? ((std::filebuf *) (is->rdbuf ()))->fd () : -1;
+  int o_fid = os ? ((std::filebuf *) (os->rdbuf ()))->fd () : -1;
 
   if (i_fid >= 0)
     {
       if (o_fid >= 0)
 	retval = (i_fid == o_fid) ? i_fid : -1;
       else
 	retval = i_fid;
     }
@@ -892,47 +892,47 @@ octave_base_stream::do_gets (int max_len
     {
       std::istream& is = *isp;
 
       // XXX FIXME XXX -- this should probably be converted to use
       // sstream when that is available.
       std::ostrstream buf;
 
       int c = 0;
-      int count = 0;
+      int char_count = 0;
       int newline_stripped = 0;
 
       while (is && (c = is.get ()) != EOF)
 	{
-	  count++;
+	  char_count++;
 
 	  if (c == '\n')
 	    {
 	      if (! strip_newline)
 		buf << (char) c;
 	      else
 		newline_stripped = 1;
 
 	      break;
 	    }
 	  else
 	    buf << (char) c;
 
-	  if (max_len > 0 && count == max_len)
+	  if (max_len > 0 && char_count == max_len)
 	    break;
 	}
 
       if (is.fail ())
 	{
 	  err = true;
 	  std::string msg = fcn;
 	  msg.append (": read error");
 	  error (msg);
 	}
-      else if (count == 0 && is.eof ())
+      else if (char_count == 0 && is.eof ())
 	{
 	  err = true;
 	  std::string msg = fcn;
 	  msg.append (": at end of file");
 	  error (msg);
 	}
       else
 	{
@@ -961,46 +961,47 @@ std::string
 octave_base_stream::gets (int max_len, bool& err)
 {
   return do_gets (max_len, err, false, "fgets");
 }
 
 octave_value
 octave_base_stream::read (const Matrix& size,
 			  oct_data_conv::data_type dt, int skip,
-			  oct_mach_info::float_format flt_fmt, int& count)
+			  oct_mach_info::float_format ffmt,
+			  int& char_count)
 {
   Matrix retval;
 
-  count = 0;
+  char_count = 0;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
       int nr = -1;
       int nc = -1;
 
       bool ignore;
 
       get_size (size, nr, nc, ignore, "fread");
 
       if (! error_state)
 	{
-	  if (flt_fmt == oct_mach_info::unknown)
-	    flt_fmt = float_format ();
-
-	  int tmp = retval.read (is, nr, nc, dt, skip, flt_fmt);
+	  if (ffmt == oct_mach_info::unknown)
+	    ffmt = float_format ();
+
+	  int tmp = retval.read (is, nr, nc, dt, skip, ffmt);
 
 	  if (tmp < 0)
 	    error ("fread: read error");
 	  else
-	    count = tmp;
+	    char_count = tmp;
 	}
     }
   else
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
@@ -1545,17 +1546,17 @@ octave_base_stream::do_scanf (scanf_form
       if (all_char_conv)
 	retval = retval.convert_to_str ();
     }
 
   return retval;
 }
 
 octave_value
-octave_base_stream::scanf (const string& fmt, const Matrix& size,
+octave_base_stream::scanf (const std::string& fmt, const Matrix& size,
 			   int& count)
 {
   octave_value retval = Matrix ();
 
   count = 0;
 
   std::istream *isp = input_stream ();
 
@@ -1894,34 +1895,34 @@ octave_base_stream::flush (void)
     invalid_operation ("fflush", "writing");
 
   return retval;
 }
 
 int
 octave_base_stream::write (const octave_value& data,
 			   oct_data_conv::data_type dt, int skip,
-			   oct_mach_info::float_format flt_fmt)
+			   oct_mach_info::float_format ffmt)
 {
   int retval = -1;
 
   std::ostream *osp = output_stream ();
 
   if (osp)
     {
       std::ostream& os = *osp;
 
       Matrix mval = data.matrix_value ();
 
       if (! error_state)
 	{
-	  if (flt_fmt == oct_mach_info::unknown)
-	    flt_fmt = float_format ();
-
-	  int tmp = mval.write (os, dt, skip, flt_fmt);
+	  if (ffmt == oct_mach_info::unknown)
+	    ffmt = float_format ();
+
+	  int tmp = mval.write (os, dt, skip, ffmt);
 
 	  if (tmp < 0)
 	    error ("fwrite: write error");
 	  else
 	    retval = tmp;
 	}
     }
   else
