# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532639425 25200
#      Thu Jul 26 14:10:25 2018 -0700
# Node ID af0b81f2ffe6eda2f1d2644dd169323b885db87e
# Parent  f8ef00a58768762326a370435a06d15188616fd7
Correctly handle corner cases in dlmread.
Fix handling of <number>i|j<extra text>
Fix handling of <Inf|NA|NaN><extra text>

* dlmread.cc: For purely complex numbers, check that there is no trailing
character after i|j.  If there is, the field failed to parse correctly.
Advance the column counter with j++ and leave data initialized to empty_value.
For non-finite values, check that there is no extra text beyond the parsed
text.  If there is, the field failed to parse correctly.  Advance the column
counter with j++ and leave data initialized to empty_value.
If octave_read_double() parsing fails use j++ to advance the column counter and
leave data initialized to empty_value.  Add BIST tests for purely complex
numbers with trailing characters and for non-finite values with trailing
characters.

diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -445,26 +445,39 @@ such as text, are also replaced by the @
                     rdata(i,j++) = x;
                 }
               else
                 {
                   int next_char = std::tolower (tmp_stream.peek ());
                   if (next_char == 'i' || next_char == 'j')
                     {
                       // Process pure imaginary numbers.
-                      if (! iscmplx)
+                      tmp_stream.get ();
+                      next_char = tmp_stream.peek ();
+                      if (next_char == std::istringstream::traits_type::eof ())
                         {
-                          iscmplx = true;
-                          cdata = ComplexMatrix (rdata);
+                          if (! iscmplx)
+                            {
+                              iscmplx = true;
+                              cdata = ComplexMatrix (rdata);
+                            }
+
+                          cdata(i,j++) = Complex (0, x);
                         }
-
-                      cdata(i,j++) = Complex (0, x);
+                      else
+                        {
+                          // Parsing failed, <number>i|j<extra text>
+                          j++;  // Leave data initialized to empty_value
+                        }
                     }
                   else if (std::isalpha (next_char) && ! std::isfinite (x))
-                    x = empty_value;
+                    {
+                      // Parsing failed, <Inf|NA|NaN><extra text>
+                      j++;  // Leave data initialized to empty_value
+                    }
                   else
                     {
                       double y = octave_read_double (tmp_stream);
 
                       if (! iscmplx && y != 0.)
                         {
                           iscmplx = true;
                           cdata = ComplexMatrix (rdata);
@@ -472,20 +485,21 @@ such as text, are also replaced by the @
 
                       if (iscmplx)
                         cdata(i,j++) = Complex (x, y);
                       else
                         rdata(i,j++) = x;
                     }
                 }
             }
-          else if (iscmplx)
-            cdata(i,j++) = empty_value;
           else
-            rdata(i,j++) = empty_value;
+            {
+              // octave_read_double() parsing failed
+              j++;  // Leave data initialized to empty_value
+            }
 
           pos1 = pos2 + 1;
         }
       while (pos2 != std::string::npos);
 
       if (i == r1)
         break;  // Stop early if the desired range has been read.
 
@@ -645,22 +659,48 @@ such as text, are also replaced by the @
 %!   fwrite (fid, "1,NA,3");
 %!   fclose (fid);
 %!
 %!   assert (dlmread (file), [1, NA, 3]);
 %! unwind_protect_cleanup
 %!   unlink (file);
 %! end_unwind_protect
 
+## "Name" was read as NA rather than parse error
 %!test <*54029>
 %! file = tempname ();
 %! unwind_protect
 %!   fid = fopen (file, "wt");
 %!   fwrite (fid, "NaNe,bNa,Name,c\n1,NaN,3,Inftest\n-Inf,6,NA,8");
 %!   fclose (fid);
 %!
 %!   assert (dlmread (file), [0, 0, 0, 0; 1, NaN, 3, 0; -Inf, 6, NA, 8]);
 %! unwind_protect_cleanup
 %!   unlink (file);
 %! end_unwind_protect
 
+## Infinity incorrectly changed matrix to complex, rather than parse error
+%!test
+%! file = tempname ();
+%! unwind_protect
+%!   fid = fopen (file, "wt");
+%!   fwrite (fid, "1,Infinity,3");
+%!   fclose (fid);
+%!
+%!   assert (dlmread (file), [1, 0, 3]);
+%! unwind_protect_cleanup
+%!   unlink (file);
+%! end_unwind_protect
+
+## Purely complex numbers with trailing garbage produced complex matrix
+%!test
+%! file = tempname ();
+%! unwind_protect
+%!   fid = fopen (file, "wt");
+%!   fwrite (fid, "1,2jack,3");
+%!   fclose (fid);
+%!
+%!   assert (dlmread (file), [1, 0, 3]);
+%! unwind_protect_cleanup
+%!   unlink (file);
+%! end_unwind_protect
 
 */
