# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1312584760 14400
#      Fri Aug 05 18:52:40 2011 -0400
# Node ID 0dc4d9f1366cfebc91dd9f1ed4797e851d739435
# Parent  838ada8779a533a26e6473fc37e158d319f91ce4
# Parent  f9c1f7c1ead0323b2749e102d90bb95dbf1cbe2a
maint: periodic merge of stable to default

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -969,17 +969,17 @@ of a cell array can be extracted into a 
 @code{@{} and @code{@}} operators.  By surrounding this list with
 @code{[} and @code{]}, it can be concatenated into an array.  For example:
 
 @example
 @group
 a = @{1, [2, 3], 4, 5, 6@};
 b = [a@{1:4@}]
      @result{} b =
-         1   2   3   4
+         1   2   3   4   5
 @end group
 @end example
 
 Similarly, it is possible to create a new cell array containing cell
 elements selected with @code{@{@}}.  By surrounding the list with  
 @samp{@{} and @samp{@}} a new cell array will be created, as the
 following example illustrates:
 
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -188,16 +188,30 @@ c_file_ptr_buf::buf_close (void)
       retval = cf (f);
       f = 0;
     }
 
   return retval;
 }
 
 int
+c_file_ptr_buf::seek (long offset, int origin)
+{
+  // gnulib::fseek doesn't seem to work, so don't use it until problem
+  // can be properly diagnosed and fixed.
+  return f ? fseek (f, offset, origin) : -1;
+}
+
+long
+c_file_ptr_buf::tell (void)
+{
+  return f ? gnulib::ftell (f) : -1;
+}
+
+int
 c_file_ptr_buf::file_close (FILE *f)
 {
   return gnulib::fclose (f);
 }
 
 #ifdef HAVE_ZLIB
 
 c_zfile_ptr_buf::~c_zfile_ptr_buf (void)
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -69,20 +69,19 @@ public:
   int sync (void);
 
   int flush (void);
 
   int buf_close (void);
 
   int file_number () const { return f ? fileno (f) : -1; }
 
-  int seek (long offset, int origin)
-    { return f ? gnulib::fseek (f, offset, origin) : -1; }
+  int seek (long offset, int origin);
 
-  long tell (void) { return f ? gnulib::ftell (f) : -1; }
+  long tell (void);
 
   void clear (void) { if (f) clearerr (f); }
 
   static int file_close (FILE *f);
 
 protected:
 
   FILE *f;
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2055,16 +2055,26 @@ DEFUN (numel, args, ,
 Return the number of elements in the object @var{a}.\n\
 Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,\n\
 return the number of elements that would result from the indexing\n\
 \n\
 @example\n\
   @var{a}(@var{idx1}, @var{idx2}, @dots{})\n\
 @end example\n\
 \n\
+Note that the indices do not have to be numerical. For example\n\
+\n\
+@example\n\
+  @var{a} = 1;\n\
+  @var{b} = ones (2, 3);\n\
+  numel (@var{a}, @var{b});\n\
+@end example\n\
+\n\
+will return 6, as this is the number of ways to index with @var{b}.\n\
+\n\
 This method is also called when an object appears as lvalue with cs-list\n\
 indexing, i.e., @code{object@{@dots{}@}} or @code{object(@dots{}).field}.\n\
 @seealso{size}\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_idx_type nargin = args.length ();
 
