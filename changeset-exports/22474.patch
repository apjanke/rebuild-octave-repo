# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1468204869 -36000
#      Mon Jul 11 12:41:09 2016 +1000
# Node ID ed1722f70fadc0a78a5f2a3b6604825b3d0764ba
# Parent  bb10d836751b64a4471febd9f21ef508fbe3da19
Fix early exit from quadgk for infinite intervals (bug #37613).

* quadgk.m : Move test for small intervals from the main loop to
__quadgk_eval__ and perform the test on the transformed abscissa rather
than the limits of the subintervals.

diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -318,38 +318,29 @@ function [q, err] = quadgk (f, a, b, var
   subs = [subs(1:end-1), subs(2:end)];
 
   ## Singularity will cause divide by zero warnings.
   ## Turn off warning locally for quadgk function only.
   warning ("off", "Octave:divide-by-zero", "local");
 
   warn_id = "Octave:quadgk:warning-termination";
 
+  if (issingle)
+    eps1 = eps ("single");
+  else
+    eps1 = eps ("double");
+  endif
+
   ## Initial evaluation of the integrand on the subintervals
-  [q_subs, q_errs] = __quadgk_eval__ (f, subs);
+  [q_subs, q_errs] = __quadgk_eval__ (f, subs, eps1, trans);
   q0 = sum (q_subs);
   err0 = sum (q_errs);
 
-  if (issingle)
-    eps = eps ("single");
-  else
-    eps = eps ("double");
-  endif
-
   first = true;
   while (true)
-    ## Check for subintervals that are too small.
-    ## Test must be performed in untransformed subintervals.
-    ## What is a good value for this test?  Shampine suggests 100*eps.
-    if (any (abs (diff (trans (subs), [], 2) / h0) < 100 * eps))
-      q = q0;
-      err = err0;
-      break;
-    endif
-
     ## Quit if any evaluations are not finite (Inf or NaN).
     if (any (! isfinite (q_subs)))
       warning (warn_id, "quadgk: non finite integrand encountered");
       q = q0;
       err = err0;
       break;
     endif
 
@@ -394,28 +385,28 @@ function [q, err] = quadgk (f, a, b, var
     if (rows (subs) > maxint)
       warning (warn_id, "quadgk: maximum interval count (%d) exceeded", maxint);
       q += sum (q_subs);
       err += sum (q_errs);
       break;
     endif
 
     ## Evaluation of the integrand on the remaining subintervals
-    [q_subs, q_errs] = __quadgk_eval__ (f, subs);
+    [q_subs, q_errs] = __quadgk_eval__ (f, subs, eps1, trans);
   endwhile
 
   if (err > max (abstol, reltol * abs (q)))
     warning (warn_id,
              "quadgk: Error tolerance not met.  Estimated error %g", err);
   endif
 
 endfunction
 
-function [q, err] = __quadgk_eval__ (f, subs)
-  ## A (15,7) point pair of Gauss-Konrod quadrature rules.
+function [q, err, too_close] = __quadgk_eval__ (f, subs, eps1, trans)
+  ## A (15,7) point pair of Gauss-Kronrod quadrature rules.
   ## The abscissa and weights are copied directly from dqk15w.f from quadpack.
 
   persistent abscissa = [-0.9914553711208126e+00, -0.9491079123427585e+00, ...
                          -0.8648644233597691e+00, -0.7415311855993944e+00, ...
                          -0.5860872354676911e+00, -0.4058451513773972e+00, ...
                          -0.2077849550078985e+00,  0.0000000000000000e+00, ...
                           0.2077849550078985e+00,  0.4058451513773972e+00, ...
                           0.5860872354676911e+00,  0.7415311855993944e+00, ...
@@ -435,18 +426,28 @@ function [q, err] = __quadgk_eval__ (f, 
   persistent weights7 = ...
       diag ([0.1294849661688697e+00,  0.2797053914892767e+00, ...
              0.3818300505051889e+00,  0.4179591836734694e+00, ...
              0.3818300505051889e+00,  0.2797053914892767e+00, ...
              0.1294849661688697e+00]);
 
   halfwidth = diff (subs, [], 2) ./ 2;
   center = sum (subs, 2) ./ 2;
-  x = (halfwidth * abscissa) + center;
-  y = reshape (f (x(:)), size (x));
+  t = (halfwidth * abscissa) + center;
+  x = trans ([t(:,1), t(:,end)]);
+
+  ## Shampine suggests 100 * eps1.
+  ## FIXME: reference for suggestion?
+  if (any (abs (diff (x, [], 2) ./ max (abs (x), [], 2))) < 100 * eps1)
+    too_close = true;
+    return;
+  endif
+
+  too_close = false;
+  y = reshape (f (t(:)), size (t));
 
   ## This is faster than using bsxfun as the * operator can use a
   ## single BLAS call, rather than rows (sub) calls to the @times function.
   q = sum (y * weights15, 2) .* halfwidth;
   err = abs (sum (y(:,2:2:end) * weights7, 2) .* halfwidth - q);
 
 endfunction
 
@@ -464,19 +465,21 @@ endfunction
 %!assert (quadgk (@sin,-pi,pi, 1e-6,false), 0, 1e-6)
 
 %!assert (quadgk (@sin,-pi,0), -2, 1e-6)
 %!assert (quadgk (@sin,0,pi), 2, 1e-6)
 %!assert (quadgk (@(x) 1./sqrt (x),0,1), 2, 1e-6)
 %!assert (quadgk (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-6)
 %!assert (quadgk (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-6)
 %!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]), -pi * 1i, 1e-6)
-
 %!assert (quadgk (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), 1e-6)
 %!assert (quadgk (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, 1e-6)
+%!test
+%! f = @(x) x .^ 5 .* exp (-x) .* sin (x);
+%! assert (quadgk (f, 0, inf, "RelTol", 1e-8, "AbsTol", 1e-12), -15, 2e-12);
 
 ## Test input validation
 %!error quadgk (@sin)
 %!error quadgk (@sin, 0)
 %!error <can not pass additional arguments> quadgk (@sin, 0, 1, 1e-6, true, 4)
 %!error <options must occur in pairs> quadgk (@sin, 0, 1, "DummyArg")
 %!error <PROP must be a string> quadgk (@sin, 0, 1, "AbsTol", 1e-6, 2, 3)
 %!error <unknown property 'foo'> quadgk (@sin, 0, 1, "foo", 3)
