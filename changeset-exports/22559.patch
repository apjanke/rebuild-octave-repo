# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1475234502 -7200
#      Fri Sep 30 13:21:42 2016 +0200
# Branch stable
# Node ID 27f2a7a3b55d71f4d0b3df5cdab9d876128cacc6
# Parent  1751d490dc2fe41a11307cd76a446ae7b9a6f6c3
inputParser reset more parse results before new parse. (bug #49198)

* scripts/general/inputParser.m(parse) : reset Unmatched and UsingDefaults before doing
  a new parse.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -368,16 +368,18 @@ classdef inputParser < handle
         print_usage ();
       endif
       this.validate_name ("Switch", name);
       this.Switch.(name).def = false;
     endfunction
 
     function parse (this, varargin)
       this.Results = struct ();
+      this.Unmatched = struct ();
+      this.UsingDefaults = cell ();
       if (numel (varargin) < numel (this.Required))
         if (this.FunctionName)
           print_usage (this.FunctionName);
         else
           this.error ("inputParser.parse: not enough input arguments");
         endif
       endif
       pnargin = numel (varargin);
@@ -735,9 +737,18 @@ endclassdef
 
 %!test
 %! p = inputParser;
 %! p.addParameter ("a", []);
 %! p.addParameter ("b", []);
 %! p.parse ("a", 1);
 %! p.parse ("b", 1);
 %! assert (p.Results, struct ("a", [], "b", 1));
+%! assert (p.UsingDefaults, {"a"});
 
+%!test
+%! p = inputParser;
+%! p.addParameter ("b", []);
+%! p.KeepUnmatched = true;
+%! p.parse ("a", 1);
+%! p.parse ("b", 1);
+%! assert (p.Results, struct ("b", 1));
+%! assert (p.Unmatched, struct ());
