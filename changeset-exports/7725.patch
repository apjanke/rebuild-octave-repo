# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1208699422 14400
#      Sun Apr 20 09:50:22 2008 -0400
# Node ID 7c9ba697a479f8edf0fe638976f923542993315d
# Parent  932b0cf518341bb527091f005648944104ef9845
cosmetic fixes in QR & Cholesky updating codes

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,19 @@
+2008-04-20  Jaroslav Hajek <highegg@gmail.com>
+
+	* qrupdate/dch1dn.f, qrupdate/dchdex.f, qrupdate/dchinx.f,
+	qrupdate/dqhqr.f, qrupdate/dqrdec.f, qrupdate/dqrinc.f,
+	qrupdate/dqrqhu.f, qrupdate/dqrqhv.f, qrupdate/dqrshc.f,
+	qrupdate/zch1dn.f, qrupdate/zchdex.f, qrupdate/zchinx.f,
+	qrupdate/zqhqr.f, qrupdate/zqrdec.f, qrupdate/zqrder.f,
+	qrupdate/zqrinc.f, qrupdate/zqrinr.f, qrupdate/zqrqhu.f,
+	qrupdate/zqrqhv.f, qrupdate/zqrshc.f:
+	Fix external declarations, XERBLA calls, and docs.
+
 2008-04-07  Jaroslav Hajek <highegg@gmail.com>
 
 	* qrupdate/dqrqhu.f, qrupdate/zqrqhu.f,
 	* qrupdate/dqrshc.f, qrupdate/zqrshc.f,
 	* qrupdate/dchinx.f, qrupdate/zchinx.f,
 	* qrupdate/dchdex.f, qrupdate/zchdex.f: New files.
 
 2008-04-02  Jaroslav Hajek <highegg@gmail.com>
diff --git a/libcruft/qrupdate/dch1dn.f b/libcruft/qrupdate/dch1dn.f
--- a/libcruft/qrupdate/dch1dn.f
+++ b/libcruft/qrupdate/dch1dn.f
@@ -31,17 +31,17 @@ c               on exit, u is destroyed.
 c w (w)         a workspace vector of size n
 c 
 c NOTE: the workspace vector is used to store the rotations
 c       so that R does not need to be traversed by rows.
 c
       integer n,info
       double precision R(n,n),u(n)
       double precision w(n)
-      external dtrsv,dcopy,dlartg,dnrm2
+      external dtrsv,dlartg,dnrm2
       double precision rho,dnrm2
       double precision rr,ui,t
       integer i,j
 
 c quick return if possible
       if (n <= 0) return
 c check for singularity of R
       do i = 1,n
diff --git a/libcruft/qrupdate/dchdex.f b/libcruft/qrupdate/dchdex.f
--- a/libcruft/qrupdate/dchdex.f
+++ b/libcruft/qrupdate/dchdex.f
@@ -26,30 +26,30 @@ c               (real version)
 c arguments:
 c n (in)        the order of matrix R
 c R (in)        the original upper trapezoidal matrix R
 c R1 (out)      the updated matrix R1
 c j (in)        the position of the deleted row/column
       integer n,j,info
       double precision R(n,n),R1(n-1,n-1)
       double precision Qdum,c,s,rr
-      external dlacpy,dqhqr,dlartg
+      external xerbla,dlacpy,dqhqr,dlartg
 
 c quick return if possible
       if (n == 1) return
 
 c check arguments      
       info = 0
       if (n <= 0) then
         info = 1
       else if (j < 1 .or. j > n) then
         info = 4
       end if
       if (info /= 0) then
-        call xerbla('DQRDEX',info)
+        call xerbla('DCHDEX',info)
       end if
 
 c setup the new matrix R1
       if (j > 1) then
         call dlacpy('0',n-1,j-1,R(1,1),n,R1(1,1),n-1)
       end if
       if (j < n) then
         call dlacpy('0',n-1,n-j,R(1,j+1),n,R1(1,j),n-1)
diff --git a/libcruft/qrupdate/dchinx.f b/libcruft/qrupdate/dchinx.f
--- a/libcruft/qrupdate/dchinx.f
+++ b/libcruft/qrupdate/dchinx.f
@@ -31,17 +31,17 @@ c R1 (out)      the updated matrix R1
 c j (in)        the position of the inserted row/column
 c u (in)        the vector (n+1) determining the rank-1 update
 c info (out)    on exit, if info = 1, the 
 c               definiteness.
 
       integer n,j,info
       double precision R(n,n),R1(n+1,n+1),u(n+1)
       double precision rho,Qdum,w,dnrm2
-      external dcopy,dlacpy,dtrsv,dnrm2
+      external xerbla,dcopy,dlacpy,dtrsv,dnrm2,dqrqhu
       integer jj
 
 c quick return if possible
       if (n == 0) then
         if (u(1) <= 0) then
           info = 1
           return
         else
@@ -52,17 +52,17 @@ c quick return if possible
 c check arguments      
       info = 0
       if (n < 0) then
         info = 1
       else if (j < 1 .or. j > n+1) then
         info = 4
       end if
       if (info /= 0) then
-        call xerbla('DQRINX',info)
+        call xerbla('DCHINX',info)
       end if
 
 c copy shifted vector
       if (j > 1) then
         call dcopy(j-1,u,1,R1(1,j),1)
       end if
       w = u(j)
       if (j < n+1) then
diff --git a/libcruft/qrupdate/dqhqr.f b/libcruft/qrupdate/dqhqr.f
--- a/libcruft/qrupdate/dqhqr.f
+++ b/libcruft/qrupdate/dqhqr.f
@@ -33,17 +33,17 @@ c ldq (in)      leading dimension of Q
 c R (io)        on entry, the upper triangular matrix R
 c               on exit, the updated upper Hessenberg matrix R1
 c ldr (in)      leading dimension of R
 c
       integer m,n,k,ldq,ldr
       double precision Q(ldq,*),R(ldr,*)
       double precision c
       double precision s,rr
-      external dlartg,drot
+      external xerbla,dlartg,drot
       integer info,i
 c quick return if possible.
       if (n <= 0 .or. k <= 1) return
 c check arguments.
       info = 0
       if (ldq < 1) then
         info = 5
       else if (ldr < 1) then
diff --git a/libcruft/qrupdate/dqrdec.f b/libcruft/qrupdate/dqrdec.f
--- a/libcruft/qrupdate/dqrdec.f
+++ b/libcruft/qrupdate/dqrdec.f
@@ -34,17 +34,17 @@ c Q (io)        on entry, the orthogonal
 c               on exit, the updated matrix Q1.
 c R (in)        the original upper trapezoidal matrix R.
 c R1 (out)      the updated matrix R1.
 c j (in)        the position of the deleted column in R.
 c               1 <= j <= n.
 c
       integer m,n,k,j
       double precision Q(m,k),R(k,n),R1(k,n-1)
-      external dcopy,dqhqr
+      external xerbla,dcopy,dqhqr
       integer info
 c quick return if possible      
       if (m <= 0 .or. k <= 0 .or. n == 1) return
 c check arguments      
       info = 0
       if (n < 1) then
         info = 2
       else if (j < 1 .or. j > n) then
diff --git a/libcruft/qrupdate/dqrinc.f b/libcruft/qrupdate/dqrinc.f
--- a/libcruft/qrupdate/dqrinc.f
+++ b/libcruft/qrupdate/dqrinc.f
@@ -17,18 +17,18 @@ c along with this software; see the file
 c <http://www.gnu.org/licenses/>.
 c 
       subroutine dqrinc(m,n,k,Q,R,R1,j,x)
 c purpose:      updates a QR factorization after inserting a new
 c               column.      
 c               i.e., given an m-by-k orthogonal matrix Q, an m-by-n
 c               upper trapezoidal matrix R and index j in the range 
 c               1:n+1, this subroutine updates the matrix Q -> Q1 and 
-c               forms an m-by-(n+1) matrix R1 so that Q1 is again unitary,
-c               R1 upper trapezoidal, and 
+c               forms an m-by-(n+1) matrix R1 so that Q1 is again
+c               orthogonal, R1 upper trapezoidal, and 
 c               Q1*R1 = [A(:,1:j-1); Q*Q'*x; A(:,j:n-1)], where A = Q*R.
 c               (real version)
 c arguments:
 c m (in)        number of rows of the matrix Q.
 c n (in)        number of columns of the matrix R.
 c k (in)        number of columns of Q, and rows of R. k <= m.
 c Q (io)        on entry, the orthogonal matrix Q.
 c               on exit, the updated matrix Q1
@@ -47,17 +47,17 @@ c quick return if possible
 c check arguments      
       info = 0
       if (n < 0) then
         info = 2
       else if (j < 1 .or. j > n+1) then
         info = 6
       end if
       if (info /= 0) then
-        call xerbla('DQRDER',info)
+        call xerbla('DQRINC',info)
       end if
 c copy leading portion of R 
       call dcopy(k*(j-1),R,1,R1,1)
       if (j <= n) then
         call dcopy(k*(n+1-j),R(1,j),1,R1(1,j+1),1)
       end if
       call dgemv('T',m,min(k,j-1),1d0,Q,m,x,1,0d0,R1(1,j),1)
       if (j < k) then
diff --git a/libcruft/qrupdate/dqrqhu.f b/libcruft/qrupdate/dqrqhu.f
--- a/libcruft/qrupdate/dqrqhu.f
+++ b/libcruft/qrupdate/dqrqhu.f
@@ -37,17 +37,17 @@ c u (in)        the k-vector u.
 c rr (out)      the first element of Q1'*u on exit.
 c
 c               if Q is orthogonal, so is Q1. It is not strictly
 c               necessary, however.
       integer m,n,k,ldq,ldr
       double precision Q(ldq,*),R(ldr,*),u(*),rr
       double precision c
       double precision s,w
-      external dlartg,drot
+      external xerbla,dlartg,drot
       integer i,info
 c quick return if possible.
       if (k <= 0) return
 c check arguments.      
       info = 0
       if (ldq < 1) then
         info = 5
       else if (ldr < 1) then
diff --git a/libcruft/qrupdate/dqrqhv.f b/libcruft/qrupdate/dqrqhv.f
--- a/libcruft/qrupdate/dqrqhv.f
+++ b/libcruft/qrupdate/dqrqhv.f
@@ -37,17 +37,17 @@ c u (in)        the m-vector u.
 c rr (out)      the first element of Q1'*u on exit.
 c
 c               if Q is orthogonal, so is Q1. It is not strictly
 c               necessary, however.
       integer m,n,k,ldq,ldr
       double precision Q(ldq,*),R(ldr,*),u(*),rr
       double precision c
       double precision s,w,w1,ddot
-      external ddot,dlartg,drot
+      external xerbla,ddot,dlartg,drot
       integer i,info
 c quick return if possible.
       if (k <= 0) return
 c check arguments.      
       info = 0
       if (k > m) then
         info = 3
       else if (ldq < 1) then
diff --git a/libcruft/qrupdate/dqrshc.f b/libcruft/qrupdate/dqrshc.f
--- a/libcruft/qrupdate/dqrshc.f
+++ b/libcruft/qrupdate/dqrshc.f
@@ -17,18 +17,18 @@ c along with this software; see the file
 c <http://www.gnu.org/licenses/>.
 c 
       subroutine dqrshc(m,n,k,Q,R,i,j)
 c purpose:      updates a QR factorization after circular shift of
 c               columns.      
 c               i.e., given an m-by-k orthogonal matrix Q, an k-by-n
 c               upper trapezoidal matrix R and index j in the range 
 c               1:n+1, this subroutine updates the matrix Q -> Q1 and 
-c               R -> R1 so that Q1 is again unitary, R1 upper trapezoidal, 
-c               and 
+c               R -> R1 so that Q1 is again orthogonal, R1 upper 
+c               trapezoidal, and 
 c               Q1*R1 = A(:,p), where A = Q*R and p is the permutation
 c               [1:i-1,shift(i:j,-1),j+1:n] if i < j  or
 c               [1:j-1,shift(j:i,+1),i+1:n] if j > i.
 c               if m == 0, the matrix Q is ignored.
 c               (real version)
 c arguments:
 c m (in)        number of rows of the matrix Q, or 0 if Q is not needed.
 c n (in)        number of columns of the matrix R.
@@ -37,17 +37,17 @@ c Q (io)        on entry, the (orthogona
 c               on exit, the updated matrix Q1
 c R (io)        on entry, the upper trapezoidal m-by-n matrix R.
 c               on exit, the updated matrix R1.
 c i (in)        the first index determining the range (see above)
 c j (in)        the second index determining the range (see above)
 c
       integer m,n,k,i,j
       double precision Q(m,k),R(k,n)
-      external dswap,dqhqr
+      external xerbla,dswap,dqhqr,dqrqhu
       double precision w
       integer l,jj,kk,info
 
 c quick return if possible
       if (k <= 0 .or. n <= 1) return
       info = 0
       if (m /= 0 .and. k > m) then
         info = 3
diff --git a/libcruft/qrupdate/zch1dn.f b/libcruft/qrupdate/zch1dn.f
--- a/libcruft/qrupdate/zch1dn.f
+++ b/libcruft/qrupdate/zch1dn.f
@@ -31,17 +31,17 @@ c               on exit, u is destroyed.
 c w (w)         a workspace vector of size n
 c 
 c NOTE: the workspace vector is used to store the rotations
 c       so that R does not need to be traversed by rows.
 c
       integer n,info
       double complex R(n,n),u(n)
       double precision w(n)
-      external ztrsv,zcopy,zlartg,dznrm2
+      external ztrsv,zlartg,dznrm2
       double precision rho,dznrm2
       double complex crho,rr,ui,t
       integer i,j
 
 c quick return if possible
       if (n <= 0) return
 c check for singularity of R
       do i = 1,n
diff --git a/libcruft/qrupdate/zchdex.f b/libcruft/qrupdate/zchdex.f
--- a/libcruft/qrupdate/zchdex.f
+++ b/libcruft/qrupdate/zchdex.f
@@ -17,40 +17,40 @@ c along with this software; see the file
 c <http://www.gnu.org/licenses/>.
 c 
 
       subroutine zchdex(n,R,R1,j)
 c purpose:      given an upper triangular matrix R that is a Cholesky
 c               factor of a symmetric positive definite matrix A, i.e.
 c               A = R'*R, this subroutine updates R -> R1 so that
 c               R1'*R1 = A(jj,jj), where jj = [1:j-1,j+1:n+1].
-c               (real version)
+c               (complex version)
 c arguments:
 c n (in)        the order of matrix R
 c R (in)        the original upper trapezoidal matrix R
 c R1 (out)      the updated matrix R1
 c j (in)        the position of the deleted row/column
       integer n,j,info
       double complex R(n,n),R1(n-1,n-1)
       double precision c
       double complex Qdum,s,rr
-      external zlacpy,zqhqr,zlartg
+      external xerbla,zlacpy,zqhqr,zlartg
 
 c quick return if possible
       if (n == 1) return
 
 c check arguments      
       info = 0
       if (n <= 0) then
         info = 1
       else if (j < 1 .or. j > n) then
         info = 4
       end if
       if (info /= 0) then
-        call xerbla('ZQRDEX',info)
+        call xerbla('ZCHDEX',info)
       end if
 
 c setup the new matrix R1
       if (j > 1) then
         call zlacpy('0',n-1,j-1,R(1,1),n,R1(1,1),n-1)
       end if
       if (j < n) then
         call zlacpy('0',n-1,n-j,R(1,j+1),n,R1(1,j),n-1)
diff --git a/libcruft/qrupdate/zchinx.f b/libcruft/qrupdate/zchinx.f
--- a/libcruft/qrupdate/zchinx.f
+++ b/libcruft/qrupdate/zchinx.f
@@ -32,17 +32,17 @@ c j (in)        the position of the inse
 c u (in)        the vector (n+1) determining the rank-1 update
 c info (out)    on exit, if info = 1, the 
 c               definiteness.
 
       integer n,j,info
       double complex R(n,n),R1(n+1,n+1),u(n+1)
       double precision rho,dznrm2
       double complex Qdum,w
-      external zcopy,zlacpy,ztrsv,dznrm2
+      external xerbla,zcopy,zlacpy,ztrsv,dznrm2,zqrqhu
       integer jj
 
 c quick return if possible
       if (n == 0) then
         if (dble(u(1)) <= 0) then
           info = 1
           return
         else
@@ -53,17 +53,17 @@ c quick return if possible
 c check arguments      
       info = 0
       if (n < 0) then
         info = 1
       else if (j < 1 .or. j > n+1) then
         info = 4
       end if
       if (info /= 0) then
-        call xerbla('ZQRINX',info)
+        call xerbla('ZCHINX',info)
       end if
 
 c copy shifted vector
       if (j > 1) then
         call zcopy(j-1,u,1,R1(1,j),1)
       end if
       w = u(j)
       if (j < n+1) then
diff --git a/libcruft/qrupdate/zqhqr.f b/libcruft/qrupdate/zqhqr.f
--- a/libcruft/qrupdate/zqhqr.f
+++ b/libcruft/qrupdate/zqhqr.f
@@ -33,17 +33,17 @@ c ldq (in)      leading dimension of Q
 c R (io)        on entry, the upper triangular matrix R
 c               on exit, the updated upper Hessenberg matrix R1
 c ldr (in)      leading dimension of R
 c
       integer m,n,k,ldq,ldr
       double complex Q(ldq,*),R(ldr,*)
       double precision c
       double complex s,rr
-      external zlartg,zrot
+      external xerbla,zlartg,zrot
       integer info,i
 c quick return if possible.
       if (n <= 0 .or. k <= 1) return
 c check arguments.
       info = 0
       if (ldq < 1) then
         info = 5
       else if (ldr < 1) then
diff --git a/libcruft/qrupdate/zqrdec.f b/libcruft/qrupdate/zqrdec.f
--- a/libcruft/qrupdate/zqrdec.f
+++ b/libcruft/qrupdate/zqrdec.f
@@ -34,29 +34,29 @@ c Q (io)        on entry, the unitary m-
 c               on exit, the updated matrix Q1.
 c R (in)        the original upper trapezoidal matrix R.
 c R1 (out)      the updated matrix R1.
 c j (in)        the position of the deleted column in R.
 c               1 <= j <= n.
 c
       integer m,n,k,j
       double complex Q(m,k),R(k,n),R1(k,n-1)
-      external zcopy,zqhqr
+      external xerbla,zcopy,zqhqr
       integer info
 c quick return if possible      
       if (m <= 0 .or. k <= 0 .or. n == 1) return
 c check arguments      
       info = 0
       if (n < 1) then
         info = 2
       else if (j < 1 .or. j > n) then
         info = 7
       end if
       if (info /= 0) then
-        call xerbla('DQRDEC',info)
+        call xerbla('ZQRDEC',info)
       end if
 c copy leading portion
       call zcopy(k*(j-1),R,1,R1,1)
       if (j < n) then
 c copy trailing portion of R        
         call zcopy(k*(n-j),R(1,j+1),1,R1(1,j),1)
 c if necessary, retriangularize R1(j:k,j:n-1) and update Q(:,j:k)
         if (j < k) then
diff --git a/libcruft/qrupdate/zqrder.f b/libcruft/qrupdate/zqrder.f
--- a/libcruft/qrupdate/zqrder.f
+++ b/libcruft/qrupdate/zqrder.f
@@ -34,17 +34,17 @@ c Q1 (out)      the updated matrix Q1
 c R (in)        the upper trapezoidal matrix R
 c R1 (out)      the updated matrix R1
 c j (in)        the position of the new row in R1
 c
       integer m,n,j
       double complex Q(m,m),Q1(m-1,m-1),R(m,n),R1(m-1,n)
       double precision c
       double complex s,rr,w
-      external xerbla,zlacpy,zcopy,zlartg,zrot,zdscal,zaxpy
+      external xerbla,zlacpy,zlartg,zrot,zdscal,zaxpy
       integer i
 c quick return if possible      
       if (m == 1) return
 c check arguments      
       info = 0
       if (m < 1) then
         info = 1
       else if (j < 1 .or. j > n) then
diff --git a/libcruft/qrupdate/zqrinc.f b/libcruft/qrupdate/zqrinc.f
--- a/libcruft/qrupdate/zqrinc.f
+++ b/libcruft/qrupdate/zqrinc.f
@@ -47,17 +47,17 @@ c quick return if possible
 c check arguments      
       info = 0
       if (n < 0) then
         info = 2
       else if (j < 1 .or. j > n+1) then
         info = 6
       end if
       if (info /= 0) then
-        call xerbla('ZQRDER',info)
+        call xerbla('ZQRINC',info)
       end if
 c copy leading portion of R 
       call zcopy(k*(j-1),R,1,R1,1)
       if (j <= n) then
         call zcopy(k*(n+1-j),R(1,j),1,R1(1,j+1),1)
       end if
       call zgemv('C',m,min(k,j-1),dcmplx(1d0),Q,m,x,1,
      +           dcmplx(0d0),R1(1,j),1)
diff --git a/libcruft/qrupdate/zqrinr.f b/libcruft/qrupdate/zqrinr.f
--- a/libcruft/qrupdate/zqrinr.f
+++ b/libcruft/qrupdate/zqrinr.f
@@ -24,26 +24,26 @@ c               upper trapezoidal matrix
 c               1:m+1, this subroutine forms the (m+1)-by-(m+1) matrix 
 c               Q1 and an (m+1)-by-n matrix R1 so that Q1 is again 
 c               unitary, R1 upper trapezoidal, and 
 c               Q1*R1 = [A(1:j-1,:); x; A(j:m,:)], where A = Q*R.
 c               (complex version)
 c arguments:
 c m (in)        number of rows of the matrix R. 
 c n (in)        number of columns of the matrix R
-c Q (in)        the orthogonal matrix Q
+c Q (in)        the unitary matrix Q
 c Q1 (out)      the updated matrix Q1
 c R (in)        the upper trapezoidal matrix R
 c R1 (out)      the updated matrix R1
 c j (in)        the position of the new row in R1
 c x (in)        the row being added
 c
       integer m,n,j
       double complex Q(m,m),Q1(m+1,m+1),R(m,n),R1(m+1,n),x(n)
-      external xerbla,zlacpy,dcopy,dqhqr
+      external xerbla,zlacpy,zcopy,zqhqr
       integer i
 c check arguments      
       info = 0
       if (n < 0) then
         info = 2
       else if (j < 1 .or. j > m+1) then
         info = 7
       end if
diff --git a/libcruft/qrupdate/zqrqhu.f b/libcruft/qrupdate/zqrqhu.f
--- a/libcruft/qrupdate/zqrqhu.f
+++ b/libcruft/qrupdate/zqrqhu.f
@@ -22,32 +22,32 @@ c               k-by-n matrix R, and a k
 c               this subroutine updates the matrices Q -> Q1 and 
 c               R -> R1 so that Q1 = Q*G', R1 = G*R, u1(2:k) = 0 
 c               with G unitary, R1 upper Hessenberg, and u1 = G*u.
 c               (complex version)
 c arguments:
 c m (in)        number of rows of the matrix Q.
 c n (in)        number of columns of the matrix R.
 c k (in)        number of columns of Q and rows of R.
-c Q (io)        on entry, the orthogonal matrix Q.
+c Q (io)        on entry, the unitary matrix Q.
 c               on exit, the updated matrix Q1.
 c ldq (in)      leading dimension of Q.
 c R (io)        on entry, the upper triangular matrix R.
 c               on exit, the updated upper Hessenberg matrix R1.
 c ldr (in)      leading dimension of R.
 c u (in)        the k-vector u.
 c rr (out)      the first element of Q1'*u on exit.
 c
-c               if Q is orthogonal, so is Q1. It is not strictly
+c               if Q is unitary, so is Q1. It is not strictly
 c               necessary, however.
       integer m,n,k,ldq,ldr
       double complex Q(ldq,*),R(ldr,*),u(*),rr
       double precision c
       double complex s,w
-      external zlartg,zrot
+      external xerbla,zlartg,zrot
       integer i,info
 c quick return if possible.
       if (k <= 0) return
 c check arguments.      
       info = 0
       if (ldq < 1) then
         info = 5
       else if (ldr < 1) then
diff --git a/libcruft/qrupdate/zqrqhv.f b/libcruft/qrupdate/zqrqhv.f
--- a/libcruft/qrupdate/zqrqhv.f
+++ b/libcruft/qrupdate/zqrqhv.f
@@ -22,32 +22,32 @@ c               k-by-n matrix R, and an 
 c               updates the matrices Q -> Q1 and R -> R1 so that 
 c               Q1 = Q*G', R1 = G*R, w1(2:m) = 0 with G unitary, 
 c               R1 upper Hessenberg, and w1 = Q1'*u.
 c               (complex version)
 c arguments:
 c m (in)        number of rows of the matrix Q.
 c n (in)        number of columns of the matrix R.
 c k (in)        number of columns of Q and rows of R. k <= m.
-c Q (io)        on entry, the orthogonal matrix Q.
+c Q (io)        on entry, the unitary matrix Q.
 c               on exit, the updated matrix Q1.
 c ldq (in)      leading dimension of Q.
 c R (io)        on entry, the upper triangular matrix R.
 c               on exit, the updated upper Hessenberg matrix R1.
 c ldr (in)      leading dimension of R.
 c u (in)        the m-vector u.
 c rr (out)      the first element of Q1'*u on exit.
 c
-c               if Q is orthogonal, so is Q1. It is not strictly
+c               if Q is unitary, so is Q1. It is not strictly
 c               necessary, however.
       integer m,n,k,ldq,ldr
       double complex Q(ldq,*),R(ldr,*),u(*),rr
       double precision c
       double complex s,w,w1,zdotc
-      external zdotc,zlartg,zrot
+      external xerbla,zdotc,zlartg,zrot
       integer i,info
 c quick return if possible.
       if (k <= 0) return
 c check arguments.      
       info = 0
       if (k > m) then
         info = 3
       else if (ldq < 1) then
diff --git a/libcruft/qrupdate/zqrshc.f b/libcruft/qrupdate/zqrshc.f
--- a/libcruft/qrupdate/zqrshc.f
+++ b/libcruft/qrupdate/zqrshc.f
@@ -14,40 +14,40 @@ c GNU General Public License for more de
 c 
 c You should have received a copy of the GNU General Public License
 c along with this software; see the file COPYING.  If not, see
 c <http://www.gnu.org/licenses/>.
 c 
       subroutine zqrshc(m,n,k,Q,R,i,j)
 c purpose:      updates a QR factorization after circular shift of
 c               columns.      
-c               i.e., given an m-by-k orthogonal matrix Q, an k-by-n
+c               i.e., given an m-by-k unitary matrix Q, an k-by-n
 c               upper trapezoidal matrix R and index j in the range 
 c               1:n+1, this subroutine updates the matrix Q -> Q1 and 
 c               R -> R1 so that Q1 is again unitary, R1 upper trapezoidal, 
 c               and 
 c               Q1*R1 = A(:,p), where A = Q*R and p is the permutation
 c               [1:i-1,shift(i:j,-1),j+1:n] if i < j  or
 c               [1:j-1,shift(j:i,+1),i+1:n] if j > i.
 c               if m == 0, the matrix Q is ignored.
-c               (real version)
+c               (complex version)
 c arguments:
 c m (in)        number of rows of the matrix Q, or 0 if Q is not needed.
 c n (in)        number of columns of the matrix R.
 c k (in)        number of columns of Q, and rows of R.
 c Q (io)        on entry, the (unitary) matrix Q.
 c               on exit, the updated matrix Q1
 c R (io)        on entry, the upper trapezoidal m-by-n matrix R.
 c               on exit, the updated matrix R1.
 c i (in)        the first index determining the range (see above)
 c j (in)        the second index determining the range (see above)
 c
       integer m,n,k,i,j
       double complex Q(m,k),R(k,n)
-      external zswap,zqhqr
+      external xerbla,zswap,zqhqr,zqrqhu
       double complex w
       integer l,jj,kk,info
 
 c quick return if possible
       if (k <= 0 .or. n <= 1) return
       info = 0
       if (m /= 0 .and. k > m) then
         info = 3
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2008-04-19  Jaroslav Hajek <highegg@gmail.com>
+
+	* CmplxCHOL.cc, CmplxQR.cc, dbleCHOL.cc, dbleQR.cc: Fix calls to error()
+
 2008-04-16  David Bateman  <dbateman@free.fr>
 
 	* Sparse.h (Sparse<T>& operator = (Sparse<T>&)): Move definition
 	of the operator for here
 	* Sparse.cc (Sparse<T>& Sparse<T>::operator = (Sparse<T>&)): To
 	here. Also delete idx.
 	* Array.h (Array<T>& operator = (Array<T>&)): Move definition
 	of the operator for here
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -246,17 +246,17 @@ ComplexCHOL::insert_sym (const ComplexMa
 }
 
 void
 ComplexCHOL::delete_sym (octave_idx_type j)
 {
   octave_idx_type n = chol_mat.rows ();
   
   if (j < 0 || j > n-1)
-    (*current_liboctave_error_handler) ("CHOL insert index out of range");
+    (*current_liboctave_error_handler) ("CHOL delete index out of range");
   else
     {
       ComplexMatrix chol_mat1 (n-1, n-1);
 
       F77_XFCN (zchdex, ZCHDEX, (n, chol_mat.data (), chol_mat1.fortran_vec (), j+1));
 
       chol_mat = chol_mat1;
     }
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -254,17 +254,17 @@ ComplexQR::insert_row (const ComplexMatr
 
 void
 ComplexQR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
-    (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
+    (*current_liboctave_error_handler) ("QR delete dimensions mismatch");
   else if (j < 0 || j > m-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       ComplexMatrix q1 (m-1, m-1);
       ComplexMatrix r1 (m-1, n);
 
       F77_XFCN (zqrder, ZQRDER, (m, n, q.data (), q1.fortran_vec (), 
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -250,17 +250,17 @@ CHOL::insert_sym (const Matrix& u, octav
 }
 
 void
 CHOL::delete_sym (octave_idx_type j)
 {
   octave_idx_type n = chol_mat.rows ();
   
   if (j < 0 || j > n-1)
-    (*current_liboctave_error_handler) ("CHOL insert index out of range");
+    (*current_liboctave_error_handler) ("CHOL delete index out of range");
   else
     {
       Matrix chol_mat1 (n-1, n-1);
 
       F77_XFCN (dchdex, DCHDEX, (n, chol_mat.data (), chol_mat1.fortran_vec (), j+1));
 
       chol_mat = chol_mat1;
     }
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -243,17 +243,17 @@ QR::insert_row (const Matrix& u, octave_
 
 void
 QR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
-    (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
+    (*current_liboctave_error_handler) ("QR delete dimensions mismatch");
   else if (j < 0 || j > m-1) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       Matrix q1 (m-1, m-1);
       Matrix r1 (m-1, n);
 
       F77_XFCN (dqrder, DQRDER, (m, n, q.data (), q1.fortran_vec (), 
