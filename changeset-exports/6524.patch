# HG changeset patch
# User jwe
# Date 1176466932 0
#      Fri Apr 13 12:22:12 2007 +0000
# Node ID 03c89ade4070b23fb6dbd32689e0aaa0e800b03d
# Parent  589c8dbba9162fb0346fb5d960f1ffa2fc1ce0dd
[project @ 2007-04-13 12:19:30 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-13  Geordie McBain  <geordie.mcbain@aeromech.usyd.edu.au>
+
+	* spdiags.m: Fixed the four-argument case to work for columns of
+	length one.
+
 2007-04-12  John W. Eaton  <jwe@octave.org>
 
 	* optimization/qp.m: Avoid Octave indexing bug.
 
 2007-04-12  Carlo de Falco  <kingcrimson@tiscali.it>
 
 	* miscellaneous/menu.m, control/base/bddemo.m,
 	control/hinf/dgkfdemo.m, control/system/packedform.m,
diff --git a/scripts/sparse/spdiags.m b/scripts/sparse/spdiags.m
--- a/scripts/sparse/spdiags.m
+++ b/scripts/sparse/spdiags.m
@@ -71,15 +71,15 @@ function [A, c] = spdiags (v, c, m, n)
     ## Replace specific diagonals c of m with v,c
     [nr, nc] = size (m);
     B = spdiags (m, c);
     A = m - spdiags (B, c, nr, nc) + spdiags (v, c, nr, nc);
   else
     ## Create new matrix of size mxn using v,c
     [j, i, v] = find (v);
     offset = max (min (c(:), n-m), 0);
-    j += offset(i);
+    j = j(:) + offset(i);
     i = j-c(:)(i);
     idx = i > 0 & i <= m & j > 0 & j <= n;
     A = sparse (i(idx), j(idx), v(idx), m, n);
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-04-13  Geordie McBain  <geordie.mcbain@aeromech.usyd.edu.au>
+
+	* DLD-FUNCTIONS/find.cc (Ffind): Doc fix.
+
 2007-04-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (DOCSTRINGS): Don't echo commands.
 	(doc-files): Use mv, not $(simple-move-if-change-rule).
 
 	* data.cc (Fnot, Fuplus, Fuminus, Ftranspose, Fctranspose, Fplus,
 	Fminus, Fmtimes, Fmrdivide, Fmpower, Fmldivide, Flt, Fle, Feq,
 	Fge, Fgt, Fne, Ftimes, Frdivide, Fpower, Fldivide, Fand, For):
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -178,20 +178,20 @@ template octave_value_list find_nonzero_
 template octave_value_list find_nonzero_elem_idx (const ComplexNDArray&, int,
 						  octave_idx_type, int);
 
 DEFUN_DLD (find, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} find (@var{x})\n\
 @deftypefnx {Loadable Function} {} find (@var{x}, @var{n})\n\
 @deftypefnx {Loadable Function} {} find (@var{x}, @var{n}, @var{direction})\n\
-Return a vector of indices of nonzero elements of a matrix.  To obtain a\n\
-single index for each matrix element, Octave pretends that the columns\n\
-of a matrix form one long vector (like Fortran arrays are stored).  For\n\
-example,\n\
+Return a vector of indices of nonzero elements of a matrix, as a row if\n\
+@var{x} is a row or as a column otherwise.  To obtain a single index for\n\
+each matrix element, Octave pretends that the columns of a matrix form one\n\
+long vector (like Fortran arrays are stored).  For example,\n\
 \n\
 @example\n\
 @group\n\
 find (eye (2))\n\
      @result{} [ 1; 4 ]\n\
 @end group\n\
 @end example\n\
 \n\
