# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284359545 -7200
#      Mon Sep 13 08:32:25 2010 +0200
# Node ID 28ef5a31763d2b3f78637f9beed98872db428ae5
# Parent  50273985ebca2974e7cc058176f818c5da564e12
small rewrite in common_size

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/common_size.m: Partially rewrite using cellindexmat.
+
 2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Use @vec instead of @(x) x(:) for faster call.
 
 2010-09-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pkg/get_forge_pkg.m: Allow underscores in pkg names.
 
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -66,20 +66,16 @@ function [errorcode, varargout] = common
       errorcode = 1;
       varargout = varargin;
     else
       errorcode = 0;
       if (nargout > 1)
         scal = !nscal;
         varargout = varargin;
         if (any (nscal))
-          ## This could also be achieved by cellfun (@repmat, ...), but repmat is an
-          ## m-function and hence still carries interpreter overhead. Further,
-          ## cellfun is slightly optimized for the case used below.
-          uo = "uniformoutput";
           dims = size (varargin{find (nscal, 1)});
-          subs = substruct ("()", arrayfun (@ones, 1, dims, uo, false));
-          varargout(scal) = cellfun ("subsref", varargin(scal), {subs}, uo, false);
+          subs = arrayfun (@ones, 1, dims, "uniformoutput", false);
+          varargout(scal) = cellindexmat (varargin(scal), subs{:});
         endif
       endif
     endif
   endif
 endfunction
