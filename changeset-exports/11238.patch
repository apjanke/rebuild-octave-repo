# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289460632 18000
#      Thu Nov 11 02:30:32 2010 -0500
# Node ID 1783b360976f4268a823327e5730a59a26db6bb6
# Parent  110e570e5f8d11ee14acb49e327cd79f32ec3979
also consider parent classes when checking if class methods are out of date

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-11-11  John W. Eaton  <jwe@octave.org>
+
+	Bug #31165.
+
+	* symtab.h (symbol_table::parent_classes): New static function.
+	* symtab.cc (out_of_date_check): Also look for methods defined
+	in parent classes of dispatch_type.
+	(symbol_table::fcn_info::fcn_info_rep::load_class_method): Call
+	parent_classes instead of accessing parent_map directly.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (octave_main): Call octave_ieee_init here.
 	* sysdep.cc (sysdep_init): Not here.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc: Eliminate special case for __DECCXX.
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -203,18 +203,37 @@ out_of_date_check (octave_value& functio
                         file = nm;
                       else
                         {
                           // We don't want to make this an absolute name,
                           // because load_fcn_file looks at the name to
                           // decide whether it came from a relative lookup.
 
                           if (! dispatch_type.empty ())
-                            file = load_path::find_method (dispatch_type, nm,
-                                                           dir_name);
+                            {
+                              file = load_path::find_method (dispatch_type, nm,
+                                                             dir_name);
+
+                              if (file.empty ())
+                                {
+                                  const std::list<std::string>& plist
+                                    = symbol_table::parent_classes (dispatch_type);
+                                  std::list<std::string>::const_iterator it
+                                    = plist.begin ();
+
+                                  while (it != plist.end ())
+                                    {
+                                      file = load_path::find_method (*it, nm, dir_name);
+                                      if (! file.empty ())
+                                        break;
+
+                                      it++;
+                                    }
+                                }
+                            }
 
                           // Maybe it's an autoload?
                           if (file.empty ())
                             file = lookup_autoload (nm);
 
                           if (file.empty ())
                             file = load_path::find_fcn (nm, dir_name);
                         }
@@ -382,35 +401,31 @@ symbol_table::fcn_info::fcn_info_rep::lo
               class_methods[dispatch_type] = retval;
             }
         }
 
       if (retval.is_undefined ())
         {
           // Search parent classes
 
-          const_parent_map_iterator r = parent_map.find (dispatch_type);
+          const std::list<std::string>& plist = parent_classes (dispatch_type);
 
-          if (r != parent_map.end ())
+          std::list<std::string>::const_iterator it = plist.begin ();
+
+          while (it != plist.end ())
             {
-              const std::list<std::string>& plist = r->second;
-              std::list<std::string>::const_iterator it = plist.begin ();
+              retval = find_method (*it);
 
-              while (it != plist.end ())
+              if (retval.is_defined ()) 
                 {
-                  retval = find_method (*it);
+                  class_methods[dispatch_type] = retval;
+                  break;
+                }
 
-                  if (retval.is_defined ()) 
-                    {
-                      class_methods[dispatch_type] = retval;
-                      break;
-                    }
-
-                  it++;
-                }
+              it++;
             }
         }
     }
 
   return retval;
 }
 
 void
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1820,16 +1820,29 @@ public:
                                                const std::string& dir_name);
 
   static void add_to_parent_map (const std::string& classname,
                                  const std::list<std::string>& parent_list)
   {
     parent_map[classname] = parent_list;
   }
 
+  static std::list<std::string>
+  parent_classes (const std::string& dispatch_type)
+  {
+    std::list<std::string> retval;
+
+    const_parent_map_iterator it = parent_map.find (dispatch_type);
+
+    if (it != parent_map.end ())
+      retval = it->second;
+
+    return retval;
+  }
+
   static octave_user_function *get_curr_fcn (scope_id scope = xcurrent_scope)
     {
       symbol_table *inst = get_instance (scope);
       return inst->curr_fcn;
     }
 
   static void set_curr_fcn (octave_user_function *curr_fcn,
                             scope_id scope = xcurrent_scope)
