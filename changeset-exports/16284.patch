# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363036834 14400
#      Mon Mar 11 17:20:34 2013 -0400
# Node ID 09881dab3aaf02716c0a0ff320ff2e884862187e
# Parent  9a85870f2bc1fc3dee36f3e6a0f66fd23b4bcf6f
* lex.ll, oct-parse.in.yy (HERMITIAN): Rename token from QUOTE.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -508,18 +508,16 @@ public:
   bool have_continuation (bool trailing_comments_ok = true);
 
   bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 
   int handle_string (char delim);
 
   int handle_close_bracket (int bracket_type);
 
-  bool next_token_can_follow_bin_op (void);
-
   bool looks_like_command_arg (void);
 
   int handle_superclass_identifier (void);
 
   int handle_meta_identifier (void);
 
   int handle_identifier (void);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -789,31 +789,31 @@ ANY_INCLUDING_NL (.|{NL})
                     || curr_lexer->previous_token_is_binop ()
                     || curr_lexer->previous_token_is_keyword ())
                   {
                     curr_lexer->current_input_column++;
                     int retval = curr_lexer->handle_string ('\'');
                     return curr_lexer->count_token_internal (retval);
                   }
                 else
-                  return curr_lexer->count_token (QUOTE);
+                  return curr_lexer->count_token (HERMITIAN);
               }
           }
         else
           {
             if (! tok || tok == '[' || tok == '{' || tok == '('
                 || curr_lexer->previous_token_is_binop ()
                 || curr_lexer->previous_token_is_keyword ())
               {
                 curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('\'');
                 return curr_lexer->count_token_internal (retval);
               }
             else
-              return curr_lexer->count_token (QUOTE);
+              return curr_lexer->count_token (HERMITIAN);
           }
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
@@ -2719,17 +2719,17 @@ octave_lexer::display_token (int tok)
     case EXPR_GE: std::cerr << "EXPR_GE\n"; break;
     case EXPR_GT: std::cerr << "EXPR_GT\n"; break;
     case LEFTDIV: std::cerr << "LEFTDIV\n"; break;
     case EMUL: std::cerr << "EMUL\n"; break;
     case EDIV: std::cerr << "EDIV\n"; break;
     case ELEFTDIV: std::cerr << "ELEFTDIV\n"; break;
     case EPLUS: std::cerr << "EPLUS\n"; break;
     case EMINUS: std::cerr << "EMINUS\n"; break;
-    case QUOTE: std::cerr << "QUOTE\n"; break;
+    case HERMITIAN: std::cerr << "HERMITIAN\n"; break;
     case TRANSPOSE: std::cerr << "TRANSPOSE\n"; break;
     case PLUS_PLUS: std::cerr << "PLUS_PLUS\n"; break;
     case MINUS_MINUS: std::cerr << "MINUS_MINUS\n"; break;
     case POW: std::cerr << "POW\n"; break;
     case EPOW: std::cerr << "EPOW\n"; break;
 
     case NUM:
     case IMAG_NUM:
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -201,17 +201,17 @@ make_statement (T *arg)
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ
 %token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ AND_EQ OR_EQ
 %token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
-%token <tok_val> QUOTE TRANSPOSE
+%token <tok_val> HERMITIAN TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> STRUCT_ELT
 %token <tok_val> NAME
 %token <tok_val> END
 %token <tok_val> DQ_STRING SQ_STRING
 %token <tok_val> FOR PARFOR WHILE DO UNTIL
 %token <tok_val> IF ELSEIF ELSE
@@ -293,17 +293,17 @@ make_statement (T *arg)
 %left EXPR_OR
 %left EXPR_AND
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %right UNARY EXPR_NOT
-%left POW EPOW QUOTE TRANSPOSE
+%left POW EPOW HERMITIAN TRANSPOSE
 %right PLUS_PLUS MINUS_MINUS
 %left '(' '.' '{'
 
 // Where to start.
 %start input
 
 %%
 
@@ -565,18 +565,18 @@ oper_expr       : primary_expr
                 | oper_expr '(' ')'
                   { $$ = curr_parser.make_index_expression ($1, 0, '('); }
                 | oper_expr '(' arg_list ')'
                   { $$ = curr_parser.make_index_expression ($1, $3, '('); }
                 | oper_expr '{' '}'
                   { $$ = curr_parser.make_index_expression ($1, 0, '{'); }
                 | oper_expr '{' arg_list '}'
                   { $$ = curr_parser.make_index_expression ($1, $3, '{'); }
-                | oper_expr QUOTE
-                  { $$ = curr_parser.make_postfix_op (QUOTE, $1, $2); }
+                | oper_expr HERMITIAN
+                  { $$ = curr_parser.make_postfix_op (HERMITIAN, $1, $2); }
                 | oper_expr TRANSPOSE
                   { $$ = curr_parser.make_postfix_op (TRANSPOSE, $1, $2); }
                 | oper_expr indirect_ref_op STRUCT_ELT
                   { $$ = curr_parser.make_indirect_ref ($1, $3->text ()); }
                 | oper_expr indirect_ref_op '(' expression ')'
                   { $$ = curr_parser.make_indirect_ref ($1, $4); }
                 | PLUS_PLUS oper_expr %prec UNARY
                   { $$ = curr_parser.make_prefix_op (PLUS_PLUS, $2, $1); }
@@ -2112,17 +2112,17 @@ octave_parser::make_prefix_op (int op, t
 
 tree_expression *
 octave_parser::make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
   octave_value::unary_op t = octave_value::unknown_unary_op;
 
   switch (op)
     {
-    case QUOTE:
+    case HERMITIAN:
       t = octave_value::op_hermitian;
       break;
 
     case TRANSPOSE:
       t = octave_value::op_transpose;
       break;
 
     case PLUS_PLUS:
