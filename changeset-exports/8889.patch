# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1235867769 18000
#      Sat Feb 28 19:36:09 2009 -0500
# Node ID 665b264b6a50d073eaeea878063f872e13b3128d
# Parent  0c7b0049c02353dcef0f29b1aca51eaa0a2c7c2b
Compatible support of figure paper properties and resolution for the gnuplot backend.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,43 @@
+2009-02-28  Ben Abbott <bpabbott@mac.com>
+
+	* plot/print.m, plot/gnuplot_drawnow.m: Add compatible support for
+	specificying resolution of bitmap terminals, "-r<num>".
+
+	* plot/gnuplot_drawnow.m: Check that canvas size is only specified
+	one time.
+
+	* plot/gnuplot_drawnow.m, plot/__go_draw_figure__.m: Support papersize,
+	paperposition properties. Accommodate gnuplot's implicit margins for
+	postscript terminals. Remove internal function get_canvassize().
+
+	* plot/gnuplot_drawnow.m:
+	Terminate gnuplot "set term ..." with semicolon.
+	Specify vector terminals sizes in floating point.
+	Rename internal function isbackend() to output_to_screen().
+	Rename internal function gnuplot_term() to gnuplot_default_term().
+	Rename internal function isbitmap() to term_units_are_pixels().
+	Minor changes for coding conventions.
+
+	* plot/__actual_axis_position__.m, Makefile.in: New function to
+	determine position of rendered axes, including the effect of the
+	aspect ratio.
+	* plot/__gnuplot_has_feature__.m: Add new feature
+	"screen_coordinates_for_{lrtb}margin".
+	* plot/__go_draw_axes__.m, plot/colorbar.m: Enable axes to be positioned
+	using {lrtb}margins.
+	* plot/colorbar.m: Add to, and modify, demos.
+
+	* plot/print.m: Remove non-functional/commented code.
+	* plot/__go_draw_figure__.m: Remove non-functional code.
+	* plot/__gnuplot_has_feature__.m: Remove non-functional code.
+
+	* plot/quiver3.m: Add "clf" and "colormap(jet(64))" to demo.
+
 2009-02-27  John W. Eaton  <jwe@octave.org>
 
 	* set/complement.m: Call unique, not create_set.
 	* set/unique.m: Style fix for docstring.
 	* deprecated/create_set.m: Move here from set/create_set.m.
 	Always return a row vector, as documented.
 
 	* set/Makefile.in (SOURCES): Remove create_set.m from the list.
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -29,16 +29,17 @@ VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = \
+  __actual_axis_position__.m \
   __add_datasource__.m \
   __area__.m \
   __axes_limits__.m \
   __axis_label__.m \
   __bar__.m \
   __bars__.m \
   __clabel__.m \
   __contour__.m \
diff --git a/scripts/plot/__gnuplot_has_feature__.m b/scripts/plot/__gnuplot_has_feature__.m
--- a/scripts/plot/__gnuplot_has_feature__.m
+++ b/scripts/plot/__gnuplot_has_feature__.m
@@ -23,22 +23,23 @@
 ## Created: 2009-01-27
 
 function res = __gnuplot_has_feature__ (feature)
   persistent features has_features
   features = {"x11_figure_position",
               "transparent_patches",
               "transparent_surface",
               "epslatex_implies_eps_filesuffix",
-              "epslatexstandalone_terminal"};
+              "epslatexstandalone_terminal",
+              "screen_coordinates_for_{lrtb}margin",};
 
   if (isempty (has_features))
     gnuplot_version = __gnuplot_version__ ();
-    versions = {"4.2.4", "4.3", "4.3", "4.2", "4.2"};
-    operators = {">", ">=", ">=", ">=", ">="};
+    versions = {"4.2.4", "4.3", "4.3", "4.2", "4.2", "4.3"};
+    operators = {">", ">=", ">=", ">=", ">=", ">="};
     have_features = logical (zeros (size (features)));
     for n = 1 : numel (have_features)
       has_features(n) = compare_versions (gnuplot_version, versions{n}, operators{n});
     endfor
   endif
 
   n = find (strcmpi (feature, features));
   if (isempty (n))
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -18,45 +18,64 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __go_draw_axes__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __go_draw_axes__ (h, plot_stream, enhanced, mono)
+function __go_draw_axes__ (h, plot_stream, enhanced, mono, implicit_margin)
 
-  if (nargin == 4)
+  if (nargin >= 4 && nargin <= 5)
 
     axis_obj = __get__ (h);
 
     parent_figure_obj = get (axis_obj.parent);
 
-    pos = axis_obj.position;
-    fprintf (plot_stream, "set tmargin 0;\n");
-    fprintf (plot_stream, "set bmargin 0;\n");
-    fprintf (plot_stream, "set lmargin 0;\n");
-    fprintf (plot_stream, "set rmargin 0;\n");
-
     ## Set to false for plotyy axes.
     if (strcmp (axis_obj.tag, "plotyy"))
       ymirror = false;
     else
       ymirror = true;
     endif
 
-    fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
-    fprintf (plot_stream, "set size %.15g, %.15g;\n", pos(3), pos(4));
+    nd = __calc_dimensions__ (axis_obj);
+    pos = axis_obj.position;
+    pos = pos - implicit_margin([1, 2, 1, 2]).*[1, 1, -0.5, -0.5];
+    if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
+      if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+	pos = __actual_axis_position__ (axis_obj);
+      endif
+      if (nd == 2)
+	x = [1, 1];
+      else
+	## 3D plots need to be sized down to fit in the window.
+	x = 1.0 ./ sqrt([2, 2.5]);
+      endif
+      fprintf (plot_stream, "set tmargin screen %.15g;\n", pos(2)+pos(4)/2+x(2)*pos(4)/2);
+      fprintf (plot_stream, "set bmargin screen %.15g;\n", pos(2)+pos(4)/2-x(2)*pos(4)/2);
+      fprintf (plot_stream, "set lmargin screen %.15g;\n", pos(1)+pos(3)/2-x(1)*pos(3)/2);
+      fprintf (plot_stream, "set rmargin screen %.15g;\n", pos(1)+pos(3)/2+x(1)*pos(3)/2);
+    else
+      ## FIXME -- nothing should change for gnuplot 4.2.x.
+      fprintf (plot_stream, "set tmargin 0;\n");
+      fprintf (plot_stream, "set bmargin 0;\n");
+      fprintf (plot_stream, "set lmargin 0;\n");
+      fprintf (plot_stream, "set rmargin 0;\n");
 
-    if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
-      r = axis_obj.dataaspectratio;
-      fprintf (plot_stream, "set size ratio %.15g;\n", -r(2)/r(1));
-    else
-      fputs (plot_stream, "set size noratio;\n");
+      fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
+      fprintf (plot_stream, "set size %.15g, %.15g;\n", pos(3), pos(4));
+
+      if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+        r = axis_obj.dataaspectratio;
+        fprintf (plot_stream, "set size ratio %.15g;\n", -r(2)/r(1));
+      else
+        fputs (plot_stream, "set size noratio;\n");
+      endif
     endif
 
     fputs (plot_stream, "unset label;\n");
 
     if (! isempty (axis_obj.title))
       t = get (axis_obj.title);
       if (isempty (t.string))
 	fputs (plot_stream, "unset title;\n");
@@ -265,18 +284,16 @@ function __go_draw_axes__ (h, plot_strea
     cautoscale = strcmpi (axis_obj.climmode, "auto");
     cdatadirect = false;
     truecolor = false;
 
     fputs (plot_stream, "set clip two;\n");
 
     kids = axis_obj.children;
 
-    nd = __calc_dimensions__ (axis_obj);
-
     if (nd == 3)
       fputs (plot_stream, "set parametric;\n");
       fputs (plot_stream, "set style data lines;\n");
       fputs (plot_stream, "set surface;\n");
       fputs (plot_stream, "unset contour;\n");
     endif
 
     data_idx = 0;
@@ -1970,8 +1987,9 @@ function typ = get_old_gnuplot_color (co
   elseif (isequal (color, [1, 1, 1]))
     typ = -1;
   elseif (isequal (color, [1, 1, 0]))
     typ = 7;
   else
     typ = -1;
   endif
 endfunction
+
diff --git a/scripts/plot/__go_draw_figure__.m b/scripts/plot/__go_draw_figure__.m
--- a/scripts/plot/__go_draw_figure__.m
+++ b/scripts/plot/__go_draw_figure__.m
@@ -18,52 +18,84 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __go_draw_figure__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __go_draw_figure__ (h, plot_stream, enhanced, mono)
+function __go_draw_figure__ (h, plot_stream, enhanced, mono, output_to_paper, implicit_margin)
 
-  if (nargin == 4)
+  if (nargin < 5)
+    output_to_paper = false;
+  elseif (nargin < 6)
+    ## Gnuplot has implicit margins for some output. For example, for postscript
+    ## the margin is 50pts. If not specified asssume 0.
+    implicit_margin = 0;
+  endif
+
+  if (nargin >= 4 && nargin <= 6)
     htype = get (h, "type");
     if (strcmp (htype, "figure"))
 
       ## Set figure properties here?
 
+      ## For output, determine the normalized paperposition.
+      if (output_to_paper)
+	orig_paper_units = get (h, "paperunits");
+	unwind_protect
+	  set (h, "paperunits", "inches");
+          paper_size = get (h, "papersize");
+          paper_position = get (h, "paperposition");
+          paper_position = paper_position ./ paper_size([1, 2, 1, 2]);
+	  implicit_margin = implicit_margin ./ paper_size([1, 2]);
+	unwind_protect_cleanup
+	  set (h, "paperunits", orig_paper_units);
+	end_unwind_protect
+      else
+	implicit_margin = implicit_margin * [1 1];
+      endif
+
       ## Get complete list of children.
       kids = allchild (h);
       nkids = length (kids);
 
       if (nkids > 0)
-	axes_count = 0;
-	for i = 1:nkids
-	  obj = __get__ (kids(i));
-	  switch (obj.type)
-	    case "axes"
-	      axes_count++;
-	  endswitch
-	endfor
 
 	fputs (plot_stream, "\nreset;\n");
 	fputs (plot_stream, "set autoscale fix;\n");
 	fputs (plot_stream, "set multiplot;\n");
 	fputs (plot_stream, "set origin 0, 0\n");
 	fputs (plot_stream, "set size 1, 1\n");
 
 	for i = 1:nkids
-	  obj = get (kids(i));
-	  switch (obj.type)
+	  type = get (kids(i), "type");
+	  switch (type)
 	    case "axes"
-	      __go_draw_axes__ (kids (i), plot_stream, enhanced, mono);
+	      ## Rely upon listener to convert axes position to "normalized" units.
+	      orig_axes_units = get (kids(i), "units");
+  	      orig_axes_position = get (kids(i), "position");
+	      unwind_protect
+		set (kids(i), "units", "normalized");
+		if (output_to_paper)
+	 	  axes_position_on_page = orig_axes_position .* paper_position([3, 4, 3 ,4]);
+		  axes_position_on_page(1:2) = axes_position_on_page(1:2) +  paper_position(1:2);
+		  set (kids(i), "position", axes_position_on_page);
+		  __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
+		else
+		  ## Return axes "units" and "position" back to their original values.
+		  __go_draw_axes__ (kids(i), plot_stream, enhanced, mono, implicit_margin);
+		endif
+	      unwind_protect_cleanup
+		set (kids(i), "units", orig_axes_units);
+		set (kids(i), "position", orig_axes_position);
+	      end_unwind_protect
 	    otherwise
-	      error ("__go_draw_figure__: unknown object class, %s",
-		     obj.type);
+	      error ("__go_draw_figure__: unknown object class, %s", type);
 	  endswitch
 	endfor
 
 	fputs (plot_stream, "unset multiplot;\n");
       else
 	fputs (plot_stream, "\nreset; clear;\n");
 	fflush (plot_stream);
       endif
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -317,174 +317,230 @@ function [pos, cpos, vertical, mirr, asp
       sz = sz .* [0.06, 1.0] .* 0.9;
       mirr = true;
       vertical = true;
   endswitch
 
   cpos = [origin, sz];
 
   if (strcmpi (obj.dataaspectratiomode, "manual"))
-    r = obj.dataaspectratio;
-
-    if (pos(3) > pos(4))
-      if (vertical)
-	aspect = [1, 0.21, 1];
+    if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
+      obj.position = pos;
+      actual_pos = __actual_axis_position__ (obj);
+      if (strfind (cbox, "outside"))
+	scale = 1.0;
       else
-	aspect = [0.21, 1, 1];
+	scale = 0.9;
       endif
+      if (sz(1) > sz(2))
+	dx = (1-scale)*actual_pos(3);
+	cpos(1) = actual_pos(1) + dx/2;
+	cpos(3) = actual_pos(3) - dx;
+      else
+	dy = (1-scale)*actual_pos(4);
+	cpos(2) = actual_pos(2) + dy/2;
+	cpos(4) = actual_pos(4) - dy;
+      endif
+      aspect = NaN;
     else
       if (vertical)
 	aspect = [1, 0.21, 1];
       else
 	aspect = [0.21, 1, 1];
       endif
     endif
   else
     aspect = NaN;
   endif
 
 endfunction
 
 %!demo
-%! hold off;
 %! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! imagesc(x)
 %! colorbar();
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! imagesc(x)
 %! colorbar("westoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! imagesc(x)
 %! colorbar("northoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! imagesc(x)
 %! colorbar("southoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! subplot(2,2,1)
 %! contour(peaks())
 %! colorbar("east");
 %! subplot(2,2,2)
 %! contour(peaks())
 %! colorbar("west");
 %! subplot(2,2,3)
 %! contour(peaks())
 %! colorbar("north");
 %! subplot(2,2,4)
 %! contour(peaks())
 %! colorbar("south");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(2,2,1)
 %! imagesc(x)
 %! colorbar();
 %! subplot(2,2,2)
 %! imagesc(x)
 %! colorbar("westoutside");
 %! subplot(2,2,3)
 %! imagesc(x)
 %! colorbar("northoutside");
 %! subplot(2,2,4)
 %! imagesc(x)
 %! colorbar("southoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(1,2,1)
 %! imagesc(x)
 %! axis square;
 %! colorbar();
 %! subplot(1,2,2)
 %! imagesc(x)
 %! axis square;
 %! colorbar("westoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(1,2,1)
 %! imagesc(x)
 %! axis square;
 %! colorbar("northoutside");
 %! subplot(1,2,2)
 %! imagesc(x)
 %! axis square;
 %! colorbar("southoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(2,1,1)
 %! imagesc(x)
 %! axis square;
 %! colorbar();
 %! subplot(2,1,2)
 %! imagesc(x)
 %! axis square;
 %! colorbar("westoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(2,1,1)
 %! imagesc(x)
 %! axis square;
 %! colorbar("northoutside");
 %! subplot(2,1,2)
 %! imagesc(x)
 %! axis square;
 %! colorbar("southoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(1,2,1)
 %! imagesc(x)
 %! colorbar();
 %! subplot(1,2,2)
 %! imagesc(x)
 %! colorbar("westoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(1,2,1)
 %! imagesc(x)
 %! colorbar("northoutside");
 %! subplot(1,2,2)
 %! imagesc(x)
 %! colorbar("southoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(2,1,1)
 %! imagesc(x)
 %! colorbar();
 %! subplot(2,1,2)
 %! imagesc(x)
 %! colorbar("westoutside");
 
 %!demo
-%! hold off;
+%! clf
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! subplot(2,1,1)
 %! imagesc(x)
 %! colorbar("northoutside");
 %! subplot(2,1,2)
 %! imagesc(x)
 %! colorbar("southoutside");
 
+%!demo
+%! clf
+%! locations = {"northoutside", "north", "southoutside", "south",
+%!              "westoutside", "west", "eastoutside", "east"};
+%! n = 64;
+%! x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
+%! x = x .* fliplr (x) / 32^2;
+%! for r = 1:2
+%!   for c = 1:4
+%!     n = 2*(c-1) + r;
+%!     subplot (2, 4, n)
+%!     contour (x)
+%!     xlim ([1, 64])
+%!     ylim ([1, 64])
+%!     set (gca, "clim", [0, 1])
+%!     colorbar (locations{n});
+%!   endfor
+%! endfor
 
+%!demo
+%! clf
+%! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
+%! subplot(1,2,1)
+%! contour(x)
+%! axis square;
+%! colorbar("east");
+%! xlim ([1, 64])
+%! ylim ([1, 64])
+%! subplot(1,2,2)
+%! imagesc(x)
+%! axis square;
+%! colorbar()
+
+%!demo
+%! clf
+%! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
+%! subplot(1,2,1)
+%! contour(x)
+%! axis square;
+%! colorbar("east");
+%! xlim ([1, 64])
+%! ylim ([1, 64])
+%! subplot(1,2,2)
+%! contour(x)
+%! colorbar("west");
+%! xlim ([1, 64])
+%! ylim ([1, 64])
+
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -33,24 +33,25 @@ function gnuplot_drawnow (h, term, file,
     mono = false;
   endif
 
   if (nargin >= 3 && nargin <= 5)
     ## Produce various output formats, or redirect gnuplot stream to a
     ## debug file.
     plot_stream = [];
     fid = [];
+    printing = ! output_to_screen (gnuplot_trim_term (term));
     unwind_protect
       plot_stream = open_gnuplot_stream (1, []);
-      enhanced = gnuplot_set_term (plot_stream (1), true, h, term, file);
-      __go_draw_figure__ (h, plot_stream, enhanced, mono);
+      [enhanced, implicit_margin] = gnuplot_set_term (plot_stream (1), true, h, term, file);
+      __go_draw_figure__ (h, plot_stream, enhanced, mono, printing, implicit_margin);
       if (nargin == 5)
         fid = fopen (debug_file, "wb");
         enhanced = gnuplot_set_term (fid, true, h, term, file);
-        __go_draw_figure__ (h, fid, enhanced, mono);
+        __go_draw_figure__ (h, fid, enhanced, mono, printing, implicit_margin);
       endif
     unwind_protect_cleanup
       if (! isempty (plot_stream))
         pclose (plot_stream);
       endif
       if (! isempty (fid))
         fclose (fid);
       endif
@@ -60,24 +61,33 @@ function gnuplot_drawnow (h, term, file,
     plot_stream = get (h, "__plot_stream__");
     if (isempty (plot_stream))
       plot_stream = open_gnuplot_stream (2, h);
       new_stream = true;
     else
       new_stream = false;
     endif
     enhanced = gnuplot_set_term (plot_stream (1), new_stream, h);
-    __go_draw_figure__ (h, plot_stream (1), enhanced, mono);
+    __go_draw_figure__ (h, plot_stream (1), enhanced, mono, 0);
     fflush (plot_stream (1));
   else
     print_usage ();
   endif
 
 endfunction
 
+function implicit_margin = gnuplot_implicit_margin (term, opts_str)
+  ## gnuplot has an implicit margin of 50pts for PS output.
+  if (strcmpi (term, "postscript") && isempty (strfind (opts_str, "eps")))
+    implicit_margin = 50/72;
+  else
+    implicit_margin = 0.0;
+  endif
+endfunction
+
 function plot_stream = open_gnuplot_stream (npipes, h)
   cmd = gnuplot_binary ();
   if (npipes > 1)
     [plot_stream(1), plot_stream(2), pid] = popen2 (cmd);
     if (pid < 0)
       error ("drawnow: failed to open connection to gnuplot");
     endif
   else
@@ -86,46 +96,52 @@ function plot_stream = open_gnuplot_stre
       error ("drawnow: failed to open connection to gnuplot");
     endif
   endif
   if (! isempty (h))
     set (h, "__plot_stream__", plot_stream);
   endif
 endfunction
 
-function enhanced = gnuplot_set_term (plot_stream, new_stream, h, term, file)
+function [enhanced, implicit_margin] = gnuplot_set_term (plot_stream, new_stream, h, term, file)
   ## Generate the gnuplot "set terminal <term> ..." command.  Include
   ## the subset of properties "position", "units", "paperposition",
   ## "paperunits", "name", and "numbertitle".  When "term" originates
   ## from print.m, it may include gnuplot terminal options.
   if (nargin < 4)
     ## This supports the gnuplot backend.
-    term = gnuplot_term ();
+    term = gnuplot_default_term ();
     opts_str = "";
   else
     ## Get the one word terminal id and save the remaining as options to
     ## be passed on to gnuplot.  The terminal may respect the backend.
     [term, opts_str] = gnuplot_trim_term (term);
+    if (strcmpi (term, "pdf") && strcmpi (opts_str, "color"))
+      ## FIXME -- "color" for the pdf terminal produces a gnuplot error.
+      opts_str = "";
+    endif
   endif
 
+  implicit_margin = gnuplot_implicit_margin (term, opts_str);
+
   enhanced = gnuplot_is_enhanced_term (term);
 
   ## Set the terminal.
   if (! isempty (term))
 
     if (enhanced)
       enh_str = "enhanced";
     else
       enh_str = "";
     endif
 
     if (! isempty (h) && isfigure (h))
 
       ## Generate gnuoplot title string for backend plot windows.
-      if (isbackend (term))
+      if (output_to_screen (term))
         fig.numbertitle = get (h, "numbertitle");
         fig.name = get (h, "name");
         if (strcmpi (get (h, "numbertitle"), "on"))
           title_str = sprintf ("Figure %d", h);
         else
           title_str = "";
         endif
         if (! isempty (fig.name) && ! isempty (title_str))
@@ -134,57 +150,73 @@ function enhanced = gnuplot_set_term (pl
           title_str = fig.name;
         endif
         if (! isempty (title_str))
           title_str = sprintf ("title \"%s\"", title_str);
         endif
       else
         title_str = "";
       endif
-
-      if (isempty (strfind (opts_str, " size ")))
+      if (! (any (strfind (opts_str, " size ") > 0) 
+	  || any (strfind (opts_str, "size ") == 1)))
         ## Convert position to units used by gnuplot.
-        if (isbackend (term))
+        if (output_to_screen (term))
           ## Get figure size in pixels.
           [gnuplot_size, gnuplot_pos] = get_figsize (h);
         else
           ## Get size of the printed plot in inches.
-          gnuplot_size = get_canvassize (h);
-          ## If the output is a bitmap, convert to pixels.
-          if (isbitmap (term) || strcmpi (term, "svg"))
-            gnuplot_size = gnuplot_size * get (0, "screenpixelsperinch");
+          gnuplot_size = get_papersize (h);
+          if (term_units_are_pixels (term))
+ 	    ## Convert to inches using the property set by print().
+	    gnuplot_size = gnuplot_size * get (h, "__pixels_per_inch__");
+	  else
+	    ## Implicit margins are in units of "inches"
+	    gnuplot_size = gnuplot_size - implicit_margin;
           endif
         endif
+	[begin_match, end_match, te, match] = regexp (opts_str, "(\\s-r\\d+)|(^-r\\d+)");
+	if (! isempty (begin_match))
+	  error ("gnuplot_drawnow.m: specifying resultion, '%s', not supported for terminal '%s'",
+	         strtrim (match{1}), term)
+	endif
         if (all (gnuplot_size > 0))
           ## Set terminal size.
           terminals_with_size = {"emf", "gif", "jpeg", "latex", "pbm", ...
                                  "pdf", "png", "postscript", "svg", "wxt", ...
                                  "epslatex", "pstex", "pslatex"};
-          if (__gnuplot_has_feature__("x11_figure_position"))
+          if (__gnuplot_has_feature__ ("x11_figure_position"))
             terminals_with_size{end+1} = "x11";
           endif
           if (any (strncmpi (term, terminals_with_size, 3)))
-            size_str = sprintf ("size %d,%d", gnuplot_size(1), gnuplot_size(2));
-            if (strncmpi (term, "X11", 3))
+	    if (term_units_are_pixels (term))
+              size_str = sprintf ("size %d,%d", gnuplot_size(1), gnuplot_size(2));
+	    else
+              size_str = sprintf ("size %.15g,%.15g", gnuplot_size(1), gnuplot_size(2));
+	    endif
+            if (strncmpi (term, "X11", 3) && __gnuplot_has_feature__ ("x11_figure_position"))
+	      ## X11 allows the window to be positioned as well.
               screen_size = get (0, "screensize")(3:4);
               if (all (screen_size > 0))
                 ## For X11, set the figure positon as well as the size
                 ## gnuplot position is UL, Octave's is LL (same for screen/window)
                 gnuplot_pos(2) = screen_size(2) - gnuplot_pos(2) - gnuplot_size(2);
                 gnuplot_pos = max (gnuplot_pos, 1);
                 size_str = sprintf ("%s position %d,%d", size_str, 
                                     gnuplot_pos(1), gnuplot_pos(2));
               endif
             endif
-          elseif (any (strncmpi (term, {"aqua", "fig"}, 3)))
-            ## Aqua and Fig also have size, but the format is different.
+          elseif (strncmpi (term, "aqua", 3))
+            ## Aqua has size, but the format is different.
             size_str = sprintf ("size %d %d", gnuplot_size(1), gnuplot_size(2));
+          elseif (strncmpi (term, "fig", 3))
+            ## Fig also has size, but the format is different.
+            size_str = sprintf ("size %.15g %.15g", gnuplot_size(1), gnuplot_size(2));
           elseif (any (strncmpi (term, {"corel", "hpgl"}, 3)))
             ## The size for corel and hpgl are goes at the end (implicit).
-            size_str = sprintf ("%d %d",gnuplot_size(1), gnuplot_size(2));
+            size_str = sprintf ("%.15g %.15g",gnuplot_size(1), gnuplot_size(2));
           elseif (any (strncmpi (term, {"dxf"}, 3)))
             ## DXF uses autocad units.
             size_str = "";
           else
             size_str = "";
           endif
         else
           size_str = "";
@@ -223,32 +255,33 @@ function enhanced = gnuplot_set_term (pl
         ## size_str goes last to permit specification of canvas size
         ## for terminals cdr/corel.
         term_str = sprintf ("%s %s", term_str, size_str);
       endif
       if (nargin > 3 && ischar (opts_str))
         ## Options must go last.
         term_str = sprintf ("%s %s", term_str, opts_str);
       endif
-      fprintf (plot_stream, sprintf ("%s\n", term_str));
+      fprintf (plot_stream, sprintf ("%s;\n", term_str));
     else
       ## gnuplot will pick up the GNUTERM environment variable itself
       ## so no need to set the terminal type if not also setting the
       ## figure title, enhanced mode, or position.
     endif
   endif
 
   if (nargin == 5)
     if (! isempty (file))
       fprintf (plot_stream, "set output \"%s\";\n", file);
     endif
   endif
+
 endfunction
 
-function term = gnuplot_term ()
+function term = gnuplot_default_term ()
   term = getenv ("GNUTERM");
   ## If not specified, guess the terminal type.
   if (isempty (term))
     if (ismac ())
       term = "aqua";
     elseif (! isunix ())
       term = "windows";
     else
@@ -275,40 +308,34 @@ function have_enhanced = gnuplot_is_enha
   if (isempty (enhanced_terminals))
     ## Don't include pstex, pslatex or epslatex here as the TeX commands
     ## should not be interpreted in that case.
     enhanced_terminals = {"aqua", "dumb", "png", "jpeg", "gif", "pm", ...
                           "windows", "wxt", "svg", "postscript", "x11", "pdf"};
   endif
   if (nargin < 1)
     ## Determine the default gnuplot terminal.
-    term = gnuplot_term ();
+    term = gnuplot_default_term ();
   endif
   have_enhanced = false;
   for n = 1 : length (enhanced_terminals)
     t = enhanced_terminals{n};
     if (strncmp (term, t, min (length (term), length (t))))
       have_enhanced = true;
       break;
     endif
   endfor
 endfunction
 
-function ret = isbackend (term)
-  if (nargin == 0)
-    term = gnuplot_term ();
-  endif
+function ret = output_to_screen (term)
   ret = any (strcmpi ({"aqua", "wxt", "x11", "windows", "pm"}, term));
 endfunction
 
-function ret = isbitmap (term)
-  if (nargin == 0)
-    term = gnuplot_term ();
-  endif
-  ret = any (strcmpi ({"png", "jpeg", "gif", "pbm"}, term));
+function ret = term_units_are_pixels (term)
+  ret = any (strcmpi ({"png", "jpeg", "gif", "pbm", "svg"}, term));
 endfunction
 
 function [fig_size, fig_pos] = get_figsize (h)
   ## Determine the size of the figure in pixels.
   position = get (h, "position");
   units = get (h, "units");
   t.inches      = 1;
   t.centimeters = 2.54;
@@ -320,36 +347,19 @@ function [fig_size, fig_pos] = get_figsi
   fig_size = position(3:4) * (t.pixels / t.(units));
   fig_pos  = position(1:2) * (t.pixels / t.(units));
   fig_pos(1) = max (min (fig_pos(1), screensize(1)), 10);
   fig_pos(2) = max (min (fig_pos(2), screensize(2)), 10);
   fig_size(1) = max (min (fig_size(1), screensize(1)), 10-fig_pos(1));
   fig_size(2) = max (min (fig_size(2), screensize(2)), 10-fig_pos(2));
 endfunction
 
-function plotsize = get_canvassize (h)
-  ## Returns the intended size of the plot on the page in inches. 
-  ## "canvas size" is a gnuplot term. Gnuplot doesn't explicity plot to
-  ## an area/position on a page. Instead it plots to a "canvas" of a 
-  ## explicit or implicit size.
-  t.points      = get (0, "screenpixelsperinch");
-  t.centimeters = 2.54;
-  t.inches      = 1.00;
-  papersize = get_papersize (h);
-  paperunits = get (h, "paperunits");
-  paperposition = get (h, "paperposition") / t.(paperunits);
-  if (strcmpi (paperunits, "normalized"))
-    plotsize = papersize .* paperposition(3:4);
-  else
-    plotsize = paperposition(3:4);
-  endif
-endfunction
-
 function papersize = get_papersize (h)
   ## Returns the papersize in inches
+  ## FIXME - a listener should hanlde this.
   persistent papertypes papersizes
   if (isempty (papertypes))
     papertypes = {"usletter", "uslegal", ...
                  "a0", "a1", "a2", "a3", "a4", "a5", ...
                  "b0", "b1", "b2", "b3", "b4", "b5", ...
                  "arch-a", "arch-b", "arch-c", "arch-d", "arch-e", ...
                  "a", "b", "c", "d", "e", ...
                  "tabloid", "<custom>"};
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -100,16 +100,19 @@
 ##   @end table
 ##
 ##   Other devices are supported by "convert" from ImageMagick.  Type
 ##   system("convert") to see what formats are available.
 ##
 ##   If the device is omitted, it is inferred from the file extension,
 ##   or if there is no filename it is sent to the printer as postscript.
 ##
+## @itemx -r@var{NUM}
+##   Resolution of bitmaps in pixels per inch.
+##
 ## @itemx -S@var{xsize},@var{ysize}
 ##   Plot size in pixels for PNG and SVG.  If using the command form of
 ##   the print function, you must quote the @var{xsize},@var{ysize}
 ##   option.  For example, by writing @code{"-S640,480"}.
 ##
 ## @item -F@var{fontname}
 ## @itemx -F@var{fontname}:@var{size}
 ## @itemx -F:@var{size}
@@ -135,16 +138,17 @@ function print (varargin)
   font = "";
   size = "";
   name = "";
   devopt = "";
   printer = "";
   debug = false;
   debug_file = "octave-print-commands.log";
   special_flag = "textnormal";
+  resolution = "";
 
   old_fig = get (0, "currentfigure");
   unwind_protect
     ## Ensure the last figure is on the screen for single line commands like
     ##   plot(...); print(...);
     drawnow ();
 
     for i = 1:nargin
@@ -178,16 +182,18 @@ function print (varargin)
 	  if (idx)
 	    font = arg(3:idx-1);
 	    fontsize = arg(idx+1:length(arg));
 	  else
 	    font = arg(3:length(arg));
 	  endif
         elseif (length (arg) > 2 && arg(1:2) == "-S")
 	  size = arg(3:length(arg));
+        elseif (length (arg) > 2 && arg(1:2) == "-r")
+	  resolution = arg(3:length(arg));
         elseif (length (arg) >= 1 && arg(1) == "-")
 	  error ("print: unknown option `%s'", arg);
 	elseif (length (arg) > 0)
 	  name = arg;
         endif
       elseif (isfigure (arg))
         figure (arg);
       else
@@ -358,26 +364,22 @@ function print (varargin)
 
       ## FIXME -- New PNG interface takes color as "xRRGGBB"
       ## where x is the literal character 'x' and 'RRGGBB' are the red,
       ## green and blue components in hex.  For now we just ignore it
       ## and use default.  The png terminal now is so rich with options,
       ## that one perhaps has to write a separate printpng.m function.
       ## DAS
 
-      ## if (use_color >= 0)
-      ##	eval (sprintf ("__gnuplot_set__ term %s color medium", dev));
-      ##else
-      ##eval (sprintf ("__gnuplot_set__ term %s mono medium", dev));
-      ##endif
-
-      if (isempty (size))
+      if (isempty (size) && isempty (resolution))
         options = " large";
+      elseif (! isempty (size))
+        options = cstrcat (" size ", size);
       else
-        options = cstrcat (" size ", size);
+	options = "";
       endif
       new_terminal = cstrcat (dev, options);
 
     elseif (strcmp (dev, "dxf") || strcmp (dev, "mf") || strcmp (dev, "hpgl"))
       ## AutoCad DXF, METAFONT, HPGL
       new_terminal = dev;
 
     elseif (strcmp (dev, "svg"))
@@ -409,16 +411,27 @@ function print (varargin)
       endif
 
       new_terminal = cstrcat ("pdf ", options);
 
     endif
 
     mono = use_color < 0;
 
+    if (isempty (resolution))
+      resolution = get (0, "screenpixelsperinch");
+    else
+      resolution = str2num (resolution);
+    endif
+    figure_properties = get (gcf);
+    if (! isfield (figure_properties, "__pixels_per_inch__"))
+      addproperty ("__pixels_per_inch__", gcf, "double", resolution);
+    endif
+    set (gcf, "__pixels_per_inch__", resolution)
+
     if (debug)
       drawnow (new_terminal, name, mono, debug_file);
     else
       drawnow (new_terminal, name, mono);
     endif
 
     if (! isempty (convertname))
       command = sprintf ("convert '%s' '%s'", name, convertname);
diff --git a/scripts/plot/quiver3.m b/scripts/plot/quiver3.m
--- a/scripts/plot/quiver3.m
+++ b/scripts/plot/quiver3.m
@@ -80,24 +80,31 @@ function retval = quiver3 (varargin)
 
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
 
 %!demo
+%! clf
+%! colormap (jet (64))
 %! [x,y]=meshgrid (-1:0.1:1); 
 %! z=sin(2*pi*sqrt(x.^2+y.^2)); 
 %! theta=2*pi*sqrt(x.^2+y.^2)+pi/2;
 %! quiver3(x,y,z,sin(theta),cos(theta),ones(size(z)));
 %! hold on; 
 %! mesh(x,y,z); 
 %! hold off;
 
 %!demo
+%! clf
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
 %! set (h, "maxheadsize", 0.33);
 %! hold off;
+
+%!demo
+%! shading interp
+
