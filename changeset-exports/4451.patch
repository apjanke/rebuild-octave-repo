# HG changeset patch
# User jwe
# Date 1057777749 0
#      Wed Jul 09 19:09:09 2003 +0000
# Node ID ea1d3e1a4b1b687d5631ab6981e3ee2147750494
# Parent  c81dd5832ad8fea840d6b84bec3003cb0c0fe375
[project @ 2003-07-09 19:09:09 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
+2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-mod.el (octave-variables): Include
+	DEFAULT_EXEC_PATH, DEFAULT_LOAD_PATH, crash_dumps_octave_core,
+	sighup_dumps_octave_core, sigterm_dumps_octave_core, and
+	warn_imag_to_real in the list.
+	Delete ok_to_lose_imaginary_part from list.	
+
 2003-07-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-default-vals): Substitute OCTAVE_API_VERSION.
 	* octave-config.in: Handle new variable OCTAVE_API_VERSION.
 
 	* octMakefile.in (DIRS_TO_MAKE): Delete undefined vars
 	$(localfcnfilepathdirs) and $(localoctfilepathdirs) from the list.
 
diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -722,17 +722,16 @@ variables may have been introduced since
   default_eval_print_flag = 0.0
   default_save_format = "mat-binary"
   define_all_return_values = 1.0
   do_fortran_indexing = 1.0
   empty_list_elements_ok = 1.0
   fixed_point_format = 1.0
   implicit_num_to_str_ok = 1.0
   implicit_str_to_num_ok = 1.0
-  ok_to_lose_imaginary_part = 1.0
   page_screen_output = 0.0
   prefer_column_vectors = 0.0
   prefer_zero_one_indexing = 1.0
   print_empty_dimensions = 0.0
   treat_neg_dim_as_zero = 1.0
   warn_function_name_clash = 0.0
   whitespace_in_literal_matrix = "traditional"
 @end group
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -159,17 +159,16 @@ PS1                           = ">> "
 PS2                           = ""
 beep_on_error                 = 1
 default_save_format           = "mat-binary"
 define_all_return_values      = 1
 do_fortran_indexing           = 1
 crash_dumps_octave_core       = 0
 empty_list_elements_ok        = 1
 implicit_str_to_num_ok        = 1
-ok_to_lose_imaginary_part     = 1
 page_screen_output            = 0
 prefer_column_vectors         = 0
 print_empty_dimensions        = 0
 treat_neg_dim_as_zero         = 1
 warn_function_name_clash      = 0
 whitespace_in_literal_matrix  = "traditional"
 @end example
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -172,32 +172,32 @@ Biomathematics at The University of Texa
 Houston, TX 77030.
 
 @DOCSTRING(randperm)
 
 @DOCSTRING(diag)
 
 @c XXX FIXME XXX -- is this really worth documenting?
 @c
-@c DOCSTRING(ok_to_lose_imaginary_part)
+@c DOCSTRING(warn_imag_to_real)
 @c 
 @c XXX FIXME XXX -- this is here because it is used by @code{ones},
 @c @code{zeros}, @code{rand}, etc.
 
 The functions @code{linspace} and @code{logspace} make it very easy to
 create vectors with evenly or logarithmically spaced elements.
 @xref{Ranges}.
 
 @DOCSTRING(linspace)
 
 @DOCSTRING(logspace)
 
 @DOCSTRING(treat_neg_dim_as_zero)
 
-@DOCSTRING(ok_to_lose_imaginary_part)
+@DOCSTRING(warn_imag_to_real)
 
 @node Famous Matrices
 @section Famous Matrices
 
 The following functions return famous matrix forms.
 
 @DOCSTRING(hankel)
 
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -311,21 +311,16 @@ Default value: 0.
 
 Default value: 0.
 
 @item max_recursion_depth
 @xref{Recursion}.
 
 Default value: 256.
 
-@item ok_to_lose_imaginary_part
-@xref{Special Utility Matrices}.
-
-Default value: @code{"warn"}.
-
 @item output_max_field_width
 @xref{Matrices}.
 
 Default value: 10.
 
 @item output_precision
 @xref{Matrices}.
 
@@ -416,16 +411,21 @@ Default value: 1.
 
 Default value: 1.
 
 @item warn_divide_by_zero
 @xref{Arithmetic Ops}.
 
 Default value: 1.
 
+@item warn_imag_to_real
+@xref{Special Utility Matrices}.
+
+Default value: 0.
+
 @item warn_function_name_clash
 @xref{Function Files}.
 
 Default value: 1.
 
 @item warn_reload_forces_clear
 @xref{Dynamically Linked Functions}.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -120,48 +120,52 @@ All Octave abbrevs start with a grave ac
 (defvar octave-text-functions
   '("casesen" "cd" "chdir" "clear" "diary" "dir" "document" "echo"
     "edit_history" "format" "gset" "gshow" "help" "history" "hold"
     "load" "ls" "more" "run_history" "save" "set" "show" "type"
     "which" "who" "whos")
   "Text functions in Octave (these names are also reserved).")
 
 (defvar octave-variables
-  '("EDITOR" "EXEC_PATH" "F_DUPFD" "F_GETFD" "F_GETFL" "F_SETFD"
+  '("DEFAULT_EXEC_PATH" "DEFAULT_LOADPATH"
+    "EDITOR" "EXEC_PATH" "F_DUPFD" "F_GETFD" "F_GETFL" "F_SETFD"
     "F_SETFL" "I" "IMAGEPATH" "INFO_FILE" "INFO_PROGRAM" "Inf" "J"
     "LOADPATH" "NaN" "OCTAVE_VERSION" "O_APPEND" "O_CREAT" "O_EXCL"
     "O_NONBLOCK" "O_RDONLY" "O_RDWR" "O_TRUNC" "O_WRONLY" "PAGER" "PS1"
     "PS2" "PS4" "PWD" "SEEK_CUR" "SEEK_END" "SEEK_SET" "__F_DUPFD__"
     "__F_GETFD__" "__F_GETFL__" "__F_SETFD__" "__F_SETFL__" "__I__"
     "__Inf__" "__J__" "__NaN__" "__OCTAVE_VERSION__" "__O_APPEND__"
     "__O_CREAT__" "__O_EXCL__" "__O_NONBLOCK__" "__O_RDONLY__"
     "__O_RDWR__" "__O_TRUNC__" "__O_WRONLY__" "__PWD__" "__SEEK_CUR__"
     "__SEEK_END__" "__SEEK_SET__" "__argv__" "__e__" "__eps__"
     "__error_text__" "__i__" "__inf__" "__j__" "__nan__" "__pi__"
     "__program_invocation_name__" "__program_name__" "__realmax__"
     "__realmin__" "__stderr__" "__stdin__" "__stdout__" "ans" "argv"
     "automatic_replot" "beep_on_error" "completion_append_char"
+    "crash_dumps_octave_core"
     "default_return_value" "default_save_format"
     "define_all_return_values" "do_fortran_indexing" "e"
     "echo_executing_commands" "empty_list_elements_ok" "eps"
     "error_text" "gnuplot_binary" "history_file"
     "history_size" "ignore_function_time_stamp" "implicit_str_to_num_ok"
-    "inf" "nan" "nargin" "ok_to_lose_imaginary_part"
+    "inf" "nan" "nargin"
     "output_max_field_width" "output_precision"
     "page_output_immediately" "page_screen_output" "pi"
     "prefer_column_vectors" "prefer_zero_one_indexing"
     "print_answer_id_name" "print_empty_dimensions"
     "program_invocation_name" "program_name" "propagate_empty_matrices"
     "realmax" "realmin" "resize_on_range_error"
     "return_last_computed_value" "save_precision" "saving_history"
+    "sighup_dumps_octave_core" "sigterm_dumps_octave_core"
     "silent_functions" "split_long_rows" "stderr" "stdin" "stdout"
     "string_fill_char" "struct_levels_to_print"
     "suppress_verbose_help_message" "treat_neg_dim_as_zero"
     "warn_assign_as_truth_value" "warn_comma_in_global_decl"
     "warn_divide_by_zero" "warn_function_name_clash"
+    "warn_imag_to_real"
     "warn_missing_semicolon" "whitespace_in_literal_matrix")
   "Builtin variables in Octave.")
 
 (defvar octave-function-header-regexp
   (concat "^\\s-*\\<\\(function\\)\\>"
 	  "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")
   "Regexp to match an Octave function header.
 The string `function' and its name are given by the first and third
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* miscellaneous/dump_prefs.m: Include DEFAULT_EXEC_PATH,
+	DEFAULT_LOAD_PATH, crash_dumps_octave_core,
+	sighup_dumps_octave_core, sigterm_dumps_octave_core, and
+	warn_imag_to_real in the list.
+	Delete ok_to_lose_imaginary_part from list.	
+
 2003-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (distclean, maintainer-clean): Also remove
 	gethelp$(BUILD_EXEEXT), $(DOCSTRINGS), and autom4te.cache
 	directory.
 
 2003-06-17  Aaron A. King <king@quercus.tiem.utk.edu>
 
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -32,29 +32,32 @@ function dump_prefs (file)
     file = stdout;
   endif
 
   ## XXX FIXME XXX -- it would be nice to be able to get the list of
   ## built-in variables directly from Octave so that we wouldn't have to
   ## remember to update it each time the list of preference variables
   ## changes
 
-  var_list = ["EDITOR";
+  var_list = ["DEFAULT_EXEC_PATH";
+	      "DEFAULT_LOADPATH";
+	      "EDITOR";
               "EXEC_PATH";
               "IMAGEPATH";
               "INFO_FILE";
               "INFO_PROGRAM";
               "LOADPATH";
               "PAGER";
               "PS1";
               "PS2";
               "PS4";
               "automatic_replot";
               "beep_on_error";
               "completion_append_char";
+              "crash_dumps_octave_core";
               "default_eval_print_flag";
               "default_global_variable_value";
               "default_return_value";
               "default_save_format";
               "define_all_return_values";
               "do_fortran_indexing";
               "echo_executing_commands";
               "empty_list_elements_ok";
@@ -70,40 +73,42 @@ function dump_prefs (file)
               "gnuplot_has_frames";
               "history_file";
               "history_size";
               "ignore_function_time_stamp";
               "implicit_num_to_str_ok";
               "implicit_str_to_num_ok";
               "initialize_global_variables";
               "max_recursion_depth";
-              "ok_to_lose_imaginary_part";
               "output_max_field_width";
               "output_precision";
               "page_output_immediately";
               "page_screen_output";
               "prefer_column_vectors";
               "print_answer_id_name";
               "print_empty_dimensions";
               "print_rhs_assign_val";
               "propagate_empty_matrices";
               "resize_on_range_error";
               "return_last_computed_value";
               "save_precision";
               "saving_history";
+              "sighup_dumps_octave_core";
+              "sigterm_dumps_octave_core";
               "silent_functions";
               "split_long_rows";
               "string_fill_char";
               "struct_levels_to_print";
               "suppress_verbose_help_message";
               "treat_neg_dim_as_zero";
               "warn_assign_as_truth_value";
               "warn_divide_by_zero";
               "warn_function_name_clash";
               "warn_future_time_stamp";
+              "warn_imag_to_real";
               "warn_missing_semicolon";
               "warn_variable_switch_label";
               "whitespace_in_literal_matrix"];
 
   for i = 1:rows(var_list)
     var = deblank (var_list(i,:));
     try
       fprintf (file, "  %s = %s\n", var, type ("-q", var));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.cc (Vwarn_imag_to_real): New variable.
+	(warn_imag_to_real): New function.
+	(symbols_of_ov): Add DEFVAR for warn_imag_to_real.
+	* ov.h (Vwarn_imag_to_real): Provide decl.
+
+	* ov.cc (Vok_to_lose_imaginary_part): Delete unused variable.
+	(ok_to_lose_imaginary_part): Delete unused function.
+	(symbols_of_ov): Delete DEFVAR for ok_to_lose_imaginary_part.
+	* ov.h (Vok_to_lose_imaginary_part): Delete decl.
+
+	* ov-complex.cc (octave_complex::double_value): Warn based on
+	Vwarn_imag_to_real instead of Vok_to_lose_imaginary_part.
+	(octave_complex::matrix_value): Likewise.
+	* ov-cx-mat.cc (octave_complex_matrix::double_value): Likewise.
+	(octave_complex_matrix::matrix_value): Likewise.
+
+	* octave.cc (maximum_braindamage): Don't set ok_to_lose_imaginary_part.
+
 2003-07-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (sig_hup_or_term_handler): New function.
 	(install_signal_handlers): Install sig_hup_or_term_handler for
 	SIGHUP and SIGTERM instead of generic_sig_handler.
 	(Vsighup_dumps_octave_core, Vsigterm_dumps_octave_core):
 	New static variables.
 	(sighup_dumps_octave_core, sigterm_dumps_octave_core):
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -350,17 +350,16 @@ maximum_braindamage (void)
   bind_builtin_variable ("default_global_variable_value", Matrix ());
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", true);
   bind_builtin_variable ("do_fortran_indexing", true);
   bind_builtin_variable ("fixed_point_format", true);
   bind_builtin_variable ("implicit_num_to_str_ok", true);
   bind_builtin_variable ("implicit_str_to_num_ok", true);
   bind_builtin_variable ("initialize_global_variables", true);
-  bind_builtin_variable ("ok_to_lose_imaginary_part", true);
   bind_builtin_variable ("page_screen_output", false);
   bind_builtin_variable ("prefer_column_vectors", false);
   bind_builtin_variable ("print_empty_dimensions", false);
   bind_builtin_variable ("treat_neg_dim_as_zero", true);
   bind_builtin_variable ("warn_function_name_clash", false);
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
 }
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -87,49 +87,33 @@ octave_complex::do_index_op (const octav
   return retval;
 }
 
 double
 octave_complex::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
-  int flag = force_conversion;
-
-  if (! flag)
-    flag = Vok_to_lose_imaginary_part;
-
-  if (flag < 0)
+  if (! force_conversion && Vwarn_imag_to_real)
     gripe_implicit_conversion ("complex scalar", "real scalar");
 
-  if (flag)
-    retval = std::real (scalar);
-  else
-    gripe_invalid_conversion ("complex scalar", "real scalar");
+  retval = std::real (scalar);
 
   return retval;
 }
 
 Matrix
 octave_complex::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
-  int flag = force_conversion;
-
-  if (! flag)
-    flag = Vok_to_lose_imaginary_part;
-
-  if (flag < 0)
+  if (! force_conversion && Vwarn_imag_to_real)
     gripe_implicit_conversion ("complex scalar", "real matrix");
 
-  if (flag)
-    retval = Matrix (1, 1, std::real (scalar));
-  else
-    gripe_invalid_conversion ("complex scalar", "real matrix");
+  retval = Matrix (1, 1, std::real (scalar));
 
   return retval;
 }
 
 Complex
 octave_complex::complex_value (bool) const
 {
   return scalar;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -127,55 +127,37 @@ octave_complex_matrix::valid_as_scalar_i
   return false;
 }
 
 double
 octave_complex_matrix::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
-  int flag = force_conversion;
-
-  if (! flag)
-    flag = Vok_to_lose_imaginary_part;
-
-  if (flag < 0)
+  if (! force_conversion && Vwarn_imag_to_real)
     gripe_implicit_conversion ("complex matrix", "real scalar");
 
-  if (flag)
-    {
-      if ((rows () == 1 && columns () == 1)
-	  || (Vdo_fortran_indexing && rows () > 0 && columns () > 0))
-	retval = std::real (matrix (0, 0));
-      else
-	gripe_invalid_conversion ("complex matrix", "real scalar");
-    }
+  if ((rows () == 1 && columns () == 1)
+      || (Vdo_fortran_indexing && rows () > 0 && columns () > 0))
+    retval = std::real (matrix (0, 0));
   else
     gripe_invalid_conversion ("complex matrix", "real scalar");
 
   return retval;
 }
 
 Matrix
 octave_complex_matrix::matrix_value (bool force_conversion) const
 {
   Matrix retval;
 
-  int flag = force_conversion;
-
-  if (! flag)
-    flag = Vok_to_lose_imaginary_part;
-
-  if (flag < 0)
+  if (! force_conversion && Vwarn_imag_to_real)
     gripe_implicit_conversion ("complex matrix", "real matrix");
 
-  if (flag)
-    retval = ::real (matrix);
-  else
-    gripe_invalid_conversion ("complex matrix", "real matrix");
+  retval = ::real (matrix);
 
   return retval;
 }
 
 Complex
 octave_complex_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -90,21 +90,18 @@ bool Vimplicit_num_to_str_ok;
 //   octave> 'abc' + 0
 //   97 98 99
 //
 // to happen?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
 int Vimplicit_str_to_num_ok;
 
-// Should we allow silent conversion of complex to real when a real
-// type is what we're really looking for?  A positive value means yes.
-// A negative value means yes, but print a warning message.  Zero
-// means it should be considered an error.
-int Vok_to_lose_imaginary_part;
+// Should we warn about conversions from complex to real?
+int Vwarn_imag_to_real;
 
 // If TRUE, create column vectors when doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined).  Only matters when resize_on_range_error is also
 // TRUE.
 static bool Vprefer_column_vectors;
@@ -1768,19 +1765,19 @@ static int
 implicit_str_to_num_ok (void)
 {
   Vimplicit_str_to_num_ok = check_preference ("implicit_str_to_num_ok");
 
   return 0;
 }
 
 static int
-ok_to_lose_imaginary_part (void)
+warn_imag_to_real (void)
 {
-  Vok_to_lose_imaginary_part = check_preference ("ok_to_lose_imaginary_part");
+  Vwarn_imag_to_real = check_preference ("warn_imag_to_real");
 
   return 0;
 }
 
 static int
 prefer_column_vectors (void)
 {
   Vprefer_column_vectors
@@ -1885,27 +1882,16 @@ example,\n\
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} implicit_str_to_num_ok\n\
 If the value of @code{implicit_str_to_num_ok} is nonzero, implicit\n\
 conversions of strings to their numeric ASCII equivalents are allowed.\n\
 Otherwise, an error message is printed and control is returned to the\n\
 top level.  The default value is 0.\n\
 @end defvr");
 
-  DEFVAR (ok_to_lose_imaginary_part, "warn", ok_to_lose_imaginary_part,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} ok_to_lose_imaginary_part\n\
-If the value of @code{ok_to_lose_imaginary_part} is nonzero, implicit\n\
-conversions of complex numbers to real numbers are allowed (for example,\n\
-by fsolve).  If the value is @code{\"warn\"}, the conversion is allowed,\n\
-but a warning is printed.  Otherwise, an error message is printed and\n\
-control is returned to the top level.  The default value is\n\
-@code{\"warn\"}.\n\
-@end defvr");
-
   DEFVAR (prefer_column_vectors, true, prefer_column_vectors,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} prefer_column_vectors\n\
 If @code{prefer_column_vectors} is nonzero, operations like\n\
 \n\
 @example\n\
 for i = 1:10\n\
   a (i) = i;\n\
@@ -1987,15 +1973,23 @@ built-in variable @code{struct_levels_to
 
   DEFVAR (warn_divide_by_zero, true, warn_divide_by_zero,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_divide_by_zero\n\
 If the value of @code{warn_divide_by_zero} is nonzero, a warning\n\
 is issued when Octave encounters a division by zero.  If the value is\n\
 0, the warning is omitted.  The default value is 1.\n\
 @end defvr");
+
+  DEFVAR (warn_imag_to_real, false, warn_imag_to_real,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_imag_to_real\n\
+If the value of @code{warn_imag_to_real} is nonzero, a warning is\n\
+printed for implicit conversions of complex numbers to real numbers.\n\
+The default value is 0.\n\
+@end defvr");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -731,21 +731,18 @@ extern bool Vimplicit_num_to_str_ok;
 //   octave> 'abc' + 0
 //   97 98 99
 //
 // to happen?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
 extern int Vimplicit_str_to_num_ok;
 
-// Should we allow silent conversion of complex to real when a real
-// type is what we're really looking for?  A positive value means yes.
-// A negative value means yes, but print a warning message.  Zero
-// means it should be considered an error.
-extern int Vok_to_lose_imaginary_part;
+// Should we warn about conversions from complex to real?
+extern int Vwarn_imag_to_real;
 
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
