# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1470245021 25200
#      Wed Aug 03 10:23:41 2016 -0700
# Node ID 2f301a30aeedcc36a3358d59f3090c5b7e071f15
# Parent  f094186125d3b887f7d8b167f528193493764e8a
Add tests for Java numeric type conversion (bug #48013)

* ov-java.cc: Add %!tests for conversion of specific Java types to Octave
numeric types.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -3122,14 +3122,25 @@ Return true if @var{x} is a Java object.
 %! assert (class (javaObject ("java.lang.Byte",      int8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Short",   uint16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Short",    int16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Integer", uint32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Integer",  int32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Long",    uint64 (1))), "java.lang.Long");
 %! assert (class (javaObject ("java.lang.Long",     int64 (1))), "java.lang.Long");
 
+## Test for automatic conversion of specific numeric classes (bug #48013)
+%!testif HAVE_JAVA
+%! assert (javaMethod ("valueOf", "java.lang.Byte",     int8 (1)), 1)
+%! assert (javaMethod ("valueOf", "java.lang.Short",   int16 (1)), 1)
+%! assert (javaMethod ("valueOf", "java.lang.Integer", int32 (1)), 1)
+%! assert (javaMethod ("valueOf", "java.lang.Long",    int64 (1)), 1)
+%! assert (javaMethod ("valueOf", "java.lang.Float",  single (1)), 1)
+%! assert (javaMethod ("valueOf", "java.lang.Double", double (1)), 1)
+%! assert (class (javaMethod ("valueOf", "java.math.BigDecimal", double (1))), "java.math.BigDecimal")
+%! assert (class (javaMethod ("valueOf", "java.math.BigInteger",  int64 (1))), "java.math.BigInteger")
+
 ## Automatic conversion from string cell array into String[] (bug #45290)
 %!testif HAVE_JAVA
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0);
 */
