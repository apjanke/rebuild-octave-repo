# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294688935 18000
#      Mon Jan 10 14:48:55 2011 -0500
# Node ID ff7e0776ba0fa297ee68aae627b61130c17efc08
# Parent  caf1fd72f58792fd9103eeadcae4c157d0043469
logm.m: handle scalar and diagonal matrix arguments specially; call log_pade_pf only if m > 1

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-10  John W. Eaton  <jwe@octave.org>
+
+	* linear-algebra/logm.m: Handle scalar and diagonal matrix
+	arguments specially.  Call logm_pade_pf only if m > 1.  New tests.
+	Special case suggested by Marco Caliari <marco.caliari@univr.it>.
+
 2011-01-10  John W. Eaton  <jwe@octave.org>
 
 	* general/private/__isequal__.m: Use builtin ("struct", ...) to
 	convert objects to a structs to avoid possible overloading of
 	the struct function.
 
 2011-01-09  Rik  <octave@nomad.inbox5.com>
 
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -44,16 +44,24 @@ function [s, iters] = logm (A, opt_iters
   if (nargin == 0 || nargin > 2)
     print_usage ();
   endif
 
   if (! issquare (A))
     error ("logm: A must be a square matrix");
   endif
 
+  if (isscalar (A))
+    s = log (A);
+    return;
+  elseif (strfind (typeinfo (A), "diagonal matrix"))
+    s = diag (log (diag (A)));
+    return;
+  endif
+
   [u, s] = schur (A);
 
   if (isreal (A))
     [u, s] = rsf2csf (u, s);
   endif
 
   if (any (diag (s) < 0))
     warning ("Octave:logm:non-principal",
@@ -79,17 +87,21 @@ function [s, iters] = logm (A, opt_iters
     k = k + 1;
     s = sqrtm (s);
   endwhile
 
   if (k >= opt_iters)
     warning ("logm: maximum number of square roots exceeded; results may still be accurate");
   endif
 
-  s = logm_pade_pf (s - eye (size (s)), m);
+  s = s - eye (size (s));
+
+  if (m > 1)
+    s = logm_pade_pf (s, m);
+  endif
 
   s = 2^k * u * s * u';
 
   if (nargout == 2)
     iters = k;
   endif
 
 endfunction
@@ -139,8 +151,12 @@ endfunction
 %!assert(norm(logm([1 -1;0 1]) - [0 -1; 0 0]) < 1e-5);
 %!assert(norm(expm(logm([-1 2 ; 4 -1])) - [-1 2 ; 4 -1]) < 1e-5);
 %!assert(logm([1 -1 -1;0 1 -1; 0 0 1]), [0 -1 -1.5; 0 0 -1; 0 0 0], 1e-5);
 
 %% Test input validation
 %!error logm ();
 %!error logm (1, 2, 3);
 %!error <logm: A must be a square matrix> logm([1 0;0 1; 2 2]);
+
+%!assert (logm (10), log (10))
+%!assert (full (logm (eye (3))), logm (full (eye (3))))
+%!assert (full (logm (10*eye (3))), logm (full (10*eye (3))), 8*eps)
