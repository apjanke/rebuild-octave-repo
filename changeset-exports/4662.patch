# HG changeset patch
# User jwe
# Date 1069739489 0
#      Tue Nov 25 05:51:29 2003 +0000
# Node ID 55211d6748c42400b0810c8196b6950da13e8e19
# Parent  12b6fbd574367e255ced201e22ea643f630edabc
[project @ 2003-11-25 05:51:29 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,15 +1,19 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (assignN): Allow single indexing to work.
 	(Array<T>::range_error (const char*, const Array<int>&)):
 	Report index values.
 
 	* Array.cc (Array<T>::index): Delete unused arg names.
+	* ODESSA.cc (odessa_j): Likewise.
+	* DASRT.cc (ddasrt_f, ddasrt_g): Likewise.
+	* DASPK.cc (ddaspk_psol): Likewise.
+	* lo-mappers.cc (imag): Likewise.
 
 	* dim-vector.h (dim_vector::all_ones): New function.
 
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
 	zeros, not orig_rows or orig_columns.
 	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -100,21 +100,20 @@ ddaspk_f (const double& time, const doub
 
   return 0;
 }
 
 //NEQ, T, Y, YPRIME, SAVR, WK, CJ, WGHT,
 //C                          WP, IWP, B, EPLIN, IER, RPAR, IPAR)
 
 static int
-ddaspk_psol (const int& neq, const double& time, const double *state,
-	     const double *deriv, const double *savr,
-	     const double& cj, const double *wght, double *wp,
-	     int *iwp, double *b, const double& eplin, int& ier,
-	     double *, int*)
+ddaspk_psol (const int&, const double&, const double *,
+	     const double *, const double *, const double&,
+	     const double *, double *, int *, double *,
+	     const double&, int&, double *, int*)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   abort ();
 
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -60,17 +60,17 @@ extern "C"
 static DAEFunc::DAERHSFunc user_fsub;
 static DAEFunc::DAEJacFunc user_jsub;
 static DAERTFunc::DAERTConstrFunc user_csub;
 
 static int nn;
 
 static int
 ddasrt_f (const double& t, const double *state, const double *deriv,
-	  double *delta, int& ires, double *rpar, int *ipar)
+	  double *delta, int& ires, double *, int *)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
@@ -118,17 +118,17 @@ ddasrt_j (const double& time, const doub
 
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
 }
 
 static int
 ddasrt_g (const int& neq, const double& t, const double *state,
-	  const int& ng, double *gout, double *rpar, int *ipar) 
+	  const int& ng, double *gout, double *, int *) 
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   int n = neq;
 
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -100,18 +100,18 @@ odessa_f (int* neq, const double& t, dou
 
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
 }
 
 static int
 odessa_j (int* neq, const double& t, double *state,
-	  double *par, const int& ml, const int& mu, double *pd,
-	  const int& nrowpd)
+	  double *par, const int& /* ml */, const int& /* mu */,
+	  double *pd, const int& nrowpd)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   int n = neq[0];
   int n_par = neq[1];
 
   // Load the state and parameter arrays as Octave objects
   ColumnVector tmp_state (n);
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -60,17 +60,17 @@ conj (double x)
 
 double
 fix (double x)
 {
   return x > 0 ? floor (x) : ceil (x);
 }
 
 double
-imag (double x)
+imag (double)
 {
   return 0.0;
 }
 
 double
 real (double x)
 {
   return x;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,17 +1,16 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.52.
 	(OCTAVE_API_VERSION): Now api-v3.
 
 	* ov.h (octave_value::all_strings): Pass second arg to rep function.
 
 	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_f): Delete unused arg names.
-	* load-save.cc (do_load): Likewise.
 	* ls-utils.cc (get_save_type): Likewise.
 	* parse.y (Fassignin): Likewise.
 	* utils.cc (empty_arg): Likewise.
 	* ov-usr-fcn.h (octave_user_function::subsref): Likewise.
 	* ov-base-mat.h (octave_base_matrix::subsref): Likewise.
 	* ov-mapper.h (octave_mapper::subsref): Likewise.
 	* ov-builtin.h (octave_builtin::subsref): Likewise.
 	* ov-cell.h (octave_cell::subsref): Likewise.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -370,17 +370,17 @@ get_file_format (const std::string& fnam
 	   orig_fname.c_str ());
 
   return retval;
 }
 
 octave_value
 do_load (std::istream& stream, const std::string& orig_fname, bool force,
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
-	 bool list_only, bool swap, bool verbose, bool /* import */,
+	 bool list_only, bool swap, bool verbose, bool import,
 	 const string_vector& argv, int argv_idx, int argc, int nargout)
 {
   octave_value retval;
 
   Octave_map retstruct;
 
   OSSTREAM output_buf;
 
