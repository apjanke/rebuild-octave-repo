# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1342609638 14400
#      Wed Jul 18 07:07:18 2012 -0400
# Branch gui
# Node ID 5d74d8b982a5711b1656a3a83ca09e8e6e125884
# Parent  355d6c165df05fad8632c8fb7aaec2500c9559e6
Forgot to have a fallback lexer when the file suffix is unknown. Removed unused variable and added comments.

* file-editor-tab.cc: Made the bash lexer the default lexer for unknown file types.
* file-editor.cc: Removed unused variable.
* workspace-view: Added comments and slot for items being double clicked in the workspace view.

diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -24,17 +24,16 @@
 // Not available in the Debian repos yet!
 // #include <Qsci/qscilexeroctave.h>
 #include "lexer-octave-gui.h"
 #include <Qsci/qscilexercpp.h>
 #include <Qsci/qscilexerbash.h>
 #include <Qsci/qscilexerperl.h>
 #include <Qsci/qscilexerbatch.h>
 #include <Qsci/qscilexerdiff.h>
-
 #include "resource-manager.h"
 #include <QMessageBox>
 #include <QVBoxLayout>
 
 file_editor_tab::file_editor_tab(file_editor *fileEditor)
   : QWidget ((QWidget*)fileEditor), octave_event_observer ()
 {
   QSettings *settings = resource_manager::instance ()->get_settings ();
@@ -238,36 +237,44 @@ file_editor_tab::update_lexer ()
       keywordList = keyword.split (QRegExp ("\\s+"));  // split into single strings
       int i;
       for (i = 0; i < keywordList.size (); i++)
         {
           lexer_api->add (keywordList.at (i));  // add single strings to the API
         }
       lexer_api->prepare ();           // prepare API info ... this make take some time
     }
-  else if (_file_name.endsWith (".c") || _file_name.endsWith (".cc") || _file_name.endsWith (".cpp"))
+  else if (_file_name.endsWith (".c")
+        || _file_name.endsWith (".cc")
+        || _file_name.endsWith (".cpp")
+        || _file_name.endsWith (".cxx")
+        || _file_name.endsWith (".c++")
+        || _file_name.endsWith (".h")
+        || _file_name.endsWith (".hh")
+        || _file_name.endsWith (".hpp")
+        || _file_name.endsWith (".h++"))
     {
       lexer = new QsciLexerCPP ();
     }
-  else if (_file_name.endsWith (".sh"))
-    {
-      lexer = new QsciLexerBash ();
-    }
   else if (_file_name.endsWith (".pl"))
     {
       lexer = new QsciLexerPerl ();
     }
   else if (_file_name.endsWith (".bat"))
     {
       lexer = new QsciLexerBatch ();
     }
   else if (_file_name.endsWith (".diff"))
     {
       lexer = new QsciLexerDiff ();
     }
+  else // Default to bash lexer.
+    {
+      lexer = new QsciLexerBash ();
+    }
 
   QSettings *settings = resource_manager::instance ()->get_settings ();
 
   // Editor font (default or from settings)
   lexer->setDefaultFont (QFont (
                              settings->value ("editor/fontName","Courier").toString (),
                              settings->value ("editor/fontSize",10).toInt ()));
 
diff --git a/gui/src/m-editor/file-editor.cc b/gui/src/m-editor/file-editor.cc
--- a/gui/src/m-editor/file-editor.cc
+++ b/gui/src/m-editor/file-editor.cc
@@ -315,17 +315,16 @@ file_editor::handle_editor_state_changed
       setFocusProxy (f);
     }
 }
 
 void
 file_editor::construct ()
 {
   QWidget *widget = new QWidget (this);
-  QSettings *settings = resource_manager::instance ()->get_settings ();
   QStyle *style = QApplication::style ();
 
   _menu_bar = new QMenuBar (widget);
   _tool_bar = new QToolBar (widget);
   _tab_widget = new QTabWidget (widget);
   _tab_widget->setTabsClosable (true);
 
   // Theme icons with QStyle icons as fallback
diff --git a/gui/src/workspace-view.cc b/gui/src/workspace-view.cc
--- a/gui/src/workspace-view.cc
+++ b/gui/src/workspace-view.cc
@@ -21,47 +21,59 @@
 #include <QPushButton>
 
 workspace_view::workspace_view (QWidget * parent) : QDockWidget
   (parent)
 {
   setObjectName ("WorkspaceView");
   setWindowTitle (tr ("Workspace"));
 
+  // Create a new workspace model.
   _workspace_model = new workspace_model ();
 
-  _workspace_tree_view = new QTreeView (this);
-  _workspace_tree_view->setHeaderHidden (false);
-  _workspace_tree_view->setAlternatingRowColors (true);
-  //_workspace_tree_view->setAnimated (true);
-  _workspace_tree_view->setModel (_workspace_model);
-  _workspace_tree_view->setTextElideMode (Qt::ElideRight);
-  _workspace_tree_view->setWordWrap (false);
+  _workspace_tree_view = new QTreeView (this);            // Create a new tree view.
+  _workspace_tree_view->setHeaderHidden (false);          // Do not show header columns.
+  _workspace_tree_view->setAlternatingRowColors (true);   // Activate alternating row colors.
+  _workspace_tree_view->setAnimated (false);              // Deactivate animations because of strange glitches.
+  _workspace_tree_view->setTextElideMode (Qt::ElideRight);// Elide text to the right side of the cells.
+  _workspace_tree_view->setWordWrap (false);              // No wordwrapping in cells.
+  _workspace_tree_view->setModel (_workspace_model);      // Assign model.
 
+  // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
+
+  // Create a new layout and add widgets to it.
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (_workspace_tree_view);
   layout->setMargin (2);
+
+  // Set the empty widget to have our layout.
   widget ()->setLayout (layout);
 
+  // Initialize collapse/expand state of the workspace subcategories.
+  _explicit_collapse.local      = false;
+  _explicit_collapse.global     = false;
+  _explicit_collapse.persistent = false;
+  _explicit_collapse.hidden     = false;
+
+  // Connect signals and slots.
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT(handle_visibility_changed (bool)));
 
   connect (_workspace_model, SIGNAL (model_changed ()),
            this, SLOT (model_changed ()));
 
   connect (_workspace_tree_view, SIGNAL (collapsed (QModelIndex)),
            this, SLOT (collapse_requested (QModelIndex)));
   connect (_workspace_tree_view, SIGNAL (expanded (QModelIndex)),
            this, SLOT (expand_requested (QModelIndex)));
 
-  _explicit_collapse.local = false;
-  _explicit_collapse.global = false;
-  _explicit_collapse.persistent = false;
-  _explicit_collapse.hidden = false;
+  connect (_workspace_tree_view, SIGNAL (doubleClicked (QModelIndex)),
+           this, SLOT (item_double_clicked (QModelIndex)));
+
 }
 
 void
 workspace_view::handle_visibility_changed (bool visible)
 {
   if (visible)
     emit active_changed (true);
 }
@@ -167,13 +179,20 @@ workspace_view::expand_requested (QModel
     _explicit_collapse.global = false;
   if (item_data[0] == "Persistent")
     _explicit_collapse.persistent = false;
   if (item_data[0] == "Hidden")
     _explicit_collapse.hidden = false;
 }
 
 void
+workspace_view::item_double_clicked (QModelIndex index)
+{
+  Q_UNUSED (index);
+  // TODO: Implement opening a dialog that allows the user to change a variable in the workspace.
+}
+
+void
 workspace_view::closeEvent (QCloseEvent *event)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (event);
 }
diff --git a/gui/src/workspace-view.h b/gui/src/workspace-view.h
--- a/gui/src/workspace-view.h
+++ b/gui/src/workspace-view.h
@@ -39,16 +39,17 @@ signals:
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 protected slots:
   void collapse_requested (QModelIndex index);
   void expand_requested (QModelIndex index);
+  void item_double_clicked (QModelIndex index);
 
 private:
   QTreeView *_workspace_tree_view;
 
   /** Stores the current workspace model. */
   workspace_model *_workspace_model;
 
   struct
