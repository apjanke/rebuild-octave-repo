# HG changeset patch
# User jwe
# Date 927865164 0
#      Fri May 28 04:19:24 1999 +0000
# Node ID dd00769643ae90758608ae5c11b69b3b09f92bee
# Parent  8c5ad0b497421c00fea7f81fb0caa2374687ebfe
[project @ 1999-05-28 04:19:00 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+Mon May 10 09:06:47 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_PROG_G77): Also match "FSF-g77", for egcs.
+
+Thu Apr  8 19:20:09 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* examples/hello.cc (Fhello): octave_value::print now requires a
+	stream arg.
+
 Wed Feb  3 01:02:37 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Use AC_OUTPUT_COMMANDS to chmod install-octave so
 	that the command will also executed in config.status.
 
 Thu Jan 28 21:05:32 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-config-vals): Do substitution on
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -281,18 +281,18 @@ Summary of changes for version 2.1.x:
 
   * The mkoctfile script now accepts -DDEF options and passes them on
     to the C and C++ compilers.
 
   * Running `make check' should work now before you run `make install', 
     even if you build a copy of Octave that depends on shared versions
     of the Octave libraries.
 
-  * For matrices, x(:) now works no matter what the value of
-    do_fortran_indexing is.
+  * For matrices, x(:) now works and returns a column vector no matter
+    what the value of do_fortran_indexing is.
 
   * New keywords __FILE__ and __LINE__ expand to the name of the file
     that is being read and the current input line number, respectively.
 
   * Octave's expression parser is more general and consistent.  It is
     now possible to access structure elements and index arbitrary
     values.  For example, expressions like
 
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -76,17 +76,17 @@ dnl See if $F77 is the GNU Fortran compi
 dnl
 AC_DEFUN(OCTAVE_PROG_G77,
 [AC_CACHE_CHECK([whether ${F77-f77} is the GNU Fortran compiler],
 octave_cv_f77_is_g77,
 [if $use_g77; then
   octave_cv_f77_is_g77=yes
 else
   echo "      END" > conftest.f
-  foutput=`${F77-f77} -v 2>&1 | grep "GNU F77"`
+  foutput=`${F77-f77} -v conftest.f 2>&1 | egrep "GNU F77|FSF-g77"`
   if test -n "$foutput"; then
     octave_cv_f77_is_g77=yes
   else
     octave_cv_f77_is_g77=no
   fi
 fi])
 ])
 dnl
diff --git a/doc/interpreter/data.texi b/doc/interpreter/data.texi
--- a/doc/interpreter/data.texi
+++ b/doc/interpreter/data.texi
@@ -68,17 +68,17 @@ values in the range of approximately
 @ifinfo
  2.2204e-16.
 @end ifinfo
 The exact values are given by the variables @code{realmin},
 @code{realmax}, and @code{eps}, respectively.
 
 Matrix objects can be of any size, and can be dynamically reshaped and
 resized.  It is easy to extract individual rows, columns, or submatrices
-is using a variety of powerful indexing features.  @xref{Index Expressions}.
+using a variety of powerful indexing features.  @xref{Index Expressions}.
 
 @xref{Numeric Data Types}, for more information.
 
 @node String Objects, Data Structure Objects, Numeric Objects, Built-in Data Types
 @subsection String Objects
 @cindex strings
 @cindex character strings
 @opindex "
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -617,32 +617,30 @@ Write a string to a file with no formatt
 @deftypefn {Built-in Function} {} puts (@var{string})
 Write a string to the standard output with no formatting.
 @end deftypefn
 
 @node Line-Oriented Input, Formatted Output, Simple Output, C-Style I/O Functions
 @subsection Line-Oriented Input
 
 @deftypefn {Built-in Function} {} fgetl (@var{fid}, @var{len})
-Read characters from a file, stopping at the first newline character
-that is encountered or after @var{len} characters have been read, and
-returning the characters as a string.  The newline is not included in
-the returned value.
+Read characters from a file, stopping after a newline, or EOF,
+or @var{len} characters have been read.  The characters read, excluding
+the possible trailing newline, are returned as a string.
 
 If @var{len} is omitted, @code{fgetl} reads until the next newline
 character.
 
 If there are no more characters to read, @code{fgetl} returns @minus{}1.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} fgets (@var{fid}, @var{len})
-Read characters from a file, stopping at the first newline character
-that is encountered or after @var{len} characters have been read, and
-returning the characters as a string.  The newline is included in the
-returned value.
+Read characters from a file, stopping after a newline, or EOF,
+or @var{len} characters have been read.  The characters read, including
+the possible trailing newline, are returned as a string.
 
 If @var{len} is omitted, @code{fgets} reads until the next newline
 character.
 
 If there are no more characters to read, @code{fgets} returns @minus{}1.
 @end deftypefn
 
 @node Formatted Output, Output Conversion for Matrices, Line-Oriented Input, C-Style I/O Functions
@@ -1061,17 +1059,19 @@ returning the result in the matrix @var{
 The optional argument @var{size} specifies the amount of data to read
 and may be one of
 
 @table @code
 @item Inf
 Read as much as possible, returning a column vector.
 
 @item @var{nr}
-@itemx [@var{nr}, Inf]
+Read up to @var{nr} elements, returning a column vector.
+
+@item [@var{nr}, Inf]
 Read as much as possible, returning a matrix with @var{nr} rows.  If the
 number of elements read is not an exact multiple of @var{nr}, the last
 column is padded with zeros.
 
 @item [@var{nr}, @var{nc}]
 Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with
 @var{nr} rows.  If the number of elements read is not an exact multiple
 of @var{nr}, the last column is padded with zeros.
@@ -1315,17 +1315,19 @@ Read binary data of type @var{precision}
 The optional argument @var{size} specifies the amount of data to read
 and may be one of
 
 @table @code
 @item Inf
 Read as much as possible, returning a column vector.
 
 @item @var{nr}
-@itemx [@var{nr}, Inf]
+Read up to @var{nr} elements, returning a column vector.
+
+@item [@var{nr}, Inf]
 Read as much as possible, returning a matrix with @var{nr} rows.  If the
 number of elements read is not an exact multiple of @var{nr}, the last
 column is padded with zeros.
 
 @item [@var{nr}, @var{nc}]
 Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with
 @var{nr} rows.  If the number of elements read is not an exact multiple
 of @var{nr}, the last column is padded with zeros.
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -79,20 +79,17 @@ Array2<T>::index (idx_vector& idx) const
 	  if (liboctave_pcv_flag)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
   else if (nr == 1 || nc == 1)
     {
-      int result_is_column_vector = (nc == 1);
-
-      if (liboctave_dfi_flag && idx.is_colon ())
-	    result_is_column_vector = 1;
+      int result_is_column_vector = (nc == 1 || idx.is_colon ());
 
       Array<T> tmp = Array<T>::index (idx);
 
       int len = tmp.length ();
 
       if (len == 0)
 	retval = Array2<T> (0, 0);
       else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+Mon May 10 07:45:11 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* MArray-defs.h (DO_VV_OP2): Fix macro definition to use arg.
+
+Wed May  5 20:06:10 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (Array2<T>index (idx_vector& idx)): Always return a
+	column vector for A(:), for compatibility with Matlab.
+
+Fri Apr 23 11:52:23 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* LSODE.cc (LSODE::do_integrate (double)): Don't forget to set
+	iopt when there are optional inputs in rwork or iwork.
+
 Fri Mar 26 11:26:32 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (libraries): Use the libfoo.a(objects) method of
 	creating static libs.
 
 Thu Mar  4 02:17:04 1999  James Macnicol <jamesm@evans.ee.adfa.oz.au>
 
 	* data-conv.cc (oct_data_conv::string_to_data_type): Handle uint16
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -213,39 +213,53 @@ LSODE::do_integrate (double tout)
 
 	  integration_error = 1;
 	  return retval;
 	}
 
       sanity_checked = 1;
     }
 
-  // Try 5000 steps before giving up.
-
-  iwork.elem (5) = 5000;
-
   if (stop_time_set)
     {
       itask = 4;
       rwork.elem (0) = stop_time;
+      iopt = 1;
     }
   else
     {
       itask = 1;
     }
 
   double abs_tol = absolute_tolerance ();
   double rel_tol = relative_tolerance ();
 
-  rwork.elem (4) = (initial_step_size () >= 0.0) ? initial_step_size () : 0.0;
-  rwork.elem (5) = (maximum_step_size () >= 0.0) ? maximum_step_size () : 0.0;
-  rwork.elem (6) = (minimum_step_size () >= 0.0) ? minimum_step_size () : 0.0;
+  if (initial_step_size () >= 0.0)
+    {
+      rwork.elem (4) = initial_step_size ();
+      iopt = 1;
+    }
+
+  if (maximum_step_size () >= 0.0)
+    {
+      rwork.elem (5) = maximum_step_size ();
+      iopt = 1;
+    }
+
+  if (minimum_step_size () >= 0.0)
+    {
+      rwork.elem (6) = minimum_step_size ();
+      iopt = 1;
+    }
 
   if (step_limit () > 0)
-    iwork.elem (5) = step_limit ();
+    {
+      iwork.elem (5) = step_limit ();
+      iopt = 1;
+    }
 
   int *piwork = iwork.fortran_vec ();
   double *prwork = rwork.fortran_vec ();
 
   F77_XFCN (lsode, LSODE, (lsode_f, n, xp, t, tout, itol, rel_tol,
 			   abs_tol, itask, istate, iopt, prwork, lrw,
 			   piwork, liw, lsode_j, method_flag));
 
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -73,16 +73,17 @@ public:
 
   void copy (const LSODE_options& opt)
     {
       x_absolute_tolerance = opt.x_absolute_tolerance;
       x_initial_step_size = opt.x_initial_step_size;
       x_maximum_step_size = opt.x_maximum_step_size;
       x_minimum_step_size = opt.x_minimum_step_size;
       x_relative_tolerance = opt.x_relative_tolerance;
+
       x_step_limit = opt.x_step_limit;
     }
 
   void set_default_options (void) { init (); }
 
   void set_absolute_tolerance (double val)
     { x_absolute_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
 
diff --git a/liboctave/MArray-defs.h b/liboctave/MArray-defs.h
--- a/liboctave/MArray-defs.h
+++ b/liboctave/MArray-defs.h
@@ -56,12 +56,12 @@
     }
 
 #define DO_VV_OP2(OP) \
   do \
     { \
       T *a_tmp = a.fortran_vec (); \
       const T *b_tmp = b.data (); \
       for (int i = 0; i < l; i++) \
-	a_tmp[i] += b_tmp[i]; \
+	a_tmp[i] OP b_tmp[i]; \
     } \
   while (0)
 
diff --git a/readline/ChangeLog b/readline/ChangeLog
--- a/readline/ChangeLog
+++ b/readline/ChangeLog
@@ -1,8 +1,12 @@
+Thu May 27 21:47:26 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* histfile.c [__CYGWIN__]: Define O_BINARY if not already defined.
+
 Mon Aug 31 12:07:02 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* config.sub: Accept armv4 everywhere arm is allowed.
 
 Wed Mar  4 14:59:11 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parens.c (rl_insert_close): Make time delay for showing matching
 	parentheses 0.5 seconds.
diff --git a/readline/histfile.c b/readline/histfile.c
--- a/readline/histfile.c
+++ b/readline/histfile.c
@@ -47,21 +47,21 @@
 #endif
 
 #if defined (HAVE_STRING_H)
 #  include <string.h>
 #else
 #  include <strings.h>
 #endif /* !HAVE_STRING_H */
 
-#if defined (__EMX__)
+#if defined (__EMX__) || defined (__CYGWIN__)
 #  ifndef O_BINARY
 #    define O_BINARY 0
 #  endif
-#else /* !__EMX__ */
+#else /* !__EMX__ && !__CYGWIN__ */
    /* If we're not compiling for __EMX__, we don't want this at all.  Ever. */
 #  undef O_BINARY
 #  define O_BINARY 0
 #endif /* !__EMX__ */
 
 #include <errno.h>
 #if !defined (errno)
 extern int errno;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Wed Apr  7 13:57:26 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* linear-algebra/qrhouse.m, linear-algebra/krygetq.m: Delete.
+
 Wed Apr  7 13:22:43 1999  A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 	* control/is_controllable.m, control/zgscal.m: Accomodate new
 	version of krylov and krylovb.
 
 	* control/outlist.m, control/sysout.m: Fix typos.
 
 	* control/sysdimensions.m: Add option for total number of states.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+Thu May 27 18:28:35 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/chol.cc (Fchol): Also return info as second output.
+
+	* DLD-FUNCTIONS/minmax.cc (max (const ComplexMatrix&, const
+	ComplexMatrix&)): Correct test for real columns only.  
+	(min (const ComplexMatrix&, const ComplexMatrix&)): Likewise.
+
+Wed Apr 14 12:54:25 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/dassl.cc (Fdassl): Prevent recursive calls.
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (Flsode): Likewise.
+	* DLD-FUNCTIONS/quad.cc (Fquad): Likewise.
+
+	* file-io.cc (Fsscanf, Ffscanf): Doc fix.
+
 Sat Mar 27 11:07:51 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::count): New function.
 	* symtab.cc (symbol_record::dump_symbol_info): New function.
 	* symtab.cc (symbol_record::symbol_def::dump_symbol_info): Ditto.
 	* variables.cc (F__dump_symbol_info__): Ditto.
 
 	* pt-misc.cc (tree_parameter_list::clear): New function.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -29,23 +29,23 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (chol, args, nargout,
-  "R = chol (X): cholesky factorization")
+  "[R, p] = chol (X): cholesky factorization")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin != 1 || nargout > 1)
+  if (nargin != 1 || nargout > 2)
     {
       print_usage ("chol");
       return retval;
     }
 
   octave_value arg = args(0);
     
   int nr = arg.rows ();
@@ -64,31 +64,37 @@ DEFUN_DLD (chol, args, nargout,
 
       if (! error_state)
 	{
 	  int info;
 	  CHOL fact (m, info);
 	  if (info != 0)
 	    error ("chol: matrix not positive definite");
 	  else
-	    retval = fact.chol_matrix ();
+	    {
+	      retval(1) = static_cast<double> (info);
+	      retval(0) = fact.chol_matrix ();
+	    }
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  ComplexCHOL fact (m, info);
 	  if (info != 0)
 	    error ("chol: matrix not positive definite");
 	  else
-	    retval = fact.chol_matrix ();
+	    {
+	      retval(1) = static_cast<double> (info);
+	      retval(0) = fact.chol_matrix ();
+	    }
 	}
     }
   else
     {
       gripe_wrong_type_arg ("chol", arg);
     }
 
   return retval;
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -31,24 +31,28 @@ Software Foundation, 59 Temple Place - S
 #include "DASSL.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "pager.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by dassl.
 static octave_function *dassl_fcn;
 
 static DASSL_options dassl_opts;
 
+// Is this a recursive call?
+static int call_depth = 0;
+
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
   assert (nstates == xdot.capacity ());
@@ -112,98 +116,110 @@ The first argument is the name of the fu
 compute the vector of residuals.  It must have the form\n\
 \n\
   res = f (x, xdot, t)\n\
 \n\
 where x, xdot, and res are vectors, and t is a scalar.")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
-
-  if (nargin < 4 || nargin > 5)
-    {
-      print_usage ("dassl");
-      return retval;
-    }
-
-  dassl_fcn = extract_function
-    (args(0), "dassl", "__dassl_fcn__",
-     "function res = __dassl_fcn__ (x, xdot, t) res = ",
-     "; endfunction");
-
-  if (! dassl_fcn)
-    return retval;
-
-  ColumnVector state = args(1).vector_value ();
+  unwind_protect::begin_frame ("Fdassl");
 
-  if (error_state)
-    {
-      error ("dassl: expecting state vector as second argument");
-      return retval;
-    }
+  unwind_protect_int (call_depth);
+  call_depth++;
 
-  ColumnVector deriv = args(2).vector_value ();
-
-  if (error_state)
+  if (call_depth > 1)
     {
-      error ("dassl: expecting derivative vector as third argument");
-      return retval;
-    }
-
-  ColumnVector out_times = args(3).vector_value ();
-
-  if (error_state)
-    {
-      error ("dassl: expecting output time vector as fourth argument");
+      error ("dassl: invalid recursive call");
       return retval;
     }
 
-  ColumnVector crit_times;
-  int crit_times_set = 0;
-  if (nargin > 4)
+  int nargin = args.length ();
+
+  if (nargin > 3 && nargin < 6)
     {
-      crit_times = args(4).vector_value ();
+      dassl_fcn = extract_function
+	(args(0), "dassl", "__dassl_fcn__",
+	 "function res = __dassl_fcn__ (x, xdot, t) res = ",
+	 "; endfunction");
+
+      if (! dassl_fcn)
+	return retval;
+
+      ColumnVector state = args(1).vector_value ();
 
       if (error_state)
 	{
-	  error ("dassl: expecting critical time vector as fifth argument");
+	  error ("dassl: expecting state vector as second argument");
+	  return retval;
+	}
+
+      ColumnVector deriv = args(2).vector_value ();
+
+      if (error_state)
+	{
+	  error ("dassl: expecting derivative vector as third argument");
+	  return retval;
+	}
+
+      ColumnVector out_times = args(3).vector_value ();
+
+      if (error_state)
+	{
+	  error ("dassl: expecting output time vector as fourth argument");
 	  return retval;
 	}
 
-      crit_times_set = 1;
-    }
+      ColumnVector crit_times;
+      int crit_times_set = 0;
+      if (nargin > 4)
+	{
+	  crit_times = args(4).vector_value ();
 
-  if (state.capacity () != deriv.capacity ())
-    {
-      error ("dassl: x and xdot must have the same size");
-      return retval;
-    }
+	  if (error_state)
+	    {
+	      error ("dassl: expecting critical time vector as fifth argument");
+	      return retval;
+	    }
 
-  double tzero = out_times (0);
+	  crit_times_set = 1;
+	}
 
-  DAEFunc func (dassl_user_function);
-  DASSL dae (state, deriv, tzero, func);
-  dae.copy (dassl_opts);
+      if (state.capacity () != deriv.capacity ())
+	{
+	  error ("dassl: x and xdot must have the same size");
+	  return retval;
+	}
+
+      double tzero = out_times (0);
 
-  Matrix output;
-  Matrix deriv_output;
+      DAEFunc func (dassl_user_function);
+      DASSL dae (state, deriv, tzero, func);
+      dae.copy (dassl_opts);
 
-  if (crit_times_set)
-    output = dae.integrate (out_times, deriv_output, crit_times);
-  else
-    output = dae.integrate (out_times, deriv_output);
+      Matrix output;
+      Matrix deriv_output;
+
+      if (crit_times_set)
+	output = dae.integrate (out_times, deriv_output, crit_times);
+      else
+	output = dae.integrate (out_times, deriv_output);
 
-  if (! error_state)
-    {
-      retval.resize (2);
+      if (! error_state)
+	{
+	  retval.resize (2);
 
-      retval(0) = output;
-      retval(1) = deriv_output;
+	  retval(0) = output;
+	  retval(1) = deriv_output;
+	}
     }
+  else
+    print_usage ("dassl");
+
+  unwind_protect::run_frame ("Fdassl");
 
   return retval;
 }
 
 typedef void (DASSL_options::*d_set_opt_mf) (double);
 typedef double (DASSL_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 3
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -31,24 +31,28 @@ Software Foundation, 59 Temple Place - S
 #include "NLEqn.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "pager.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by hybrd1.
 static octave_function *fsolve_fcn;
 
 static NLEqn_options fsolve_opts;
 
+// Is this a recursive call?
+static int call_depth = 0;
+
 int
 hybrd_info_to_fsolve_info (int info)
 {
   switch (info)
     {
     case -1:
       info = -2;
       break;
@@ -129,58 +133,70 @@ Where the first argument is the name of 
 compute the vector of function values.  It must have the form\n\
 \n\
   y = f (x)\n\
 \n\
 where y and x are vectors.")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
+  unwind_protect::begin_frame ("Ffsolve");
 
-  if (nargin != 2 || nargout > 3)
+  unwind_protect_int (call_depth);
+  call_depth++;
+
+  if (call_depth > 1)
     {
-      print_usage ("fsolve");
+      error ("fsolve: invalid recursive call");
       return retval;
     }
 
-  fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
-				"function y = __fsolve_fcn__ (x) y = ",
-				"; endfunction");
-  if (! fsolve_fcn)
-    return retval;
+  int nargin = args.length ();
 
-  ColumnVector x = args(1).vector_value ();
+  if (nargin == 2 && nargout < 4)
+    {
+      fsolve_fcn = extract_function (args(0), "fsolve", "__fsolve_fcn__",
+				    "function y = __fsolve_fcn__ (x) y = ",
+				    "; endfunction");
+      if (! fsolve_fcn)
+	return retval;
 
-  if (error_state)
-    {
-      error ("fsolve: expecting vector as second argument");
-      return retval;
-    }
+      ColumnVector x = args(1).vector_value ();
 
-  if (nargin > 2)
-    warning ("fsolve: ignoring extra arguments");
+      if (error_state)
+	{
+	  error ("fsolve: expecting vector as second argument");
+	  return retval;
+	}
+
+      if (nargin > 2)
+	warning ("fsolve: ignoring extra arguments");
 
-  if (nargout > 2)
-    warning ("fsolve: can't compute path output yet");
+      if (nargout > 2)
+	warning ("fsolve: can't compute path output yet");
 
-  NLFunc foo_fcn (fsolve_user_function);
-  NLEqn foo (x, foo_fcn);
-  foo.set_options (fsolve_opts);
+      NLFunc foo_fcn (fsolve_user_function);
+      NLEqn foo (x, foo_fcn);
+      foo.set_options (fsolve_opts);
+
+      int info;
+      ColumnVector soln = foo.solve (info);
 
-  int info;
-  ColumnVector soln = foo.solve (info);
+      info = hybrd_info_to_fsolve_info (info);
 
-  info = hybrd_info_to_fsolve_info (info);
+      retval.resize (nargout ? nargout : 1);
+      retval(0) = soln, 1;
 
-  retval.resize (nargout ? nargout : 1);
-  retval(0) = soln, 1;
+      if (nargout > 1)
+	retval(1) = static_cast<double> (info);
+    }
+  else
+    print_usage ("fsolve");
 
-  if (nargout > 1)
-    retval(1) = static_cast<double> (info);
+  unwind_protect::run_frame ("Ffsolve");
 
   return retval;
 }
 
 typedef void (NLEqn_options::*d_set_opt_mf) (double);
 typedef double (NLEqn_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 1
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -32,27 +32,31 @@ Software Foundation, 59 Temple Place - S
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "pager.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by lsode.
 static octave_function *lsode_fcn;
 
 // Global pointer for optional user defined jacobian function used by lsode.
 static octave_function *lsode_jac;
 
 static LSODE_options lsode_opts;
 
+// Is this a recursive call?
+static int call_depth = 0;
+
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
   octave_value_list args;
@@ -135,124 +139,136 @@ The first argument is the name of the fu
 compute the vector of right hand sides.  It must have the form\n\
 \n\
   xdot = f (x, t)\n\
 \n\
 where xdot and x are vectors and t is a scalar.\n")
 {
   octave_value_list retval;
 
-  int nargin = args.length ();
+  unwind_protect::begin_frame ("Flsode");
 
-  if (nargin < 3 || nargin > 4 || nargout > 1)
+  unwind_protect_int (call_depth);
+  call_depth++;
+
+  if (call_depth > 1)
     {
-      print_usage ("lsode");
+      error ("lsode: invalid recursive call");
       return retval;
     }
 
-  octave_value f_arg = args(0);
+  int nargin = args.length ();
 
-  switch (f_arg.rows ())
+  if (nargin > 2 && nargin < 5 && nargout < 2)
     {
-    case 1:
-      lsode_fcn = extract_function
-	(args(0), "lsode", "__lsode_fcn__",
-	 "function xdot = __lsode_fcn__ (x, t) xdot = ",
-	 "; endfunction");
-      break;
+      octave_value f_arg = args(0);
 
-    case 2:
-      {
-	string_vector tmp = args(0).all_strings ();
+      switch (f_arg.rows ())
+	{
+	case 1:
+	  lsode_fcn = extract_function
+	    (args(0), "lsode", "__lsode_fcn__",
+	     "function xdot = __lsode_fcn__ (x, t) xdot = ",
+	     "; endfunction");
+	  break;
 
-	if (! error_state)
+	case 2:
 	  {
-	    lsode_fcn = extract_function
-	      (tmp(0), "lsode", "__lsode_fcn__",
-	       "function xdot = __lsode_fcn__ (x, t) xdot = ",
-	       "; endfunction");
+	    string_vector tmp = args(0).all_strings ();
 
-	    if (lsode_fcn)
+	    if (! error_state)
 	      {
-		lsode_jac = extract_function
-		  (tmp(1), "lsode", "__lsode_jac__",
-		   "function jac = __lsode_jac__ (x, t) jac = ",
+		lsode_fcn = extract_function
+		  (tmp(0), "lsode", "__lsode_fcn__",
+		   "function xdot = __lsode_fcn__ (x, t) xdot = ",
 		   "; endfunction");
 
-		if (! lsode_jac)
-		  lsode_fcn = 0;
+		if (lsode_fcn)
+		  {
+		    lsode_jac = extract_function
+		      (tmp(1), "lsode", "__lsode_jac__",
+		       "function jac = __lsode_jac__ (x, t) jac = ",
+		       "; endfunction");
+
+		    if (! lsode_jac)
+		      lsode_fcn = 0;
+		  }
 	      }
 	  }
-      }
-      break;
-
-    default:
-      error ("lsode: first arg should be a string or 2-element string array");
-      break;
-    }
-
-  if (error_state || ! lsode_fcn)
-    return retval;
-
-  ColumnVector state = args(1).vector_value ();
+	  break;
 
-  if (error_state)
-    {
-      error ("lsode: expecting state vector as second argument");
-      return retval;
-    }
-
-  ColumnVector out_times = args(2).vector_value ();
+	default:
+	  error ("lsode: first arg should be a string or 2-element string array");
+	  break;
+	}
 
-  if (error_state)
-    {
-      error ("lsode: expecting output time vector as third argument");
-      return retval;
-    }
+      if (error_state || ! lsode_fcn)
+	return retval;
 
-  ColumnVector crit_times;
-
-  int crit_times_set = 0;
-  if (nargin > 3)
-    {
-      crit_times = args(3).vector_value ();
+      ColumnVector state = args(1).vector_value ();
 
       if (error_state)
 	{
-	  error ("lsode: expecting critical time vector as fourth argument");
+	  error ("lsode: expecting state vector as second argument");
+	  return retval;
+	}
+
+      ColumnVector out_times = args(2).vector_value ();
+
+      if (error_state)
+	{
+	  error ("lsode: expecting output time vector as third argument");
 	  return retval;
 	}
 
-      crit_times_set = 1;
-    }
+      ColumnVector crit_times;
 
-  double tzero = out_times (0);
-  int nsteps = out_times.capacity ();
+      int crit_times_set = 0;
+      if (nargin > 3)
+	{
+	  crit_times = args(3).vector_value ();
 
-  ODEFunc func (lsode_user_function);
-  if (lsode_jac)
-    func.set_jacobian_function (lsode_user_jacobian);
+	  if (error_state)
+	    {
+	      error ("lsode: expecting critical time vector as fourth argument");
+	      return retval;
+	    }
 
-  LSODE ode (state, tzero, func);
+	  crit_times_set = 1;
+	}
 
-  ode.copy (lsode_opts);
+      double tzero = out_times (0);
+      int nsteps = out_times.capacity ();
+
+      ODEFunc func (lsode_user_function);
+      if (lsode_jac)
+	func.set_jacobian_function (lsode_user_jacobian);
 
-  int nstates = state.capacity ();
-  Matrix output (nsteps, nstates + 1);
+      LSODE ode (state, tzero, func);
+
+      ode.copy (lsode_opts);
+
+      int nstates = state.capacity ();
+      Matrix output (nsteps, nstates + 1);
 
-  if (crit_times_set)
-    output = ode.integrate (out_times, crit_times);
+      if (crit_times_set)
+	output = ode.integrate (out_times, crit_times);
+      else
+	output = ode.integrate (out_times);
+
+      if (! error_state)
+	{
+	  retval.resize (1);
+	  retval(0) = output;
+	}
+    }
   else
-    output = ode.integrate (out_times);
+    print_usage ("lsode");
 
-  if (! error_state)
-    {
-      retval.resize (1);
-      retval(0) = output;
-    }
+  unwind_protect::run_frame ("Flsode");
 
   return retval;
 }
 
 typedef void (LSODE_options::*d_set_opt_mf) (double);
 typedef void (LSODE_options::*i_set_opt_mf) (int);
 typedef double (LSODE_options::*d_get_opt_mf) (void);
 typedef int (LSODE_options::*i_get_opt_mf) (void);
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -164,17 +164,17 @@ min (const ComplexMatrix& a, const Compl
     }
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (int i = 0; i < nr; i++)
-	if (imag (a (i, j)) != 0.0 && imag (b (i, j)) != 0.0)
+	if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
 	  {
 	    columns_are_real_only = 0;
 	    break;
 	  }
 
       if (columns_are_real_only)
 	{
 	  for (int i = 0; i < nr; i++)
@@ -322,17 +322,17 @@ max (const ComplexMatrix& a, const Compl
     }
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (int i = 0; i < nr; i++)
-	if (imag (a (i, j)) != 0.0 && imag (b (i, j)) != 0.0)
+	if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
 	  {
 	    columns_are_real_only = 0;
 	    break;
 	  }
 
       if (columns_are_real_only)
 	{
 	  for (int i = 0; i < nr; i++)
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -32,28 +32,32 @@ Software Foundation, 59 Temple Place - S
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #if defined (quad)
 #undef quad
 #endif
 
 // Global pointer for user defined function required by quadrature functions.
 static octave_function *quad_fcn;
 
 static Quad_options quad_opts;
 
+// Is this a recursive call?
+static int call_depth = 0;
+
 double
 quad_user_function (double x)
 {
   double retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
@@ -106,151 +110,167 @@ accuracy of the result.  The first eleme
 absolute tolerance, and the second element is the desired relative\n\
 tolerance.\n\
 \n\
 The optional argument @var{sing} is a vector of values at which the\n\
 integrand is singular.")
 {
   octave_value_list retval;
 
+  unwind_protect::begin_frame ("Fquad");
+
+  unwind_protect_int (call_depth);
+  call_depth++;
+
+  if (call_depth > 1)
+    {
+      error ("quad: invalid recursive call");
+      return retval;
+    }
+
   int nargin = args.length ();
 
-  if (nargin < 3 || nargin > 5 || nargout > 4)
+  if (nargin > 2 && nargin < 6 && nargout < 5)
+    {
+      quad_fcn = extract_function (args(0), "quad", "__quad_fcn__",
+				   "function y = __quad_fcn__ (x) y = ",
+				   "; endfunction");
+      if (! quad_fcn)
+	return retval;
+
+      double a = args(1).double_value ();
+
+      if (error_state)
+	{
+	  error ("quad: expecting second argument to be a scalar");
+	  return retval;
+	}
+
+      double b = args(2).double_value ();
+
+      if (error_state)
+	{
+	  error ("quad: expecting third argument to be a scalar");
+	  return retval;
+	}
+
+      int indefinite = 0;
+      IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
+      double bound = 0.0;
+      if (xisinf (a) && xisinf (b))
+	{
+	  indefinite = 1;
+	  indef_type = IndefQuad::doubly_infinite;
+	}
+      else if (xisinf (a))
+	{
+	  indefinite = 1;
+	  bound = b;
+	  indef_type = IndefQuad::neg_inf_to_bound;
+	}
+      else if (xisinf (b))
+	{
+	  indefinite = 1;
+	  bound = a;
+	  indef_type = IndefQuad::bound_to_inf;
+	}
+
+      int ier = 0;
+      int nfun = 0;
+      double abserr = 0.0;
+      double val = 0.0;
+      double abstol = 1e-6;
+      double reltol = 1e-6;
+      ColumnVector tol (2);
+      ColumnVector sing;
+      int have_sing = 0;
+      switch (nargin)
+	{
+	case 5:
+	  if (indefinite)
+	    {
+	      error("quad: singularities not allowed on infinite intervals");
+	      return retval;
+	    }
+
+	  have_sing = 1;
+
+	  sing = args(4).vector_value ();
+
+	  if (error_state)
+	    {
+	      error ("quad: expecting vector of singularities as fourth argument");
+	      return retval;
+	    }
+
+	case 4:
+	  tol = args(3).vector_value ();
+
+	  if (error_state)
+	    {
+	      error ("quad: expecting vector of tolerances as fifth argument");
+	      return retval;
+	    }
+
+	  switch (tol.capacity ())
+	    {
+	    case 2:
+	      reltol = tol (1);
+
+	    case 1:
+	      abstol = tol (0);
+	      break;
+
+	    default:
+	      error ("quad: expecting tol to contain no more than two values");
+	      return retval;
+	    }
+
+	case 3:
+	  if (indefinite)
+	    {
+	      IndefQuad iq (quad_user_function, bound, indef_type, abstol, reltol);
+	      iq.set_options (quad_opts);
+	      val = iq.integrate (ier, nfun, abserr);
+	    }
+	  else
+	    {
+	      if (have_sing)
+		{
+		  DefQuad dq (quad_user_function, a, b, sing, abstol, reltol);
+		  dq.set_options (quad_opts);
+		  val = dq.integrate (ier, nfun, abserr);
+		}
+	      else
+		{
+		  DefQuad dq (quad_user_function, a, b, abstol, reltol);
+		  dq.set_options (quad_opts);
+		  val = dq.integrate (ier, nfun, abserr);
+		}
+	    }
+	  break;
+
+	default:
+	  panic_impossible ();
+	  break;
+	}
+
+      retval(3) = abserr;
+      retval(2) = static_cast<double> (nfun);
+      retval(1) = static_cast<double> (ier);
+      retval(0) = val;
+    }
+  else
     {
       print_usage ("quad");
       return retval;
     }
 
-  quad_fcn = extract_function (args(0), "quad", "__quad_fcn__",
-			       "function y = __quad_fcn__ (x) y = ",
-			       "; endfunction");
-  if (! quad_fcn)
-    return retval;
-
-  double a = args(1).double_value ();
-
-  if (error_state)
-    {
-      error ("quad: expecting second argument to be a scalar");
-      return retval;
-    }
-
-  double b = args(2).double_value ();
-
-  if (error_state)
-    {
-      error ("quad: expecting third argument to be a scalar");
-      return retval;
-    }
-
-  int indefinite = 0;
-  IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
-  double bound = 0.0;
-  if (xisinf (a) && xisinf (b))
-    {
-      indefinite = 1;
-      indef_type = IndefQuad::doubly_infinite;
-    }
-  else if (xisinf (a))
-    {
-      indefinite = 1;
-      bound = b;
-      indef_type = IndefQuad::neg_inf_to_bound;
-    }
-  else if (xisinf (b))
-    {
-      indefinite = 1;
-      bound = a;
-      indef_type = IndefQuad::bound_to_inf;
-    }
-
-  int ier = 0;
-  int nfun = 0;
-  double abserr = 0.0;
-  double val = 0.0;
-  double abstol = 1e-6;
-  double reltol = 1e-6;
-  ColumnVector tol (2);
-  ColumnVector sing;
-  int have_sing = 0;
-  switch (nargin)
-    {
-    case 5:
-      if (indefinite)
-	{
-	  error("quad: singularities not allowed on infinite intervals");
-	  return retval;
-	}
-
-      have_sing = 1;
-
-      sing = args(4).vector_value ();
-
-      if (error_state)
-	{
-	  error ("quad: expecting vector of singularities as fourth argument");
-	  return retval;
-	}
-
-    case 4:
-      tol = args(3).vector_value ();
-
-      if (error_state)
-	{
-	  error ("quad: expecting vector of tolerances as fifth argument");
-	  return retval;
-	}
-
-      switch (tol.capacity ())
-	{
-	case 2:
-	  reltol = tol (1);
-
-	case 1:
-	  abstol = tol (0);
-	  break;
-
-	default:
-	  error ("quad: expecting tol to contain no more than two values");
-	  return retval;
-	}
-
-    case 3:
-      if (indefinite)
-	{
-	  IndefQuad iq (quad_user_function, bound, indef_type, abstol, reltol);
-	  iq.set_options (quad_opts);
-	  val = iq.integrate (ier, nfun, abserr);
-	}
-      else
-	{
-	  if (have_sing)
-	    {
-	      DefQuad dq (quad_user_function, a, b, sing, abstol, reltol);
-	      dq.set_options (quad_opts);
-	      val = dq.integrate (ier, nfun, abserr);
-	    }
-	  else
-	    {
-	      DefQuad dq (quad_user_function, a, b, abstol, reltol);
-	      dq.set_options (quad_opts);
-	      val = dq.integrate (ier, nfun, abserr);
-	    }
-	}
-      break;
-
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  retval(3) = abserr;
-  retval(2) = static_cast<double> (nfun);
-  retval(1) = static_cast<double> (ier);
-  retval(0) = val;
+ abort:
+  unwind_protect::run_frame ("Fquad");
 
   return retval;
 }
 
 typedef void (Quad_options::*d_set_opt_mf) (double);
 typedef double (Quad_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 2
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -649,19 +649,19 @@ DEFUN (fscanf, args, ,
   "[A, COUNT] = fscanf (FILENUM, FORMAT [, SIZE])\n\
 \n\
 Read from FILENUM according to FORMAT, returning the result in the\n\
 matrix A.  SIZE is optional.  If present, it can be one of\n\
 \n\
        Inf : read as much as possible, returning a column vector\n\
              (unless doing all character conversions, in which case a\n\
              string is returned)\n\
-        NR : read as much as possible, returning a matrix with NR rows\n\
+        NR : read up to NR elements, returning a column vector\n\
   [NR, NC] : read up to NR x NC elements, returning a matrix with NR rows\n\
- [NR, Inf] : same as NR\n\
+ [NR, Inf] : read as much as possible, returning a matrix with NR rows\n\
 \n\
 If it is omitted, a value of Inf is assumed.\n\
 \n\
 The number of items successfully read is returned in COUNT.\n\
 \n\
 [A, B, ...] = fscanf (FILENUM, FORMAT, \"C\")\n\
 \n\
 Read from FILENUM according to FORMAT, with each conversion specifier\n\
@@ -735,19 +735,19 @@ DEFUN (sscanf, args, ,
   "[A, COUNT, ERRMSG, INDEX] = sscanf (STRING, FORMAT, SIZE)\n\
 \n\
 Read from STRING according to FORMAT, returning the result in the\n\
 matrix A.  SIZE is optional.  If present, it can be one of\n\
 \n\
        Inf : read as much as possible, returning a column vector\n\
              (unless doing all character conversions, in which case a\n\
              string is returned)\n\
-        NR : read as much as possible, returning a matrix with NR rows\n\
+        NR : read up to NR elements, returning a column vector\n\
   [NR, NC] : read up to NR x NC elements, returning a matrix with NR rows\n\
- [NR, Inf] : same as NR\n\
+ [NR, Inf] : read as much as possible, returning a matrix with NR rows\n\
 \n\
 If it is omitted, a value of Inf is assumed.\n\
 \n\
 The number of items successfully read is returned in COUNT.  If an\n\
 error occurs, ERRMSG contains the text of the corresponding error\n\
 message.  INDEX contains the index of the next character to be read\n\
 from STRING\n\
 \n\
