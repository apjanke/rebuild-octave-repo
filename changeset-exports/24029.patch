# HG changeset patch
# User Rik <rik@octave.org>
# Date 1505061793 25200
#      Sun Sep 10 09:43:13 2017 -0700
# Node ID 1d184b55416a55324ea3ef7a808abcb4d0f18312
# Parent  ca4ab27152a9af04c42f99c68ea76155ea91d43d
Use Octave conventions in variable editor code.

* variable-editor-model.cc, variable-editor-model.h, variable-editor.cc,
variable-editor.h:  Use C++ '//' for comments rather than C-style comments.
In generated code, cuddle parentheses with variable to indicate indexing.
In generated code, use double quotes rather than single quotes.
Indent lines more clearly.  Add FIXME about using int32_t for indexing rather
than octave_idx_type.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -209,17 +209,17 @@ variable_editor_model::variable_editor_m
   connect (this, SIGNAL (user_error (const QString&, const QString&)),
            this, SLOT (received_user_error (const QString&, const QString&)));
   connect (this, SIGNAL (initialize_data (const QString&, const QString&,
                                           int, int)),
            this, SLOT (received_initialize_data (const QString&,
                                                  const QString&,
                                                  int, int)));
 
-  clear_data_cache (); // initializes everything
+  clear_data_cache ();  // initializes everything
 }
 
 variable_editor_model::~variable_editor_model (void)
 {
   delete m_d;
 }
 
 void
@@ -354,25 +354,25 @@ variable_editor_model::insertRows (int r
   return true;
 }
 
 bool
 variable_editor_model::removeRows (int row, int count, const QModelIndex&)
 {
   if (row + count > m_d->m_rows)
     {
-      qDebug () << "Try to remove too many rows " << m_d->m_rows << " "
+      qDebug () << "Tried to remove too many rows " << m_d->m_rows << " "
                 << count << " (" << row << ")";
       return false;
     }
 
   octave_link::post_event <variable_editor_model, const std::string&,
                            const std::string&>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
-     QString ("%1 (%2:%3, :) = []")
+     QString ("%1(%2:%3, :) = []")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (row)
      .arg (row + count)
      .toStdString ());
 
   return true;
 }
 
@@ -391,25 +391,25 @@ variable_editor_model::insertColumns (in
   return true;
 }
 
 bool
 variable_editor_model::removeColumns (int col, int count, const QModelIndex&)
 {
   if (col + count > m_d->m_cols)
     {
-      qDebug () << "Try to remove too many cols " << m_d->m_cols << " "
+      qDebug () << "Tried to remove too many cols " << m_d->m_cols << " "
                 << count << " (" << col << ")";
       return false;
     }
 
   octave_link::post_event <variable_editor_model, const std::string&,
                            const std::string&>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
-     QString ("%1 (:, %2:%3) = []")
+     QString ("%1(:, %2:%3) = []")
      .arg (QString::fromStdString (m_d->m_name))
      .arg (col)
      .arg (col + count)
      .toStdString ());
 
   return true;
 }
 
@@ -445,30 +445,30 @@ variable_editor_model::received_data (in
 
   bool subedit = rows != 1 || cols != 1 || class_info == QString ("struct");
 
   sub_editor_types edittype;
   if (!subedit)
     edittype = sub_none;
   else
     {
-      if (class_info == QString("char") && rows == 1)
+      if (class_info == QString ("char") && rows == 1)
         edittype = sub_string;
       else
         edittype = sub_matrix;
     }
   if (class_info == QString ("struct"))
     edittype = sub_struct;
 
 
 
   m_d->set (r, c, impl::cell (dat, status_tip, tool_tip,
-                            rows > 1 || cols > 1
-                            || class_info == QString ("struct"),
-                            edittype));
+                              rows > 1 || cols > 1
+                              || class_info == QString ("struct"),
+                              edittype));
 
   QModelIndex idx = QAbstractTableModel::index (r, c);
 
   emit dataChanged (idx, idx);
 }
 
 void
 variable_editor_model::received_no_data (int r, int c)
@@ -615,22 +615,19 @@ variable_editor_model::set_data_oct (con
   std::list<octave_value_list> idxl;
   idxl.push_back (ovlidx);
   v.subsasgn (m_d->m_type, idxl, ret);
   emit unset_data (row, col);
   QModelIndex idx = QAbstractTableModel::index (row, col);
   emit dataChanged (idx, idx);
 }
 
-/**
- * If the variable exists, load it into the data model. If it doesn't exist,
- * flag the data model as referring to a nonexistant variable.
- *
- * This allows the variable to be opened before it is created.
- */
+// If the variable exists, load it into the data model.  If it doesn't exist,
+// flag the data model as referring to a nonexistent variable.
+// This allows the variable to be opened before it is created.
 octave_value
 variable_editor_model::retrieve_variable (const std::string& x,
                                           int& parse_status)
 {
   std::string name = x;
 
   if (x.back () == ')' || x.back () == '}')
     name = x.substr (0, x.find (x.back () == ')' ? "(" : "{"));
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -41,17 +41,18 @@ enum sub_editor_types
 
 class
 variable_editor_model : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
-  variable_editor_model (const QString &expr, QLabel *label, QObject *p = 0);
+  variable_editor_model (const QString &expr, QLabel *label,
+                         QObject *p = nullptr);
 
   ~variable_editor_model (void);
 
   int rowCount (const QModelIndex& = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& = QModelIndex ()) const;
 
   QVariant data (const QModelIndex& idx, int role = Qt::DisplayRole) const;
@@ -77,21 +78,18 @@ public:
 
   // Is cell at idx complex enough to require a sub editor?
   bool requires_sub_editor (const QModelIndex& idx) const;
 
   // If a sub editor is required, is it a standard type?
   bool editor_type_matrix (const QModelIndex& idx) const;
   bool editor_type_string (const QModelIndex& idx) const;
 
-  /** Return the proper parens to access the data structure.
-   *
-   * {%1,%2} for cell and (%1,%2) for matrices.  Use QString::arg to
-   * set the index.
-   */
+  // Return the proper parens to access the data structure.
+  // {%1,%2} for cell and (%1,%2) for matrices.
   QString parens (void) const;
 
 signals: // private
 
   void data_ready (int r, int c, const QString& data,
                    const QString& class_info, int rows, int cols);
 
   void no_data (int r, int c);
@@ -116,19 +114,17 @@ private slots:
 
   void received_user_error (const QString& title, const QString& msg);
 
   void received_initialize_data (const QString& class_name,
                                  const QString& paren, int rows, int cols);
 
 private:
 
-  /** Get data for ov(row, col)
-   * This must be executed in the octave thread!
-   */
+  // Get data for ov(row, col).  This must be executed in the octave thread!
   void get_data_oct (int row, int col, const std::string& v) /*const*/;
 
   void set_data_oct (const std::string& v, int row, int col,
                      const std::string& val);
 
   void init_from_oct (const std::string& x);
 
   void eval_oct (const std::string& name, const std::string& expr);
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -128,18 +128,18 @@ variable_editor::variable_editor (QWidge
 }
 
 variable_editor::~variable_editor (void)
 {
   // m_tool_bar and m_tab_widget are contained within m_main
   delete m_main;
 }
 
-// Returns the real variable name from the tab addressed by 'index'
-// cleaned from '&' possible inserted by KDE
+// Returns the real variable name from the tab addressed by 'index',
+// cleaned of any '&' possibly inserted by KDE.
 QString
 variable_editor::real_var_name (int index)
 {
   QString var_name = m_tab_widget->tabText (index);
   var_name.remove (QChar ('&'));
   return var_name;
 }
 
@@ -335,17 +335,18 @@ void variable_editor::notice_settings (c
   m_default_height = settings->value ("variable_editor/row_height",
                                     QVariant ("10")).toString ().toInt ();
   m_alternate_rows = settings->value ("variable_editor/alternate_rows",
                                     QVariant (false)).toBool ();
 
   QList<QColor> _default_colors = resource_manager::varedit_default_colors ();
   QString class_chars = resource_manager::varedit_color_chars ();
 
-  m_use_terminal_font = settings->value ("variable_editor/use_terminal_font", true).toBool ();
+  m_use_terminal_font = settings->value ("variable_editor/use_terminal_font",
+                                         true).toBool ();
 
   QString font_name;
   int font_size;
 
   if (m_use_terminal_font)
     {
       font_name = settings->value ("terminal/fontName", "").toString ();
       font_size = settings->value ("terminal/fontSize", 10).toInt ();
@@ -402,17 +403,17 @@ variable_editor::closeTab (int idx)
   if (idx < 0 || idx > m_tab_widget->count ())
     return;
 
   QWidget *const wdgt = m_tab_widget->widget (idx);
   m_tab_widget->removeTab (idx);
   delete wdgt;
 
   if (m_tab_widget->count () == 0)
-    m_tool_bar->setEnabled (false);  // This was the last tab, disable tool bar.
+    m_tool_bar->setEnabled (false);  // Last tab, disable tool bar.
 }
 
 void
 variable_editor::contextmenu_requested (const QPoint& qpos)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QModelIndex index = view->indexAt (qpos);
 
@@ -420,17 +421,17 @@ variable_editor::contextmenu_requested (
     {
       QMenu *menu = new QMenu (this);
       menu->addAction (resource_manager::icon ("edit-cut"), tr ("Cut"),
                        this, SLOT (cutClipboard ()));
       menu->addAction (resource_manager::icon ("edit-copy"), tr ("Copy"),
                        this, SLOT (copyClipboard ()));
       menu->addAction (resource_manager::icon ("edit-paste"), tr ("Paste"),
                        this, SLOT (pasteClipboard ()));
-      // FIXME: better icon for paste table?
+      // FIXME: need different icon for paste table separate from paste?
       menu->addAction (resource_manager::icon ("edit-paste"), tr ("Paste Table"),
                        this, SLOT (pasteTableClipboard ()));
 
       menu->addSeparator ();
 
       menu->addAction (resource_manager::icon ("edit-delete"), tr ("Clear"),
                        this, SLOT (clearContent ()));
       menu->addAction (resource_manager::icon ("document-new"),
@@ -516,30 +517,30 @@ variable_editor::columnmenu_requested (c
   if (! whole_columns_selected || ! current_column_selected)
     {
       view->selectColumn (index);
       column_selection_count = 1;
       current_column_selected = true;
       whole_columns_selected = true;
     }
 
-  QString column_string =
-    tr (column_selection_count > 1 ? " columns" : " column");
+  QString column_string = tr (column_selection_count > 1 ? " columns"
+                                                         : " column");
 
   QMenu *menu = new QMenu (this);
   menu->addAction (resource_manager::icon ("edit-cut"),
                    tr ("Cut") + column_string,
                    this, SLOT (cutClipboard ()));
   menu->addAction (resource_manager::icon ("edit-copy"),
                    tr ("Copy") + column_string,
                    this, SLOT (copyClipboard ()));
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste"),
                    this, SLOT (pasteClipboard ()));
-  // FIXME: better icon for Paste Table?
+  // FIXME: different icon for Paste Table?
   menu->addAction (resource_manager::icon ("edit-paste"),
                    tr ("Paste Table"),
                    this, SLOT (pasteTableClipboard ()));
 
   menu->addSeparator ();
 
   menu->addAction (resource_manager::icon ("edit-delete"),
                    tr ("Clear") + column_string,
@@ -732,18 +733,18 @@ variable_editor::save (void)
   QString name = real_var_name (m_tab_widget->currentIndex ());
   QString file =
     QFileDialog::getSaveFileName (this,
                                   tr ("Save Variable %1 As").arg (name),
                                   ".", 0, 0,
                                   QFileDialog::DontUseNativeDialog);
   // FIXME: Type? binary, float-binary, ascii, text, hdf5, matlab format?
   if (! file.isEmpty ())
-    // FIXME: Use octave_value::save_*?
-    emit command_requested (QString ("save ('%1', '%2');")
+    // FIXME: Call octave_value::save_* directly?
+    emit command_requested (QString ("save (\"%1\", \"%2\");")
                             .arg (file)
                             .arg (name));
 }
 
 void
 variable_editor::clearContent (void)
 {
   // FIXME: shift?
@@ -794,17 +795,16 @@ variable_editor::copyClipboard (void)
 
   QClipboard *clipboard = QApplication::clipboard ();
   clipboard->setText (copy);
 }
 
 void
 variable_editor::pasteClipboard (void)
 {
-  // FIXME: ???
   if (! has_focus ())
     return;
 
   QClipboard *clipboard = QApplication::clipboard ();
   QString text = clipboard->text ();
 
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QItemSelectionModel *sel = view->selectionModel ();
@@ -918,17 +918,17 @@ void variable_editor::pasteTableClipboar
     }
 
   emit updated ();
 }
 
 void
 variable_editor::createVariable (void)
 {
-  // FIXME: unnamed1..n if exist ('unnamed', 'var')
+  // FIXME: Create unnamed1..n if exist ('unnamed', 'var') is true.
   relay_command ("unnamed = %1");
 }
 
 void
 variable_editor::transposeContent (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
   emit command_requested (QString ("%1 = %1';").arg (name));
@@ -955,19 +955,19 @@ variable_editor::delete_selected (void)
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QString selection = selected_to_octave ();
   QList<int> coords = octave_to_coords (selection);
 
   if (coords.isEmpty ())
     return;
 
   bool whole_columns_selected = coords[0] == 1
-    && coords[1] == view->model ()->rowCount ();
+                                && coords[1] == view->model ()->rowCount ();
   bool whole_rows_selected = coords[2] == 1
-    && coords[3] == view->model ()->columnCount ();
+                             && coords[3] == view->model ()->columnCount ();
 
   emit command_requested (QString ("disp ('")
                           + QString::number (coords[0]) + ","
                           + QString::number (coords[1]) + ","
                           + QString::number (coords[2]) + ","
                           + QString::number (coords[3]) + "');");
 
   // Must be deleting whole columns or whole rows, and not the whole thing.
@@ -987,25 +987,25 @@ void
 variable_editor::relay_command (const QString& cmd)
 {
   emit command_requested (cmd.arg (selected_to_octave ()));
 }
 
 QList<int>
 variable_editor::octave_to_coords (QString& selection)
 {
-  // FIXME: Is this necessary or would it be quicker to clone the function that
-  // gives us the QString?
+  // FIXME: Is this necessary or would it be quicker to clone the function
+  //        that gives us the QString?
 
   // sanity check
   if (selection.count (",") != 1)
     return QList<int> ();
 
   QList<int> output;
-  output.clear ();
+  output.clear ();  // FIXME: Why clear if object has just been created?
   // remove braces
   int firstbracket = std::max (selection.indexOf ("("),
                                selection.indexOf ("{"));
   selection = selection.mid (firstbracket + 1,
                              selection.length () - (firstbracket + 2));
 
   QString rows = selection.left (selection.indexOf (","));
   if (! rows.contains (":"))
@@ -1049,60 +1049,63 @@ variable_editor::selected_to_octave (voi
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QItemSelectionModel *sel = view->selectionModel ();
 
   if (! sel->hasSelection ())
     return name;  // Nothing selected
 
   QList<QModelIndex> indices = sel->selectedIndexes ();  // it's indices!
 
+  // FIXME: Shouldn't this be keyed to octave_idx_type?
+  // If octave_idx_type is 64-bit then one could have 2^64,1 vector which
+  // overflows int32_t type.
   int32_t from_row = std::numeric_limits<int32_t>::max ();
   int32_t to_row = 0;
   int32_t from_col = std::numeric_limits<int32_t>::max ();
   int32_t to_col = 0;
 
   for (const auto& idx : indices)
     {
       from_row = std::min (from_row, idx.row ());
       to_row = std::max (to_row, idx.row ());
       from_col = std::min (from_col, idx.column ());
       to_col = std::max (to_col, idx.column ());
     }
 
   QString rows = idx_to_expr (from_row, to_row);
   QString cols = idx_to_expr (from_col, to_col);
 
-  // FIXME: Cells?
-  return QString ("%1 (%2, %3)").arg (name).arg (rows).arg (cols);
+  // FIXME: Do cell needs separate handling?  Maybe use '{.,.}'?
+  return QString ("%1(%2, %3)").arg (name).arg (rows).arg (cols);
 }
 
 /// Also updates the font
 void variable_editor::update_colors (void)
 {
   m_stylesheet = "";
   m_stylesheet += "QTableView::item{ foreground-color: "
-    + m_table_colors[0].name () +" }";
+                  + m_table_colors[0].name () +" }";
   m_stylesheet += "QTableView::item{ background-color: "
-    + m_table_colors[1].name () +" }";
+                  + m_table_colors[1].name () +" }";
   m_stylesheet += "QTableView::item{ selection-color: "
-    + m_table_colors[2].name () +" }";
+                  + m_table_colors[2].name () +" }";
   m_stylesheet += "QTableView::item:selected{ background-color: "
-    + m_table_colors[3].name () +" }";
+                  + m_table_colors[3].name () +" }";
   if (m_table_colors.length () > 4 && m_alternate_rows)
     {
       m_stylesheet += "QTableView::item:alternate{ background-color: "
-        + m_table_colors[4].name () +" }";
+                      + m_table_colors[4].name () +" }";
       m_stylesheet += "QTableView::item:alternate:selected{ background-color: "
-        + m_table_colors[3].name () +" }";
+                      + m_table_colors[3].name () +" }";
     }
 
   if (m_tab_widget->count () < 1)
     return;
 
-  for (int i=0; i < m_tab_widget->count (); i++)
+  for (int i = 0; i < m_tab_widget->count (); i++)
     {
       QTableView *view = get_table_data (m_tab_widget).m_table;
       view->setAlternatingRowColors (m_alternate_rows);
       view->setStyleSheet (m_stylesheet);
       view->setFont (m_font);
     }
 
 }
@@ -1110,27 +1113,29 @@ void variable_editor::update_colors (voi
 void
 variable_editor::construct_tool_bar (void)
 {
   m_tool_bar->setObjectName ("VariableEditorToolBar");
   m_tool_bar->setWindowTitle (tr ("Variable Editor Toolbar"));
 
   m_tool_bar->addAction (resource_manager::icon ("document-save"), tr ("Save"),
                          this, SLOT (save ()));
+
   m_tool_bar->addSeparator ();
 
   m_tool_bar->addAction (resource_manager::icon ("edit-cut"), tr ("Cut"),
                          this, SLOT (cutClipboard ()));
   m_tool_bar->addAction (resource_manager::icon ("edit-copy"), tr ("Copy"),
                          this, SLOT (copyClipboard ()));
   m_tool_bar->addAction (resource_manager::icon ("edit-paste"), tr ("Paste"),
                          this, SLOT (pasteClipboard ()));
   // FIXME: Different icon for Paste Table?
   m_tool_bar->addAction (resource_manager::icon ("edit-paste"), tr ("Paste Table"),
                          this, SLOT (pasteTableClipboard ()));
+
   m_tool_bar->addSeparator ();
 
   // FIXME: Add a print item?
   //QAction *print_action; /icons/fileprint.png
   //m_tool_bar->addSeparator ();
 
   QToolButton *plot_tool_button = new QToolButton (m_tool_bar);
   plot_tool_button->setText (tr ("Plot"));
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -81,19 +81,18 @@ protected slots:
   void pasteClipboard (void);
   void pasteTableClipboard (void);
   void createVariable (void);
   void transposeContent (void);
   void up (void);
 
   void delete_selected (void);
 
-  /** Send command to Octave interpreter.
-   * %1 in CMD is replaced with the value of selected_to_octave.
-   */
+  // Send command to Octave interpreter.
+  // %1 in CMD is replaced with the value of selected_to_octave.
   void relay_command (const QString& cmd);
 
 signals:
 
   void updated (void);
   void finished (void);
   void command_requested (const QString& cmd);
 
