# HG changeset patch
# User jwe
# Date 1026928807 0
#      Wed Jul 17 18:00:07 2002 +0000
# Node ID d4091aff646824a027216345164244d1c365eab1
# Parent  98107d72871cc30ad8f78d5fc3e0847b3203165f
[project @ 2002-07-17 18:00:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2002-07-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* base-de.h (base_diff_eqn::istate): New data member.
+	(base_diff_eqn::integration_state): New member function.
+	* LSODE.h, LSODE.cc, ODESSA.h, ODESSA.cc: Delete corresponding
+	data members and functions.
+	* DASPK.h, DASRT.h, DASSL.h: Delete idid data member.
+	* DASPK.cc, DASRT.cc, DASSL.cc: Use istate instead of idid.
+
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* base-de.h (base_diff_eqn::stop_time,
 	base_diff_eqn::stop_time_set, base_diff_eqn::restart,
 	base_diff_eqn::integration_error): New data members.
 	(base_diff_eqn::set_stop_time, base_diff_eqn::clear_stop_time,
 	base_diff_eqn::force_restart, base_diff_eqn::integration_ok,
 	base_diff_eqn::error_message): New member functions.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -264,28 +264,28 @@ DASPK::do_integrate (double tout)
 
   int *pinfo = info.fortran_vec ();
   int *piwork = iwork.fortran_vec ();
   double *prwork = rwork.fortran_vec ();
 
 // again:
 
   F77_XFCN (ddaspk, DDASPK, (ddaspk_f, n, t, px, pxdot, tout, pinfo,
-			     rel_tol, abs_tol, idid, prwork, lrw,
+			     rel_tol, abs_tol, istate, prwork, lrw,
 			     piwork, liw, dummy, idummy, ddaspk_j,
 			     ddaspk_psol));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in daspk");
     }
   else
     {
-      switch (idid)
+      switch (istate)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TSTOP was successfully completed
 	        // (T=TSTOP) by stepping exactly to TSTOP.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
@@ -325,17 +325,18 @@ DASPK::do_integrate (double tout)
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
 	  integration_error = true;
 	  break;
 
 	default:
 	  integration_error = true;
 	  (*current_liboctave_error_handler)
-	    ("unrecognized value of idid (= %d) returned from ddaspk", idid);
+	    ("unrecognized value of istate (= %d) returned from ddaspk",
+	     istate);
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -489,17 +490,17 @@ DASPK::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASPK::error_message (void) const
 {
   std::string retval;
 
-  switch (idid)
+  switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
       break;
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -133,17 +133,16 @@ public:
 
   std::string error_message (void) const;
 
 private:
 
   int n;
   int liw;  
   int lrw;
-  int idid;
   int sanity_checked;
   Array<int> info;
   Array<int> iwork;
   Array<double> rwork;
 
   friend int ddaspk_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -311,28 +311,28 @@ DASRT::integrate (double tout)
       else
 	info(3) = 0;
     }
 
   double *dummy = 0;
   int *idummy = 0;
 
   F77_XFCN (ddasrt, DASRT, (ddasrt_f, n, t, px, pxdot, tout, pinfo,
-			    &rel_tol, &abs_tol, idid, prwork, lrw,
+			    &rel_tol, &abs_tol, istate, prwork, lrw,
 			    piwork, liw, dummy, idummy, ddasrt_j,
 			    ddasrt_g, ng, pjroot));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in dassl");
     }
   else
     {
-      switch (idid)
+      switch (istate)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping exactly to TOUT.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
@@ -366,17 +366,18 @@ DASRT::integrate (double tout)
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
 	  integration_error = true;
 	  break;
 
 	default:
 	  integration_error = true;
 	  (*current_liboctave_error_handler)
-	    ("unrecognized value of idid (= %d) returned from ddasrt", idid);
+	    ("unrecognized value of istate (= %d) returned from ddasrt",
+	     istate);
 	  break;
 	}
     }
 }
 
 DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
@@ -404,28 +405,28 @@ DASRT::integrate (const ColumnVector& to
 	  integrate (tout(j));
 
 	  if (integration_error)
 	    {
 	      retval = DASRT_result (x_out, xdot_out, t_out);
 	      return retval;
 	    }
 
-          if (idid == 4)
+          if (istate == 4)
             t_out(j) = t;
           else
             t_out(j) = tout(j);
 
 	  for (int i = 0; i < n; i++)
 	    {
 	      x_out(j,i) = x(i);
 	      xdot_out(j,i) = xdot(i);
 	    }
 
-          if (idid == 4)
+          if (istate == 4)
 	    {
 	      x_out.resize (j+1, n);
 	      xdot_out.resize (j+1, n);
 	      t_out.resize (j+1);
 	      break;
 	    }
 	}
     }
@@ -508,30 +509,30 @@ DASRT::integrate (const ColumnVector& to
 	      integrate (t_out);
 
 	      if (integration_error)
 		{
 		  retval = DASRT_result (x_out, xdot_out, t_outs);
 		  return retval;
 		}
 
-              if (idid == 4)
+              if (istate == 4)
                 t_out = t;
 
 	      if (save_output)
 		{
 		  for (int i = 0; i < n; i++)
 		    {
 		      x_out(i_out-1,i) = x(i);
 		      xdot_out(i_out-1,i) = xdot(i);
 		    }
 
                   t_outs(i_out-1) = t_out;
 
-                  if (idid == 4)
+                  if (istate == 4)
                     {
                       x_out.resize (i_out, n);
                       xdot_out.resize (i_out, n);
                       t_outs.resize (i_out);
                       i_out = n_out;
                     }
 		}
 
@@ -553,17 +554,17 @@ DASRT::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASRT::error_message (void) const
 {
   std::string retval;
 
-  switch (idid)
+  switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
       break;
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -175,17 +175,16 @@ public:
 private:
 
   bool initialized;
 
   bool sanity_checked;
 
   int liw;  
   int lrw;
-  int idid;
 
   int n;
   int ng;
 
   Array<int> info;
   Array<int> iwork;
   Array<int> jroot;
 
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -238,27 +238,27 @@ DASSL::do_integrate (double tout)
 
   int *pinfo = info.fortran_vec ();
   int *piwork = iwork.fortran_vec ();
   double *prwork = rwork.fortran_vec ();
 
 // again:
 
   F77_XFCN (ddassl, DDASSL, (ddassl_f, n, t, px, pxdot, tout, pinfo,
-			     rel_tol, abs_tol, idid, prwork, lrw,
+			     rel_tol, abs_tol, istate, prwork, lrw,
 			     piwork, liw, dummy, idummy, ddassl_j));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in dassl");
     }
   else
     {
-      switch (idid)
+      switch (istate)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TSTOP was successfully completed
 	        // (T=TSTOP) by stepping exactly to TSTOP.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
@@ -289,17 +289,18 @@ DASSL::do_integrate (double tout)
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
 	  integration_error = true;
 	  break;
 
 	default:
 	  integration_error = true;
 	  (*current_liboctave_error_handler)
-	    ("unrecognized value of idid (= %d) returned from ddassl", idid);
+	    ("unrecognized value of istate (= %d) returned from ddassl",
+	     istate);
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -453,17 +454,17 @@ DASSL::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASSL::error_message (void) const
 {
   std::string retval;
 
-  switch (idid)
+  switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
       break;
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -133,17 +133,16 @@ public:
 
   std::string error_message (void) const;
 
 private:
 
   int n;
   int liw;  
   int lrw;
-  int idid;
   bool sanity_checked;
   Array<int> info;
   Array<int> iwork;
   Array<double> rwork;
 
   friend int ddassl_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -65,29 +65,27 @@ int F77_FUNC (lsode, LSODE) (lsode_fcn_p
 static ODEFunc::ODERHSFunc user_fun;
 static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 LSODE::LSODE (void) : ODE (), LSODE_options ()
 {
   n = size ();
 
-  istate = 1;
   itask = 1;
   iopt = 0;
 
   sanity_checked = false;
 }
 
 LSODE::LSODE (const ColumnVector& state, double time, const ODEFunc& f)
   : ODE (state, time, f), LSODE_options ()
 {
   n = size ();
 
-  istate = 1;
   itask = 1;
   iopt = 0;
 
   sanity_checked = false;
 }
 
 int
 lsode_f (const int& neq, const double& time, double *,
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -154,27 +154,24 @@ public:
   ~LSODE (void) { }
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
-  int integration_state (void) const { return istate; }
-
   std::string error_message (void) const;
 
 private:
 
   int n;
   int method_flag;
   Array<int> iwork;
   Array<double> rwork;
-  int istate;
   int itask;
   int iopt;
   int liw;
   int lrw;
   bool sanity_checked;
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -173,17 +173,16 @@ odessa_b (int* neq, const double& t, dou
 
 ODESSA::ODESSA (void) : ODES (), ODESSA_options ()
 {
   neq.resize(2);
   n = size ();
 
   iopt.resize(4);
 
-  istate = 1;
   itask = 1;
   iopt(0) = 0;
   isopt = 0;
   iopt(1) = isopt;
   npar = 0;
   neq(0) = n;
   neq(1) = npar;
 
@@ -192,17 +191,16 @@ ODESSA::ODESSA (void) : ODES (), ODESSA_
 
 ODESSA::ODESSA (const ColumnVector& state, double time, ODESFunc& f)
   : ODES (state, time, f), ODESSA_options ()
 {
   neq.resize(2);
   n = size ();
 
   iopt.resize(4);
-  istate = 1;
   itask = 1;
   iopt(0) = 0;
   isopt = 0;
   iopt(1) = isopt;
 
   sanity_checked = false;
 
   npar = 0;
@@ -233,17 +231,16 @@ ODESSA::ODESSA (const ColumnVector& stat
       par(i) = theta(i);
     }
 
   sanity_checked = false;
 
   npar = theta.length ();
 
   iopt.resize(4);
-  istate = 1;
   itask = 1;
   iopt(0) = 0;
   isopt = 1;
   iopt(1) = isopt;
 
   y.resize (n, npar+1, 0.0);
 }
 
@@ -424,20 +421,20 @@ ODESSA::integrate (double tout)
       piwork = iwork.fortran_vec ();
       prwork = rwork.fortran_vec ();
       ppar = par.fortran_vec ();
       piopt = iopt.fortran_vec ();
       pneq = neq.fortran_vec ();
 
   const double *pabs_tol = abs_tol.fortran_vec ();
 
-   F77_XFCN (odessa, ODESSA, (odessa_f,odessa_b,pneq,py,ppar,t, tout,
-			      itol,rel_tol,pabs_tol,itask,istate,
-			      piopt,prwork,lrw,piwork,liw,odessa_j,
-			      method_flag));
+   F77_XFCN (odessa, ODESSA, (odessa_f, odessa_b, pneq, py, ppar, t,
+			      tout, itol, rel_tol, pabs_tol, itask,
+			      istate, piopt, prwork, lrw, piwork, liw,
+			      odessa_j, method_flag));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in odessa");
     }
   else
     {
diff --git a/liboctave/ODESSA.h b/liboctave/ODESSA.h
--- a/liboctave/ODESSA.h
+++ b/liboctave/ODESSA.h
@@ -192,32 +192,29 @@ public:
 
   ~ODESSA (void) { }
 
   ODESSA_result integrate (const ColumnVector& tout);
 
   ODESSA_result integrate (const ColumnVector& tout,
 			   const ColumnVector& tcrit); 
 
-  int integration_state (void) const { return istate; }
-
   std::string error_message (void) const;
 
 private:
 
   bool initialized;
 
   bool sanity_checked;
 
   int liw;  
   int lrw;
   int method_flag;
   Array<int> iwork;
   Array<double> rwork;
-  int istate;
   int itask;
   Array<int> iopt;
   int isopt;
 
   Array<int> neq;
 
   int n;
   int npar;
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -30,48 +30,50 @@ Software Foundation, 59 Temple Place - S
 
 class
 base_diff_eqn
 {
 public:
 
   base_diff_eqn (void)
     : x (), t (0.0), stop_time (0.0), stop_time_set (false),
-      restart (true), integration_error (false) { } 
+      restart (true), integration_error (false), istate (0) { } 
 
   base_diff_eqn (const ColumnVector& xx, double tt)
     : x (xx), t (tt), stop_time (0.0), stop_time_set (false),
-      restart (true), integration_error (false) { }
+      restart (true), integration_error (false), istate (0) { }
 
   base_diff_eqn (const base_diff_eqn& a)
     : x (a.x), t (a.t), stop_time (0.0), stop_time_set (false),
-      restart (true), integration_error (false) { }
+      restart (true), integration_error (false), istate (0) { }
 
   virtual ~base_diff_eqn (void) { }
 
   base_diff_eqn& operator = (const base_diff_eqn& a)
     {
       if (this != &a)
 	{
 	  x = a.x;
 	  t = a.t;
 	  stop_time = a.stop_time;
 	  stop_time_set = a.stop_time_set;
 	  restart = a.restart;
 	  integration_error = a.integration_error;
+	  istate = a.istate;
 	}
 
       return *this;
     }
 
   void initialize (const ColumnVector& x0, double t0)
     {
       x = x0;
       t = t0;
       integration_error = false;
+      istate = 0;
       force_restart ();
     }
 
   int size (void) const { return x.capacity (); }
 
   ColumnVector state (void) const { return x; }
 
   double time (void) const { return t; }
@@ -83,31 +85,35 @@ public:
     }
 
   void clear_stop_time (void) { stop_time_set = false; }
 
   virtual void force_restart (void) { restart = true; }
 
   bool integration_ok (void) const { return ! integration_error; }
 
+  int integration_state (void) const { return istate; }
+
   virtual std::string error_message (void) const = 0;
 
 protected:
 
   ColumnVector x;
 
   double t;
 
   double stop_time;
 
   bool stop_time_set;
 
   bool restart;
 
   bool integration_error;
+
+  int istate;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2002-07-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/daspk.cc (Fdaspk): Also return istate and error
+	message.  Only generate error if user is not at least requesting
+	the istate output.
+	* DLD-FUNCTIONS/dasrt.cc (Fdasrt): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (Fdassl): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (Fodessa): Likewise.
+
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/dasrt.cc (Fdasrt): No need to find ng here.
 	(dasrt_user_j): New function.
 	(Fdasrt): Handle Jacobian function.
 
 	* DLD-FUNCTIONS/dassl.cc (dassl_user_jacobian): New function.
 	(Fdassl): Handle Jacobian function.
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -133,17 +133,17 @@ daspk_user_function (const ColumnVector&
 #define DASPK_ABORT2(fmt, arg) \
   do \
     { \
       ::error ("daspk: " fmt, arg); \
       DASPK_ABORT (); \
     } \
   while (0)
 
-DEFUN_DLD (daspk, args, ,
+DEFUN_DLD (daspk, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{xdot}] =} daspk (@var{fcn}, @var{x0}, @var{xdot0}, @var{t}, @var{t_crit})\n\
 Return a matrix of states and their first derivatives with respect to\n\
 @var{t}.  Each row in the result matrices correspond to one of the\n\
 elements in the vector @var{t}.  The first element of @var{t}\n\
 corresponds to the initial state @var{x0} and derivative @var{xdot0}, so\n\
 that the first row of the output @var{x} is @var{x0} and the first row\n\
 of the output @var{xdot} is @var{xdot0}.\n\
@@ -242,20 +242,34 @@ parameters for @code{daspk}.\n\
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
 
       if (! error_state)
 	{
-	  retval.resize (2);
+	  std::string msg = dae.error_message ();
+
+	  retval(3) = msg;
+	  retval(2) = static_cast<double> (dae.integration_state ());
 
-	  retval(0) = output;
-	  retval(1) = deriv_output;
+	  if (dae.integration_ok ())
+	    {
+	      retval(1) = deriv_output;
+	      retval(0) = output;
+	    }
+	  else
+	    {
+	      retval(1) = Matrix ();
+	      retval(0) = Matrix ();
+
+	      if (nargout < 3)
+		error ("daspk: %s", msg.c_str ());
+	    }
 	}
     }
   else
     print_usage ("daspk");
 
   unwind_protect::run_frame ("Fdaspk");
 
   return retval;
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -229,17 +229,17 @@ dasrt_user_j (const ColumnVector& x, con
 #define DASRT_ABORT2(fmt, arg) \
   do \
     { \
       ::error ("dasrt: " ## fmt, arg); \
       DASRT_ABORT; \
     } \
   while (0)
 
-DEFUN_DLD (dasrt, args, ,
+DEFUN_DLD (dasrt, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{xdot}, @var{t}] =} dasrt (@var{fj} [, @var{g}], @var{x_0}, @var{xdot_0}, @var{t_out} [, @var{t_crit}])\n\
 Solve a system of differential/algebraic equations with functional\n\
 stopping criteria.\n\
 \n\
 The function to be integrated must be of the form:\n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t}) = 0\n\
@@ -437,34 +437,43 @@ parameters for @code{dasrt}.\n\
     func.set_jacobian_function (dasrt_user_j);
 
   DASRT_result output;
 
   DASRT dae = DASRT (state, stateprime, tzero, func);
 
   dae.copy (dasrt_opts);
 
-  if (error_state)
-    DASRT_ABORT1 ("something is wrong");
-
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
 
   if (! error_state)
     {
-      retval(2) = output.times ();
-      retval(1) = output.deriv ();
-      retval(0) = output.state ();
-    }
-  else
-    {
-      DASRT_ABORT1("something wicked has occurred!");
-      // print_usage ("dasrt");
+      std::string msg = dae.error_message ();
+
+      retval(4) = msg;
+      retval(3) = static_cast<double> (dae.integration_state ());
+
+      if (dae.integration_ok ())
+	{
+	  retval(2) = output.times ();
+	  retval(1) = output.deriv ();
+	  retval(0) = output.state ();
+	}
+      else
+	{
+	  retval(2) = Matrix ();
+	  retval(1) = Matrix ();
+	  retval(0) = Matrix ();
+
+	  if (nargout < 4)
+	    error ("dasrt: %s", msg.c_str ());
+	}
     }
 
   unwind_protect::run_frame ("Fdasrt");
 
   return retval;
 }
 
 typedef void (DASRT_options::*d_set_opt_mf) (double);
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -347,18 +347,34 @@ parameters for @code{dassl}.\n\
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
 
       if (! error_state)
 	{
-	  retval(1) = deriv_output;
-	  retval(0) = output;
+	  std::string msg = dae.error_message ();
+
+	  retval(3) = msg;
+	  retval(2) = static_cast<double> (dae.integration_state ());
+
+	  if (dae.integration_ok ())
+	    {
+	      retval(1) = deriv_output;
+	      retval(0) = output;
+	    }
+	  else
+	    {
+	      retval(1) = Matrix ();
+	      retval(0) = Matrix ();
+
+	      if (nargout < 3)
+		error ("dassl: %s", msg.c_str ());
+	    }
 	}
     }
   else
     print_usage ("dassl");
 
   unwind_protect::run_frame ("Fdassl");
 
   return retval;
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -284,30 +284,29 @@ parameters for @code{lsode}.\n\
       Matrix output;
       if (crit_times_set)
 	output = ode.integrate (out_times, crit_times);
       else
 	output = ode.integrate (out_times);
 
       if (! error_state)
 	{
-	  retval(2) = ode.error_message ();
+	  std::string msg = ode.error_message ();
+
+	  retval(2) = msg;
 	  retval(1) = static_cast<double> (ode.integration_state ());
 
 	  if (ode.integration_ok ())
 	    retval(0) = output;
 	  else
 	    {
 	      retval(0) = Matrix ();
 
 	      if (nargout < 2)
-		{
-		  std::string msg = ode.error_message ();
-		  error ("lsode: %s", msg.c_str ());
-		}
+		error ("lsode: %s", msg.c_str ());
 	    }
 	}
     }
   else
     print_usage ("lsode");
 
   unwind_protect::run_frame ("Flsode");
 
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -252,17 +252,17 @@ make_list (const Array<Matrix>& m_array)
       ODESSA_ABORT (); \
     } \
   while (0)
 
 // --------------------------------
 // Everthing is so great above here
 // --------------------------------
 
-DEFUN_DLD (odessa, args, ,
+DEFUN_DLD (odessa, args, nargout,
   "odessa (\"f\", x_0, theta, sx_0, t_out, t_crit)\n\
 \n\
 The string \"f\" may be substituted for the vector of strings\n\
 \n\
                [\"f\"; \"j\"; \"b\"] \n\
 \n\
 You can use the function @code{odessa_options} to set optional\n\
 parameters for @code{odessa}.")
@@ -401,57 +401,59 @@ parameters for @code{odessa}.")
 
       if (odessa_b)
 	func.set_bsub_function (odessa_user_b);
 
       double tzero = out_times (0);
 
       ODESSA_result output;
 
-      if (have_parameters)
-	{
-	  ODESSA dae = ODESSA (state, theta, sensitivity_guess, tzero, func);
+      ODESSA ode = have_parameters
+	? ODESSA (state, theta, sensitivity_guess, tzero, func)
+	: ODESSA (state, tzero, func);
 	  
-	  dae.copy (odessa_opts);
+      ode.copy (odessa_opts);
 
-	  if (crit_times_set)
-	    output = dae.integrate (out_times, crit_times);
-	  else
-	    output = dae.integrate (out_times);
-	}
+      if (crit_times_set)
+	output = ode.integrate (out_times, crit_times);
       else
-	{
-	  ODESSA dae = ODESSA (state, tzero, func);
-	  
-	  dae.copy (odessa_opts);
-	  
-	  if (crit_times_set)
-	    output = dae.integrate (out_times, crit_times);
-	  else
-	    output = dae.integrate (out_times);
-	}
+	output = ode.integrate (out_times);
 
       if (! error_state)
 	{
-	  if (have_parameters)
+	  int k = have_parameters ? 3 : 2;
+
+	  std::string msg = ode.error_message ();
+
+	  retval(k--) = msg;
+	  retval(k--) = static_cast<double> (ode.integration_state ());
+
+	  if (ode.integration_ok ())
 	    {
-	      retval(1) = make_list (output.state_sensitivity ());
+	      if (have_parameters)
+		retval(1) = make_list (output.state_sensitivity ());
+
+	      retval(0) = output.state ();
 	    }
-	  
-	  retval(0) = output.state ();
+	  else
+	    {
+	      if (have_parameters)
+		retval(1) = Matrix ();
+
+	      retval(0) = Matrix ();
+
+	      if ((have_parameters && nargout < 3) || nargout < 2)
+		error ("odessa: %s", msg.c_str ());
+	    }
 	}
 
   unwind_protect::run_frame ("Fodessa");
 
   return retval;
 }
-// -----------------------------
-// EVERYTHING SWELL BELOW HERE
-// -----------------------------
-
 
 typedef void (ODESSA_options::*da_set_opt_mf) (const Array<double>&);
 typedef void (ODESSA_options::*d_set_opt_mf) (double);
 typedef void (ODESSA_options::*i_set_opt_mf) (int);
 typedef void (ODESSA_options::*s_set_opt_mf) (const std::string&);
 
 typedef Array<double> (ODESSA_options::*da_get_opt_mf) (void) const;
 typedef double (ODESSA_options::*d_get_opt_mf) (void) const;
