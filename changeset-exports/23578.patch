# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497300095 25200
#      Mon Jun 12 13:41:35 2017 -0700
# Node ID 7b47b7c2d6c7386245217ce275bf2c8fa5761960
# Parent  80c42f4cca13bc4d6c0cdefe1cbffbc9263c7ff2
maint: Deprecate is_java and replace with isjava.

* ov.h (is_java): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isjava): New function.

* variables.cc, ov-base.h, ov-java.cc, ov-java.h:
Replace occurrences of is_java with isjava.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -278,17 +278,17 @@ generate_struct_completions (const std::
 
           try
             {
               octave_value tmp = octave::eval_string (prefix, true, parse_status);
 
               frame.run ();
 
               if (tmp.is_defined ()
-                  && (tmp.is_map () || tmp.is_java () || tmp.is_classdef_object ()))
+                  && (tmp.is_map () || tmp.isjava () || tmp.is_classdef_object ()))
                 names = tmp.map_keys ();
             }
           catch (const octave::execution_exception&)
             {
               octave::interpreter::recover_from_exception ();
             }
         }
     }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -368,17 +368,17 @@ public:
   virtual bool is_range (void) const { return false; }
 
   virtual bool is_map (void) const { return false; }
 
   virtual bool is_object (void) const { return false; }
 
   virtual bool is_classdef_object (void) const { return false; }
 
-  virtual bool is_java (void) const { return false; }
+  virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
 
   virtual octave_value all (int = 0) const;
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1385,17 +1385,17 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
 static octave_value
 box_more (JNIEnv *jni_env, void *jobj_arg, void *jcls_arg)
 {
   jobject jobj = TO_JOBJECT (jobj_arg);
   jclass jcls = TO_JCLASS (jcls_arg);
 
   octave_value retval = box (jni_env, jobj, jcls);
 
-  if (retval.is_java ())
+  if (retval.isjava ())
     {
       retval = octave_value ();
 
       jclass_ref cls (jni_env);
 
       if (retval.is_undefined ())
         {
           cls = jni_env->FindClass ("[D");
@@ -1484,17 +1484,17 @@ box_more (JNIEnv *jni_env, void *jobj_ar
 }
 
 static bool
 unbox (JNIEnv *jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
   bool found = true;
 
-  if (val.is_java ())
+  if (val.isjava ())
     {
       octave_java *ovj = TO_JAVA (val);
       jobj = TO_JOBJECT (ovj->to_java ());
       jobj.detach ();
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.is_string ())
     {
@@ -2909,17 +2909,17 @@ equivalent
   JNIEnv *current_env = thread_jni_env ();
 
   octave_value retval;
 
   octave_value_list tmp;
   for (int i=2; i<args.length (); i++)
     tmp(i-2) = args(i);
 
-  if (args(1).is_java ())
+  if (args(1).isjava ())
     {
       octave_java *jobj = TO_JAVA (args(1));
       retval = jobj->do_javaMethod (current_env, methodname, tmp);
     }
   else if (args(1).is_string ())
     {
       std::string cls = args(1).string_value ();
       retval = octave_java::do_javaMethod (current_env, cls, methodname, tmp);
@@ -2975,17 +2975,17 @@ equivalent
   std::string name = args(1).string_value ("__java_get__: NAME must be a string");
 
   initialize_java ();
 
   JNIEnv *current_env = thread_jni_env ();
 
   octave_value retval;
 
-  if (args(0).is_java ())
+  if (args(0).isjava ())
     {
       octave_java *jobj = TO_JAVA (args(0));
       retval = jobj->do_java_get (current_env, name);
     }
   else if (args(0).is_string ())
     {
       std::string cls = args(0).string_value ();
       retval = octave_java::do_java_get (current_env, cls, name);
@@ -3035,17 +3035,17 @@ equivalent
   std::string name = args(1).xstring_value ("__java_set__: NAME must be a string");
 
   initialize_java ();
 
   JNIEnv *current_env = thread_jni_env ();
 
   octave_value retval;
 
-  if (args(0).is_java ())
+  if (args(0).isjava ())
     {
       octave_java *jobj = TO_JAVA (args(0));
       retval = jobj->do_java_set (current_env, name, args(2));
     }
   else if (args(0).is_string ())
     {
       std::string cls = args(0).string_value ();
       retval = octave_java::do_java_set (current_env, cls, name, args(2));
@@ -3076,17 +3076,17 @@ Undocumented internal function.
     print_usage ();
 
   initialize_java ();
 
   JNIEnv *current_env = thread_jni_env ();
 
   octave_value_list retval;
 
-  if (args(0).is_java ())
+  if (args(0).isjava ())
     {
       octave_java *jobj = TO_JAVA (args(0));
       retval = ovl (box_more (current_env, jobj->to_java (), 0));
     }
   else
     retval = ovl (args(0));
 
   return retval;
@@ -3199,17 +3199,17 @@ DEFUN (isjava, args, ,
 @deftypefn {} {} isjava (@var{x})
 Return true if @var{x} is a Java object.
 @seealso{class, typeinfo, isa, javaObject}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_java ());
+  return ovl (args(0).isjava ());
 }
 
 /*
 ## Check automatic conversion of java primitive arrays into octave types.
 %!testif HAVE_JAVA; usejava ("jvm")
 %! assert (javaObject ("java.lang.String", "hello").getBytes (),
 %!         int8 ([104 101 108 108 111]'));
 
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -57,17 +57,17 @@ public:
   bool is_instance_of (const std::string&) const;
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
-  bool is_java (void) const { return true; }
+  bool isjava (void) const { return true; }
 
   string_vector map_keys (void) const;
 
   dim_vector dims (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -589,18 +589,22 @@ public:
   { return rep->is_map (); }
 
   bool is_object (void) const
   { return rep->is_object (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
+  bool isjava (void) const
+  { return rep->isjava (); }
+
+  OCTAVE_DEPRECATED ("use 'isjava' instead")
   bool is_java (void) const
-  { return rep->is_java (); }
+  { return isjava (); }
 
   bool is_cs_list (void) const
   { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
   { return rep->is_magic_colon (); }
 
   bool is_null_value (void) const
