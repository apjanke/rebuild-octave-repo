# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1425347280 18000
#      Mon Mar 02 20:48:00 2015 -0500
# Node ID 966a1933f3fa0489b7184674859c53ba26ef3316
# Parent  17d21d68888d087c1c9a75831228edb75ec51728
respect x- or y-only pan mode when clicking and dragging (bug #44408)

* Canvas.cc (Canvas::canvasMouseMoveEvent): Get pan mode and pass it
to translate_view function.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -245,81 +245,16 @@ void Canvas::canvasPaintEvent (void)
 
       draw (m_handle);
 
       if (m_mouseMode == ZoomInMode && m_mouseAxes.ok ())
         drawZoomBox (m_mouseAnchor, m_mouseCurrent);
     }
 }
 
-void Canvas::canvasMouseMoveEvent (QMouseEvent* event)
-{
-  gh_manager::auto_lock lock;
-  graphics_object ax = gh_manager::get_object (m_mouseAxes);
-
-  if (m_mouseMode != NoMode && ax.valid_object ())
-    {
-      axes::properties& ap = Utils::properties<axes> (ax);
-
-      switch (m_mouseMode)
-        {
-        case RotateMode:
-          {
-            ap.rotate3d (m_mouseCurrent.x (), event->x (),
-                         m_mouseCurrent.y (), event->y ());
-
-            // Update current mouse position
-            m_mouseCurrent = event->pos ();
-
-            // Force immediate redraw
-            redraw (true);
-          }
-          break;
-
-        case ZoomInMode:
-        case ZoomOutMode:
-          m_mouseCurrent = event->pos ();
-          redraw (true);
-          break;
-
-        case PanMode:
-          {
-            ColumnVector p0 = ap.pixel2coord (m_mouseCurrent.x (),
-                                              m_mouseCurrent.y ());
-            ColumnVector p1 = ap.pixel2coord (event->x (),
-                                              event->y ());
-
-            ap.translate_view ("both", p0(0), p1(0), p0(1), p1(1));
-
-            // Update current mouse position
-            m_mouseCurrent = event->pos ();
-
-            // Force immediate redraw
-            redraw (true);
-          }
-
-        default:
-          break;
-        }
-    }
-  else if (m_mouseMode == NoMode)
-    {
-      graphics_object obj = gh_manager::get_object (m_handle);
-
-      if (obj.valid_object ())
-        {
-          graphics_object figObj (obj.get_ancestor ("figure"));
-
-          updateCurrentPoint (figObj, obj, event);
-          gh_manager::post_callback (figObj.get_handle (),
-                                     "windowbuttonmotionfcn");
-        }
-    }
-}
-
 static bool
 pan_enabled (const graphics_object figObj)
 {
   // Getting pan mode property:
   octave_value ov_pm
     = Utils::properties<figure> (figObj).get___pan_mode__ ();
 
   octave_scalar_map pm = ov_pm.scalar_map_value ();
@@ -382,16 +317,85 @@ zoom_direction (const graphics_object fi
   octave_value ov_zm
     = Utils::properties<figure> (figObj).get___zoom_mode__ ();
 
   octave_scalar_map zm = ov_zm.scalar_map_value ();
 
   return zm.contents ("Direction").string_value ();
 }
 
+void Canvas::canvasMouseMoveEvent (QMouseEvent* event)
+{
+  gh_manager::auto_lock lock;
+  graphics_object ax = gh_manager::get_object (m_mouseAxes);
+
+  if (m_mouseMode != NoMode && ax.valid_object ())
+    {
+      axes::properties& ap = Utils::properties<axes> (ax);
+
+      switch (m_mouseMode)
+        {
+        case RotateMode:
+          {
+            ap.rotate3d (m_mouseCurrent.x (), event->x (),
+                         m_mouseCurrent.y (), event->y ());
+
+            // Update current mouse position
+            m_mouseCurrent = event->pos ();
+
+            // Force immediate redraw
+            redraw (true);
+          }
+          break;
+
+        case ZoomInMode:
+        case ZoomOutMode:
+          m_mouseCurrent = event->pos ();
+          redraw (true);
+          break;
+
+        case PanMode:
+          {
+            graphics_object figObj (ax.get_ancestor ("figure"));
+
+            std::string mode = pan_mode (figObj);
+
+            ColumnVector p0 = ap.pixel2coord (m_mouseCurrent.x (),
+                                              m_mouseCurrent.y ());
+            ColumnVector p1 = ap.pixel2coord (event->x (),
+                                              event->y ());
+
+            ap.translate_view (mode, p0(0), p1(0), p0(1), p1(1));
+
+            // Update current mouse position
+            m_mouseCurrent = event->pos ();
+
+            // Force immediate redraw
+            redraw (true);
+          }
+
+        default:
+          break;
+        }
+    }
+  else if (m_mouseMode == NoMode)
+    {
+      graphics_object obj = gh_manager::get_object (m_handle);
+
+      if (obj.valid_object ())
+        {
+          graphics_object figObj (obj.get_ancestor ("figure"));
+
+          updateCurrentPoint (figObj, obj, event);
+          gh_manager::post_callback (figObj.get_handle (),
+                                     "windowbuttonmotionfcn");
+        }
+    }
+}
+
 void Canvas::canvasMouseDoubleClickEvent (QMouseEvent* event)
 {
   if (event->buttons () != Qt::LeftButton)
     return;
 
   gh_manager::auto_lock lock;
   graphics_object obj = gh_manager::get_object (m_handle);
 
