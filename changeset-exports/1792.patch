# HG changeset patch
# User jwe
# Date 822623742 0
#      Fri Jan 26 02:35:42 1996 +0000
# Node ID e6d79e281f7da598720dee175aa62f9feedec2a4
# Parent  96a5948e729430d445e2613147b884548f8adc04
[project @ 1996-01-26 02:33:22 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -31,18 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <cctype>
 
 #include <string>
 
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 
-#include "fnmatch.h"
-
+#include "oct-glob.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
 #include "mappers.h"
@@ -1979,21 +1978,22 @@ read_mat_binary_data (istream& is, const
   delete [] name;
   return 0;
 }
 
 // Return nonzero if NAME matches one of the given globbing PATTERNS.
 
 static int
 matches_patterns (const string_vector& patterns, int pat_idx,
-		  int num_pat, char *name)
+		  int num_pat, const string& name)
 {
   for (int i = pat_idx; i < num_pat; i++)
     {
-      if (fnmatch (patterns[i].c_str (), name, __FNM_FLAGS) == 0)
+      glob_match pattern (patterns[i]);
+      if (pattern.match (name))
 	return 1;
     }
   return 0;
 }
 
 static int
 read_binary_file_header (istream& is, int& swap,
 			 floating_point_format& flt_fmt, int quiet = 0) 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -76,16 +76,25 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 #include "version.h"
 
 #if !defined (HAVE_ATEXIT) && defined (HAVE_ON_EXIT)
 extern "C" int on_exit ();
 #define atexit on_exit
 #endif
 
+// Don't redefine the variables if glibc already has.
+#ifndef HAVE_PROGRAM_INVOCATION_NAME
+char *program_invocation_name;
+char *program_invocation_short_name;
+#else
+extern char *program_invocation_name;
+extern char *program_invocation_short_name;
+#endif
+
 // This is from readline's paren.c:
 extern int rl_blink_matching_paren;
 
 // Top level context (?)
 jmp_buf toplevel;
 
 // Nonzero means we read ~/.octaverc and ./.octaverc.
 // (--norc; --ignore-init-file; -f)
@@ -161,16 +170,25 @@ intern_argv (int argc, char **argv)
     }
 }
 
 // Initialize some global variables for later use.
 
 static void
 initialize_globals (const string& name)
 {
+  // Kpathsea needs this.
+
+#ifndef HAVE_PROGRAM_INVOCATION_NAME
+  program_invocation_name = strsave (name.c_str ());
+  program_invocation_short_name = strrchr (program_invocation_name, '/');
+  if (! program_invocation_short_name)
+    program_invocation_short_name = program_invocation_name;
+#endif
+
   raw_prog_name = name;
   size_t pos = raw_prog_name.rfind ('/');
   if (pos == NPOS)
     prog_name = raw_prog_name;
   else
     prog_name = raw_prog_name.substr (pos+1);
 
   struct passwd *entry = getpwuid (getuid ());
@@ -195,16 +213,42 @@ initialize_globals (const string& name)
 
   info_file = default_info_file ();
 
   info_prog = default_info_prog ();
 
   editor = default_editor ();
 }
 
+static void
+initialize_pathsearch (void)
+{
+  // This may seem odd, but doing it this way means that we don't have
+  // to modify the kpathsea library...
+
+  char *odb = getenv ("OCTAVE_DB_DIR");
+
+  if (odb)
+    oct_putenv ("TEXMF", odb);
+  else
+    {
+      char *oh = getenv ("OCTAVE_HOME");
+
+      if (oh)
+	{
+	  int len = strlen (oh) + 12;
+	  char *putenv_val = new char [len];
+	  sprintf (putenv_val, "%s/lib/octave", oh);
+	  oct_putenv ("TEXMF", putenv_val);
+	}
+      else  
+	oct_putenv ("TEXMF", OCTAVE_DATADIR "/octave");
+    }
+}
+
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   begin_unwind_frame ("execute_startup_files");
 
   // XXX FIXME XXX -- need to make it possible to set this in startup
@@ -350,17 +394,17 @@ main (int argc, char **argv)
   initialize_pager ();
 
   sysdep_init ();
 
   initialize_error_handlers ();
 
   initialize_globals (argv[0]);
 
-  initialize_pathsearch (argv[0]);
+  initialize_pathsearch ();
 
   int optc;
   while ((optc = getopt_long (argc, argv, short_opts, long_opts, 0)) != EOF)
     {
       switch (optc)
 	{
 	case 'V':
 	  verbose_flag++;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -24,18 +24,17 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include "fnmatch.h"
-
+#include "oct-glob.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "pt-const.h"
 #include "pt-fcn.h"
 #include "pt-fvc.h"
 #include "symtab.h"
 #include "user-prefs.h"
@@ -983,17 +982,18 @@ symbol_record_info_cmp (symbol_record_in
   return (a->name () == b->name ());
 }
 
 static int
 matches_patterns (const string& name, const string_vector& pats, int npats)
 {
   for (int i = 0; i < npats; i++)
     {
-      if (fnmatch (pats[i].c_str (), name.c_str (), __FNM_FLAGS) == 0)
+      glob_match pattern (pats[i]);
+      if (pattern.match (name))
 	return 1;
     }
 
   return 0;
 }
 
 // This function should probably share code with symbol_table::list.
 // XXX FIXME XXX
@@ -1094,20 +1094,20 @@ symbol_table::glob (int& count, const st
       while (ptr)
 	{
 	  assert (count < n);
 
 	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
 	  unsigned my_type = ptr->type ();
 
-	  string tmp = ptr->name ();
+	  glob_match pattern (pat);
 
 	  if ((type & my_type) && (scope & my_scope)
-	      && fnmatch (pat.c_str (), tmp.c_str (), __FNM_FLAGS) == 0)
+	      && pattern.match (ptr->name ()))
 	    {
 	      symbols[count++] = ptr;
 	    }
 
 	  ptr = ptr->next ();
 	}
     }
   symbols[count] = 0;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -35,26 +35,25 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include <readline/readline.h>
 
-#include "fnmatch.h"
-
+#include "file-ops.h"
+#include "oct-glob.h"
 #include "str-vec.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
-#include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
@@ -1920,44 +1919,44 @@ With -x, exclude the named variables")
 	}
 
       for (int k = idx + 1; k < argc; k++)
 	{
 	  string patstr = argv[k];
 
 	  if (! patstr.empty ())
 	    {
-	      const char *pat = patstr.c_str ();
+	      glob_match pattern (patstr);
 
 	      int i;
 	      for (i = 0; i < lcount; i++)
 		{
 		  string nm = lvars[i];
-		  int match = (fnmatch (pat, nm.c_str (), __FNM_FLAGS) == 0);
+		  int match = pattern.match (nm);
 		  if ((exclusive && ! match) || (! exclusive && match))
 		    curr_sym_tab->clear (nm);
 		}
 
 	      int count;
 	      for (i = 0; i < gcount; i++)
 		{
 		  string nm = gvars[i];
-		  int match = (fnmatch (pat, nm.c_str (), __FNM_FLAGS) == 0);
+		  int match = pattern.match (nm);
 		  if ((exclusive && ! match) || (! exclusive && match))
 		    {
 		      count = curr_sym_tab->clear (nm);
 		      if (count > 0)
 			global_sym_tab->clear (nm, clear_user_functions);
 		    }
 		}
 
 	      for (i = 0; i < fcount; i++)
 		{
 		  string nm = fcns[i];
-		  int match = (fnmatch (pat, nm.c_str (), __FNM_FLAGS) == 0);
+		  int match = pattern.match (nm);
 		  if ((exclusive && ! match) || (! exclusive && match))
 		    {
 		      count = curr_sym_tab->clear (nm);
 		      global_sym_tab->clear (nm, clear_user_functions);
 		    }
 		}
 	    }
 	}
