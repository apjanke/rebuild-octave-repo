# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492705655 14400
#      Thu Apr 20 12:27:35 2017 -0400
# Node ID 50fc8edb007b292a134a78de92d1bf093e9e7447
# Parent  206a7eb1561b90aa019df631670dadac69f012c7
protect tree_unop and tree_array_list constructors

* pt-array-list.h, pt-unop.h: Make constructors private so these
classes may only be used as base classes.

diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -37,23 +37,27 @@ namespace octave
   class tree_array_list : public tree_expression,
                           public octave::base_list<tree_argument_list *>
   {
   public:
 
     typedef octave::base_list<tree_argument_list *>::iterator iterator;
     typedef octave::base_list<tree_argument_list *>::const_iterator const_iterator;
 
+  protected:
+
     tree_array_list (tree_argument_list *row = 0, int l = -1, int c = -1)
       : tree_expression (l, c), octave::base_list<tree_argument_list *> ()
     {
       if (row)
         append (row);
     }
 
+  public:
+
     // No copying!
 
     tree_array_list (const tree_array_list&) = delete;
 
     tree_array_list& operator = (const tree_array_list&) = delete;
 
     ~tree_array_list (void);
 
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -37,28 +37,30 @@ class octave_lvalue;
 namespace octave
 {
   class tree_walker;
 
   // Unary expressions.
 
   class tree_unary_expression : public tree_expression
   {
-  public:
+  protected:
 
     tree_unary_expression (int l = -1, int c = -1,
                            octave_value::unary_op t
                            = octave_value::unknown_unary_op)
       : tree_expression (l, c), op (0), etype (t)  { }
 
     tree_unary_expression (tree_expression *e, int l = -1, int c = -1,
                            octave_value::unary_op t
                            = octave_value::unknown_unary_op)
       : tree_expression (l, c), op (e), etype (t) { }
 
+  public:
+
     // No copying!
 
     tree_unary_expression (const tree_unary_expression&) = delete;
 
     tree_unary_expression& operator = (const tree_unary_expression&) = delete;
 
     ~tree_unary_expression (void) { delete op; }
 
