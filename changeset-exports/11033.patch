# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1285705461 25200
#      Tue Sep 28 13:24:21 2010 -0700
# Node ID d9c8916bb9dd52130bb5f830c268e38adbc9deb1
# Parent  c9b0a75b02e834b245ad69d0d6c017a709448f89
Untabify a few remaining .m scripts.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-28  Rik <octave@nomad.inbox5.com>
+
+	* doc/interpreter/geometryimages.m, doc/interpreter/interpimages.m,
+	doc/interpreter/plotimages.m, doc/interpreter/sparseimages.m: Untabify
+	scripts.
+
 2010-09-27  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/mk_doc_cache.m: Use single quotes for regular expression
 	patterns where possible.
 
 2010-09-25  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/mk_doc_cache.m: Remove requirement for PCRE to build
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -25,18 +25,18 @@ function geometryimages (nm, typ)
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = cstrcat ("-d", typ);
   endif
 
   if (isempty (findstr (octave_config_info ("DEFS"), "HAVE_QHULL"))
       && (strcmp (nm, "voronoi") || strcmp (nm, "griddata")
-	  || strcmp (nm, "convhull") || strcmp (nm, "delaunay")
-	  || strcmp (nm, "triplot")))
+          || strcmp (nm, "convhull") || strcmp (nm, "delaunay")
+          || strcmp (nm, "triplot")))
     sombreroimage (nm, typ);
   elseif (strcmp (typ, "txt"))
     image_as_txt (nm);
   elseif (strcmp (nm, "voronoi"))
     rand("state",9);
     x = rand(10,1);
     y = rand(10,1);
     tri = delaunay (x, y);
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -32,17 +32,17 @@ function interpimages (nm, typ)
     image_as_txt (nm);
   elseif (strcmp (nm, "interpft"))
     t = 0 : 0.3 : pi; dt = t(2)-t(1);
     n = length (t); k = 100;
     ti = t(1) + [0 : k-1]*dt*n/k;
     y = sin (4*t + 0.3) .* cos (3*t - 0.1);
     yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
     plot (ti, yp, 'g', ti, interp1(t, y, ti, 'spline'), 'b', ...
-	  ti, interpft (y, k), 'c', t, y, 'r+');
+          ti, interpft (y, k), 'c', t, y, 'r+');
     legend ('sin(4t+0.3)cos(3t-0.1)','spline','interpft','data');
     print (cstrcat (nm, ".", typ), d_typ)
   elseif (strcmp (nm, "interpn"))
     x = y = z = -1:1;
     f = @(x,y,z) x.^2 - y - z.^2;
     [xx, yy, zz] = meshgrid (x, y, z);
     v = f (xx,yy,zz);
     xi = yi = zi = -1:0.1:1;
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -30,27 +30,27 @@ function plotimages (nm, typ)
 
   if (strcmp(typ , "txt"))
     image_as_txt(nm);
   elseif (strcmp (nm, "plot"))
     x = -10:0.1:10;
     plot (x, sin (x));
     print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "hist"))
-	 rand ("state", 2);
+    rand ("state", 2);
     hist (randn (10000, 1), 30);
     print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "errorbar"))
-	 rand ("state", 2);
+    rand ("state", 2);
     x = 0:0.1:10;
     y = sin (x);
     yl = 0.1 .* rand (size (x));
     yu = 0.1 .* rand (size (x));
     errorbar (x, sin (x), yl, yu);
-	 axis ([0, 10, -1.1, 1.1]);
+    axis ([0, 10, -1.1, 1.1]);
     print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "polar"))
     polar (0:0.1:10*pi, 0:0.1:10*pi);
     print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "mesh"))
     tx = ty = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (tx, ty);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -24,21 +24,21 @@ function sparseimages (nm, typ)
 
   if (! isempty (findstr (octave_config_info ("DEFS"), "HAVE_COLAMD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_CHOLMOD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_UMFPACK")))
     if (strcmp(typ,"txt"))
       txtimages (nm, 15, typ);
     else
       if (strcmp (nm, "gplot"))
-	gplotimages ("gplot", typ);
+        gplotimages ("gplot", typ);
       elseif (strcmp (nm, "grid"))
-	femimages ("grid", typ);
+        femimages ("grid", typ);
       else
-	otherimages (nm, 200, typ);
+        otherimages (nm, 200, typ);
       endif
     endif
   else ## There is no sparse matrix implementation available because
        ## of missing libraries, plot sombreros instead
     sombreroimage (nm, typ);
   endif
 endfunction
 
@@ -60,17 +60,17 @@ function gplotimages (nm, typ)
   hide_output ();
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = cstrcat ("-d", typ);
   endif
 
   A = sparse ([2,6,1,3,2,4,3,5,4,6,1,5],
-	      [1,1,2,2,3,3,4,4,5,5,6,6], 1, 6, 6);
+              [1,1,2,2,3,3,4,4,5,5,6,6], 1, 6, 6);
   xy = [0,4,8,6,4,2;5,0,5,7,5,7]';
   gplot (A, xy)
   print (cstrcat (nm, ".", typ), d_typ)
   hide_output ();
 endfunction
 
 function txtimages(nm,n,typ)
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
@@ -81,23 +81,23 @@ function txtimages(nm,n,typ)
     fputs (fid, "+---------------------------------+\n");
     fputs (fid, "| Image unavailable in text mode. |\n");
     fputs (fid, "+---------------------------------+\n");
     fclose (fid);
   elseif (strcmp (nm, "spmatrix"))
     printsparse(a,cstrcat("spmatrix.",typ));
   else
     if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
-	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
+        !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
       if (strcmp (nm, "spchol"))
-	r1 = chol(a);
-	printsparse(r1,cstrcat("spchol.",typ));
+        r1 = chol(a);
+        printsparse(r1,cstrcat("spchol.",typ));
       elseif (strcmp (nm, "spcholperm"))
-	[r2,p2,q2]=chol(a);
-	printsparse(r2,cstrcat("spcholperm.",typ));
+        [r2,p2,q2]=chol(a);
+        printsparse(r2,cstrcat("spcholperm.",typ));
       endif
       ## printf("Text NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function otherimages(nm,n,typ)
   hide_output ();
@@ -111,29 +111,29 @@ function otherimages(nm,n,typ)
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "spmatrix"))
     spy(a);
     axis("ij")
     print(cstrcat("spmatrix.",typ), d_typ)
     hide_output ();
   else
     if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
-	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
+        !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
       if (strcmp (nm, "spchol"))
-	r1 = chol(a);
-	spy(r1);
-	axis("ij")
-	print(cstrcat("spchol.",typ), d_typ)
-	hide_output ();
+        r1 = chol(a);
+        spy(r1);
+        axis("ij")
+        print(cstrcat("spchol.",typ), d_typ)
+        hide_output ();
       elseif (strcmp (nm, "spcholperm"))
-	[r2,p2,q2]=chol(a);
-	spy(r2);
-	axis("ij")
-	print(cstrcat("spcholperm.",typ), d_typ)
-	hide_output ();
+        [r2,p2,q2]=chol(a);
+        spy(r2);
+        axis("ij")
+        print(cstrcat("spcholperm.",typ), d_typ)
+        hide_output ();
       endif
       ## printf("Image NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function printsparse(a,nm)
   fid = fopen (nm,"wt");
@@ -141,19 +141,19 @@ function printsparse(a,nm)
   for i = 1:size(a,1)
     if (rem(i,5) == 0)
       fprintf (fid,"         %2d - ", i);
     else
       fprintf (fid,"            | ");
     endif
     for j = 1:size(a,2)
       if (a(i,j) == 0)
-	fprintf(fid,"  ")
+        fprintf(fid,"  ")
       else
-	fprintf(fid," *")
+        fprintf(fid," *")
       endif
     endfor
     fprintf(fid,"\n")
   endfor
   fprintf(fid,"            |-");
   for j=1:size(a,2)
     if (rem(j,5)==0)
       fprintf(fid,"-|");
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-28  Rik <octave@nomad.inbox5.com>
+
+	* scripts/linear-algebra/logm.m, scripts/plot/legend.m, 
+	scripts/signal/periodogram.m: Untabify scripts.
+
 2010-09-27  Rik <octave@nomad.inbox5.com>
 
 	* scripts/io/dlmwrite.m: Replace non-POSIX '\d' regex pattern.
 
 	* scripts/miscellaneous/edit.m, scripts/path/savepath.m, 
 	scripts/plot/__gnuplot_get_var__.m,
 	scripts/plot/private/__gnuplot_has_terminal__.m,
 	scripts/plot/refreshdata.m, scripts/plot/whitebg.m,
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -31,17 +31,17 @@
 ##
 ## The optional argument @var{opt_iters} is the maximum number of square roots
 ## to compute and defaults to 100.  The optional output @var{iters} is the
 ## number of square roots actually computed.
 ##
 ## @end deftypefn
 
 ## Reference: N. J. Higham, Functions of Matrices: Theory and Computation 
-## 	 (SIAM, 2008.)
+##            (SIAM, 2008.)
 ##
 
 function [s, iters] = logm (a, opt_iters)
  
   if (nargin == 0)
     print_usage ();
   elseif (nargin < 2)
     opt_iters = 100;
@@ -96,20 +96,20 @@ function [s, iters] = logm (a, opt_iters
 
   if (nargout == 2)
     iters = k;
   endif
 
 endfunction
 
 ################## ANCILLARY FUNCTIONS ################################
-######	Taken from the mfttoolbox (GPL 3) by D. Higham.
+######  Taken from the mfttoolbox (GPL 3) by D. Higham.
 ######  Reference: 
 ######      D. Higham, Functions of Matrices: Theory and Computation 
-######		(SIAM, 2008.).
+######      (SIAM, 2008.).
 #######################################################################
 
 ##LOGM_PADE_PF   Evaluate Pade approximant to matrix log by partial fractions.
 ##   Y = LOGM_PADE_PF(a,M) evaluates the [M/M] Pade approximation to
 ##   LOG(EYE(SIZE(a))+a) using a partial fraction expansion.
 
 function s = logm_pade_pf(a,m)
   [nodes,wts] = gauss_legendre(m);
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -631,19 +631,19 @@ function [hlegend2, hobjects2, hplot2, t
                          "color", color, "linestyle", style);
               hobjects = [hobjects, l1];
             endif
             marker = get (hplots(k), "marker");
             if (! strcmp (marker, "none"))
               l1 = line ("xdata", (xoffset + 0.5 * linelength  + xk * xstep) / lpos(3),
                          "ydata", (lpos(4) - yoffset - yk * ystep) / lpos(4), 
                          "color", color, "marker", marker,
-	                 "markeredgecolor", get (hplots (k), "markeredgecolor"),
-	                 "markerfacecolor", get (hplots (k), "markerfacecolor"),
-	                 "markersize", get (hplots (k), "markersize"));
+                         "markeredgecolor", get (hplots (k), "markeredgecolor"),
+                         "markerfacecolor", get (hplots (k), "markerfacecolor"),
+                         "markersize", get (hplots (k), "markersize"));
               hobjects = [hobjects, l1];
             endif
           case "patch"
           case "surface"
           endswitch
           set (texthandle (k), "position", [(txoffset + xk * xstep) / lpos(3), ...
                                             (lpos(4) - yoffset - yk * ystep) / lpos(4)]);
           if (strcmp (orientation, "vertical"))
diff --git a/scripts/signal/periodogram.m b/scripts/signal/periodogram.m
--- a/scripts/signal/periodogram.m
+++ b/scripts/signal/periodogram.m
@@ -131,17 +131,17 @@ function [pxx, f] = periodogram (x, vara
   endif
 
   ## compute periodogram
 
   if (r>nfft)
     Pxx = 0;
     rr = rem (length (x), nfft);
     if (rr)
-    	x = [x(:);zeros (nfft-rr, 1)];
+      x = [x(:);zeros (nfft-rr, 1)];
     end
     x = sum (reshape (x, nfft, []), 2);
   endif
 
   if (isempty (window))
     n = r;
   else
     n = sumsq (window);
diff --git a/test/@Gork/set.m b/test/@Gork/set.m
--- a/test/@Gork/set.m
+++ b/test/@Gork/set.m
@@ -2,21 +2,21 @@ function [ s ] = set( s, varargin )
 
   propArgs = varargin;
   while (length(propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'cork'
-	if(isa(propValue,'Cork'))
+        if(isa(propValue,'Cork'))
           s.Cork = propValue;
-	else
-	  s.Cork = set(s.Cork, 'click',propValue);
-	end
+        else
+          s.Cork = set(s.Cork, 'click',propValue);
+        end
       case 'gark'
         s.gark = propValue;
       otherwise
         % Note that get/set for multiple parents is hard.  We only do one
         % branch of the parent tree just to test this stuff out.
         s.Dork = set(s.Dork, propName, propValue);
     end
   end
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-28  Rik <octave@nomad.inbox5.com>
+
+	* test/@Gork/set.m, test/fntests.m, test/test_func.m, test/test_io.m:
+	Untabify scripts.
+
 2010-09-27  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m: Use single quotes for regex when possible.
 
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m (has_tests, has_functions): Recode to remove requirement 
 	for PCRE.
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -102,26 +102,26 @@ endfunction
 function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
   lst = dir (d);
   dp = dn = dxf = dsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (length (nm) > 5 && strcmp (nm(1:5), "test_")
-	&& strcmp (nm((end-1):end), ".m"))
+        && strcmp (nm((end-1):end), ".m"))
       p = n = xf = sk = 0;
       ffnm = fullfile (d, nm);
       if (has_tests (ffnm))
-	print_test_file_name (nm);
-	[p, n, xf, sk] = test (nm(1:(end-2)), "quiet", fid);
-	print_pass_fail (n, p);
-	files_with_tests(end+1) = ffnm;
+        print_test_file_name (nm);
+        [p, n, xf, sk] = test (nm(1:(end-2)), "quiet", fid);
+        print_pass_fail (n, p);
+        files_with_tests(end+1) = ffnm;
       else
-	files_with_no_tests(end+1) = ffnm;
+        files_with_no_tests(end+1) = ffnm;
       endif
       dp += p;
       dn += n;
       dxf += xf;
       dsk += sk;
     endif
   endfor
 endfunction
@@ -131,17 +131,17 @@ function [dp, dn, dxf, dsk] = run_test_s
   global files_with_no_tests;
   global topsrcdir;
   global topbuilddir;
   lst = dir (d);
   dp = dn = dxf = dsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir && ! strcmp (nm, ".") && ! strcmp (nm, "..")
-	&& ! strcmp (nm, "CVS") && ! strcmp (nm, "deprecated") )
+        && ! strcmp (nm, "CVS") && ! strcmp (nm, "deprecated") )
       [p, n, xf, sk] = run_test_script (fid, [d, "/", nm]);
       dp += p;
       dn += n;
       dxf += xf;
       dsk += sk;
     endif
   endfor
   for i = 1:length (lst)
@@ -151,30 +151,30 @@ function [dp, dn, dxf, dsk] = run_test_s
       continue
     endif
     f = fullfile (d, nm);
     if ((length (nm) > 2 && strcmp (nm((end-1):end), ".m")) || 
         (length (nm) > 3 && strcmp (nm((end-2):end), ".cc")))
       p = n = xf = 0;
       ## Only run if it contains %!test, %!assert %!error or %!warning
       if (has_tests (f))
-	tmp = strrep (f, [topsrcdir, "/"], "");
-	tmp = strrep (tmp, [topbuilddir, "/"], "../");
-	print_test_file_name (tmp);
-	[p, n, xf, sk] = test (f, "quiet", fid);
-	print_pass_fail (n, p);
-	dp += p;
-	dn += n;
-	dxf += xf;
-	dsk += sk;
-	files_with_tests(end+1) = f;
+        tmp = strrep (f, [topsrcdir, "/"], "");
+        tmp = strrep (tmp, [topbuilddir, "/"], "../");
+        print_test_file_name (tmp);
+        [p, n, xf, sk] = test (f, "quiet", fid);
+        print_pass_fail (n, p);
+        dp += p;
+        dn += n;
+        dxf += xf;
+        dsk += sk;
+        files_with_tests(end+1) = f;
       elseif (has_functions (f))
-	## To reduce the list length, only mark .cc files that contain
-	## DEFUN definitions.
-	files_with_no_tests(end+1) = f;
+        ## To reduce the list length, only mark .cc files that contain
+        ## DEFUN definitions.
+        files_with_no_tests(end+1) = f;
       endif
     endif
   endfor 
   ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
 
 function printf_assert (varargin)
   global _assert_printf;
@@ -244,17 +244,17 @@ try
     if (dxf > 1)
       t1 = "were";
       t2 = "failures";
     else
       t1 = "was";
       t2 = "failure";
     endif
     printf ("\nThere %s %d expected %s (see fntests.log for details).\n",
-	    t1, dxf, t2);
+            t1, dxf, t2);
     puts ("\nExpected failures are known bugs.  Please help improve\n");
     puts ("Octave by contributing fixes for them.\n");
   endif
   if (dsk > 0)
     printf ("\nThere were %d skipped tests (see fntests.log for details).\n", dsk);
     puts ("Skipped tests are features that are disabled in this version\n");
     puts ("of Octave because the needed libraries were not present when Octave\n");
     puts ("was built.\n");
@@ -262,17 +262,17 @@ try
 
   report_files_with_no_tests (files_with_tests, files_with_no_tests, ".m");
   report_files_with_no_tests (files_with_tests, files_with_no_tests, ".cc");
 
   puts ("\nPlease help improve Octave by contributing tests for\n");
   puts ("these files (see the list in the file fntests.log).\n\n");
 
   fprintf (fid, "\nFiles with no tests:\n\n%s",
-	  list_in_columns (files_with_no_tests, 80));
+          list_in_columns (files_with_no_tests, 80));
   fclose (fid);
 
   page_screen_output (pso);
   warning (warn_state.state, "quiet");
 catch
   page_screen_output (pso);
   warning (warn_state.state, "quiet");
   disp (lasterr ());
diff --git a/test/test_func.m b/test/test_func.m
--- a/test/test_func.m
+++ b/test/test_func.m
@@ -70,21 +70,21 @@
 %!      m = num2cell (m);
 %!    elseif (strcmp (typ{i}, 'struct'))
 %!      m = struct ('fld', num2cell (m));
 %!    endif
 %!
 %!    y = feval (fn, m, varargin{:});
 %!    y2 = feval (fn, reshape (mn, size (m)), varargin{:});
 %!    if (!strcmp (class (y), class (m)) ||
-%!	   issparse (y) != issparse (m) || !size_equal (y, y2))
+%!         issparse (y) != issparse (m) || !size_equal (y, y2))
 %!      error ('failed for type %s\n', typ{i});
 %!    endif
 %!    if (!(strcmp (typ{i}, 'cell') || strcmp (typ{i}, 'struct')) &&
-%!	  any (vec (cast (real (y), 'double')) !=
+%!        any (vec (cast (real (y), 'double')) !=
 %!             vec (feval (fn , cast (real (m), 'double'), varargin{:}))))
 %!      error ('failed for type %s\n', typ{i});
 %!    endif
 %!  endfor
 %! endfunction
 
 %!shared m0, m1, m2, m3
 %! m0 = [1:5];
diff --git a/test/test_io.m b/test/test_io.m
--- a/test/test_io.m
+++ b/test/test_io.m
@@ -100,83 +100,83 @@
 %!      load (file);
 %!
 %!      assert (a1, b1, tol);
 %!      assert (a2, b2, tol);
 %!      assert (a3, b3, tol);
 %!      assert (a4, b4, tol);
 %!
 %!      if (! isequal (a5, b5))
-%!	  error ("failed: %s boolean", file);
+%!        error ("failed: %s boolean", file);
 %!      endif
 %!
 %!      if (! strcmp (file, "mat5") && ! strcmp (file, "mat7"))
 %!        if (! isequal (a6, b6))
-%!	    error ("failed: %s boolean matrix", file);
+%!          error ("failed: %s boolean matrix", file);
 %!        endif
 %!      endif
 %!
 %!      assert ([a7], [b7], tol);
 %!
 %!      if (! isequal (a8, b8))
-%!	  error ("failed: %s struct", file);
+%!        error ("failed: %s struct", file);
 %!      endif
 %!      
 %!      if (! isequal (a9, b9))
-%!	  error ("failed: %s cell", file);
+%!        error ("failed: %s cell", file);
 %!      endif
 %!      
 %!      if (! isequal (a10, b10))
-%!	  error ("failed: %s string", file);
+%!        error ("failed: %s string", file);
 %!      endif
 %!
 %!      if (! isequal (a11, b11))
-%!	  error ("failed: %s int8", file);
+%!        error ("failed: %s int8", file);
 %!      endif
 %!
 %!      if (! isequal (a12, b12))
-%!	  error ("failed: %s int16", file);
+%!        error ("failed: %s int16", file);
 %!      endif
 %!
 %!      if (! isequal (a13, b13))
-%!	  error ("failed: %s int32", file);
+%!        error ("failed: %s int32", file);
 %!      endif
 %!
 %!      if (! isequal (a14, b14))
-%!	  error ("failed: %s int64", file);
+%!        error ("failed: %s int64", file);
 %!      endif
 %!
 %!      if (! isequal (a15, b15))
-%!	  error ("failed: %s uint8", file);
+%!        error ("failed: %s uint8", file);
 %!      endif
 %!
 %!      if (! isequal (a16, b16))
-%!	  error ("failed: %s uint16", file);
+%!        error ("failed: %s uint16", file);
 %!      endif
 %!
 %!      if (! isequal (a17, b17))
-%!	  error ("failed: %s uint32", file);
+%!        error ("failed: %s uint32", file);
 %!      endif
 %!
 %!      if (! isequal (a18, b18))
-%!	  error ("failed: %s uint64", file);
+%!        error ("failed: %s uint64", file);
 %!      endif
 %!
 %!      assert (a19, b19, tol);
 %!      assert (a20, b20, tol);
 %!
 %!      ## Test for global flags
 %!      if (! isglobal ("a1") || isglobal ("a2") || isglobal ("a3")
 %!          || isglobal ("a4") || isglobal ("a5") || isglobal ("a6")
 %!          || isglobal ("a7") || isglobal ("a8") || isglobal ("a9")
 %!          || isglobal ("a10") || isglobal ("a11") || isglobal ("a12")
 %!          || isglobal ("a13") || isglobal ("a14") || isglobal ("a15")
 %!          || isglobal ("a16") || isglobal ("a17") || isglobal ("a18")
 %!          || isglobal ("a19") || isglobal ("a20"))
-%!	  error ("failed: %s global test", file); 
+%!        error ("failed: %s global test", file); 
 %!      endif
 %!    endfor
 %!  endif
 %!
 %!  ret = 1;
 %!
 %!test
 %! 
@@ -196,30 +196,30 @@
 %! STR.string_fld = "Octave";
 %! STR.struct_fld.x = 0;
 %! STR.struct_fld.y = 1;
 %! 
 %! save struct.dat -struct STR;
 %! STR = load ("struct.dat");
 %!
 %! assert(STR.scalar_fld == 1 && ...
-%! 	STR.matrix_fld == [1.1,2;3,4] && ...
-%! 	STR.string_fld == "Octave" && ...
-%! 	STR.struct_fld.x == 0 && ...
-%! 	STR.struct_fld.y == 1 );
+%!        STR.matrix_fld == [1.1,2;3,4] && ...
+%!        STR.string_fld == "Octave" && ...
+%!        STR.struct_fld.x == 0 && ...
+%!        STR.struct_fld.y == 1 );
 %!
 %!
 %! save -binary struct.dat -struct STR matrix_fld str*_fld;
 %! STR = load ("struct.dat");
 %!
 %! assert(!isfield(STR,"scalar_fld") && ...
-%! 	STR.matrix_fld == [1.1,2;3,4] && ...
-%! 	STR.string_fld == "Octave" && ...
-%! 	STR.struct_fld.x == 0 && ...
-%! 	STR.struct_fld.y == 1);
+%!        STR.matrix_fld == [1.1,2;3,4] && ...
+%!        STR.string_fld == "Octave" && ...
+%!        STR.struct_fld.x == 0 && ...
+%!        STR.struct_fld.y == 1);
 %!
 %! delete struct.dat;
 %!
 %!test
 %! matrix1 = rand(100, 2);
 %! save -ascii matrix.ascii matrix1
 %! matrix2 = load ("matrix.ascii");
 %! assert (matrix1, matrix2, 1e-9)
