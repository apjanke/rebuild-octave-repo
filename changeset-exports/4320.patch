# HG changeset patch
# User jwe
# Date 1045170571 0
#      Thu Feb 13 21:09:31 2003 +0000
# Node ID cc3a9c2608bd20076541ac2be5ded3f45de0254d
# Parent  05973ead74eb801b5357c2aaef10bf5d7bb3eb45
[project @ 2003-02-13 21:09:31 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-02-13  Paul Kienzle <pkienzle@users.sf.net>
+
+	* examples/make_int.cc: Support for ISO standard compilers.
+
 2003-01-22  Richard Stallman <rms@gnu.org>
 
 	* emacs/octave-mod.el (octave-mode-map): Avoid binding keys that
 	are reserved for users.
 
 2003-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in: Fix typo in previous change.
diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #include <octave/config.h>
 
 #include <cstdlib>
 
 #include <string>
 
-class ostream;
+#include <ostream>
 
 #include <octave/lo-mappers.h>
 #include <octave/lo-utils.h>
 #include <octave/mx-base.h>
 #include <octave/str-vec.h>
 
 #include <octave/defun-dld.h>
 #include <octave/error.h>
@@ -108,57 +108,58 @@ public:
 
   Matrix matrix_value (bool = false) const { return Matrix (1, 1, scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
-  octave_value not (void) const { return octave_value ((double) ! scalar); }
+  octave_value gnot (void) const { return octave_value ((double) ! scalar); }
 
   octave_value uminus (void) const { return new octave_integer (- scalar); }
 
   octave_value transpose (void) const { return new octave_integer (scalar); }
 
   octave_value hermitian (void) const { return new octave_integer (scalar); }
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
-  void print (ostream& os, bool pr_as_read_syntax = false) const;
+  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   int scalar;
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 void
-octave_integer::print (ostream& os, bool pr_as_read_syntax) const
+octave_integer::print (std::ostream& os, bool pr_as_read_syntax) const
 {
-  octave_print_internal (os, scalar, pr_as_read_syntax);
+  os << scalar;
+  // octave_print_internal (os, scalar, pr_as_read_syntax);
 }
 
 #ifdef DEFUNOP_OP
 #undef DEFUNOP_OP
 #endif
 
 #define DEFUNOP_OP(name, t, op) \
   UNOPDECL (name, a) \
   { \
     CAST_UNOP_ARG (const octave_ ## t&); \
     return octave_value (new octave_integer (op v.t ## _value ())); \
   }
 
-DEFUNOP_OP (not, integer, !)
+DEFUNOP_OP (gnot, integer, !)
 DEFUNOP_OP (uminus, integer, -)
 DEFUNOP_OP (transpose, integer, /* no-op */)
 DEFUNOP_OP (hermitian, integer, /* no-op */)
 
 DEFNCUNOP_METHOD (incr, integer, increment)
 DEFNCUNOP_METHOD (decr, integer, decrement)
 
 #ifdef DEFBINOP_OP
@@ -257,21 +258,22 @@ DEFUN_DLD (make_int, args, ,
 \n\
 Creates an integer variable from VAL.")
 {
   static bool type_loaded = false;
 
   if (! type_loaded)
     {
       octave_integer::register_type ();
+      mlock ("make_int");
 
-      cerr << "installing integer type at type-id = "
+      octave_stdout << "installing integer type at type-id = "
 	   << octave_integer::static_type_id () << "\n";
 
-      INSTALL_UNOP (op_not, octave_integer, not);
+      INSTALL_UNOP (op_not, octave_integer, gnot);
       INSTALL_UNOP (op_uminus, octave_integer, uminus);
       INSTALL_UNOP (op_transpose, octave_integer, transpose);
       INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
 
       INSTALL_NCUNOP (op_incr, octave_integer, incr);
       INSTALL_NCUNOP (op_decr, octave_integer, decr);
 
       INSTALL_BINOP (op_add, octave_integer, octave_integer, add);
