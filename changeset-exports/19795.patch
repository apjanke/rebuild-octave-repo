# HG changeset patch
# User Rik <rik@octave.org>
# Date 1424471196 28800
#      Fri Feb 20 14:26:36 2015 -0800
# Node ID ca7599ae464dd6683837aa30c91dc9d3b6732db3
# Parent  f6836e4b1cb5db4969b6067c9bea75a39b5cd4d7
doc: Grammarcheck documentation ahead of 4.0 release.

* plot.txi, data.cc, graphics.cc, ordschur.cc, __ilu__.cc, __osmesa_print__.cc,
audiodevinfo.cc, soundsc.m, interp2.m, interp3.m, interpn.m, annotation.m,
zoom.m: Grammarcheck documentation ahead of 4.0 release.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -463,17 +463,19 @@ text (pi, 0.7, "arbitrary text");
 legend ("sin (x)");
 @end group
 @end example
 
 The functions @code{grid} and @code{box} may also be used to add grid
 and border lines to the plot.  By default, the grid is off and the
 border lines are on.
 
-Finally, arrows, text and rectangular or elliptic boxes can be added to highlight parts of a plot using the @code{annotation} function. Those objects are drawn in an invisible axes, on top of every other axes.
+Finally, arrows, text and rectangular or elliptic boxes can be added to
+highlight parts of a plot using the @code{annotation} function.  Those objects
+are drawn in an invisible axes, on top of every other axes.
 
 @DOCSTRING(title)
 
 @DOCSTRING(legend)
 
 @DOCSTRING(text)
 
 See @ref{Text Properties} for the properties that you can set.
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3748,17 +3748,17 @@ consequence a 1x1 array, or scalar, is a
 %% Test input validation
 %!error isvector ()
 %!error isvector ([1, 2], 2)
 */
 
 DEFUN (isrow, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} isrow (@var{x})\n\
-Return true if @var{x} is a row vector 1xN with nonnegative N.\n\
+Return true if @var{x} is a row vector 1xN with non-negative N.\n\
 @seealso{iscolumn, isscalar, isvector, ismatrix}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       dim_vector sz = args(0).dims ();
@@ -3798,17 +3798,17 @@ Return true if @var{x} is a row vector 1
 %% Test input validation
 %!error isrow ()
 %!error isrow ([1, 2], 2)
 */
 
 DEFUN (iscolumn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} iscolumn (@var{x})\n\
-Return true if @var{x} is a column vector Nx1 with nonnegative N.\n\
+Return true if @var{x} is a column vector Nx1 with non-negative N.\n\
 @seealso{isrow, isscalar, isvector, ismatrix}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       dim_vector sz = args(0).dims ();
@@ -3847,17 +3847,17 @@ Return true if @var{x} is a column vecto
 %% Test input validation
 %!error iscolumn ()
 %!error iscolumn ([1, 2], 2)
 */
 
 DEFUN (ismatrix, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ismatrix (@var{a})\n\
-Return true if @var{a} is has exactly two nonnegative dimensions.\n\
+Return true if @var{a} is a 2-D array.\n\
 @seealso{isscalar, isvector, iscell, isstruct, issparse, isa}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       dim_vector sz = args(0).dims ();
@@ -6260,18 +6260,19 @@ At least one argument is required.\n\
 {
   return binary_assoc_op_defun_body (octave_value::op_el_or,
                                      octave_value::op_el_or_eq, args);
 }
 
 DEFUN (colon, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{r} =} colon (@var{base}, @var{limit})\n\
-@deftypefnx  {Built-in Function} {@var{r} =} colon (@var{base}, @var{increment}, @var{limit})\n\
-Return the result of the colon expression corresponding to @var{base}, @var{limit}, and optionally, @var{increment}.\n\
+@deftypefnx {Built-in Function} {@var{r} =} colon (@var{base}, @var{increment}, @var{limit})\n\
+Return the result of the colon expression corresponding to @var{base},\n\
+@var{limit}, and optionally, @var{increment}.\n\
 \n\
 This function is equivalent to the operator syntax @w{@code{base : limit}}\n\
 or @w{@code{base : increment : limit}}.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11810,18 +11810,18 @@ In all cases, typing CTRL-C stops progra
     print_usage ();
 
   return octave_value ();
 }
 
 DEFUN (__zoom__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} __zoom__ (@var{axes}, @var{mode}, @var{factor})\n\
-@deftypefnx  {Built-in Function} {} __zoom__ (@var{axes}, \"out\")\n\
-@deftypefnx  {Built-in Function} {} __zoom__ (@var{axes}, \"reset\")\n\
+@deftypefnx {Built-in Function} {} __zoom__ (@var{axes}, \"out\")\n\
+@deftypefnx {Built-in Function} {} __zoom__ (@var{axes}, \"reset\")\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 && nargin != 3)
diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -73,16 +73,17 @@ appear along @var{S}'s diagonal.\n\
 \n\
 For example, given the matrix @code{@var{A} = [1, 2; 3, 4]}, and its Schur\n\
 decomposition\n\
 \n\
 @example\n\
 [@var{U}, @var{S}] = schur (@var{A})\n\
 @end example\n\
 \n\
+@noindent\n\
 which returns\n\
 \n\
 @example\n\
 @group\n\
 @var{U} =\n\
 \n\
   -0.82456  -0.56577\n\
    0.56577  -0.82456\n\
@@ -90,18 +91,18 @@ which returns\n\
 @var{S} =\n\
 \n\
   -0.37228  -1.00000\n\
    0.00000   5.37228\n\
 \n\
 @end group\n\
 @end example\n\
 \n\
-It is possible to reorder the decomposition so that the positive eigenvalue is\n\
-in the upper left corner, by doing:\n\
+It is possible to reorder the decomposition so that the positive eigenvalue\n\
+is in the upper left corner, by doing:\n\
 \n\
 @example\n\
 [@var{U}, @var{S}] = ordschur (@var{U}, @var{S}, [0,1])\n\
 @end example\n\
 \n\
 @seealso{schur}\n\
 @end deftypefn")
 {
diff --git a/libinterp/dldfcn/__ilu__.cc b/libinterp/dldfcn/__ilu__.cc
--- a/libinterp/dldfcn/__ilu__.cc
+++ b/libinterp/dldfcn/__ilu__.cc
@@ -121,19 +121,19 @@ void ilu_0 (octave_matrix_t& sm, const s
       for (i = j1; i <= j2; i++)
         iw[ridx[i]] = -1;
     }
   if (opt == ROW)
     sm = sm.transpose ();
 }
 
 DEFUN_DLD (__ilu0__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn   {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
-@deftypefnx  {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
-@deftypefnx  {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} __ilu0__ (@var{A}, @dots{})\n\
+@deftypefn  {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
+@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
+@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} __ilu0__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string milu;
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -53,33 +53,36 @@ static void
 reset_visibility (figure::properties *fp)
 {
   fp->set_visible ("on");
 }
 #endif
 
 DEFUN_DLD(__osmesa_print__, args, ,
           "-*- texinfo -*-\n\
-@deftypefn {Loadable Function}  __osmesa_print__ (@var{h}, @var{file}, @var{term})\n\
-@deftypefnx {Loadable Function} {@var{img}  =} __osmesa_print__ (@var{h})\n\
+@deftypefn  {Loadable Function} {} __osmesa_print__ (@var{h}, @var{file}, @var{term})\n\
+@deftypefnx {Loadable Function} {@var{img} =} __osmesa_print__ (@var{h})\n\
 Print figure @var{h} using OSMesa and gl2ps for vector formats.\n\
 \n\
 This is a private internal function.\n\
 \n\
 The first method calls gl2ps with the appropriate @var{term} and writes\n\
-the output of gl2ps to @var{file}. If the first character of @var{file}\n\
+the output of gl2ps to @var{file}.  If the first character of @var{file}\n\
 is @qcode{|}, then a process is started and the output of gl2ps is piped\n\
 to it.\n\
 \n\
 Valid options for @var{term}, which can be concatenated in one string, are:\n\
+\n\
 @table @asis\n\
 @item @qcode{eps}, @qcode{pdf}, @qcode{ps}, @qcode{svg}, @qcode{pgf}, @qcode{tex}\n\
 Select output format.\n\
+\n\
 @item @qcode{is2D}\n\
 Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting algorithm.\n\
+\n\
 @item @qcode{notext}\n\
 Don't render text.\n\
 @end table\n\
 \n\
 The second method doesn't use gl2ps and returns a RGB image in @var{img}\n\
 instead.\n\
 \n\
 @end deftypefn")
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -76,17 +76,16 @@ DEFUN_DLD (audiodevinfo, args, ,
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 @deftypefnx {Loadable Function} {@var{supports} =} audiodevinfo (@var{io}, @var{id}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 Return a structure with fields \"input\" and \"output\".\n\
 The value of each field is a structure array with fields\n\
 \"Name\", @nospell{\"DriverVersion\"} and \"ID\" describing an audio device.\n\
 \n\
-\n\
 If the optional argument @var{io} is 1, return information about input\n\
 devices only.  If it is 0, return information about output devices only.\n\
 \n\
 If the optional argument @var{id} is provided, return information about\n\
 corresponding device.\n\
 \n\
 If the optional argument @var{name} is provided, return the id of the\n\
 named device.\n\
diff --git a/scripts/audio/soundsc.m b/scripts/audio/soundsc.m
--- a/scripts/audio/soundsc.m
+++ b/scripts/audio/soundsc.m
@@ -23,18 +23,18 @@
 ## @deftypefnx {Function File} {} soundsc (@dots{}, [@var{ymin}, @var{ymax}])
 ## Scale the audio data @var{y} and play it at sample rate @var{fs} to the
 ## default audio device.  If @var{fs} is not given, a default sample rate of
 ## 8000 samples per second is used.  The optional argument @var{nbits} specifies
 ## the bit depth to play to the audio device and defaults to 8 bits.
 ##
 ## By default, @var{y} is automatically normalized to the range [-1, 1].  If the
 ## range [@var{ymin}, @var{ymax}] is given, then elements of @var{y} that fall
-## within the range @var{ymin} @leq{} @var{y} @leq{} @var{ymax} are scaled to the
-## range [-1, 1] instead.
+## within the range @var{ymin} @leq{} @var{y} @leq{} @var{ymax} are scaled to
+## the range [-1, 1] instead.
 ##
 ## The audio signal @var{y} can be a vector or a two-column array, representing
 ## mono or stereo audio, respectively.
 ##
 ## For more control over audio playback, use the @code{audioplayer} class.
 ## @seealso{record, sound}
 ## @end deftypefn
 
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -65,17 +65,17 @@
 ## @item @qcode{"cubic"}
 ## Cubic interpolation (same as @qcode{"pchip"}).
 ##
 ## @item @qcode{"spline"}
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
-## @var{extrap} is a scalar number. It replaces values beyond the endpoints
+## @var{extrap} is a scalar number.  It replaces values beyond the endpoints
 ## with @var{extrap}.  Note that if @var{extrapval} is used, @var{method} must
 ## be specified as well.  If @var{extrap} is omitted and the @var{method} is
 ## @qcode{"spline"}, then the extrapolated values of the @qcode{"spline"} are
 ## used.  Otherwise the default @var{extrap} value for any other @var{method}
 ## is @qcode{"NA"}.
 ## @seealso{interp1, interp3, interpn, meshgrid}
 ## @end deftypefn
 
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -65,17 +65,17 @@
 ## Piecewise cubic Hermite interpolating polynomial---shape-preserving
 ## interpolation with smooth first derivative (not implemented yet).
 ##
 ## @item @qcode{"spline"}
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
-## @var{extrapval} is a scalar number. It replaces values beyond the endpoints
+## @var{extrapval} is a scalar number.  It replaces values beyond the endpoints
 ## with @var{extrapval}.  Note that if @var{extrapval} is used, @var{method}
 ## must be specified as well.  If @var{extrapval} is omitted and the
 ## @var{method} is @qcode{"spline"}, then the extrapolated values of the
 ## @qcode{"spline"} are used.  Otherwise the default @var{extrapval} value for
 ## any other @var{method} is @qcode{"NA"}.
 ## @seealso{interp1, interp2, interpn, meshgrid}
 ## @end deftypefn
 
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -57,17 +57,17 @@
 ##
 ## @item @qcode{"spline"}
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is @qcode{"linear"}.
 ##
-## @var{extrapval} is a scalar number. It replaces values beyond the endpoints
+## @var{extrapval} is a scalar number.  It replaces values beyond the endpoints
 ## with @var{extrapval}.  Note that if @var{extrapval} is used, @var{method}
 ## must be specified as well.  If @var{extrapval} is omitted and the
 ## @var{method} is @qcode{"spline"}, then the extrapolated values of the
 ## @qcode{"spline"} are used.  Otherwise the default @var{extrapval} value for
 ## any other @var{method} is @qcode{"NA"}.
 ## @seealso{interp1, interp2, interp3, spline, ndgrid}
 ## @end deftypefn
 
diff --git a/scripts/plot/draw/annotation.m b/scripts/plot/draw/annotation.m
--- a/scripts/plot/draw/annotation.m
+++ b/scripts/plot/draw/annotation.m
@@ -10,139 +10,141 @@
 ##   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ##   GNU General Public License for more details.
 ##   
 ##   You should have received a copy of the GNU General Public License
 ##   along with Octave; see the file COPYING.  If not, see
 ##   <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} annotation (@var{type})
+## @deftypefn  {Function File} {} annotation (@var{type})
 ## @deftypefnx {Function File} {} annotation ("line", @var{x}, @var{y})
 ## @deftypefnx {Function File} {} annotation ("arrow", @var{x}, @var{y})
 ## @deftypefnx {Function File} {} annotation ("doublearrow", @var{x}, @var{y})
 ## @deftypefnx {Function File} {} annotation ("textarrow", @var{x}, @var{y})
 ## @deftypefnx {Function File} {} annotation ("textbox", @var{pos})
 ## @deftypefnx {Function File} {} annotation ("rectangle", @var{pos})
 ## @deftypefnx {Function File} {} annotation ("ellipse", @var{pos})
 ## @deftypefnx {Function File} {} annotation (@var{hf}, @dots{})
 ## @deftypefnx {Function File} {} annotation (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {@var{h} =} annotation (@dots{})
 ## Draw annotations to emphasize parts of a figure.
 ##
 ## You may build a default annotation specifying only the type
-## @var{type} of the annotation. Otherwise you can set the position of
+## @var{type} of the annotation.  Otherwise you can set the position of
 ## the annotation using either @var{x} and @var{y} coordinates for
 ## line-based annotations or a position vector @var{pos} for others.
 ## In any case, coordinates are interpreted using the @qcode{"units"}
 ## property of the annotation objects: the default is
 ## @qcode{"normalized"}, which means the lower left hand corner of the
 ## figure has coordinates @samp{[0 0]} and the upper right hand corner
 ## @samp{[1 1]}. 
 ##
 ## The figure on which the annotations should be drawn may be 
 ## specified by providing its graphics handle @var{hf} before any
-## other argument. Otherwise annotations are drawn on the current
+## other argument.  Otherwise annotations are drawn on the current
 ## figure. 
 ## 
 ## Further arguments can be provided in the form of
-## @var{prop}/@var{val} pairs to customize the annotation  appearance
-## and the units in which coordinates are interpreted. The annotation
+## @var{prop}/@var{val} pairs to customize the annotation appearance
+## and the units in which coordinates are interpreted.  The annotation
 ## can also be customized afterward using its graphics handle 
 ## @var{h} and @code{set} function.
 ## 
 ## All annotation objects share two properties:
+##
 ## @itemize
 ## @item
 ##  @qcode{"units"}: the units in which coordinates are interpreted.
 ##  Its value may be one of @qcode{"centimeters"} |
 ##  @qcode{"characters"} | @qcode{"inches"} | @qcode{"@{normalized@}"}
 ##  | @qcode{"pixels"} | @qcode{"points"}.
 ##
 ## @item
 ##  @qcode{"position"}: a four elements vector [x0 y0 width height]
-##  specifying  the coordinates (x0,y0) of the origin of the annotation
-##  object, its width and its height. The width and height may be
+##  specifying the coordinates (x0,y0) of the origin of the annotation
+##  object, its width and its height.  The width and height may be
 ##  negative, depending on the orientation of the object.
-##   
+##
 ## @end itemize
 ##
 ## Valid annotation types and their specific properties are described
 ## bellow: 
+##
 ## @table @asis
 ## @item @qcode{"line"}
-##  Constructs a line. @var{x} and @var{y} must be two
+##  Constructs a line.  @var{x} and @var{y} must be two
 ##  elements vectors specifying the x and y coordinates of the two
 ##  ends of the line.
 ##
 ##  The line can be customized using @qcode{"linewidth"},
 ##  @qcode{"linestyle"} and @qcode{"color"} properties the same way
-##  as with @code{line} objects.   
+##  as with @code{line} objects.
 ##
 ## @item  @qcode{"arrow"}
-##   Construct an arrow. The second point in vectors @var{x} and
+##   Construct an arrow.  The second point in vectors @var{x} and
 ##   @var{y} specifies the arrowhead coordinates.
 ##
 ##  Besides line properties, the arrowhead can be customized using
 ##  @qcode{"headlength"}, @qcode{"headwidth"} and @qcode{"headstyle"}
-##  properties. Supported values for @qcode{"headstyle"} property are:
+##  properties.  Supported values for @qcode{"headstyle"} property are:
 ##  [@qcode{"diamond"} | @qcode{"ellipse"} | @qcode{"plain"} |
 ##  @qcode{"rectangle"} | @qcode{"vback1"} | @qcode{"@{vback2@}"} | 
 ##  @qcode{"vback3"}] 
 ## 
 ## @item  @qcode{"doublearrow"}
-##   Construct a double arrow. Vectors @var{x} and @var{y} specify the
+##   Construct a double arrow.  Vectors @var{x} and @var{y} specify the
 ##   arrowheads coordinates.
 ##
 ##  The line and the arrowhead can be customized as for arrow
 ##  annotations but some property names are duplicated:
 ##  @qcode{"head1length"}/@qcode{"head2length"},
-##  @qcode{"head1width"}/@qcode{"head2width"}, etc. The index 1 marks
+##  @qcode{"head1width"}/@qcode{"head2width"}, etc.  The index 1 marks
 ##  the properties of the arrowhead at the first point in @var{x} and
 ##  @var{y} coordinates. 
 ##
 ## @item  @qcode{"textarrow"}
 ##  Construct an arrow with a text label at the opposite of the
 ##  arrowhead.
 ##
 ##  The line and the arrowhead can be customized as for arrow
 ##  annotations, and the text can be customized using the same
-##  properties as @code{text} graphics objects. Note however
+##  properties as @code{text} graphics objects.  Note however
 ##  that some text property names are prefixed with "text" to
 ##  distinguish arrow and text properties:
 ##  @qcode{"textbackgroundcolor"}, @qcode{"textcolor"},
 ##  @qcode{"textedgecolor"}, @qcode{"textlinewidth"},
 ##  @qcode{"textmargin"}, @qcode{"textrotation"}.
-##   
+##
 ## @item  @qcode{"textbox"}
-##  Construct a box with a text inside. @var{pos} specifies the
+##  Construct a box with a text inside.  @var{pos} specifies the
 ##  @qcode{"position"} property of the annotation.
 ##
 ##  You may use @qcode{"backgroundcolor"}, @qcode{"edgecolor"},
 ##  @qcode{"linestyle"} , @qcode{"linewidth"} properties to customize
-##  the box background color and edges appearance. A limited set of
+##  the box background color and edges appearance.  A limited set of
 ##  @code{text} objects properties is also available: besides
-##  @qcode{"font..."} properties, you may also use
+##  @qcode{"font@dots{}"} properties, you may also use
 ##  @qcode{"horizontalalignment"} and @qcode{"verticalalignment"} to
 ##  move the text inside the box.
 ##
 ##  Finally the  @qcode{"fitboxtotext"} property controls the actual
-##  extent of the box. If @qcode{"on"} (the default) the
+##  extent of the box.  If @qcode{"on"} (the default) the
 ##  box limits are fitted to the text extent.
 ##
 ## @item  @qcode{"rectangle"}
-##  Construct a rectangle. @var{pos} specifies the
+##  Construct a rectangle.  @var{pos} specifies the
 ##  @qcode{"position"} property of the annotation. 
 ##
 ##  You may use @qcode{"facecolor"}, @qcode{"color"},
 ##  @qcode{"linestyle"} and @qcode{"linewidth"} properties to customize
 ##  the rectangle background color and edges appearance.
 ##
 ## @item  @qcode{"ellipse"}
-##  Construct an ellipse. @var{pos} specifies the
+##  Construct an ellipse.  @var{pos} specifies the
 ##  @qcode{"position"} property of the annotation. 
 ##
 ##  See @qcode{"rectangle"} annotations for customization. 
 ## @end table
 ## 
 ## @seealso{xlabel, title}
 ## @end deftypefn
 
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} {} zoom
-## @deftypefnx  {Command} {} zoom (@var{factor})
+## @deftypefn  {Command} {} zoom
+## @deftypefnx {Command} {} zoom (@var{factor})
 ## @deftypefnx {Command} {} zoom on
 ## @deftypefnx {Command} {} zoom off
 ## @deftypefnx {Command} {} zoom xon
 ## @deftypefnx {Command} {} zoom yon
 ## @deftypefnx {Command} {} zoom out
 ## @deftypefnx {Command} {} zoom reset
 ## @deftypefnx {Command} {} zoom (@var{hfig}, @var{option})
 ## Zoom the current axes object or control the interactive zoom mode of
