# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347305422 14400
#      Mon Sep 10 15:30:22 2012 -0400
# Node ID 67fabb3d81f4a7471f5da38df9d0f1da820a0a03
# Parent  95504932d422661663ffe83dee45321131dfdada
display class of variables in workspace viewer instead of type

* symbol-information.h, symbol-information.cc
(symbol_information::_class): Rename from _type.  Change all uses.
* workspace-model.cc (workspace_model::workspace_model): Display
"Class" instead of "Type".

diff --git a/libgui/src/symbol-information.cc b/libgui/src/symbol-information.cc
--- a/libgui/src/symbol-information.cc
+++ b/libgui/src/symbol-information.cc
@@ -40,17 +40,17 @@ symbol_information::from_symbol_record
   else if (symbol_record.is_global ())
     _scope = global;
   else if (symbol_record.is_persistent ())
     _scope = persistent;
   else if (symbol_record.is_hidden ())
     _scope = hidden;
 
   _symbol = QString (symbol_record.name ().c_str ());
-  _type   = QString (symbol_record.varval ().type_name ().c_str ());
+  _class  = QString (symbol_record.varval ().class_name ().c_str ());
   octave_value ov = symbol_record.varval ();
 
   // In case we have really large matrices or strings, cut them down
   // for performance reasons.
   QString short_value_string;
   bool use_short_value_string = false;
   if (ov.is_matrix_type () || ov.is_cell ())
     {
diff --git a/libgui/src/symbol-information.h b/libgui/src/symbol-information.h
--- a/libgui/src/symbol-information.h
+++ b/libgui/src/symbol-information.h
@@ -51,37 +51,37 @@ struct symbol_information
   {
     local       = 0,
     global      = 1,
     persistent  = 2,
     hidden      = 3
   };
 
   QString _symbol;
-  QString _type;
+  QString _class;
   QString _value;
   QString _dimension;
   Scope   _scope;
 
   /** Hashes the symbol information for quickly comparing it. */
   int
   hash () const
   {
-    return qHash (_symbol) + qHash (_type) + qHash (_value)
+    return qHash (_symbol) + qHash (_class) + qHash (_value)
       + qHash (_dimension) + (int)_scope;
   }
 
   /** Compares two symbol information objects. */
   bool
   equals (const symbol_information& other) const
   {
     if (hash () == other.hash ())
       {
         return _symbol == other._symbol
-            && _type   == other._type
+            && _class  == other._class
             && _value  == other._value
             && _scope  == other._scope
             && _dimension == other._dimension;
       }
   }
 
   /** Extracts meta information from a given symbol record. */
   bool
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "workspace-model.h"
 #include "octave-link.h"
 
 workspace_model::workspace_model(QObject *parent)
   : QAbstractItemModel(parent), octave_event_observer ()
 {
   QList<QVariant> rootData;
-  rootData << tr ("Name") << tr ("Type") << tr("Dimension") << tr ("Value");
+  rootData << tr ("Name") << tr ("Class") << tr("Dimension") << tr ("Value");
   _rootItem = new tree_item(rootData);
 
   insert_top_level_item(0, new tree_item ("Local"));
   insert_top_level_item(1, new tree_item ("Global"));
   insert_top_level_item(2, new tree_item ("Persistent"));
   insert_top_level_item(3, new tree_item ("Hidden"));
 
   connect(&_update_workspace_model_timer,
@@ -90,17 +90,17 @@ workspace_model::event_accepted (octave_
       top_level_item (2)->delete_child_items ();
       top_level_item (3)->delete_child_items ();
 
       foreach (const symbol_information& s, _symbol_information)
         {
           tree_item *child = new tree_item ();
 
           child->set_data (0, s._symbol);
-          child->set_data (1, s._type);
+          child->set_data (1, s._class);
           child->set_data (2, s._dimension);
           child->set_data (3, s._value);
 
           switch (s._scope)
             {
               case symbol_information::local:       top_level_item (0)->add_child (child); break;
               case symbol_information::global:      top_level_item (1)->add_child (child); break;
               case symbol_information::persistent:  top_level_item (2)->add_child (child); break;
