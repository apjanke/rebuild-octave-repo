# HG changeset patch
# User jwe
# Date 1196370655 0
#      Thu Nov 29 21:10:55 2007 +0000
# Node ID 02eb1619b85714d58f8d0f302d872c759913e48e
# Parent  c8abc18322b737850d14d860e0625533fe696d75
[project @ 2007-11-29 21:10:55 by jwe]

diff --git a/scripts/plot/__stem__.m b/scripts/plot/__stem__.m
--- a/scripts/plot/__stem__.m
+++ b/scripts/plot/__stem__.m
@@ -18,21 +18,23 @@
 
 ## Undocumented internal function
 
 ## Author: Michel D. Schmid <michaelschmid@users.sourceforge.net>
 ## Adapted-by: jwe
 
 function h = __stem__ (have_z, varargin)
 
-  [ax, varargin, nargin] = __plt_get_axis_arg__ ("stem", varargin{:});
+  if (have_z)
+    caller = "stem3";
+  else
+    caller = "stem";
+  endif
 
-  if (nargin < 1 || nargin > 4)
-    print_usage ();
-  endif
+  [ax, varargin, nargin] = __plt_get_axis_arg__ (caller, varargin{:});
 
   [x, y, z, dofill, lc, ls, mc, ms] = check_stem_arg (have_z, varargin{:});
 
   if (dofill)
     fc = mc;
   else
     fc = "none";
   endif
@@ -76,62 +78,68 @@ function h = __stem__ (have_z, varargin)
   end_unwind_protect
 
   h = [h_stems; h_baseline];
 
 endfunction
 
 function [x, y, z, dofill, lc, ls, mc, ms] = check_stem_arg (have_z, varargin)
 
+  if (have_z)
+    caller = "stem3";
+  else
+    caller = "stem";
+  endif
+
   ## set specifiers to default values
   [lc, ls, mc, ms] = set_default_values ();
   dofill = 0;
   fill_2 = 0;
   linespec_2 = 0;
   z = [];
 
   ## check input arguments
   if (nargin == 2)
     if (have_z)
       z = varargin{1};
-      x = 1 : rows (z);
-      y = 1 : columns (z);
+      x = 1:rows (z);
+      y = 1:columns (z);
     else
       y = varargin{1};
       if (isvector (y))
-	x = 1:length(y);
+	x = 1:length (y);
       elseif (ismatrix (y))
-	x = 1:rows(y);
+	x = 1:rows (y);
       else 
 	error ("stem: Y must be a matrix");
       endif # in each case, x & y will be defined
     endif
   elseif (nargin == 3)
     ## several possibilities
     ## 1. the real y data
     ## 2. 'fill'
     ## 3. line spec
     if (ischar (varargin{2}))
       ## only 2. or 3. possible
       if (strcmp ("fill", varargin{2}))
 	dofill = 1;
       else
 	## parse the linespec
-	[lc, ls, mc, ms] = stem_line_spec (varargin{2});
+	[lc, ls, mc, ms] = stem_line_spec (caller, varargin{2});
       endif
       if (have_z)
 	z = varargin{1};
-	x = 1 : rows (z);
-	y = 1 : columns (z);
+	x = 1:rows (z);
+	y = 1:columns (z);
       else
 	y = varargin{1};
 	if (isvector (y))
-	  x = 1:length(y);
+	  x = 1:length (y);
 	elseif (ismatrix (y))
-	  x = 1:rows(y);
+	  x = 1:rows (y);
 	else
 	  error ("stem: Y must be a matrix");
 	endif # in each case, x & y will be defined
       endif
     else
       if (have_z)
 	error ("stem3: must define X, Y and Z");
       else
@@ -151,29 +159,29 @@ function [x, y, z, dofill, lc, ls, mc, m
     ## arg3 2. 'fill' or linespec
     if (ischar (varargin{2}))
       ## only arg2 2. / arg3 1. & arg3 3. are possible
       if (strcmp ("fill", varargin{2}))
 	dofill = 1;
 	fill_2 = 1; # be sure, no second "fill" is in the arguments
       else
 	## must be a linespec
-	[lc, ls, mc, ms] = stem_line_spec (varargin{2});
+	[lc, ls, mc, ms] = stem_line_spec (caller, varargin{2});
 	linespec_2 = 1;
       endif
       if (have_z)
 	z = varargin{1};
-	x = 1 : rows (z);
-	y = 1 : columns (z);
+	x = 1:rows (z);
+	y = 1:columns (z);
       else
 	y = varargin{1};
 	if (isvector (y))
-	  x = 1:length(y);
+	  x = 1:length (y);
 	elseif (ismatrix (y))
-	  x = 1:size(y,1);
+	  x = 1:rows (y);
 	else
 	  error ("stem: Y must be a matrix");
 	endif # in each case, x & y will be defined
       endif
     else
       if (have_z)
 	x = varargin{1};
 	y = varargin{2};
@@ -186,113 +194,112 @@ function [x, y, z, dofill, lc, ls, mc, m
 	x = varargin{1};
 	y = varargin{2};
 	if (! (ismatrix (x) && ismatrix (y)))
 	  error ("stem: X and Y must be matrices");
 	endif
       endif
     endif # if ischar(varargin{2})
     if (! have_z)
-      ## varargin{3} must be char...
-      ## check for "fill" ..
-      if (strcmp ("fill", varargin{3}) & fill_2)
-	error ("stem:check_stem_arg: duplicate fill argument");
-      elseif (strcmp("fill", varargin{3}) & linespec_2)
+      ## varargin{3} must be char
+      ## check for "fill"
+      if (strcmp ("fill", varargin{3}) && fill_2)
+	error ("stem: duplicate fill argument");
+      elseif (strcmp("fill", varargin{3}) && linespec_2)
 	## must be "fill"
 	dofill = 1;
 	fill_2 = 1;
-      elseif (strcmp ("fill", varargin{3}) & ! linespec_2)
+      elseif (strcmp ("fill", varargin{3}) && ! linespec_2)
 	## must be "fill"
 	dofill = 1;
 	fill_2 = 1;
       elseif (! linespec_2)
 	## must be linespec
-	[lc, ls, mc, ms] = stem_line_spec (varargin{3});
+	[lc, ls, mc, ms] = stem_line_spec (caller, varargin{3});
 	linespec_2 = 1;
       endif
     endif
   elseif (nargin == 5)
     if (have_z)
       x = varargin{1};
       y = varargin{2};
       z = varargin{3};
       if (! (ismatrix (x) && ismatrix (y) && ismatrix (z)))
 	error ("stem3: X, Y and Z must be matrices");
       endif
     else
       x = varargin{1};
       y = varargin{2};
       if (! (ismatrix (x) && ismatrix (y)))
-	error ("X and Y must be matrices");
+	error ("stem: X and Y must be matrices");
       endif
     endif
 
     if (! have_z)
       if (strcmp ("fill", varargin{3}))
 	dofill = 1;
 	fill_2 = 1; # be sure, no second "fill" is in the arguments
       else
 	## must be a linespec
-	[lc, ls, mc, ms] = stem_line_spec (varargin{3});
+	[lc, ls, mc, ms] = stem_line_spec (caller, varargin{3});
 	linespec_2 = 1;
       endif
     endif
 
     ## check for "fill" ..
-    if (strcmp ("fill", varargin{4}) & fill_2)
-      error ("stem:check_stem_arg: duplicate fill argument");
-    elseif (strcmp ("fill", varargin{4}) & linespec_2)
+    if (strcmp ("fill", varargin{4}) && fill_2)
+      error ("%s: duplicate fill argument", caller);
+    elseif (strcmp ("fill", varargin{4}) && linespec_2)
       ## must be "fill"
       dofill = 1;
       fill_2 = 1;
-    elseif (! strcmp ("fill", varargin{4}) & ! linespec_2)
+    elseif (! strcmp ("fill", varargin{4}) && ! linespec_2)
       ## must be linespec
-      [lc, ls, mc, ms] = stem_line_spec (varargin{4});
+      [lc, ls, mc, ms] = stem_line_spec (caller, varargin{4});
       linespec_2 = 1;
     endif
   elseif (nargin == 6 && have_z)
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     if (! (ismatrix (x) && ismatrix (y) && ismatrix (z)))
       error ("stem3: X, Y and Z must be matrices");
     endif
 
     if (strcmp ("fill", varargin{4}))
       dofill = 1;
       fill_2 = 1; # be sure, no second "fill" is in the arguments
     else
       ## must be a linespec
-      [lc, ls, mc, ms] = stem_line_spec (varargin{4});
+      [lc, ls, mc, ms] = stem_line_spec (caller, varargin{4});
       linespec_2 = 1;
     endif
 
     ## check for "fill" ..
-    if (strcmp ("fill", varargin{5}) & fill_2)
-      error ("stem3:check_stem_arg: duplicate fill argument");
-    elseif (strcmp ("fill", varargin{5}) & linespec_2)
+    if (strcmp ("fill", varargin{5}) && fill_2)
+      error ("stem3: duplicate fill argument");
+    elseif (strcmp ("fill", varargin{5}) && linespec_2)
       ## must be "fill"
       dofill = 1;
       fill_2 = 1;
-    elseif (! strcmp ("fill", varargin{5}) & ! linespec_2)
+    elseif (! strcmp ("fill", varargin{5}) && ! linespec_2)
       ## must be linespec
-      [lc, ls, mc, ms] = stem_line_spec (varargin{5});
+      [lc, ls, mc, ms] = stem_line_spec (caller, varargin{5});
       linespec_2 = 1;
     endif
-  elseif (have_z)
-    error ("stem3: incorrect number of arguments");
   else
-    error ("stem: incorrect number of arguments");
+    error ("%s: incorrect number of arguments", caller);
   endif
 
 endfunction
 
-function [lc, ls, mc, ms] = stem_line_spec (str)
+function [lc, ls, mc, ms] = stem_line_spec (caller, str)
   if (! ischar (str))
-    error ("stem:stem_line_spec: wrong argument type, must be \"fill\" or a string of specifiers");
+    error ("%s: expecting argument to be \"fill\" or a string of specifiers",
+	   caller);
   endif
   [lc, ls, mc, ms] = set_default_values ();
   ## Parse the line specifier string.
   cur_props = __pltopt__ ("stem", str, false);
   for i = 1:length(cur_props)
     if (isfield (cur_props(i), "color") && ! isempty (cur_props(i).color)); # means line color
       mc = lc = cur_props(i).color;
     elseif (isfield (cur_props(i), "linestyle"))
diff --git a/scripts/plot/stem.m b/scripts/plot/stem.m
--- a/scripts/plot/stem.m
+++ b/scripts/plot/stem.m
@@ -89,15 +89,19 @@
 ## @seealso{bar, barh, plot}
 ## @end deftypefn
 
 ## Author: Michel D. Schmid <michaelschmid@users.sourceforge.net>
 ## Adapted-by: jwe
 
 function h = stem (varargin)
 
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
+  endif
+
   tmp = __stem__ (false, varargin{:});
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/stem3.m b/scripts/plot/stem3.m
--- a/scripts/plot/stem3.m
+++ b/scripts/plot/stem3.m
@@ -32,15 +32,19 @@
 ## @noindent
 ## plots 31 stems with heights from 0 to 6 lying on a circle. Color 
 ## definitions with rgb-triples are not valid!
 ## @seealso{bar, barh, stem, plot}
 ## @end deftypefn
 
 function h = stem3 (varargin)
 
+  if (nargin < 3 || nargin > 4)
+    print_usage ();
+  endif
+
   tmp = __stem__ (true, varargin{:});
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
