# HG changeset patch
# User Juan Pablo Carbajal <ajuanpi+dev@gmail.com>
# Date 1434552729 -7200
#      Wed Jun 17 16:52:09 2015 +0200
# Node ID f357e076776f7f09a56acf1ecc4d5ba7ec763a20
# Parent  01895a6acdded4a1704c9437b228c78fede3c867
num2str.m: Fixed two Matlab compatibility issues (bug #45174, bug #44864).

* num2str.m: Don't use repmat to modify user-supplied conversion format if it
contains more than one conversion specifier or if the string (%s) or
character (%c) conversions are present.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -111,20 +111,24 @@ function retval = num2str (x, arg)
           fmt = sprintf ("%%%d.%dg", dgt+2+any (x(:) < 0), dgt);
         endif
       else
         ## Logical input
         fmt = "%3d";
       endif
     endif
     fmt = do_string_escapes (fmt);  # required now that '\n' is interpreted.
-    fmt = [deblank(repmat (fmt, 1, columns (x))), "\n"];
     nd = ndims (x);
-    tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
-    retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
+    nc = columns (x);
+    x  = permute (x, [2, 1, 3:nd]);
+    if (! (sum (fmt == "%") > 1 || any (strcmp (fmt, {"%s", "%c"}))))
+      fmt = [deblank(repmat (fmt, 1, nc)), "\n"];
+    endif
+    tmp    = sprintf (fmt, x);
+    retval = strtrim (char (ostrsplit (tmp, "\n", true)));
   else   # Complex matrix input
     if (nargin == 2)
       if (ischar (arg))
         fmt = [arg "%-+" arg(2:end) "i"];
       elseif (isnumeric (arg) && isscalar (arg) && arg >= 0 && arg == fix (arg))
         fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", arg+7, arg, arg+7, arg);
       else
         error ("num2str: PRECISION must be a scalar integer >= 0");
@@ -203,16 +207,19 @@ endfunction
 ## FIXME: Integers greater than bitmax() should be masked to show just
 ##        16 digits of precision.
 %!xtest
 %! assert (num2str (1e23), "100000000000000000000000");
 
 ## Test for bug #44864, extra rows generated from newlines in format
 %!assert (rows (num2str (magic (3), '%3d %3d %3d\n')), 3)
 
+## Test for bug #45174
+%!assert (num2str ([65 66 67], '%s'), "ABC")
+
 %!error num2str ()
 %!error num2str (1, 2, 3)
 %!error <X must be a numeric> num2str ({1})
 %!error <PRECISION must be a scalar integer> num2str (1, {1})
 %!error <PRECISION must be a scalar integer> num2str (1, ones (2))
 %!error <PRECISION must be a scalar integer> num2str (1, -1)
 %!error <PRECISION must be a scalar integer> num2str (1+1i, {1})
 %!error <PRECISION must be a scalar integer> num2str (1+1i, ones (2))
