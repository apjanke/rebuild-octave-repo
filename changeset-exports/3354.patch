# HG changeset patch
# User jwe
# Date 942865575 0
#      Wed Nov 17 19:06:15 1999 +0000
# Node ID 87721841efd77bd2cc887b72496a4a48fb3fe75c
# Parent  6b36317855ffe984abf249a7fa5a2b545ec8dbb3
[project @ 1999-11-17 19:06:11 by jwe]

diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -77,16 +77,18 @@ public:
   void operator delete (void *p, size_t size);
 #endif
 
   idx_vector index_vector (void) const { return idx_vector ((double) scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
+  bool is_constant (void) const { return true; }
+
   bool is_defined (void) const { return true; }
   bool is_real_scalar (void) const { return true; }
 
   octave_value all (void) const { return (double) (scalar != 0); }
   octave_value any (void) const { return (double) (scalar != 0); }
 
   bool is_real_type (void) const { return true; }
   bool is_scalar_type (void) const { return true; }
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -167,33 +167,16 @@ Array2<T>::insert (const Array2<T>& a, i
   for (int j = 0; j < a_cols; j++)
     for (int i = 0; i < a_rows; i++)
       elem (r+i, c+j) = a.elem (i, j);
 
   return *this;
 }
 
 template <class T>
-bool
-Array2<T>::is_symmetric (void) const
-{
-  if (is_square () && d1 > 0)
-    {
-      for (int i = 0; i < d1; i++)
-	for (int j = i+1; j < d2; j++)
-	  if (elem (i, j) != elem (j, i))
-	    return false;
-
-      return true;
-    }
-
-  return false;
-}
-
-template <class T>
 Array2<T>
 Array2<T>::transpose (void) const
 {
   Array2<T> result (d2, d1);
 
   if (d1 > 0 && d2 > 0)
     for (int j = 0; j < d2; j++)
       for (int i = 0; i < d1; i++)
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -170,18 +170,16 @@ public:
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
 
   bool is_square (void) const { return (d1 == d2); }
 
-  bool is_symmetric (void) const;
-
   Array2<T> transpose (void) const;
 
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   Array2<T> value (void);
 
   Array2<T> index (idx_vector& i) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+1999-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (is_symmetric): Move here from Array2.cc.
+	* Array2.h (is_symmetric): Delete declaration.
+
 1999-11-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-env.cc (do_get_user_name): Reverse sense of test.
 
 1999-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-time.cc (Fstrftime): Undo previous change.
 	(octave_time::octave_time (const octave_base_tm&)): Likewise.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -162,16 +162,32 @@ Matrix::operator == (const Matrix& a) co
 }
 
 bool
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
+bool
+Matrix::is_symmetric (void) const
+{
+  if (is_square () && rows () > 0)
+    {
+      for (int i = 0; i < rows (); i++)
+	for (int j = i+1; j < cols (); j++)
+	  if (elem (i, j) != elem (j, i))
+	    return false;
+
+      return true;
+    }
+
+  return false;
+}
+
 Matrix&
 Matrix::insert (const Matrix& a, int r, int c)
 {
   Array2<double>::insert (a, r, c);
   return *this;
 }
 
 Matrix&
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -68,16 +68,18 @@ public:
     {
       MArray2<double>::operator = (a);
       return *this;
     }
 
   bool operator == (const Matrix& a) const;
   bool operator != (const Matrix& a) const;
 
+  bool is_symmetric (void) const;
+
   // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, int r, int c);
   Matrix& insert (const RowVector& a, int r, int c);
   Matrix& insert (const ColumnVector& a, int r, int c);
   Matrix& insert (const DiagMatrix& a, int r, int c);
 
   Matrix& fill (double val);
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -28,13 +28,25 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "Cell.h"
 
 octave_allocator
 Cell::allocator (sizeof (Cell));
 
+Cell
+Cell::index (idx_vector& i) const
+{
+  return Cell (data.index (i));
+}
+
+Cell
+Cell::index (idx_vector& i, idx_vector& j) const
+{
+  return Cell (data.index (i, j));
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -41,16 +41,19 @@ Cell
 public:
 
   Cell (void)
     : data () { }
 
   Cell (int n, int m, const octave_value& val = octave_value ())
     : data (n, m, val) { }
 
+  Cell (const Array2<octave_value>& c)
+    : data (c) { }
+
   Cell (const Cell& c)
     : data (c.data) { }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
@@ -70,16 +73,20 @@ public:
   octave_value& operator () (int i, int j) { return elem (i, j); }
 
   octave_value operator () (int i, int j) const { return elem (i, j); }
 
   octave_value& elem (int i, int j) { return data.elem (i, j); }
 
   octave_value elem (int i, int j) const { return data.elem (i, j); }
 
+  Cell index (idx_vector& i) const;
+
+  Cell index (idx_vector& i, idx_vector& j) const;
+
 private:
 
   static octave_allocator allocator;
 
   Array2<octave_value> data;
 };
 
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+1999-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cell.cc (Fiscell, Fcell): New Functions.
+	(octave_cell::do_index_op): New function.
+
+	* utils.cc (get_dimensions): Move here from data.cc and make extern.
+	(Vtreat_neg_dim_as_zero, treat_neg_dim_as_zero): Likewise.
+	(symbols_of_utils): New function.
+
+	* data.cc (fill_matrix (const octave_value_list&, double,
+	const char*)): New function.
+	(Fones, Fzeros): Use it to avoid some code duplication.
+
 1999-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-cell.h, pt-cell.cc, ov-cell.h, ov-cell.cc, Cell.h, Cell.cc:
 	New files.
 	* Makefile.in: Add them to the appropriate lists.
 	* pt-walk.h (visit_cell (tree_cell&): New pure virtual.
 	* pt-pr-code.cc (tree_print_code::visit_cell (tree_cell&)): New
 	function.
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -24,16 +24,22 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array.h"
 #include "Array.cc"
 
+#include "Array2.h"
+#include "Array2.cc"
+
+#include "DiagArray2.h"
+#include "DiagArray2.cc"
+
 #include "ov.h"
 
 extern template class Array<int>;
 extern template class Array2<int>;
 extern template class DiagArray2<int>;
 
 extern template class Array<double>;
 extern template class Array2<double>;
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -44,22 +44,16 @@ Software Foundation, 59 Temple Place - S
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
 #ifndef ABS
 #define ABS(x) (((x) < 0) ? (-x) : (x))
 #endif
 
-// Should expressions like ones (-1, 5) result in an empty matrix or
-// an error?  A positive value means yes.  A negative value means
-// yes, but print a warning message.  Zero means it should be
-// considered an error.
-static int Vtreat_neg_dim_as_zero;
-
 DEFUN (all, args, ,
   "all (X): are all elements of X nonzero?")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_defined ())
@@ -884,227 +878,115 @@ S must be a structure and NAME must be a
 	print_usage ("struct_contains");
     }
   else
     print_usage ("struct_contains");
 
   return retval;
 }
 
-static void
-check_dimensions (int& nr, int& nc, const char *warnfor)
-{
-  if (nr < 0 || nc < 0)
-    {
-      if (Vtreat_neg_dim_as_zero)
-	{
-	  nr = (nr < 0) ? 0 : nr;
-	  nc = (nc < 0) ? 0 : nc;
-
-	  if (Vtreat_neg_dim_as_zero < 0)
-	    warning ("%s: converting negative dimension to zero",
-		     warnfor);
-	}
-      else
-	error ("%s: can't create a matrix with negative dimensions",
-	       warnfor);
-    }
-}
-
-static void
-get_dimensions (const octave_value& a, const char *warn_for,
-		int& nr, int& nc)
-{
-  if (a.is_scalar_type ())
-    {
-      nr = nc = a.nint_value ();
-    }
-  else
-    {
-      nr = a.rows ();
-      nc = a.columns ();
-
-      if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
-	{
-	  ColumnVector v = a.vector_value ();
-
-	  if (error_state)
-	    return;
-
-	  nr = NINT (v (0));
-	  nc = NINT (v (1));
-	}
-      else
-	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
-    }
-
-  check_dimensions (nr, nc, warn_for); // May set error_state.
-}
-
-static void
-get_dimensions (const octave_value& a, const octave_value& b,
-		const char *warn_for, int& nr, int& nc)
+static octave_value
+fill_matrix (const octave_value_list& args, double val, const char *fcn)
 {
-  nr = a.is_empty () ? 0 : a.nint_value ();
-  nc = b.is_empty () ? 0 : b.nint_value ();
-
-  if (error_state)
-    error ("%s: expecting two scalar arguments", warn_for);
-  else
-    check_dimensions (nr, nc, warn_for); // May set error_state.
-}
-
-static octave_value
-fill_matrix (const octave_value& a, double val, const char *warn_for)
-{
-  int nr, nc;
-  get_dimensions (a, warn_for, nr, nc);
-
-  if (error_state)
-    return  octave_value ();
-
-  Matrix m (nr, nc, val);
-
-  return m;
-}
-
-static octave_value
-fill_matrix (const octave_value& a, const octave_value& b,
-	     double val, const char *warn_for)
-{
-  int nr, nc;
-  get_dimensions (a, b, warn_for, nr, nc); // May set error_state.
-
-  if (error_state)
-    return octave_value ();
-
-  Matrix m (nr, nc, val);
-
-  return m;
-}
-
-DEFUN (ones, args, ,
-  "ones (N), ones (N, M), ones (X): create a matrix of all ones")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  switch (nargin)
-    {
-    case 0:
-      retval = 1.0;
-      break;
-
-    case 1:
-      retval = fill_matrix (args(0), 1.0, "ones");
-      break;
-
-    case 2:
-      retval = fill_matrix (args(0), args(1), 1.0, "ones");
-      break;
-
-    default:
-      print_usage ("ones");
-      break;
-    }
-
-  return retval;
-}
-
-DEFUN (zeros, args, ,
-  "zeros (N), zeros (N, M), zeros (X): create a matrix of all zeros")
-{
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   switch (nargin)
     {
     case 0:
       retval = 0.0;
       break;
 
     case 1:
-      retval = fill_matrix (args(0), 0.0, "zeros");
+      {
+	int nr, nc;
+	get_dimensions (args(0), fcn, nr, nc);
+
+	if (! error_state)
+	  retval = Matrix (nr, nc, val);
+      }
       break;
 
     case 2:
-      retval = fill_matrix (args(0), args(1), 0.0, "zeros");
+      {
+	int nr, nc;
+	get_dimensions (args(0), args(1), fcn, nr, nc);
+
+	if (! error_state)
+	  retval = Matrix (nr, nc, val);
+      }
       break;
 
     default:
-      print_usage ("zeros");
+      print_usage (fcn);
       break;
     }
 
   return retval;
 }
 
-static octave_value
-identity_matrix (const octave_value& a)
+DEFUN (ones, args, ,
+  "ones (N), ones (N, M), ones (X): create a matrix of all ones")
 {
-  int nr, nc;
-  get_dimensions (a, "eye", nr, nc); // May set error_state.
-
-  if (error_state)
-    return octave_value ();
-
-  Matrix m (nr, nc, 0.0);
-
-  if (nr > 0 && nc > 0)
-    {
-      int n = MIN (nr, nc);
-      for (int i = 0; i < n; i++)
-	m (i, i) = 1.0;
-    }
-
-  return m;
+  return fill_matrix (args, 1.0, "ones");
 }
 
-static octave_value
-identity_matrix (const octave_value& a, const octave_value& b)
+DEFUN (zeros, args, ,
+  "zeros (N), zeros (N, M), zeros (X): create a matrix of all zeros")
 {
-  int nr, nc;
-  get_dimensions (a, b, "eye", nr, nc);  // May set error_state.
+  return fill_matrix (args, 0.0, "zeros");
+}
 
-  if (error_state)
-    return octave_value ();
-
+static Matrix
+identity_matrix (int nr, int nc)
+{
   Matrix m (nr, nc, 0.0);
 
   if (nr > 0 && nc > 0)
     {
       int n = MIN (nr, nc);
       for (int i = 0; i < n; i++)
 	m (i, i) = 1.0;
     }
 
   return m;
 }
 
 DEFUN (eye, args, ,
   "eye (N), eye (N, M), eye (X): create an identity matrix")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   switch (nargin)
     {
     case 0:
       retval = 1.0;
       break;
 
     case 1:
-      retval = identity_matrix (args(0));
+      {
+	int nr, nc;
+	get_dimensions (args(0), "eye", nr, nc);
+
+	if (! error_state)
+	  retval = identity_matrix (nr, nc);
+      }
       break;
 
     case 2:
-      retval = identity_matrix (args(0), args(1));
+      {
+	int nr, nc;
+	get_dimensions (args(0), args(1), "eye", nr, nc);
+
+	if (! error_state)
+	  retval = identity_matrix (nr, nc);
+      }
       break;
 
     default:
       print_usage ("eye");
       break;
     }
 
   return retval;
@@ -1168,24 +1050,16 @@ See also: logspace")
 		retval (0) = octave_value (rv, 0);
 	    }
 	}
     }
 
   return retval;
 }
 
-static int
-treat_neg_dim_as_zero (void)
-{
-  Vtreat_neg_dim_as_zero = check_preference ("treat_neg_dim_as_zero");
-
-  return 0;
-}
-
 void
 symbols_of_data (void)
 {
 
 #define IMAGINARY_DOC_STRING "-*- texinfo -*-\n\
 @defvr {Built-in Variable} I\n\
 @defvrx {Built-in Variable} J\n\
 @defvrx {Built-in Variable} i\n\
@@ -1346,20 +1220,18 @@ floating point arithmetic, @code{realmin
 @end ifinfo\n\
 @iftex\n\
 @tex\n\
  $2.2251\\times10^{-308}$.\n\
 @end tex\n\
 @end iftex\n\
 @end defvr");
 
-  DEFVAR (treat_neg_dim_as_zero, 0.0, treat_neg_dim_as_zero,
-    "convert negative dimensions to zero");
-
   DEFCONST (true, true,
     "logical true value");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -31,37 +31,59 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 #include <strstream.h>
 
 #include "lo-utils.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cell.h"
+#include "oct-obj.h"
 #include "unwind-prot.h"
+#include "utils.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell");
 
 octave_value
 octave_cell::do_index_op (const octave_value_list& idx)
 {
   octave_value retval;
 
-#if 0
-  if (idx.length () == 1)
+  int len = idx.length ();
+
+  switch (len)
     {
-      idx_vector i = idx (0).index_vector ();
+    case 2:
+      {
+	idx_vector i = idx (0).index_vector ();
+	idx_vector j = idx (1).index_vector ();
+
+	retval = cell_val.index (i, j);
+      }
+      break;
 
-      retval = octave_value_list (lst.index (i));
+    case 1:
+      {
+	idx_vector i = idx (0).index_vector ();
+
+	retval = cell_val.index (i);
+      }
+      break;
+
+    default:
+      {
+	string n = type_name ();
+
+	error ("invalid number of indices (%d) for %s value",
+	       len, n.c_str ());
+      }
+      break;
     }
-  else
-    error ("lists may only be indexed by a single scalar");
-#endif
 
   return retval;
 }
 
 void
 octave_cell::assign (const octave_value_list& idx, const octave_value& rhs)
 {
 #if 0
@@ -147,13 +169,65 @@ octave_cell::print_name_tag (ostream& os
   else
     {
       os << name << " =";
       newline (os);
     }
   return false;
 }
 
+DEFUN (iscell, args, ,
+  "iscell (x): return nonzero if x is a cell array")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_cell ();
+  else
+    print_usage ("iscell");
+
+  return retval;
+}
+
+DEFUN (cell, args, ,
+  "cell (N)\n\
+cell (M, N)\n\
+cell (size (A))")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  switch (nargin)
+    {
+    case 1:
+      {
+	int nr, nc;
+	get_dimensions (args(0), "cell", nr, nc);
+
+	if (! error_state)
+	  retval = Cell (nr, nc, Matrix ());
+      }
+      break;
+
+    case 2:
+      {
+	int nr, nc;
+	get_dimensions (args(0), args(1), "cell", nr, nc);
+
+	if (! error_state)
+	  retval = Cell (nr, nc, Matrix ());
+      }
+      break;
+
+    default:
+      print_usage ("cell");
+      break;
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -71,16 +71,22 @@ LOSE! LOSE!
 #include "oct-obj.h"
 #include "pager.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
+// Should expressions like ones (-1, 5) result in an empty matrix or
+// an error?  A positive value means yes.  A negative value means
+// yes, but print a warning message.  Zero means it should be
+// considered an error.
+static int Vtreat_neg_dim_as_zero;
+
 // Top level context (?)
 extern jmp_buf toplevel;
 
 // Return to the main command loop in octave.cc.
 
 void
 jump_to_top_level (void)
 {
@@ -569,13 +575,92 @@ check_preference (const string& var)
 	  warn_old_style_preference (false, val);
 	  pref = 0;
 	}
     }
 
   return pref;
 }
 
+static void
+check_dimensions (int& nr, int& nc, const char *warnfor)
+{
+  if (nr < 0 || nc < 0)
+    {
+      if (Vtreat_neg_dim_as_zero)
+	{
+	  nr = (nr < 0) ? 0 : nr;
+	  nc = (nc < 0) ? 0 : nc;
+
+	  if (Vtreat_neg_dim_as_zero < 0)
+	    warning ("%s: converting negative dimension to zero",
+		     warnfor);
+	}
+      else
+	error ("%s: can't create a matrix with negative dimensions",
+	       warnfor);
+    }
+}
+
+void
+get_dimensions (const octave_value& a, const char *warn_for,
+		int& nr, int& nc)
+{
+  if (a.is_scalar_type ())
+    {
+      nr = nc = a.nint_value ();
+    }
+  else
+    {
+      nr = a.rows ();
+      nc = a.columns ();
+
+      if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
+	{
+	  ColumnVector v = a.vector_value ();
+
+	  if (error_state)
+	    return;
+
+	  nr = NINT (v (0));
+	  nc = NINT (v (1));
+	}
+      else
+	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
+    }
+
+  check_dimensions (nr, nc, warn_for); // May set error_state.
+}
+
+void
+get_dimensions (const octave_value& a, const octave_value& b,
+		const char *warn_for, int& nr, int& nc)
+{
+  nr = a.is_empty () ? 0 : a.nint_value ();
+  nc = b.is_empty () ? 0 : b.nint_value ();
+
+  if (error_state)
+    error ("%s: expecting two scalar arguments", warn_for);
+  else
+    check_dimensions (nr, nc, warn_for); // May set error_state.
+}
+
+static int
+treat_neg_dim_as_zero (void)
+{
+  Vtreat_neg_dim_as_zero = check_preference ("treat_neg_dim_as_zero");
+
+  return 0;
+}
+
+void
+symbols_of_utils (void)
+{
+  DEFVAR (treat_neg_dim_as_zero, 0.0, treat_neg_dim_as_zero,
+    "convert negative dimensions to zero");
+
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -25,16 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 class istream;
 class ostrstream;
 
 #include <string>
 
 #include "lo-utils.h"
 
+class octave_value;
 class octave_value_list;
 class string_vector;
 
 extern string search_path_for_file (const string&, const string&);
 extern string file_in_path (const string&, const string&);
 extern string fcn_file_in_path (const string&);
 extern string oct_file_in_path (const string&);
 
@@ -53,16 +54,24 @@ extern int empty_arg (const char *name, 
 extern const char *undo_string_escape (char c);
 
 extern string do_string_escapes (const string& s);
 
 extern string undo_string_escapes (const string& s);
 
 extern int check_preference (const string& var);
 
+extern void
+get_dimensions (const octave_value& a, const octave_value& b,
+		const char *warn_for, int& nr, int& nc);
+
+extern void
+get_dimensions (const octave_value& a,
+		const char *warn_for, int& nr, int& nc);
+
 extern "C" void octave_usleep (unsigned int useconds);
 
 extern "C" int octave_strcasecmp (const char *s1, const char *s2);
 
 extern "C" int octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
 #endif
 
