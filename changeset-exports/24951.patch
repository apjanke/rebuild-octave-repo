# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1521213443 -3600
#      Fri Mar 16 16:17:23 2018 +0100
# Branch stable
# Node ID 27d68d7a482ccb2b7c863ae1c6696898e36a7191
# Parent  fb8d10420a75ff94172d34469572a216106c42f4
Change a test in tfqmr to prevent random failures (bug #53319).

* tfqmr.m: remove randomness from a test.

diff --git a/scripts/sparse/tfqmr.m b/scripts/sparse/tfqmr.m
--- a/scripts/sparse/tfqmr.m
+++ b/scripts/sparse/tfqmr.m
@@ -394,23 +394,29 @@ endfunction
 %! tol = 1e-8;
 %! maxit = 15;
 %!
 %! [x, flag, relres, iter, resvec] = tfqmr (@(x) afun (x, A), b,
 %!                                             tol, maxit, M1, M2);
 %! assert (x, ones (size (b)), 1e-7);
 
 %!test
+%! ## Jacobi preconditioner works
 %! n = 10;
 %! tol = 1e-8;
-%! a = (2 * sprand (n, n, .1) - 1) + 1i * (2 * sprand (n, n, .1) - 1);
-%! A = a + 2 * eye (n);
+%! A = hilb (n) + 1i * hilb (n);
+%! A(1,1) = 100;
+%! A(n, n) = 100;
 %! b = sum (A, 2);
+%! [x, flag, relres, iter, resvec] = tfqmr (A, b, tol);
+%! assert (x, ones (size (b)), 0.005);
+%! assert (iter, 8);
 %! [x, flag, relres, iter, resvec] = tfqmr (A, b, tol, [], diag (diag (A)));
-%! assert (x, ones (size (b)), 1e-7);
+%! assert (x, ones (size (b)), 0.002);
+%! assert (iter, 6);
 
 %!test
 %! ## Solve complex linear system
 %! A = [1 + 1i, 1 + 1i; 2 - 1i, 2 + 1i];
 %! b = A * [1; 1];
 %! [x, flag, relres, iter, resvec] = tfqmr (A, b, [], 3);
 %! assert (x, [1; 1], 1e-6);
 
