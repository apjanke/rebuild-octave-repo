# HG changeset patch
# User Rik <rik@octave.org>
# Date 1424223288 28800
#      Tue Feb 17 17:34:48 2015 -0800
# Node ID 67f2c76f9f4d82027908a62ce4d38a85e791fa74
# Parent  55a4173f1624d5e44ca24218634b408bb0502976
Remove unnecessary checking of error_state after is_string validation.

* data.cc (#NATIVE_REDUCTION, Fcumsum, Fprod, Fsum): Remove if (error_state)
check.

* debug.cc (Fdbstep): Remove if (error_state) check.

* dlmread.cc (Fdlmread): Remove if (error_state) check.

* graphics.cc (Fwaitfor): Remove if (error_state) check.

* lu.cc (Flu): Remove if (error_state) check.

* utils.cc (Ferrno): Remove if (error_state) check.

* variables.cc (is_valid_function): Remove if (error_state) check.

* fftw.cc (Ffftw): Remove if (error_state) check.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -899,26 +899,23 @@ either of the arguments is complex.\n\
  \
   bool isnative = false; \
   bool isdouble = false; \
   \
   if (nargin > 1 && args(nargin - 1).is_string ()) \
     { \
       std::string str = args(nargin - 1).string_value (); \
       \
-      if (! error_state) \
-        { \
-          if (str == "native") \
-            isnative = true; \
-          else if (str == "double") \
-            isdouble = true; \
-          else \
-            error ("sum: unrecognized string argument"); \
-          nargin --; \
-        } \
+      if (str == "native") \
+        isnative = true; \
+      else if (str == "double") \
+        isdouble = true; \
+      else \
+        error ("sum: unrecognized string argument"); \
+      nargin --; \
     } \
   \
   if (nargin == 1 || nargin == 2) \
     { \
       octave_value arg = args(0); \
  \
       int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
  \
@@ -1193,26 +1190,23 @@ See @code{sum} for an explanation of the
 
   bool isnative = false;
   bool isdouble = false;
 
   if (nargin > 1 && args(nargin - 1).is_string ())
     {
       std::string str = args(nargin - 1).string_value ();
 
-      if (! error_state)
-        {
-          if (str == "native")
-            isnative = true;
-          else if (str == "double")
-            isdouble = true;
-          else
-            error ("cumsum: unrecognized string argument");
-          nargin --;
-        }
+      if (str == "native")
+        isnative = true;
+      else if (str == "double")
+        isdouble = true;
+      else
+        error ("cumsum: unrecognized string argument");
+      nargin --;
     }
 
   if (error_state)
     return retval;
 
   if (nargin == 1 || nargin == 2)
     {
       octave_value arg = args(0);
@@ -1494,26 +1488,23 @@ in double precision even for single prec
 
   bool isnative = false;
   bool isdouble = false;
 
   if (nargin > 1 && args(nargin - 1).is_string ())
     {
       std::string str = args(nargin - 1).string_value ();
 
-      if (! error_state)
-        {
-          if (str == "native")
-            isnative = true;
-          else if (str == "double")
-            isdouble = true;
-          else
-            error ("prod: unrecognized type argument '%s'", str.c_str ());
-          nargin --;
-        }
+      if (str == "native")
+        isnative = true;
+      else if (str == "double")
+        isdouble = true;
+      else
+        error ("prod: unrecognized type argument '%s'", str.c_str ());
+      nargin --;
     }
 
   if (error_state)
     return retval;
 
   if (nargin == 1 || nargin == 2)
     {
       octave_value arg = args(0);
@@ -2986,28 +2977,25 @@ inputs, @qcode{\"extra\"} is the same as
   bool isnative = false;
   bool isdouble = false;
   bool isextra = false;
 
   if (nargin > 1 && args(nargin - 1).is_string ())
     {
       std::string str = args(nargin - 1).string_value ();
 
-      if (! error_state)
-        {
-          if (str == "native")
-            isnative = true;
-          else if (str == "double")
-            isdouble = true;
-          else if (str == "extra")
-            isextra = true;
-          else
-            error ("sum: unrecognized type argument '%s'", str.c_str ());
-          nargin --;
-        }
+      if (str == "native")
+        isnative = true;
+      else if (str == "double")
+        isdouble = true;
+      else if (str == "extra")
+        isextra = true;
+      else
+        error ("sum: unrecognized type argument '%s'", str.c_str ());
+      nargin --;
     }
 
   if (error_state)
     return retval;
 
   if (nargin == 1 || nargin == 2)
     {
       octave_value arg = args(0);
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1427,43 +1427,40 @@ execution to continue until the current 
       if (nargin > 1)
         print_usage ();
       else if (nargin == 1)
         {
           if (args(0).is_string ())
             {
               std::string arg = args(0).string_value ();
 
-              if (! error_state)
+              if (arg == "in")
+                {
+                  Vdebugging = false;
+
+                  tree_evaluator::dbstep_flag = -1;
+                }
+              else if (arg == "out")
                 {
-                  if (arg == "in")
-                    {
-                      Vdebugging = false;
+                  Vdebugging = false;
 
-                      tree_evaluator::dbstep_flag = -1;
-                    }
-                  else if (arg == "out")
+                  tree_evaluator::dbstep_flag = -2;
+                }
+              else
+                {
+                  int n = atoi (arg.c_str ());
+
+                  if (n > 0)
                     {
                       Vdebugging = false;
 
-                      tree_evaluator::dbstep_flag = -2;
+                      tree_evaluator::dbstep_flag = n;
                     }
                   else
-                    {
-                      int n = atoi (arg.c_str ());
-
-                      if (n > 0)
-                        {
-                          Vdebugging = false;
-
-                          tree_evaluator::dbstep_flag = n;
-                        }
-                      else
-                        error ("dbstep: invalid argument");
-                    }
+                    error ("dbstep: invalid argument");
                 }
             }
           else
             error ("dbstep: input argument must be a string");
         }
       else
         {
           Vdebugging = false;
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -209,18 +209,16 @@ fill empty fields.  The default is zero.
 
   std::istream *input = 0;
   std::ifstream input_file;
 
   if (args(0).is_string ())
     {
       // File name.
       std::string fname (args(0).string_value ());
-      if (error_state)
-        return retval;
 
       std::string tname = file_ops::tilde_expand (fname);
 
       input_file.open (tname.c_str (), std::ios::in);
 
       if (! input_file)
         {
           error ("dlmread: unable to open file '%s'", fname.c_str ());
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11630,23 +11630,20 @@ In all cases, typing CTRL-C stops progra
 
                   max_arg_index++;
                   if (args.length () > 2)
                     {
                       if (args(2).is_string ())
                         {
                           caseless_str s = args(2).string_value ();
 
-                          if (! error_state)
-                            {
-                              if (s.compare ("timeout"))
-                                timeout_index = 2;
-                              else
-                                max_arg_index++;
-                            }
+                          if (s.compare ("timeout"))
+                            timeout_index = 2;
+                          else
+                            max_arg_index++;
                         }
                       else
                         max_arg_index++;
                     }
 
                   Cell listener (1, max_arg_index >= 2 ? 5 : 4);
 
                   id = id_counter++;
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -157,23 +157,20 @@ information.\n\
 
   int n = 1;
   while (n < nargin && ! error_state)
     {
       if (args(n).is_string ())
         {
           std::string tmp = args(n++).string_value ();
 
-          if (! error_state)
-            {
-              if (tmp.compare ("vector") == 0)
-                vecout = true;
-              else
-                error ("lu: unrecognized string argument");
-            }
+          if (tmp.compare ("vector") == 0)
+            vecout = true;
+          else
+            error ("lu: unrecognized string argument");
         }
       else
         {
           Matrix tmp = args(n++).matrix_value ();
 
           if (! error_state)
             {
               if (!issparse)
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1030,29 +1030,26 @@ if @var{name} is not found.\n\
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (args(0).is_string ())
         {
           std::string nm = args(0).string_value ();
 
-          if (! error_state)
-            retval = octave_errno::lookup (nm);
-          else
-            error ("errno: expecting string argument");
+          retval = octave_errno::lookup (nm);
         }
       else
         {
           int val = args(0).int_value ();
 
           if (! error_state)
             retval = octave_errno::set (val);
           else
-            error ("errno: expecting integer argument");
+            error ("errno: argument must be string or integer");
         }
     }
   else if (nargin == 0)
     retval = octave_errno::get ();
   else
     print_usage ();
 
   return retval;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -123,20 +123,17 @@ is_valid_function (const octave_value& a
   octave_function *ans = 0;
 
   std::string fcn_name;
 
   if (arg.is_string ())
     {
       fcn_name = arg.string_value ();
 
-      if (! error_state)
-        ans = is_valid_function (fcn_name, warn_for, warn);
-      else if (warn)
-        error ("%s: expecting function name as argument", warn_for.c_str ());
+      ans = is_valid_function (fcn_name, warn_for, warn);
     }
   else if (warn)
     error ("%s: expecting function name as argument", warn_for.c_str ());
 
   return ans;
 }
 
 octave_function *
diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -139,206 +139,204 @@ used per default.\n\
       print_usage ();
       return retval;
     }
 
 #if defined (HAVE_FFTW)
   if (args(0).is_string ())
     {
       std::string arg0 = args(0).string_value ();
-      if (!error_state)
+
+      if (arg0 == "planner")
         {
-          if (arg0 == "planner")
+          if (nargin == 2)  //planner setter
             {
-              if (nargin == 2)  //planner setter
+              if (args(1).is_string ())
                 {
-                  if (args(1).is_string ())
+                  // Use STL function to convert to lower case
+                  std::transform (arg0.begin (), arg0.end (), arg0.begin (),
+                                  tolower);
+                  std::string arg1 = args(1).string_value ();
+                  if (!error_state)
                     {
-                      // Use STL function to convert to lower case
-                      std::transform (arg0.begin (), arg0.end (), arg0.begin (),
-                                      tolower);
-                      std::string arg1 = args(1).string_value ();
+                      std::transform (arg1.begin (), arg1.end (),
+                                      arg1.begin (), tolower);
+                      octave_fftw_planner::FftwMethod meth
+                        = octave_fftw_planner::UNKNOWN;
+                      octave_float_fftw_planner::FftwMethod methf
+                        = octave_float_fftw_planner::UNKNOWN;
+
+                      if (arg1 == "estimate")
+                        {
+                          meth = octave_fftw_planner::ESTIMATE;
+                          methf = octave_float_fftw_planner::ESTIMATE;
+                        }
+                      else if (arg1 == "measure")
+                        {
+                          meth = octave_fftw_planner::MEASURE;
+                          methf = octave_float_fftw_planner::MEASURE;
+                        }
+                      else if (arg1 == "patient")
+                        {
+                          meth = octave_fftw_planner::PATIENT;
+                          methf = octave_float_fftw_planner::PATIENT;
+                        }
+                      else if (arg1 == "exhaustive")
+                        {
+                          meth = octave_fftw_planner::EXHAUSTIVE;
+                          methf = octave_float_fftw_planner::EXHAUSTIVE;
+                        }
+                      else if (arg1 == "hybrid")
+                        {
+                          meth = octave_fftw_planner::HYBRID;
+                          methf = octave_float_fftw_planner::HYBRID;
+                        }
+                      else
+                        error ("fftw: unrecognized planner METHOD");
+
                       if (!error_state)
                         {
-                          std::transform (arg1.begin (), arg1.end (),
-                                          arg1.begin (), tolower);
-                          octave_fftw_planner::FftwMethod meth
-                            = octave_fftw_planner::UNKNOWN;
-                          octave_float_fftw_planner::FftwMethod methf
-                            = octave_float_fftw_planner::UNKNOWN;
-
-                          if (arg1 == "estimate")
-                            {
-                              meth = octave_fftw_planner::ESTIMATE;
-                              methf = octave_float_fftw_planner::ESTIMATE;
-                            }
-                          else if (arg1 == "measure")
-                            {
-                              meth = octave_fftw_planner::MEASURE;
-                              methf = octave_float_fftw_planner::MEASURE;
-                            }
-                          else if (arg1 == "patient")
-                            {
-                              meth = octave_fftw_planner::PATIENT;
-                              methf = octave_float_fftw_planner::PATIENT;
-                            }
-                          else if (arg1 == "exhaustive")
-                            {
-                              meth = octave_fftw_planner::EXHAUSTIVE;
-                              methf = octave_float_fftw_planner::EXHAUSTIVE;
-                            }
-                          else if (arg1 == "hybrid")
-                            {
-                              meth = octave_fftw_planner::HYBRID;
-                              methf = octave_float_fftw_planner::HYBRID;
-                            }
-                          else
-                            error ("fftw: unrecognized planner METHOD");
-
-                          if (!error_state)
-                            {
-                              meth = octave_fftw_planner::method (meth);
-                              octave_float_fftw_planner::method (methf);
+                          meth = octave_fftw_planner::method (meth);
+                          octave_float_fftw_planner::method (methf);
 
-                              if (meth == octave_fftw_planner::MEASURE)
-                                retval = octave_value ("measure");
-                              else if (meth == octave_fftw_planner::PATIENT)
-                                retval = octave_value ("patient");
-                              else if (meth == octave_fftw_planner::EXHAUSTIVE)
-                                retval = octave_value ("exhaustive");
-                              else if (meth == octave_fftw_planner::HYBRID)
-                                retval = octave_value ("hybrid");
-                              else
-                                retval = octave_value ("estimate");
-                            }
-                        }
-                    }
-                  else
-                    error ("fftw: planner expects a string value as METHOD");
-                }
-              else //planner getter
-                {
-                  octave_fftw_planner::FftwMethod meth =
-                    octave_fftw_planner::method ();
-
-                  if (meth == octave_fftw_planner::MEASURE)
-                    retval = octave_value ("measure");
-                  else if (meth == octave_fftw_planner::PATIENT)
-                    retval = octave_value ("patient");
-                  else if (meth == octave_fftw_planner::EXHAUSTIVE)
-                    retval = octave_value ("exhaustive");
-                  else if (meth == octave_fftw_planner::HYBRID)
-                    retval = octave_value ("hybrid");
-                  else
-                    retval = octave_value ("estimate");
-                }
-            }
-          else if (arg0 == "dwisdom")
-            {
-              if (nargin == 2)  //dwisdom setter
-                {
-                  if (args(1).is_string ())
-                    {
-                      // Use STL function to convert to lower case
-                      std::transform (arg0.begin (), arg0.end (), arg0.begin (),
-                                      tolower);
-                      std::string arg1 = args(1).string_value ();
-                      if (!error_state)
-                        {
-                          char *str = fftw_export_wisdom_to_string ();
-
-                          if (arg1.length () < 1)
-                            fftw_forget_wisdom ();
-                          else if (! fftw_import_wisdom_from_string (arg1.c_str ()))
-                            error ("fftw: could not import supplied WISDOM");
-
-                          if (!error_state)
-                            retval = octave_value (std::string (str));
-
-                          free (str);
+                          if (meth == octave_fftw_planner::MEASURE)
+                            retval = octave_value ("measure");
+                          else if (meth == octave_fftw_planner::PATIENT)
+                            retval = octave_value ("patient");
+                          else if (meth == octave_fftw_planner::EXHAUSTIVE)
+                            retval = octave_value ("exhaustive");
+                          else if (meth == octave_fftw_planner::HYBRID)
+                            retval = octave_value ("hybrid");
+                          else
+                            retval = octave_value ("estimate");
                         }
                     }
                 }
-              else //dwisdom getter
-                {
-                  char *str = fftw_export_wisdom_to_string ();
-                  retval = octave_value (std::string (str));
-                  free (str);
-                }
+              else
+                error ("fftw: planner expects a string value as METHOD");
             }
-          else if (arg0 == "swisdom")
+          else //planner getter
             {
-              //swisdom uses fftwf_ functions (float), dwisdom fftw_ (real)
-              if (nargin == 2)  //swisdom setter
+              octave_fftw_planner::FftwMethod meth =
+                octave_fftw_planner::method ();
+
+              if (meth == octave_fftw_planner::MEASURE)
+                retval = octave_value ("measure");
+              else if (meth == octave_fftw_planner::PATIENT)
+                retval = octave_value ("patient");
+              else if (meth == octave_fftw_planner::EXHAUSTIVE)
+                retval = octave_value ("exhaustive");
+              else if (meth == octave_fftw_planner::HYBRID)
+                retval = octave_value ("hybrid");
+              else
+                retval = octave_value ("estimate");
+            }
+        }
+      else if (arg0 == "dwisdom")
+        {
+          if (nargin == 2)  //dwisdom setter
+            {
+              if (args(1).is_string ())
                 {
-                  if (args(1).is_string ())
+                  // Use STL function to convert to lower case
+                  std::transform (arg0.begin (), arg0.end (), arg0.begin (),
+                                  tolower);
+                  std::string arg1 = args(1).string_value ();
+                  if (!error_state)
                     {
-                      // Use STL function to convert to lower case
-                      std::transform (arg0.begin (), arg0.end (), arg0.begin (),
-                                      tolower);
-                      std::string arg1 = args(1).string_value ();
-                      if (!error_state)
-                        {
-                          char *str = fftwf_export_wisdom_to_string ();
+                      char *str = fftw_export_wisdom_to_string ();
 
-                          if (arg1.length () < 1)
-                            fftwf_forget_wisdom ();
-                          else if (! fftwf_import_wisdom_from_string (arg1.c_str ()))
-                            error ("fftw: could not import supplied WISDOM");
+                      if (arg1.length () < 1)
+                        fftw_forget_wisdom ();
+                      else if (! fftw_import_wisdom_from_string (arg1.c_str ()))
+                        error ("fftw: could not import supplied WISDOM");
 
-                          if (!error_state)
-                            retval = octave_value (std::string (str));
+                      if (!error_state)
+                        retval = octave_value (std::string (str));
 
-                          free (str);
-                        }
+                      free (str);
                     }
                 }
-              else //swisdom getter
+            }
+          else //dwisdom getter
+            {
+              char *str = fftw_export_wisdom_to_string ();
+              retval = octave_value (std::string (str));
+              free (str);
+            }
+        }
+      else if (arg0 == "swisdom")
+        {
+          //swisdom uses fftwf_ functions (float), dwisdom fftw_ (real)
+          if (nargin == 2)  //swisdom setter
+            {
+              if (args(1).is_string ())
                 {
-                  char *str = fftwf_export_wisdom_to_string ();
-                  retval = octave_value (std::string (str));
-                  free (str);
+                  // Use STL function to convert to lower case
+                  std::transform (arg0.begin (), arg0.end (), arg0.begin (),
+                                  tolower);
+                  std::string arg1 = args(1).string_value ();
+                  if (!error_state)
+                    {
+                      char *str = fftwf_export_wisdom_to_string ();
+
+                      if (arg1.length () < 1)
+                        fftwf_forget_wisdom ();
+                      else if (! fftwf_import_wisdom_from_string (arg1.c_str ()))
+                        error ("fftw: could not import supplied WISDOM");
+
+                      if (!error_state)
+                        retval = octave_value (std::string (str));
+
+                      free (str);
+                    }
                 }
             }
-          else if (arg0 == "threads")
+          else //swisdom getter
             {
-              if (nargin == 2)  //threads setter
+              char *str = fftwf_export_wisdom_to_string ();
+              retval = octave_value (std::string (str));
+              free (str);
+            }
+        }
+      else if (arg0 == "threads")
+        {
+          if (nargin == 2)  //threads setter
+            {
+              if (args(1).is_real_scalar ())
                 {
-                  if (args(1).is_real_scalar ())
+                  int nthreads = args(1).int_value();
+                  if (nthreads >= 1)
                     {
-                      int nthreads = args(1).int_value();
-                      if (nthreads >= 1)
-                        {
 #if defined (HAVE_FFTW3_THREADS)
-                          octave_fftw_planner::threads (nthreads);
+                      octave_fftw_planner::threads (nthreads);
 #else
-                          gripe_disabled_feature ("fftw", "multithreaded FFTW");
+                      gripe_disabled_feature ("fftw", "multithreaded FFTW");
 #endif
 #if defined (HAVE_FFTW3F_THREADS)
-                          octave_float_fftw_planner::threads (nthreads);
+                      octave_float_fftw_planner::threads (nthreads);
 #else
-                          gripe_disabled_feature ("fftw", "multithreaded FFTW");
+                      gripe_disabled_feature ("fftw", "multithreaded FFTW");
 #endif
-                        }
-                      else
-                        error ("fftw: number of threads must be >=1");
                     }
                   else
-                    error ("fftw: setting threads needs one integer argument");
+                    error ("fftw: number of threads must be >=1");
                 }
-              else //threads getter
+              else
+                error ("fftw: setting threads needs one integer argument");
+            }
+          else //threads getter
 #if defined (HAVE_FFTW3_THREADS)
-                retval = octave_value (octave_fftw_planner::threads());
+            retval = octave_value (octave_fftw_planner::threads());
 #else
-                retval = 1;
+            retval = 1;
 #endif
-            }
-          else
-            error ("fftw: unrecognized argument");
         }
+      else
+        error ("fftw: unrecognized argument");
     }
   else
     error ("fftw: unrecognized argument");
 #else
 
   gripe_disabled_feature ("fftw", "the FFTW3 planner");
 
 #endif
