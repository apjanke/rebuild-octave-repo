# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1469040261 -7200
#      Wed Jul 20 20:44:21 2016 +0200
# Node ID 9babcd59767641549bc5ed7e12fe14a0c0f79276
# Parent  766f934db5689f4cb17198e432fc9ed7ae419a2d
Visual differences between Octave and Matlab (bug #48572)

* datetick.m: Use Matlab syntax in demo. Slight changes to docstring.
* shrinkfaces.m: Use syntax that works around Matlab bug.
* trisurf.m: Remove unnecessary formatting which was not compatible to
Matlab.

diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -13,29 +13,31 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} datetick ()
-## @deftypefnx {} {} datetick (@var{form})
-## @deftypefnx {} {} datetick (@var{axis}, @var{form})
+## @deftypefnx {} {} datetick (@var{date_format})
+## @deftypefnx {} {} datetick (@var{axis_str}, @var{date_format})
 ## @deftypefnx {} {} datetick (@dots{}, "keeplimits")
 ## @deftypefnx {} {} datetick (@dots{}, "keepticks")
 ## @deftypefnx {} {} datetick (@var{hax}, @dots{})
 ## Add date formatted tick labels to an axis.
 ##
-## The axis to apply the ticks to is determined by @var{axis} which can take
-## the values @qcode{"x"}, @qcode{"y"}, or @qcode{"z"}.  The default value is
-## @qcode{"x"}.
+## The axis to apply the ticks to is determined by @var{axis_str} which can
+## take the values @qcode{"x"}, @qcode{"y"}, or @qcode{"z"}.  The default
+## value is @qcode{"x"}.
 ##
-## The formatting of the labels is determined by the variable @var{form}, which
-## can either be a string or positive integer that @code{datestr} accepts.
+## The formatting of the labels is determined by the variable
+## @var{date_format}, which can either be a string or positive integer that
+## @code{datestr} accepts.
+##
 ## @seealso{datenum, datestr}
 ## @end deftypefn
 
 function datetick (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("datetick", varargin{:});
 
   oldfig = [];
@@ -76,17 +78,17 @@ endfunction
 %! yr = 1988:2:2002;
 %! yr = datenum (yr,1,1);
 %! pr = [12.1 13.3 12.6 13.1 13.3 14.1 14.4 15.2];
 %! plot (yr, pr, '-o');
 %! xlabel ('year');
 %! ylabel ('average price');
 %! ax = gca;
 %! set (ax, 'xtick', datenum (1990:5:2005,1,1));
-%! datetick (ax, 'x', 'keepticks');
+%! datetick ('x', 2, 'keepticks');
 %! set (ax, 'ytick', 12:16);
 
 ## Remove from test statistics.  No real tests possible.
 %!assert (1)
 
 function __datetick__ (varargin)
 
   keeplimits = false;
diff --git a/scripts/plot/draw/shrinkfaces.m b/scripts/plot/draw/shrinkfaces.m
--- a/scripts/plot/draw/shrinkfaces.m
+++ b/scripts/plot/draw/shrinkfaces.m
@@ -192,17 +192,17 @@ endfunction
 %! axis equal;
 %! grid on;
 
 %!demo
 %! clf;
 %! N = 10;  % N intervals per axis
 %! [x, y, z] = meshgrid (linspace (-4,4,N+1));
 %! val = x.^3 + y.^3 + z.^3;
-%! fv = isosurface (x, y, z, val, 3, z);
+%! fv = isosurface (x, y, z, val, 3, z, 'noshare');
 %!
 %! p = patch ('Faces', fv.faces, 'Vertices', fv.vertices, 'FaceVertexCData', ...
 %!            fv.facevertexcdata, 'FaceColor', 'interp', 'EdgeColor', 'black');
 %! axis equal;
 %! view (115, 30);
 %! drawnow;
 %! shrinkfaces (p, 0.6);
 
diff --git a/scripts/plot/draw/trisurf.m b/scripts/plot/draw/trisurf.m
--- a/scripts/plot/draw/trisurf.m
+++ b/scripts/plot/draw/trisurf.m
@@ -63,27 +63,19 @@ function h = trisurf (tri, x, y, z, vara
       endif
       c = c(:);
     elseif (rows (c) != numel (z) || columns (c) != 3)
       error ("trisurf: TrueColor C matrix must be 'numel (Z)' rows by 3 columns");
     endif
   else
     c = z(:);
   endif
-  ## FIXME: Is all this extra input parsing necessary?
-  ##        Is it for Matlab compatibility?
+  ## For Matlab compatibility:
   if (! any (strcmpi (varargin, "FaceColor")))
-    nfc = numel (varargin) + 1;
-    varargin(nfc+(0:1)) = {"FaceColor", "flat"};
-  else
-    nfc = find (any (strcmpi (varargin, "FaceColor")), 1);
-  endif
-  if (! any (strcmpi (varargin, "EdgeColor"))
-      && strcmpi (varargin{nfc+1}, "interp"))
-    varargin(end+(1:2)) = {"EdgeColor", "none"};
+    varargin(end+(1:2)) = {"FaceColor", "flat"};
   endif
 
   hax = newplot ();
 
   htmp = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
                 "FaceVertexCData", c, varargin{:});
 
   if (! ishold ())
