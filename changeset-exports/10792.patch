# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1279509474 -10800
#      Mon Jul 19 06:17:54 2010 +0300
# Node ID 91342260063e19510c2573f80652c42c58ac52a2
# Parent  3140cb7a05a1dc71d21f210e40bcc1fe7ef556e1
mouse rotation for fltk backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-07-18  Kai Habel <kai.habel@gmx.de>
+        * DLD-FUNCTIONS/fltk_backend.cc: Add mode for mouse rotation.
+        (view2status): new function
+        * src/graphics.cc: Remove limitations for zooming and translation.
+        (axes::properties::rotate_view): new function
+        
 2010-07-17  Rik <octave@nomad.inbox5.com>
 
         * DLD-FUNCTIONS/balance.cc, DLD-FUNCTIONS/ccolamd.cc,
           DLD-FUNCTIONS/cellfun.cc, DLD-FUNCTIONS/dasrt.cc,
           DLD-FUNCTIONS/dmperm.cc, DLD-FUNCTIONS/eigs.cc, DLD-FUNCTIONS/qz.cc,
           DLD-FUNCTIONS/rand.cc, DLD-FUNCTIONS/sparse.cc, 
           DLD-FUNCTIONS/sqrtm.cc, DLD-FUNCTIONS/symrcm.cc, dirfns.cc,
           file-io.cc, syscalls.cc: Spellcheck documentation
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -64,16 +64,18 @@ To initialize:
 #define FLTK_BACKEND_NAME "fltk"
 
 // Give FLTK no more than 0.01 sec to do its stuff.
 static double fltk_maxtime = 1e-2;
 
 const char* help_text = "\
 Keyboard Shortcuts\n\
 a - autoscale\n\
+p - pan/zoom\n\
+r - rotate\n\
 g - toggle grid\n\
 \n\
 Mouse\n\
 left drag - pan\n\
 mouse wheel - zoom\n\
 right drag - rectangle zoom\n\
 left double click - autoscale\n\
 ";
@@ -214,18 +216,17 @@ private:
 // Parameter controlling how fast we zoom when using the scrool wheel.
 static double wheel_zoom_speed = 0.05;
 
 class plot_window : public Fl_Window
 {
 public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
     : Fl_Window (xx, yy, ww, hh, "octave"), window_label (), shift (0),
-      fp (xfp), canvas (0), autoscale (0), togglegrid (0), help (0),
-      status (0)
+      fp (xfp), canvas (0), autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0), status (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     begin ();
     {
       canvas = new
         OpenGL_fltk (0, 0, ww , hh - status_h, number ());
 
@@ -240,26 +241,42 @@ public:
       togglegrid = new
         Fl_Button (status_h,
                    hh - status_h,
                    status_h,
                    status_h,
                    "G");
       togglegrid->callback (button_callback, static_cast<void*> (this));
 
+      panzoom = new
+        Fl_Button (2 * status_h,
+                   hh - status_h,
+                   status_h,
+                   status_h,
+                   "P");
+      panzoom->callback (button_callback, static_cast<void*> (this));
+      
+      rotate = new
+        Fl_Button (3 * status_h,
+                   hh - status_h,
+                   status_h,
+                   status_h,
+                   "R");
+      rotate->callback (button_callback, static_cast<void*> (this));
+      
       help = new
-        Fl_Button (2*status_h,
+        Fl_Button (4 * status_h,
                    hh - status_h,
                    status_h,
                    status_h,
                    "?");
       help->callback (button_callback, static_cast<void*> (this));
 
       status = new
-        Fl_Output (3*status_h,
+        Fl_Output (5 * status_h,
                    hh - status_h,
                    ww > 2*status_h ? ww - status_h : 0,
                    status_h, "");
 
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
@@ -274,21 +291,23 @@ public:
           canvas->make_current ();
         }
     }
     end ();
 
     status->show ();
     autoscale->show ();
     togglegrid->show ();
+    panzoom->show ();
+    rotate->show ();
 
     set_name ();
     resizable (canvas);
     size_range (4*status_h, 2*status_h);
-
+    gui_mode = 1;
   }
 
   ~plot_window (void)
   {
     canvas->hide ();
     status->hide ();
     this->hide ();
     delete canvas;
@@ -323,16 +342,20 @@ public:
 private:
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Mod keys status
   int shift;
 
+  // Interactive Mode
+  // 1...pan/zoom, 2...rotate/zoom
+  int gui_mode;
+  
   // Figure properties.
   figure::properties& fp;
 
   // Status area height.
   static const int status_h = 20;
 
   // Window callback.
   static void window_close (Fl_Widget*, void* data)
@@ -350,24 +373,32 @@ private:
 
   void button_press (Fl_Widget* widg)
   {
     if (widg == autoscale)
       axis_auto ();
 
     if (widg == togglegrid)
       toggle_grid ();
+    
+    if (widg == panzoom)
+      gui_mode = 1;
+    
+    if (widg == rotate)
+      gui_mode = 2;
 
     if (widg == help)
       fl_message ("%s", help_text);
   }
 
   OpenGL_fltk* canvas;
   Fl_Button* autoscale;
   Fl_Button* togglegrid;
+  Fl_Button* panzoom;
+  Fl_Button* rotate;
   Fl_Button* help;
   Fl_Output* status;
 
   void axis_auto (void)
   {
     octave_value_list args;
     args(0) = fp.get_currentaxes ().as_octave_value ();
     args(1) = "auto";
@@ -377,17 +408,17 @@ private:
 
   void toggle_grid (void)
   {
     octave_value_list args;
     args(0) = fp.get_currentaxes ().as_octave_value ();
     feval ("grid", args);
     mark_modified ();
   }
-
+  
   void pixel2pos 
   (graphics_handle ax, int px, int py, double& xx, double& yy) const
   {
     pixel2pos ( gh_manager::get_object (ax), px, py, xx, yy);
   }
 
   void pixel2pos 
   (graphics_object ax, int px, int py, double& xx, double& yy) const
@@ -436,29 +467,48 @@ private:
     pixel2status (gh_manager::get_object (ax), px0, py0, px1, py1);
   }
 
   void pixel2status (graphics_object ax, int px0, int py0,
                      int px1 = -1, int py1 = -1)
   {
     double x0, y0, x1, y1;
     std::stringstream cbuf;
-
+    cbuf.precision (4);
+    cbuf.width (6);
     pixel2pos (ax, px0, py0, x0, y0);
     cbuf << "[" << x0 << ", " << y0 << "]";
     if (px1 >= 0)
       {
         pixel2pos (ax, px1, py1, x1, y1);
         cbuf << " -> ["<< x1 << ", " << y1 << "]";
       }
 
     status->value (cbuf.str ().c_str ());
     status->redraw ();
   }
 
+  void view2status (graphics_object ax)
+  {
+     if (ax && ax.isa ("axes"))
+       {
+         axes::properties& ap = 
+           dynamic_cast<axes::properties&> (ax.get_properties ());
+         std::stringstream cbuf;
+         cbuf.precision (4);
+         cbuf.width (6);
+         Matrix v (1,2,0);
+         v = ap.get("view").matrix_value();
+         cbuf << "[azimuth: " << v(0) << ", elevation: " << v(1) << "]";
+    
+         status->value (cbuf.str ().c_str ());
+         status->redraw ();
+       }
+  }
+  
   void set_currentpoint (int px, int py)
   {
     Matrix pos (1,2,0);
     pos(0) = px;
     pos(1) = h () - status_h - py;
     fp.set_currentpoint (pos);
   }
 
@@ -578,16 +628,26 @@ private:
             case 'A':
               axis_auto ();
             break;
 
             case 'g':
             case 'G':
               toggle_grid ();
             break;
+
+            case 'p':
+            case 'P':
+              gui_mode = 1;
+            break;
+
+            case 'r':
+            case 'R':
+              gui_mode = 2;
+            break;
             }
         }
         break;
 
       case FL_KEYUP:
         {
           int key = Fl::event_key ();
 
@@ -619,43 +679,57 @@ private:
         fp.execute_windowbuttondownfcn ();
         
 
         if (Fl::event_button () == 1 || Fl::event_button () == 3)
           return 1;
         break;
 
       case FL_DRAG:
-        pixel2status (ax0, px0, py0, Fl::event_x (), Fl::event_y ());
         if (fp.get_windowbuttonmotionfcn ().is_defined ())
           {
             set_currentpoint (Fl::event_x (), Fl::event_y ());
             fp.execute_windowbuttonmotionfcn ();
           }
         
         if (Fl::event_button () == 1)
           {
             if (ax0 && ax0.isa ("axes"))
               {
+                if (gui_mode == 1)
+                  pixel2status (ax0, px0, py0, Fl::event_x (), Fl::event_y ());
+                else
+                  view2status (ax0);
                 axes::properties& ap = 
                   dynamic_cast<axes::properties&> (ax0.get_properties ());
               
                 double x0, y0, x1, y1;
+                Matrix pos = fp.get_position ().matrix_value ();
                 pixel2pos (ax0, px0, py0, x0, y0);
                 pixel2pos (ax0, Fl::event_x (), Fl::event_y (), x1, y1);
+                
+                if (gui_mode == 1)
+                  ap.translate_view (x0 - x1, y0 - y1);
+                else if (gui_mode == 2)
+                  {
+                    double daz, del;
+                    daz = (Fl::event_x () - px0) / pos(2) * 360;
+                    del = (Fl::event_y () - py0) / pos(3) * 360;
+                    ap.rotate_view (del, daz);
+                  }
+
                 px0 = Fl::event_x ();
                 py0 = Fl::event_y ();
-
-                ap.translate_view (x0 - x1, y0 - y1);
                 mark_modified ();
               }
             return 1;
           }
         else if (Fl::event_button () == 3)
           {
+            pixel2status (ax0, px0, py0, Fl::event_x (), Fl::event_y ());
             Matrix zoom_box (1,4,0);
             zoom_box (0) = px0;
             zoom_box (1) = py0;
             zoom_box (2) =  Fl::event_x ();
             zoom_box (3) =  Fl::event_y ();
             canvas->set_zoom_box (zoom_box);
             canvas->zoom (true);
             canvas->redraw ();
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4226,22 +4226,16 @@ axes::properties::zoom_about_point (doub
   get_children_limits (miny, maxy, min_pos_y, kids, 'y');
               
   // Perform the zooming
   xlims (0) = x + factor * (xlims (0) - x);
   xlims (1) = x + factor * (xlims (1) - x);
   ylims (0) = y + factor * (ylims (0) - y);
   ylims (1) = y + factor * (ylims (1) - y);
               
-  // Make sure we stay within the range og the plot
-  xlims (0) = force_in_range (xlims (0), minx, maxx);
-  xlims (1) = force_in_range (xlims (1), minx, maxx);
-  ylims (0) = force_in_range (ylims (0), miny, maxy);
-  ylims (1) = force_in_range (ylims (1), miny, maxy);
-
   zoom (xlims, ylims, push_to_zoom_stack);
 }
 
 void
 axes::properties::zoom (const Matrix& xl, const Matrix& yl, bool push_to_zoom_stack)
 {
   if (push_to_zoom_stack)
     {
@@ -4275,35 +4269,37 @@ axes::properties::translate_view (double
   double min_pos_x = octave_Inf;
   get_children_limits (minx, maxx, min_pos_x, kids, 'x');
         
   double miny = octave_Inf;
   double maxy = -octave_Inf;
   double min_pos_y = octave_Inf;
   get_children_limits (miny, maxy, min_pos_y, kids, 'y');
   
-  // Make sure we don't exceed the borders
-  if (delta_x > 0)
-    delta_x = std::min (xlims (1) + delta_x, maxx) - xlims (1);
-  else
-    delta_x = std::max (xlims (0) + delta_x, minx) - xlims (0);
-  xlims (0) = xlims (0) + delta_x;
-  xlims (1) = xlims (1) + delta_x;
-                
-  if (delta_y > 0)
-    delta_y = std::min (ylims (1) + delta_y, maxy) - ylims (1);
-  else
-    delta_y = std::max (ylims (0) + delta_y, miny) - ylims (0);
-  ylims (0) = ylims (0) + delta_y;
-  ylims (1) = ylims (1) + delta_y;
+  xlims (0) += delta_x;
+  xlims (1) += delta_x;
+  ylims (0) += delta_y;
+  ylims (1) += delta_y;
                 
   zoom (xlims, ylims, false);
 }
 
 void
+axes::properties::rotate_view (double delta_el, double delta_az)
+{
+  Matrix v = get_view ().matrix_value ();
+
+  v (1) += delta_el;
+  v (0) -= delta_az;
+
+  set_view(v);
+  update_transform();
+}
+
+void
 axes::properties::unzoom (void)
 {
   if (zoom_stack.size () >= 4)
     {
       ylim = zoom_stack.front ();
       zoom_stack.pop_front ();
       ylimmode = zoom_stack.front ();
       zoom_stack.pop_front ();
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2907,16 +2907,17 @@ public:
 
     ColumnVector coord2pixel (double x, double y, double z) const
     { return get_transform ().transform (x, y, z); }
 
     void zoom_about_point (double x, double y, double factor,
                            bool push_to_zoom_stack = true);
     void zoom (const Matrix& xl, const Matrix& yl, bool push_to_zoom_stack = true);
     void translate_view (double delta_x, double delta_y);
+    void rotate_view (double delta_az, double delta_el);
     void unzoom (void);
     void clear_zoom_stack (void);
 
   private:
     scaler sx, sy, sz;
     Matrix x_render, x_render_inv;
     Matrix x_gl_mat1, x_gl_mat2;
     Matrix x_zlim;
