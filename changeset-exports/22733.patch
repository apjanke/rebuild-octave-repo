# HG changeset patch
# User Rik <rik@octave.org>
# Date 1478537198 28800
#      Mon Nov 07 08:46:38 2016 -0800
# Node ID c426d8ec521dd3a5be2130fc443ed7cde97bb34c
# Parent  2cc35915bdc03aff766e748aa03032027734bbae
# Parent  2d74b4653e5d161e86f9454daaccbfe3b0ba4999
maint: Periodic merge of stable to default.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -44,16 +44,17 @@ see <http://www.gnu.org/licenses/>.
 #include <io.h>
 #include <stdio.h>
 #include <stdarg.h>
 #define WIN32_LEAN_AND_MEAN
 #if ! defined (_WIN32_WINNT) && ! defined (NTDDI_VERSION)
 #define _WIN32_WINNT 0x0500
 #endif
 #include <windows.h>
+#include <versionhelpers.h>
 #include <cstring>
 #include <csignal>
 #include <limits>
 
 #include "QWinTerminalImpl.h"
 #include "QTerminalColors.h"
 
 // Uncomment to log activity to LOGFILENAME
@@ -378,18 +379,21 @@ QConsolePrivate::QConsolePrivate (QWinTe
 
   QGridLayout* l = new QGridLayout (parent);
   l->setContentsMargins (0, 0, 0, 0);
   l->setSpacing (0);
   l->addWidget (m_consoleView, 0, 0);
   l->addWidget (m_horizontalScrollBar, 1, 0);
   l->addWidget (m_verticalScrollBar, 0, 1);
 
-  SetConsoleCP (65001);
-  SetConsoleOutputCP (65001);
+  if (IsWindows7OrGreater ())
+    {
+      SetConsoleCP (65001);
+      SetConsoleOutputCP (65001);
+    }
 
   // Choose 15 (0xF) as index into the Windows console color map for the
   // background and 0 (0x0) as the index for the foreground.  This
   // selection corresponds to the indices used in the foregroundColor,
   // setForegroundColor, backgroundColor, and SetBackgroundColor
   // functions.
 
   SetConsoleTextAttribute (m_stdOut, 0xF0);
diff --git a/liboctave/wrappers/octave-popen2.c b/liboctave/wrappers/octave-popen2.c
--- a/liboctave/wrappers/octave-popen2.c
+++ b/liboctave/wrappers/octave-popen2.c
@@ -201,17 +201,17 @@ octave_popen2 (const char *cmd, char *co
                 perror ("popen2 (child)");
             }
           else
             perror ("popen2 (child)");
         }
       else
         perror ("popen2 (child)");
 
-      exit (0);
+      _exit (127);
     }
   else if (pid > 0)
     {
       // Parent process
 
       close (child_stdin[0]);
       close (child_stdout[1]);
 
