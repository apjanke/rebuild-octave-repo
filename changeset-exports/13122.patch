# HG changeset patch
# User Carlo de Falco <kingcrimson@tiscali.it>
# Date 1315734022 -7200
#      Sun Sep 11 11:40:22 2011 +0200
# Node ID f80273b38cc4a2b2e1cf9572fe2508191eb61add
# Parent  390add5001070633c1b77b70072eed75c176ad40
more fixes to __makeinfo__

* __makeinfo__.m: fix handling of multiple @seealso macros
and a few style fixes.

diff --git a/scripts/help/__makeinfo__.m b/scripts/help/__makeinfo__.m
--- a/scripts/help/__makeinfo__.m
+++ b/scripts/help/__makeinfo__.m
@@ -52,55 +52,57 @@
 ## @end example
 ##
 ## @noindent
 ## otherwise.
 ##
 ## The optional output argument @var{status} contains the exit status of the
 ## @code{makeinfo} program as returned by @code{system}.
 
-function [retval, status] = __makeinfo__ (text, output_type = "plain text", see_also = [])
+function [retval, status] = __makeinfo__ (text, output_type = "plain text", fsee_also)
 
   ## Check input
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
-  if (!ischar (text))
+  if (! ischar (text))
     error ("__makeinfo__: first input argument must be a string");
   endif
 
-  if (!ischar (output_type))
+  if (! ischar (output_type))
     error ("__makeinfo__: second input argument must be a string");
   endif
 
-  if (isempty (see_also))  
+  if (nargin < 3)  
     if (strcmpi (output_type, "plain text"))
-      see_also = @simple_see_also;
+      fsee_also = @(T) strcat ...
+          ("\nSee also:", sprintf (" %s,", T{:})(1:end-1), "\n");
     else    
-      see_also = @simple_see_also_with_refs;
+      fsee_also = @(T) strcat ...
+          ("\nSee also:", sprintf (" @ref{%s},", T{:})(1:end-1), "\n");
     endif
   endif
 
-  if (!isa (see_also, "function_handle"))
+  if (! isa (fsee_also, "function_handle"))
     error (["__makeinfo__: third input argument must ", ...
             "be the empty matrix, or a function handle"]);
   endif
   
 
   ## It seems like makeinfo sometimes gets angry if the first character
   ## on a line is a space, so we remove these.
   text = strrep (text, "\n ", "\n"); 
 
   ## Handle @seealso macro
   see_also_pat = '@seealso *\{([^}]*)\}';
   args = regexp (text, see_also_pat, 'tokens');
   for ii = 1:numel (args)
-    expanded = feval (see_also, strtrim (strsplit (args{ii}{:}, ',', true)));
-    text = regexprep (text, see_also_pat, expanded);
+    expanded = fsee_also (strtrim (strsplit (args{ii}{:}, ',', true)));
+    text = regexprep (text, see_also_pat, expanded, 'once');
   endfor
 
   ## Handle @nospell macro
   text = regexprep (text, '@nospell *\{([^}]*)\}', "$1");
 
   if (strcmpi (output_type, "texinfo"))
     status = 0;
     retval = text;
@@ -108,17 +110,17 @@ function [retval, status] = __makeinfo__
   endif
 
   ## Create the final TeXinfo input string
   text = sprintf ("\\input texinfo\n\n%s\n\n@bye\n", text);
 
   unwind_protect
     ## Write Texinfo to tmp file
     template = "octave-help-XXXXXX";
-    [fid, name, msg] = mkstemp (fullfile (P_tmpdir, template), true);
+    [fid, name] = mkstemp (fullfile (P_tmpdir, template), true);
     if (fid < 0)
       error ("__makeinfo__: could not create temporary file");
     endif
     fwrite (fid, text);
     fclose (fid);
 
     ## Take action depending on output type
     switch (lower (output_type))
@@ -137,21 +139,11 @@ function [retval, status] = __makeinfo__
 
   unwind_protect_cleanup
     if (exist (name, "file"))
       delete (name);
     endif
   end_unwind_protect
 endfunction
 
-function expanded = simple_see_also_with_refs (args)
-  expanded = strcat ("\nSee also:", sprintf (" @ref{%s},", args {:}));
-  expanded = strcat (expanded (1:end-1), "\n\n");
-endfunction
-
-function expanded = simple_see_also (args)
-  expanded = strcat ("\nSee also:", sprintf (" %s,", args {:}));
-  expanded = strcat (expanded (1:end-1), "\n\n");
-endfunction
-
 ## No test needed for internal helper function.
 %!assert (1)
 
