# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420833781 18000
#      Fri Jan 09 15:03:01 2015 -0500
# Node ID e75df9e43e6303cacb78b24ede938e4cb0c6ab2c
# Parent  701b43ce446730d4798e10ff85e1e04e6825df6d
disable Octave audio callback functions

* audiodevinfo.cc (F__recorder_audiorecorder__,
F__player_audioplayer__): Error if argument is a function.
* audioplayer.m, audiorecorder.m: Remove function callbacks from
documentation.  Comment out callback tests.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -1827,18 +1827,21 @@ Undocumented internal function.\n\
   int offset = 0;
 
   if (nargin > 0)
     {
       bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
 
       if (is_function)
         {
-          recorder->octave_callback_function = args(0).function_value ();
-          offset = 1;
+          error ("audioplayer: callbacks not yet implemented");
+          return retval;
+
+          // recorder->octave_callback_function = args(0).function_value ();
+          // offset = 1;
         }
     }
 
   switch (nargin - offset)
     {
     case 3:
       recorder->set_fs (args(0 + offset).int_value ());
       recorder->set_nbits (args(1 + offset).int_value ());
@@ -2348,17 +2351,22 @@ Undocumented internal function.\n\
       return retval;
     }
 
   audioplayer* recorder = new audioplayer ();
 
   bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
 
   if (is_function)
-    recorder->set_y (args(0).function_value ());
+    {
+      error ("audioplayer: callbacks not yet implemented");
+      return retval;
+
+      // recorder->set_y (args(0).function_value ());
+    }
   else
     recorder->set_y (args(0));
 
   recorder->set_fs (args(1).int_value ());
 
   switch (nargin)
     {
     case 3:
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -15,24 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
-## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{function}, @dots{})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
 ## Create an audioplayer object that will play back data @var{y} at sample
 ## rate @var{fs}.  The optional arguments @var{nbits}, and @var{id}
 ## specify the bit depth and player device id, respectively.  Device IDs
 ## may be found using the audiodevinfo function.
-## Given a function handle, use that function to process the audio.
 ## Given an audioplayer object, use the data from the object to
 ## initialize the player.
 ## @end deftypefn
 ##
 ## The signal @var{y} can be a vector or a two dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
@@ -40,17 +38,26 @@
 ##
 ## @example
 ## @group
 ## y = randn (2, 44100) - 0.5;
 ## player = audioplayer (y, 44100, 8);
 ## play (player);
 ## @end group
 ## @end example
+
+## FIXME: callbacks don't work properly, apparently because portaudio
+## will execute the callbacks in a separate thread, and calling Octave
+## functions in a separate thread which is likely to cause trouble with
+## all of Octave's global data...
 ##
+## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{function}, @dots{})
+##
+## Given a function handle, use that function to process the audio.
+#
 ## The following example will create and register a callback that generates
 ## a sine wave on both channels.
 ##
 ## @example
 ## @group
 ## function [ sound, status ] = callback_sine (frames)
 ##   global lphase = 0.0;
 ##   global rphase = 0.0;
@@ -65,17 +72,16 @@
 ##   lphase = lphase + nl;
 ##   rphase = rphase + nr;
 ## endfunction
 ## player = audioplayer (@@callback_sine, 44100);
 ## play (player);
 ## # play for as long as you want
 ## stop (player);
 ## @end group
-## @end example
 
 function player = audioplayer (varargin)
 
   if (nargin < 1 || nargin > 4
       || (nargin < 2 && (isa (varargin{1}, "function_handle")
                          || ischar (varargin{1}))))
     print_usage ();
   endif
@@ -171,26 +177,26 @@ endfunction
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! player.SampleRate = 8000;
 %! player.Tag = "tag";
 %! player.UserData = [1, 2; 3, 4];
 %! properties = get (player, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
-%!function [sound, status] = callback (samples)
-%!  sound = rand (samples, 2) - 0.5;
-%!  status = 0;
-%!endfunction
+#%!function [sound, status] = callback (samples)
+#%!  sound = rand (samples, 2) - 0.5;
+#%!  status = 0;
+#%!endfunction
 
-%!testif HAVE_PORTAUDIO
-%! player = audioplayer (@callback, 44100);
-%! play (player);
-%! sleep (2);
-%! stop (player);
-%! assert (1);
+#%!testif HAVE_PORTAUDIO
+#%! player = audioplayer (@callback, 44100);
+#%! play (player);
+#%! sleep (2);
+#%! stop (player);
+#%! assert (1);
 
-%!testif HAVE_PORTAUDIO
-%! player = audioplayer ("callback", 44100, 16);
-%! play (player);
-%! sleep (2);
-%! stop (player);
-%! assert (1);
+#%!testif HAVE_PORTAUDIO
+#%! player = audioplayer ("callback", 44100, 16);
+#%! play (player);
+#%! sleep (2);
+#%! stop (player);
+#%! assert (1);
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -15,24 +15,31 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{recorder} =} audiorecorder ()
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
-## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{function}, @dots{})
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
 ## sample rate.  The optional arguments @var{fs}, @var{nbits},
 ## @var{channels}, and @var{id} specify the sample rate, bit depth,
 ## number of channels and recording device id, respectively.  Device IDs
 ## may be found using the audiodevinfo function.
+## @end deftypefn
+
+## FIXME: callbacks don't work properly, apparently because portaudio
+## will execute the callbacks in a separate thread, and calling Octave
+## functions in a separate thread which is likely to cause trouble with
+## all of Octave's global data...
+##
+## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{function}, @dots{})
+##
 ## Given a function handle, use that function to process the audio.
-## @end deftypefn
 
 function recorder = audiorecorder (varargin)
 
   if (nargin > 5)
     print_usage ();
   endif
 
   if (nargin > 0 && ischar (varargin{1}))
