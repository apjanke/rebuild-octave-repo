# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1406219865 -3600
#      Thu Jul 24 17:37:45 2014 +0100
# Branch stable
# Node ID 87cba451fd5eed2f0105b5be67fe57a708e1aac4
# Parent  ab5983dc058743b5380c7c03c8b75a0a81f3db3b
__magick_read__.cc: fix png check for image class in older GM (bug #42834).

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -69,25 +69,42 @@ along with Octave; see the file COPYING.
 // 1) A grayscale jpeg image can report being indexed even though the
 //    JPEG format has no support for indexed images. We can at least
 //    fix this one.
 // 2) A PNG file is only an indexed image if color type orig is 3 (value comes
 //    from libpng)
 static bool
 is_indexed (const Magick::Image& img)
 {
-  bool retval = false;
-  const std::string format = img.magick ();
-  if (img.classType () == Magick::PseudoClass
-      && format != "JPEG"
-      && (format != "PNG"
-          || const_cast<Magick::Image&> (img).attribute ("PNG:IHDR.color-type-orig") == "3"))
-    retval = true;
-
-  return retval;
+  bool indexed = (img.classType () == Magick::PseudoClass);
+  // Our problem until now is non-indexed images, being represented as indexed
+  // by GM. The following attempts educated guesses to undo this optimization.
+  if (indexed)
+    {
+      const std::string fmt = img.magick ();
+      if (fmt == "JPEG")
+        // The JPEG format does not support indexed images, but GM sometimes
+        // reports grayscale JPEG as indexed. Always false for JPEG.
+        indexed = false;
+      else if (fmt == "PNG")
+        {
+          // Newer versions of GM (at least does not happens with 1.3.16) will
+          // store values from the underlying library as image attributes. In
+          // the case of PNG files, this is libpng where an indexed image will
+          // always have a value of 3 for "color-type-orig". This property
+          // always has a value in libpng so if we get nothing, we assume this
+          // GM version does not store them and we have to go with whatever
+          // GM PseudoClass says.
+          const std::string color_type =
+            const_cast<Magick::Image&> (img).attribute ("PNG:IHDR.color-type-orig");
+          if (! color_type.empty() && color_type != "3")
+            indexed = false;
+        }
+    }
+  return indexed;
 }
 
 //  The depth from depth() is not always correct for us but seems to be the
 //  best value we can get. For example, a grayscale png image with 1 bit
 //  per channel should return a depth of 1 but instead we get 8.
 //  We could check channelDepth() but then, which channel has the data
 //  is not straightforward. So we'd have to check all
 //  the channels and select the highest value. But then, I also
