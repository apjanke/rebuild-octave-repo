# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1215640990 14400
#      Wed Jul 09 18:03:10 2008 -0400
# Node ID f46e73bcb85b9d9f2ccf355eab5ded747875ea53
# Parent  75df1f0b4c9da9a130e655a0fb096b049bd4a494
toplev.cc (main_loop): undo previous change; input.cc (get_debug_input): don't delete global_command here

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-07-09  John W. Eaton  <jwe@octave.org>
 
+	* input.cc (get_debug_input): Don't delete global_command here.
+	* toplev.cc (main_loop): Undo previous change.
+
 	* toplev.h (octave_call_stack::instance_ok): Push top scope when
 	creating instance.
 
 	* DLD-FUNCTIONS/inv.cc (Finv): Avoid GCC warning.
 
 	* DLD-FUNCTIONS/expm.cc (Fexpm): Avoid GCC warning.
 
 	* ov-fcn-inline.cc (octave_fcn_inline::load_ascii): Avoid GCC warning.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -626,34 +626,38 @@ get_debug_input (const std::string& prom
       reset_parser ();
 
       // Save current value of global_command.
       unwind_protect_ptr (global_command);
 
       // This is the same as yyparse in parse.y.
       int retval = octave_parse ();
 
-      tree_statement_list *command = global_command;
+      if (retval == 0 && global_command)
+	{
+	  global_command->eval ();
+
+	  // FIXME -- To avoid a memory leak, global_command should be
+	  // deleted, I think.  But doing that here causes trouble if
+	  // an error occurs while executing a debugging command
+	  // (dbstep, for example). It's not clear to me why that
+	  // happens.
+	  //
+	  // delete global_command;
+	  //
+	  // global_command = 0;
+
+	  if (octave_completion_matches_called)
+	    octave_completion_matches_called = false;	    
+	}
 
       // Restore previous value of global_command.
       unwind_protect::run ();
 
-      if (retval == 0 && command)
-	{
-	  command->eval ();
-
-	  delete command;
-
-	  command = 0;
-
-	  OCTAVE_QUIT;
-
-	  if (octave_completion_matches_called)
-	    octave_completion_matches_called = false;	    
-	}
+      OCTAVE_QUIT;
     }
 
   unwind_protect::run_frame ("get_debug_input");
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -538,51 +538,41 @@ main_loop (void)
   octave_signal_hook = octave_signal_handler;
   octave_interrupt_hook = unwind_protect::run_all;
   octave_bad_alloc_hook = unwind_protect::run_all;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
-  unwind_protect::begin_frame ("main_loop");
-
   // The big loop.
 
   int retval = 0;
   do
     {
       try
 	{
 	  symbol_table::reset_scope ();
 
 	  reset_error_handler ();
 
 	  reset_parser ();
 
-	  // Save current value of global_command.
-	  unwind_protect_ptr (global_command);
-
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
 
-	  tree_statement_list *command = global_command;
-
-	  // Restore previous value of global_command.
-	  unwind_protect::run ();
-
 	  if (retval == 0)
 	    {
-	      if (command)
+	      if (global_command)
 		{
-		  command->eval ();
+		  global_command->eval ();
 
-		  delete command;
+		  delete global_command;
 
-		  command = 0;
+		  global_command = 0;
 
 		  OCTAVE_QUIT;
 
 		  if (! (interactive || forced_interactive))
 		    {
 		      bool quit = (tree_return_command::returning
 				   || tree_break_command::breaking);
 
@@ -627,18 +617,16 @@ main_loop (void)
 	  recover_from_exception ();
 	  std::cerr
 	    << "error: memory exhausted or requested size too large for range of Octave's index type -- trying to return to prompt"
 	    << std::endl;
 	}
     }
   while (retval == 0);
 
-  unwind_protect::run_frame ("main_loop");
-
   return retval;
 }
 
 // Fix up things before exiting.
 
 void
 clean_up_and_exit (int retval)
 {
