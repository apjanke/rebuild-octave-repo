# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1385321000 18000
#      Sun Nov 24 14:23:20 2013 -0500
# Node ID 260b44c0ed690b8d8fe678e3b62124917228fd32
# Parent  ea1db0ede4ce0a0ddcb628dc28e4af00784c4a21
improve messages when reading or writing history fails (bug #40443)

* cmd-hist.h, cmd-hist.cc (command_history::error): New arg, MSG.
If MSG is not empty, use it as a prefix for the strerror message.
(gnu_history::do_read, gnu_history::do_read_range,
gnu_history::do_write, gnu_history::do_append): Call error with
additional message.

diff --git a/liboctave/util/cmd-hist.cc b/liboctave/util/cmd-hist.cc
--- a/liboctave/util/cmd-hist.cc
+++ b/liboctave/util/cmd-hist.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstring>
 
 #include <iostream>
+#include <sstream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
@@ -297,17 +298,21 @@ gnu_history::do_goto_mark (void)
 void
 gnu_history::do_read (const std::string& f, bool must_exist)
 {
   if (! f.empty ())
     {
       int status = ::octave_read_history (f.c_str ());
 
       if (status != 0 && must_exist)
-        error (status);
+        {
+          std::string msg = "reading file '" + f + "'";
+
+          error (status, msg);
+        }
       else
         {
           lines_in_file = do_where ();
 
           ::octave_using_history ();
         }
     }
   else
@@ -321,17 +326,23 @@ gnu_history::do_read_range (const std::s
   if (from < 0)
     from = lines_in_file;
 
   if (! f.empty ())
     {
       int status = ::octave_read_history_range (f.c_str (), from, to);
 
       if (status != 0 && must_exist)
-        error (status);
+        {
+          std::ostringstream buf;
+          buf << "reading lines " << from << " to " << to
+              << " from file '" << f << "'";
+
+          error (status, buf.str ());
+        }
       else
         {
           lines_in_file = do_where ();
 
           ::octave_using_history ();
         }
     }
   else
@@ -348,17 +359,21 @@ gnu_history::do_write (const std::string
       if (f.empty ())
         f = xfile;
 
       if (! f.empty ())
         {
           int status = ::octave_write_history (f.c_str ());
 
           if (status != 0)
-            error (status);
+            {
+              std::string msg = "writing file '" + f + "'";
+
+              error (status, msg);
+            }
         }
       else
         error ("gnu_history::write: missing file name");
     }
 }
 
 void
 gnu_history::do_append (const std::string& f_arg)
@@ -387,17 +402,21 @@ gnu_history::do_append (const std::strin
                       tem = gnulib::open (f.c_str (), O_CREAT, 0666);
                       gnulib::close (tem);
                     }
 
                   int status
                     = ::octave_append_history (lines_this_session, f.c_str ());
 
                   if (status != 0)
-                    error (status);
+                    {
+                      std::string msg = "appending to file '" + f_arg + "'";
+
+                      error (status, msg);
+                    }
                   else
                     lines_in_file += lines_this_session;
 
                   lines_this_session = 0;
                 }
               else
                 error ("gnu_history::append: missing file name");
             }
@@ -990,18 +1009,22 @@ command_history::do_clean_up_and_save (c
         f = xfile;
 
       if (f.empty ())
         error ("command_history::clean_up_and_save: missing file name");
     }
 }
 
 void
-command_history::error (int err_num) const
+command_history::error (int err_num, const std::string& msg) const
 {
-  (*current_liboctave_error_handler) ("%s", gnulib::strerror (err_num));
+  if (msg.empty ())
+    (*current_liboctave_error_handler) ("%s", gnulib::strerror (err_num));
+  else
+    (*current_liboctave_error_handler) ("%s: %s", msg.c_str (),
+                                        gnulib::strerror (err_num));
 }
 
 void
 command_history::error (const std::string& s) const
 {
   (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
diff --git a/liboctave/util/cmd-hist.h b/liboctave/util/cmd-hist.h
--- a/liboctave/util/cmd-hist.h
+++ b/liboctave/util/cmd-hist.h
@@ -196,17 +196,17 @@ protected:
   virtual string_vector do_list (int, bool) const;
 
   virtual std::string do_get_entry (int) const;
 
   virtual void do_replace_entry (int, const std::string&);
 
   virtual void do_clean_up_and_save (const std::string&, int);
 
-  void error (int) const;
+  void error (int, const std::string& msg = "") const;
 
   void error (const std::string&) const;
 
   // TRUE means we have initialized the history file name and number of
   // lines to save.
   bool initialized;
 
   // TRUE means we are ignoring new additions.
