# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1221816591 -7200
#      Fri Sep 19 11:29:51 2008 +0200
# Branch release-3-0-x
# Node ID 0b9c56b6bf0e28e9480550317e52cdf7ed88c490
# Parent  43fccbab412a97ce4a82cfec816c9c6545976f51
partially sync Matrix::expm and ComplexMatrix::expm with development repo

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2891,16 +2891,19 @@ ComplexMatrix::expm (void) const
 
   // Check whether we need to square at all.
 
   if (sqpow < 0)
     sqpow = 0;
 
   if (sqpow > 0)
     {
+      if (sqpow > 1023)
+	sqpow = 1023;
+
       double scale_factor = 1.0;
       for (octave_idx_type i = 0; i < sqpow; i++)
 	scale_factor *= 2.0;
 
       m = m / scale_factor;
     }
 
   // npp, dpp: pade' approx polynomial matrices.
@@ -2937,18 +2940,21 @@ ComplexMatrix::expm (void) const
   for (octave_idx_type j = 0; j < nc; j++)
     {
       npp.elem (j, j) += 1.0;
       dpp.elem (j, j) += 1.0;
     }
 
   // Compute pade approximation = inverse (dpp) * npp.
 
-  retval = dpp.solve (npp);
-	
+  retval = dpp.solve (npp, info);
+
+  if (info < 0)
+    return retval;
+
   // Reverse preconditioning step 3: repeated squaring.
 
   while (sqpow)
     {
       retval = retval * retval;
       sqpow--;
     }
 
@@ -2972,22 +2978,23 @@ ComplexMatrix::expm (void) const
     {
       octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm(swapidx);
       iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
+  Array<octave_idx_type> invpvec (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
 
-  tmpMat = retval;
+  ComplexMatrix tmpMat = retval;
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
   OCTAVE_QUIT;
 
   for (octave_idx_type i = 0; i < nc; i++)
     iperm(i) = i;  // initialize to identity permutation
@@ -2997,23 +3004,22 @@ ComplexMatrix::expm (void) const
     {
       octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm(swapidx);
       iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
-  Array<octave_idx_type> invpvec (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
 
-  ComplexMatrix tmpMat = retval;
+  tmpMat = retval;
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
   // Reverse preconditioning step 1: fix trace normalization.
 
   return exp (trshift) * retval;
 }
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2518,20 +2518,23 @@ Matrix::expm (void) const
   
   // Check whether we need to square at all.
   
   if (sqpow < 0)
     sqpow = 0;
   
   if (sqpow > 0)
     {
+      if (sqpow > 1023)
+	sqpow = 1023;
+
       double scale_factor = 1.0;
       for (octave_idx_type i = 0; i < sqpow; i++)
 	scale_factor *= 2.0;
-  
+
       m = m / scale_factor;
     }
   
   // npp, dpp: pade' approx polynomial matrices.
   
   Matrix npp (nc, nc, 0.0);
   double *pnpp = npp.fortran_vec ();
   Matrix dpp = npp;
@@ -2565,17 +2568,20 @@ Matrix::expm (void) const
     {
       npp.elem (j, j) += 1.0;
       dpp.elem (j, j) += 1.0;
     }
   
   // Compute pade approximation = inverse (dpp) * npp.
 
   retval = dpp.solve (npp, info);
-  
+
+  if (info < 0)
+    return retval;
+
   // Reverse preconditioning step 3: repeated squaring.
   
   while (sqpow)
     {
       retval = retval * retval;
       sqpow--;
     }
   
@@ -2597,22 +2603,23 @@ Matrix::expm (void) const
     {
       octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm (swapidx);
       iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
+  Array<octave_idx_type> invpvec (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
  
-  tmpMat = retval;
+  Matrix tmpMat = retval;
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
   OCTAVE_QUIT;
 
   for (octave_idx_type i = 0; i < nc; i++)
     iperm(i) = i;  // identity permutation
@@ -2622,23 +2629,22 @@ Matrix::expm (void) const
     {
       octave_idx_type swapidx = static_cast<octave_idx_type> (dpermute(i)) - 1;
       octave_idx_type tmp = iperm(i);
       iperm(i) = iperm(swapidx);
       iperm(swapidx) = tmp;
     }
 
   // construct inverse balancing permutation vector
-  Array<octave_idx_type> invpvec (nc);
   for (octave_idx_type i = 0; i < nc; i++)
     invpvec(iperm(i)) = i;     // Thanks to R. A. Lippert for this method
 
   OCTAVE_QUIT;
  
-  Matrix tmpMat = retval;
+  tmpMat = retval;
   for (octave_idx_type i = 0; i < nc; i++)
     for (octave_idx_type j = 0; j < nc; j++)
       retval(i,j) = tmpMat(invpvec(i),invpvec(j));
 
   // Reverse preconditioning step 1: fix trace normalization.
   
   if (trshift > 0.0)
     retval = exp (trshift) * retval;
