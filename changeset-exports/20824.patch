# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449596063 18000
#      Tue Dec 08 12:34:23 2015 -0500
# Node ID 8848e35e5ef8bf2632fcf2d74ddb35ab719b9190
# Parent  40fc94a24a97565edc39887885966f0e9de66863
better handling of exceptions in unwind-protect blocks

* pt-eval.h (tree_evaluator::unwind_protect_exception):
Delete static variable and all uses.
* pt-eval.cc (tree_evaluator::do_unwind_protect_cleanup):
If an exception happens in the cleanup code, rethrow that exception.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -55,18 +55,16 @@ tree_evaluator *current_evaluator = &std
 int tree_evaluator::dbstep_flag = 0;
 
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
 bool tree_evaluator::quiet_breakpoint_flag = false;
 
-bool tree_evaluator::unwind_protect_exception = false;
-
 tree_evaluator::stmt_list_type tree_evaluator::statement_context
   = tree_evaluator::other;
 
 bool tree_evaluator::in_loop_command = false;
 
 // Maximum nesting level for functions, scripts, or sourced files called
 // recursively.
 int Vmax_recursion_depth = 256;
@@ -922,113 +920,100 @@ tree_evaluator::do_unwind_protect_cleanu
   // only occur in loops.
 
   frame.protect_var (tree_return_command::returning);
   tree_return_command::returning = 0;
 
   frame.protect_var (tree_break_command::breaking);
   tree_break_command::breaking = 0;
 
-  bool execution_error_in_cleanup = false;
-
   try
     {
       if (list)
         list->accept (*this);
     }
   catch (const octave_execution_exception&)
     {
       recover_from_exception ();
 
-      execution_error_in_cleanup = true;
+      if (tree_break_command::breaking || tree_return_command::returning)
+        frame.discard (2);
+      else
+        frame.run (2);
+
+      frame.discard (2);
+
+      throw;
     }
 
   // The unwind_protects are popped off the stack in the reverse of
   // the order they are pushed on.
 
   // FIXME: these statements say that if we see a break or
   // return statement in the cleanup block, that we want to use the
   // new value of the breaking or returning flag instead of restoring
   // the previous value.  Is that the right thing to do?  I think so.
   // Consider the case of
   //
   //   function foo ()
   //     unwind_protect
-  //       stderr << "1: this should always be executed\n";
+  //       fprintf (stderr, "1: this should always be executed\n");
   //       break;
-  //       stderr << "1: this should never be executed\n";
+  //       fprintf (stderr, "1: this should never be executed\n");
   //     unwind_protect_cleanup
-  //       stderr << "2: this should always be executed\n";
+  //       fprintf (stderr, "2: this should always be executed\n");
   //       return;
-  //       stderr << "2: this should never be executed\n";
+  //       fprintf (stderr, "2: this should never be executed\n");
   //     end_unwind_protect
   //   endfunction
   //
   // If we reset the value of the breaking flag, both the returning
   // flag and the breaking flag will be set, and we shouldn't have
   // both.  So, use the most recent one.  If there is no return or
   // break in the cleanup block, the values should be reset to
   // whatever they were when the cleanup block was entered.
 
   if (tree_break_command::breaking || tree_return_command::returning)
     frame.discard (2);
   else
     frame.run (2);
-
-  // We don't want to ignore errors that occur in the cleanup code,
-  // so if an error is encountered there, rethrow the exception.
-  // Otherwise, rethrow any exception that might have occurred in the
-  // unwind_protect block.
-
-  if (execution_error_in_cleanup)
-    frame.discard (2);
-  else
-    frame.run (2);
-
-  frame.run ();
-
-  // FIXME: we should really be rethrowing whatever exception occurred,
-  // not just throwing an execution exception.
-  if (unwind_protect_exception || execution_error_in_cleanup)
-    {
-      unwind_protect_exception = false;
-
-      octave_throw_execution_exception ();
-    }
 }
 
 void
 tree_evaluator::visit_unwind_protect_command (tree_unwind_protect_command& cmd)
 {
   tree_statement_list *cleanup_code = cmd.cleanup ();
 
   tree_statement_list *unwind_protect_code = cmd.body ();
 
   if (unwind_protect_code)
     {
-      unwind_protect_exception = false;
-
       try
         {
           unwind_protect_code->accept (*this);
         }
       catch (const octave_execution_exception&)
         {
+          // FIXME: Maybe we should be able to temporarily set the
+          // interpreter's exception handling state to something "safe"
+          // while the cleanup block runs instead of just resetting it
+          // here?
           recover_from_exception ();
 
-          unwind_protect_exception = true;
-
-          // Run the cleanup code on exceptions, so that it is run even in case
-          // of interrupt or out-of-memory.
+          // Run the cleanup code on exceptions, so that it is run even
+          // in case of interrupt or out-of-memory.
           do_unwind_protect_cleanup_code (cleanup_code);
 
-          // We want to rethrow the exception so that interrupts continue.
+          // If an error occurs inside the cleanup code, a new
+          // exception will be thrown instead of the original.
           throw;
         }
 
+      // Also execute the unwind_protect_cleanump code if the
+      // unwind_protect block runs without error.
       do_unwind_protect_cleanup_code (cleanup_code);
     }
 }
 
 void
 tree_evaluator::visit_while_command (tree_while_command& cmd)
 {
 #if HAVE_LLVM
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -148,18 +148,16 @@ public:
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
 
   static bool debug_mode;
 
   static bool quiet_breakpoint_flag;
 
-  static bool unwind_protect_exception;
-
   // Possible types of evaluation contexts.
   enum stmt_list_type
   {
     function,  // function body
     script,    // script file
     other      // command-line input or eval string
   };
 
