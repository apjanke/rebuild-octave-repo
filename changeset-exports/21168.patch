# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454362161 28800
#      Mon Feb 01 13:29:21 2016 -0800
# Node ID 26f85aa072de4c00a3c48e090a099a3b854cb370
# Parent  7705a858262b2ee3c91083e1c3a22053475c63fa
maint: Replace instances of goto in liboctave where convenient.

* CMatrix.cc (operator >>): Replace "goto done;" with "return is;".

* CNDArray.cc (operator >>): Replace "goto done;" with "return is;".

* lo-specfun.cc (gammainc (various)) : Rename return variable result to retval.  Replace
"goto done;" with "return XXX ();" where XXX is a container such as Matrix,
NDArray, FloatMatrix, FloatNDArray.
* lo-specfun.cc (gammainc (double, double, err), gammainc (float,float, err)):
Move input validation to top of function.

* randpoisson.c (poisson_cdf_lookup): Place action of if statement on separate line.

* cmd-edit.cc (do_decode_prompt_string): Replace goto statement with break.
Rename variable result to retval.  Rename variable temp to tmpstr.  Place
cases of switch statement in mostly alphabetical order.  Use single quotes when
describing a single character.  Use temporary number buffer of 32, not 128.

* oct-sort.cc (sort): Replace "goto fail;" with "return;"

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -3447,22 +3447,20 @@ operator >> (std::istream& is, ComplexMa
       Complex tmp;
       for (octave_idx_type i = 0; i < nr; i++)
         for (octave_idx_type j = 0; j < nc; j++)
           {
             tmp = octave_read_value<Complex> (is);
             if (is)
               a.elem (i, j) = tmp;
             else
-              goto done;
+              return is;
           }
     }
 
-done:
-
   return is;
 }
 
 ComplexMatrix
 Givens (const Complex& x, const Complex& y)
 {
   double cc;
   Complex cs, temp_r;
diff --git a/liboctave/array/CNDArray.cc b/liboctave/array/CNDArray.cc
--- a/liboctave/array/CNDArray.cc
+++ b/liboctave/array/CNDArray.cc
@@ -860,22 +860,20 @@ operator >> (std::istream& is, ComplexND
     {
       Complex tmp;
       for (octave_idx_type i = 0; i < nel; i++)
         {
           tmp = octave_read_value<Complex> (is);
           if (is)
             a.elem (i) = tmp;
           else
-            goto done;
+            return is;
         }
     }
 
-done:
-
   return is;
 }
 
 MINMAX_FCNS (ComplexNDArray, Complex)
 
 NDS_CMP_OPS (ComplexNDArray, Complex)
 NDS_BOOL_OPS (ComplexNDArray, Complex)
 
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -2558,169 +2558,142 @@ betainc (const Array<float>& x, const Ar
   return retval;
 }
 
 // FIXME: there is still room for improvement here...
 
 double
 gammainc (double x, double a, bool& err)
 {
-  double retval;
-
-  err = false;
-
   if (a < 0.0 || x < 0.0)
     (*current_liboctave_error_handler)
       ("gammainc: A and X must be non-negative");
 
+  err = false;
+
+  double retval;
+
   F77_XFCN (xgammainc, XGAMMAINC, (a, x, retval));
 
   return retval;
 }
 
 Matrix
 gammainc (double x, const Matrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  Matrix result (nr, nc);
-  Matrix retval;
+  Matrix retval (nr, nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x, a(i,j), err);
+        retval(i,j) = gammainc (x, a(i,j), err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return Matrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 Matrix
 gammainc (const Matrix& x, double a)
 {
   octave_idx_type nr = x.rows ();
   octave_idx_type nc = x.cols ();
 
-  Matrix result (nr, nc);
-  Matrix retval;
+  Matrix retval (nr, nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x(i,j), a, err);
+        retval(i,j) = gammainc (x(i,j), a, err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return Matrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 Matrix
 gammainc (const Matrix& x, const Matrix& a)
 {
-  Matrix result;
-  Matrix retval;
-
   octave_idx_type nr = x.rows ();
   octave_idx_type nc = x.cols ();
 
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     (*current_liboctave_error_handler)
       ("gammainc: nonconformant arguments (arg 1 is %dx%d, arg 2 is %dx%d)",
        nr, nc, a_nr, a_nc);
 
-  result.resize (nr, nc);
+  Matrix retval (nr, nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x(i,j), a(i,j), err);
+        retval(i,j) = gammainc (x(i,j), a(i,j), err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return Matrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 NDArray
 gammainc (double x, const NDArray& a)
 {
   dim_vector dv = a.dims ();
   octave_idx_type nel = dv.numel ();
 
-  NDArray retval;
-  NDArray result (dv);
+  NDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x, a(i), err);
+      retval(i) = gammainc (x, a(i), err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return NDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 NDArray
 gammainc (const NDArray& x, double a)
 {
   dim_vector dv = x.dims ();
   octave_idx_type nel = dv.numel ();
 
-  NDArray retval;
-  NDArray result (dv);
+  NDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x(i), a, err);
+      retval(i) = gammainc (x(i), a, err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return NDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 NDArray
 gammainc (const NDArray& x, const NDArray& a)
 {
   dim_vector dv = x.dims ();
   octave_idx_type nel = dv.numel ();
@@ -2730,230 +2703,191 @@ gammainc (const NDArray& x, const NDArra
       std::string x_str = dv.str ();
       std::string a_str = a.dims ().str ();
 
       (*current_liboctave_error_handler)
         ("gammainc: nonconformant arguments (arg 1 is %s, arg 2 is %s)",
          x_str.c_str (), a_str. c_str ());
     }
 
-  NDArray retval;
-  NDArray result (dv);
+  NDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x(i), a(i), err);
+      retval(i) = gammainc (x(i), a(i), err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return NDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 float
 gammainc (float x, float a, bool& err)
 {
-  float retval;
-
-  err = false;
-
   if (a < 0.0 || x < 0.0)
     (*current_liboctave_error_handler)
       ("gammainc: A and X must be non-negative");
 
+  err = false;
+
+  float retval;
+
   F77_XFCN (xsgammainc, XSGAMMAINC, (a, x, retval));
 
   return retval;
 }
 
 FloatMatrix
 gammainc (float x, const FloatMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  FloatMatrix result (nr, nc);
-  FloatMatrix retval;
+  FloatMatrix retval (nr,  nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x, a(i,j), err);
+        retval(i,j) = gammainc (x, a(i,j), err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return FloatMatrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 FloatMatrix
 gammainc (const FloatMatrix& x, float a)
 {
   octave_idx_type nr = x.rows ();
   octave_idx_type nc = x.cols ();
 
-  FloatMatrix result (nr, nc);
-  FloatMatrix retval;
+  FloatMatrix retval (nr, nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x(i,j), a, err);
+        retval(i,j) = gammainc (x(i,j), a, err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return FloatMatrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 FloatMatrix
 gammainc (const FloatMatrix& x, const FloatMatrix& a)
 {
-  FloatMatrix result;
-  FloatMatrix retval;
-
   octave_idx_type nr = x.rows ();
   octave_idx_type nc = x.cols ();
 
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     (*current_liboctave_error_handler)
       ("gammainc: nonconformant arguments (arg 1 is %dx%d, arg 2 is %dx%d)",
        nr, nc, a_nr, a_nc);
 
-  result.resize (nr, nc);
+  FloatMatrix retval (nr, nc);
 
   bool err;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        result(i,j) = gammainc (x(i,j), a(i,j), err);
+        retval(i,j) = gammainc (x(i,j), a(i,j), err);
 
         if (err)
-          goto done;  // FIXME: why not just use return to exit?
+          return FloatMatrix ();
       }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 FloatNDArray
 gammainc (float x, const FloatNDArray& a)
 {
   dim_vector dv = a.dims ();
   octave_idx_type nel = dv.numel ();
 
-  FloatNDArray retval;
-  FloatNDArray result (dv);
+  FloatNDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x, a(i), err);
+      retval(i) = gammainc (x, a(i), err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return FloatNDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 FloatNDArray
 gammainc (const FloatNDArray& x, float a)
 {
   dim_vector dv = x.dims ();
   octave_idx_type nel = dv.numel ();
 
-  FloatNDArray retval;
-  FloatNDArray result (dv);
+  FloatNDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x(i), a, err);
+      retval(i) = gammainc (x(i), a, err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return FloatNDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 FloatNDArray
 gammainc (const FloatNDArray& x, const FloatNDArray& a)
 {
   dim_vector dv = x.dims ();
   octave_idx_type nel = dv.numel ();
 
-  FloatNDArray retval;
-  FloatNDArray result;
-
   if (dv != a.dims ())
     {
       std::string x_str = dv.str ();
       std::string a_str = a.dims ().str ();
 
       (*current_liboctave_error_handler)
         ("gammainc: nonconformant arguments (arg 1 is %s, arg 2 is %s)",
          x_str.c_str (), a_str.c_str ());
     }
 
-  result.resize (dv);
+  FloatNDArray retval (dv);
 
   bool err;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      result(i) = gammainc (x(i), a(i), err);
+      retval(i) = gammainc (x(i), a(i), err);
 
       if (err)
-        goto done;  // FIXME: why not just use return to exit?
+        return FloatNDArray ();
     }
 
-  retval = result;
-
-done:
-
   return retval;
 }
 
 
 Complex rc_log1p (double x)
 {
   const double pi = 3.14159265358979323846;
   return (x < -1.0
diff --git a/liboctave/numeric/randpoisson.c b/liboctave/numeric/randpoisson.c
--- a/liboctave/numeric/randpoisson.c
+++ b/liboctave/numeric/randpoisson.c
@@ -345,17 +345,18 @@ poisson_cdf_lookup (double lambda, doubl
        * outer loop, and the continue statement will only work for
        * the inner loop. */
     nextk:
       if (u <= t[k])
         {
           p[i] = (double) k;
           continue;
         }
-      if (++k < tableidx) goto nextk;
+      if (++k < tableidx)
+        goto nextk;
 
       /* We only need high values of the table very rarely so we
        * don't automatically compute the entire table. */
       while (tableidx < TABLESIZE)
         {
           P = P*lambda/(double)tableidx;
           t[tableidx] = t[tableidx-1] + P;
           /* Make sure we converge to 1.0 just in case u is uniform
@@ -396,17 +397,18 @@ poisson_cdf_lookup_float (double lambda,
       double u = RUNI;
       int k = (u > 0.458 ? intlambda : 0);
     nextk:
       if (u <= t[k])
         {
           p[i] = (float) k;
           continue;
         }
-      if (++k < tableidx) goto nextk;
+      if (++k < tableidx)
+        goto nextk;
 
       while (tableidx < TABLESIZE)
         {
           P = P*lambda/(double)tableidx;
           t[tableidx] = t[tableidx-1] + P;
           if (t[tableidx] == t[tableidx-1]) t[tableidx] = 1.0;
           tableidx++;
           if (u <= t[tableidx-1]) break;
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -1551,18 +1551,18 @@ command_editor::interrupt (bool arg)
 //      \nnn    character code nnn in octal
 //      \\      a backslash
 //      \[      begin a sequence of non-printing chars
 //      \]      end a sequence of non-printing chars
 
 std::string
 command_editor::do_decode_prompt_string (const std::string& s)
 {
-  std::string result;
-  std::string temp;
+  std::string retval;
+  std::string tmpstr;
   size_t i = 0;
   size_t slen = s.length ();
   int c;
 
   while (i < slen)
     {
       c = s[i];
 
@@ -1581,221 +1581,213 @@ command_editor::do_decode_prompt_string 
             case '4':
             case '5':
             case '6':
             case '7':
               // Maybe convert an octal number.
               {
                 int n = read_octal (s.substr (i, 3));
 
-                temp = "\\";
+                tmpstr = "\\";
 
                 if (n != -1)
                   {
-                    i += 3;
-                    temp[0] = n;
+                    tmpstr[0] = n;
+                    i += 2;   // i++ makes this += 3 later
                   }
 
-                c = 0;
-                goto add_string;
+                break;
               }
 
             case 'a':
               {
-                temp = '\a';
-
-                goto add_string;
-              }
-
-            case 'e':
-              {
-                temp = '\033';
+                tmpstr = '\a';
 
-                goto add_string;
-              }
-
-            case 'r':
-              {
-                temp = '\r';
-
-                goto add_string;
+                break;
               }
 
             case 'd':
             case 't':
             case 'T':
             case '@':
             case 'A':
               // Make the current time/date into a string.
               {
                 octave_localtime now;
 
                 if (c == 'd')
-                  temp = now.strftime ("%a %b %d");
+                  tmpstr = now.strftime ("%a %b %d");
                 else if (c == 't')
-                  temp = now.strftime ("%H:%M:%S");
+                  tmpstr = now.strftime ("%H:%M:%S");
                 else if (c == 'T')
-                  temp = now.strftime ("%I:%M:%S");
+                  tmpstr = now.strftime ("%I:%M:%S");
                 else if (c == '@')
-                  temp = now.strftime ("%I:%M %p");
+                  tmpstr = now.strftime ("%I:%M %p");
                 else if (c == 'A')
-                  temp = now.strftime ("%H:%M");
+                  tmpstr = now.strftime ("%H:%M");
+
+                break;
+              }
+
+            case 'e':
+              {
+                tmpstr = '\033';
+
+                break;
+              }
 
-                goto add_string;
+            case 'h':
+              {
+                tmpstr = octave_env::get_host_name ();
+
+                size_t pos = tmpstr.find ('.');
+
+                if (pos != std::string::npos)
+                  tmpstr.resize (pos);
+
+                break;
+              }
+
+            case 'H':
+              {
+                tmpstr = octave_env::get_host_name ();
+
+                break;
               }
 
             case 'n':
               {
-                temp = newline_chars ();
+                tmpstr = newline_chars ();
+
+                break;
+              }
 
-                goto add_string;
+            case 'r':
+              {
+                tmpstr = '\r';
+
+                break;
               }
 
             case 's':
               {
-                temp = octave_env::get_program_name ();
-                temp = octave_env::base_pathname (temp);
+                tmpstr = octave_env::get_program_name ();
+                tmpstr = octave_env::base_pathname (tmpstr);
+
+                break;
+              }
 
-                goto add_string;
+            case 'u':
+              {
+                tmpstr = octave_env::get_user_name ();
+
+                break;
               }
 
             case 'w':
             case 'W':
               {
                 try
                   {
-                    temp = octave_env::get_current_directory ();
+                    tmpstr = octave_env::get_current_directory ();
                   }
                 catch (const octave_execution_exception&)
                   {
-                    temp = "";
+                    tmpstr = "";
                   }
 
                 std::string home_dir = octave_env::get_home_directory ();
 
-                if (c == 'W' && (home_dir.empty () || temp != home_dir))
+                if (c == 'W' && (home_dir.empty () || tmpstr != home_dir))
                   {
-                    if (temp != "/" && temp != "//")
+                    if (tmpstr != "/" && tmpstr != "//")
                       {
-                        size_t pos = temp.rfind ('/');
+                        size_t pos = tmpstr.rfind ('/');
 
                         if (pos != std::string::npos && pos != 0)
-                          temp = temp.substr (pos + 1);
+                          tmpstr = tmpstr.substr (pos + 1);
                       }
                   }
                 else
-                  temp = octave_env::polite_directory_format (temp);
-
-                goto add_string;
-              }
-
-            case 'u':
-              {
-                temp = octave_env::get_user_name ();
-
-                goto add_string;
-              }
-
-            case 'H':
-              {
-                temp = octave_env::get_host_name ();
-
-                goto add_string;
-              }
+                  tmpstr = octave_env::polite_directory_format (tmpstr);
 
-            case 'h':
-              {
-                temp = octave_env::get_host_name ();
-
-                size_t pos = temp.find ('.');
-
-                if (pos != std::string::npos)
-                  temp.resize (pos);
-
-                goto add_string;
-              }
-
-            case '#':
-              {
-                char number_buffer[128];
-                sprintf (number_buffer, "%d", command_number);
-                temp = number_buffer;
-
-                goto add_string;
+                break;
               }
 
             case '!':
               {
-                char number_buffer[128];
+                char number_buffer[32];
                 int num = command_history::current_number ();
                 if (num > 0)
                   sprintf (number_buffer, "%d", num);
                 else
                   strcpy (number_buffer, "!");
-                temp = number_buffer;
+                tmpstr = number_buffer;
+
+                break;
+              }
 
-                goto add_string;
+            case '#':
+              {
+                char number_buffer[32];
+                sprintf (number_buffer, "%d", command_number);
+                tmpstr = number_buffer;
+
+                break;
               }
 
             case '$':
               {
 #if defined (HAVE_GETEUID)
-                temp = (::geteuid () == 0 ? "#" : "$");
+                tmpstr = (::geteuid () == 0 ? '#' : '$');
 #else
-                temp = "$";
+                tmpstr = '$';
 #endif
 
-                goto add_string;
+                break;
               }
 
 #if defined (USE_READLINE)
             case '[':
             case ']':
               {
-                temp.resize (1);
+                tmpstr.resize (1);
 
-                temp[0] = ((c == '[')
-                           ? ::octave_rl_prompt_start_ignore ()
-                           : ::octave_rl_prompt_end_ignore ());
+                tmpstr[0] = ((c == '[')
+                             ? ::octave_rl_prompt_start_ignore ()
+                             : ::octave_rl_prompt_end_ignore ());
 
-                goto add_string;
+                break;
               }
 #endif
 
             case '\\':
               {
-                temp = "\\";
+                tmpstr = "\\";
 
-                goto add_string;
+                break;
               }
 
             default:
               {
-                temp = "\\ ";
-                temp[1] = c;
-
-                goto add_string;
-              }
-
-            add_string:
-              {
-                if (c)
-                  i++;
-
-                result.append (temp);
+                tmpstr = "\\ ";
+                tmpstr[1] = c;
 
                 break;
               }
             }
+
+          retval.append (tmpstr);
+          i++;   // Move past processed escape character
         }
       else
-        result += c;
+        retval += c;
     }
 
-  return result;
+  return retval;
 }
 
 int
 command_editor::do_insert_initial_input (void)
 {
   std::string input = initial_input;
 
   initial_input = "";
diff --git a/liboctave/util/oct-sort.cc b/liboctave/util/oct-sort.cc
--- a/liboctave/util/oct-sort.cc
+++ b/liboctave/util/oct-sort.cc
@@ -1410,45 +1410,42 @@ octave_sort<T>::sort (T *data, octave_id
       do
         {
           bool descending;
           octave_idx_type n;
 
           /* Identify next run. */
           n = count_run (data + lo, nremaining, descending, comp);
           if (n < 0)
-            goto fail;
+            return;
           if (descending)
             std::reverse (data + lo, data + lo + n);
           /* If short, extend to min (minrun, nremaining). */
           if (n < minrun)
             {
               const octave_idx_type force = nremaining <= minrun ? nremaining
                                                                  : minrun;
               binarysort (data + lo, force, n, comp);
               n = force;
             }
           /* Push run onto pending-runs stack, and maybe merge. */
           assert (ms->n < MAX_MERGE_PENDING);
           ms->pending[ms->n].base = lo;
           ms->pending[ms->n].len = n;
           ms->n++;
           if (merge_collapse (data, comp) < 0)
-            goto fail;
+            return;
           /* Advance to find next run. */
           lo += n;
           nremaining -= n;
         }
       while (nremaining);
 
       merge_force_collapse (data, comp);
     }
-
-fail:
-  return;
 }
 
 template <typename T>
 template <typename Comp>
 void
 octave_sort<T>::sort (T *data, octave_idx_type *idx, octave_idx_type nel,
                       Comp comp)
 {
@@ -1470,17 +1467,17 @@ octave_sort<T>::sort (T *data, octave_id
       do
         {
           bool descending;
           octave_idx_type n;
 
           /* Identify next run. */
           n = count_run (data + lo, nremaining, descending, comp);
           if (n < 0)
-            goto fail;
+            return;
           if (descending)
             {
               std::reverse (data + lo, data + lo + n);
               std::reverse (idx + lo, idx + lo + n);
             }
           /* If short, extend to min (minrun, nremaining). */
           if (n < minrun)
             {
@@ -1490,28 +1487,25 @@ octave_sort<T>::sort (T *data, octave_id
               n = force;
             }
           /* Push run onto pending-runs stack, and maybe merge. */
           assert (ms->n < MAX_MERGE_PENDING);
           ms->pending[ms->n].base = lo;
           ms->pending[ms->n].len = n;
           ms->n++;
           if (merge_collapse (data, idx, comp) < 0)
-            goto fail;
+            return;
           /* Advance to find next run. */
           lo += n;
           nremaining -= n;
         }
       while (nremaining);
 
       merge_force_collapse (data, idx, comp);
     }
-
-fail:
-  return;
 }
 
 template <typename T>
 void
 octave_sort<T>::sort (T *data, octave_idx_type nel)
 {
 #ifdef INLINE_ASCENDING_SORT
   if (compare == ascending_compare)
