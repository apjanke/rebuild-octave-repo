# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216847810 14400
#      Wed Jul 23 17:16:50 2008 -0400
# Node ID 0d607e8dbbfa28b86b0706efba8f2d00341d85a5
# Parent  6add0f974aee3bf641842a71472a6014fdf4f442
eliminate curr_parent_function; fix subfunction lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2008-07-23  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr_fcn.cc (octave_user_function::do_multi_index_op):
+	Don't unwind_protect and set curr_parent_function here.
+	* toplev.cc (curr_parent_function): Delete definition.
+	* toplev.h: (curr_parent_function): Delete declaration.
+
+	* ov-usr-fcn.h (octave_user_function::parent_scope): New data member.
+	(octave_user_function::parent_fcn_scope,
+	octave_user_function::stash_parent_fcn_scope): New functions.
+	* ov-usr_fcn.cc (octave_user_function::octave_user_function):
+	Initialize parent_scope.
+	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find):
+	Check parent of current function by looking at call stack, not
+	global curr_parent_function variable.
+	* parse.y (frob_function): If parsing nested function, stash
+	current parent function scope.
+	* ov-fcn.h (octave_function::parent_fcn_scope): New virtual function.
+
 2008-07-22  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.cc (F__go_execute_callback__): New function.
 
 	* DLD-FUNCTIONS/fltk_backend.cc: Undefine min/max after FLTK headers
 	inclusion.
 
 	* graphics.h.in (class base_graphics_event, class graphics_event): New
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -57,16 +57,18 @@ public:
   bool is_function (void) const { return true; }
 
   virtual bool is_system_fcn_file (void) const { return false; }
 
   virtual std::string fcn_file_name (void) const { return std::string (); }
 
   virtual std::string parent_fcn_name (void) const { return std::string (); }
 
+  virtual symbol_table::scope_id parent_fcn_scope (void) const { return -1; }
+
   virtual void mark_fcn_file_up_to_date (const octave_time&) { }
 
   virtual symbol_table::scope_id scope (void) { return -1; }
 
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -201,17 +201,17 @@ octave_user_function::octave_user_functi
     param_list (pl), ret_list (rl), cmd_list (cl),
     lead_comm (), trail_comm (), file_name (),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (-1),
     num_named_args (param_list ? param_list->length () : 0),
     nested_function (false), inline_function (false),
     class_constructor (false), class_method (false), xdispatch_class (),
-    args_passed (), num_args_passed (0), local_scope (sid)
+    args_passed (), num_args_passed (0), parent_scope (-1), local_scope (sid)
 {
   if (cmd_list)
     cmd_list->mark_as_function_body ();
 }
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
@@ -402,22 +402,16 @@ octave_user_function::do_multi_index_op 
       unwind_protect::add (symbol_table::pop_context);
     }
   else
     {
       // Force symbols to be undefined again when this function exits.
       unwind_protect::add (symbol_table::clear_variables);
     }
 
-  if (! (is_nested_function () || is_inline_function ()))
-    {
-      unwind_protect_ptr (curr_parent_function);
-      curr_parent_function = this;
-    }
-
   // Save and restore args passed for recursive calls.
 
   save_args_passed (args);
 
   unwind_protect::add (::restore_args_passed, this);
 
   string_vector arg_names = args.name_tags ();
 
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -192,32 +192,36 @@ public:
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (const std::string& nm);
 
   void stash_parent_fcn_name (const std::string& p) { parent_name = p; }
 
+  void stash_parent_fcn_scope (symbol_table::scope_id ps) { parent_scope = ps; }
+
   void stash_leading_comment (octave_comment_list *lc) { lead_comm = lc; }
 
   void stash_trailing_comment (octave_comment_list *tc) { trail_comm = tc; }
 
   void mark_fcn_file_up_to_date (const octave_time& t) { t_checked = t; }
 
   void stash_fcn_file_time (const octave_time& t)
     {
       t_parsed = t;
       mark_fcn_file_up_to_date (t);
     }
 
   std::string fcn_file_name (void) const { return file_name; }
 
   std::string parent_fcn_name (void) const { return parent_name; }
 
+  symbol_table::scope_id parent_fcn_scope (void) const { return parent_scope; }
+
   symbol_table::scope_id scope (void) { return local_scope; }
 
   octave_time time_parsed (void) const { return t_parsed; }
 
   octave_time time_checked (void) const { return t_checked; }
 
   void mark_as_system_fcn_file (void);
 
@@ -375,16 +379,19 @@ private:
   octave_value_list args_passed;
 
   // A place to store the passed args for recursive calls.
   std::stack<octave_value_list> saved_args;
 
   // The number of arguments passed in.
   int num_args_passed;
 
+  // The scope of the parent function, if any.
+  symbol_table::scope_id parent_scope;
+
   symbol_table::scope_id local_scope;
 
 #if 0
   // The symbol record for argn in the local symbol table.
   octave_value& argn_varref;
 
   // The symbol record for nargin in the local symbol table.
   octave_value& nargin_varref;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2434,17 +2434,16 @@ make_script (tree_statement_list *cmds)
 static octave_user_function *
 start_function (tree_parameter_list *param_list, tree_statement_list *body)
 {
   // We'll fill in the return list later.
 
   octave_user_function *fcn
     = new octave_user_function (symbol_table::current_scope (),
 				param_list, 0, body);
-				
 
   if (fcn)
     {
       octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
       fcn->stash_trailing_comment (tc);
     }
 
@@ -2496,17 +2495,20 @@ frob_function (const std::string& fname,
       fcn->stash_fcn_file_name (curr_fcn_file_full_name);
       fcn->stash_fcn_file_time (now);
       fcn->mark_as_system_fcn_file ();
 
       if (fcn_file_from_relative_lookup)
 	fcn->mark_relative ();
 
       if (lexer_flags.parsing_nested_function)
-        fcn->stash_parent_fcn_name (parent_function_name);
+        {
+          fcn->stash_parent_fcn_name (parent_function_name);
+          fcn->stash_parent_fcn_scope (symbol_table::parent_scope ());
+	}
 
       if (lexer_flags.parsing_class_method)
 	{
 	  if (current_class_name == id_name)
 	    fcn->mark_as_class_constructor ();
 	  else
 	    fcn->mark_as_class_method ();
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -399,39 +399,50 @@ symbol_table::fcn_info::fcn_info_rep::fi
   static bool deja_vu = false;
 
   // Subfunction.  I think it only makes sense to check for
   // subfunctions if we are currently executing a function defined
   // from a .m file.
 
   scope_val_iterator r = subfunctions.find (xcurrent_scope);
 
+  octave_function *curr_fcn = 0;
+
   if (r != subfunctions.end ())
     {
       // FIXME -- out-of-date check here.
 
       return r->second;
     }
-  else if (curr_parent_function)
+  else
     {
-      scope_id pscope = curr_parent_function->scope ();
+      curr_fcn = octave_call_stack::current ();
 
-      r = subfunctions.find (pscope);
+      if (curr_fcn)
+	{
+	  scope_id pscope = curr_fcn->parent_fcn_scope ();
 
-      if (r != subfunctions.end ())
-	{
-	  // FIXME -- out-of-date check here.
+	  if (pscope > 0)
+	    {
+	      r = subfunctions.find (pscope);
 
-	  return r->second;
+	      if (r != subfunctions.end ())
+		{
+		  // FIXME -- out-of-date check here.
+
+		  return r->second;
+		}
+	    }
 	}
     }
 
   // Private function.
 
-  octave_function *curr_fcn = octave_call_stack::current ();
+  if (! curr_fcn)
+    curr_fcn = octave_call_stack::current ();
 
   if (curr_fcn)
     {
       std::string dir_name = curr_fcn->dir_name ();
 
       if (! dir_name.empty ())
 	{
 	  str_val_iterator q = private_functions.find (dir_name);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -85,19 +85,16 @@ static bool quitting_gracefully = false;
 bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
-// Pointer to parent function that is currently being evaluated.
-octave_function *curr_parent_function = 0;
-
 octave_call_stack *octave_call_stack::instance = 0;
 
 int
 octave_call_stack::do_current_line (void) const
 {
   tree_statement *stmt = do_top_statement ();
 
   return stmt ? stmt->line () : -1;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -54,19 +54,16 @@ extern OCTINTERP_API void
 octave_add_atexit_function (const std::string& fname);
 
 extern OCTINTERP_API bool
 octave_remove_atexit_function (const std::string& fname);
 
 // Current command to execute.
 extern OCTINTERP_API tree_statement_list *global_command;
 
-// Pointer to parent function that is currently being evaluated.
-extern OCTINTERP_API octave_function *curr_parent_function;
-
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 class
