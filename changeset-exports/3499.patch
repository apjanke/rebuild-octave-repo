# HG changeset patch
# User jwe
# Date 949295893 0
#      Mon Jan 31 05:18:13 2000 +0000
# Node ID 3e3e14ad5149319eb13b32f24e8d88bad484e273
# Parent  e391aeef2b3c49a7043c0f36ce9df791d9ec1d5e
[project @ 2000-01-31 05:18:07 by jwe]

diff --git a/scripts/linear-algebra/commutation_matrix.m b/scripts/linear-algebra/commutation_matrix.m
--- a/scripts/linear-algebra/commutation_matrix.m
+++ b/scripts/linear-algebra/commutation_matrix.m
@@ -36,45 +36,45 @@
 ## @end ifinfo
 ##  matrix such that
 ## @iftex
 ## @tex
 ##  $K_{m,n} \cdot {\rm vec} (A) = {\rm vec} (A^T)$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{K}(@var{m},@var{n}) * vec (@var{A}) = vec (@var{A}')
+##  @math{K(m,n) * vec(A) = vec(A')}
 ## @end ifinfo
 ##  for all
 ## @iftex
 ## @tex
 ##  $m\times n$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{m} by @var{n}
+##  @math{m} by @math{n}
 ## @end ifinfo
 ##  matrices
 ## @iftex
 ## @tex
 ##  $A$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{A}.
+##  @math{A}.
 ## @end ifinfo
 ##
 ## If only one argument @var{m} is given,
 ## @iftex
 ## @tex
 ##  $K_{m,m}$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  K(m,m)
+##  @math{K(m,m)}
 ## @end ifinfo
 ##  is returned.
 ##
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
diff --git a/scripts/linear-algebra/duplication_matrix.m b/scripts/linear-algebra/duplication_matrix.m
--- a/scripts/linear-algebra/duplication_matrix.m
+++ b/scripts/linear-algebra/duplication_matrix.m
@@ -18,53 +18,53 @@
 ## @deftypefn {Function File} {} duplication_matrix (@var{n})
 ## Return the duplication matrix
 ## @iftex
 ## @tex
 ##  $D_n$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{D}_@var{n}
+##  @math{Dn}
 ## @end ifinfo
 ##  which is the unique
 ## @iftex
 ## @tex
 ##  $n^2 \times n(n+1)/2$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{n}^2 by @var{n}*(@var{n}+1)/2
+##  @math{n^2} by @math{n*(n+1)/2}
 ## @end ifinfo
 ##  matrix such that
 ## @iftex
 ## @tex
 ##  $D_n * {\rm vech} (A) = {\rm vec} (A)$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{D}_@var{n} \cdot vech (@var{A}) = vec (@var{A})
+##  @math{Dn vech (A) = vec (A)}
 ## @end ifinfo
 ##  for all symmetric
 ## @iftex
 ## @tex
 ##  $n \times n$
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{n} by @var{n}
+##  @math{n} by @math{n}
 ## @end ifinfo
 ##  matrices
 ## @iftex
 ## @tex
 ##  $A$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
-##  @var{A}.
+##  @math{A}.
 ## @end ifinfo
 ##
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 8 May 1995
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -12,34 +12,34 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{U}, @var{H}, @var{nu}] =} krylov (@var{A}, @var{V}, @var{k}, @var{eps1}, @var{pflg});
+## @deftypefn {Function File} {[@var{u}, @var{h}, @var{nu}] =} krylov (@var{a}, @var{v}, @var{k}, @var{eps1}, @var{pflg});
 ## construct orthogonal basis U of block Krylov subspace;
-##  [V AV A^2*V ... A^(k+1)*V];
+##  [v a*v a^2*v ... a^(k+1)*v];
 ## method used: householder reflections to guard against loss of
 ## orthogonality
 ## eps1: threshhold for 0 (default: 1e-12)
 ## pflg: flag to use row pivoting  (improves numerical behavior)
 ##   0 [default]: no pivoting; prints a warning message if trivial
 ##                null space is corrupted
 ##   1          : pivoting performed
 ##
 ## outputs:
-##   Uret: orthogonal basis of block krylov subspace
-##   H: Hessenberg matrix; if V is a vector then A U = U H
-##      otherwise H is meaningless
-## nu: dimension of span of krylov subspace (based on eps1)
-## if B is a vector and k > m-1, krylov returns H = the Hessenberg
-## decompostion of A.
+##   u: orthogonal basis of block krylov subspace
+##   h: Hessenberg matrix; if v is a vector then a u = u h
+##      otherwise h is meaningless
+##  nu: dimension of span of krylov subspace (based on eps1)
+## if b is a vector and k > m-1, krylov returns h = the Hessenberg
+## decompostion of a.
 ##
 ## Reference: Hodel and Misra, "Partial Pivoting in the Computation of
 ##     Krylov Subspaces", to be submitted to Linear Algebra and its
 ##     Applications
 ## @end deftypefn
 
 ## Author: A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poly (@var{a})
-## If @var{a} is a square @var{N}-by-@var{N} matrix, @code{poly (@var{a})}
+## If @var{a} is a square @math{N}-by-@math{N} matrix, @code{poly (@var{a})}
 ## is the row vector of the coefficients of @code{det (z * eye (N) - a)},
 ## the characteristic polynomial of @var{a}.  If @var{x} is a vector,
 ## @code{poly (@var{x})} is a vector of coefficients of the polynomial
 ## whose roots are the elements of @var{x}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@neuro.tuwien.ac.at>
 ## Created: 24 December 1993
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -53,19 +53,19 @@
 ## @example
 ##  P(s)    M       r(m)         N
 ##  ---- = SUM -------------  + SUM k(i)*s^(N-i)
 ##  Q(s)   m=1 (s-p(m))^e(m)    i=1
 ## @end example
 ## @end ifinfo
 ##
 ## @noindent
-## where @var{M} is the number of poles (the length of the @var{r},
-## @var{p}, and @var{e} vectors) and @var{N} is the length of the @var{k}
-## vector.
+## where @math{M} is the number of poles (the length of the @var{r},
+## @var{p}, and @var{e} vectors) and @math{N} is the length of the
+## @var{k} vector.
 ##
 ## The argument @var{tol} is optional, and if not specified, a default
 ## value of 0.001 is assumed.  The tolerance value is used to determine
 ## whether poles with small imaginary components are declared real.  It is
 ## also used to determine if two poles are distinct.  If the ratio of the
 ## imaginary part of a pole to the real part is less than @var{tol}, the
 ## imaginary part is discarded.  If two poles are farther apart than
 ## @var{tol} they are distinct.  For example,
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} roots (@var{v})
 ##
-## For a vector @var{v} with @var{N} components, return
+## For a vector @var{v} with @math{N} components, return
 ## the roots of the polynomial
 ## @iftex
 ## @tex
 ## $$
 ## v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
 ## $$
 ## @end tex
 ## @end iftex
diff --git a/scripts/signal/arch_fit.m b/scripts/signal/arch_fit.m
--- a/scripts/signal/arch_fit.m
+++ b/scripts/signal/arch_fit.m
@@ -20,32 +20,32 @@
 ## scoring algorithm in Engle's original ARCH paper.  The model is
 ##
 ## @example
 ## y(t) = b(1) * x(t,1) + ... + b(k) * x(t,k) + e(t),
 ## h(t) = a(1) + a(2) * e(t-1)^2 + ... + a(p+1) * e(t-p)^2
 ## @end example
 ##
 ## @noindent
-## in which @var{e}(@var{t}) is @var{N}(0, @var{h}(@var{t})), given a
-## time-series vector @var{y} up to time @var{t}-1 and a matrix of
-## (ordinary) regressors @var{x} up to @var{t}.  The order of the
-## regression of the residual variance is specified by @var{p}.
+## in which @math{e(t)} is @math{N(0, h(t))}, given a time-series vector
+## @var{y} up to time @math{t-1} and a matrix of (ordinary) regressors
+## @var{x} up to @math{t}.  The order of the regression of the residual
+## variance is specified by @var{p}.
 ##
 ## If invoked as @code{arch_fit (@var{y}, @var{k}, @var{p})} with a
 ## positive integer @var{k}, fit an ARCH(@var{k}, @var{p}) process,
-## i.e., do the above with the @var{t}-th row of @var{x} given by
+## i.e., do the above with the @math{t}-th row of @var{x} given by
 ##
 ## @example
 ## [1, y(t-1), ..., y(t-k)]
 ## @end example
 ##
 ## Optionally, one can specify the number of iterations @var{iter}, the
-## updating factor @var{gamma}, and initial values @var{a0} and @var{b0}
-## for the scoring algorithm.
+## updating factor @var{gamma}, and initial values @math{a0} and
+## @math{b0} for the scoring algorithm.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Fit an ARCH regression model
 
 function [a, b] = arch_fit (y, X, p, ITER, gamma, a0, b0)
 
   if ((nargin < 3) || (nargin == 6) || (nargin > 7))
diff --git a/scripts/signal/arch_rnd.m b/scripts/signal/arch_rnd.m
--- a/scripts/signal/arch_rnd.m
+++ b/scripts/signal/arch_rnd.m
@@ -16,25 +16,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} arch_rnd (@var{a}, @var{b}, @var{t})
 ## Simulate an ARCH sequence, @var{y}, of length @var{t} with AR
 ## coefficients @var{b} and CH coefficients @var{a}.  I.e., the result
 ## follows the model
 ##
 ## @example
-## y(t) = b(1) + b(2) * y(t-1) + ... + b(lb) * y(t-lb+1) + e(t),
+## y(t) = b(1) + b(2) * y(t-1) + @dots{} + b(lb) * y(t-lb+1) + e(t),
 ## @end example
 ##
 ## @noindent
-## where e(t), given @var{y} up to time @var{t}-1, is @var{N}(0,
-## @var{h}(@var{t})), with
+## where @math{e(t)}, given @var{y} up to time @math{t-1}, is
+## @math{N(0, h(t))}, with
 ##
 ## @example
-## h(t) = a(1) + a(2) * e(t-1)^2 + ... + a(la) * e(t-la+1)^2
+## h(t) = a(1) + a(2) * e(t-1)^2 + @dots{} + a(la) * e(t-la+1)^2
 ## @end example
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Simulate an ARCH process
 
 function y = arch_rnd (a, b, T)
 
diff --git a/scripts/signal/arch_test.m b/scripts/signal/arch_test.m
--- a/scripts/signal/arch_test.m
+++ b/scripts/signal/arch_test.m
@@ -24,45 +24,45 @@
 ##
 ## @noindent
 ## perform a Lagrange Multiplier (LM) test of the null hypothesis of no
 ## conditional heteroscedascity against the alternative of CH(@var{p}).
 ##
 ## I.e., the model is
 ##
 ## @example
-## y(t) = b(1) * x(t,1) + ... + b(k) * x(t,k) + e(t),
+## y(t) = b(1) * x(t,1) + @dots{} + b(k) * x(t,k) + e(t),
 ## @end example
 ##
 ## @noindent
-## given @var{y} up to @var{t}-1 and @var{x} up to @var{t},
-## @var{e}(@var{t}) is @var{N}(0, @var{h}(@var{t})) with
+## given @var{y} up to @math{t-1} and @var{x} up to @math{t},
+## @math{e}(t) is @math{N(0, h(t))} with
 ##
 ## @example
-## h(t) = v + a(1) * e(t-1)^2 + ... + a(p) * e(t-p)^2,
+## h(t) = v + a(1) * e(t-1)^2 + @dots{} + a(p) * e(t-p)^2,
 ## @end example
 ##
 ## @noindent
-## and the null is @var{a}(1) == ... == @var{a}(@var{p}) == 0.
+## and the null is @math{a(1)} == @dots{} == @math{a(p)} == 0.
 ##
-## If the second argument is a scalar integer, @var{k}, perform the same
-## test in a linear autoregression model of order @var{k}, i.e., with
+## If the second argument is a scalar integer, @math{k}, perform the same
+## test in a linear autoregression model of order @math{k}, i.e., with
 ##
 ## @example
-## [1, y(t-1), ..., y(t-@var{k})]
+## [1, y(t-1), @dots{}, y(t-@var{k})]
 ## @end example
 ##
 ## @noindent
-## as the @var{t}-th row of @var{x}.
+## as the @math{t}-th row of @var{x}.
 ##
 ## Under the null, LM approximately has a chisquare distribution with
-## @var{p} degrees of freedom and @var{pval} is the @var{p}-value (1
+## @var{p} degrees of freedom and @var{pval} is the @math{p}-value (1
 ## minus the CDF of this distribution at LM) of the test.
 ##
-## If no output argument is given, the @var{p}-value is displayed.
+## If no output argument is given, the @math{p}-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Test for conditional heteroscedascity
 
 function [pval, lm] = arch_test (y, X, p)
 
   if (nargin != 3)
diff --git a/scripts/signal/autocor.m b/scripts/signal/autocor.m
--- a/scripts/signal/autocor.m
+++ b/scripts/signal/autocor.m
@@ -13,17 +13,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} autocor (@var{x}, @var{h})
 ## Return the autocorrelations from lag 0 to @var{h} of vector @var{x}.
 ## If @var{h} is omitted, all autocorrelations are computed.
-## If @var{X} is a matrix, the autocorrelations of each column are
+## If @var{x} is a matrix, the autocorrelations of each column are
 ## computed.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Compute autocorrelations
 
 function retval = autocor (X, h)
 
diff --git a/scripts/signal/diffpara.m b/scripts/signal/diffpara.m
--- a/scripts/signal/diffpara.m
+++ b/scripts/signal/diffpara.m
@@ -10,31 +10,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{d}, @var{D}]} = diffpara (@var{x}, @var{a}, @var{b})
+## @deftypefn {Function File} {[@var{d}, @var{dd}]} = diffpara (@var{x}, @var{a}, @var{b})
 ## Return the estimator @var{d} for the differencing parameter of an
 ## integrated time series.
 ##
-## The frequencies from @code{[2*pi*@var{a}/@var{T},
-## 2*pi*@var{b}/@var{T}]} are used for the estimation.  If @var{b} is
-## omitted, the interval @code{[2*pi/@var{T}, 2*pi*@var{a}/@var{T}]} is
-## used.  If both @var{b} and @var{a} are omitted then @code{@var{a} =
-## 0.5 * sqrt(@var{T})} and @code{@var{b} = 1.5 * sqrt(@var{T})} is
-## used, where @var{T} is the sample size.  If @var{x} is a matrix, the
-## differencing parameter of each column is estimated.
+## The frequencies from @math{[2*pi*a/t, 2*pi*b/T]} are used for the
+## estimation.  If @var{b} is omitted, the interval
+## @math{[2*pi/T, 2*pi*a/T]} is used.  If both @var{b} and @var{a} are
+## omitted then @math{a = 0.5 * sqrt (T)} and @math{b = 1.5 * sqrt (T)}
+## is used, where @math{T} is the sample size.  If @var{x} is a matrix,
+## the differencing parameter of each column is estimated.
 ##
 ## The estimators for all frequencies in the intervals
-## described above is returned in @var{D}.  The value of @var{d} is
-## simply the mean of @var{D}.
+## described above is returned in @var{dd}.  The value of @var{d} is
+## simply the mean of @var{dd}.
 ##
 ## Reference: Brockwell, Peter J. & Davis, Richard A. Time Series:
 ## Theory and Methods Springer 1987.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Estimate the fractional differencing parameter
 
diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -13,27 +13,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fftshift (@var{v})
 ## Perform a shift of the vector @var{v}, for use with the @code{fft}
 ## and @code{ifft} functions, in order the move the frequency 0 to the
-## centre of the vector or matrix.
+## center of the vector or matrix.
 ##
-## If @var{v} is a vector of @var{E} elements corresponding to @var{E}
-## time samples spaced of @var{Dt} each, then @code{fftshift (fft
+## If @var{v} is a vector of @math{E} elements corresponding to @math{E}
+## time samples spaced of @math{Dt} each, then @code{fftshift (fft
 ## (@var{v}))} corresponds to frequencies
 ##
 ## @example
-## f = linspace (-@var{E}/(4*@var{Dt}), (@var{E}/2-1)/(2*@var{Dt}), @var{E})
+## f = linspace (-E/(4*Dt), (E/2-1)/(2*Dt), E)
 ## @end example
 ##
-## If @var{v} is a matrix, does the same holds for rows and columns.
+## If @var{v} is a matrix, the same holds for rows and columns.
 ## @end deftypefn
 
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 
 function retval = fftshift (V)
 
diff --git a/scripts/signal/fractdiff.m b/scripts/signal/fractdiff.m
--- a/scripts/signal/fractdiff.m
+++ b/scripts/signal/fractdiff.m
@@ -11,18 +11,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fractdiff (@var{x}, @var{d})
-## Compute the fractional differences @code{(1-@var{L})^@var{d} * @var{x}}
-## where @var{L} denotes the lag-operator and @var{d} is greater than -1.
+## Compute the fractional differences @math{(1-L)^d x} where @math{L}
+## denotes the lag-operator and @math{d} is greater than -1.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Compute fractional differences
 
 function retval = fractdiff (x, d)
 
   N = 100;
diff --git a/scripts/statistics/base/gls.m b/scripts/statistics/base/gls.m
--- a/scripts/statistics/base/gls.m
+++ b/scripts/statistics/base/gls.m
@@ -22,50 +22,48 @@
 ## Generalized least squares estimation for the multivariate model
 ## @iftex
 ## @tex
 ## $y = x b + e$
 ## with $\bar{e} = 0$ and cov(vec($e$)) = $(s^2)o$,
 ## @end tex
 ## @end iftex
 ## @ifinfo
-## @code{@var{y} = @var{x} * @var{b} + @var{e}} with @code{mean (@var{e}) =
-## 0} and @code{cov (vec (@var{e})) = (@var{s}^2)*@var{o}},
+## @math{y = x b + e} with @math{mean (e) = 0} and
+## @math{cov (vec (e)) = (s^2) o},
 ## @end ifinfo
 ##  where
 ## @iftex
 ## @tex
 ## $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, $b$ is a $k
 ## \times p$ matrix, $e$ is a $t \times p$ matrix, and $o$ is a $tp \times
 ## tp$ matrix.
 ## @end tex
 ## @end iftex
 ## @ifinfo
-## @var{Y} is a @var{T} by @var{p} matrix, @var{X} is a @var{T} by @var{k}
-## matrix, @var{B} is a @var{k} by @var{p} matrix, @var{E} is a @var{T} by
-## @var{p} matrix, and @var{O} is a @var{T}@var{p} by @var{T}@var{p}
-## matrix.
+## @math{y} is a @math{t} by @math{p} matrix, @math{x} is a @math{t} by
+## @math{k} matrix, @math{b} is a @math{k} by @math{p} matrix, @math{e}
+## is a @math{t} by @math{p} matrix, and @math{o} is a @math{t p} by
+## @math{t p} matrix.
 ## @end ifinfo
 ##
 ## @noindent
-## Each row of Y and X is an observation and each column a variable.
-##
-## The return values @var{beta}, @var{v}, and @var{r} are defined as
-## follows.
+## Each row of @var{y} and @var{x} is an observation and each column a
+## variable.  The return values @var{beta}, @var{v}, and @var{r} are
+## defined as follows.
 ##
 ## @table @var
 ## @item beta
-## The GLS estimator for @var{b}.
+## The GLS estimator for @math{b}.
 ##
 ## @item v
-## The GLS estimator for @code{@var{s}^2}.
+## The GLS estimator for @math{s^2}.
 ##
 ## @item r
-## The matrix of GLS residuals, @code{@var{r} = @var{y} - @var{x} *
-## @var{beta}}.
+## The matrix of GLS residuals, @math{r = y - x beta}.
 ## @end table
 ## @end deftypefn
 
 ## Author: Teresa Twaroch <twaroch@ci.tuwien.ac.at>
 ## Created: May 1993
 ## Adapted-By: jwe
 
 function [BETA, v, R] = gls (Y, X, O)
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} kurtosis (@var{x})
-## If @var{x} is a vector of length @var{N}, return the kurtosis
+## If @var{x} is a vector of length @math{N}, return the kurtosis
 ## @iftex
 ## @tex
 ## $$
 ##  {\rm kurtosis} (x) = {1\over N \sigma(x)^4} \sum_{i=1}^N (x_i-\bar{x})^4 - 3
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
diff --git a/scripts/statistics/base/ols.m b/scripts/statistics/base/ols.m
--- a/scripts/statistics/base/ols.m
+++ b/scripts/statistics/base/ols.m
@@ -23,31 +23,30 @@
 ## @iftex
 ## @tex
 ## $y = x b + e$
 ## with
 ## $\bar{e} = 0$, and cov(vec($e$)) = kron ($s, I$)
 ## @end tex
 ## @end iftex
 ## @ifinfo
-## @code{@var{y} = @var{x}*@var{b} + @var{e}} with
-## @code{mean (@var{e}) = 0} and @code{cov (vec (@var{e})) = kron (@var{s},
-## @var{I})}.
+## @math{y = x b + e} with
+## @math{mean (e) = 0} and @math{cov (vec (e)) = kron (s, I)}.
 ## @end ifinfo
 ##  where
 ## @iftex
 ## @tex
 ## $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix,
 ## $b$ is a $k \times p$ matrix, and $e$ is a $t \times p$ matrix.
 ## @end tex
 ## @end iftex
 ## @ifinfo
-## @var{y} is a @var{t} by @var{p} matrix, @var{X} is a @var{t} by @var{k}
-## matrix, @var{B} is a @var{k} by @var{p} matrix, and @var{e} is a @var{t}
-## by @var{p} matrix.
+## @math{y} is a @math{t} by @math{p} matrix, @math{x} is a @math{t} by
+## @math{k} matrix, @math{b} is a @math{k} by @math{p} matrix, and
+## @math{e} is a @math{t} by @math{p} matrix.
 ## @end ifinfo
 ##
 ## Each row of @var{y} and @var{x} is an observation and each column a
 ## variable.
 ##
 ## The return values @var{beta}, @var{sigma}, and @var{r} are defined as
 ## follows.
 ##
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} skewness (@var{x})
-## If @var{x} is a vector of length @var{N}, return the skewness
+## If @var{x} is a vector of length @math{n}, return the skewness
 ## @iftex
 ## @tex
 ## $$
 ## {\rm skewness} (x) = {1\over N \sigma(x)^3} \sum_{i=1}^N (x_i-\bar{x})^3
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
diff --git a/scripts/statistics/distributions/hypergeometric_rnd.m b/scripts/statistics/distributions/hypergeometric_rnd.m
--- a/scripts/statistics/distributions/hypergeometric_rnd.m
+++ b/scripts/statistics/distributions/hypergeometric_rnd.m
@@ -10,18 +10,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} hypergeometric_rnd (@var{N}, @var{m}, @var{t}, @var{n})
-## Generate a row vector containing a random sample of size @var{N} from
+## @deftypefn {Function File} {} hypergeometric_rnd (@var{n_size}, @var{m}, @var{t}, @var{n})
+## Generate a row vector containing a random sample of size @var{n_size} from
 ## the hypergeometric distribution with parameters @var{m}, @var{t}, and
 ## @var{n}.
 ##
 ## The parameters @var{m}, @var{t}, and @var{n} must positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
 function rnd = hypergeometric_rnd (N, m, t, n)
diff --git a/scripts/statistics/tests/f_test_regression.m b/scripts/statistics/tests/f_test_regression.m
--- a/scripts/statistics/tests/f_test_regression.m
+++ b/scripts/statistics/tests/f_test_regression.m
@@ -10,18 +10,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_num}, @var{df_den}] =} f_test_regression (@var{y}, @var{X}, @var{R}, @var{r})
-## Perform an F test for the null hypothesis R * b = r in a classical
+## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_num}, @var{df_den}] =} f_test_regression (@var{y}, @var{x}, @var{rr}, @var{r})
+## Perform an F test for the null hypothesis rr * b = r in a classical
 ## normal regression model y = X * b + e.
 ##
 ## Under the null, the test statistic @var{f} follows an F distribution
 ## with @var{df_num} and @var{df_den} degrees of freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{f}) is
 ## returned in @var{pval}.
 ##
diff --git a/scripts/statistics/tests/hotelling_test.m b/scripts/statistics/tests/hotelling_test.m
--- a/scripts/statistics/tests/hotelling_test.m
+++ b/scripts/statistics/tests/hotelling_test.m
@@ -10,22 +10,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{pval}, @var{Tsq}] =} hotelling_test (@var{x}, @var{m})
+## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test (@var{x}, @var{m})
 ## For a sample @var{x} from a multivariate normal distribution with unknown
 ## mean and covariance matrix, test the null hypothesis that @code{mean
 ## (@var{x}) == @var{m}}.
 ##
-## Hotelling's T^2 is returned in @var{Tsq}.  Under the null,
+## Hotelling's T^2 is returned in @var{tsq}.  Under the null,
 ## @math{(n-p) T^2 / (p(n-1))} has an F distribution with @math{p} and
 ## @math{n-p} degrees of freedom, where @math{n} and @math{p} are the
 ## numbers of samples and variables, respectively.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
diff --git a/scripts/statistics/tests/hotelling_test_2.m b/scripts/statistics/tests/hotelling_test_2.m
--- a/scripts/statistics/tests/hotelling_test_2.m
+++ b/scripts/statistics/tests/hotelling_test_2.m
@@ -10,23 +10,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{pval}, @var{Tsq}] =} hotelling_test_2 (@var{x}, @var{y})
+## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test_2 (@var{x}, @var{y})
 ## For two samples @var{x} from multivariate normal distributions with
 ## the same number of variables (columns), unknown means and unknown
 ## equal covariance matrices, test the null hypothesis @code{mean
 ## (@var{x}) == mean (@var{y})}.
 ##
-## Hotelling's two-sample T^2 is returned in @var{Tsq}.  Under the null,
+## Hotelling's two-sample T^2 is returned in @var{tsq}.  Under the null,
 ##
 ## @example
 ## (n_x+n_y-p-1) T^2 / (p(n_x+n_y-2))
 ## @end example
 ##
 ## @noindent
 ## has an F distribution with @math{p} and @math{n_x+n_y-p-1} degrees of
 ## freedom, where @math{n_x} and @math{n_y} are the sample sizes and
diff --git a/scripts/statistics/tests/t_test_regression.m b/scripts/statistics/tests/t_test_regression.m
--- a/scripts/statistics/tests/t_test_regression.m
+++ b/scripts/statistics/tests/t_test_regression.m
@@ -10,30 +10,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} t_test_regression (@var{y}, @var{x}, @var{R}, @var{r}, @var{alt})
-## Perform an t test for the null hypothesis @code{@var{R} * @var{b} =
+## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} t_test_regression (@var{y}, @var{x}, @var{rr}, @var{r}, @var{alt})
+## Perform an t test for the null hypothesis @code{@var{rr} * @var{b} =
 ## @var{r}} in a classical normal regression model @code{@var{y} =
-## @var{X} * @var{b} + @var{e}}.  Under the null, the test statistic @var{t}
+## @var{x} * @var{b} + @var{e}}.  Under the null, the test statistic @var{t}
 ## follows a @var{t} distribution with @var{df} degrees of freedom.
 ##
 ## If @var{r} is omitted, a value of 0 is assumed.
 ##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
 ## @code{"<>"}, the null is tested against the two-sided alternative
-## @code{@var{R} * @var{b} != @var{r}}.  If @var{alt} is @code{">"}, the
-## one-sided alternative @code{@var{R} * @var{b} > @var{r}} is used.
-## Similarly for @var{"<"}, the one-sided alternative @code{@var{R} *
+## @code{@var{rr} * @var{b} != @var{r}}.  If @var{alt} is @code{">"}, the
+## one-sided alternative @code{@var{rr} * @var{b} > @var{r}} is used.
+## Similarly for @var{"<"}, the one-sided alternative @code{@var{rr} *
 ## @var{b} < @var{r}} is used.  The default is the two-sided case. 
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
diff --git a/scripts/strings/lower.m b/scripts/strings/lower.m
--- a/scripts/strings/lower.m
+++ b/scripts/strings/lower.m
@@ -13,17 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{s} =} lower(@var{S})
+## @deftypefn {Function File} {} lower (@var{s})
+## Transform all letters in the string @var{s} to lower case.
 ## @end deftypefn
 ## @seealso{tolower}
 
 ## Author: jwe
 
 function retval = lower (s)
 
   if (nargin != 1)
diff --git a/scripts/strings/upper.m b/scripts/strings/upper.m
--- a/scripts/strings/upper.m
+++ b/scripts/strings/upper.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{S} =} upper(@var{s})
-## Transform all letters in a string to upper case.
+## @deftypefn {Function File} {} upper (@var{s})
+## Transform all letters in the string @var{s} to upper case.
 ## @end deftypefn
 ## @seealso{toupper}
 
 ## Author: jwe
 
 function retval = upper (s)
 
   if (nargin != 1)
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -254,17 +254,17 @@ Modified Bessel functions of the first k
 Modified Bessel functions of the second kind.\n\
 @item besselh\n\
 Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n\
  = 2) kind.\n\
 @end table\n\
 \n\
 If thet argumemt @var{opt} is supplied, the result is scaled by the\n\
 @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n\
- @var{K} = 2.\n\
+ @var{k} = 2.\n\
 \n\
 If @var{alpha} is a scalar, the result is the same size as @var{x}.\n\
 If @var{x} is a scalar, the result is the same size as @var{alpha}.\n\
 If @var{alpha} is a row vector and @var{x} is a column vector, the\n\
 result is a matrix with @code{length (@var{x})} rows and\n\
 @code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and\n\
 @var{x} must conform and the result will be the same size.\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/colloc.cc b/src/DLD-FUNCTIONS/colloc.cc
--- a/src/DLD-FUNCTIONS/colloc.cc
+++ b/src/DLD-FUNCTIONS/colloc.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (colloc, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{r}, @var{A}, @var{B}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\n\
+@deftypefn {Loadable Function} {[@var{r}, @var{amat}, @var{bmat}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\n\
 Compute derivative and integral weight matrices for orthogonal\n\
 collocation using the subroutines given in J. Villadsen and\n\
 M. L. Michelsen, @cite{Solution of Differential Equation Models by\n\
 Polynomial Approximation}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
diff --git a/src/DLD-FUNCTIONS/givens.cc b/src/DLD-FUNCTIONS/givens.cc
--- a/src/DLD-FUNCTIONS/givens.cc
+++ b/src/DLD-FUNCTIONS/givens.cc
@@ -27,35 +27,35 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
 DEFUN_DLD (givens, args, nargout,
   "-*- texinfo -*-
-@deftypefn {Loadable Function} {@var{G} =} givens (@var{x}, @var{y})\n\
+@deftypefn {Loadable Function} {@var{g} =} givens (@var{x}, @var{y})\n\
 @deftypefnx {Loadable Function} {[@var{c}, @var{s}] =} givens (@var{x}, @var{y})\n\
 @iftex\n\
 @tex\n\
 Return a $2\\times 2$ orthogonal matrix\n\
 $$\n\
  G = \\left[\\matrix{c & s\\cr -s'& c\\cr}\\right]\n\
 $$\n\
 such that\n\
 $$\n\
  G \\left[\\matrix{x\\cr y}\\right] = \\left[\\matrix{\\ast\\cr 0}\\right]\n\
 $$\n\
 with $x$ and $y$ scalars.\n\
 @end tex\n\
 @end iftex\n\
 @ifinfo\n\
 Return a 2 by 2 orthogonal matrix\n\
-@code{@var{G} = [@var{c} @var{s}; -@var{s}' @var{c}]} such that\n\
-@code{@var{G} [@var{x}; @var{y}] = [*; 0]} with @var{x} and @var{y} scalars.\n\
+@code{@var{g} = [@var{c} @var{s}; -@var{s}' @var{c}]} such that\n\
+@code{@var{g} [@var{x}; @var{y}] = [*; 0]} with @var{x} and @var{y} scalars.\n\
 @end ifinfo\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 givens (1, 1)\n\
      @result{}   0.70711   0.70711\n\
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -594,18 +594,18 @@ that you have executed.  Valid options a
 Write the current history to the file @var{file}.  If the name is\n\
 omitted, use the default history file (normally @file{~/.octave_hist}).\n\
 \n\
 @item -r @var{file}\n\
 Read the file @var{file}, replacing the current history list with its\n\
 contents.  If the name is omitted, use the default history file\n\
 (normally @file{~/.octave_hist}).\n\
 \n\
-@item @var{N}\n\
-Only display the most recent @var{N} lines of history.\n\
+@item @var{n}\n\
+Only display the most recent @var{n} lines of history.\n\
 \n\
 @item -q\n\
 Don't number the displayed lines of history.  This is useful for cutting\n\
 and pasting commands if you are using the X Window System.\n\
 @end table\n\
 \n\
 For example, to display the five most recent commands that you have\n\
 typed without displaying line numbers, use the command\n\
