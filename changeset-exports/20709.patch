# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1447778782 18000
#      Tue Nov 17 11:46:22 2015 -0500
# Node ID a2a99aaf680bdfe1a411e7b431aa4fc8862eff5b
# Parent  453fca9ae39734275c122c0ce0e2ae46433b3d64
eliminate more uses of error_state

* lsode.cc, quad.cc, toplev.cc, utils.cc, ov-cell.cc:
Eliminate more uses of error state.

diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -132,35 +132,16 @@ lsode_user_jacobian (const ColumnVector&
         }
       else
         gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
 
-#define LSODE_ABORT() \
-  return retval
-
-#define LSODE_ABORT1(msg) \
-  do \
-    { \
-      error ("lsode: " msg); \
-      LSODE_ABORT (); \
-    } \
-  while (0)
-
-#define LSODE_ABORT2(fmt, arg) \
-  do \
-    { \
-      error ("lsode: " fmt, arg); \
-      LSODE_ABORT (); \
-    } \
-  while (0)
-
 DEFUN (lsode, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t})\n\
 @deftypefnx {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})\n\
 Ordinary Differential Equation (ODE) solver.\n\
 \n\
 The set of differential equations to solve is\n\
 @tex\n\
@@ -280,17 +261,17 @@ parameters for @code{lsode}.\n\
   warned_jac_imaginary = false;
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    LSODE_ABORT1 ("invalid recursive call");
+    error ("lsode: invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 5 && nargout < 4)
     {
       std::string fcn_name, fname, jac_name, jname;
       lsode_fcn = 0;
       lsode_jac = 0;
@@ -334,17 +315,17 @@ parameters for @code{lsode}.\n\
                           if (fcn_name.length ())
                             clear_function (fcn_name);
                           lsode_fcn = 0;
                         }
                     }
                 }
             }
           else
-            LSODE_ABORT1 ("incorrect number of elements in cell array");
+            error ("lsode: incorrect number of elements in cell array");
         }
 
       if (!lsode_fcn && ! f_arg.is_cell ())
         {
           if (f_arg.is_function_handle () || f_arg.is_inline_function ())
             lsode_fcn = f_arg.function_value ();
           else
             {
@@ -390,44 +371,33 @@ parameters for @code{lsode}.\n\
                               clear_function (fcn_name);
                             lsode_fcn = 0;
                           }
                       }
                   }
                   break;
 
                 default:
-                  LSODE_ABORT1
-                  ("first arg should be a string or 2-element string array");
+                  error ("lsode: first arg should be a string or 2-element string array");
                 }
             }
         }
 
-      if (error_state || ! lsode_fcn)
-        LSODE_ABORT ();
-
-      ColumnVector state (args(1).vector_value ());
+      if (! lsode_fcn)
+        error ("lsode: FCN argument is not a valid function name or handle");
 
-      if (error_state)
-        LSODE_ABORT1 ("expecting state vector as second argument");
-
-      ColumnVector out_times (args(2).vector_value ());
-
-      if (error_state)
-        LSODE_ABORT1 ("expecting output time vector as third argument");
+      ColumnVector state = args(1).xvector_value ("lsode: expecting state vector as second argument");
+      ColumnVector out_times = args(2).xvector_value ("lsode: expecting output time vector as third argument");
 
       ColumnVector crit_times;
 
       int crit_times_set = 0;
       if (nargin > 3)
         {
-          crit_times = ColumnVector (args(3).vector_value ());
-
-          if (error_state)
-            LSODE_ABORT1 ("expecting critical time vector as fourth argument");
+          crit_times = args(3).xvector_value ("lsode: expecting critical time vector as fourth argument");
 
           crit_times_set = 1;
         }
 
       double tzero = out_times (0);
 
       ODEFunc func (lsode_user_function);
       if (lsode_jac)
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -142,41 +142,16 @@ quad_float_user_function (float x)
           quad_integration_error = 1;  // FIXME
           gripe_user_supplied_eval ("quad");
         }
     }
 
   return retval;
 }
 
-#define QUAD_ABORT() \
-  do \
-    { \
-      if (fcn_name.length ()) \
-        clear_function (fcn_name); \
-      return retval; \
-    } \
-  while (0)
-
-#define QUAD_ABORT1(msg) \
-  do \
-    { \
-      error ("quad: " msg); \
-      QUAD_ABORT (); \
-    } \
-  while (0)
-
-#define QUAD_ABORT2(fmt, arg) \
-  do \
-    { \
-      error ("quad: " fmt, arg); \
-      QUAD_ABORT (); \
-    } \
-  while (0)
-
 DEFUN (quad, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {Built-in Function} {[@var{q}, @var{ier}, @var{nfun}, @var{err}] =} quad (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using\n\
 Fortran routines from @w{@sc{quadpack}}.\n\
@@ -225,48 +200,42 @@ variable by routines @code{dblquad} and 
   warned_imaginary = false;
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
-    QUAD_ABORT1 ("invalid recursive call");
+    error ("quad: invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 6 && nargout < 5)
     {
       if (args(0).is_function_handle () || args(0).is_inline_function ())
         quad_fcn = args(0).function_value ();
       else
         {
           fcn_name = unique_symbol_name ("__quad_fcn__");
           std::string fname = "function y = ";
           fname.append (fcn_name);
           fname.append ("(x) y = ");
           quad_fcn = extract_function (args(0), "quad", fcn_name, fname,
                                        "; endfunction");
+          frame.add_fcn (clear_function, fcn_name);
         }
 
       if (! quad_fcn)
-        QUAD_ABORT ();
+        error ("quad: FCN argument is not a valid function name or handle");
 
       if (args(1).is_single_type () || args(2).is_single_type ())
         {
-          float a = args(1).float_value ();
-
-          if (error_state)
-            QUAD_ABORT1 ("expecting second argument to be a scalar");
-
-          float b = args(2).float_value ();
-
-          if (error_state)
-            QUAD_ABORT1 ("expecting third argument to be a scalar");
+          float a = args(1).xfloat_value ("quad: expecting second argument to be a scalar");
+          float b = args(2).xfloat_value ("quad: expecting third argument to be a scalar");
 
           int indefinite = 0;
           FloatIndefQuad::IntegralType indef_type
             = FloatIndefQuad::doubly_infinite;
           float bound = 0.0;
           if (xisinf (a) && xisinf (b))
             {
               indefinite = 1;
@@ -292,42 +261,36 @@ variable by routines @code{dblquad} and 
           bool have_sing = false;
           FloatColumnVector sing;
           FloatColumnVector tol;
 
           switch (nargin)
             {
             case 5:
               if (indefinite)
-                QUAD_ABORT1 ("singularities not allowed on infinite intervals");
+                error ("quad: singularities not allowed on infinite intervals");
 
               have_sing = true;
 
-              sing = FloatColumnVector (args(4).float_vector_value ());
-
-              if (error_state)
-                QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
+              sing = args(4).xfloat_vector_value ("quad: expecting vector of singularities as fourth argument");
 
             case 4:
-              tol = FloatColumnVector (args(3).float_vector_value ());
-
-              if (error_state)
-                QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
+              tol = args(3).xfloat_vector_value ("quad: expecting vector of tolerances as fifth argument");
 
               switch (tol.numel ())
                 {
                 case 2:
                   quad_opts.set_single_precision_relative_tolerance (tol (1));
 
                 case 1:
                   quad_opts.set_single_precision_absolute_tolerance (tol (0));
                   break;
 
                 default:
-                  QUAD_ABORT1 ("expecting tol to contain no more than two values");
+                  error ("quad: expecting tol to contain no more than two values");
                 }
 
             case 3:
               if (indefinite)
                 {
                   FloatIndefQuad iq (quad_float_user_function, bound,
                                      indef_type);
                   iq.set_options (quad_opts);
@@ -358,25 +321,18 @@ variable by routines @code{dblquad} and 
           retval(3) = abserr;
           retval(2) = nfun;
           retval(1) = ier;
           retval(0) = val;
 
         }
       else
         {
-          double a = args(1).double_value ();
-
-          if (error_state)
-            QUAD_ABORT1 ("expecting second argument to be a scalar");
-
-          double b = args(2).double_value ();
-
-          if (error_state)
-            QUAD_ABORT1 ("expecting third argument to be a scalar");
+          double a = args(1).xdouble_value ("quad: expecting second argument to be a scalar");
+          double b = args(2).xdouble_value ("quad: expecting third argument to be a scalar");
 
           int indefinite = 0;
           IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
           double bound = 0.0;
           if (xisinf (a) && xisinf (b))
             {
               indefinite = 1;
               indef_type = IndefQuad::doubly_infinite;
@@ -401,42 +357,36 @@ variable by routines @code{dblquad} and 
           bool have_sing = false;
           ColumnVector sing;
           ColumnVector tol;
 
           switch (nargin)
             {
             case 5:
               if (indefinite)
-                QUAD_ABORT1 ("singularities not allowed on infinite intervals");
+                error ("quad: singularities not allowed on infinite intervals");
 
               have_sing = true;
 
-              sing = ColumnVector (args(4).vector_value ());
-
-              if (error_state)
-                QUAD_ABORT1 ("expecting vector of singularities as fourth argument");
+              sing = args(4).vector_value ("quad: expecting vector of singularities as fourth argument");
 
             case 4:
-              tol = ColumnVector (args(3).vector_value ());
-
-              if (error_state)
-                QUAD_ABORT1 ("expecting vector of tolerances as fifth argument");
+              tol = args(3).xvector_value ("quad: expecting vector of tolerances as fifth argument");
 
               switch (tol.numel ())
                 {
                 case 2:
                   quad_opts.set_relative_tolerance (tol (1));
 
                 case 1:
                   quad_opts.set_absolute_tolerance (tol (0));
                   break;
 
                 default:
-                  QUAD_ABORT1 ("expecting tol to contain no more than two values");
+                  error ("quad: expecting tol to contain no more than two values");
                 }
 
             case 3:
               if (indefinite)
                 {
                   IndefQuad iq (quad_user_function, bound, indef_type);
                   iq.set_options (quad_opts);
                   val = iq.integrate (ier, nfun, abserr);
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1223,22 +1223,17 @@ from the list, so if a function was plac
 
   if (nargin == 1 || nargin == 2)
     {
       std::string arg = args(0).xstring_value ("atexit: FCN argument must be a string");
 
       bool add_mode = true;
 
       if (nargin == 2)
-        {
-          add_mode = args(1).bool_value ();
-
-          if (error_state)
-            error ("atexit: FLAG argument must be a logical value");
-        }
+        add_mode = args(1).xbool_value ("atexit: FLAG argument must be a logical value");
 
       if (add_mode)
         octave_add_atexit_function (arg);
       else
         {
           bool found = octave_remove_atexit_function (arg);
 
           if (nargout > 0)
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -318,23 +318,23 @@ If no files are found, return an empty c
 
       if (names.numel () > 0)
         {
           if (nargin == 1)
             retval =
               octave_env::make_absolute (load_path::find_first_of (names));
           else if (nargin == 2)
             {
-              std::string opt = args(1).string_value ();
+              std::string opt = args(1).xstring_value ("file_in_loadpath: expecting option to be a string");
 
-              if (! error_state && opt == "all")
+              if (opt == "all")
                 retval = Cell (make_absolute
                                (load_path::find_all_first_of (names)));
               else
-                error ("file_in_loadpath: invalid option");
+                error ("file_in_loadpath: invalid option `%s'", opt.c_str ());
             }
         }
       else
         error ("file_in_loadpath: FILE argument must not be empty");
     }
   else
     print_usage ();
 
@@ -398,23 +398,23 @@ If no files are found, return an empty c
       string_vector names = args(1).xall_strings ("file_in_path: FILE argument must be a string");
 
       if (names.numel () > 0)
         {
           if (nargin == 2)
             retval = search_path_for_file (path, names);
           else if (nargin == 3)
             {
-              std::string opt = args(2).string_value ();
+              std::string opt = args(2).xstring_value ("file_in_path: expecting option to be a string");
 
-              if (! error_state && opt == "all")
+              if (opt == "all")
                 retval = Cell (make_absolute
                                (search_path_for_all_files (path, names)));
               else
-                error ("file_in_path: invalid option");
+                error ("file_in_path: invalid option `%s'", opt.c_str ());
             }
         }
       else
         error ("file_in_path: FILE argument must not be empty");
     }
   else
     print_usage ();
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1294,25 +1294,18 @@ dimensions.\n\
       get_dimensions (args(0), "cell", dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          {
-            dims(i) = args(i).is_empty () ? 0 : args(i).nint_value ();
-
-            if (error_state)
-              {
-                error ("cell: expecting scalar arguments");
-                break;
-              }
-          }
+          dims(i) = (args(i).is_empty ()
+                     ? 0 : args(i).xnint_value ("cell: expecting scalar arguments"));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   check_dimensions (dims, "cell");
 
diff --git a/test/system.tst b/test/system.tst
--- a/test/system.tst
+++ b/test/system.tst
@@ -220,17 +220,17 @@
 
 %!assert (iscell (glob ([filesep "*"])))
 
 %!error <Invalid call to glob> glob ()
 %!error <Invalid call to glob> glob ("foo", 1)
 
 %!assert (ischar (file_in_path (path (), "date.m")))
 
-%!error <invalid option> file_in_path ("foo", "bar", 1)
+%!error <file_in_path: expecting option to be a string> file_in_path ("foo", "bar", 1)
 %!error <Invalid call to file_in_path> file_in_path ()
 %!error <Invalid call to file_in_path> file_in_path ("foo", "bar", "baz", "ooka")
 
 %!testif HAVE_GETPWUID
 %! x = getpwuid (getuid ());
 %! assert (x.dir, tilde_expand ("~"));
 %! assert (x.dir, tilde_expand (sprintf ("~%s", x.name)));
 %! assert ("foobar", tilde_expand ("foobar"));
