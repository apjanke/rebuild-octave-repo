# HG changeset patch
# User jwe
# Date 862191958 0
#      Mon Apr 28 01:45:58 1997 +0000
# Node ID 42901f9a926603591355760ae918d51c4a48e52d
# Parent  8aa189b811d0c17040a85effc60afe0d9ce0ed6e
[project @ 1997-04-28 01:44:22 by jwe]

diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -56,26 +56,27 @@ Software Foundation, 59 Temple Place - S
   DEFVAR_INT (#name, SBV_ ## name, defn, inst_as_fcn, 0, sv_fcn, doc)
 
 // Define a builtin-constant, and a corresponding variable that can be
 // redefined.  This is just the same as DEFVAR, except that it defines
 // `name' as a variable, and `__name__' as a constant that cannot be
 // redefined.
 
 #define DEFCONST(name, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INT (#name, SBV_ ## name, defn, inst_as_fcn, 0, sv_fcn, doc); \
-  DEFVAR_INT ("__" ## #name ## "__", XSBV_ ## name, defn, 0, 1, sv_fcn, doc)
+  DEFVAR_INT (#name, SBV_ ## name, defn, inst_as_fcn, false, sv_fcn, doc); \
+  DEFVAR_INT ("__" ## #name ## "__", XSBV_ ## name, defn, false, true, \
+	      sv_fcn, doc)
 
 // This one can be used when `name' cannot be used directly (if it is
 // already defined as a macro).  In that case, name is already a
 // quoted string, and the name of the structure has to be passed too.
 
 #define DEFCONSTX(name, sname, defn, inst_as_fcn, sv_fcn, doc) \
-  DEFVAR_INT (name, sname, defn, inst_as_fcn, 0, sv_fcn, doc); \
-  DEFVAR_INT ("__" ## name ## "__", X ## sname, defn, 0, 1, sv_fcn, doc)
+  DEFVAR_INT (name, sname, defn, inst_as_fcn, false, sv_fcn, doc); \
+  DEFVAR_INT ("__" ## name ## "__", X ## sname, defn, false, true, sv_fcn, doc)
 
 // How builtin variables are actually installed.
 
 #define DEFVAR_INT(name, sname, defn, inst_as_fcn, protect, sv_fcn, doc) \
   do \
     { \
       builtin_variable sname (name, octave_value (defn), inst_as_fcn, \
 			      protect, (sv_fcn != 0), sv_fcn, doc); \
@@ -91,26 +92,26 @@ Software Foundation, 59 Temple Place - S
 //     the argument list to this function.
 //
 //   nargout_name is the name of the int variable used to pass the
 //     number of output arguments this function is expected to produce.
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN(name, args_name, nargout_name, doc) \
-  DEFUN_INTERNAL (name, args_name, nargout_name, 0, doc)
+  DEFUN_INTERNAL (name, args_name, nargout_name, false, doc)
 
 // Define a builtin text-style function.
 //
 // This is like DEFUN, except that it defines a function that can be
 // called from the Octave language without using parenthesis to
 // surround the arguments). 
 
 #define DEFUN_TEXT(name, args_name, nargout_name, doc) \
-  DEFUN_INTERNAL (name, args_name, nargout_name, 1, doc)
+  DEFUN_INTERNAL (name, args_name, nargout_name, true, doc)
 
 // Define a mapper function.
 //
 //   name is the name of the function, unquoqted.
 //
 //   ch_map is a pointer to a function that should be called for
 //     integer arguments that are expected to creat integer results.
 //     (It's a kluge to handle character mappers like isalpha.)
@@ -133,25 +134,19 @@ Software Foundation, 59 Temple Place - S
 //   can_ret_cmplx_for_real is a flag that says whether this function
 //     can create a complex number given a real-valued  argument
 //     (e.g., sqrt (-1)).
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN_MAPPER(name, ch_map, d_d_map, d_c_map, c_c_map, \
 		     lo, hi, can_ret_cmplx_for_real, doc) \
-  do \
-    { \
-      builtin_mapper_function S ## name (ch_map, d_d_map, \
-					 d_c_map, c_c_map, lo, hi, \
-					 can_ret_cmplx_for_real, \
-					 #name, doc); \
-      install_builtin_mapper (S ## name); \
-    } \
-  while (0)
+  install_builtin_mapper \
+    (new octave_mapper (ch_map, d_d_map, d_c_map, c_c_map, lo, hi, \
+			can_ret_cmplx_for_real, #name))
 
 // Make alias another name for the existing function name.  This macro
 // must be used in the same file where name is defined, after the
 // definition for name.
 
 #define DEFALIAS(name, alias) \
   DEFALIAS_INTERNAL (name, alias)
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -31,30 +31,30 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 
 #include "byte-swap.h"
 #include "data-conv.h"
+#include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
-#include "mappers.h"
 #include "oct-obj.h"
+#include "oct-sym.h"
 #include "pager.h"
 #include "pt-exp.h"
-#include "pt-fvc.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // The default output format.  May be one of "binary", "text", or
 // "mat-binary".
@@ -2220,17 +2220,19 @@ do_save (ostream& os, symbol_record *sr,
     {
       error ("save: can only save variables, not functions");
       return;
     }
 
   string name = sr->name ();
   string help = sr->help ();
   int global = sr->is_linked_to_global ();
-  tree_fvc *tmp = sr->def ();
+  octave_symbol *tmp = sr->def ();
+
+  // XXX FIXME XXX -- do we really want to do this?
   octave_value tc = tmp->eval ();
 
   if (tc.is_undefined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
diff --git a/src/mkbuiltins b/src/mkbuiltins
--- a/src/mkbuiltins
+++ b/src/mkbuiltins
@@ -4,16 +4,17 @@ cat << \EOF
 // DO NOT EDIT!  Generated automatically by mkbuiltins.
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "builtins.h"
 #include "mappers.h"
+#include "oct-builtin.h"
 #include "oct-obj.h"
 #include "variables.h"
 
 EOF
 
 for file in "$@"; do
   fcn=`echo $file | sed -e 's/\.df//' -e 's/-/_/g'`
   echo "static void"
