# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235723501 18000
#      Fri Feb 27 03:31:41 2009 -0500
# Node ID 579de77acd909018af491c50ab07f936887f2887
# Parent  7de0992eb12300fdfd2587b0c1118c5b5713d941
strsplit.m: style fixes

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-27  John W. Eaton  <jwe@octave.org>
+
+	* strings/strsplit.m: Style fixes.
+
 2009-02-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/strsplit.m: Check also nargin.
 
 2009-02-26  John W. Eaton  <jwe@octave.org>
 
 	* deprecated/split.m: Add warning, not about version.
 
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -11,54 +11,57 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{s}] =} strsplit (@var{p}, @var{sep}, @var{strip_empty})
-## Splits a single string using one or more delimiters.
-## The result is returned as a cell array of strings. Consecutive delimiters
-## and delimiters at boundaries result in empty strings, unless @var{strip_empty} is true.
+## Split a single string using one or more delimiters and return a cell
+## array of strings.  Consecutive delimiters and delimiters at
+## boundaries result in empty strings, unless @var{strip_empty} is true.
 ## The default value of @var{strip_empty} is false.
+## @seealso{strtok}
 ## @end deftypefn
 
 function s = strsplit (p, sep, strip_empty = false)
-  if (nargin < 2 || nargin > 3 || ! ischar (p) || rows (p) > 1 \
-    || ! ischar (sep) || ! islogical (strip_empty))
+
+  if (nargin < 2 || nargin > 3 || ! ischar (p) || rows (p) > 1
+      || ! ischar (sep) || ! islogical (strip_empty))
     print_usage ();
   endif
 
   if (isempty (p))
     s = cell (size (p));
   else
-    ## split p according to delimiter.
+    ## Split p according to delimiter.
     if (isscalar (sep))
-      ## single separator
+      ## Single separator.
       idx = find (p == sep);
     else
-      ## multiple separators
+      ## Multiple separators.
       idx = strchr (p, sep);
     endif
 
-    ## get substring sizes.
+    ## Get substring sizes.
     if (isempty (idx))
       sizes = numel (p);
     else
       sizes = [idx(1)-1, diff(idx)-1, numel(p)-idx(end)];
     endif
-    ## remove separators.
+    ## Remove separators.
     p(idx) = []; 
     if (strip_empty)
-      ## omit zero lengths.
+      ## Omit zero lengths.
       sizes = sizes (sizes != 0); 
     endif
-    ## convert!
+    ## Convert!
     s = mat2cell (p, 1, sizes);
   endif
+
 endfunction
 
 %!assert (all (strcmp (strsplit ("road to hell", " "), {"road", "to", "hell"})))
 
 %!assert (all (strcmp (strsplit ("road to^hell", " ^"), {"road", "to", "hell"})))
 
 %!assert (all (strcmp (strsplit ("road   to--hell", " -", true), {"road", "to", "hell"})))
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2059,16 +2059,18 @@ private:
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
 	symbol_record& sr = do_insert (name);
 
 	sr.force_variable (context);
       }
+    else
+      p->second.force_variable (context);
   }
 
   octave_value& do_varref (const std::string& name, context_id context)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
