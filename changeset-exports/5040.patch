# HG changeset patch
# User jwe
# Date 1096293001 0
#      Mon Sep 27 13:50:01 2004 +0000
# Node ID b6ff3a0d3d17178127b4a2e96fc64652ee50de00
# Parent  8fa98abef34a241a548ae0424ed09e58b452bd4a
[project @ 2004-09-27 13:50:01 by jwe]

diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -487,16 +487,40 @@ value.  On IEEE-754 compatiable systems,
   else
     retval = (static_cast<double> (0x1FFFFFFFFFFFFFLL));
   return retval;
 }
 
 DEFUN (intmax, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmax (@var{type})\n\
+Return the largest integer that can be represented in an integer type.\n\
+The variable @var{type} can be\n\
+\n\
+@table @code\n\
+@item int8\n\
+signed 8-bit integer.\n\
+@item int16\n\
+signed 16-bit integer.\n\
+@item int32\n\
+signed 32-bit integer.\n\
+@item int64\n\
+signed 64-bit integer.\n\
+@item uint8\n\
+unsigned 8-bit integer.\n\
+@item uint16\n\
+unsigned 16-bit integer.\n\
+@item uint32\n\
+unsigned 32-bit integer.\n\
+@item uint64\n\
+unsigned 64-bit integer.\n\
+@end table\n\
+\n\
+The default for @var{type} is @code{uint32}.\n\
+@seealso{intmin,bitmax}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
@@ -526,16 +550,40 @@ DEFUN (intmax, args, ,
     error ("intmax: not defined for '%s' objects", cname.c_str ());
 
   return retval;
 }
 
 DEFUN (intmin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmin (@var{type})\n\
+Return the smallest integer that can be represented in an integer type.\n\
+The variable @var{type} can be\n\
+\n\
+@table @code\n\
+@item int8\n\
+signed 8-bit integer.\n\
+@item int16\n\
+signed 16-bit integer.\n\
+@item int32\n\
+signed 32-bit integer.\n\
+@item int64\n\
+signed 64-bit integer.\n\
+@item uint8\n\
+unsigned 8-bit integer.\n\
+@item uint16\n\
+unsigned 16-bit integer.\n\
+@item uint32\n\
+unsigned 32-bit integer.\n\
+@item uint64\n\
+unsigned 64-bit integer.\n\
+@end table\n\
+\n\
+The default for @var{type} is @code{uint32}.\n\
+@seealso{intmax,bitmax}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -221,32 +221,41 @@ transpose, *not* the complex conjugate t
 };
 
 static help_list keywords[] =
 {
   { "all_va_args",
     "Pass all unnamed arguments to another function call.", },
 
   { "break",
-    "Exit the innermost enclosing while or for loop.", },
+    "Exit the innermost enclosing do, while or for loop.", },
+
+  { "case",
+    "A case statement in an switch. Octave cases are exclusive and do not\n\
+fall-through as do C-language cases. A switch statement must have at least\n\
+one case.",},
 
   { "catch",
     "begin the cleanup part of a try-catch block", },
 
   { "continue",
-    "Jump to the end of the innermost enclosing while or for loop.", },
+    "Jump to the end of the innermost enclosing do, while or for loop.", },
+
+  { "do",
+    "Begin a do-until loop. This differs from a do-while loop in that the\n\
+body of the loop is executed at least once.",},
 
   { "else",
     "Alternate action for an if block.", },
 
   { "elseif",
     "Alternate conditional test for an if block.", },
 
   { "end",
-    "Mark the end of any for, if, while, or function block.", },
+    "Mark the end of any for, if, do, while, or function block.", },
 
   { "end_try_catch",
     "Mark the end of an try-catch block.", }, 
 
   { "end_unwind_protect",
     "Mark the end of an unwind_protect block.", }, 
 
   { "endfor",
@@ -274,31 +283,52 @@ static help_list keywords[] =
     "Produce 2-D plots using gnuplot-like command syntax.", },
 
   { "gsplot",
     "Produce 3-D plots using gnuplot-like command syntax.", },
 
   { "if",
     "Begin an if block.", },
 
+  { "otherwise",
+    "The default statement in a switch block.", },
+
   { "persistent",
     "Declare variables as persistent.", },
 
+  { "replot",
+    "Replot a graphic.", },
+
   { "return",
     "Return from a function.", },
 
+  { "static",
+    "Declare variables as persistent.", },
+
+  { "switch",
+    "Begin a switch statement.",},
+
   { "try",
     "Begin a try-catch block.", }, 
 
+  { "until",
+    "End a do-until loop.",},
+
   { "unwind_protect",
     "Begin an unwind_protect block.", }, 
 
   { "unwind_protect_cleanup",
     "Begin the cleanup section of an unwind_protect block.", }, 
 
+  { "varargin",
+    "Pass an arbitrary number of arguments into a function.",},
+
+  { "varargout",
+    "Pass an arbitrary number of arguments out of a function.",},
+
   { "while",
     "Begin a while loop.", },
 
   { 0, 0, },
 };
 
 // Return a copy of the operator or keyword names.
 
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -246,16 +246,19 @@ Open for reading only.\n\
 Open for writing only.\n\
 \n\
 @item O_RDWR\n\
 Open for reading and writing.\n\
 \n\
 @item O_APPEND\n\
 Append on each write.\n\
 \n\
+@item O_CREAT\n\
+Create the file if it does not exist.\n\
+\n\
 @item O_NONBLOCK\n\
 Nonblocking mode.\n\
 \n\
 @item O_SYNC\n\
 Wait for writes to complete.\n\
 \n\
 @item O_ASYNC\n\
 Asynchronous I/O.\n\
@@ -945,114 +948,129 @@ message.\n\
 
 void
 symbols_of_syscalls (void)
 {
 #if defined (F_DUPFD)
   DEFCONSTX ("F_DUPFD", SBV_F_DUPFD, F_DUPFD,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} F_DUPFD\n\
+Request to @code{fcntl} to return a duplicate file descriptor.\n\
 @end defvr");
 #endif
 
 #if defined (F_GETFD)
   DEFCONSTX ("F_GETFD", SBV_F_GETFD, F_GETFD,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} F_GETFD\n\
+Request to @code{fcntl} to return the file descriptor flags.\n\
 @end defvr");
 #endif
 
 #if defined (F_GETFL)
   DEFCONSTX ("F_GETFL", SBV_F_GETFL, F_GETFL,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} F_GETFL\n\
+Request to @code{fcntl} to return the file status flags.\n\
 @end defvr");
 #endif
 
 #if defined (F_SETFD)
   DEFCONSTX ("F_SETFD", SBV_F_SETFD, F_SETFD,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} F_SETFD\n\
+Request to @code{fcntl} to set the file descriptor flags.\n\
 @end defvr");
 #endif
 
 #if defined (F_SETFL)
   DEFCONSTX ("F_SETFL", SBV_F_SETFL, F_SETFL,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} F_SETFL\n\
+Request to @code{fcntl} to set the file status flags.\n\
 @end defvr");
 #endif
 
 #if defined (O_APPEND)
   DEFCONSTX ("O_APPEND", SBV_O_APPEND, O_APPEND,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_APPEND\n\
+File status flag, append on each write.\n\
 @end defvr");
 #endif
 
 #if defined (O_ASYNC)
   DEFCONSTX ("O_ASYNC", SBV_O_ASYNC, O_ASYNC,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_ASYNC\n\
+File status flag, asynchronous I/O.\n\
 @end defvr");
 #endif
 
 #if defined (O_CREAT)
   DEFCONSTX ("O_CREAT", SBV_O_CREAT, O_CREAT,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_CREAT\n\
+File status flag, create file if it does not exist.\n\
 @end defvr");
 #endif
 
 #if defined (O_EXCL)
   DEFCONSTX ("O_EXCL", SBV_O_EXCL, O_EXCL,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_EXCL\n\
+File status flag, file locking.\n\
 @end defvr");
 #endif
 
 #if defined (O_NONBLOCK)
   DEFCONSTX ("O_NONBLOCK", SBV_O_NONBLOCK, O_NONBLOCK,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_NONBLOCK\n\
+File status flag, non-blocking I/O.\n\
 @end defvr");
 #endif
 
 #if defined (O_RDONLY)
   DEFCONSTX ("O_RDONLY", SBV_O_RDONLY, O_RDONLY,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_RDONLY\n\
+File status flag, file opened for reading only.\n\
 @end defvr");
 #endif
 
 #if defined (O_RDWR)
   DEFCONSTX ("O_RDWR", SBV_O_RDWR, O_RDWR,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_RDWR\n\
+File status flag, file open for both reading and writing.\n\
 @end defvr");
 #endif
 
 #if defined (O_SYNC)
   DEFCONSTX ("O_SYNC", SBV_O_SYNC, O_SYNC,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_SYNC\n\
+File status flag, file opened for synchronous I/O.\n\
 @end defvr");
 #endif
 
 #if defined (O_TRUNC)
   DEFCONSTX ("O_TRUNC", SBV_O_TRUNC, O_TRUNC,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_TRUNC\n\
+File status flag, if file exists, truncate it when writing.\n\
 @end defvr");
 #endif
 
 #if defined (O_WRONLY)
   DEFCONSTX ("O_WRONLY", SBV_O_WRONLY, O_WRONLY,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} O_WRONLY\n\
+File status flag, file opened for writing only.\n\
 @end defvr");
 #endif
 
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -95,17 +95,18 @@ valid_identifier (const char *s)
 
 bool
 valid_identifier (const std::string& s)
 {
   return valid_identifier (s.c_str ());
 }
 
 DEFCMD (isvarname, args, ,
-  "@deftypefn {Built-in Function} {} isvarname (@var{name})\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isvarname (@var{name})\n\
 Return true if @var{name} is a valid variable name\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("isvarname");
