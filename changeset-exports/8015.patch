# HG changeset patch
# User sh@sh-laptop
# Date 1218054234 -7200
#      Wed Aug 06 22:23:54 2008 +0200
# Node ID 30629059b72dcc86a8ea614e7f37de8c462b6165
# Parent  44d206ae68c9b7448bc6bbdaf57da15761d6b2e5
Update the manual to reflect the changes in error output

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2008-08-06  Søren Hauberg  <hauberg@gmail.com>
+
+	* interpreter/basics.txi, interpreter/errors.txi,
+	interpreter/expr.txi, interpreter/func.txi,
+	interpreter/numbers.txi: Update format of error messages in examples.
+
 2008-07-29  David Bateman  <dbateman@free.fr>
 
 	* interpreter/numbers.txi, interpreter/plot.txi,
 	interpreter/quad.txi: Miscellaneous documentation fixes.
 
 	* control.txi, finance.txi, quaternion.txi: Delete.
 	* octave.texi: Remove all references to the above.
 	* Makefile.in: ditto.
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -732,18 +732,20 @@ octave:13> functon y = f (x) y = x^2; en
 @end example
 
 @noindent
 Octave will respond immediately with a message like this:
 
 @example
 parse error:
 
-  functon y = f (x) y = x^2; endfunction
-          ^
+  syntax error
+
+>>> functon y = f (x) y = x^2; endfunction
+             ^
 @end example
 
 @noindent
 For most parse errors, Octave uses a caret (@samp{^}) to mark the point
 on the line where it was unable to make sense of your input.  In this
 case, Octave generated an error message because the keyword
 @code{function} was misspelled.  Instead of seeing @samp{function f},
 Octave saw two consecutive variable names, which is invalid in this
@@ -762,19 +764,18 @@ octave:13> f ()
 
 @noindent
 Octave will respond with
 
 @c Using 'smallexample' to make text fit on page when creating smallbook.
 @smallexample
 @group
 error: `x' undefined near line 1 column 24
-error: evaluating expression near line 1, column 24
-error: evaluating assignment expression near line 1, column 22
-error: called from `f'
+error: called from:
+error:   f at line 1, column 22
 @end group
 @end smallexample
 
 @noindent
 This error message has several parts, and gives you quite a bit of
 information to help you locate the source of the error.  The messages
 are generated from the point of the innermost error, and provide a
 traceback of enclosing expressions and function calls.
@@ -782,25 +783,23 @@ traceback of enclosing expressions and f
 In the example above, the first line indicates that a variable named
 @samp{x} was found to be undefined near line 1 and column 24 of some
 function or expression.  For errors occurring within functions, lines
 are counted from the beginning of the file containing the function
 definition.  For errors occurring at the top level, the line number
 indicates the input line number, which is usually displayed in the
 prompt string.
 
-The second and third lines in the example indicate that the error
-occurred within an assignment expression, and the last line of the error
-message indicates that the error occurred within the function @code{f}.
-If the function @code{f} had been called from another function, for
-example, @code{g}, the list of errors would have ended with one more
-line:
+The second and third lines in the error message indicates that the error occurred
+within the function @code{f}. If the function @code{f} had been called from
+another function, for example, @code{g}, the list of errors would have ended with
+one more line:
 
 @example
-error: called from `g'
+error:   g at line 1, column 17
 @end example
 
 These lists of function calls usually make it fairly easy to trace the
 path your program took before the error occurred, and to correct the
 error before trying again.
 
 @node Executable Octave Programs
 @section Executable Octave Programs
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -96,24 +96,27 @@ endfunction
 @end example
 
 @noindent
 When it is called with no input arguments it produces the following
 error.
 
 @example
 f ()
-     @print{} Invalid call to f.  Correct usage is:
-     @print{} 
+
+Invalid call to f.  Correct usage is:
+
      @print{}  -- Function File: f (ARG1)
+     @print{}      Function help text goes here...
      @print{} 
      @print{} 
      @print{} 
-     @print{} error: evaluating if command near line 6, column 3
-     @print{} error: called from `f' in file `/home/jwe/octave/f.m'
+     @print{} error: called from:
+     @print{} error:   print_usage at line -1, column -1
+     @print{} error:   /home/jwe/octave/f.m at line 7, column 5
 @end example
 
 @DOCSTRING(print_usage)
 
 @DOCSTRING(usage)
 
 @DOCSTRING(beep)
 
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -938,19 +938,18 @@ b = s
 
 @noindent
 The number of values on the left side of the expression can, however,
 not exceed the number of values on the right side. For example, the
 following will produce an error.
 
 @c Using 'smallexample' to make text fit on page when creating smallbook.
 @smallexample
-[a, b, c, d] = [u, s, v] = svd (a)
+[a, b, c, d] = [u, s, v] = svd (a);
 @print{} error: element number 4 undefined in return list
-@print{} error: evaluating assignment expression near line 8, column 15
 @end smallexample
 
 @opindex +=
 A very common programming pattern is to increment an existing variable
 with a given value, like this
 
 @example
 a = a + 2;
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -171,18 +171,17 @@ endfunction
 @end example
 
 @noindent
 and then called the function with a matrix instead of a vector as the
 argument, Octave would have printed an error message like this:
 
 @example
 @group
-error: `retval' undefined near line 1 column 10
-error: evaluating index expression near line 7, column 1
+error: value on right hand side of assignment is undefined
 @end group
 @end example
 
 @noindent
 because the body of the @code{if} statement was never executed, and
 @code{retval} was never defined.  To prevent obscure errors like this,
 it is a good idea to always make sure that the return variables will
 always have values, and to produce meaningful error messages when
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -68,18 +68,20 @@ constant, a space must not appear betwee
 If it does, Octave will print an error message, like this:
 
 @example
 @group
 octave:13> 3 + 4 i
 
 parse error:
 
-  3 + 4 i
-        ^
+  syntax error
+
+>>> 3 + 4 i
+          ^
 @end group
 @end example
 
 @noindent
 You may also use @samp{j}, @samp{I}, or @samp{J} in place of the
 @samp{i} above.  All four forms are equivalent.
 
 @DOCSTRING(double)
@@ -162,17 +164,17 @@ but the expression
 @example
 [ a, 1 ]
 @end example
 
 @noindent
 produces the error
 
 @example
-error: number of rows must match near line 13, column 6
+error: number of rows must match (1 != 2) near line 13, column 6
 @end example
 
 @noindent
 (assuming that this expression was entered as the first thing on line
 13, of course).
 
 Inside the square brackets that delimit a matrix expression, Octave
 looks at the surrounding context to determine whether spaces and newline
@@ -243,17 +245,22 @@ expression
 @example
 [ 1 a ' ]
 @end example
 
 @noindent
 produces the error message
 
 @example
-error: unterminated string constant
+parse error:
+
+  syntax error
+
+>>> [ 1 a ' ]
+              ^
 @end example
 
 @noindent
 because not doing so would cause trouble when parsing the valid expression
 
 @example
 [ a 'foo' ]
 @end example
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-08-06  Soren Hauberg  <hauberg@gmail.com>
+
+	* error.cc (Ferror): Update format of error messages in exmple.
+	* parse.y: (Feval): Likewise.
+
 2008-08-06  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fsolve.cc (hybrd_info_to_fsolve_info):
 	Update INFO values to be compatible with Matlab's current fsolve.
 	(make_unimplemented_options, override_options): New functions.
 	(Ffsolve): Handle optimset options.  Update doc string.
 
 	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op,
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -972,21 +972,21 @@ function h () nargin == 1 || error (\"na
 @noindent\n\
 calling the function @code{f} will result in a list of messages that\n\
 can help you to quickly locate the exact location of the error:\n\
 \n\
 @smallexample\n\
 @group\n\
 f ()\n\
 error: nargin != 1\n\
-error: evaluating index expression near line 1, column 30\n\
-error: evaluating binary operator `||' near line 1, column 27\n\
-error: called from `h'\n\
-error: called from `g'\n\
-error: called from `f'\n\
+error: called from:\n\
+error:   error at line -1, column -1\n\
+error:   h at line 1, column 27\n\
+error:   g at line 1, column 15\n\
+error:   f at line 1, column 15\n\
 @end group\n\
 @end smallexample\n\
 \n\
 If the error message ends in a new line character, Octave will print the\n\
 message but will not display any traceback messages as it returns\n\
 control to the top level.  For example, modifying the error message\n\
 in the previous example to end in a new line causes Octave to only print\n\
 a single message:\n\
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3822,19 +3822,19 @@ value 3.1416 available.\n\
 eval(\"a = acos(-1);\");\n\
 @end example\n\
 \n\
 If an error occurs during the evaluation of @var{try} the @var{catch}\n\
 string is evaluated, as the following example shows.\n\
 \n\
 @example\n\
 eval ('error (\"This is a bad example\");',\n\
-      'printf (\"This error occurred:\\n%s\", lasterr ());');\n\
+      'printf (\"This error occurred:\\n%s\\n\", lasterr ());');\n\
      @print{} This error occurred:\n\
-        error: This is a bad example\n\
+        This is a bad example\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
