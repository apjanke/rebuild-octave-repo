# HG changeset patch
# User jwe
# Date 846993694 0
#      Sun Nov 03 04:01:34 1996 +0000
# Node ID 7d5338788d69d76d7196d99d0b43fe34bfa6ce76
# Parent  4690fe4c0333f7eb654b566376b7e3abb1b49ec2
[project @ 1996-11-03 04:01:34 by jwe]

diff --git a/src/getpwent.cc b/src/getpwent.cc
--- a/src/getpwent.cc
+++ b/src/getpwent.cc
@@ -74,33 +74,33 @@ mk_pw_map (struct passwd *pw)
        || defined (HAVE_ENDPWENT))
 static void
 gripe_not_implemented (const char *nm)
 {
   error ("%s: not implemented on this system", nm);
 }
 #endif
 
-DEFUN_DLD (getpwent, , ,
+DEFUN_DLD_BUILTIN (getpwent, , ,
  "getpwent ()\n\
 \n\
 Read an entry from the password-file stream, opening it if necessary.")
 {
   octave_value retval;
 
 #ifdef HAVE_GETPWENT
   retval = mk_pw_map (getpwent ());
 #else
   gripe_not_implemented ("getpwent");
 #endif
 
   return retval;
 }
 
-DEFUN_DLD (getpwuid, args, ,
+DEFUN_DLD_BUILTIN (getpwuid, args, ,
   "getpwuid (UID)\n\
 \n\
 Search for a password entry with a matching user ID.")
 {
   octave_value retval;
 
 #ifdef HAVE_GETPWUID
   int nargin = args.length ();
@@ -125,17 +125,17 @@ Search for a password entry with a match
     print_usage ("getpwuid");
 #else
   gripe_not_implemented ("getpwuid");
 #endif
 
   return retval;
 }
 
-DEFUN_DLD (getpwnam, args, ,
+DEFUN_DLD_BUILTIN (getpwnam, args, ,
   "getpwnam (NAME)\n\
 \n\
 Search for password entry with a matching username.")
 {
   octave_value retval;
 
 #ifdef HAVE_GETPWNAM
   int nargin = args.length ();
@@ -151,33 +151,33 @@ Search for password entry with a matchin
     print_usage ("getpwnam");
 #else
   gripe_not_implemented ("getpwnam");
 #endif
 
   return retval;
 }
 
-DEFUN_DLD (setpwent, , ,
+DEFUN_DLD_BUILTIN (setpwent, , ,
   "setpwent ()\n\
 \n\
 Rewind the password-file stream.")
 {
   octave_value retval;
 
 #ifdef HAVE_SETPWENT
   setpwent ();
 #else
   gripe_not_implemented ("setpwent");
 #endif
 
   return retval;
 }
 
-DEFUN_DLD (endpwent, , ,
+DEFUN_DLD_BUILTIN (endpwent, , ,
   "endpwent ()\n\
 \n\
 Close the password-file stream.")
 {
   octave_value retval;
 
 #ifdef HAVE_ENDPWENT
   endpwent ();
diff --git a/src/getrusage.cc b/src/getrusage.cc
--- a/src/getrusage.cc
+++ b/src/getrusage.cc
@@ -58,17 +58,17 @@ Software Foundation, 59 Temple Place - S
 #include "utils.h"
 
 #ifndef RUSAGE_SELF
 #define RUSAGE_SELF 0
 #endif
 
 // System resource functions.
 
-DEFUN_DLD (getrusage, , ,
+DEFUN_DLD_BUILTIN (getrusage, , ,
   "getrusage ()\n\
 \n\
 Return system resource statistics.")
 {
   Octave_map m;
   Octave_map tv_tmp;
 
 #if defined (HAVE_GETRUSAGE)
diff --git a/src/time.cc b/src/time.cc
--- a/src/time.cc
+++ b/src/time.cc
@@ -84,17 +84,17 @@ extract_tm (Octave_map &m, double& fract
 #ifdef HAVE_TMZONE
   string tstr = m ["zone"] . string_value ();
   tm.tm_zone = tstr.c_str ();
 #endif
 
   return &tm;
 }
 
-DEFUN_DLD (time, , ,
+DEFUN_DLD_BUILTIN (time, , ,
   "time ()\n\
 \n\
 Return current time.  On Unix systems, this is the number of\n\
 seconds since the epoch.")
 {
   time_t now;
   double fraction = 0.0;
 
@@ -116,17 +116,17 @@ seconds since the epoch.")
 
   now = time (0);
 
 #endif
  
   return (double) now + fraction;
 }
 
-DEFUN_DLD (gmtime, args, ,
+DEFUN_DLD_BUILTIN (gmtime, args, ,
   "gmtime (TIME)\n\
 \n\
 Given a value returned from time(), return a structure like that\n\
 returned from localtime() but with values corresponding to\n\
 Coordinated Universal Time (UTC).")
 {
   octave_value_list retval;
 
@@ -144,17 +144,17 @@ Coordinated Universal Time (UTC).")
 	}
     }
   else
     print_usage ("gmtime");
 
   return retval;
 }
 
-DEFUN_DLD (localtime, args, ,
+DEFUN_DLD_BUILTIN (localtime, args, ,
   "localtime (TIME)\n\
 \n\
 Given a value returned from time(), return a structure with\n\
 the following elements:\n\
 \n\
   usec  : microseconds after the second (0, 999999)\n\
   sec   : seconds after the minute (0, 61)\n\
   min   : minutes after the hour (0, 59)\n\
@@ -183,17 +183,17 @@ the following elements:\n\
 	}
     }
   else
     print_usage ("localtime");
 
   return retval;
 }
 
-DEFUN_DLD (mktime, args, ,
+DEFUN_DLD_BUILTIN (mktime, args, ,
   "mktime (TMSTRUCT)")
 {
   octave_value_list retval;
 
   if (args.length () == 1 && args(0).is_map ()) 
     {
       Octave_map map = args(0).map_value ();
 
@@ -205,17 +205,17 @@ DEFUN_DLD (mktime, args, ,
 	retval = (double) mktime (tm) + fraction;
     }
   else
     print_usage ("mktime");
 
   return retval;
 }
 
-DEFUN_DLD (strftime, args, ,
+DEFUN_DLD_BUILTIN (strftime, args, ,
   "strftime (FMT, TMSTRUCT)\n\
 \n\
 Performs `%' substitutions similar to those in printf.  Except where\n\
 noted, substituted fields have a fixed size; numeric fields are\n\
 padded if necessary.  Padding is with zeros by default; for fields\n\
 that display a single number, padding can be changed or inhibited by\n\
 following the `%' with one of the modifiers described below.\n\
 Unknown field specifiers are copied as normal characters.  All other\n\
