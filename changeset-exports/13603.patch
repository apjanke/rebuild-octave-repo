# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313406638 -7200
#      Mon Aug 15 13:10:38 2011 +0200
# Node ID 3a1ba08ad3923e7c695f7883ed6c50dee11f6ed4
# Parent  cfd231a4286ac61174ed2d06e1dab1abf6885784
Further development of IRC backend.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -19,18 +19,119 @@
 #include "ResourceManager.h"
 #include "IRCWidget.h"
 #include <QMessageBox>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QLabel>
 #include <QSettings>
 #include <QInputDialog>
+#include <QKeyEvent>
+#include <QScrollBar>
 #include "IRCClientImpl.h"
 
+ChatMessageTextEdit::ChatMessageTextEdit (QWidget *parent)
+  : QTextEdit (parent), m_completer (0)
+{
+  setMaximumHeight (50);
+  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum);
+}
+
+ChatMessageTextEdit::~ChatMessageTextEdit ()
+{
+}
+
+void
+ChatMessageTextEdit::setCompleter (QCompleter *completer)
+{
+  if (m_completer)
+    QObject::disconnect (m_completer, 0, this, 0);
+
+  m_completer = completer;
+
+  if (!m_completer)
+    return;
+
+  m_completer->setWidget (this);
+  m_completer->setCompletionMode (QCompleter::InlineCompletion);
+  m_completer->setCaseSensitivity (Qt::CaseInsensitive);
+  QObject::connect (m_completer, SIGNAL (activated (QString)),
+                    this, SLOT (insertCompletion (QString)));
+}
+
+QCompleter *
+ChatMessageTextEdit::completer () const
+{
+  return m_completer;
+}
+
+void
+ChatMessageTextEdit::insertCompletion(const QString& completion)
+{
+
+  if (m_completer->widget() != this)
+    return;
+  QTextCursor tc = textCursor();
+  int extra = completion.length() - m_completer->completionPrefix().length();
+  tc.movePosition(QTextCursor::Left);
+  tc.movePosition(QTextCursor::EndOfWord);
+  tc.insertText(completion.right(extra));
+  setTextCursor(tc);
+}
+
+QString
+ChatMessageTextEdit::textUnderCursor () const
+{
+  QTextCursor tc = textCursor ();
+  tc.select (QTextCursor::WordUnderCursor);
+  return tc.selectedText ();
+}
+
+void
+ChatMessageTextEdit::focusInEvent (QFocusEvent *e)
+{
+  if (m_completer)
+    m_completer->setWidget (this);
+  QTextEdit::focusInEvent (e);
+}
+
+void
+ChatMessageTextEdit::keyPressEvent (QKeyEvent *keyPressEvent)
+{
+  if (m_completer) {
+    switch (keyPressEvent->key ()) {
+    case Qt::Key_Enter:
+    case Qt::Key_Return:
+      if (! (keyPressEvent->modifiers () & Qt::ShiftModifier))
+        {
+          emit sendMessage (toPlainText ());
+          setText ("");
+        }
+      else
+        {
+          QTextEdit::keyPressEvent (keyPressEvent);
+        }
+      break;
+    case Qt::Key_Escape:
+    case Qt::Key_Tab:
+    case Qt::Key_Backtab:
+      keyPressEvent->ignore ();
+      return;
+    default:
+      QTextEdit::keyPressEvent(keyPressEvent);
+      break;
+      }
+
+    QString completionPrefix = textUnderCursor ();
+    if (completionPrefix != m_completer->completionPrefix ())
+      m_completer->setCompletionPrefix(completionPrefix);
+    m_completer->complete ();
+   }
+}
+
 IRCWidget::IRCWidget (QWidget * parent):
 QWidget (parent)
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   bool connectOnStartup = settings->value ("connectOnStartup").toBool ();
   m_autoIdentification = settings->value ("autoIdentification").toBool ();
   m_nickServPassword = settings->value ("nickServPassword").toString ();
 
@@ -49,31 +150,31 @@ QWidget (parent)
   layout->addWidget (m_chatWindow);
   layout->addWidget (bottomWidget);
   setLayout (layout);
 
   QHBoxLayout *bottomLayout = new QHBoxLayout ();
   m_nickButton = new QPushButton (bottomWidget);
   m_nickButton->setStatusTip (tr ((char *) "Click here to change your nick."));
   m_nickButton->setText (m_initialNick);
-  m_inputLine = new QLineEdit (bottomWidget);
-  m_inputLine->setStatusTip (tr ((char *) "Enter your message here."));
+  m_chatMessageTextEdit = new ChatMessageTextEdit (bottomWidget);
+  m_chatMessageTextEdit->setStatusTip (tr ((char *) "Enter your message here."));
 
   bottomLayout->addWidget (m_nickButton);
   bottomLayout->addWidget (new QLabel (":", this));
-  bottomLayout->addWidget (m_inputLine);
+  bottomLayout->addWidget (m_chatMessageTextEdit);
   bottomLayout->setMargin (0);
   bottomWidget->setLayout (bottomLayout);
 
   m_nickButton->setEnabled (false);
-  m_inputLine->setEnabled (false);
+  m_chatMessageTextEdit->setEnabled (false);
 
   //m_chatWindow->setFocusProxy (m_inputLine);
-  this->setFocusProxy (m_inputLine);
-  m_nickButton->setFocusProxy (m_inputLine);
+  this->setFocusProxy (m_chatMessageTextEdit);
+  m_nickButton->setFocusProxy (m_chatMessageTextEdit);
 
   QFont font;
   font.setFamily ("Courier");
   font.setPointSize (11);
   m_chatWindow->setFont (font);
   m_ircClientInterface = new IRCClientImpl (this);
   m_octaveChannel = m_ircClientInterface->ircChannelProxy ("#octave");
 
@@ -91,19 +192,22 @@ QWidget (parent)
            this, SLOT (handleNickChange (QString,QString)));
   connect (m_ircClientInterface, SIGNAL (notification (QString,QString)),
            this, SLOT (showNotification (QString,QString)));
   connect (m_ircClientInterface, SIGNAL (loggedIn (QString)),
            this, SLOT (handleLoggedIn(QString)));
   connect (m_ircClientInterface, SIGNAL (userNicknameChanged (QString)),
            this, SLOT (handleUserNicknameChanged (QString)));
 
-  connect (m_nickButton, SIGNAL (clicked ()), this, SLOT (nickPopup ()));
-  connect (m_inputLine, SIGNAL (returnPressed ()), this,
-	   SLOT (sendInputLine ()));
+  connect (m_nickButton, SIGNAL (clicked ()), this, SLOT (showChangeUserNickPopup ()));
+  connect (m_chatMessageTextEdit, SIGNAL (sendMessage (QString)),
+           this, SLOT (sendMessage (QString)));
+
+  m_chatMessageTextEdit->setCompleter
+      (new QCompleter (m_ircClientInterface->ircChannelProxy ("#octave")->userListModel (), this));
 
   if (connectOnStartup)
     connectToServer ();
 }
 
 void
 IRCWidget::connectToServer ()
 {
@@ -173,17 +277,17 @@ IRCWidget::showMessage (const QString& c
 void
 IRCWidget::showNotification (const QString& sender, const QString& message)
 {
   Q_UNUSED (sender);
   m_chatWindow->append (QString ("<font color=\"#007700\">%1</font>").arg (message));
 }
 
 void
-IRCWidget::nickPopup ()
+IRCWidget::showChangeUserNickPopup ()
 {
   bool ok;
   QString newNick =
     QInputDialog::getText (this, QString ("Nickname"),
 			   QString ("Type in your nickname:"),
                            QLineEdit::Normal, m_ircClientInterface->nickname (), &ok);
   if (ok)
     {
@@ -233,76 +337,52 @@ IRCWidget::sendMessage (QString message)
       message.replace ("<", "&lt;");
       message.replace (">", "&gt;");
       m_chatWindow->append (QString ("<b>%1:</b> %2").
                             arg (m_ircClientInterface->nickname ()).arg (message));
     }
 }
 
 void
-IRCWidget::sendInputLine ()
-{
-  sendMessage (m_inputLine->text ());
-  m_inputLine->setText ("");
-}
-
-void
 IRCWidget::handleLoggedIn (const QString &nick)
 {
   m_chatWindow->
     append (QString
             ("<i><font color=\"#00AA00\"><b>Successfully logged in as %1.</b></font></i>").
             arg (nick));
   m_nickButton->setEnabled (true);
-  m_inputLine->setEnabled (true);
+  m_chatMessageTextEdit->setEnabled (true);
   m_chatWindow->setEnabled (true);
-  m_inputLine->setFocus ();
+  m_chatMessageTextEdit->setFocus ();
 
 
   if (m_autoIdentification)
     {
       m_ircClientInterface->sendPrivateMessage("NickServ", QString ("identify %1").
                                           arg (m_nickServPassword));
     }
 }
 
 void
 IRCWidget::handleNickChange (const QString &oldNick, const QString &newNick)
 {
   m_chatWindow->append (QString ("%1 is now known as %2.").arg (oldNick).arg (newNick));
-  m_nickList.removeAll (QString (oldNick));
-  m_nickList.append (QString (newNick));
-  updateNickCompleter ();
 }
 
 void
 IRCWidget::handleUserJoined (const QString &nick, const QString &channel)
 {
-  m_chatWindow->append (QString ("<i>%1 has joined %2.</i>").arg (nick).
-                        arg (channel));
-  m_nickList.append (QString (nick));
-  updateNickCompleter ();
+  m_chatWindow->append (QString ("<i>%1 has joined %2.</i>").arg (nick).arg (channel));
 }
 
 void
 IRCWidget::handleUserQuit (const QString &nick, const QString &reason)
 {
-  m_chatWindow->append (QString ("<i>%1 has quit.(%2).</i>").arg (nick).
-                        arg (reason));
-  m_nickList.removeAll (QString (nick));
-  updateNickCompleter ();
+  m_chatWindow->append (QString ("<i>%1 has quit.(%2).</i>").arg (nick).arg (reason));
 }
 
 void
 IRCWidget::handleUserNicknameChanged (const QString &nick)
 {
   m_nickButton->setText (nick);
   QSettings *settings = ResourceManager::instance ()->settings ();
   settings->setValue ("IRCNick", nick);
 }
-
-void
-IRCWidget::updateNickCompleter ()
-{
-  QCompleter *completer = new QCompleter (m_nickList, this);
-  completer->setCompletionMode (QCompleter::InlineCompletion);
-  m_inputLine->setCompleter (completer);
-}
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -21,17 +21,44 @@
 
 #include <QWidget>
 #include <QTextEdit>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCompleter>
 #include "IRCClientInterface.h"
 
-class IRCWidget:public QWidget
+class ChatMessageTextEdit : public QTextEdit
+{
+  Q_OBJECT
+public:
+  explicit ChatMessageTextEdit(QWidget *parent = 0);
+  ~ChatMessageTextEdit();
+
+  void setCompleter(QCompleter *m_completer);
+  QCompleter *completer() const;
+
+signals:
+  void sendMessage (const QString& message);
+
+protected:
+  void keyPressEvent(QKeyEvent *e);
+  void focusInEvent(QFocusEvent *e);
+
+private slots:
+  void insertCompletion(const QString &completion);
+
+private:
+  QString textUnderCursor() const;
+
+private:
+  QCompleter *m_completer;
+};
+
+class IRCWidget : public QWidget
 {
 Q_OBJECT public:
   explicit IRCWidget (QWidget * parent);
   void connectToServer ();
 
 public slots:
   void showStatusMessage (const QString&);
   void showErrorMessage (const QString&);
@@ -42,28 +69,25 @@ public slots:
   void joinOctaveChannel (const QString& nick);
 
   void handleLoggedIn (const QString& nick);
   void handleNickChange (const QString& oldNick, const QString& newNick);
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleUserNicknameChanged (const QString& nick);
 
-  void nickPopup ();
+  void showChangeUserNickPopup ();
   void sendMessage (QString);
-  void sendInputLine ();
-  void updateNickCompleter ();
 
 private:
   IRCClientInterface *m_ircClientInterface;
   IRCChannelProxyInterface *m_octaveChannel;
   QTextEdit *m_chatWindow;
   QPushButton *m_nickButton;
-  QLineEdit *m_inputLine;
+  ChatMessageTextEdit *m_chatMessageTextEdit;
 
   QString m_initialNick;
   bool m_autoIdentification;
   QString m_nickServPassword;
   QString m_settingsFile;
-  QStringList m_nickList;
 };
 
 #endif // IRCWIDGET_H
diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -15,71 +15,79 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "IRCClientImpl.h"
 
 IRCServerMessage::IRCServerMessage (const QString& serverMessage)
 {
+  if (serverMessage.isEmpty ())
+    return;
+
   int position = 0;
   QString buffer;
 
   m_nick = "";
   m_user = "";
   m_host = "";
 
   // A server message starting with a prefix indicates
   // a prefix. A prefix has the format:
   // :nick!user@host
   // followed by a space character.
-  if (serverMessage.startsWith(":"))
+  if (serverMessage.startsWith (":"))
     {
       position++;
-      while ((serverMessage.at (position) != '!') && !serverMessage.at (position).isSpace ())
+      while ((position < serverMessage.size ())
+             &&(serverMessage.at (position) != '!')
+             && !serverMessage.at (position).isSpace ())
         {
           buffer.append (serverMessage.at (position));
           position++;
         }
-      m_nick = buffer, buffer.clear(), position++;
+      m_nick = buffer, buffer.clear (), position++;
 
       // If it belongs to the prefix, it must be concatenanted neatlessly without
       // any spaces.
       if (!serverMessage.at (position - 1).isSpace ())
         {
-          while (serverMessage.at (position) != '@')
+          while ((position < serverMessage.size ())
+                 && serverMessage.at (position) != '@')
             {
               buffer.append (serverMessage.at (position));
               position++;
             }
-          m_user = buffer, buffer.clear(), position++;
+          m_user = buffer, buffer.clear (), position++;
         }
 
       // If it belongs to the prefix, it must be concatenanted neatlessly without
       // any spaces.
       if (!serverMessage.at (position - 1).isSpace ())
         {
-          while (serverMessage.at (position) != ' ')
+          while ((position < serverMessage.size ())
+                 && serverMessage.at (position) != ' ')
             {
               buffer.append (serverMessage.at (position));
               position++;
             }
-          m_host = buffer, buffer.clear(), position++;
+          m_host = buffer, buffer.clear (), position++;
         }
     }
 
   // The next part is the command. The command can either be numeric
   // or a written command.
-  while (!serverMessage.at (position).isSpace ())
+  while ((position < serverMessage.size ())
+         && !serverMessage.at (position).isSpace ())
     {
       buffer.append (serverMessage.at (position));
       position++;
     }
-  m_command = buffer.toUpper(), buffer.clear(), position++;
-  m_codeNumber = m_command.toInt(&m_isNumeric);
+  m_command = buffer.toUpper (), buffer.clear (), position++;
+  m_codeNumber = m_command.toInt (&m_isNumeric);
 
   // Next: a list of parameters. If any of these parameters
   // starts with a colon, we have to read everything that follows
   // as a single parameter.
   bool readUntilEnd = false;
   while (position < serverMessage.size ())
     {
       if (buffer.isEmpty () && !readUntilEnd && (serverMessage.at (position) == ':'))
@@ -153,16 +161,23 @@ IRCChannelProxy::userListModel ()
 
 QString
 IRCChannelProxy::channelName ()
 {
   return m_channelName;
 }
 
 void
+IRCChannelProxy::setNickList (const QStringList &nickList)
+{
+  m_userList = nickList;
+  m_userListModel.setStringList (nickList);
+}
+
+void
 IRCChannelProxy::sendMessage (const QString& message)
 {
   QStringList arguments;
   arguments << m_channelName;
   arguments << message;
   m_clientInterface->sendIRCCommand (IRCCommand::PrivateMessage, arguments);
 }
 
@@ -325,17 +340,16 @@ void
 IRCClientImpl::handleUserQuit (const QString &nick, const QString &reason)
 {
   emit userQuit (nick, reason);
 }
 
 void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
-  //emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
   if (m_connected && !line.isEmpty())
     {
       IRCServerMessage ircServerMessage(line);
       if (ircServerMessage.isNumeric () == true)
         {
           switch (ircServerMessage.numericValue ())
             {
               case IRCReply::Welcome:
@@ -367,18 +381,19 @@ IRCClientImpl::handleIncomingLine (const
               case IRCReply::MessageOfTheDay:
               case IRCReply::MessageOfTheDayEnd:
               case IRCError::NoMessageOfTheDay:
                 break;
               case IRCReply::NoTopic:
               case IRCReply::Topic:
                 break;
               case IRCReply::NameReply:
-                emit debugMessage (QString ("LINKME: (NameReply) \'%1\'").arg (ircServerMessage.parameter(2)));
-                //m_nickList = event->getParam (3).split (QRegExp ("\\s+"), QString::SkipEmptyParts);
+                QString channel = ircServerMessage.parameter (2);
+                QString nickList = ircServerMessage.parameter (3);
+                ircChannelProxy (channel)->setNickList (nickList.split (QRegExp ("\\s+"), QString::SkipEmptyParts));
                 break;
             }
         }
       else
         {
           QString command = ircServerMessage.command ();
           if (command == IRCCommand::Nick)
             {
@@ -449,17 +464,16 @@ IRCClientImpl::handleIncomingLine (const
             }
         }
     }
 }
 
 void
 IRCClientImpl::sendLine (const QString &line)
 {
-  //emit debugMessage (QString (">>>send: \"%1\"").arg (line));
   if (m_connected)
     m_tcpSocket.write ((line + "\r\n").toStdString ().c_str ());
 }
 
 void
 IRCClientImpl::sendIRCCommand (const QString &command, const QStringList &arguments)
 {
   QString line = command;
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -257,16 +257,17 @@ class IRCChannelProxy : public IRCChanne
 {
   Q_OBJECT
 public:
   IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName, QObject *parent = 0);
   QTextDocument *conversationModel ();
   QStringListModel *userListModel ();
   QString channelName ();
 
+  void setNickList (const QStringList &nickList);
   void sendMessage (const QString& message);
   void sendJoinRequest ();
   void leave (const QString &reason);
 
 private:
   QString             m_channelName;
   QStringList         m_userList;
   QStringListModel    m_userListModel;
diff --git a/gui/src/qirc/IRCClientInterface.h b/gui/src/qirc/IRCClientInterface.h
--- a/gui/src/qirc/IRCClientInterface.h
+++ b/gui/src/qirc/IRCClientInterface.h
@@ -31,16 +31,17 @@ class IRCChannelProxyInterface : public 
   Q_OBJECT
 public:
   IRCChannelProxyInterface (IRCClientInterface *, const QString&, QObject *parent = 0) : QObject (parent) { }
   virtual ~IRCChannelProxyInterface () { }
 
   virtual QTextDocument *conversationModel () = 0;
   virtual QStringListModel *userListModel () = 0;
   virtual QString channelName () = 0;
+  virtual void setNickList (const QStringList& nickList) = 0;
   virtual void sendMessage (const QString& message) = 0;
   virtual void sendJoinRequest () = 0;
   virtual void leave (const QString& reason) = 0;
 };
 
 /**
   * \class IRCClientInterface
   * IRC Clients need to implement this interface.
