# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1469355427 -7200
#      Sun Jul 24 12:17:07 2016 +0200
# Node ID 8de49f15e18220a3ca0aa8389ff153c5c09700c0
# Parent  ed8a0c39e14ce9f185dfc1c45d5ef692f05cd725
doc: Fix "doubled words" typos (\b(\w+)\s+\1\b)

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -238,17 +238,17 @@ make_qstring_list (const std::list<std::
 
 static QStringList
 make_filter_list (const octave_link::filter_list& lst)
 {
   QStringList retval;
 
   // We have pairs of data, first being the list of extensions
   // exta;exb;extc etc second the name to use as filter name
-  // (optional).  Qt wants a a list of filters in the format of
+  // (optional).  Qt wants a list of filters in the format of
   // 'FilterName (space separated exts)'.
 
   for (octave_link::filter_list::const_iterator it = lst.begin ();
        it != lst.end (); it++)
     {
       QString ext = QString::fromStdString (it->first);
       QString name = QString::fromStdString (it->second);
 
diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -739,17 +739,17 @@ ft_text_renderer::process_character (FT_
                       xoffset += (delta.x >> 6);
                     }
 
                   x0 = xoffset + face->glyph->bitmap_left;
                   y0 = line_yoffset + yoffset + face->glyph->bitmap_top;
 
                   // 'w' seems to have a negative -1
                   // face->glyph->bitmap_left, this is so we don't
-                  // index out of bound, and assumes we we allocated
+                  // index out of bound, and assumes we've allocated
                   // the right amount of horizontal space in the bbox.
                   if (x0 < 0)
                     x0 = 0;
 
                   for (int r = 0; static_cast<unsigned int> (r) < bitmap.rows; r++)
                     for (int c = 0; static_cast<unsigned int> (c) < bitmap.width; c++)
                       {
                         unsigned char pix = bitmap.buffer[r*bitmap.width+c];
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -352,17 +352,17 @@ from the list, so if a function was plac
         retval = ovl (found);
     }
 
   return retval;
 }
 
 // Execute commands from a file and catch potential exceptions in a consistent
 // way.  This function should be called anywhere we might parse and execute
-// commands from a file before before we have entered the main loop in
+// commands from a file before we have entered the main loop in
 // toplev.cc.
 
 static void
 safe_source_file (const std::string& file_name,
                   const std::string& context = "",
                   bool verbose = false, bool require_file = true,
                   const std::string& warn_for = "")
 {
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -2203,17 +2203,17 @@ jit_typeinfo::intN (size_t nbits) const
   throw jit_fail_exception ("No such integer type");
 }
 
 jit_type *
 jit_typeinfo::do_type_of (const octave_value &ov) const
 {
   if (ov.is_function ())
     {
-      // FIXME: This is ugly, we need to finalize how we want to to this, then
+      // FIXME: This is ugly, we need to finalize how we want to do this, then
       // have octave_value fully support the needed functionality
       octave_builtin *builtin
         = dynamic_cast<octave_builtin *> (ov.internal_rep ());
       return builtin && builtin->to_jit () ? builtin->to_jit ()
                                            : unknown_function;
     }
 
   if (ov.is_range ())
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -183,17 +183,17 @@ read_binary_file_header (std::istream& i
 
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
     swap = octave::mach_info::words_big_endian ();
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
     swap = ! octave::mach_info::words_big_endian ();
   else
     {
       if (! quiet)
-        error ("load: unable to read read binary file");
+        error ("load: unable to read binary file");
 
       return -1;
     }
 
   char tmp = 0;
   is.read (&tmp, 1);
 
   flt_fmt = mopt_digit_to_float_format (tmp);
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -860,17 +860,17 @@ jit_convert::visit_switch_command (tree_
   // the first entry point is always the actual block.  Afterward, new blocks
   // are created for every case and the otherwise branch
   entry_blocks[0] = block;
   for (size_t i = 1; i < case_blocks_num; ++i)
     entry_blocks[i] = factory.create<jit_block> ("case_cond");
 
   jit_block *tail = factory.create<jit_block> ("switch_tail");
 
-  // if there's no otherwise branch, the the 'else' of the last branch
+  // if there's no otherwise branch, the 'else' of the last branch
   // has to point to the tail
   if (! has_otherwise)
     entry_blocks[entry_blocks.size()-1] = tail;
 
   // each branch in the case statement will have different breaks/continues
   block_list current_breaks = breaks;
   block_list current_continues = continues;
   breaks.clear ();
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -248,17 +248,17 @@ variable by routines @code{dblquad} and 
       switch (nargin)
         {
         case 5:
           if (indefinite)
             error ("quad: singularities not allowed on infinite intervals");
 
           have_sing = true;
 
-          sing = args(4).xfloat_vector_value ("quad: fifth argument SING must be a vector vector of singularities");
+          sing = args(4).xfloat_vector_value ("quad: fifth argument SING must be a vector of singularities");
 
         case 4:
           tol = args(3).xfloat_vector_value ("quad: TOL must be a 1 or 2-element vector");
 
           switch (tol.numel ())
             {
             case 2:
               quad_opts.set_single_precision_relative_tolerance (tol (1));
@@ -341,17 +341,17 @@ variable by routines @code{dblquad} and 
       switch (nargin)
         {
         case 5:
           if (indefinite)
             error ("quad: singularities not allowed on infinite intervals");
 
           have_sing = true;
 
-          sing = args(4).vector_value ("quad: fifth argument SING must be a vector vector of singularities");
+          sing = args(4).vector_value ("quad: fifth argument SING must be a vector of singularities");
 
         case 4:
           tol = args(3).xvector_value ("quad: TOL must be a 1 or 2-element vector");
 
           switch (tol.numel ())
             {
             case 2:
               quad_opts.set_relative_tolerance (tol (1));
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -171,17 +171,17 @@ split_name_with_package (const std::stri
     }
   else
     fname = name;
 }
 
 // Check the load path to see if file that defined this is still
 // visible.  If the file is no longer visible, then erase the
 // definition and move on.  If the file is visible, then we also
-// need to check to see whether the file has changed since the the
+// need to check to see whether the file has changed since the
 // function was loaded/parsed.  However, this check should only
 // happen once per prompt (for files found from relative path
 // elements, we also check if the working directory has changed
 // since the last time the function was loaded/parsed).
 //
 // FIXME: perhaps this should be done for all loaded functions when
 // the prompt is printed or the directory has changed, and then we
 // would not check for it when finding symbol definitions.
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -1091,17 +1091,17 @@ audioplayer::playblocking (void)
   PaError err;
   err = Pa_OpenStream (&stream, 0, &(output_parameters), get_fs (),
                        buffer_size, paClipOff, 0, 0);
   if (err != paNoError)
     error ("audioplayer: unable to open audio playback stream");
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
-    error ("audioplayer: unable to start start audio playback stream");
+    error ("audioplayer: unable to start audio playback stream");
 
   unsigned int start, end;
   start = get_sample_number ();
   end = get_end_sample ();
 
   octave::unwind_protect frame;
 
   frame.add_fcn (safe_audioplayer_stop, this);
diff --git a/libinterp/dldfcn/xzip.cc b/libinterp/dldfcn/xzip.cc
--- a/libinterp/dldfcn/xzip.cc
+++ b/libinterp/dldfcn/xzip.cc
@@ -406,17 +406,17 @@ xzip (const Array<std::string>& source_p
           {
             X::zip (path, dest_path);
           }
         catch (...)
           {
             // Error "handling" is not including filename on the output list.
             // Also remove created file which maybe was not even created
             // in the first place.  Note that it is possible for the file
-            // to exist in the first place and for for X::zip to not have
+            // to exist in the first place and for X::zip to not have
             // clobber it yet but we remove it anyway by design.
             octave::sys::unlink (dest_path);
             return;
           }
         dest_paths.push_front (dest_path);
       }
     // Skip all other file types and errors.
     return;
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -840,17 +840,17 @@ Programming Note: @code{nargin} does not
       octave_function *fcn_val = func.function_value (true);
       if (! fcn_val)
         error ("nargin: FCN must be a string or function handle");
 
       octave_user_function *fcn = fcn_val->user_function_value (true);
 
       if (! fcn)
         {
-          // Matlab gives up for histc, so maybe it's ok that that we
+          // Matlab gives up for histc, so maybe it's ok that we
           // give up sometimes too?
 
           std::string type = fcn_val->type_name ();
           error ("nargin: number of input arguments unavailable for %s objects",
                  type.c_str ());
         }
 
       tree_parameter_list *param_list = fcn->parameter_list ();
@@ -959,17 +959,17 @@ returns -1 for all anonymous functions.
       octave_function *fcn_val = func.function_value (true);
       if (! fcn_val)
         error ("nargout: FCN must be a string or function handle");
 
       octave_user_function *fcn = fcn_val->user_function_value (true);
 
       if (! fcn)
         {
-          // Matlab gives up for histc, so maybe it's ok that that we
+          // Matlab gives up for histc, so maybe it's ok that we
           // give up sometimes too?
 
           std::string type = fcn_val->type_name ();
           error ("nargout: number of output arguments unavailable for %s objects",
                  type.c_str ());
         }
 
       tree_parameter_list *ret_list = fcn->return_list ();
diff --git a/liboctave/numeric/oct-rand.cc b/liboctave/numeric/oct-rand.cc
--- a/liboctave/numeric/oct-rand.cc
+++ b/liboctave/numeric/oct-rand.cc
@@ -560,17 +560,17 @@ octave_rand::do_float_nd_array (const di
       fill (retval.numel (), retval.fortran_vec (), a);
     }
 
   return retval;
 }
 
 // Make the random number generator give us a different sequence every
 // time we start octave unless we specifically set the seed.  The
-// technique used below will cycle monthly, but it it does seem to
+// technique used below will cycle monthly, but it does seem to
 // work ok to give fairly different seeds each time Octave starts.
 
 void
 octave_rand::initialize_ranlib_generators (void)
 {
   octave::sys::localtime tm;
   int stored_distribution = current_distribution;
   F77_FUNC (setcgn, SETCGN) (uniform_dist);
diff --git a/scripts/geometry/inpolygon.m b/scripts/geometry/inpolygon.m
--- a/scripts/geometry/inpolygon.m
+++ b/scripts/geometry/inpolygon.m
@@ -32,17 +32,17 @@
 ## @seealso{delaunay}
 ## @end deftypefn
 
 ## Author: Frederick (Rick) A Niles <niles@rickniles.com>
 ## Created: 14 November 2006
 
 ## Vectorized by Søren Hauberg <soren@hauberg.org>
 
-## The method for determining if a point is in in a polygon is based on
+## The method for determining if a point is in a polygon is based on
 ## the algorithm shown on
 ## http://local.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/
 ## and is credited to Randolph Franklin.
 
 function [in, on] = inpolygon (x, y, xv, yv)
 
   if (nargin != 4)
     print_usage ();
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -195,17 +195,17 @@ function hax = newplot (hsave = [])
       ## delete (allchild (ca));
       ## reset (ca);
       ###########################
       ## Actually, __go_axes_init__ does both less and more.
       ## It doesn't really remove all children since it re-instantiates
       ## xlabel, ylabel, zlabel, and title text objects.
       ## Also it preserves font properties like fontsize.
       ## For the time being, in order to have axis labels and title work,
-      ## the above code is is required.
+      ## the above code is required.
   endswitch
 
   ## Reset line and color styles when hold is not on
   if (! strcmp (anp, "add"))
     set (ca, "colororderindex", 1, "linestyleorderindex", 1);
   endif
 
   if (nargout > 0)
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -161,17 +161,17 @@ function h = subplot (varargin)
     rows = round (rows);
     index = round (index);
 
     if (any (index < 1) || any (index > rows*cols))
       error ("subplot: INDEX value must be >= 1 and <= ROWS*COLS");
     endif
 
     if (rows < 1 || cols < 1 || index < 1)
-      error ("subplot: ROWS, COLS, and INDEX must be be positive");
+      error ("subplot: ROWS, COLS, and INDEX must be positive");
     endif
   endif
 
   ## Process "align" and "replace" options
   idx = strcmpi (varargin, "align");
   if (any (idx))
     align_axes = true;
     varargin(idx) = [];
diff --git a/scripts/startup/__finish__.m b/scripts/startup/__finish__.m
--- a/scripts/startup/__finish__.m
+++ b/scripts/startup/__finish__.m
@@ -22,17 +22,17 @@
 ## path or current working directory and execute it.
 ##
 ## This function is intended to be executed upon a clean exit from Octave.
 ## This is accomplished in the system script @file{startup/octaverc} by use of
 ## the built-in function @code{atexit}.
 ## @seealso{atexit}
 ## @end deftypefn
 
-## No function declaration, this is is an Octave script.  This means we are
+## No function declaration, this is an Octave script.  This means we are
 ## still in the base workspace with access to all user variables.
 
 if (exist ("finish", "file"))
   finish;  # No arg list here since finish might be a script.
 endif
 
 
 ## No test needed for internal helper m-file.
