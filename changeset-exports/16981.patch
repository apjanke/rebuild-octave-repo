# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1373795758 -7200
#      Sun Jul 14 11:55:58 2013 +0200
# Node ID e86df0d43309fbe0d4165589c1cf4084f4213fbd
# Parent  1909e1ed63e61b1724afdb26f001d8da4b17716e
make ctrl-w available for readline in the gui terminal

* file-etior.cc(construct): save close action into class variable, call
  set_shortcuts after initiallization of all calss wide actions
  (set_shortcuts): add close action
* file-editor.h: add new action _close_action

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -814,19 +814,16 @@ file_editor::construct (void)
        _mru_file_actions[i] = new QAction (this);
        _mru_file_actions[i]->setVisible (false);
     }
 
   // some actions are disabled from the beginning
   _copy_action->setEnabled (false);
   _cut_action->setEnabled (false);
 
-  // shortcuts
-  set_shortcuts (true);
-
   _run_action->setShortcutContext (Qt::WindowShortcut);
   _save_action->setShortcutContext (Qt::WindowShortcut);
   _save_as_action->setShortcutContext (Qt::WindowShortcut);
 
   _print_action->setShortcutContext (Qt::WindowShortcut);
 
   _next_bookmark_action->setShortcutContext (Qt::WindowShortcut);
   _previous_bookmark_action->setShortcutContext (Qt::WindowShortcut);
@@ -869,21 +866,20 @@ file_editor::construct (void)
   fileMenu->addAction (open_action);
   fileMenu->addMenu (_mru_file_menu);
 
   fileMenu->addSeparator ();
   fileMenu->addAction (_save_action);
   fileMenu->addAction (_save_as_action);
 
   fileMenu->addSeparator ();
-  fileMenu->addAction (QIcon::fromTheme("window-close",
-                                      QIcon (":/actions/icons/fileclose.png")),
-                       tr ("&Close"),
-                       this, SLOT (request_close_file (bool)),
-                             QKeySequence::Close);
+  _close_action =
+      fileMenu->addAction (QIcon::fromTheme("window-close",
+                                  QIcon (":/actions/icons/fileclose.png")),
+                       tr ("&Close"), this, SLOT (request_close_file (bool)));
   fileMenu->addAction (QIcon::fromTheme("window-close",
                                       QIcon (":/actions/icons/fileclose.png")),
                        tr ("Close All"),
                        this, SLOT (request_close_all_files (bool)));
   fileMenu->addAction (QIcon::fromTheme("window-close",
                                       QIcon (":/actions/icons/fileclose.png")),
                        tr ("Close Other Files"),
                        this, SLOT (request_close_other_files (bool)));
@@ -923,24 +919,29 @@ file_editor::construct (void)
   _debug_menu->addSeparator ();
   // The other debug actions will be added by the main window.
   _menu_bar->addMenu (_debug_menu);
 
   QMenu *_run_menu = new QMenu (tr ("&Run"), _menu_bar);
   _run_menu->addAction (_run_action);
   _menu_bar->addMenu (_run_menu);
 
+  // shortcuts
+  set_shortcuts (true);
+
+  // layout
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->addWidget (_menu_bar);
   vbox_layout->addWidget (_tool_bar);
   vbox_layout->addWidget (_tab_widget);
   vbox_layout->setMargin (0);
   editor_widget->setLayout (vbox_layout);
   setWidget (editor_widget);
 
+  // signals
   connect (main_win (), SIGNAL (new_file_signal (const QString&)),
            this, SLOT (request_new_file (const QString&)));
 
   connect (main_win (), SIGNAL (open_file_signal (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
   connect (new_action, SIGNAL (triggered ()),
            this, SLOT (request_new_file ()));
@@ -1205,16 +1206,17 @@ file_editor::set_shortcuts (bool set)
       _previous_bookmark_action->setShortcut (Qt::SHIFT + Qt::Key_F2);
       _toggle_bookmark_action->setShortcut (Qt::Key_F7);
 
       _print_action->setShortcut (QKeySequence::Print);
       _run_action->setShortcut (Qt::ControlModifier+ Qt::Key_R);
 
       _save_action->setShortcut (QKeySequence::Save);
       _save_as_action->setShortcut (QKeySequence::SaveAs);
+      _close_action->setShortcut (QKeySequence::Close);
 
       _redo_action->setShortcut (QKeySequence::Redo);
       _undo_action->setShortcut (QKeySequence::Undo);
     }
   else
     {
       QKeySequence no_key = QKeySequence ();
 
@@ -1232,16 +1234,17 @@ file_editor::set_shortcuts (bool set)
       _previous_bookmark_action->setShortcut (no_key);
       _toggle_bookmark_action->setShortcut (no_key);
 
       _print_action->setShortcut (no_key);
       _run_action->setShortcut (no_key);
 
       _save_action->setShortcut (no_key);
       _save_as_action->setShortcut (no_key);
+      _close_action->setShortcut (no_key);
 
       _redo_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
     }
 }
 
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -197,16 +197,17 @@ private:
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
 
   QAction *_save_action;
   QAction *_save_as_action;
+  QAction *_close_action;
 
   QAction *_redo_action;
   QAction *_undo_action;
 
   QTabWidget *_tab_widget;
 
   int _marker_breakpoint;
 
