# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253697052 -7200
#      Wed Sep 23 11:10:52 2009 +0200
# Node ID 0d3b248f4ab6775cbd7a1d56c8b235e5e977296b
# Parent  afcf852256d2e69353a263f7a6854a4c0e76258d
further improve mixed real-complex division

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (stack_complex_matrix, unstack_complex_matrix): New
+	static funcs.
+	(Matrix::solve (..., const ComplexMatrix&, ...)): Use the above funcs.
+	Improve forwarding.
+	* fMatrix.cc (stack_complex_matrix, unstack_complex_matrix): New
+	static funcs.
+	(FloatMatrix::solve (..., const FloatComplexMatrix&, ...)): Use the
+	above funcs.  Improve forwarding.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-defs.h (blas_trans_type): New enum.
 	(get_blas_char): New inline func.
 	* dMatrix.cc (Matrix::utsolve, Matrix::ltsolve, Matrix::solve):
 	Support transt parameter.
 	* fMatrix.cc (FloatMatrix::utsolve, FloatMatrix::ltsolve,
 	FloatMatrix::solve): Ditto.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1906,16 +1906,23 @@ Matrix
 Matrix::solve (MatrixType &typ, const Matrix& b) const
 {
   octave_idx_type info;
   double rcon;
   return solve (typ, b, info, rcon, 0);
 }
 
 Matrix
+Matrix::solve (MatrixType &typ, const Matrix& b, octave_idx_type& info) const
+{
+  double rcon;
+  return solve (typ, b, info, rcon, 0);
+}
+
+Matrix
 Matrix::solve (MatrixType &typ, const Matrix& b, octave_idx_type& info, 
 	       double& rcon) const
 {
   return solve (typ, b, info, rcon, 0);
 }
 
 Matrix
 Matrix::solve (MatrixType &mattype, const Matrix& b, octave_idx_type& info,
@@ -1951,43 +1958,71 @@ Matrix::solve (MatrixType &mattype, cons
     }
 
   return retval;
 }
 
 ComplexMatrix
 Matrix::solve (MatrixType &typ, const ComplexMatrix& b) const
 {
-  ComplexMatrix tmp (*this);
-  return tmp.solve (typ, b);
+  octave_idx_type info;
+  double rcon;
+  return solve (typ, b, info, rcon, 0);
 }
 
 ComplexMatrix
 Matrix::solve (MatrixType &typ, const ComplexMatrix& b, 
   octave_idx_type& info) const
 {
-  ComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info);
+  double rcon;
+  return solve (typ, b, info, rcon, 0);
 }
 
 ComplexMatrix
 Matrix::solve (MatrixType &typ, const ComplexMatrix& b, octave_idx_type& info,
 	       double& rcon) const
 {
-  ComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info, rcon);
+  return solve (typ, b, info, rcon, 0);
+}
+
+static Matrix
+stack_complex_matrix (const ComplexMatrix& cm)
+{
+  octave_idx_type m = cm.rows (), n = cm.cols (), nel = m*n;
+  Matrix retval (m, 2*n);
+  const Complex *cmd = cm.data ();
+  double *rd = retval.fortran_vec ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      rd[i] = std::real (cmd[i]);
+      rd[nel+i] = std::imag (cmd[i]);
+    }
+  return retval;
+}
+
+static ComplexMatrix
+unstack_complex_matrix (const Matrix& sm)
+{
+  octave_idx_type m = sm.rows (), n = sm.cols () / 2, nel = m*n;
+  ComplexMatrix retval (m, n);
+  const double *smd = sm.data ();
+  Complex *rd = retval.fortran_vec ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    rd[i] = Complex (smd[i], smd[nel+i]);
+  return retval;
 }
 
 ComplexMatrix
 Matrix::solve (MatrixType &typ, const ComplexMatrix& b, octave_idx_type& info,
 	       double& rcon, solve_singularity_handler sing_handler,
 	       bool singular_fallback, blas_trans_type transt) const
 {
-  ComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info, rcon, sing_handler, singular_fallback, transt);
+  Matrix tmp = stack_complex_matrix (b);
+  tmp = solve (typ, tmp, info, rcon, sing_handler, singular_fallback, transt);
+  return unstack_complex_matrix (tmp);
 }
 
 ColumnVector
 Matrix::solve (MatrixType &typ, const ColumnVector& b) const
 {
   octave_idx_type info; double rcon;
   return solve (typ, b, info, rcon);
 }
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1905,16 +1905,23 @@ FloatMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatMatrix& b) const
 {
   octave_idx_type info;
   float rcon;
   return solve (typ, b, info, rcon, 0);
 }
 
 FloatMatrix
+FloatMatrix::solve (MatrixType &typ, const FloatMatrix& b, octave_idx_type& info) const
+{
+  float rcon;
+  return solve (typ, b, info, rcon, 0);
+}
+
+FloatMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatMatrix& b, octave_idx_type& info, 
 	       float& rcon) const
 {
   return solve (typ, b, info, rcon, 0);
 }
 
 FloatMatrix
 FloatMatrix::solve (MatrixType &mattype, const FloatMatrix& b, octave_idx_type& info,
@@ -1950,43 +1957,71 @@ FloatMatrix::solve (MatrixType &mattype,
     }
 
   return retval;
 }
 
 FloatComplexMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatComplexMatrix& b) const
 {
-  FloatComplexMatrix tmp (*this);
-  return tmp.solve (typ, b);
+  octave_idx_type info;
+  float rcon;
+  return solve (typ, b, info, rcon, 0);
 }
 
 FloatComplexMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatComplexMatrix& b, 
   octave_idx_type& info) const
 {
-  FloatComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info);
+  float rcon;
+  return solve (typ, b, info, rcon, 0);
 }
 
 FloatComplexMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatComplexMatrix& b, octave_idx_type& info,
 	       float& rcon) const
 {
-  FloatComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info, rcon);
+  return solve (typ, b, info, rcon, 0);
+}
+
+static FloatMatrix
+stack_complex_matrix (const FloatComplexMatrix& cm)
+{
+  octave_idx_type m = cm.rows (), n = cm.cols (), nel = m*n;
+  FloatMatrix retval (m, 2*n);
+  const FloatComplex *cmd = cm.data ();
+  float *rd = retval.fortran_vec ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    {
+      rd[i] = std::real (cmd[i]);
+      rd[nel+i] = std::imag (cmd[i]);
+    }
+  return retval;
+}
+
+static FloatComplexMatrix
+unstack_complex_matrix (const FloatMatrix& sm)
+{
+  octave_idx_type m = sm.rows (), n = sm.cols () / 2, nel = m*n;
+  FloatComplexMatrix retval (m, n);
+  const float *smd = sm.data ();
+  FloatComplex *rd = retval.fortran_vec ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    rd[i] = FloatComplex (smd[i], smd[nel+i]);
+  return retval;
 }
 
 FloatComplexMatrix
 FloatMatrix::solve (MatrixType &typ, const FloatComplexMatrix& b, octave_idx_type& info,
 	       float& rcon, solve_singularity_handler sing_handler,
 	       bool singular_fallback, blas_trans_type transt) const
 {
-  FloatComplexMatrix tmp (*this);
-  return tmp.solve (typ, b, info, rcon, sing_handler, singular_fallback, transt);
+  FloatMatrix tmp = stack_complex_matrix (b);
+  tmp = solve (typ, tmp, info, rcon, sing_handler, singular_fallback, transt);
+  return unstack_complex_matrix (tmp);
 }
 
 FloatColumnVector
 FloatMatrix::solve (MatrixType &typ, const FloatColumnVector& b) const
 {
   octave_idx_type info; float rcon;
   return solve (typ, b, info, rcon);
 }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-m-cm.cc: Declare and install trans_ldiv operator.
+	* OPERATORS/op-fm-fcm.cc: Ditto.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::op_trans_ldiv, op_herm_ldiv): New enum constants.
 	* ov.cc (decompose_binary_op, binary_op_fcn_name): Support them.
 	* xdiv.h: Include mx-defs.h, delete forward decls.
 	* xdiv.cc (xleftdiv): Support transt parameter.
 	(xdiv): Optimize.
 	* pt-cbinop.cc (simplify_ldiv_op): New static func.
diff --git a/src/OPERATORS/op-fm-fcm.cc b/src/OPERATORS/op-fm-fcm.cc
--- a/src/OPERATORS/op-fm-fcm.cc
+++ b/src/OPERATORS/op-fm-fcm.cc
@@ -78,16 +78,29 @@ DEFBINOP (ldiv, float_matrix, float_comp
   
   FloatComplexMatrix ret = xleftdiv (v1.float_matrix_value (), 
 				v2.float_complex_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
+DEFBINOP (trans_ldiv, float_matrix, float_complex_matrix)
+{
+  CAST_BINOP_ARGS (const octave_float_matrix&, 
+                   const octave_float_complex_matrix&);
+  MatrixType typ = v1.matrix_type ();
+  
+  FloatComplexMatrix ret = xleftdiv (v1.float_matrix_value (), 
+                         v2.float_complex_matrix_value (), typ, blas_trans);
+
+  v1.matrix_type (typ);
+  return ret;
+}
+
 DEFNDCMPLXCMPOP_FN (lt, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_lt)
 DEFNDCMPLXCMPOP_FN (le, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_le)
 DEFNDCMPLXCMPOP_FN (eq, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_eq)
 DEFNDCMPLXCMPOP_FN (ge, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, mx_el_ge)
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -74,16 +74,28 @@ DEFBINOP (ldiv, matrix, complex_matrix)
   
   ComplexMatrix ret = xleftdiv (v1.matrix_value (), 
 				v2.complex_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
+DEFBINOP (trans_ldiv, matrix, complex_matrix)
+{
+  CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
+  MatrixType typ = v1.matrix_type ();
+  
+  ComplexMatrix ret = xleftdiv (v1.matrix_value (), 
+                         v2.complex_matrix_value (), typ, blas_trans);
+
+  v1.matrix_type (typ);
+  return ret;
+}
+
 DEFNDCMPLXCMPOP_FN (lt, matrix, complex_matrix, array, complex_array, mx_el_lt)
 DEFNDCMPLXCMPOP_FN (le, matrix, complex_matrix, array, complex_array, mx_el_le)
 DEFNDCMPLXCMPOP_FN (eq, matrix, complex_matrix, array, complex_array, mx_el_eq)
 DEFNDCMPLXCMPOP_FN (ge, matrix, complex_matrix, array, complex_array, mx_el_ge)
 DEFNDCMPLXCMPOP_FN (gt, matrix, complex_matrix, array, complex_array, mx_el_gt)
 DEFNDCMPLXCMPOP_FN (ne, matrix, complex_matrix, array, complex_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_mul, matrix, complex_matrix, array, complex_array, product)
@@ -125,16 +137,18 @@ install_m_cm_ops (void)
   INSTALL_BINOP (op_gt, octave_matrix, octave_complex_matrix, gt);
   INSTALL_BINOP (op_ne, octave_matrix, octave_complex_matrix, ne);
   INSTALL_BINOP (op_el_mul, octave_matrix, octave_complex_matrix, el_mul);
   INSTALL_BINOP (op_el_div, octave_matrix, octave_complex_matrix, el_div);
   INSTALL_BINOP (op_el_pow, octave_matrix, octave_complex_matrix, el_pow);
   INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_complex_matrix, el_ldiv);
   INSTALL_BINOP (op_el_and, octave_matrix, octave_complex_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_matrix, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_trans_ldiv, octave_matrix, octave_complex_matrix, trans_ldiv);
+  INSTALL_BINOP (op_herm_ldiv, octave_matrix, octave_complex_matrix, trans_ldiv);
 
   INSTALL_CATOP (octave_matrix, octave_complex_matrix, m_cm);
 
   INSTALL_ASSIGNCONV (octave_matrix, octave_complex_matrix, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_float_matrix, octave_complex_matrix, octave_float_complex_matrix);
 
   INSTALL_WIDENOP (octave_matrix, octave_complex_matrix, complex_matrix_conv);
 }
