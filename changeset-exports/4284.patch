# HG changeset patch
# User jwe
# Date 1041661207 0
#      Sat Jan 04 06:20:07 2003 +0000
# Node ID 75ed329c117b1af84c06155473e1b9d5e108995b
# Parent  07c990a9edf5c9055b07dc0bfd9454c65fea4cca
[project @ 2003-01-04 06:20:07 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,13 +1,19 @@
+2003-01-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (BUILD_CC, BUILD_CFLAGS, BUILD_CXX,
+	BUILD_CXXFLAGS): Kluge for Sun C/C++.
+
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Default value of BUILD_CXX is $CXX, not g++.
 	(AH_BOTTOM): Define __USE_STD_IOSTREAM if using Compaq C++ compiler.
 	For compiler/linker options, use -Wl,OPT instead of -Xlinker OPT.
+	Check for -ieee option for the C and C++ compilers on alpha systems.
 
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Fail on all gcc 1.x and 2.x versions.
 
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (OCTAVE_LOCAL_BUFFER): New macro.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.405 $)
+AC_REVISION($Revision: 1.406 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -262,25 +262,37 @@ case "$canonical_host_type" in
       AC_MSG_RESULT([adding -mieee-fp to XTRA_CFLAGS])])
 
     OCTAVE_CXX_FLAG(-mieee-fp, [
       ieee_fp_flag=-mieee-fp
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-fp"
       AC_MSG_RESULT([adding -mieee-fp to XTRA_CXXFLAGS])])
   ;;
   alpha*-*-*)
-    OCTAVE_CC_FLAG(-mieee-with-inexact, [
-      ieee_fp_flag=-mieee-with-inexact
-      XTRA_CFLAGS="$XTRA_CFLAGS -mieee-with-inexact"
-      AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CFLAGS])])
+    if test "$GCC" = yes; then
+      OCTAVE_CC_FLAG(-mieee-with-inexact, [
+	ieee_fp_flag=-mieee-with-inexact
+	XTRA_CFLAGS="$XTRA_CFLAGS -mieee-with-inexact"
+	AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CFLAGS])])
 
-    OCTAVE_CXX_FLAG(-mieee-with-inexact, [
-      ieee_fp_flag=-mieee-with-inexact
-      XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-with-inexact"
-      AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CXXFLAGS])])
+      OCTAVE_CXX_FLAG(-mieee-with-inexact, [
+	ieee_fp_flag=-mieee-with-inexact
+	XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-with-inexact"
+	AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CXXFLAGS])])
+    else
+      OCTAVE_CC_FLAG(-ieee, [
+	ieee_fp_flag=-ieee
+	XTRA_CFLAGS="$XTRA_CFLAGS -ieee"
+	AC_MSG_RESULT([adding -ieee to XTRA_CFLAGS])])
+
+      OCTAVE_CXX_FLAG(-ieee, [
+	ieee_fp_flag=-ieee
+	XTRA_CXXFLAGS="$XTRA_CXXFLAGS -ieee"
+	AC_MSG_RESULT([adding -ieee to XTRA_CXXFLAGS])])
+    fi
   ;;
   *ibm-aix4*)
     OCTAVE_CC_FLAG(-mminimal-toc, [
       XTRA_CFLAGS="$XTRA_CFLAGS -mminimal-toc"])
 
     OCTAVE_CXX_FLAG(-mminimal-toc, [
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mminimal-toc"])
   ;;
@@ -329,16 +341,26 @@ if test "$cross_compiling" = yes; then
   BUILD_CXX="g++"
   BUILD_CXXFLAGS="-O2 -g"
   BUILD_EXEEXT=""
 else
   BUILD_CC="$CC"
   BUILD_CFLAGS="-O2 -g"
   BUILD_CXX="$CXX"
   BUILD_CXXFLAGS="-O2 -g"
+  case "$canonical_host_type" in
+    sparc-sun-solaris2*)
+      if test "$GCC" != yes; then
+	BUILD_CC="$CC" -O1
+	BUILD_CFLAGS="-g"
+	BUILD_CXX="$CXX" -O1
+	BUILD_CXXFLAGS="-g"
+      fi
+    ;;
+  esac
   BUILD_EXEEXT="$EXEEXT"
 fi
 
 AC_ARG_VAR(BUILD_CC, [build system C compiler (used if cross compiling)])
 AC_ARG_VAR(BUILD_CFLAGS, [build system C compiler flags (used if cross compiling)])
 AC_ARG_VAR(BUILD_CXX, [build system C++ compiler (used if cross compiling)])
 AC_ARG_VAR(BUILD_CXXFLAGS, [build system C++ compiler flags (used if cross compiling)])
 AC_SUBST(BUILD_EXEEXT)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-01-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sysdep.cc [__DECCXX]: Add a kluge for some missing template
+	functions.
+
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-usr-fcn.cc (octave_vr_val): Assert vr_list != 0, not vr_list.
 	* variables.cc (builtin_string_variable, builtin_any_variable,
 	builtin_real_scalar_variable, bind_builtin_variable): Likewise.
 
 	* TEMPLATE-INST/Array-tc.cc: Provide specialization of
 	Array<octave_value>::resize_fill_value before instantiation of
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -119,16 +119,28 @@ CYGWIN_init (void)
 
       cygwin32_conv_to_win32_path ("/tmp", buf);
 
       octave_env::putenv ("TMPDIR", buf);
     }
 }
 #endif
 
+#if defined (__DECCXX)
+
+// These don't seem to be instantiated automatically...
+
+template std::istream&
+std::operator >> (std::istream&, std::complex<double>&);
+
+template std::string&
+std::string::append (const std::string&, size_t, size_t);
+
+#endif
+
 #if defined (NeXT)
 extern "C"
 {
   typedef void (*_cplus_fcn_int) (int);
   extern void (*malloc_error (_cplus_fcn_int)) (int);
 }
 
 static void
