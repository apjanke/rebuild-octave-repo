# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497370808 25200
#      Tue Jun 13 09:20:08 2017 -0700
# Node ID 7ed6b258db915a91e84d38e83060ddc0f018ab5d
# Parent  b7747a2c88b2065d11188c0792b3bc32b95770b7
maint: Deprecate is_map and replace with isstruct.

* ov.h (is_map): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isstruct): New function.

* structdemo.cc, __luinc__.cc, __magick_read__.cc, cellfun.cc, data.cc,
debug.cc, error.cc, graphics.cc, load-save.cc, ls-mat5.cc, mex.cc,
oct-lvalue.h, oct-stream.cc, variables.cc, __eigs__.cc, __ode15__.cc,
ov-base.h, ov-class.cc, ov-class.h, ov-classdef.h, ov-java.h, ov-struct.cc,
ov-struct.h, ov-usr-fcn.cc, ov.h, pt-eval.cc, pt-tm-const.cc:
Replace instances of is_map with isstruct.

diff --git a/examples/code/structdemo.cc b/examples/code/structdemo.cc
--- a/examples/code/structdemo.cc
+++ b/examples/code/structdemo.cc
@@ -1,17 +1,17 @@
 #include <octave/oct.h>
 #include <octave/ov-struct.h>
 
 DEFUN_DLD (structdemo, args, , "Struct Demo")
 {
   if (args.length () != 2)
     print_usage ();
 
-  if (! args(0).is_map ())
+  if (! args(0).isstruct ())
     error ("structdemo: ARG1 must be a struct");
 
   octave_scalar_map arg0 = args(0).scalar_map_value ();
   //octave_map arg0 = args(0).map_value ();
 
   if (! args(1).is_string ())
     error ("structdemo: ARG2 must be a character string");
 
diff --git a/libinterp/corefcn/__luinc__.cc b/libinterp/corefcn/__luinc__.cc
--- a/libinterp/corefcn/__luinc__.cc
+++ b/libinterp/corefcn/__luinc__.cc
@@ -65,17 +65,17 @@ See documentation for @code{luinc}.
 
   if (args(1).is_string ())
     {
       if (args(1).string_value () == "0")
         zero_level = true;
       else
         error ("luinc: unrecognized string argument");
     }
-  else if (args(1).is_map ())
+  else if (args(1).isstruct ())
     {
       octave_scalar_map map
         = args(1).xscalar_map_value ("luinc: OPTS must be a scalar structure");
 
       octave_value tmp;
 
       tmp = map.getfield ("droptol");
       if (tmp.is_defined ())
diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -2330,17 +2330,17 @@ Use @code{imfinfo} instead.
 DEFUN (__magick_formats__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __magick_imformats__ (@var{formats})
 Fill formats info with GraphicsMagick CoderInfo.
 
 @seealso{imfinfo, imformats, imread, imwrite}
 @end deftypefn */)
 {
-  if (args.length () != 1 || ! args(0).is_map ())
+  if (args.length () != 1 || ! args(0).isstruct ())
     print_usage ();
 
   octave_map formats = args(0).map_value ();
 
 #if defined (HAVE_MAGICK)
 
   maybe_initialize_magick ();
 
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1819,17 +1819,17 @@ num2cell ([1,2;3,4],1)
           if (array.is_single_type ())
             retval = do_num2cell (array.float_array_value (), dimv);
           else
             retval = do_num2cell (array.array_value (), dimv);
         }
     }
   else if (array.is_object ())
     retval = do_object2cell (array, dimv);
-  else if (array.is_map ())
+  else if (array.isstruct ())
     retval = do_num2cell (array.map_value (), dimv);
   else if (array.iscell ())
     retval = do_num2cell (array.cell_value (), dimv);
   else
     err_wrong_type_arg ("num2cell", array);
 
   return retval;
 }
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1782,17 +1782,17 @@ do_cat (const octave_value_list& xargs, 
       bool first_elem_is_struct = false;
 
       for (int i = 0; i < n_args; i++)
         {
           if (i == 0)
             {
               result_type = args(i).class_name ();
 
-              first_elem_is_struct = args(i).is_map ();
+              first_elem_is_struct = args(i).isstruct ();
             }
           else
             result_type = octave::get_concat_class (result_type, args(i).class_name ());
 
           if (all_strings_p && ! args(i).is_string ())
             all_strings_p = false;
           if (all_sq_strings_p && ! args(i).is_sq_string ())
             all_sq_strings_p = false;
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -171,17 +171,17 @@ all breakpoints within the file are clea
 @end deftypefn */)
 {
   bp_table::intmap retmap;
   std::string symbol_name = "";  // stays empty for "dbstop if error" etc
   bp_table::intmap lines;
   std::string condition = "";
   octave_value retval;
 
-  if (args.length() >= 1 && ! args(0).is_map ())
+  if (args.length() >= 1 && ! args(0).isstruct ())
     {
       // explicit function / line / condition
       bp_table::parse_dbfunction_params ("dbstop", args, symbol_name,
                                          lines, condition);
 
       if (lines.size () == 0)
         lines[0] = 1;
 
@@ -205,17 +205,17 @@ all breakpoints within the file are clea
 
           // Replace mv by "bkpt", to use the processing below.
           octave_value bkpt = mv.getfield ("bkpt");
           if (bkpt.isempty ())
             mv = octave_map ();
           else
             {
               if (bkpt.iscell () && bkpt.cell_value ().numel () > 0
-                  && bkpt.cell_value () (0).is_map ())
+                  && bkpt.cell_value () (0).isstruct ())
                 mv = bkpt.cell_value () (0).map_value ();
               else
                 {
                   error ("dbstop: invalid 'bkpt' field");
                   mv = octave_map ();
                 }
             }
         }
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1206,17 +1206,17 @@ disable escape sequence expansion use a 
   octave_value retval;
 
   octave_value_list nargs = args;
 
   std::string id;
 
   bool have_fmt = false;
 
-  if (nargin == 1 && args(0).is_map ())
+  if (nargin == 1 && args(0).isstruct ())
     {
       // empty struct is not an error.  return and resume calling function.
       if (args(0).isempty ())
         return retval;
 
       octave_scalar_map m = args(0).scalar_map_value ();
 
       // empty struct is not an error.  return and resume calling function.
@@ -1695,17 +1695,17 @@ disable escape sequence expansion use a 
       done = true;
     }
   else if (nargin == 1)
     {
       octave_value arg = args(0);
 
       octave_map old_warning_options = warning_options;
 
-      if (arg.is_map ())
+      if (arg.isstruct ())
         {
           octave_map m = arg.map_value ();
 
           if (! m.contains ("identifier") || ! m.contains ("state"))
             error ("warning: STATE structure must have fields 'identifier' and 'state'");
 
           // Simply step through the struct elements one at a time.
 
@@ -1873,17 +1873,17 @@ fields are set to their default values.
           if (args(0).string_value () != "reset")
             error ("lasterror: unrecognized string argument");
 
           Vlast_error_message = "";
           Vlast_error_id = "";
 
           Vlast_error_stack = initialize_last_error_stack ();
         }
-      else if (args(0).is_map ())
+      else if (args(0).isstruct ())
         {
           octave_scalar_map new_err = args(0).scalar_map_value ();
           octave_scalar_map new_err_stack;
           std::string new_error_message;
           std::string new_error_id;
           std::string new_error_file;
           std::string new_error_name;
           int new_error_line = -1;
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2276,17 +2276,17 @@ graphics_object::set (const octave_value
 {
   int nargin = args.length ();
 
   if (nargin == 0)
     error ("graphics_object::set: Nothing to set");
 
   for (int i = 0; i < nargin; )
     {
-      if (args(i).is_map () )
+      if (args(i).isstruct () )
         {
           set (args(i).map_value ());
           i++;
         }
       else if (i < nargin - 1)
         {
           caseless_str pname = args(i).xstring_value ("set: argument %d must be a property name", i);
           octave_value val = args(i+1);
@@ -10439,17 +10439,17 @@ being @qcode{"portrait"}.
           if (args(2).cell_value ().rows () == 1)
             go.set (args(1).cellstr_value (), args(2).cell_value (), 0);
           else if (hcv.numel () == args(2).cell_value ().rows ())
             go.set (args(1).cellstr_value (), args(2).cell_value (), n);
           else
             error ("set: number of graphics handles must match number of value rows (%d != %d)",
                    hcv.numel (), args(2).cell_value ().rows ());
         }
-      else if (nargin == 2 && args(1).is_map ())
+      else if (nargin == 2 && args(1).isstruct ())
         go.set (args(1).map_value ());
       else if (nargin == 2 && args(1).is_string ())
         {
           std::string property = args(1).string_value ();
           std::transform (property.begin (), property.end (),
                           property.begin (), tolower);
 
           octave_map pmap = go.values_as_struct ();
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1267,17 +1267,17 @@ save_vars (const string_vector& argv, in
 
       std::string struct_name = argv[argv_idx];
 
       if (! symbol_table::is_variable (struct_name))
         error ("save: no such variable: '%s'", struct_name.c_str ());
 
       octave_value struct_var = symbol_table::varval (struct_name);
 
-      if (! struct_var.is_map () || struct_var.numel () != 1)
+      if (! struct_var.isstruct () || struct_var.numel () != 1)
         error ("save: '%s' is not a scalar structure", struct_name.c_str ());
 
       octave_scalar_map struct_var_map = struct_var.scalar_map_value ();
 
       ++argv_idx;
 
       if (argv_idx < argc)
         {
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -2161,17 +2161,17 @@ save_mat5_element_length (const octave_v
         }
       else
         {
           const ComplexNDArray m = tc.complex_array_value ();
           ret += save_mat5_array_length (m.fortran_vec (), m.numel (),
                                          save_as_floats);
         }
     }
-  else if (tc.is_map () || tc.is_inline_function () || tc.is_object ())
+  else if (tc.isstruct () || tc.is_inline_function () || tc.is_object ())
     {
       int fieldcnt = 0;
       const octave_map m = tc.map_value ();
       octave_idx_type nel = m.numel ();
 
       if (tc.is_inline_function ())
         // length of "inline" is 6
         ret += 8 + PAD (6 > max_namelen ? max_namelen : 6);
@@ -2369,17 +2369,17 @@ save_mat5_binary_element (std::ostream& 
   else if (tc.is_real_scalar () || tc.is_real_matrix () || tc.is_range ()
            || tc.is_complex_scalar () || tc.is_complex_matrix ())
     {
       if (tc.is_single_type ())
         flags |= MAT_FILE_SINGLE_CLASS;
       else
         flags |= MAT_FILE_DOUBLE_CLASS;
     }
-  else if (tc.is_map ())
+  else if (tc.isstruct ())
     flags |= MAT_FILE_STRUCT_CLASS;
   else if (tc.iscell ())
     flags |= MAT_FILE_CELL_CLASS;
   else if (tc.is_inline_function () || tc.is_object ())
     flags |= MAT_FILE_OBJECT_CLASS;
   else
     {
       // FIXME: Should this just error out rather than warn?
@@ -2578,17 +2578,17 @@ save_mat5_binary_element (std::ostream& 
       else
         {
           ComplexNDArray m_cmplx = tc.complex_array_value ();
 
           write_mat5_array (os, ::real (m_cmplx), save_as_floats);
           write_mat5_array (os, ::imag (m_cmplx), save_as_floats);
         }
     }
-  else if (tc.is_map () || tc.is_inline_function () || tc.is_object ())
+  else if (tc.isstruct () || tc.is_inline_function () || tc.is_object ())
     {
       if (tc.is_inline_function () || tc.is_object ())
         {
           std::string classname = (tc.is_object () ? tc.class_name () : "inline");
           size_t namelen = classname.length ();
 
           if (namelen > max_namelen)
             namelen = max_namelen; // Truncate names if necessary
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -235,17 +235,17 @@ public:
   int is_logical (void) const { return val.islogical (); }
 
   int is_numeric (void) const { return val.is_numeric_type (); }
 
   int is_single (void) const { return val.is_single_type (); }
 
   int is_sparse (void) const { return val.issparse (); }
 
-  int is_struct (void) const { return val.is_map (); }
+  int is_struct (void) const { return val.isstruct (); }
 
   int is_uint16 (void) const { return val.is_uint16_type (); }
 
   int is_uint32 (void) const { return val.is_uint32_type (); }
 
   int is_uint64 (void) const { return val.is_uint64_type (); }
 
   int is_uint8 (void) const { return val.is_uint8_type (); }
diff --git a/libinterp/corefcn/oct-lvalue.h b/libinterp/corefcn/oct-lvalue.h
--- a/libinterp/corefcn/oct-lvalue.h
+++ b/libinterp/corefcn/oct-lvalue.h
@@ -69,19 +69,19 @@ public:
     return ! is_black_hole () && sym->is_defined ();
   }
 
   bool is_undefined (void) const
   {
     return is_black_hole () || sym->is_undefined ();
   }
 
-  bool is_map (void) const
+  bool isstruct (void) const
   {
-    return value().is_map ();
+    return value().isstruct ();
   }
 
   void define (const octave_value& v) { sym->assign (v); }
 
   void assign (octave_value::assign_op, const octave_value&);
 
   void numel (octave_idx_type n) { nel = n; }
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -5295,17 +5295,17 @@ namespace octave
       : values (args), val_idx (0), elt_idx (0),
         n_vals (values.length ()), n_elts (0), have_data (false),
         curr_state (ok)
     {
       for (octave_idx_type i = 0; i < values.length (); i++)
         {
           octave_value val = values(i);
 
-          if (val.is_map () || val.iscell () || val.is_object ())
+          if (val.isstruct () || val.iscell () || val.is_object ())
             err_wrong_type_arg (who, val);
         }
     }
 
     // No copying!
 
     printf_value_cache (const printf_value_cache&) = delete;
 
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -278,17 +278,17 @@ generate_struct_completions (const std::
 
           try
             {
               octave_value tmp = octave::eval_string (prefix, true, parse_status);
 
               frame.run ();
 
               if (tmp.is_defined ()
-                  && (tmp.is_map () || tmp.isjava () || tmp.is_classdef_object ()))
+                  && (tmp.isstruct () || tmp.isjava () || tmp.is_classdef_object ()))
                 names = tmp.map_keys ();
             }
           catch (const octave::execution_exception&)
             {
               octave::interpreter::recover_from_exception ();
             }
         }
     }
@@ -323,17 +323,17 @@ looks_like_struct (const std::string& te
       frame.protect_var (discard_error_messages);
 
       discard_error_messages = true;
 
       octave_value tmp = eval_string (text, true, parse_status);
 
       frame.run ();
 
-      retval = (tmp.is_defined () && tmp.is_map ());
+      retval = (tmp.is_defined () && tmp.isstruct ());
     }
 #endif
 
   return retval;
 }
 
 static octave_value
 do_isglobal (const octave_value_list& args)
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -299,17 +299,17 @@ Undocumented internal function.
         }
     }
 
   sigmar = sigma.real ();
   sigmai = sigma.imag ();
 
   if (nargin > (3+arg_offset))
     {
-      if (! args(3+arg_offset).is_map ())
+      if (! args(3+arg_offset).isstruct ())
         error ("eigs: OPTS argument must be a structure");
 
       octave_scalar_map map = args(3+arg_offset).xscalar_map_value ("eigs: OPTS argument must be a scalar structure");
 
       octave_value tmp;
 
       // issym is ignored for complex matrix inputs
       tmp = map.getfield ("issym");
diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -1158,17 +1158,17 @@ Undocumented internal function.
 
 
   if (y0.numel () != yp0.numel ())
     error ("__ode15__: initial state y0 and yp0 must have the same length");
   else if (y0.numel () < 1)
     error ("__ode15__: initial state yp0 must be a vector or a scalar");
 
 
-  if (! args(4).is_map ())
+  if (! args(4).isstruct ())
     error ("__ode15__: OPTS argument must be a structure");
 
   octave_scalar_map options
     = args(4).xscalar_map_value ("__ode15__: OPTS argument must be a scalar structure");
 
 
   return octave::do_ode15 (ida_fcn, tspan, numt, t0, y0, yp0, options);
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -362,17 +362,17 @@ public:
   virtual bool is_perm_matrix (void) const { return false; }
 
   virtual bool is_string (void) const { return false; }
 
   virtual bool is_sq_string (void) const { return false; }
 
   virtual bool is_range (void) const { return false; }
 
-  virtual bool is_map (void) const { return false; }
+  virtual bool isstruct (void) const { return false; }
 
   virtual bool is_object (void) const { return false; }
 
   virtual bool is_classdef_object (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -482,17 +482,17 @@ octave_class::numeric_conv (const Cell& 
 {
   octave_value retval;
 
   if (val.numel () != 1)
     err_invalid_index_for_assignment ();
 
   retval = val(0);
 
-  if (type.length () > 0 && type[0] == '.' && ! retval.is_map ())
+  if (type.length () > 0 && type[0] == '.' && ! retval.isstruct ())
     retval = octave_map ();
 
   return retval;
 }
 
 octave_value
 octave_class::subsasgn (const std::string& type,
                         const std::list<octave_value_list>& idx,
@@ -724,17 +724,17 @@ octave_class::subsasgn_common (const oct
 
             map.assign (idx.front (), key, t_rhs);
 
             count++;
             retval = octave_value (this);
           }
         else
           {
-            if (t_rhs.is_object () || t_rhs.is_map ())
+            if (t_rhs.is_object () || t_rhs.isstruct ())
               {
                 octave_map rhs_map = t_rhs.xmap_value ("invalid class assignment");
 
                 map.assign (idx.front (), rhs_map);
 
                 count++;
                 retval = octave_value (this);
               }
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -137,17 +137,17 @@ public:
   {
     octave_class retval = octave_class (*this);
     retval.map.resize (dv);
     return octave_value (new octave_class (retval));
   }
 
   bool is_defined (void) const { return true; }
 
-  bool is_map (void) const { return false; }
+  bool isstruct (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
   bool is_true (void) const;
 
   octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const;
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1410,17 +1410,17 @@ public:
   { return new octave_classdef (object.empty_clone ()); }
 
   cdef_object get_object (void) const { return object; }
 
   cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
 
-  bool is_map (void) const { return false; }
+  bool isstruct (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
   bool is_classdef_object (void) const { return true; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -55,17 +55,17 @@ public:
   octave_base_value * empty_clone (void) const { return new octave_java (); }
 
   bool is_instance_of (const std::string&) const;
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
-  bool is_map (void) const { return false; }
+  bool isstruct (void) const { return false; }
 
   bool isjava (void) const { return true; }
 
   string_vector map_keys (void) const;
 
   dim_vector dims (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -256,17 +256,17 @@ octave_struct::subsref (const std::strin
 */
 
 octave_value
 octave_struct::numeric_conv (const octave_value& val,
                              const std::string& type)
 {
   octave_value retval;
 
-  if (type.length () > 0 && type[0] == '.' && ! val.is_map ())
+  if (type.length () > 0 && type[0] == '.' && ! val.isstruct ())
     retval = octave_map ();
   else
     retval = val;
 
   return retval;
 }
 
 octave_value
@@ -458,17 +458,17 @@ octave_struct::subsasgn (const std::stri
                     retval = octave_value (this);
                   }
                 else
                   err_nonbraced_cs_list_assignment ();
               }
           }
         else
           {
-            if (t_rhs.is_map () || t_rhs.is_object ())
+            if (t_rhs.isstruct () || t_rhs.is_object ())
               {
                 octave_map rhs_map = t_rhs.xmap_value ("invalid structure assignment");
 
                 map.assign (idx.front (), rhs_map);
 
                 count++;
                 retval = octave_value (this);
               }
@@ -1136,17 +1136,17 @@ octave_scalar_struct::subsref (const std
 */
 
 octave_value
 octave_scalar_struct::numeric_conv (const octave_value& val,
                                     const std::string& type)
 {
   octave_value retval;
 
-  if (type.length () > 0 && type[0] == '.' && ! val.is_map ())
+  if (type.length () > 0 && type[0] == '.' && ! val.isstruct ())
     retval = octave_map ();
   else
     retval = val;
 
   return retval;
 }
 
 octave_value
@@ -1696,17 +1696,17 @@ produces a struct @strong{array}.
   // struct ([]) returns an empty struct.
 
   // struct (empty_matrix) returns an empty struct with the same
   // dimensions as the empty matrix.
 
   // Note that struct () creates a 1x1 struct with no fields for
   // compatibility with Matlab.
 
-  if (nargin == 1 && args(0).is_map ())
+  if (nargin == 1 && args(0).isstruct ())
     return ovl (args(0));
 
   if (nargin == 1 && args(0).is_object ())
     return ovl (args(0).map_value ());
 
   if ((nargin == 1 || nargin == 2)
       && args(0).isempty () && args(0).is_real_matrix ())
     {
@@ -1816,17 +1816,17 @@ DEFUN (isstruct, args, ,
 @deftypefn {} {} isstruct (@var{x})
 Return true if @var{x} is a structure or a structure array.
 @seealso{ismatrix, iscell, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_map ());
+  return ovl (args(0).isstruct ());
 }
 
 DEFUN (__fieldnames__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} __fieldnames__ (@var{struct})
 @deftypefnx {} {} __fieldnames__ (@var{obj})
 Internal function.
 
@@ -1863,17 +1863,17 @@ dimension is returned.
 @seealso{fieldnames}
 @end deftypefn */)
 {
   if (args.length () != 2)
     print_usage ();
 
   octave_value retval = false;
 
-  if (args(0).is_map ())
+  if (args(0).isstruct ())
     {
       octave_map m = args(0).map_value ();
 
       // FIXME: should this work for all types that can do
       // structure reference operations?
       if (args(1).is_string ())
         {
           std::string key = args(1).string_value ();
@@ -1910,17 +1910,17 @@ DEFUN (numfields, args, ,
 @deftypefn {} {} numfields (@var{s})
 Return the number of fields of the structure @var{s}.
 @seealso{fieldnames}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  if (! args(0).is_map ())
+  if (! args(0).isstruct ())
     error ("numfields: argument must be a struct");
 
   return ovl (static_cast<double> (args(0).nfields ()));
 }
 
 /*
 ## test isfield
 %!test
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -112,17 +112,17 @@ public:
 
   octave_value resize (const dim_vector& dv, bool fill = false) const
   { octave_map tmap = map; tmap.resize (dv, fill); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
-  bool is_map (void) const { return true; }
+  bool isstruct (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_struct; }
 
   octave_map map_value (void) const { return map; }
 
   string_vector map_keys (void) const { return map.fieldnames (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
@@ -228,17 +228,17 @@ public:
 
   octave_value resize (const dim_vector& dv, bool fill = false) const
   { octave_map tmap = map; tmap.resize (dv, fill); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
-  bool is_map (void) const { return true; }
+  bool isstruct (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_struct; }
 
   octave_map map_value (void) const { return map; }
 
   octave_scalar_map scalar_map_value (void) const { return map; }
 
   string_vector map_keys (void) const { return map.fieldnames (); }
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -694,17 +694,17 @@ octave_user_function::restore_warning_st
 {
   octave_value val = symbol_table::varval (".saved_warning_states.");
 
   if (val.is_defined ())
     {
       // Fail spectacularly if .saved_warning_states. is not an
       // octave_map (or octave_scalar_map) object.
 
-      if (! val.is_map ())
+      if (! val.isstruct ())
         panic_impossible ();
 
       octave_map m = val.map_value ();
 
       Cell ids = m.contents ("identifier");
       Cell states = m.contents ("state");
 
       octave::interpreter& interp
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -580,18 +580,22 @@ public:
   { return rep->is_sq_string (); }
 
   bool is_dq_string (void) const
   { return rep->is_string () && ! rep->is_sq_string (); }
 
   bool is_range (void) const
   { return rep->is_range (); }
 
+  bool isstruct (void) const
+  { return rep->isstruct (); }
+
+  OCTAVE_DEPRECATED ("use 'isstruct' instead")
   bool is_map (void) const
-  { return rep->is_map (); }
+  { return isstruct (); }
 
   bool is_object (void) const
   { return rep->is_object (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
   bool isjava (void) const
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -777,17 +777,17 @@ namespace octave
 
         if (loop_body)
           loop_body->accept (*this);
 
         // Maybe decrement break and continue states.
         quit_loop_now ();
       }
     else if (rhs.is_matrix_type () || rhs.iscell () || rhs.is_string ()
-             || rhs.is_map ())
+             || rhs.isstruct ())
       {
         // A matrix or cell is reshaped to 2 dimensions and iterated by
         // columns.
 
         dim_vector dv = rhs.dims ().redim (2);
 
         octave_idx_type nrows = dv(0);
         octave_idx_type steps = dv(1);
@@ -854,17 +854,17 @@ namespace octave
 
     tree_expression *expr = cmd.control_expr ();
 
     octave_value rhs = evaluate (expr);
 
     if (rhs.is_undefined ())
       return;
 
-    if (! rhs.is_map ())
+    if (! rhs.isstruct ())
       error ("in statement 'for [X, Y] = VAL', VAL must be a structure");
 
     // Cycle through structure elements.  First element of id_list
     // is set to value and the second is set to the name of the
     // structure element.
 
     tree_argument_list *lhs = cmd.left_hand_side ();
 
diff --git a/libinterp/parse-tree/pt-tm-const.cc b/libinterp/parse-tree/pt-tm-const.cc
--- a/libinterp/parse-tree/pt-tm-const.cc
+++ b/libinterp/parse-tree/pt-tm-const.cc
@@ -71,17 +71,17 @@ namespace octave
     dim_vector this_elt_dv = val.dims ();
 
     if (! this_elt_dv.zero_by_zero ())
       {
         all_mt = false;
 
         if (first_elem)
           {
-            if (val.is_map ())
+            if (val.isstruct ())
               first_elem_is_struct = true;
 
             first_elem = false;
           }
       }
     else if (val.iscell ())
       first_elem = false;
 
