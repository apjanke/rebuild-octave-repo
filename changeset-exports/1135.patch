# HG changeset patch
# User jwe
# Date 793583727 0
#      Thu Feb 23 23:55:27 1995 +0000
# Node ID 32cb143658a6450e79746336b98c0c5a439b7000
# Parent  d65e3b59e07ccaec4f223b77bc07f132a897fec6
[project @ 1995-02-23 23:55:22 by jwe]

diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -32,57 +32,56 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "Range.h"
 #include "idx-vector.h"
 #include "user-prefs.h"
 #include "error.h"
 #include "utils.h"
 
 idx_vector::idx_vector (const idx_vector& a)
 {
+  data = 0;
   initialized = a.initialized;
 
   len = a.len;
   if (len > 0)
     {
       data = new int [len];
       for (int i = 0; i < len; i++)
 	data[i] = a.data[i];
 
       num_zeros = a.num_zeros;
       num_ones = a.num_ones;
       one_zero = a.one_zero;
 
       max_val = a.max_val;
       min_val = a.min_val;
     }
-  else
-    data = 0;
 }
 
 static inline int
 tree_to_mat_idx (double x)
 {
   if (x > 0)
     return ((int) (x + 0.5) - 1);
   else
     return ((int) (x - 0.5) - 1);
 }
 
 idx_vector::idx_vector (const Matrix& m, int do_ftn_idx,
 			const char *rc, int z_len)
 {
+  data = 0;
   initialized = 0;
 
   int nr = m.rows ();
   int nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     {
       len = 0;
-      data =0;
       num_zeros = 0;
       num_ones = 0;
       one_zero = 0;
       initialized = 1;
       return;
     }
   else if (nr > 1 && nc > 1 && do_ftn_idx)
     {
@@ -112,28 +111,28 @@ idx_vector::idx_vector (const Matrix& m,
       return;
     }
 
   init_state (rc, z_len);
 }
 
 idx_vector::idx_vector (const Range& r)
 {
+  data = 0;
   initialized = 0;
 
   len = r.nelem ();
 
   if (len < 0)
     {
       ::error ("invalid range used as index");
       return;
     }
   else if (len == 0)
     {
-      data = 0;
       num_zeros = 0;
       num_ones = 0;
       one_zero = 0;
       initialized = 1;
       return;
     }
 
   double b = r.base ();
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -84,32 +84,26 @@ private:
 
   void init_state (const char *rc = 0, int z_len = 0);
   void convert_one_zero_to_idx (void);
 };
 
 inline idx_vector::idx_vector (void)
 {
   len = 0;
-  data = (int *) 0;
+  data = 0;
   num_zeros = 0;
   num_ones = 0;
   one_zero = 0;
   initialized = 0;
 }
 
 inline idx_vector::~idx_vector (void)
 {
   delete [] data;
-  data = (int *) 0;
-  num_zeros = 0;
-  num_ones = 0;
-  len = 0;
-  one_zero = 0;
-  initialized = 0;
 }
 
 inline idx_vector::operator void * () const
 {
   return initialized ? (void *) 1 : (void *) 0;
 }
 
 inline int idx_vector::capacity (void) const { return len; }
