# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238347376 25200
#      Sun Mar 29 10:22:56 2009 -0700
# Node ID e9dc2ed2ec0f8411e81b2de81c66b02857102785
# Parent  634274aaa183ec1af4e241617415c9e470cab3c2
Cleanup documentation for poly.texi, interp.texi, geometry.texi

Grammarcheck input .txi files
Spellcheck .texi files

diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -14,43 +14,44 @@
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Geometry
 @chapter Geometry
 
-Much of geometry code in Octave is based on the QHull library@footnote{Barber,
-C.B., Dobkin, D.P., and Huhdanpaa, H.T., "The Quickhull algorithm for
-convex hulls," ACM Trans. on Mathematical Software, 22(4):469-483, Dec
-1996, @url{http://www.qhull.org}}. Some of the documentation for Qhull,
-particularly for the options that can be passed to @code{delaunay},
-@code{voronoi} and @code{convhull}, etc, is relevant to Octave users.
+Much of the geometry code in Octave is based on the Qhull 
+library@footnote{Barber, C.B., Dobkin, D.P., and Huhdanpaa, H.T., 
+"The Quickhull algorithm for convex hulls," ACM Trans. on Mathematical 
+Software, 22(4):469--483, Dec 1996, @url{http://www.qhull.org}}.  
+Some of the documentation for Qhull, particularly for the options that 
+can be passed to @code{delaunay}, @code{voronoi} and @code{convhull}, 
+etc., is relevant to Octave users.
 
 @menu
 * Delaunay Triangulation::
 * Voronoi Diagrams::
 * Convex Hull::
 * Interpolation on Scattered Data::
 @end menu
 
 @node Delaunay Triangulation
 @section Delaunay Triangulation
 
 The Delaunay triangulation is constructed from a set of
-circum-circles. These circum-circles are chosen so that there are at
+circum-circles.  These circum-circles are chosen so that there are at
 least three of the points in the set to triangulation on the
-circumference of the circum-circle. None of the points in the set of
+circumference of the circum-circle.  None of the points in the set of
 points falls within any of the circum-circles.
 
 In general there are only three points on the circumference of any
-circum-circle. However, in some cases, and in particular for the
+circum-circle.  However, in some cases, and in particular for the
 case of a regular grid, 4 or more points can be on a single
-circum-circle. In this case the Delaunay triangulation is not unique. 
+circum-circle.  In this case the Delaunay triangulation is not unique. 
 
 @DOCSTRING(delaunay)
 
 The 3- and N-dimensional extension of the Delaunay triangulation are
 given by @code{delaunay3} and @code{delaunayn} respectively.  
 @code{delaunay3} returns a set of tetrahedra that satisfy the
 Delaunay circum-circle criteria.  Similarly, @code{delaunayn} returns the
 N-dimensional simplex satisfying the Delaunay circum-circle criteria.  
@@ -160,45 +161,49 @@ point @var{p}.  To ensure a unique solut
 @example
 sum (@var{beta}(1:@var{N}+1)) == 1
 @end example
 
 @noindent
 is imposed, and we can therefore write the above as
 
 @example
+@group
 @var{p} - @var{t}(end, :) = @var{beta}(1:end-1) * (@var{t}(1:end-1, :)
       - ones(@var{N}, 1) * @var{t}(end, :)
+@end group
 @end example
 
 @noindent
 Solving for @var{beta} we can then write
 
 @example
+@group
 @var{beta}(1:end-1) = (@var{p} - @var{t}(end, :)) / (@var{t}(1:end-1, :)
       - ones(@var{N}, 1) * @var{t}(end, :))
 @var{beta}(end) = sum(@var{beta}(1:end-1))
+@end group
 @end example
 
 @noindent
 which gives the formula for the conversion of the Cartesian coordinates
 of the point @var{p} to the Barycentric coordinates @var{beta}.  An
 important property of the Barycentric coordinates is that for all points
 in the N-simplex
 
 @example
 0 <= @var{beta}(@var{i}) <= 1
 @end example
 
 @noindent
 Therefore, the test in @code{tsearch} and @code{tsearchn} essentially
 only needs to express each point in terms of the Barycentric coordinates
 of each of the simplices of the N-simplex and test the values of
-@var{beta}. This is exactly the implementation used in
-@code{tsearchn}. @code{tsearch} is optimized for 2-dimensions and the
+@var{beta}.  This is exactly the implementation used in
+@code{tsearchn}.  @code{tsearch} is optimized for 2-dimensions and the
 Barycentric coordinates are not explicitly formed.
 
 @DOCSTRING(tsearch)
 
 @DOCSTRING(tsearchn)
 
 An example of the use of @code{tsearch} can be seen with the simple
 triangulation
@@ -207,17 +212,17 @@ triangulation
 @group
 @var{x} = [-1; -1; 1; 1];
 @var{y} = [-1; 1; -1; 1];
 @var{tri} = [1, 2, 3; 2, 3, 1];
 @end group
 @end example
 
 @noindent
-consisting of two triangles defined by @var{tri}. We can then identify
+consisting of two triangles defined by @var{tri}.  We can then identify
 which triangle a point falls in like
 
 @example
 @group
 tsearch (@var{x}, @var{y}, @var{tri}, -0.5, -0.5)
 @result{} 1
 tsearch (@var{x}, @var{y}, @var{tri}, 0.5, 0.5)
 @result{} 2
@@ -230,17 +235,17 @@ and we can confirm that a point doesn't 
 @example
 @group
 tsearch (@var{x}, @var{y}, @var{tri}, 2, 2)
 @result{} NaN
 @end group
 @end example
 
 The @code{dsearch} and @code{dsearchn} find the closest point in a
-tessellation to the desired point. The desired point does not
+tessellation to the desired point.  The desired point does not
 necessarily have to be in the tessellation, and even if it the returned
 point of the tessellation does not have to be one of the vertexes of the
 N-simplex within which the desired point is found.
 
 @DOCSTRING(dsearch)
 
 @DOCSTRING(dsearchn)
 
@@ -273,17 +278,17 @@ where the point outside the tessellation
 @section Voronoi Diagrams
 
 A Voronoi diagram or Voronoi tessellation of a set of points @var{s} in
 an N-dimensional space, is the tessellation of the N-dimensional space
 such that all points in @code{@var{v}(@var{p})}, a partitions of the
 tessellation where @var{p} is a member of @var{s}, are closer to @var{p}
 than any other point in @var{s}.  The Voronoi diagram is related to the
 Delaunay triangulation of a set of points, in that the vertexes of the
-Voronoi tessellation are the centers of  the circum-circles of the
+Voronoi tessellation are the centers of the circum-circles of the
 simplicies of the Delaunay tessellation. 
 
 @DOCSTRING(voronoi)
 
 @DOCSTRING(voronoin)
 
 An example of the use of @code{voronoi} is
 
@@ -298,17 +303,17 @@ triplot (tri, x, y, "b");
 hold on;
 plot (vx, vy, "r");
 @end group
 @end example
 
 @ifset HAVE_QHULL
 @ifnotinfo
 @noindent
-The result of which can be seen in @ref{fig:voronoi}. Note that the
+The result of which can be seen in @ref{fig:voronoi}.  Note that the
 circum-circle of one of the triangles has been added to this figure, to
 make the relationship between the Delaunay tessellation and the Voronoi
 diagram clearer.
 
 @float Figure,fig:voronoi
 @image{voronoi,8cm}
 @caption{Delaunay triangulation and Voronoi diagram of a random set of points}
 @end float
@@ -332,17 +337,17 @@ y = rand (10, 1);
 af = zeros (size(f));
 for i = 1 : length (f)
   af(i) = polyarea (c (f @{i, :@}, 1), c (f @{i, :@}, 2));
 endfor
 @end group
 @end example
 
 Facets of the Voronoi diagram with a vertex at infinity have infinity
-area. A simplified version of @code{polyarea} for rectangles is
+area.  A simplified version of @code{polyarea} for rectangles is
 available with @code{rectint}
 
 @DOCSTRING(rectint)
 
 @DOCSTRING(inpolygon)
 
 An example of the use of @code{inpolygon} might be
 
@@ -369,17 +374,17 @@ The result of which can be seen in @ref{
 points inside a polygon}
 @end float
 @end ifnotinfo
 
 @node Convex Hull
 @section Convex Hull
 
 The convex hull of a set of points is the minimum convex envelope
-containing all of the points. Octave has the functions @code{convhull}
+containing all of the points.  Octave has the functions @code{convhull}
 and @code{convhulln} to calculate the convex hull of 2-dimensional and
 N-dimensional sets of points.
 
 @DOCSTRING(convhull)
 
 @DOCSTRING(convhulln)
 
 An example of the use of @code{convhull} is
@@ -405,22 +410,22 @@ The output of the above can be seen in @
 @end float
 @end ifnotinfo
 @end ifset
 
 @node Interpolation on Scattered Data
 @section Interpolation on Scattered Data
 
 An important use of the Delaunay tessellation is that it can be used to
-interpolate from scattered data to an arbitrary set of points. To do
+interpolate from scattered data to an arbitrary set of points.  To do
 this the N-simplex of the known set of points is calculated with
-@code{delaunay}, @code{delaunay3} or @code{delaunayn}. Then the
+@code{delaunay}, @code{delaunay3} or @code{delaunayn}.  Then the
 simplicies in to which the desired points are found are
-identified. Finally the vertices of the simplicies are used to
-interpolate to the desired points. The functions that perform this
+identified.  Finally the vertices of the simplicies are used to
+interpolate to the desired points.  The functions that perform this
 interpolation are @code{griddata}, @code{griddata3} and
 @code{griddatan}.
 
 @DOCSTRING(griddata)
 
 @DOCSTRING(griddata3)
 
 @DOCSTRING(griddatan)
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -29,22 +29,22 @@
 
 Octave supports several methods for one-dimensional interpolation, most
 of which are described in this section.  @ref{Polynomial Interpolation}
 and @ref{Interpolation on Scattered Data} describe further methods.
 
 @DOCSTRING(interp1)
 
 There are some important differences between the various interpolation
-methods. The 'spline' method enforces that both the first and second
+methods.  The 'spline' method enforces that both the first and second
 derivatives of the interpolated values have a continuous derivative,
-whereas the other methods do not. This means that the results of the
-'spline' method are generally smoother. If the function to be
+whereas the other methods do not.  This means that the results of the
+'spline' method are generally smoother.  If the function to be
 interpolated is in fact smooth, then 'spline' will give excellent
-results. However, if the function to be evaluated is in some manner
+results.  However, if the function to be evaluated is in some manner
 discontinuous, then 'pchip' interpolation might give better results.
 
 This can be demonstrated by the code
 
 @example
 @group
 t = -2:2;
 dt = 1;
@@ -66,44 +66,44 @@ legend('spline','pchip');
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:interpderiv1} and
 @ref{fig:interpderiv2}.
 
 @float Figure,fig:interpderiv1
 @image{interpderiv1,8cm}
-@caption{Comparison of 'phcip' and 'spline' interpolation methods for a 
+@caption{Comparison of 'pchip' and 'spline' interpolation methods for a 
 step function}
 @end float
 
 @float Figure,fig:interpderiv2
 @image{interpderiv2,8cm}
-@caption{Comparison of the second derivative of the 'phcip' and 'spline' 
+@caption{Comparison of the second derivative of the 'pchip' and 'spline' 
 interpolation methods for a step function}
 @end float
 @end ifnotinfo
 
 A simplified version of @code{interp1} that performs only linear
-interpolation is available in @code{interp1q}. This argument is slightly
+interpolation is available in @code{interp1q}.  This argument is slightly
 faster than @code{interp1} as to performs little error checking.
 
 @DOCSTRING(interp1q)
 
 Fourier interpolation, is a resampling technique where a signal is
 converted to the frequency domain, padded with zeros and then
 reconverted to the time domain.
 
 @DOCSTRING(interpft)
 
-There are two significant limitations on Fourier interpolation. Firstly,
+There are two significant limitations on Fourier interpolation.  Firstly,
 the function signal is assumed to be periodic, and so non-periodic
-signals will be poorly represented at the edges. Secondly, both the
+signals will be poorly represented at the edges.  Secondly, both the
 signal and its interpolation are required to be sampled at equispaced
-points. An example of the use of @code{interpft} is
+points.  An example of the use of @code{interpft} is
 
 @example
 @group
 t = 0 : 0.3 : pi; dt = t(2)-t(1);
 n = length (t); k = 100;
 ti = t(1) + [0 : k-1]*dt*n/k;
 y = sin (4*t + 0.3) .* cos (3*t - 0.1);
 yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
@@ -147,19 +147,19 @@ in @ref{Interpolation on Scattered Data}
 @DOCSTRING(interp2)
 
 @DOCSTRING(interp3)
 
 @DOCSTRING(interpn)
 
 A significant difference between @code{interpn} and the other two
 multidimensional interpolation functions is the fashion in which the
-dimensions are treated. For @code{interp2} and @code{interp3}, the 'y'
+dimensions are treated.  For @code{interp2} and @code{interp3}, the 'y'
 axis is considered to be the columns of the matrix, whereas the 'x'
-axis corresponds to the rows of the array. As Octave indexes arrays in
+axis corresponds to the rows of the array.  As Octave indexes arrays in
 column major order, the first dimension of any array is the columns, and
 so @code{interpn} effectively reverses the 'x' and 'y' dimensions. 
 Consider the example
 
 @example
 @group
 x = y = z = -1:1;
 f = @@(x,y,z) x.^2 - y - z.^2;
@@ -170,17 +170,17 @@ xi = yi = zi = -1:0.1:1;
 vi = interp3(x, y, z, v, xxi, yyi, zzi, 'spline');
 [xxi, yyi, zzi] = ndgrid (xi, yi, zi);
 vi2 = interpn(x, y, z, v, xxi, yyi, zzi, 'spline');
 mesh (zi, yi, squeeze (vi2(1,:,:)));
 @end group
 @end example
 
 @noindent
-where @code{vi} and @code{vi2} are identical. The reversal of the
+where @code{vi} and @code{vi2} are identical.  The reversal of the
 dimensions is treated in the @code{meshgrid} and @code{ndgrid} functions
 respectively.
 @ifnotinfo
 The result of this code can be seen in @ref{fig:interpn}.
 
 @float Figure,fig:interpn
 @image{interpn,8cm}
 @caption{Demonstration of the use of @code{interpn}}
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -29,17 +29,17 @@ in descending order).  For example, a ve
  p (x) = c_1 x^N + \ldots + c_N x + c_{N+1}.
 $$
 @end tex
 @end iftex
 @ifinfo
  @var{N}
 
 @example
-p(x) = @var{c}(1) x^@var{N} + ... + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
+p(x) = @var{c}(1) x^@var{N} + @dots{} + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
 @end ifinfo
 
 @menu
 * Evaluating Polynomials::
 * Finding Roots::
 * Products of Polynomials::
 * Derivatives and Integrals::
@@ -49,18 +49,20 @@ p(x) = @var{c}(1) x^@var{N} + ... + @var
 
 @node Evaluating Polynomials
 @section Evaluating Polynomials
 
 The value of a polynomial represented by the vector @var{c} can be evaluated
 at the point @var{x} very easily, as the following example shows:
 
 @example
+@group
 N = length(c)-1;
 val = dot( x.^(N:-1:0), c );
+@end group
 @end example
 
 @noindent
 While the above example shows how easy it is to compute the value of a
 polynomial, it isn't the most stable algorithm.  With larger polynomials
 you should use more elegant algorithms, such as Horner's Method, which
 is exactly what the Octave function @code{polyval} does.
 
@@ -106,20 +108,22 @@ for a definition), and then finding its 
 @section Derivatives and Integrals
 
 Octave comes with functions for computing the derivative and the integral
 of a polynomial.  The functions @code{polyderiv} and @code{polyint}
 both return new polynomials describing the result.  As an example we'll
 compute the definite integral of @math{p(x) = x^2 + 1} from 0 to 3.
 
 @example
+@group
 c = [1, 0, 1];
 integral = polyint(c);
 area = polyval(integral, 3) - polyval(integral, 0)
 @result{} 12
+@end group
 @end example
 
 @DOCSTRING(polyderiv)
 
 @DOCSTRING(polyder)
 
 @DOCSTRING(polyinteg)
 
@@ -144,24 +148,26 @@ creates a piece-wise polynomial, @code{p
 created by @code{mkpp}, and @code{unmkpp} returns detailed information
 about the function.
 
 The following example shows how to combine two linear functions and a
 quadratic into one function.  Each of these functions is expressed
 on adjoined intervals.
 
 @example
+@group
 x = [-2, -1, 1, 2];
 p = [ 0,  1, 0;
       1, -2, 1;
       0, -1, 1 ];
 pp = mkpp(x, p);
 xi = linspace(-2, 2, 50);
 yi = ppval(pp, xi);
 plot(xi, yi);
+@end group
 @end example
 
 @DOCSTRING(ppval)
 
 @DOCSTRING(mkpp)
 
 @DOCSTRING(unmkpp)
 
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -26,23 +26,23 @@
 ## points @var{x}, at the points @var{xi}.  The sample points @var{x} 
 ## must be strictly monotonic.  If @var{y} is an array, treat the columns
 ## of @var{y} separately.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
-## Return the nearest neighbour.
+## Return the nearest neighbor.
 ## @item 'linear'
-## Linear interpolation from nearest neighbours
+## Linear interpolation from nearest neighbors
 ## @item 'pchip'
 ## Piece-wise cubic hermite interpolating polynomial
 ## @item 'cubic'
-## Cubic interpolation from four nearest neighbours
+## Cubic interpolation from four nearest neighbors
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve
 ## @end table
 ##
 ## Appending '*' to the start of the above method forces @code{interp1}
 ## to assume that @var{x} is uniformly spaced, and only @code{@var{x}
 ## (1)} and @code{@var{x} (2)} are referenced.  This is usually faster,
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -38,21 +38,21 @@
 ## the interpolation adds a point half way between each of the interpolation 
 ## points.  This process is performed @var{m} times.  If only @var{v} is 
 ## specified, then @var{m} is assumed to be @code{1}.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
-## Return the nearest neighbour.
+## Return the nearest neighbor.
 ## @item 'linear'
-## Linear interpolation from nearest neighbours.
+## Linear interpolation from nearest neighbors.
 ## @item 'cubic'
-## Cubic interpolation from four nearest neighbours (not implemented yet).
+## Cubic interpolation from four nearest neighbors (not implemented yet).
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is 'linear'.
 ##
 ## If @var{extrap} is the string 'extrap', then extrapolate values beyond
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -38,21 +38,21 @@
 ## the interpolation adds a point half way between each of the interpolation 
 ## points.  This process is performed @var{m} times.  If only @var{v} is 
 ## specified, then @var{m} is assumed to be @code{1}.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
-## Return the nearest neighbour.
+## Return the nearest neighbor.
 ## @item 'linear'
-## Linear interpolation from nearest neighbours.
+## Linear interpolation from nearest neighbors.
 ## @item 'cubic'
-## Cubic interpolation from four nearest neighbours (not implemented yet).
+## Cubic interpolation from four nearest neighbors (not implemented yet).
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is 'linear'.
 ##
 ## If @var{extrapval} is the scalar value, use it to replace the values
diff --git a/scripts/geometry/delaunay.m b/scripts/geometry/delaunay.m
--- a/scripts/geometry/delaunay.m
+++ b/scripts/geometry/delaunay.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{tri} =} delaunay (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{tri} =} delaunay (@var{x}, @var{y}, @var{opt})
 ## The return matrix of size [n, 3] contains a set triangles which are
 ## described by the indices to the data point x and y vector.
-## The triangulation satisfies the Delaunay circumcircle criterion.
-## No other data point is in the circumcircle of the defining triangle.
+## The triangulation satisfies the Delaunay circum-circle criterion.
+## No other data point is in the circum-circle of the defining triangle.
 ##
 ## A third optional argument, which must be a string, contains extra options
 ## passed to the underlying qhull command.  See the documentation for the 
 ## Qhull library for details.
 ##
 ## @example
 ## @group
 ## x = rand (1, 10);
diff --git a/scripts/geometry/tsearchn.m b/scripts/geometry/tsearchn.m
--- a/scripts/geometry/tsearchn.m
+++ b/scripts/geometry/tsearchn.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{idx}, @var{p}] =} tsearchn (@var{x}, @var{t}, @var{xi})
 ## Searches for the enclosing Delaunay convex hull.  For @code{@var{t} =
 ## delaunayn (@var{x})}, finds the index in @var{t} containing the
 ## points @var{xi}.  For points outside the convex hull, @var{idx} is NaN.
-## If requested @code{tsearchn} also returns the barycentric coordinates @var{p}
+## If requested @code{tsearchn} also returns the Barycentric coordinates @var{p}
 ## of the enclosing triangles.
 ## @seealso{delaunay, delaunayn}
 ## @end deftypefn
 
 function [idx, p] = tsearchn (x, t, xi)
   if (nargin != 3)
     print_usage ();
   endif
diff --git a/scripts/polynomial/convn.m b/scripts/polynomial/convn.m
--- a/scripts/polynomial/convn.m
+++ b/scripts/polynomial/convn.m
@@ -21,17 +21,17 @@
 ## @math{N}-dimensional convolution of matrices @var{a} and @var{b}.
 ##
 ## The size of the output is determined by the @var{shape} argument.
 ## This can be any of the following character strings:
 ##
 ## @table @asis
 ## @item "full"
 ## The full convolution result is returned.  The size out of the output is
-## @code{size (@var{a}) + size (@var{b})-1}.  This is the default behaviour.
+## @code{size (@var{a}) + size (@var{b})-1}.  This is the default behavior.
 ## @item "same"
 ## The central part of the convolution result is returned.  The size out of the
 ## output is the same as @var{a}.
 ## @item "valid"
 ## The valid part of the convolution is returned.  The size of the result is
 ## @code{max (size (@var{a}) - size (@var{b})+1, 0)}.
 ## @end table
 ##
diff --git a/scripts/polynomial/mpoles.m b/scripts/polynomial/mpoles.m
--- a/scripts/polynomial/mpoles.m
+++ b/scripts/polynomial/mpoles.m
@@ -15,27 +15,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{multp}, @var{indx}] =} mpoles (@var{p})
 ## @deftypefnx {Function File} {[@var{multp}, @var{indx}] =} mpoles (@var{p}, @var{tol})
 ## @deftypefnx {Function File} {[@var{multp}, @var{indx}] =} mpoles (@var{p}, @var{tol}, @var{reorder})
-## Identifiy unique poles in @var{p} and associates their multiplicity,
+## Identify unique poles in @var{p} and associates their multiplicity,
 ## ordering them from largest to smallest.
 ## 
 ## If the relative difference of the poles is less than @var{tol}, then
 ## they are considered to be multiples.  The default value for @var{tol}
 ## is 0.001.
 ##
 ## If the optional parameter @var{reorder} is zero, poles are not sorted.
 ##
 ## The value @var{multp} is a vector specifying the multiplicity of the
-## poles.  @var{multp}(:) refers to mulitplicity of @var{p}(@var{indx}(:)).
+## poles.  @var{multp}(:) refers to multiplicity of @var{p}(@var{indx}(:)).
 ##
 ## For example,
 ##
 ## @example
 ## @group
 ## p = [2 3 1 1 2];
 ## [m, n] = mpoles(p);
 ##   @result{} m = [1; 1; 2; 1; 2]
