# HG changeset patch
# User jwe
# Date 799353008 0
#      Mon May 01 18:30:08 1995 +0000
# Node ID f93b7fa5e113d3c7eb96cd72555d1826bbb5d772
# Parent  34295bf6aac6ba450cba36f6c38b6a72cec03584
[project @ 1995-05-01 18:30:08 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <assert.h>
 
 #include "Array.h"
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Array_h)
 #define octave_Array_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include <assert.h>
 
 #include "lo-error.h"
 
-extern "C++" {
-
 // Classes we declare.
 
 template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
 template <class T> class DiagArray;
 
@@ -357,18 +359,16 @@ public:
   T elem (int r, int c) const;
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Bounds.cc b/liboctave/Bounds.cc
--- a/liboctave/Bounds.cc
+++ b/liboctave/Bounds.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "Bounds.h"
 #include "lo-error.h"
diff --git a/liboctave/Bounds.h b/liboctave/Bounds.h
--- a/liboctave/Bounds.h
+++ b/liboctave/Bounds.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Bounds_h)
 #define octave_Bounds_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dColVector.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class Bounds
 {
 public:
 
@@ -79,18 +81,16 @@ protected:
   int nb;
 
 private:
 
   void error (const char *msg);
 
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexColumnVector_h)
 #define octave_ComplexColumnVector_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class ComplexColumnVector : public MArray<Complex>
 {
 friend class ComplexMatrix;
 friend class ComplexRowVector;
 
 public:
 
   ComplexColumnVector (void) : MArray<Complex> () { }
@@ -182,18 +184,16 @@ public:
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
   friend istream& operator >> (istream& is, ComplexColumnVector& a);
 
 private:
 
   ComplexColumnVector (Complex *d, int l) : MArray<Complex> (d, l) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -19,27 +19,29 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexDiagMatrix_h)
 #define octave_ComplexDiagMatrix_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "dRowVector.h"
 #include "CRowVector.h"
 #include "dColVector.h"
 #include "CColVector.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class ComplexDiagMatrix : public MDiagArray<Complex>
 {
 public:
 
   ComplexDiagMatrix (void) : MDiagArray<Complex> () { }
   ComplexDiagMatrix (int n) : MDiagArray<Complex> (n) { }
   ComplexDiagMatrix (int n, const Complex& val)
     : MDiagArray<Complex> (n, val) { }
@@ -155,18 +157,16 @@ public:
   friend ostream& operator << (ostream& os, const ComplexDiagMatrix& a);
 
 private:
 
   ComplexDiagMatrix (Complex *d, int nr, int nc)
     : MDiagArray<Complex> (d, nr, nc) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <sys/types.h>
 #include <iostream.h>
 #include <float.h>
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -19,24 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexMatrix_h)
 #define octave_ComplexMatrix_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include <Complex.h>
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class ComplexMatrix : public MArray2<Complex>
 {
 friend class Matrix;
 friend class ComplexCHOL;
 friend class ComplexHESS;
 friend class ComplexLU;
 friend class ComplexQR;
 friend class ComplexQRP;
@@ -340,18 +342,16 @@ public:
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
 private:
 
   ComplexMatrix (Complex *d, int r, int c) : MArray2<Complex> (d, r, c) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexRowVector_h)
 #define octave_ComplexRowVector_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class ComplexRowVector : public MArray<Complex>
 {
 friend class ComplexColumnVector;
 
 public:
 
   ComplexRowVector (void) : MArray<Complex> () { }
   ComplexRowVector (int n) : MArray<Complex> (n) { }
@@ -159,18 +161,16 @@ private:
 Complex operator * (const ComplexRowVector& a, const ColumnVector& b);
 
 Complex operator * (const ComplexRowVector& a, const ComplexColumnVector& b);
 
 // other operations
 
 ComplexRowVector linspace (const Complex& x1, const Complex& x2, int n);
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxAEPBAL.cc b/liboctave/CmplxAEPBAL.cc
--- a/liboctave/CmplxAEPBAL.cc
+++ b/liboctave/CmplxAEPBAL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxAEPBAL.h"
 #include "dMatrix.h"
 #include "f77-uscore.h"
 
diff --git a/liboctave/CmplxAEPBAL.h b/liboctave/CmplxAEPBAL.h
--- a/liboctave/CmplxAEPBAL.h
+++ b/liboctave/CmplxAEPBAL.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexAEPBALANCE_h)
 #define octave_ComplexAEPBALANCE_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CMatrix.h"
 
-extern "C++" {
-
 class ComplexAEPBALANCE
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexAEPBALANCE (void) {}
   ComplexAEPBALANCE (const ComplexMatrix& a, const char *balance_job);
@@ -79,18 +81,16 @@ inline ComplexMatrix ComplexAEPBALANCE::
   return balanced_mat;
 }
 
 inline ComplexMatrix ComplexAEPBALANCE::balancing_matrix (void) const
 {
   return balancing_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxCHOL.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CmplxCHOL.h b/liboctave/CmplxCHOL.h
--- a/liboctave/CmplxCHOL.h
+++ b/liboctave/CmplxCHOL.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexCHOL_h)
 #define octave_ComplexCHOL_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CMatrix.h"
 
-extern "C++" {
-
 class ComplexCHOL
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexCHOL (void) {}
   ComplexCHOL (const ComplexMatrix& a);
@@ -75,18 +77,16 @@ ComplexCHOL::operator = (const ComplexCH
   return *this;
 }
 
 inline ComplexMatrix ComplexCHOL::chol_matrix (void) const
 {
   return chol_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxDET.cc b/liboctave/CmplxDET.cc
--- a/liboctave/CmplxDET.cc
+++ b/liboctave/CmplxDET.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 
 #include <Complex.h>
diff --git a/liboctave/CmplxDET.h b/liboctave/CmplxDET.h
--- a/liboctave/CmplxDET.h
+++ b/liboctave/CmplxDET.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexDET_h)
 #define octave_ComplexDET_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include <Complex.h>
 
-extern "C++" {
-
 class ComplexDET
 {
   friend class ComplexMatrix;
 
 public:
 
   ComplexDET (void);
 
@@ -75,18 +77,16 @@ inline ComplexDET& ComplexDET::operator 
 }
 
 inline ComplexDET::ComplexDET (const Complex *d)
 {
   det[0] = d[0];
   det[1] = d[1];
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxHESS.cc b/liboctave/CmplxHESS.cc
--- a/liboctave/CmplxHESS.cc
+++ b/liboctave/CmplxHESS.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxHESS.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CmplxHESS.h b/liboctave/CmplxHESS.h
--- a/liboctave/CmplxHESS.h
+++ b/liboctave/CmplxHESS.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexHESS_h)
 #define octave_ComplexHESS_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CMatrix.h"
 
-extern "C++" {
-
 class ComplexHESS
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexHESS (void) {}
   ComplexHESS (const ComplexMatrix& a);
@@ -84,18 +86,16 @@ inline ComplexMatrix ComplexHESS::hess_m
   return hess_mat;
 }
 
 inline ComplexMatrix ComplexHESS::unitary_hess_matrix (void) const
 {
   return unitary_hess_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxLU.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexLU_h)
 #define octave_Complex_LU_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 
-extern "C++" {
-
 class ComplexLU
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexLU (void) {}
 
@@ -83,18 +85,16 @@ inline ComplexMatrix ComplexLU::U (void)
   return u;
 }
 
 inline Matrix ComplexLU::P (void) const
 {
   return p;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxQR.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexQR_h)
 #define octave_ComplexQR_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CMatrix.h"
 #include "dbleQR.h"
 
-extern "C++" {
-
 class ComplexQR
 {
 public:
 
   ComplexQR (void) {}
 
   ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
@@ -72,18 +74,16 @@ inline ComplexMatrix ComplexQR::Q (void)
   return q;
 }
 
 inline ComplexMatrix ComplexQR::R (void) const
 {
   return r;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <assert.h>
 
 #include "CmplxQRP.h"
 #include "mx-inlines.cc"
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexQRP_h)
 #define octave_ComplexQRP_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CmplxQR.h"
 
-extern "C++" {
-
 class ComplexQRP : public ComplexQR
 {
 public:
 
   ComplexQRP (void) {}
 
   ComplexQRP (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
@@ -63,18 +65,16 @@ inline ComplexQRP& ComplexQRP::operator 
   return *this;
 }
 
 inline Matrix ComplexQRP::P (void) const
 {
   return p;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxSCHUR.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexSCHUR_h)
 #define octave_ComplexSCHUR_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "CMatrix.h"
 
-extern "C++" {
-
 class ComplexSCHUR
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexSCHUR (void) {}
 
@@ -89,18 +91,16 @@ inline ComplexMatrix ComplexSCHUR::schur
   return schur_mat;
 }
 
 inline ComplexMatrix ComplexSCHUR::unitary_matrix (void) const
 {
   return unitary_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxSVD.h"
 #include "mx-inlines.cc"
 #include "f77-uscore.h"
 
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -19,24 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexSVD_h)
 #define octave_ComplexSVD_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dDiagMatrix.h"
 #include "CMatrix.h"
 #include "dbleSVD.h"
 
-extern "C++" {
-
 class ComplexSVD
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexSVD (void) {}
 
@@ -101,18 +103,16 @@ inline ComplexMatrix ComplexSVD::left_si
   return left_sm;
 }
 
 inline ComplexMatrix ComplexSVD::right_singular_matrix (void) const
 {
   return right_sm;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CollocWt.cc b/liboctave/CollocWt.cc
--- a/liboctave/CollocWt.cc
+++ b/liboctave/CollocWt.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "CollocWt.h"
 #include "f77-uscore.h"
diff --git a/liboctave/CollocWt.h b/liboctave/CollocWt.h
--- a/liboctave/CollocWt.h
+++ b/liboctave/CollocWt.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_CollocWt_h)
 #define octave_CollocWt_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 #include "dColVector.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class CollocWt
 {
 public:
 
@@ -136,18 +138,16 @@ inline Vector CollocWt::quad_weights (vo
   { return quad (); }
 
 inline Matrix CollocWt::first (void)
   { if (!initialized) init (); return A; }
 
 inline Matrix CollocWt::second (void)
   { if (!initialized) init (); return B; }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/DAE.h b/liboctave/DAE.h
--- a/liboctave/DAE.h
+++ b/liboctave/DAE.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_DAE_h)
 #define octave_DAE_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "dColVector.h"
 #include "ODE.h"
 #include "DAEFunc.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class DAE : public ODE, public DAEFunc
 {
 public:
 
@@ -82,18 +84,16 @@ private:
   friend int ddassl_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
   friend int ddassl_f (double *time, double *state, double *deriv,
 		       double *delta, int *ires, double *rpar, int *ipar);
 
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/DAEFunc.cc b/liboctave/DAEFunc.cc
--- a/liboctave/DAEFunc.cc
+++ b/liboctave/DAEFunc.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "DAEFunc.h"
 
 DAEFunc::DAEFunc (void)
 {
diff --git a/liboctave/DAEFunc.h b/liboctave/DAEFunc.h
--- a/liboctave/DAEFunc.h
+++ b/liboctave/DAEFunc.h
@@ -19,21 +19,23 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_DAEFunc_h)
 #define octave_DAEFunc_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class Matrix;
 class ColumnVector;
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 #if !defined (octave_DAEFunc_typedefs)
 #define octave_DAEFunc_typedefs 1
 
 #endif
@@ -72,18 +74,16 @@ public:
 
 protected:
 
   DAERHSFunc fun;
 
   DAEJacFunc jac;
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "DAE.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "EIG.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -19,24 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_EIG_h)
 #define octave_EIG_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "CColVector.h"
 
-extern "C++" {
-
 class EIG
 {
 friend class Matrix;
 friend class ComplexMatrix;
 
 public:
 
   EIG (void) {}
@@ -103,18 +105,16 @@ inline ComplexColumnVector EIG::eigenval
   return lambda;
 }
 
 inline ComplexMatrix EIG::eigenvectors (void) const
 {
   return v;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/FEGrid.cc b/liboctave/FEGrid.cc
--- a/liboctave/FEGrid.cc
+++ b/liboctave/FEGrid.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "FEGrid.h"
 #include "lo-error.h"
diff --git a/liboctave/FEGrid.h b/liboctave/FEGrid.h
--- a/liboctave/FEGrid.h
+++ b/liboctave/FEGrid.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_FEGrid_h)
 #define octave_FEGrid_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dColVector.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class FEGrid
 {
 public:
 
@@ -78,18 +80,16 @@ inline double FEGrid::left (void) const
   { return elem.elem (0); }
 
 inline double FEGrid::right (void) const
   { return elem.elem (elem.capacity () - 1); }
 
 inline Vector FEGrid::element_boundaries (void) const
   { return elem; }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/FSQP.cc b/liboctave/FSQP.cc
--- a/liboctave/FSQP.cc
+++ b/liboctave/FSQP.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef FSQP_MISSING
 
 #include "FSQP.h"
 #include "f77-uscore.h"
diff --git a/liboctave/FSQP.h b/liboctave/FSQP.h
--- a/liboctave/FSQP.h
+++ b/liboctave/FSQP.h
@@ -19,34 +19,34 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_FSQP_h)
 #define octave_FSQP_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #ifndef FSQP_MISSING
 
 #include "NLP.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class FSQP : public NLP
 {
  public:
  private:
 };
 
-} // extern "C++"
-
 #endif /* FSQP_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/LP.cc b/liboctave/LP.cc
--- a/liboctave/LP.cc
+++ b/liboctave/LP.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "LP.h"
 
 LP::LP (void) {}
 
diff --git a/liboctave/LP.h b/liboctave/LP.h
--- a/liboctave/LP.h
+++ b/liboctave/LP.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_LP_h)
 #define octave_LP_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class LP
 {
  public:
 
@@ -51,18 +53,16 @@ class LP
 
  protected:
 
   Vector c;
   Bounds bnds;
   LinConst lc;
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/LPsolve.cc b/liboctave/LPsolve.cc
--- a/liboctave/LPsolve.cc
+++ b/liboctave/LPsolve.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dColVector.h"
 #include "LPsolve.h"
 
 Vector
diff --git a/liboctave/LPsolve.h b/liboctave/LPsolve.h
--- a/liboctave/LPsolve.h
+++ b/liboctave/LPsolve.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_LPsolve_h)
 #define octave_LPsolve_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ColumnVector;
 
 #include "LP.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class LPsolve : public LP
 {
  public:
 
@@ -55,18 +57,16 @@ class LPsolve : public LP
 
   virtual Vector minimize (double& objf, int& inform, Vector& lambda);
 
  private:
 
   void set_default_options (void);
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 #include <iostream.h>
 
diff --git a/liboctave/LinConst.cc b/liboctave/LinConst.cc
--- a/liboctave/LinConst.cc
+++ b/liboctave/LinConst.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "LinConst.h"
 #include "lo-error.h"
diff --git a/liboctave/LinConst.h b/liboctave/LinConst.h
--- a/liboctave/LinConst.h
+++ b/liboctave/LinConst.h
@@ -19,27 +19,29 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_LinConst_h)
 #define octave_LinConst_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 class ColumnVector;
 
 #include <float.h>
 
 #include "dMatrix.h"
 #include "Bounds.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class LinConst : public Bounds
 {
 public:
 
@@ -122,18 +124,16 @@ LinConst::set_constraint_matrix (const M
   if (lb.capacity () != amat.rows ())
     error ("inconsistent size for new linear constraint matrix");
 
   A = amat;
 
   return *this;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MArray.h"
 #include "lo-error.h"
 
 // Nothing like a little CPP abuse to brighten everyone's day.  Would
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -16,21 +16,23 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #if !defined (octave_MArray_h)
 #define octave_MArray_h 1
 
-extern "C++" {
-
 #include "Array.h"
 
 // Classes we declare.
 
 template <class T> class MArray;
 template <class T> class MArray2;
 template <class T> class MDiagArray;
 
@@ -213,18 +215,16 @@ public:
 				   const MDiagArray<T>& b);
 
   friend MDiagArray<T> product (const MDiagArray<T>& a,
 				const MDiagArray<T>& b);
 
   friend MDiagArray<T> operator - (const MDiagArray<T>& a);
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLConst.cc b/liboctave/NLConst.cc
--- a/liboctave/NLConst.cc
+++ b/liboctave/NLConst.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "NLConst.h"
 
 NLConst::NLConst (void) : Bounds (), NLFunc ()
 {
diff --git a/liboctave/NLConst.h b/liboctave/NLConst.h
--- a/liboctave/NLConst.h
+++ b/liboctave/NLConst.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_NLConst_h)
 #define octave_NLConst_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ColumnVector;
 
 #include "Bounds.h"
 #include "NLFunc.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class NLConst : public Bounds, public NLFunc
 {
 public:
 
@@ -47,18 +49,16 @@ public:
   NLConst& operator = (const NLConst& a);
 
 private:
 
   void error (const char *msg);
 
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <float.h>
 #include <math.h>
 
 #include "NLEqn.h"
diff --git a/liboctave/NLEqn.h b/liboctave/NLEqn.h
--- a/liboctave/NLEqn.h
+++ b/liboctave/NLEqn.h
@@ -19,21 +19,23 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_NLEqn_h)
 #define octave_NLEqn_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "dColVector.h"
 #include "NLFunc.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class NLEqn_options
 {
  public:
 
@@ -86,18 +88,16 @@ class NLEqn : public NLFunc, public NLEq
  private:
 
   int n;
   Vector x;
 
   void error (const char* msg);
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLFunc.cc b/liboctave/NLFunc.cc
--- a/liboctave/NLFunc.cc
+++ b/liboctave/NLFunc.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "NLFunc.h"
 
 NLFunc::NLFunc (void)
 {
diff --git a/liboctave/NLFunc.h b/liboctave/NLFunc.h
--- a/liboctave/NLFunc.h
+++ b/liboctave/NLFunc.h
@@ -19,21 +19,23 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_NLFunc_h)
 #define octave_NLFunc_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ColumnVector;
 class Matrix;
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 typedef Vector (*nonlinear_fcn) (const Vector&);
 typedef Matrix (*jacobian_fcn) (const Vector&);
 
 class NLFunc
@@ -57,18 +59,16 @@ public:
   NLFunc& set_jacobian_function (const jacobian_fcn j);
 
 protected:
 
   nonlinear_fcn fun;
   jacobian_fcn jac;
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLP.h b/liboctave/NLP.h
--- a/liboctave/NLP.h
+++ b/liboctave/NLP.h
@@ -25,18 +25,16 @@ Software Foundation, 675 Mass Ave, Cambr
 #define octave_NLP_h 1
 
 #include "dColVector.h"
 #include "Objective.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "NLConst.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class NLP
 {
  public:
 
@@ -125,18 +123,16 @@ NLP::operator = (const NLP& a)
 }
 
 inline int
 NLP::size (void) const
 {
   return x.capacity ();
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 #include <string.h>
 #include <strstream.h>
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_NPSOL_h)
 #define octave_NPSOL_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #ifndef NPSOL_MISSING
 
 #include "dColVector.h"
 #include "NLP.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class NPSOL_options
 {
  public:
 
@@ -183,18 +185,16 @@ class NPSOL : public NLP, public NPSOL_o
 // variable.
 // Nonzero means an error occurred in the calculation of the objective
 // function, and the user wants us to quit.
 extern int npsol_objective_error;
 
 inline NPSOL::NPSOL (const NPSOL& a) : NLP (a.x, a.phi, a.bnds, a.lc, a.nlc)
   { }
 
-} // extern "C++"
-
 #endif /* NPSOL_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/ODE.h b/liboctave/ODE.h
--- a/liboctave/ODE.h
+++ b/liboctave/ODE.h
@@ -19,24 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ODE_h)
 #define octave_ODE_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "ODEFunc.h"
 
-extern "C++" {
-
 class ODE_options
 {
  public:
 
   ODE_options (void);
   ODE_options (const ODE_options& opt);
 
   ODE_options& operator = (const ODE_options& opt);
@@ -127,18 +129,16 @@ private:
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
   friend int lsode_j (int *neq, double *t, double *y, int *ml, int *mu,
 		      double *pd, int *nrowpd);
 
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/ODEFunc.cc b/liboctave/ODEFunc.cc
--- a/liboctave/ODEFunc.cc
+++ b/liboctave/ODEFunc.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "ODEFunc.h"
 
 ODEFunc::ODEFunc (void)
 {
diff --git a/liboctave/ODEFunc.h b/liboctave/ODEFunc.h
--- a/liboctave/ODEFunc.h
+++ b/liboctave/ODEFunc.h
@@ -19,21 +19,23 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ODEFunc_h)
 #define octave_ODEFunc_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class Matrix;
 class ColumnVector;
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class ODEFunc
 {
 public:
 
@@ -58,18 +60,16 @@ public:
 
 protected:
 
   ODERHSFunc fun;
 
   ODEJacFunc jac;
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Objective.cc b/liboctave/Objective.cc
--- a/liboctave/Objective.cc
+++ b/liboctave/Objective.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Objective.h"
 
 Objective::Objective (void)
 {
diff --git a/liboctave/Objective.h b/liboctave/Objective.h
--- a/liboctave/Objective.h
+++ b/liboctave/Objective.h
@@ -19,19 +19,21 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Objective_h)
 #define octave_Objective_h 1
 
-#include "dColVector.h"
+#if defined (__GNUG__)
+#pragma interface
+#endif
 
-extern "C++" {
+#include "dColVector.h"
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 typedef double (*objective_fcn) (const Vector&);
 typedef Vector (*gradient_fcn) (const Vector&);
 
@@ -57,18 +59,16 @@ class Objective
 
  private:
 
   objective_fcn phi;
   gradient_fcn grad;
 
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/QLD.cc b/liboctave/QLD.cc
--- a/liboctave/QLD.cc
+++ b/liboctave/QLD.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <iostream.h>
 
 #include "dMatrix.h"
diff --git a/liboctave/QLD.h b/liboctave/QLD.h
--- a/liboctave/QLD.h
+++ b/liboctave/QLD.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QLD_h)
 #define octave_QLD_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class Matrix;
 class ColumnVector;
 
 #include "QP.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class QLD : public QP
 {
  public:
 
@@ -88,18 +90,16 @@ QLD::operator = (const QLD& a)
   H = a.H;
   c = a.c;
   bnds = a.bnds;
   lc = a.lc;
   iprint = a.iprint;
   return *this;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/QP.cc b/liboctave/QP.cc
--- a/liboctave/QP.cc
+++ b/liboctave/QP.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "QP.h"
 
 QP::QP (void) {}
 
diff --git a/liboctave/QP.h b/liboctave/QP.h
--- a/liboctave/QP.h
+++ b/liboctave/QP.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QP_h)
 #define octave_QP_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class QP
 {
  public:
 
@@ -69,18 +71,16 @@ class QP
   Bounds bnds;
   LinConst lc;
 
  private:
 
   Matrix make_h_symmetric (void);
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 
 #ifndef QPSOL_MISSING
diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -19,24 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QPSOL_h)
 #define octave_QPSOL_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #ifndef QPSOL_MISSING
 
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "QP.h"
 
-extern "C++" {
-
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class QPSOL_options
 {
  public:
 
@@ -118,18 +120,16 @@ QPSOL::operator = (const QPSOL& a)
   x = a.x;
   H = a.H;
   c = a.c;
   bnds = a.bnds;
   lc = a.lc;
   return *this;
 }
 
-} // extern "C++"
-
 #endif /* QPSOL_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 
 #include "Quad.h"
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -19,19 +19,21 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Quad_h)
 #define octave_Quad_h 1
 
-#include "dColVector.h"
+#if defined (__GNUG__)
+#pragma interface
+#endif
 
-extern "C++" {
+#include "dColVector.h"
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 #if !defined (octave_Quad_typedefs)
 #define octave_Quad_typedefs 1
 
@@ -129,18 +131,16 @@ class IndefQuad : public Quad
 
  private:
 
   int integration_error;
   double bound;
   IntegralType type;
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 #include <limits.h>
 
 #include "Range.h"
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -19,17 +19,19 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Range_h)
 #define octave_Range_h 1
 
-extern "C++" {
+#if defined (__GNUG__)
+#pragma interface
+#endif
 
 class istream;
 class ostream;
 class Matrix;
 
 class Range
 {
  public:
@@ -108,18 +110,16 @@ inline double Range::base (void) const {
 inline double Range::limit (void) const { return rng_limit; }
 inline double Range::inc (void) const { return rng_inc;   }
 inline int Range::nelem (void) const { return rng_nelem; }
 
 inline void Range::set_base (double b) { rng_base = b;  }
 inline void Range::set_limit (double l) { rng_limit = l; }
 inline void Range::set_inc (double i) { rng_inc = i;   }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ColumnVector_h)
 #define octave_ColumnVector_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class ColumnVector : public MArray<double>
 {
 friend class Matrix;
 friend class RowVector;
 
 public:
 
   ColumnVector (void) : MArray<double> () { }
@@ -97,18 +99,16 @@ public:
   friend ostream& operator << (ostream& os, const ColumnVector& a);
   friend istream& operator >> (istream& is, ColumnVector& a);
 
 private:
 
   ColumnVector (double *d, int l) : MArray<double> (d, l) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -19,25 +19,27 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_DiagMatrix_h)
 #define octave_DiagMatrix_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "dRowVector.h"
 #include "dColVector.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class DiagMatrix : public MDiagArray<double>
 {
 friend class SVD;
 friend class ComplexSVD;
 
 public:
 
   DiagMatrix (void) : MDiagArray<double> () { }
@@ -106,18 +108,16 @@ public:
 
   friend ostream& operator << (ostream& os, const DiagMatrix& a);
 
 private:
 
   DiagMatrix (double *d, int nr, int nc) : MDiagArray<double> (d, nr, nc) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <sys/types.h>
 #include <iostream.h>
 #include <stdio.h>
 #include <float.h>
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -19,25 +19,27 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_Matrix_int_h)
 #define octave_Matrix_int_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 // For FILE...
 #include <stdio.h>
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class Matrix : public MArray2<double>
 {
 friend class ComplexMatrix;
 friend class AEPBAL;
 friend class CHOL;
 friend class GEPBAL;
 friend class HESS;
 friend class LU;
@@ -233,18 +235,16 @@ public:
 
 // Until templates really work with g++:
 
 private:
 
   Matrix (double *d, int r, int c) : MArray2<double> (d, r, c) { }
 };
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include <Complex.h>
 
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_RowVector_h)
 #define octave_RowVector_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 #include "MArray.h"
 
 #include "mx-defs.h"
 
-extern "C++" {
-
 class RowVector : public MArray<double>
 {
 friend class ColumnVector;
 
 public:
 
   RowVector (void) : MArray<double> () { }
   RowVector (int n) : MArray<double> (n) { }
@@ -102,18 +104,16 @@ private:
 double operator * (const RowVector& a, const ColumnVector& b);
 
 Complex operator * (const RowVector& a, const ComplexColumnVector& b);
 
 // other operations
 
 RowVector linspace (double x1, double x2, int n);
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleAEPBAL.cc b/liboctave/dbleAEPBAL.cc
--- a/liboctave/dbleAEPBAL.cc
+++ b/liboctave/dbleAEPBAL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleAEPBAL.h"
 #include "f77-uscore.h"
 
 extern "C"
diff --git a/liboctave/dbleAEPBAL.h b/liboctave/dbleAEPBAL.h
--- a/liboctave/dbleAEPBAL.h
+++ b/liboctave/dbleAEPBAL.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_AEPBALANCE_h)
 #define octave_AEPBALANCE_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class AEPBALANCE
 {
 friend class Matrix;
 
 public:
 
   AEPBALANCE (void) {}
 
@@ -80,18 +82,16 @@ inline Matrix AEPBALANCE::balanced_matri
   return balanced_mat;
 }
 
 inline Matrix AEPBALANCE::balancing_matrix (void) const
 {
   return balancing_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleCHOL.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleCHOL.h b/liboctave/dbleCHOL.h
--- a/liboctave/dbleCHOL.h
+++ b/liboctave/dbleCHOL.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_CHOL_h)
 #define octave_CHOL_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class CHOL
 {
 friend class Matrix;
 
 public:
 
   CHOL (void) {}
 
@@ -77,18 +79,16 @@ CHOL::operator = (const CHOL& a)
   return *this;
 }
 
 inline Matrix CHOL::chol_matrix (void) const
 {
   return chol_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleDET.cc b/liboctave/dbleDET.cc
--- a/liboctave/dbleDET.cc
+++ b/liboctave/dbleDET.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 #include <float.h>
 
 #include "dbleDET.h"
diff --git a/liboctave/dbleDET.h b/liboctave/dbleDET.h
--- a/liboctave/dbleDET.h
+++ b/liboctave/dbleDET.h
@@ -19,19 +19,21 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_DET_h)
 #define octave_DET_h 1
 
-class ostream;
+#if defined (__GNUG__)
+#pragma interface
+#endif
 
-extern "C++" {
+class ostream;
 
 class DET
 {
 friend class Matrix;
 
 public:
 
   DET (void);
@@ -73,18 +75,16 @@ inline DET& DET::operator = (const DET& 
 }
 
 inline DET::DET (const double *d)
 {
   det[0] = d[0];
   det[1] = d[1];
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleGEPBAL.cc b/liboctave/dbleGEPBAL.cc
--- a/liboctave/dbleGEPBAL.cc
+++ b/liboctave/dbleGEPBAL.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <math.h>
 
 #include "dbleGEPBAL.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleGEPBAL.h b/liboctave/dbleGEPBAL.h
--- a/liboctave/dbleGEPBAL.h
+++ b/liboctave/dbleGEPBAL.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_GEPBALANCE_h)
 #define octave_GEPBALANCE_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class GEPBALANCE
 {
 friend class Matrix;
 
 public:
 
   GEPBALANCE (void) {}
 
@@ -99,18 +101,16 @@ inline Matrix GEPBALANCE::left_balancing
   return left_balancing_mat;
 }
 
 inline Matrix GEPBALANCE::right_balancing_matrix (void) const 
 {
   return right_balancing_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleHESS.cc b/liboctave/dbleHESS.cc
--- a/liboctave/dbleHESS.cc
+++ b/liboctave/dbleHESS.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleHESS.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleHESS.h b/liboctave/dbleHESS.h
--- a/liboctave/dbleHESS.h
+++ b/liboctave/dbleHESS.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_HESS_h)
 #define octave_HESS_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class HESS
 {
 friend class Matrix;
 
 public:
 
   HESS (void) {}
 
@@ -86,18 +88,16 @@ inline Matrix HESS::hess_matrix (void) c
   return hess_mat;
 }
 
 inline Matrix HESS::unitary_hess_matrix (void) const
 {
   return unitary_hess_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleLU.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_LU_h)
 #define octave_LU_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class LU
 {
 friend class Matrix;
 
 public:
 
   LU (void) {}
 
@@ -82,18 +84,16 @@ inline Matrix LU::U (void) const
   return u;
 }
 
 inline Matrix LU::P (void) const
 {
   return p;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleQR.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QR_h)
 #define octave_QR_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class QR
 {
 public:
 
   enum type
     {
       std,
       raw,
@@ -78,18 +80,16 @@ inline Matrix QR::Q (void) const
   return q;
 }
 
 inline Matrix QR::R (void) const
 {
   return r;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <assert.h>
 
 #include "dbleQRP.h"
 #include "mx-inlines.cc"
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QRP_h)
 #define octave_QRP_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dbleQR.h"
 
-extern "C++" {
-
 class QRP : public QR
 {
 public:
 
   QRP (void) {}
 
   QRP (const Matrix& A, QR::type qr_type = QR::std);
 
@@ -63,18 +65,16 @@ inline QRP& QRP::operator = (const QRP& 
   return *this;
 }
 
 inline Matrix QRP::P (void) const
 {
   return p;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleSCHUR.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 #include "f77-uscore.h"
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -19,22 +19,24 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_SCHUR_h)
 #define octave_SCHUR_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dMatrix.h"
 
-extern "C++" {
-
 class SCHUR
 {
 friend class Matrix;
 
 public:
 
   SCHUR (void) {}
 
@@ -88,18 +90,16 @@ inline Matrix SCHUR::schur_matrix (void)
   return schur_mat;
 }
 
 inline Matrix SCHUR::unitary_matrix (void) const
 {
   return unitary_mat;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -16,16 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dbleSVD.h"
 #include "mx-inlines.cc"
 #include "f77-uscore.h"
 
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -19,23 +19,25 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_SVD_h)
 #define octave_SVD_h 1
 
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
 class ostream;
 
 #include "dDiagMatrix.h"
 #include "dMatrix.h"
 
-extern "C++" {
-
 class SVD
 {
 friend class Matrix;
 
 public:
 
   enum type
     {
@@ -104,18 +106,16 @@ inline Matrix SVD::left_singular_matrix 
   return left_sm;
 }
 
 inline Matrix SVD::right_singular_matrix (void) const
 {
   return right_sm;
 }
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-error.h b/liboctave/lo-error.h
--- a/liboctave/lo-error.h
+++ b/liboctave/lo-error.h
@@ -19,37 +19,33 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_liboctave_error_h)
 #define octave_liboctave_error_h 1
 
-extern "C++" {
-
 // Tell g++ that fatal doesn't return;
 
-#ifdef __GNUG__
+#if defined (__GNUG__)
 typedef void v_fcn_cpc_x (const char *, ...);
 volatile v_fcn_cpc_x fatal;
 #endif
 
 extern void liboctave_fatal (const char *fmt, ...);
 
 typedef void (*liboctave_error_handler) (const char *, ...);
 
 // Would be nice to make this private, but we want to share it among
 // all the liboctave classes.
 extern liboctave_error_handler current_liboctave_error_handler;
 
 extern void set_liboctave_error_handler (liboctave_error_handler f);
 
-} // extern "C++"
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/sun-utils.h b/liboctave/sun-utils.h
--- a/liboctave/sun-utils.h
+++ b/liboctave/sun-utils.h
@@ -19,19 +19,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_sun_utils_h)
 #define octave_sun_utils_h 1
 
-extern "C++" {
-
-#ifdef sun
+#if defined (sun)
 
 /*
  * I think that this is really only needed if linking to Fortran
  * compiled libraries on a Sun.  It should never be called.
  * There should probably be a sysdep.cc file, eh?
  */
 
 extern "C" int MAIN_ (void);
@@ -39,17 +37,17 @@ extern "C" int MAIN_ (void);
 /*
  * This is only needed to dereference pointers to doubles if mixing
  * GCC and Sun f77/cc compiled code.  See the GCC manual (where the
  * function access_double() is described) and the Sun f77 manual,
  * which explains that doubles are not always aligned on 8 byte
  * boundaries.
  */
 
-#ifdef __GNUC__
+#if defined (__GNUC__)
 
 inline double
 access_double (double *unaligned_ptr)
 {
   union d2i { double d; int i[2]; };
 
   union d2i *p = (union d2i *) unaligned_ptr;
   union d2i u;
@@ -69,21 +67,17 @@ assign_double (double *unaligned_ptr, do
   union d2i *v = (union d2i *) ptr;
   union d2i *p = (union d2i *) unaligned_ptr;
 
   p->i[0] = v->i[0];
   p->i[1] = v->i[1];
 }
 
 #endif
-
 #endif
-
 #endif
 
-} // extern "C++"
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
