# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1338818924 -7200
#      Mon Jun 04 16:08:44 2012 +0200
# Branch gui
# Node ID 89c64340e9abd94cd98fdb96f8bf4d9cf4682124
# Parent  3df7ef0080c76d1696a0e6681b2505513c5e63eb
Extended event based communication model.

* octave-event-listener.h: New interface for event listeners.
* octave-qt-event-listener: Implementation ov event listener for Qt.
* main-window: Added event listener and connected signals.
* octave-event-observer.h: Renamed ignore-method and added comments.
* octave-event.h: Removed type information and added process method instead.
* octave-link: Removed QObject subclassing.
* src.pro: Added new files to project.
* workspace-model: Removed QTimer, since it not in a Qt event loop anymore.
* workspace-view: Added QTimer from the model temporarily.

diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -29,16 +29,24 @@
 #include "main-window.h"
 #include "file-editor.h"
 #include "settings-dialog.h"
 
 main_window::main_window (QWidget * parent):QMainWindow (parent)
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
+  _octave_qt_event_listener = new octave_qt_event_listener ();
+  octave_link::instance ()->register_event_listener (_octave_qt_event_listener);
+
+  connect (_octave_qt_event_listener,
+           SIGNAL (current_directory_changed(QString)),
+           this,
+           SLOT (update_current_working_directory(QString)));
+
   octave_link::instance ()->launch_octave();
 }
 
 main_window::~main_window ()
 {
 }
 
 void
@@ -163,18 +171,18 @@ main_window::update_current_working_dire
 void
 main_window::change_current_working_directory ()
 {
   QString selectedDirectory =
       QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
 
   if (!selectedDirectory.isEmpty ())
     {
-      _terminal->sendText (QString ("cd \'%1\'\n").arg (selectedDirectory));
-      _terminal->setFocus ();
+      octave_link::instance ()
+          ->request_working_directory_change (selectedDirectory.toStdString ());
     }
 }
 
 void
 main_window::change_current_working_directory (QString directory)
 {
   octave_link::instance ()->request_working_directory_change (directory.toStdString ());
 }
@@ -424,18 +432,18 @@ main_window::construct ()
   connect (_current_directory_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (change_current_working_directory ()));
   connect (_current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (current_working_directory_up()));
   connect (copy_action,                 SIGNAL (triggered()),
            _terminal,                   SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
            _terminal,                   SLOT   (pasteClipboard ()));
-  connect (octave_link::instance (),    SIGNAL (working_directory_changed (QString)),
-           this,                        SLOT (update_current_working_directory (QString)));
+//  connect (octave_link::instance (),    SIGNAL (working_directory_changed (QString)),
+//           this,                        SLOT (update_current_working_directory (QString)));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (change_current_working_directory (QString)));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
   addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -39,16 +39,17 @@
 
 // Own includes
 #include "resource-manager.h"
 #include "octave-link.h"
 #include "workspace-view.h"
 #include "history-dockwidget.h"
 #include "files-dockwidget.h"
 #include "terminal-dockwidget.h"
+#include "octave-qt-event-listener.h"
 
 /**
   * \class MainWindow
   *
   * Represents the main window.
   */
 class main_window:public QMainWindow
 {
@@ -105,13 +106,15 @@ private:
 
   // Toolbars.
   QStatusBar *              _status_bar;
 
   QComboBox *               _current_directory_combo_box;
   QToolButton *             _current_directory_tool_button;
   QToolButton *             _current_directory_up_tool_button;
 
+  octave_qt_event_listener *_octave_qt_event_listener;
+
   // Flag for closing whole application
   bool                      _closing;
 };
 
 #endif // MAINWINDOW_H
diff --git a/gui/src/octave-adapter/octave-event-listener.h b/gui/src/octave-adapter/octave-event-listener.h
new file mode 100644
--- /dev/null
+++ b/gui/src/octave-adapter/octave-event-listener.h
@@ -0,0 +1,32 @@
+/* OctaveGUI - A graphical user interface for Octave
+ * Copyright (C) 2011 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef OCTAVEEVENTLISTENER_H
+#define OCTAVEEVENTLISTENER_H
+
+#include <string>
+
+class octave_event_listener
+{
+  public:
+    octave_event_listener () { }
+    virtual ~octave_event_listener () { }
+
+    virtual void current_directory_has_changed (std::string directory) = 0;
+};
+
+#endif // OCTAVEEVENTLISTENER_H
diff --git a/gui/src/octave-adapter/octave-event-observer.h b/gui/src/octave-adapter/octave-event-observer.h
--- a/gui/src/octave-adapter/octave-event-observer.h
+++ b/gui/src/octave-adapter/octave-event-observer.h
@@ -25,15 +25,24 @@ class octave_event;
   * \brief Implements the observer part for the observer pattern.
   */
 class octave_event_observer
 {
   public:
     octave_event_observer () { }
     virtual ~octave_event_observer () { }
 
+    /**
+      * This will be called when an event has been accepted. Operations
+      * in this routine will be processed in the octave thread.
+      */
     virtual void event_accepted (octave_event *e) const = 0;
-    virtual void event_ignored (octave_event *e) const = 0;
+
+    /**
+      * This will be called when an event has been rejected. Operations
+      * in this routine will be processed in the octave thread.
+      */
+    virtual void event_reject (octave_event *e) const = 0;
 };
 
 #include "octave-event.h"
 
 #endif // OCTAVEEVENTOBSERVER_H
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -15,71 +15,87 @@
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVEEVENT_H
 #define OCTAVEEVENT_H
 
 #include <string>
 #include "octave-event-observer.h"
+#include "oct-env.h"
+#include "toplev.h"
 
 /**
   * \class octave_event
   * \brief Base class for an octave event.
+  * In order to make communication with octave threadsafe, comunication is
+  * implemented via events. An application may create events and post them,
+  * however there is no guarantee events will be processed in a given time.
+  *
+  * In order to create an event, there must be an event observer. The event
+  * observer will be given the opportunity to react on the event as soon as
+  * it has been processed in the octave thread. Accepting and ignoring takes
+  * places in the octave thread.
   */
 class octave_event
 {
   public:
-    enum event_type
-    {
-      exit_event,
-      change_directory_event
-    };
-
     octave_event (const octave_event_observer& o)
       : _octave_event_observer (o)
     { }
 
     virtual ~octave_event ()
     { }
 
-    virtual event_type get_event_type () const = 0;
+    /** Performs what it necessary to make this event happen.
+      * This code is thread-safe since it will be executed in the octave thread.
+      * However, you should take care to keep this code as short as possible. */
+    virtual bool perform () const = 0;
 
+    /**
+      * Accepts this event. This allows the event observer to react properly
+      * onto the event.
+      */
     void accept ()
     { _octave_event_observer.event_accepted (this); }
 
-    void ignore ()
-    { _octave_event_observer.event_ignored (this); }
+    /**
+      * Rejects this event. This allows the event observer to react properly
+      * onto the event.
+      */
+    void reject ()
+    { _octave_event_observer.event_reject (this); }
 
   private:
     const octave_event_observer& _octave_event_observer;
 };
 
+/** Implements an octave exit event. */
 class octave_exit_event : public octave_event
 {
   public:
+    /** Creates a new octave_exit_event. */
     octave_exit_event (const octave_event_observer& o)
       : octave_event (o)
     { }
 
-    event_type get_event_type () const
-    { return octave_event::exit_event; }
+    bool perform () const
+    { clean_up_and_exit (0); return true; }
 };
 
+/** Implements a change directory events. */
 class octave_change_directory_event : public octave_event
 {
   public:
+    /** Creates a new octave_change_directory_event. */
     octave_change_directory_event (const octave_event_observer& o,
                                    std::string directory)
       : octave_event (o)
     { _directory = directory; }
 
-    event_type get_event_type () const
-    { return octave_event::change_directory_event; }
-
-    std::string get_directory () const
-    { return _directory; }
+    bool perform () const
+    { return octave_env::chdir (_directory); }
 
   private:
     std::string _directory;
 };
 
 #endif // OCTAVEEVENT_H
diff --git a/gui/src/octave-adapter/octave-link.cc b/gui/src/octave-adapter/octave-link.cc
--- a/gui/src/octave-adapter/octave-link.cc
+++ b/gui/src/octave-adapter/octave-link.cc
@@ -12,78 +12,60 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "octave-link.h"
 #include "load-path.h"
-#include "oct-env.h"
 #include <QDir>
 #include <QApplication>
 
 int octave_readline_hook ()
 {
   octave_link::instance ()->trigger_update_history_model ();
   octave_link::instance ()->build_symbol_information ();
-  octave_link::instance ()->update_current_working_directory ();
+
+  octave_link::instance ()->generate_events ();
   octave_link::instance ()->process_events ();
   return 0;
 }
 
 void octave_exit_hook (int status)
 {
   Q_UNUSED (status);
-  octave_link::instance ()->terminate_octave ();
+  qApp->quit ();
 }
 
 octave_link octave_link::_singleton;
 
-octave_link::octave_link ():QObject ()
+octave_link::octave_link ()
 {
-  _history_model = new QStringListModel (this);
-  _workspace_model = new workspace_model (this);
-
-  _workspace_model->insert_top_level_item(0, new tree_item ("Local"));
-  _workspace_model->insert_top_level_item(1, new tree_item ("Global"));
-  _workspace_model->insert_top_level_item(2, new tree_item ("Persistent"));
-  _workspace_model->insert_top_level_item(3, new tree_item ("Hidden"));
-
-  _update_workspace_model_timer.setInterval (1000);
-  _update_workspace_model_timer.setSingleShot (false);
-  connect(&_update_workspace_model_timer, SIGNAL (timeout ()),
-    _workspace_model, SLOT (update_from_symbol_table ()));
-
+  _history_model = new QStringListModel ();
+  _workspace_model = new workspace_model (qApp);
   _symbol_information_semaphore = new QSemaphore (1);
   _event_queue_semaphore = new QSemaphore (1);
-  _current_working_directory = "";
+  _last_working_directory = "";
 }
 
 octave_link::~octave_link ()
 {
 }
 
 void
 octave_link::launch_octave ()
 {
   // Create both threads.
-  _octave_main_thread = new octave_main_thread (this);
+  _octave_main_thread = new octave_main_thread ();
   command_editor::add_event_hook (octave_readline_hook);
   octave_exit = octave_exit_hook;
 
   // Start the first one.
   _octave_main_thread->start ();
-  _update_workspace_model_timer.start ();
-}
-
-void
-octave_link::terminate_octave ()
-{
-  qApp->quit ();
 }
 
 void
 octave_link::trigger_update_history_model ()
 {
   // Determine the client's (our) history length and the one of the server.
   int clientHistoryLength = _history_model->rowCount ();
   int serverHistoryLength = command_history::length ();
@@ -95,28 +77,16 @@ octave_link::trigger_update_history_mode
         {
           _history_model->insertRow (0);
           _history_model->setData (_history_model->index (0), QString (command_history::get_entry (i).c_str ()));
         }
     }
 }
 
 void
-octave_link::update_current_working_directory ()
-{
-  QString _queriedWorkingDirectory = octave_env::get_current_directory ().c_str();
-  if (_current_working_directory != _queriedWorkingDirectory)
-    {
-      _current_working_directory = _queriedWorkingDirectory;
-      QDir::setCurrent (_current_working_directory);
-      emit working_directory_changed (_current_working_directory);
-    }
-}
-
-void
 octave_link::acquire_symbol_information ()
 {
   _symbol_information_semaphore->acquire (1);
 }
 
 void
 octave_link::release_symbol_information ()
 {
@@ -141,76 +111,78 @@ octave_link::build_symbol_information ()
 }
 
 const QList <symbol_information>&
 octave_link::get_symbol_information () const
 {
   return _symbol_information;
 }
 
+void
+octave_link::register_event_listener (octave_event_listener *oel)
+{ _octave_event_listener = oel; }
+
 QStringListModel *
 octave_link::get_history_model ()
 {
   return _history_model;
 }
 
 workspace_model *
 octave_link::get_workspace_model ()
 {
   return _workspace_model;
 }
 
 void
+octave_link::generate_events ()
+{
+  std::string current_working_directory = octave_env::get_current_directory ();
+  if (current_working_directory != _last_working_directory)
+    {
+      _last_working_directory = current_working_directory;
+      if (_octave_event_listener)
+        _octave_event_listener
+            ->current_directory_has_changed (_last_working_directory);
+    }
+}
+
+void
 octave_link::process_events ()
 {
   _event_queue_semaphore->acquire ();
   while (_event_queue.size () > 0)
     {
-      octave_event * e = _event_queue.takeFirst ();
-      switch (e->get_event_type ())
-        {
-          case octave_event::exit_event:
-            clean_up_and_exit (0);
-            e->accept ();
-            break;
-
-          case octave_event::change_directory_event:
-            octave_change_directory_event * cde
-                = dynamic_cast <octave_change_directory_event *> (e);
-            if (cde)
-              {
-                std::string directory = cde->get_directory ();
-                if (octave_env::chdir (directory))
-                  e->accept ();
-                else
-                  e->ignore ();
-              }
-            break;
-        }
+      octave_event * e = _event_queue.front ();
+      _event_queue.pop ();
+      if (e->perform ())
+        e->accept ();
+      else
+        e->reject ();
     }
   _event_queue_semaphore->release ();
 }
 
 void
 octave_link::post_event (octave_event *e)
 {
   if (e)
     {
       _event_queue_semaphore->acquire ();
-      _event_queue.push_front (e);
+      _event_queue.push (e);
       _event_queue_semaphore->release ();
     }
 }
 
 void
 octave_link::event_accepted (octave_event *e) const
 { delete e; }
 
 void
-octave_link::event_ignored (octave_event *e) const
+octave_link::event_reject (octave_event *e) const
 { delete e; }
 
 void
 octave_link::request_working_directory_change (std::string directory)
 { post_event (new octave_change_directory_event (*this, directory)); }
 
 void
 octave_link::request_octave_exit ()
diff --git a/gui/src/octave-adapter/octave-link.h b/gui/src/octave-adapter/octave-link.h
--- a/gui/src/octave-adapter/octave-link.h
+++ b/gui/src/octave-adapter/octave-link.h
@@ -54,71 +54,65 @@
 #include "octave/utils.h"
 #include "octave/variables.h"
 
 // Standard includes
 #include <iostream>
 #include <string>
 #include <vector>
 #include <readline/readline.h>
+#include <queue>
 
 // Qt includes
 #include <QMutexLocker>
 #include <QMutex>
 #include <QFileInfo>
 #include <QList>
 #include <QString>
 #include <QStringList>
 #include <QVector>
 #include <QSemaphore>
-#include <QObject>
 #include <QStringListModel>
 #include <QTimer>
 #include <QQueue>
 
 #include "workspace-model.h"
 #include "octave-main-thread.h"
 #include "octave-event.h"
 #include "octave-event-observer.h"
+#include "octave-event-listener.h"
 #include "symbol-information.h"
 
 /**
   * \class OctaveLink
   * \brief Provides threadsafe access to octave.
   * \author Jacob Dawid
   * This class is a wrapper around octave and provides threadsafety by
   * buffering access operations to octave and executing them in the readline
-  * even hook, which lives in the octave thread.
+  * event hook, which lives in the octave thread.
   */
-class octave_link : public QObject, public octave_event_observer
+class octave_link : public octave_event_observer
 {
-  Q_OBJECT
 public:
   /** Provides a way to access the unique octave_link object. */
   static octave_link *
   instance () { return &_singleton; }
 
   /** Starts octave. */
   void launch_octave ();
 
-  /** Attempts to close octave. */
-  void terminate_octave ();
-
   /** Returns the current history model. */
   QStringListModel *get_history_model ();
 
   /** Returns the current workspace model. */
   workspace_model *get_workspace_model ();
 
   /** Triggers an update of the history model. */
   void trigger_update_history_model ();
 
-  /** Updates the current working directory. */
-  void update_current_working_directory ();
-
   /** Acquires the symbol information. You need to acquire that before
     * actually accessing it. Make sure that you release it properly in order
     * to avoid deadlocks. */
   void acquire_symbol_information ();
 
   /** Releases access to the symbol information. */
   void release_symbol_information ();
 
@@ -126,58 +120,54 @@ public:
   void build_symbol_information ();
 
   /** Provides acces to the current symbol information.
     * WARNING: Always acquire the symbol information before actually
     * using it and make sure you release it properly afterwards.
     */
   const QList <symbol_information>& get_symbol_information () const;
 
+  void register_event_listener (octave_event_listener *oel);
+
+  void generate_events ();
   void process_events ();
   void post_event (octave_event *e);
   void event_accepted (octave_event *e) const;
-  void event_ignored (octave_event *e) const;
-
+  void event_reject (octave_event *e) const;
 
   void request_working_directory_change (std::string directory);
   void request_octave_exit ();
 
-signals:
-  /** Emitted, whenever the working directory of octave changed. */
-  void working_directory_changed (QString directory);
-
 private:
   /** Singleton. */
   octave_link ();
   ~octave_link ();
 
+  octave_event_listener *_octave_event_listener;
+
   /** Stores the current history_model. */
   QStringListModel *_history_model;
 
   /** Stores the current workspace model. */
   workspace_model *_workspace_model;
 
   /** Thread running octave_main. */
   octave_main_thread *_octave_main_thread;
 
-  /** Timer for periodically updating the workspace model from the current
-    * symbol information. */
-  QTimer _update_workspace_model_timer;
-
   /** Semaphore to lock access to the symbol information. */
   QSemaphore *_symbol_information_semaphore;
 
   /** Semaphore to lock access to the event queue. */
   QSemaphore *_event_queue_semaphore;
 
   /** Buffer for queueing events until they will be processed. */
-  QQueue <octave_event *> _event_queue;
+  std::queue <octave_event *> _event_queue;
 
   /** Stores the current symbol information. */
   QList <symbol_information> _symbol_information;
 
   /** Stores the last known current working directory of octave. */
-  QString _current_working_directory;
+  std::string _last_working_directory;
 
   /** Unique instance. Singelton! */
   static octave_link _singleton;
 };
 #endif // OCTAVELINK_H
diff --git a/gui/src/octave-adapter/octave-main-thread.cc b/gui/src/octave-adapter/octave-main-thread.cc
--- a/gui/src/octave-adapter/octave-main-thread.cc
+++ b/gui/src/octave-adapter/octave-main-thread.cc
@@ -13,17 +13,17 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "octave-main-thread.h"
 #include "octave-link.h"
 
-octave_main_thread::octave_main_thread (QObject * parent):QThread (parent)
+octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
   setlocale(LC_ALL, "en_US.UTF-8");
   int argc = 1;
diff --git a/gui/src/octave-adapter/octave-main-thread.h b/gui/src/octave-adapter/octave-main-thread.h
--- a/gui/src/octave-adapter/octave-main-thread.h
+++ b/gui/src/octave-adapter/octave-main-thread.h
@@ -25,17 +25,17 @@
   * \brief This class represents a thread just running octave_main.
   * \author Jacob Dawid
   */
 class octave_main_thread : public QThread
 {
   Q_OBJECT
 public:
   /** Creates a new thread running octave_main. */
-  octave_main_thread (QObject * parent);
+  octave_main_thread ();
 
 signals:
   /** This signal will be emitted when the thread is about to actually run octave_main. */
   void ready();
 
 protected:
   /** Runs octave_main. */
   void run ();
diff --git a/gui/src/octave-qt-event-listener.cc b/gui/src/octave-qt-event-listener.cc
new file mode 100644
--- /dev/null
+++ b/gui/src/octave-qt-event-listener.cc
@@ -0,0 +1,27 @@
+/* OctaveGUI - A graphical user interface for Octave
+ * Copyright (C) 2012 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "octave-qt-event-listener.h"
+
+octave_qt_event_listener::octave_qt_event_listener (QObject *parent)
+  : QObject (parent), octave_event_listener ()
+{
+}
+
+void
+octave_qt_event_listener::current_directory_has_changed (std::string directory)
+{ emit current_directory_changed (QString::fromStdString (directory)); }
diff --git a/gui/src/octave-qt-event-listener.h b/gui/src/octave-qt-event-listener.h
new file mode 100644
--- /dev/null
+++ b/gui/src/octave-qt-event-listener.h
@@ -0,0 +1,38 @@
+/* OctaveGUI - A graphical user interface for Octave
+ * Copyright (C) 2012 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef OCTAVEQTEVENTLISTENER_H
+#define OCTAVEQTEVENTLISTENER_H
+
+#include <QObject>
+#include <QString>
+#include "octave-event-listener.h"
+
+class octave_qt_event_listener
+    : public QObject, public octave_event_listener
+{
+    Q_OBJECT
+  public:
+    octave_qt_event_listener (QObject *parent = 0);
+
+    void current_directory_has_changed (std::string directory);
+
+  signals:
+    void current_directory_changed (QString directory);
+};
+
+#endif // OCTAVEQTEVENTLISTENER_H
diff --git a/gui/src/src.pro b/gui/src/src.pro
--- a/gui/src/src.pro
+++ b/gui/src/src.pro
@@ -83,17 +83,18 @@ SOURCES +=\
     workspace-view.cc \
     history-dockwidget.cc \
     files-dockwidget.cc \
     settings-dialog.cc \
     octave-gui.cc \
     resource-manager.cc \
     welcome-wizard.cc \
     workspace-model.cc \
-    terminal-dockwidget.cc
+    terminal-dockwidget.cc \
+    octave-qt-event-listener.cc
 
 HEADERS += \
     octave-adapter/octave-link.h \
     octave-adapter/octave-main-thread.h \
     octave-adapter/symbol-information.h \
     m-editor/lexer-octave-gui.h \
     m-editor/file-editor.h \
     m-editor/file-editor-interface.h \
@@ -103,13 +104,15 @@ HEADERS += \
     history-dockwidget.h \
     files-dockwidget.h \
     settings-dialog.h \
     resource-manager.h \
     welcome-wizard.h \
     workspace-model.h \
     terminal-dockwidget.h \
     octave-adapter/octave-event.h \
-    octave-adapter/octave-event-observer.h
+    octave-adapter/octave-event-observer.h \
+    octave-adapter/octave-event-listener.h \
+    octave-qt-event-listener.h
 
 FORMS += \
     settings-dialog.ui \
     welcome-wizard.ui
diff --git a/gui/src/workspace-model.cc b/gui/src/workspace-model.cc
--- a/gui/src/workspace-model.cc
+++ b/gui/src/workspace-model.cc
@@ -21,16 +21,21 @@
 #include "octave-link.h"
 
 workspace_model::workspace_model(QObject *parent)
   : QAbstractItemModel(parent)
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Type") << tr ("Value");
   _rootItem = new tree_item(rootData);
+
+  insert_top_level_item(0, new tree_item ("Local"));
+  insert_top_level_item(1, new tree_item ("Global"));
+  insert_top_level_item(2, new tree_item ("Persistent"));
+  insert_top_level_item(3, new tree_item ("Hidden"));
 }
 
 workspace_model::~workspace_model()
 {
   delete _rootItem;
 }
 
 QModelIndex
diff --git a/gui/src/workspace-model.h b/gui/src/workspace-model.h
--- a/gui/src/workspace-model.h
+++ b/gui/src/workspace-model.h
@@ -17,16 +17,17 @@
 
 #ifndef WORKSPACEMODEL_H
 #define WORKSPACEMODEL_H
 
 // Qt includes
 #include <QAbstractItemModel>
 #include <QVector>
 #include <QSemaphore>
+#include <QTimer>
 
 class tree_item
 {
 public:
   tree_item(const QList<QVariant> &data, tree_item *parent = 0) {
     _parent_item = parent;
     _item_data = data;
   }
@@ -125,13 +126,12 @@ public:
 
 public slots:
   void update_from_symbol_table ();
 
 signals:
   void expand_request();
 
 private:
-
   tree_item *_rootItem;
 };
 
 #endif // WORKSPACEMODEL_H
diff --git a/gui/src/workspace-view.cc b/gui/src/workspace-view.cc
--- a/gui/src/workspace-view.cc
+++ b/gui/src/workspace-view.cc
@@ -38,16 +38,24 @@ workspace_view::workspace_view (QWidget 
   layout->setMargin (2);
   widget ()->setLayout (layout);
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT(handle_visibility_changed (bool)));
 
   connect (octave_link::instance()->get_workspace_model(), SIGNAL(expand_request()),
            _workspace_tree_view, SLOT(expandAll()));
+
+  connect(&_update_workspace_model_timer, SIGNAL (timeout ()),
+    octave_link::instance()->get_workspace_model(),
+          SLOT (update_from_symbol_table ()));
+
+  _update_workspace_model_timer.setInterval (1000);
+  _update_workspace_model_timer.setSingleShot (false);
+  _update_workspace_model_timer.start ();
 }
 
 void
 workspace_view::handle_visibility_changed (bool visible)
 {
   if (visible)
   emit active_changed (true);
 }
diff --git a/gui/src/workspace-view.h b/gui/src/workspace-view.h
--- a/gui/src/workspace-view.h
+++ b/gui/src/workspace-view.h
@@ -36,11 +36,15 @@ signals:
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 private:
   QTreeView *_workspace_tree_view;
+
+  /** Timer for periodically updating the workspace model from the current
+    * symbol information. */
+  QTimer _update_workspace_model_timer;
 };
 
 #endif // WORKSPACEVIEW_H
