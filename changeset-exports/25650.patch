# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532107545 25200
#      Fri Jul 20 10:25:45 2018 -0700
# Node ID 336267b16a3d9a879a8644dbb61202bd6b5227b2
# Parent  85c3e315bd430f39a8a13950184f11874143048f
Improve fread speed by 2.5X when SKIP parameter used (bug #54100).

* oct-stream.cc (stream::read): Calculate eof_pos just once at beginning of
function rather than every time a block is skipped.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -6600,16 +6600,26 @@ namespace octave
     std::istream *isp = input_stream ();
 
     if (! isp)
       error ("fread: invalid input stream");
     else
       {
         std::istream& is = *isp;
 
+        // Initialize eof_pos variable just once per function call
+        off_t eof_pos = 0;
+        if (skip != 0 && is && ! is.eof ())
+          {
+            off_t orig_pos = tell ();
+            seek (0, SEEK_END);
+            eof_pos = tell ();
+            seek (orig_pos, SEEK_SET);
+          }
+
         std::list <void *> input_buf_list;
 
         while (is && ! is.eof ()
                && (read_to_eof || tmp_count < elts_to_read))
           {
             if (! read_to_eof)
               {
                 octave_idx_type remaining_elts = elts_to_read - tmp_count;
@@ -6629,29 +6639,19 @@ namespace octave
             octave_idx_type nel = gcount / input_elt_size;
 
             tmp_count += nel;
 
             input_buf_list.push_back (input_buf);
 
             if (is && skip != 0 && nel == block_size)
               {
-                // Seek to skip.
+                // Attempt to skip.
                 // If skip would move past EOF, position at EOF.
-
                 off_t orig_pos = tell ();
-
-                seek (0, SEEK_END);
-
-                off_t eof_pos = tell ();
-
-                // Is it possible for this to fail to return us to
-                // the original position?
-                seek (orig_pos, SEEK_SET);
-
                 off_t remaining = eof_pos - orig_pos;
 
                 if (remaining < skip)
                   seek (0, SEEK_END);
                 else
                   seek (skip, SEEK_CUR);
 
                 if (! is)
