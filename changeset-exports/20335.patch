# HG changeset patch
# User Rik <rik@octave.org>
# Date 1436738426 25200
#      Sun Jul 12 15:00:26 2015 -0700
# Node ID b439ccc9a162fc1fce85d820a7d818506cfc0569
# Parent  07dd8e602f4e72fd619bfd98e3777faa20979a86
doc: Improve building of images for the Manual.
Switch to using 'qt' as the default toolkit.
Stop producing onscreen flicker when building images.
Correctly build extended.pdf with new non-recursive build system.

* plot.txi: Change sample code for generation of image 15.7 to match the code
in plotimages.m

* geometryimages.m, sparseimages.m, interpimages.m, splineimages.m:
Call new function set_graphics_toolkit which makes sure there is at least
something available to do plotting with.  Change hide_output() function
to call figure() directly with "visible", "off" properties passed to it
so there is never a moment when the figure is visible (stops flicker).

* plotimages.m: Change directory to working directory where documentation files
are kept before executing print with "-pdflatexstandalone".  Call pdflatex
from within the working directory since that is what it expects.  Clean up
after pdflatex by deleting auxiliary files.  Capture status and output of
system command which invokes pdflatex so that it does not spew in to the
logs.  Change text() command to use '\displaystyle' which looks nicer.
Add set_graphics_toolkit function and modify hide_output function as above.

diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function geometryimages (d, nm, typ)
-  graphics_toolkit ("gnuplot");
+  set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
@@ -130,31 +130,40 @@ function sombreroimage (nm, typ, d_typ)
       title ("Sorry, graphics not available because Octave was\\ncompiled without the QHULL library.");
     unwind_protect_cleanup
       print (outfile, d_typ);
       hide_output ();
     end_unwind_protect
   endif
 endfunction
 
+## This function no longer sets the graphics toolkit; That is now done
+## automatically by C++ code which will ordinarily choose 'qt', but might
+## choose gnuplot on older systems.  Only a complete lack of plotting is a
+## problem.
+function set_graphics_toolkit ()
+  if (isempty (available_graphics_toolkits ()))
+    error ("no graphics toolkit available for plotting");
+  endif
+endfunction
+
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
-## can't pop output as it can the terminal type).
+## Use this function before plotting commands and after every call to print
+## since print() resets output to stdout (unfortunately, gnuplot can't pop
+## output as it can the terminal type).
 function hide_output ()
-  hf = figure (1);
-  set (hf, "visible", "off");
+  hf = figure (1, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt (d, nm)
   fid = fopen (fullfile (d, [nm ".txt"]), "wt");
   fputs (fid, "\n");
   fputs (fid, "+---------------------------------+\n");
   fputs (fid, "| Image unavailable in text mode. |\n");
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function interpimages (d, nm, typ)
-  graphics_toolkit ("gnuplot");
+  set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
@@ -73,31 +73,40 @@ function interpimages (d, nm, typ)
     ddyp = diff (diff (interp1 (t,y,ti,"pchip"))./dti)./dti;
     plot (ti(2:end-1),ddys,"r*", ti(2:end-1),ddyp,"g+");
     legend ("spline", "pchip");
     print (outfile, d_typ);
   endif
   hide_output ();
 endfunction
 
+## This function no longer sets the graphics toolkit; That is now done
+## automatically by C++ code which will ordinarily choose 'qt', but might
+## choose gnuplot on older systems.  Only a complete lack of plotting is a
+## problem.
+function set_graphics_toolkit ()
+  if (isempty (available_graphics_toolkits ()))
+    error ("no graphics toolkit available for plotting");
+  endif
+endfunction
+
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
-## can't pop output as it can the terminal type).
+## Use this function before plotting commands and after every call to print
+## since print() resets output to stdout (unfortunately, gnuplot can't pop
+## output as it can the terminal type).
 function hide_output ()
-  hf = figure (1);
-  set (hf, "visible", "off");
+  hf = figure (1, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt (d, nm)
   fid = fopen (fullfile (d, [nm ".txt"]), "wt");
   fputs (fid, "\n");
   fputs (fid, "+---------------------------------+\n");
   fputs (fid, "| Image unavailable in text mode. |\n");
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -955,17 +955,17 @@ A complete example showing the capabilit
 @example
 @group
 x = 0:0.01:3;
 hf = figure ();
 plot (x, erf (x));
 hold on;
 plot (x, x, "r");
 axis ([0, 3, 0, 1]);
-text (0.65, 0.6175, ['$\leftarrow x = @{2/\sqrt@{\pi@}' ...
+text (0.65, 0.6175, ['$\displaystyle\leftarrow x = @{2/\sqrt@{\pi@}' ...
         '@{\int_@{0@}^@{x@}@}e^@{-t^2@} dt@} = 0.6175$']);
 xlabel ("x");
 ylabel ("erf (x)");
 title ("erf (x) with text annotation");
 set (hf, "visible", "off");
 print (hf, "plot15_7.pdf", "-dpdflatexstandalone");
 set (hf, "visible", "on");
 system ("pdflatex plot15_7");
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -85,50 +85,49 @@ function plotimages (d, nm, typ)
     title ("plot3 display of 3-D helix");
     print (outfile, d_typ);
   elseif (strcmp (nm, "extended"))
     x = 0:0.01:3;
     plot (x, erf (x));
     hold on;
     plot (x, x, "r");
     axis ([0, 3, 0, 1]);
-    if (strcmp (typ, "pdf"))
-      text (0.65, 0.6175, ['$\leftarrow x = {2/\sqrt{\pi}' ...
-            '{\int_{0}^{x}}e^{-t^2} dt} = 0.6175$']);
-    else
-      text (0.65, 0.6175, ['\leftarrow x = {2/\surd\pi {\fontsize{16}' ...
-            '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175']);
-    endif
     xlabel ("x");
     ylabel ("erf (x)");
     title ("erf (x) with text annotation");
     if (strcmp (typ, "pdf"))
-      print (outfile, "-dpdflatexstandalone");
-      system (["pdflatex " nm]);
+      text (0.65, 0.6175, ['$\displaystyle\leftarrow x = {2/\sqrt{\pi}' ...
+            '{\int_{0}^{x}}e^{-t^2} dt} = 0.6175$']);
+      ## Be very careful about modifying this.  pdflatex expects to be in
+      ## the same directory as the file it is operating on.
+      cd (make_absolute_filename (d)); 
+      print ([nm ".pdf"], "-dpdflatexstandalone");
+      [status, output] = system (["pdflatex " nm]);
+      if (status)
+        error ("plotimages: Failed to run pdflatex on <extended.pdf>");
+      endif
       delete ([nm ".aux"], [nm "-inc.pdf"], [nm ".log"], [nm ".tex"]);
     else
+      text (0.65, 0.6175, ['\leftarrow x = {2/\surd\pi {\fontsize{16}' ...
+            '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175']);
       print (outfile, d_typ);
     endif
   else
     error ("unrecognized plot requested");
   endif
   hide_output ();
 endfunction
 
-## Choose a toolkit with a preference for OpenGL renderers
+## This function no longer sets the graphics toolkit; That is now done
+## automatically by C++ code which will ordinarily choose 'qt', but might
+## choose gnuplot on older systems.  Only a complete lack of plotting is a
+## problem.
 function set_graphics_toolkit ()
-  avl_tk = available_graphics_toolkits ();
-  if (any (strcmp ("qt", avl_tk)))
-    graphics_toolkit ("qt");
-  elseif (any (strcmp ("fltk", avl_tk)))
-    graphics_toolkit ("fltk");
-  elseif (any (strcmp ("gnuplot", avl_tk)))
-    graphics_toolkit ("gnuplot");
-  else
-    error ("no valid graphics toolkit found");
+  if (isempty (available_graphics_toolkits ()))
+    error ("no graphics toolkit available for plotting");
   endif
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function sparseimages (d, nm, typ)
-  graphics_toolkit ("gnuplot");
+  set_graphics_toolkit ();
   set_print_size ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
 
   if (__have_feature__ ("COLAMD")
       && __have_feature__ ("CHOLMOD")
       && __have_feature__ ("UMFPACK"))
@@ -275,25 +275,34 @@ function sombreroimage (d, nm, typ)
       title ("Sorry, graphics are unavailable because Octave was\ncompiled without a sparse matrix implementation.");
     unwind_protect_cleanup
       print (outfile, d_typ);
       hide_output ();
     end_unwind_protect
   endif
 endfunction
 
+## This function no longer sets the graphics toolkit; That is now done
+## automatically by C++ code which will ordinarily choose 'qt', but might
+## choose gnuplot on older systems.  Only a complete lack of plotting is a
+## problem.
+function set_graphics_toolkit ()
+  if (isempty (available_graphics_toolkits ()))
+    error ("no graphics toolkit available for plotting");
+  endif
+endfunction
+
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
-## can't pop output as it can the terminal type).
+## Use this function before plotting commands and after every call to print
+## since print() resets output to stdout (unfortunately, gnuplot can't pop
+## output as it can the terminal type).
 function hide_output ()
-  hf = figure (1);
-  set (hf, "visible", "off");
+  hf = figure (1, "visible", "off");
 endfunction
 
diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function splineimages (d, nm, typ)
-  graphics_toolkit ("gnuplot");
+  set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
@@ -154,31 +154,40 @@ function splineimages (d, nm, typ)
              "robust, beta = 0.75", "no robust fitting"});
     axis tight;
     ylim ([-2 2]);
     print (outfile, d_typ);
   endif
   hide_output ();
 endfunction
 
+## This function no longer sets the graphics toolkit; That is now done
+## automatically by C++ code which will ordinarily choose 'qt', but might
+## choose gnuplot on older systems.  Only a complete lack of plotting is a
+## problem.
+function set_graphics_toolkit ()
+  if (isempty (available_graphics_toolkits ()))
+    error ("no graphics toolkit available for plotting");
+  endif
+endfunction
+
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnpulot
-## can't pop output as it can the terminal type).
+## Use this function before plotting commands and after every call to print
+## since print() resets output to stdout (unfortunately, gnuplot can't pop
+## output as it can the terminal type).
 function hide_output ()
-  hf = figure (1);
-  set (hf, "visible", "off");
+  hf = figure (1, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt (d, nm)
   fid = fopen (fullfile (d, [nm ".txt"]), "wt");
   fputs (fid, "\n");
   fputs (fid, "+---------------------------------+\n");
   fputs (fid, "| Image unavailable in text mode. |\n");
