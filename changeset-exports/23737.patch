# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499358102 14400
#      Thu Jul 06 12:21:42 2017 -0400
# Node ID 7fb957d36357746634427ffea5f2f88a848ebd8a
# Parent  6798f5e5c58e29e701e13b81a4d74e0accf92959
refactor fprintf, printf, fputs, puts, fscanf, and scanf functions

* file-io.cc (printf_internal): New function.
(Ffprintf, Fprintf): Use it.
(puts_internal): New function.
(Ffputs, Fputs): Use it.
(scanf_internal): New function.
(Ffscanf, Fscanf): Use it.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -772,37 +772,20 @@ beginning of the file specified by file 
   if (args.length () != 1)
     print_usage ();
 
   octave::stream os = octave::stream_list::lookup (args(0), "ftell");
 
   return ovl (os.tell ());
 }
 
-DEFUN (fprintf, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {} fprintf (@var{fid}, @var{template}, @dots{})
-@deftypefnx {} {} fprintf (@var{template}, @dots{})
-@deftypefnx {} {@var{numbytes} =} fprintf (@dots{})
-This function is equivalent to @code{printf}, except that the output is
-written to the file descriptor @var{fid} instead of @code{stdout}.
-
-If @var{fid} is omitted, the output is written to @code{stdout} making the
-function exactly equivalent to @code{printf}.
-
-The optional output returns the number of bytes written to the file.
-
-Implementation Note: For compatibility with @sc{matlab}, escape sequences in
-the template string (e.g., @qcode{"@xbackslashchar{}n"} => newline) are
-expanded even when the template string is defined with single quotes.
-@seealso{fputs, fdisp, fwrite, fscanf, printf, sprintf, fopen}
-@end deftypefn */)
+static octave_value_list
+printf_internal (const std::string& who, const octave_value_list& args,
+                 int nargout)
 {
-  static std::string who = "fprintf";
-
   int nargin = args.length ();
 
   if (! (nargin > 1 || (nargin > 0 && args(0).is_string ())))
     print_usage ();
 
   int result;
 
   octave::stream os;
@@ -832,16 +815,40 @@ expanded even when the template string i
   result = os.printf (args(fmt_n), tmp_args, who);
 
   if (nargout > 0)
     return ovl (result);
   else
     return ovl ();
 }
 
+DEFUN (fprintf, args, nargout,
+       doc: /* -*- texinfo -*-
+@deftypefn  {} {} fprintf (@var{fid}, @var{template}, @dots{})
+@deftypefnx {} {} fprintf (@var{template}, @dots{})
+@deftypefnx {} {@var{numbytes} =} fprintf (@dots{})
+This function is equivalent to @code{printf}, except that the output is
+written to the file descriptor @var{fid} instead of @code{stdout}.
+
+If @var{fid} is omitted, the output is written to @code{stdout} making the
+function exactly equivalent to @code{printf}.
+
+The optional output returns the number of bytes written to the file.
+
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in
+the template string (e.g., @qcode{"@xbackslashchar{}n"} => newline) are
+expanded even when the template string is defined with single quotes.
+@seealso{fputs, fdisp, fwrite, fscanf, printf, sprintf, fopen}
+@end deftypefn */)
+{
+  static std::string who = "fprintf";
+
+  return printf_internal (who, args, nargout);
+}
+
 DEFUN (printf, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} printf (@var{template}, @dots{})
 Print optional arguments under the control of the template string
 @var{template} to the stream @code{stdout} and return the number of
 characters printed.
 @ifclear OCTAVE_MANUAL
 
@@ -852,42 +859,30 @@ complete description of the syntax of th
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in
 the template string (e.g., @qcode{"@xbackslashchar{}n"} => newline) are
 expanded even when the template string is defined with single quotes.
 @seealso{fprintf, sprintf, scanf}
 @end deftypefn */)
 {
   static std::string who = "printf";
 
-  int nargin = args.length ();
-
-  if (nargin == 0)
+  octave_value_list tmp_args = args;
+
+  return printf_internal (who, tmp_args.prepend (octave_value (1)), nargout);
+}
+
+static octave_value_list
+puts_internal (const std::string& who, const octave_value_list& args)
+{
+  if (args.length () != 2)
     print_usage ();
 
-  int result;
-
-  if (! args(0).is_string ())
-    error ("%s: format TEMPLATE must be a string", who.c_str ());
-
-  octave_value_list tmp_args;
-
-  if (nargin > 1)
-    {
-      tmp_args.resize (nargin-1, octave_value ());
-
-      for (int i = 1; i < nargin; i++)
-        tmp_args(i-1) = args(i);
-    }
-
-  result = stdout_stream.printf (args(0), tmp_args, who);
-
-  if (nargout > 0)
-    return ovl (result);
-  else
-    return ovl ();
+  octave::stream os = octave::stream_list::lookup (args(0), who);
+
+  return ovl (os.puts (args(1), who));
 }
 
 DEFUN (fputs, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} fputs (@var{fid}, @var{string})
 @deftypefnx {} {@var{status} =} fputs (@var{fid}, @var{string})
 Write the string @var{string} to the file with file descriptor @var{fid}.
 
@@ -896,22 +891,17 @@ The string is written to the file with n
 for the local machine.
 
 Return a non-negative number on success or EOF on error.
 @seealso{fdisp, fprintf, fwrite, fopen}
 @end deftypefn */)
 {
   static std::string who = "fputs";
 
-  if (args.length () != 2)
-    print_usage ();
-
-  octave::stream os = octave::stream_list::lookup (args(0), who);
-
-  return ovl (os.puts (args(1), who));
+  return puts_internal (who, args);
 }
 
 DEFUN (puts, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} puts (@var{string})
 @deftypefnx {} {@var{status} =} puts (@var{string})
 Write a string to the standard output with no formatting.
 
@@ -919,20 +909,19 @@ The string is written verbatim to the st
 automatically append a newline character appropriate for the local machine.
 
 Return a non-negative number on success and EOF on error.
 @seealso{fputs, disp}
 @end deftypefn */)
 {
   static std::string who = "puts";
 
-  if (args.length () != 1)
-    print_usage ();
-
-  return ovl (stdout_stream.puts (args(0), who));
+  octave_value_list tmp_args = args;
+
+  return puts_internal (who, tmp_args.prepend (octave_value (1)));
 }
 
 DEFUN (sprintf, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} sprintf (@var{template}, @dots{})
 This is like @code{printf}, except that the output is returned as a
 string.
 
@@ -988,16 +977,52 @@ expanded even when the template string i
   char type = (fmt_arg.is_sq_string () ? '\'' : '"');
 
   retval(0) = (result.empty () ? octave_value (charMatrix (1, 0), type)
                                : octave_value (result, type));
 
   return retval;
 }
 
+static octave_value_list
+scanf_internal (const std::string& who, const octave_value_list& args)
+{
+  int nargin = args.length ();
+
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+
+  octave_value_list retval;
+
+  octave::stream os = octave::stream_list::lookup (args(0), who);
+
+  if (! args(1).is_string ())
+    error ("%s: format TEMPLATE must be a string", who.c_str ());
+
+  if (nargin == 3 && args(2).is_string ())
+    {
+      retval = ovl (os.oscanf (args(1), who));
+    }
+  else
+    {
+      octave_idx_type count = 0;
+
+      Array<double> size
+        = (nargin == 3
+           ? args(2).vector_value ()
+           : Array<double> (dim_vector (1, 1), lo_ieee_inf_value ()));
+
+      octave_value tmp = os.scanf (args(1), size, count, who);
+
+      retval = ovl (tmp, count, os.error ());
+    }
+
+  return retval;
+}
+
 DEFUN (fscanf, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{val}, @var{count}, @var{errmsg}] =} fscanf (@var{fid}, @var{template}, @var{size})
 @deftypefnx {} {[@var{v1}, @var{v2}, @dots{}, @var{count}, @var{errmsg}] =} fscanf (@var{fid}, @var{template}, "C")
 In the first form, read from @var{fid} according to @var{template},
 returning the result in the matrix @var{val}.
 
 The optional argument @var{size} specifies the amount of data to read
@@ -1040,47 +1065,17 @@ conversions is returned in @var{count}
 See the Formatted Input section of the GNU Octave manual for a
 complete description of the syntax of the template string.
 @end ifclear
 @seealso{fgets, fgetl, fread, scanf, sscanf, fopen}
 @end deftypefn */)
 {
   static std::string who = "fscanf";
 
-  int nargin = args.length ();
-
-  if (nargin < 2 || nargin > 3)
-    print_usage ();
-
-  octave_value_list retval;
-
-  octave::stream os = octave::stream_list::lookup (args(0), who);
-
-  if (! args(1).is_string ())
-    error ("%s: format TEMPLATE must be a string", who.c_str ());
-
-  if (nargin == 3 && args(2).is_string ())
-    {
-      retval = ovl (os.oscanf (args(1), who));
-    }
-  else
-    {
-      octave_idx_type count = 0;
-
-      Array<double> size = (nargin == 3)
-        ? args(2).vector_value ()
-        : Array<double> (dim_vector (1, 1),
-                         lo_ieee_inf_value ());
-
-      octave_value tmp = os.scanf (args(1), size, count, who);
-
-      retval = ovl (tmp, count, os.error ());
-    }
-
-  return retval;
+  return scanf_internal (who, args);
 }
 
 static std::string
 get_scan_string_data (const octave_value& val, const std::string& who)
 {
   std::string retval;
 
   if (! val.is_string ())
@@ -1146,35 +1141,31 @@ character to be read is returned in @var
 
       retval = ovl (tmp, count, errmsg,
                     (os.eof () ? data.length () : os.tell ()) + 1);
     }
 
   return retval;
 }
 
-DEFUN (scanf, args, nargout,
+DEFUN (scanf, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{val}, @var{count}, @var{errmsg}] =} scanf (@var{template}, @var{size})
 @deftypefnx {} {[@var{v1}, @var{v2}, @dots{}, @var{count}, @var{errmsg}]] =} scanf (@var{template}, "C")
 This is equivalent to calling @code{fscanf} with @var{fid} = @code{stdin}.
 
 It is currently not useful to call @code{scanf} in interactive programs.
 @seealso{fscanf, sscanf, printf}
 @end deftypefn */)
 {
-  int nargin = args.length ();
-
-  octave_value_list tmp_args (nargin+1, octave_value ());
-
-  tmp_args (0) = 0.0;
-  for (int i = 0; i < nargin; i++)
-    tmp_args(i+1) = args(i);
-
-  return Ffscanf (tmp_args, nargout);
+  static std::string who = "scanf";
+
+  octave_value_list tmp_args = args;
+
+  return scanf_internal (who, tmp_args.prepend (octave_value (0)));
 }
 
 static octave_value_list
 textscan_internal (const std::string& who, const octave_value_list& args)
 {
   if (args.length () < 1)
     print_usage (who);
 
