# HG changeset patch
# User Maor Shutman <maorus12@gmail.com>
# Date 1525450726 -10800
#      Fri May 04 19:18:46 2018 +0300
# Node ID d4211810202adc7deccf5d2305d382791c27da97
# Parent  0a78614a24846a3b14a2d98fee9c8ae24df18334
qp and sqp: Non-fixed tolerance for qp (bug #53506).

* __qp__.cc (F__qp__): Add the tolerance as an input parameter.

* qp.m: Add tolerance "TolFun" to the options struct.

* sqp.m: The qp subproblem now accepts the tolerance passed to sqp as a
parameter.

diff --git a/libinterp/corefcn/__qp__.cc b/libinterp/corefcn/__qp__.cc
--- a/libinterp/corefcn/__qp__.cc
+++ b/libinterp/corefcn/__qp__.cc
@@ -84,25 +84,23 @@ null (const Matrix& A, octave_idx_type& 
 
   return retval;
 }
 
 static int
 qp (const Matrix& H, const ColumnVector& q,
     const Matrix& Aeq, const ColumnVector& beq,
     const Matrix& Ain, const ColumnVector& bin,
-    int maxit,
+    int maxit, double rtol,
     ColumnVector& x, ColumnVector& lambda, int& iter)
 {
   int info = 0;
 
   iter = 0;
 
-  double rtol = sqrt (std::numeric_limits<double>::epsilon ());
-
   // Problem dimension.
   octave_idx_type n = x.numel ();
 
   // Dimension of constraints.
   octave_idx_type n_eq = beq.numel ();
   octave_idx_type n_in = bin.numel ();
 
   // Filling the current active set.
@@ -488,37 +486,38 @@ qp (const Matrix& H, const ColumnVector&
 }
 
 DEFUN (__qp__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{x}, @var{lambda}, @var{info}, @var{iter}] =} __qp__ (@var{x0}, @var{H}, @var{q}, @var{Aeq}, @var{beq}, @var{Ain}, @var{bin}, @var{maxit})
 Undocumented internal function.
 @end deftypefn */)
 {
-  if (args.length () != 8)
+  if (args.length () != 9)
     print_usage ();
 
   const ColumnVector x0  (args(0).vector_value ());
   const Matrix H         (args(1).matrix_value ());
   const ColumnVector q   (args(2).vector_value ());
   const Matrix Aeq       (args(3).matrix_value ());
   const ColumnVector beq (args(4).vector_value ());
   const Matrix Ain       (args(5).matrix_value ());
   const ColumnVector bin (args(6).vector_value ());
   const int maxit        (args(7).int_value ());
-
+  const double rtol      (args(8).double_value());
+    
   int iter = 0;
 
   // Copy the initial guess into the working variable
   ColumnVector x = x0;
 
   // Reordering the Lagrange multipliers
   ColumnVector lambda;
 
-  int info = qp (H, q, Aeq, beq, Ain, bin, maxit, x, lambda, iter);
+  int info = qp (H, q, Aeq, beq, Ain, bin, maxit, rtol, x, lambda, iter);
 
   return ovl (x, lambda, info, iter);
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -164,16 +164,17 @@ function [x, obj, INFO, lambda] = qp (x0
     A_ub = varargin{8};
   else
     A_lb = [];
     A_in = [];
     A_ub = [];
   endif
 
   maxit = optimget (options, "MaxIter", 200);
+  tol = optimget (options, "TolX", sqrt (eps));
 
   ## Validate the quadratic penalty.
   if (! issquare (H))
     error ("qp: quadratic penalty matrix must be square");
   elseif (! ishermitian (H))
     ## warning ("qp: quadratic penalty matrix not hermitian");
     H = (H + H')/2;
   endif
@@ -238,17 +239,17 @@ function [x, obj, INFO, lambda] = qp (x0
         error ("qp: upper bound UB has incorrect length");
       elseif (isempty (lb))
         Ain = [Ain; -eye(n)];
         bin = [bin; -ub];
       endif
     endif
 
     if (! isempty (lb) && ! isempty (ub))
-      rtol = sqrt (eps);
+      rtol = tol;
       for i = 1:n
         if (abs (lb (i) - ub(i)) < rtol*(1 + max (abs (lb(i) + ub(i)))))
           ## These are actually an equality constraint
           tmprow = zeros (1,n);
           tmprow(i) = 1;
           A = [A;tmprow];
           b = [b; 0.5*(lb(i) + ub(i))];
           n_eq += 1;
@@ -286,17 +287,17 @@ function [x, obj, INFO, lambda] = qp (x0
           error ("qp: inequality constraint matrix and upper bound vector are inconsistent, %i != %i", dimA_in, numel (A_ub));
         elseif (isempty (A_lb))
           Ain = [Ain; -A_in];
           bin = [bin; -A_ub];
         endif
       endif
 
       if (! isempty (A_lb) && ! isempty (A_ub))
-        rtol = sqrt (eps);
+        rtol = tol;
         for i = 1:dimA_in
           if (abs (A_lb(i) - A_ub(i))
               < rtol*(1 + max (abs (A_lb(i) + A_ub(i)))))
             ## These are actually an equality constraint
             tmprow = A_in(i,:);
             A = [A;tmprow];
             b = [b; 0.5*(A_lb(i) + A_ub(i))];
             n_eq += 1;
@@ -326,17 +327,17 @@ function [x, obj, INFO, lambda] = qp (x0
 
   n_in = numel (bin);
 
   ## Check if the initial guess is feasible.
   if (isa (x0, "single") || isa (H, "single") || isa (q, "single")
       || isa (A, "single") || isa (b, "single"))
     rtol = sqrt (eps ("single"));
   else
-    rtol = sqrt (eps);
+    rtol = tol;
   endif
 
   eq_infeasible = (n_eq > 0 && norm (A*x0-b) > rtol*(1+abs (b)));
   in_infeasible = (n_in > 0 && any (Ain*x0-bin < -rtol*(1+abs (bin))));
 
   info = 0;
   if (eq_infeasible || in_infeasible)
     ## The initial guess is not feasible.
@@ -402,20 +403,20 @@ function [x, obj, INFO, lambda] = qp (x0
         ## xbar is feasible.  We use it a starting point.
         x0 = xbar;
       endif
     else
       ## xbar is feasible.  We use it a starting point.
       x0 = xbar;
     endif
   endif
-
+  
   if (info == 0)
     ## The initial (or computed) guess is feasible.  Call the solver.
-    [x, lambda, info, iter] = __qp__ (x0, H, q, A, b, Ain, bin, maxit);
+    [x, lambda, info, iter] = __qp__ (x0, H, q, A, b, Ain, bin, maxit, rtol);
   else
     iter = 0;
     x = x0;
     lambda = [];
   endif
   if (isargout (2))
     obj = 0.5 * x' * H * x + q' * x;
   endif
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -412,17 +412,17 @@ function [x, obj, info, iter, nf, lambda
     endif
 
     ## Compute search direction p by solving QP.
     g = -ce;
     d = -ci;
 
     old_lambda = lambda;
     [p, obj_qp, INFO, lambda] = qp (x, B, c, F, g, [], [], d, C,
-                                    Inf (size (d)));
+                                    Inf (size (d)), struct ("TolX", tol));
 
     info = INFO.info;
 
     ## FIXME: check QP solution and attempt to recover if it has failed.
     ##        For now, just warn about possible problems.
 
     id = "Octave:SQP-QP-subproblem";
     switch (info)
