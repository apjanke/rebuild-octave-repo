# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1283854981 -7200
#      Tue Sep 07 12:23:01 2010 +0200
# Node ID 1094868ca10d66b226e9efa22ea1d97567f114ac
# Parent  aa40bdbfa478b22133c4495ad26075492691ef14
fix bugs in inner convolution

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* blas-xtra/cconv2.f, blas-xtra/csconv2.f, blas-xtra/dconv2.f,
+	blas-xtra/sconv2.f, blas-xtra/zconv2.f, blas-xtra/zdconv2.f:
+	Fix inner convolution formula.
+
 2010-07-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lapack-xtra/zrsf2csf.f, lapack-xtra/crsf2csf.f: New sources.
 	* lapack-xtra/module.mk: Add them.
 
 2010-05-04  John W. Eaton  <jwe@octave.org>
 
 	* villad/dfopr.f, villad/dif.f, villad/intrp.f, villad/jcobi.f,
diff --git a/libcruft/blas-xtra/cconv2.f b/libcruft/blas-xtra/cconv2.f
--- a/libcruft/blas-xtra/cconv2.f
+++ b/libcruft/blas-xtra/cconv2.f
@@ -47,17 +47,17 @@ c
       end do
       end subroutine
 
       subroutine cconv2i(ma,na,a,mb,nb,b,c)
 c purpose:      a 2-dimensional inner additive convolution.
 c               equivalent to the following:
 c                 for i = 1:ma-mb+1
 c                   for j = 1:na-nb+1
-c                     c(i,j) = sum (sum (a(i:i+mb-1,j:j+nb-1) .* b))
+c                     c(i,j) = sum (sum (a(i+mb-1:-1:i,j+nb-1:-1:j) .* b))
 c                   endfor
 c                 endfor
 c arguments:
 c ma,na (in)    dimensions of a
 c a (in)        1st matrix
 c mb,nb (in)    dimensions of b
 c b (in)        2nd matrix
 c c (inout)     accumulator matrix, size (ma+mb-1, na+nb-1)
@@ -65,13 +65,13 @@ c
       integer ma,na,mb,nb
       complex a(ma,na),b(mb,nb)
       complex c(ma-mb+1,na-nb+1)
       integer i,j,k
       external caxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
-            call caxpy(ma-mb+1,b(i,j),a(i,k+j-1),1,c(1,k),1)
+            call caxpy(ma-mb+1,b(i,j),a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
diff --git a/libcruft/blas-xtra/csconv2.f b/libcruft/blas-xtra/csconv2.f
--- a/libcruft/blas-xtra/csconv2.f
+++ b/libcruft/blas-xtra/csconv2.f
@@ -71,13 +71,13 @@ c
       complex c(ma-mb+1,na-nb+1)
       complex btmp
       integer i,j,k
       external caxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
             btmp = b(i,j)
-            call caxpy(ma-mb+1,btmp,a(i,k+j-1),1,c(1,k),1)
+            call caxpy(ma-mb+1,btmp,a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
diff --git a/libcruft/blas-xtra/dconv2.f b/libcruft/blas-xtra/dconv2.f
--- a/libcruft/blas-xtra/dconv2.f
+++ b/libcruft/blas-xtra/dconv2.f
@@ -47,17 +47,17 @@ c
       end do
       end subroutine
 
       subroutine dconv2i(ma,na,a,mb,nb,b,c)
 c purpose:      a 2-dimensional inner additive convolution.
 c               equivalent to the following:
 c                 for i = 1:ma-mb+1
 c                   for j = 1:na-nb+1
-c                     c(i,j) = sum (sum (a(i:i+mb-1,j:j+nb-1) .* b))
+c                     c(i,j) = sum (sum (a(i+mb-1:-1:i,j+nb-1:-1:j) .* b))
 c                   endfor
 c                 endfor
 c arguments:
 c ma,na (in)    dimensions of a
 c a (in)        1st matrix
 c mb,nb (in)    dimensions of b
 c b (in)        2nd matrix
 c c (inout)     accumulator matrix, size (ma+mb-1, na+nb-1)
@@ -65,13 +65,13 @@ c
       integer ma,na,mb,nb
       double precision a(ma,na),b(mb,nb)
       double precision c(ma-mb+1,na-nb+1)
       integer i,j,k
       external daxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
-            call daxpy(ma-mb+1,b(i,j),a(i,k+j-1),1,c(1,k),1)
+            call daxpy(ma-mb+1,b(i,j),a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
diff --git a/libcruft/blas-xtra/sconv2.f b/libcruft/blas-xtra/sconv2.f
--- a/libcruft/blas-xtra/sconv2.f
+++ b/libcruft/blas-xtra/sconv2.f
@@ -47,17 +47,17 @@ c
       end do
       end subroutine
 
       subroutine sconv2i(ma,na,a,mb,nb,b,c)
 c purpose:      a 2-dimensional inner additive convolution.
 c               equivalent to the following:
 c                 for i = 1:ma-mb+1
 c                   for j = 1:na-nb+1
-c                     c(i,j) = sum (sum (a(i:i+mb-1,j:j+nb-1) .* b))
+c                     c(i,j) = sum (sum (a(i+mb-1:-1:i,j+nb-1:-1:j) .* b))
 c                   endfor
 c                 endfor
 c arguments:
 c ma,na (in)    dimensions of a
 c a (in)        1st matrix
 c mb,nb (in)    dimensions of b
 c b (in)        2nd matrix
 c c (inout)     accumulator matrix, size (ma+mb-1, na+nb-1)
@@ -65,13 +65,13 @@ c
       integer ma,na,mb,nb
       real a(ma,na),b(mb,nb)
       real c(ma-mb+1,na-nb+1)
       integer i,j,k
       external saxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
-            call saxpy(ma-mb+1,b(i,j),a(i,k+j-1),1,c(1,k),1)
+            call saxpy(ma-mb+1,b(i,j),a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
diff --git a/libcruft/blas-xtra/zconv2.f b/libcruft/blas-xtra/zconv2.f
--- a/libcruft/blas-xtra/zconv2.f
+++ b/libcruft/blas-xtra/zconv2.f
@@ -47,17 +47,17 @@ c
       end do
       end subroutine
 
       subroutine zconv2i(ma,na,a,mb,nb,b,c)
 c purpose:      a 2-dimensional inner additive convolution.
 c               equivalent to the following:
 c                 for i = 1:ma-mb+1
 c                   for j = 1:na-nb+1
-c                     c(i,j) = sum (sum (a(i:i+mb-1,j:j+nb-1) .* b))
+c                     c(i,j) = sum (sum (a(i+mb-1:-1:i,j+nb-1:-1:j) .* b))
 c                   endfor
 c                 endfor
 c arguments:
 c ma,na (in)    dimensions of a
 c a (in)        1st matrix
 c mb,nb (in)    dimensions of b
 c b (in)        2nd matrix
 c c (inout)     accumulator matrix, size (ma+mb-1, na+nb-1)
@@ -65,13 +65,13 @@ c
       integer ma,na,mb,nb
       double complex a(ma,na),b(mb,nb)
       double complex c(ma-mb+1,na-nb+1)
       integer i,j,k
       external zaxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
-            call zaxpy(ma-mb+1,b(i,j),a(i,k+j-1),1,c(1,k),1)
+            call zaxpy(ma-mb+1,b(i,j),a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
diff --git a/libcruft/blas-xtra/zdconv2.f b/libcruft/blas-xtra/zdconv2.f
--- a/libcruft/blas-xtra/zdconv2.f
+++ b/libcruft/blas-xtra/zdconv2.f
@@ -71,13 +71,13 @@ c
       double complex c(ma-mb+1,na-nb+1)
       double complex btmp
       integer i,j,k
       external zaxpy
       do k = 1,na-nb+1
         do j = 1,nb
           do i = 1,mb
             btmp = b(i,j)
-            call zaxpy(ma-mb+1,btmp,a(i,k+j-1),1,c(1,k),1)
+            call zaxpy(ma-mb+1,btmp,a(mb+1-i,k+j-1),1,c(1,k),1)
           end do
         end do
       end do
       end subroutine
