# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225393948 -3600
#      Thu Oct 30 20:12:28 2008 +0100
# Node ID ad5bb02d267aa32d5d762be488562503ba69dde5
# Parent  242756f065f08bc846ae1399b0163721c1acf76b
workaround missing std::abs(int64_t) in MSVC

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-30  Jaroslav Hajek <highegg@gmail.com>
+
+	* oct-inttypes.h (octave_int_abs): New function.
+	(octave_int_arith_base<T, true>::div): Use octave_int_abs instead of
+	std::abs.
+	* oct-inttypes.cc (octave_int_arith_base<int64_t, true>): Dtto.
+
 2008-10-28  Jaroslav Hajek <highegg@gmail.com>
 
 	* Array-C.cc Array-d.cc Array-f.cc Array-fC.cc Array-i.cc Array-s.cc:
 	Don't use semicolon after INSTANTIATE_ARRAY_ASSIGN.
 	* Array-util.h (zero_dims_inquire): New declarations.
 	(is_in, how_many_lgt, short_freeze): Remove declarations.
 	* Array-util.cc (zero_dims_inquire): New functions.
 	(is_in, how_many_lgt, short_freeze): Remove functions.
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -191,17 +191,17 @@ octave_int_arith_base<int64_t, true>::mu
   // The signed case is far worse. The problem is that
   // even if neither integer fits into signed 32-bit range, the result may
   // still be OK. Uh oh.
   
   // Essentially, what we do is compute sign, multiply absolute values
   // (as above) and impose the sign.
   // FIXME: Can we do something faster if we HAVE_FAST_INT_OPS?
 
-  uint64_t usx = std::abs (x), usy = std::abs (y);
+  uint64_t usx = octave_int_abs (x), usy = octave_int_abs (y);
   bool positive = (x < 0) == (y < 0);
 
   // Get upper words
   uint64_t ux = usx >> 32, uy = usy >> 32;
   uint64_t res;
   if (ux)
     {
       if (uy) 
@@ -449,17 +449,17 @@ INT_DOUBLE_BINOP_DECL (*, int64)
   else
     {
       bool sign;
       uint64_t my;
       int e;
       dblesplit (y, sign, my, e);
       uint32_t w[4];
       sign = (sign != (x.value () < 0));
-      umul128 (std::abs (x.value ()), my, w);
+      umul128 (octave_int_abs (x.value ()), my, w);
       octave_int64 res = octave_int64::zero;
       for (short i = 0; i < 4; i++)
         {
           res += octave_int64 (dbleget (sign, w[i], e));
           e += 32;
         }          
       return res;
     }
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -34,16 +34,22 @@ along with Octave; see the file COPYING.
 #include "oct-types.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
 inline long double xround (long double x) { return roundl (x); }
 #endif
 
+// FIXME: we define this by our own because some compilers, such as MSVC,
+// do not provide std::abs (int64_t) and std::abs (uint64_t). In the future,
+// it should go away in favor of std::abs.
+template <class T>
+inline T octave_int_abs (T x) { return x >= 0 ? x : -x; }
+
 // Query for an integer type of certain sizeof, and signedness.
 template<int qsize, bool qsigned>
 struct query_integer_type
 {
 public:
   static const bool registered = false;
   typedef void type; // Void shall result in a compile-time error if we 
                      // attempt to use it in computations.
@@ -689,25 +695,26 @@ public:
           if (y == -1 && x == octave_int_base<T>::min_val ())
             {
               octave_int_base<T>::ftrunc = true;
               z = octave_int_base<T>::max_val ();
             }
           else
             {
               z = x / y;
-              T w = -std::abs (x % y); // Can't overflow, but std::abs (x) can!
+              T w = -octave_int_abs (x % y); // Can't overflow, but std::abs (x) can!
               if (w <= y - w) 
                 z -= 1 - (signbit (x) << 1);
             }
         }
       else
         {
           z = x / y;
-          T w = std::abs (x % y); // Can't overflow, but std::abs (x) can!
+          // FIXME: this is a workaround due to MSVC's absence of std::abs (int64_t).
+          T w = octave_int_abs (x % y); // Can't overflow, but std::abs (x) can!
           if (w >= y - w) 
             z += 1 - (signbit (x) << 1);
         }
       return z;
     }
 
 };
 
