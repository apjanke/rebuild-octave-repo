# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273813181 -7200
#      Fri May 14 06:59:41 2010 +0200
# Node ID d022061c288d3804b8f1d94e7fa2c861fa988f52
# Parent  69a715c81eab5a1e36a68928f9a51eae971bef24
symbol_table minor improvements

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.cc (symtab::do_mark_global, symtab::do_mark_hidden): Force
+	non-existing symbol to be created.
+
 2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* xdiv.cc (solve_singularity_warning): Use ID for the warning.
 
 2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sqrtm.cc (sqrtm_utri_inplace): Use an ID for the
 	warning.
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2230,28 +2230,22 @@ private:
             if (pattern.match (sr.name ()))
               sr.clear ();
           }
       }
   }
 
   void do_mark_hidden (const std::string& name)
   {
-    table_iterator p = table.find (name);
-
-    if (p != table.end ())
-      p->second.mark_hidden ();
+    do_insert (name).mark_hidden ();
   }
 
   void do_mark_global (const std::string& name)
   {
-    table_iterator p = table.find (name);
-
-    if (p != table.end ())
-      p->second.mark_global ();
+    do_insert (name).mark_global ();
   }
 
   std::list<symbol_record>
   do_all_variables (context_id context, bool defined_only) const
   {
     std::list<symbol_record> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
