# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1365798039 -7200
#      Fri Apr 12 22:20:39 2013 +0200
# Node ID 8a4960f2c7c328cebb35dd3a6048267453e9a428
# Parent  ff061068a66c24365c87f38db7a7eeb238ae0710
gui: allow running files from the file browser

* files-dock-widget.cc(constructor): connect run_file_signal
  (contextmenu_requested): add menu to run the selected file
  (contextmenu_run): new slot for running the selected file
  (run_file_signal): new signal
* files-dock-widget.h: new function contextmenu_run, new signal run_file_signal

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -155,16 +155,19 @@ files_dock_widget::files_dock_widget (QW
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
   connect (_current_directory->lineEdit(), SIGNAL (returnPressed ()),
             this, SLOT (accept_directory_line_edit ()));
 
   connect (_current_directory, SIGNAL (activated (const QString &)),
            this, SLOT (set_current_directory (const QString &)));
 
+  connect (this, SIGNAL (run_file_signal (const QString&)),
+           parent (), SLOT (handle_command_double_clicked (const QString&)));
+
   QCompleter *completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
   setFocusProxy (_current_directory);
   
   _sync_octave_dir = true;   // default, overwirtten with notice_settings ()
   _octave_dir = "";
 }
@@ -278,16 +281,17 @@ files_dock_widget::contextmenu_requested
   QModelIndex index = _file_tree_view->indexAt (mpos);
   //QAbstractItemModel *m = _file_tree_view->model ();
 
   if (index.isValid())
     { 
       QFileInfo info = _file_system_model->fileInfo(index);
 
       menu.addAction(tr("Open"), this, SLOT(contextmenu_open(bool)));
+      menu.addAction(QIcon(":/actions/icons/artsbuilderexecute.png"), tr("Run"), this, SLOT(contextmenu_run(bool)));
       menu.addAction(tr("Load Data"), this, SLOT(contextmenu_load(bool)));
       menu.addSeparator();
       menu.addAction(tr("Rename"), this, SLOT(contextmenu_rename(bool)));
       menu.addAction(tr("Delete"), this, SLOT(contextmenu_delete(bool)));
 
       if(info.isDir())
         {
           menu.addSeparator();
@@ -295,45 +299,68 @@ files_dock_widget::contextmenu_requested
           menu.addAction(tr("New Directory"), this, SLOT(contextmenu_newdir(bool)));
         }
 
       menu.exec(_file_tree_view->mapToGlobal(mpos));
 
     }
 }
 
-void 
+void
 files_dock_widget::contextmenu_open (bool)
 {
 
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
 
   for( QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
     {
       item_double_clicked(*it);
     }
 }
 
-void 
+void
 files_dock_widget::contextmenu_load (bool)
 {
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
 
   if (rows.size () > 0)
     {
       QModelIndex index = rows[0];
 
       QFileInfo info = _file_system_model->fileInfo(index);
 
       emit load_file_signal (info.fileName ());
     }
 }
 
+void
+files_dock_widget::contextmenu_run (bool)
+{
+  QItemSelectionModel *m = _file_tree_view->selectionModel ();
+  QModelIndexList rows = m->selectedRows ();
+
+  if (rows.size () > 0)
+    {
+      QModelIndex index = rows[0];
+
+      QFileInfo info = _file_system_model->fileInfo(index);
+
+      if (info.isFile() && info.suffix () == "m")
+        {
+          QString function_name = info.fileName ();
+          // We have to cut off the suffix, because octave appends it.
+          function_name.chop (info.suffix ().length () + 1);
+          emit run_file_signal (QString ("cd \'%1\'\n%2\n")
+                            .arg(info.absolutePath ()).arg (function_name));
+        }
+    }
+}
+
 void 
 files_dock_widget::contextmenu_rename (bool)
 {
   QItemSelectionModel *m = _file_tree_view->selectionModel ();
   QModelIndexList rows = m->selectedRows ();
   if(rows.size() > 0)
     {
       QModelIndex index = rows[0];
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -80,16 +80,17 @@ public slots:
   void notice_settings (const QSettings *settings);
 
 private slots:
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
 
   /* context menu actions */
   void contextmenu_open (bool);
+  void contextmenu_run (bool);
   void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
   void contextmenu_newfile (bool);
   void contextmenu_newdir (bool);
 
 signals:
 
@@ -97,16 +98,19 @@ signals:
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
   /** Emitted, whenever the user requested to load a file. */
   void load_file_signal (const QString& fileName);
 
+  /** Emitted, whenever the user requested to run a file. */
+  void run_file_signal (const QString& fileName);
+
 private:
 
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
 
   /** Variables for the actions **/
