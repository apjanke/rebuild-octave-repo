# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502230867 14400
#      Tue Aug 08 18:21:07 2017 -0400
# Node ID a52eb3f210af219375759bb345fc12bd2bac1432
# Parent  ff893e26aeeb8068a97acf4a11a174219370e80a
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -368,17 +368,17 @@ public:
 
   virtual bool isstruct (void) const { return false; }
 
   virtual bool isobject (void) const { return false; }
 
   virtual bool is_classdef_meta (void) const { return false; }
 
   virtual bool is_classdef_object (void) const { return false; }
-  
+
   virtual bool is_package (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
   virtual bool is_magic_colon (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1013,17 +1013,17 @@ class octave_classdef_meta : public octa
 public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
   ~octave_classdef_meta (void)
   { object.meta_release (); }
 
   bool is_classdef_meta (void) const { return true; }
-  
+
   bool is_package (void) const { return object.is_package(); }
 
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -586,17 +586,17 @@ public:
   bool is_map (void) const
   { return rep->isstruct (); }
 
   bool is_classdef_meta (void) const
   { return rep->is_classdef_meta (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
-  
+
   bool is_package (void) const
   { return rep->is_package (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
   OCTAVE_DEPRECATED (4.4, "use 'isobject' instead")
   bool is_object (void) const
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1336,18 +1336,18 @@ namespace octave
       base_expr_val = evaluate (expr);
 
     // If we are indexing an object or looking at something like
     //
     //   classname.static_function (args, ...);
     //
     // then we'll just build a complete index list for one big subsref call.
     // If the expression we are indexing is a classname then base_expr_val will
-    // be an octave_classdef_meta object. 
-    // If we have files in a +packagename folder, they will also be an 
+    // be an octave_classdef_meta object.
+    // If we have files in a +packagename folder, they will also be an
     // octave_classdef_meta object, but we don't want to index them.
 
     bool indexing_object = (   base_expr_val.isobject ()
                             || base_expr_val.isjava ()
                             || (base_expr_val.is_classdef_meta ()
                                 && ! base_expr_val.is_package ()));
 
     std::list<octave_value_list> idx;
diff --git a/scripts/plot/util/__opengl_info__.m b/scripts/plot/util/__opengl_info__.m
--- a/scripts/plot/util/__opengl_info__.m
+++ b/scripts/plot/util/__opengl_info__.m
@@ -83,17 +83,17 @@ function info = fig_gl_info (h)
     if (isempty (vend))
       return;
     endif
     info.vendor   = vend;
     info.version  = get (h, "__gl_version__");
     info.renderer = get (h, "__gl_renderer__");
     info.extensions = strsplit (strtrim (get (h, "__gl_extensions__")));
   endif
-  
+
 endfunction
 
 function [info, msg] = gl_info ()
 
   info = [];
   msg = "";
 
   ## If we have any open figures, take a look there for OpenGL info.
@@ -125,25 +125,25 @@ endfunction
 
 
 %!testif HAVE_OPENGL, HAVE_FLTK; have_window_system () && any (strcmp ("fltk", available_graphics_toolkits ()))
 %! old_toolkit = graphics_toolkit ();
 %! unwind_protect
 %!   graphics_toolkit ("fltk");
 %!   a = __opengl_info__ ();
 %! unwind_protect_cleanup
-%!   graphics_toolkit (old_toolkit); 
+%!   graphics_toolkit (old_toolkit);
 %! end_unwind_protect
 %! assert (! isempty (a));
 %! assert (isfield (a, "version"));
 
 %!testif HAVE_OPENGL, HAVE_QT; have_window_system () && any (strcmp ("qt", available_graphics_toolkits ()))
 %! old_toolkit = graphics_toolkit ();
 %! unwind_protect
 %!   graphics_toolkit ("qt");
 %!   a = __opengl_info__ ();
 %! unwind_protect_cleanup
-%!   graphics_toolkit (old_toolkit); 
+%!   graphics_toolkit (old_toolkit);
 %! end_unwind_protect
 %! assert (! isempty (a));
 %! assert (isfield (a, "version"));
 
 %!error __opengl_info ("foobar")
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -23,17 +23,17 @@
 ## Return the Toeplitz matrix constructed from the first column @var{c},
 ## and optionally the first row @var{r}.
 ##
 ## If the second argument is omitted, the first row is taken to be the
 ## same as the first column.  If the first element of @var{r} is not the same
 ## as the first element of @var{c}, the first element of @var{c} is used.
 ##
 ## A Toeplitz, or diagonal-constant, matrix has the same value along each
-## diagonal.  Although it need not be square, it often is.  An MxN Toeplitz 
+## diagonal.  Although it need not be square, it often is.  An MxN Toeplitz
 ## matrix has the form:
 ## @tex
 ## $$
 ## \left[\matrix{c_1    & r_2     & r_3      & \cdots & r_n\cr
 ##               c_2    & c_1     & r_2      & \cdots & r_{n-1}\cr
 ##               c_3    & c_2     & c_1      & \cdots & r_{n-2}\cr
 ##               \vdots & \vdots  & \vdots   & \ddots & \vdots\cr
 ##               c_m    & c_{m-1} & c_{m-2} & \ldots & c{m-n+1}}\right]
