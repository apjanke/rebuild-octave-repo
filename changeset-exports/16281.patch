# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363036236 14400
#      Mon Mar 11 17:10:36 2013 -0400
# Node ID 1bbc2fc552cfe1393b6178799c850389bdea5edb
# Parent  8c17cd3704770beda3ff003e2e9d631a1727fbb7
adjust line and column info when inserting new text in lexer input stream

* lex.ll: Adjust line and column position info when inserting text
that was not part of the original input stream.
(octave_lexer::text_yyinput, octave_lexer::xunput): Don't update line
and column info.
(<MATRIX>{NL}): Increment line number and reset column number.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -165,16 +165,18 @@ object) relevant global values before an
             = (COMPAT \
                ? curr_lexer->handle_unary_op (TOK) \
                : curr_lexer->handle_incompatible_unary_op (TOK)); \
  \
           if (tok < 0) \
             { \
               yyless (0); \
               curr_lexer->xunput (','); \
+              /* Adjust for comma that was not really in the input stream. */ \
+              curr_lexer->current_input_column--; \
             } \
           else \
             { \
               return tok; \
             } \
         } \
     } \
   while (0)
@@ -284,24 +286,31 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->lexer_debug ("<MATRIX_START>{S}*");
 
     curr_lexer->mark_previous_token_trailing_space ();
   }
 
 <MATRIX_START>{NL} {
     curr_lexer->lexer_debug ("<MATRIX_START>{NL}");
 
+    curr_lexer->input_line_number++;
+    curr_lexer->current_input_column = 1;
+
     if (curr_lexer->nesting_level.is_paren ())
       curr_lexer->gripe_matlab_incompatible ("bare newline inside parentheses");
     else
       {
         int tok = curr_lexer->previous_token_value ();
 
         if (! (tok == ';' || tok == '[' || tok == '{'))
-          curr_lexer->xunput (';');
+          {
+            curr_lexer->xunput (';');
+            // Adjust for semicolon that was not really in the input stream.
+            curr_lexer->current_input_column--;
+          }
       }
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is '=' or '=='.
 //
 // It would have been so much easier if the delimiters were simply
@@ -358,16 +367,18 @@ ANY_INCLUDING_NL (.|{NL})
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
+        // Adjust for comma that was not really in the input stream.
+        curr_lexer->current_input_column--;
       }
     else
       {
         curr_lexer->nesting_level.bracket ();
 
         curr_lexer->looking_at_object_index.push_front (false);
 
         curr_lexer->current_input_column += yyleng;
@@ -763,16 +774,18 @@ ANY_INCLUDING_NL (.|{NL})
                     curr_lexer->current_input_column++;
                     int retval = curr_lexer->handle_string ('\'');
                     return curr_lexer->count_token_internal (retval);
                   }
                 else
                   {
                     yyless (0);
                     curr_lexer->xunput (',');
+                    // Adjust for comma that was not really in the input stream.
+                    curr_lexer->current_input_column--;
                   }
               }
             else
               {
                 if (tok == '[' || tok == '{'
                     || curr_lexer->previous_token_is_binop ()
                     || curr_lexer->previous_token_is_keyword ())
                   {
@@ -829,16 +842,18 @@ ANY_INCLUDING_NL (.|{NL})
                     curr_lexer->current_input_column++;
                     int retval = curr_lexer->handle_string ('"');
                     return curr_lexer->count_token_internal (retval);
                   }
                 else
                   {
                     yyless (0);
                     curr_lexer->xunput (',');
+                    // Adjust for comma that was not really in the input stream.
+                    curr_lexer->current_input_column--;
                   }
               }
             else
               {
                 curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('"');
                 return curr_lexer->count_token_internal (retval);
               }
@@ -919,30 +934,34 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->lexer_debug ("++");
 
     int tok = curr_lexer->handle_incompatible_unary_op (PLUS_PLUS, false);
 
     if (tok < 0)
       {
         yyless (0);
         curr_lexer->xunput (',');
+        // Adjust for comma that was not really in the input stream.
+        curr_lexer->current_input_column--;
       }
     else
       return tok;
   }
 
 "--" {
     curr_lexer->lexer_debug ("--");
 
     int tok = curr_lexer->handle_incompatible_unary_op (MINUS_MINUS, false);
 
     if (tok < 0)
       {
         yyless (0);
         curr_lexer->xunput (',');
+        // Adjust for comma that was not really in the input stream.
+        curr_lexer->current_input_column--;
       }
     else
       return tok;
   }
 
 "(" {
     curr_lexer->lexer_debug ("(");
 
@@ -957,16 +976,18 @@ ANY_INCLUDING_NL (.|{NL})
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
+        // Adjust for comma that was not really in the input stream.
+        curr_lexer->current_input_column--;
       }
     else
       {
         // If we are looking for an object index, then push TRUE for
         // looking_at_object_index.  Otherwise, just push whatever state
         // is current (so that we can pop it off the stack when we find
         // the matching close paren).
 
@@ -1055,16 +1076,18 @@ ANY_INCLUDING_NL (.|{NL})
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
+        // Adjust for comma that was not really in the input stream.
+        curr_lexer->current_input_column--;
       }
     else
       {
         curr_lexer->nesting_level.brace ();
 
         curr_lexer->looking_at_object_index.push_front
           (curr_lexer->looking_for_object_index);
 
@@ -1754,37 +1777,31 @@ octave_lexer::text_yyinput (void)
 
       if (c != '\n')
         {
           xunput (c);
           c = '\n';
         }
     }
 
-  if (c == '\n')
-    input_line_number++;
-
   return c;
 }
 
 void
 octave_lexer::xunput (char c, char *buf)
 {
   if (c != EOF)
     {
       if (lexer_debug_flag)
         {
           std::cerr << "U: ";
           display_character (c);
           std::cerr << std::endl;
         }
 
-      if (c == '\n')
-        input_line_number--;
-
       yyunput (c, buf, scanner);
     }
 }
 
 void
 octave_lexer::xunput (char c)
 {
   char *yytxt = flex_yytext ();
@@ -2176,17 +2193,21 @@ octave_lexer::finish_comment (octave_com
 
   octave_comment_buffer::append (comment_text, typ);
 
   comment_text = "";
 
   at_beginning_of_statement = true;
 
   if (! looking_at_continuation)
-    xunput ('\n');
+    {
+      xunput ('\n');
+      // Adjust for newline that was not really in the input stream.
+      input_line_number--;
+    }
 }
 
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
