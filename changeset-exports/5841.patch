# HG changeset patch
# User jwe
# Date 1149541165 0
#      Mon Jun 05 20:59:25 2006 +0000
# Node ID fb4dea2184bfc1883c76eb20b9024b1c4e8a93a6
# Parent  257643fc806be0f83fdbe1b44375628b915e5347
[project @ 2006-06-05 20:59:25 by jwe]

diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -902,18 +902,16 @@ b = s
 @end example
 
 You can use an assignment anywhere an expression is called for.  For
 example, it is valid to write @code{x != (y = 1)} to set @code{y} to 1
 and then test whether @code{x} equals 1.  But this style tends to make
 programs hard to read.  Except in a one-shot program, you should rewrite
 it to get rid of such nesting of assignments.  This is never very hard.
 
-@DOCSTRING(print_rhs_assign_val)
-
 @cindex increment operator
 @cindex decrement operator
 @cindex operators, increment
 @cindex operators, decrement
 
 @node Increment Ops
 @section Increment Operators
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2006-06-05  John W. Eaton  <jwe@octave.org>
+
+	* pt-assign.cc (Vprint_rhs_assign_val): Delete variable.
+	(Fprint_rhs_assign_val): Delete function.
+	tree_simple_assignment::rvalue, tree_multi_assignment::rvalue):
+	No special case for Vprint_rhs_assign_val.
+
+2006-06-02  John W. Eaton  <jwe@octave.org>
+
+	* pt-arg-list.h (tree_argument_list::mark_as_simple_assign_lhs,
+	tree_argument_list::is_simple_assign_lhs): New functions.
+	(tree_argument_list::simple_assign_lhs): New data member.
+	* parse.y (assign_lhs): Classify LHS here.
+	(make_assign_op): Create simple or multi assign op based on
+	classification of LHS, not its length.
+
 2006-06-01  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (DLD_XSRC): Add __pchip_deriv__.cc to the list.
 
 2006-06-01  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/__pchip_deriv__.cc: New file.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -827,17 +827,20 @@ simple_expr	: colon_expr
 		| simple_expr EXPR_OR_OR simple_expr
 		  { $$ = make_boolean_op (EXPR_OR_OR, $1, $2, $3); }
 		;
 
 // Arrange for the lexer to return CLOSE_BRACE for `]' by looking ahead
 // one token for an assignment op.
 
 assign_lhs	: simple_expr
-		  { $$ = new tree_argument_list ($1); }
+		  {
+		    $$ = new tree_argument_list ($1);
+		    $$->mark_as_simple_assign_lhs ();
+		  }
 		| '[' arg_list CLOSE_BRACE
 		  {
 		    $$ = $2;
 		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
 		  }
 		;
 
 assign_expr	: assign_lhs '=' expression
@@ -2419,17 +2422,17 @@ make_assign_op (int op, tree_argument_li
     default:
       panic_impossible ();
       break;
     }
 
   int l = eq_tok->line ();
   int c = eq_tok->column ();
 
-  if (lhs->length () == 1)
+  if (lhs->is_simple_assign_lhs ())
     {
       tree_expression *tmp = lhs->remove_front ();
 
       retval = new tree_simple_assignment (tmp, rhs, false, l, c, t);
 
       delete lhs;
     }
   else
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -40,20 +40,21 @@ class tree_walker;
 class
 tree_argument_list : public octave_base_list<tree_expression *>
 {
 public:
 
   typedef tree_expression* element_type;
 
   tree_argument_list (void)
-    : list_includes_magic_end (false) { }
+    : list_includes_magic_end (false), simple_assign_lhs (false) { }
 
   tree_argument_list (tree_expression *t)
-    : list_includes_magic_end (false) { append (t); }
+    : list_includes_magic_end (false), simple_assign_lhs (false)
+  { append (t); }
 
   ~tree_argument_list (void);
 
   bool has_magic_end (void) const;
 
   tree_expression *remove_front (void)
     {
       iterator p = begin ();
@@ -61,28 +62,34 @@ public:
       erase (p);
       return retval;
     }
 
   void append (const element_type& s);
 
   int nargout_count (void) const;
 
+  void mark_as_simple_assign_lhs (void) { simple_assign_lhs = true; }
+
+  bool is_simple_assign_lhs (void) { return simple_assign_lhs; }
+
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   bool list_includes_magic_end;
 
+  bool simple_assign_lhs;
+
   // No copying!
 
   tree_argument_list (const tree_argument_list&);
 
   tree_argument_list& operator = (const tree_argument_list&);
 };
 
 #endif
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -36,20 +36,16 @@ 02110-1301, USA.
 #include "ov.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-assign.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
-// TRUE means print the right hand side of an assignment instead of
-// the left.
-static bool Vprint_rhs_assign_val = false;
-
 // Simple assignment expressions.
 
 tree_simple_assignment::~tree_simple_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
@@ -113,35 +109,29 @@ tree_simple_assignment::rvalue (void)
 		    {
 		      if (etype == octave_value::op_asn_eq)
 			retval = rhs_val;
 		      else
 			retval = ult.value ();
 
 		      if (print_result ())
 			{
-			  if (Vprint_rhs_assign_val)
-			    retval.print_with_name (octave_stdout,
-						    lhs->str_print_code ());
-			  else
-			    {
-			      // We clear any index here so that we can
-			      // get the new value of the referenced
-			      // object below, instead of the indexed
-			      // value (which should be the same as the
-			      // right hand side value).
+			  // We clear any index here so that we can
+			  // get the new value of the referenced
+			  // object below, instead of the indexed
+			  // value (which should be the same as the
+			  // right hand side value).
 
-			      ult.clear_index ();
+			  ult.clear_index ();
 
-			      octave_value lhs_val = ult.value ();
+			  octave_value lhs_val = ult.value ();
 
-			      if (! error_state)
-				lhs_val.print_with_name (octave_stdout,
-							 lhs->name ());
-			    }
+			  if (! error_state)
+			    lhs_val.print_with_name (octave_stdout,
+						     lhs->name ());
 			}
 		    }
 		  else
 		    eval_error ();
 		}
 	    }
 	}
       else
@@ -278,35 +268,28 @@ tree_multi_assignment::rvalue (int)
 
 		  if (error_state)
 		    {
 		      eval_error ();
 		      break;
 		    }
 		  else if (print_result ())
 		    {
-		      if (Vprint_rhs_assign_val)
-			retval(k).print_with_name
-			  (octave_stdout, lhs_elt->str_print_code ());
-		      else
-			{
-			  // We clear any index here so that we can
-			  // get the new value of the referenced
-			  // object below, instead of the indexed
-			  // value (which should be the same as the
-			  // right hand side value).
+		      // We clear any index here so that we can get
+		      // the new value of the referenced object below,
+		      // instead of the indexed value (which should be
+		      // the same as the right hand side value).
 
-			  ult.clear_index ();
+		      ult.clear_index ();
 
-			  octave_value lhs_val = ult.value ();
+		      octave_value lhs_val = ult.value ();
 
-			  if (! error_state)
-			    lhs_val.print_with_name (octave_stdout,
-						     lhs_elt->name ());
-			}
+		      if (! error_state)
+			lhs_val.print_with_name (octave_stdout,
+						 lhs_elt->name ());
 		    }
 		}
 	      else
 		eval_error ();
 
 	      if (error_state)
 		break;
 
@@ -338,26 +321,13 @@ tree_multi_assignment::oper (void) const
 }
 
 void
 tree_multi_assignment::accept (tree_walker& tw)
 {
   tw.visit_multi_assignment (*this);
 }
 
-DEFUN (print_rhs_assign_val, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {@var{val} =} print_rhs_assign_val ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} print_rhs_assign_val (@var{new_val})\n\
-Query or set the internal variable that controls whether Octave will\n\
-print the value of the right hand side of assignment expressions\n\
-instead of the value of the left hand side (after the assignment).\n\
-@end deftypefn")
-{
-  return SET_INTERNAL_VARIABLE (print_rhs_assign_val);
-}
-
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
