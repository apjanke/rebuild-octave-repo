# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238868018 -7200
#      Sat Apr 04 20:00:18 2009 +0200
# Node ID 961410931a4fdf2703347d600abc8930c45101c4
# Parent  4218f9515258c872031dea6aaf7a1103edb67d09
fix nested struct assignments

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-04-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.cc (octave_struct::subsasgn): Fix reference counting
+	optimization.
+
 2008-04-03  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/max.cc (MINMAX_SPARSE_BODY): Allow sparse boolean 
 	values.
 
 2009-04-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-str-mat.cc (default_numeric_conversion_function):
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -259,19 +259,16 @@ octave_struct::subsasgn (const std::stri
 			 const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
 
-  // This is handy for calling const methods of map.
-  const Octave_map& cmap = const_cast<const Octave_map &> (map);
-
   if (n > 1 && ! (type.length () == 2 && type[0] == '(' && type[1] == '.'))
     {
       switch (type[0])
 	{
 	case '(':
 	  {
 	    if (type.length () > 1 && type[1] == '.')
 	      {
@@ -289,26 +286,30 @@ octave_struct::subsasgn (const std::stri
                 // We handled two index elements, so subsasgn to
                 // needs to skip both of them.
 
                 next_idx.erase (next_idx.begin ());
                 next_idx.erase (next_idx.begin ());
 
                 std::string next_type = type.substr (2);
 
-                // cast map to const reference to avoid forced key insertion.
-                Cell tmpc = cmap.contents (key).index (idx.front (), true);
+                Cell tmpc (1, 1);
+                Octave_map::iterator pkey = map.seek (key);
+                if (pkey != map.end ())
+                  {
+                    pkey->second.make_unique ();
+                    tmpc = pkey->second.index (idx.front (), true);
+                  }
 
                 // FIXME: better code reuse? cf. octave_cell::subsasgn and the case below.
 		if (! error_state)
 		  {
                     if (tmpc.numel () == 1)
                       {
-                        octave_value tmp = tmpc(0);
-                        tmpc = Cell ();
+                        octave_value& tmp = tmpc(0);
 
                         if (! tmp.is_defined () || tmp.is_zero_by_zero ())
                           {
                             tmp = octave_value::empty_conv (next_type, rhs);
                             tmp.make_unique (); // probably a no-op.
                           }
                         else
                           // optimization: ignore the copy still stored inside our map.
@@ -336,25 +337,29 @@ octave_struct::subsasgn (const std::stri
 
             std::list<octave_value_list> next_idx (idx);
 
             next_idx.erase (next_idx.begin ());
 
             std::string next_type = type.substr (1);
 
             Cell tmpc (1, 1);
-            if (map.contains (key)) tmpc = cmap.contents (key);
+            Octave_map::iterator pkey = map.seek (key);
+            if (pkey != map.end ())
+              {
+                pkey->second.make_unique ();
+                tmpc = pkey->second;
+              }
 
             // FIXME: better code reuse?
             if (! error_state)
               {
                 if (tmpc.numel () == 1)
                   {
-                    octave_value tmp = tmpc(0);
-                    tmpc = Cell ();
+                    octave_value& tmp = tmpc(0);
 
                     if (! tmp.is_defined () || tmp.is_zero_by_zero ())
                       {
                         tmp = octave_value::empty_conv (next_type, rhs);
                         tmp.make_unique (); // probably a no-op.
                       }
                     else
                       // optimization: ignore the copy still stored inside our map.
@@ -417,16 +422,17 @@ octave_struct::subsasgn (const std::stri
                             count++;
                             retval = octave_value (this);
                           }
                         else
                           gripe_failed_assignment ();
                       }
                     else 
                       {
+                        const Octave_map& cmap = const_cast<const Octave_map &> (map);
                         // cast map to const reference to avoid forced key insertion.
                         if (idxf.all_scalars () 
                             || cmap.contents (key).index (idxf, true).numel () == 1)
                           {
                             map.assign (idxf, key, t_rhs.storable_value ());
                             if (! error_state)
                               {
                                 count++;
