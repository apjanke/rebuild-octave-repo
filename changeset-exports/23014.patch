# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483812890 18000
#      Sat Jan 07 13:14:50 2017 -0500
# Node ID 7a9313d27ceadcd4996c99ad92e7084d2c4574a8
# Parent  5dca1727ce94e11602eb8d58e81a0d60c215a9bf
define macros for size of idx_type and f77_int_type

* configure.ac (OCTAVE_SIZEOF_F77_INT_TYPE, OCTAVE_SIZEOF_IDX_TYPE):
New macros.
* mk-octave-config-h.sh: Copy them to octave-config.h.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -180,16 +180,18 @@ echo ""
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_64.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_ATOMIC_REFCOUNT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_OPENMP.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_FAST_INT_OPS.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES.*$\)/#  \1/p' $config_h_file
+$SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_F77_INT_TYPE.*$\)/#  \1/p' $config_h_file
+$SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_IDX_TYPE.*$\)/#  \1/p' $config_h_file
 
 echo ""
 
 $SED -n 's/#\(\(undef\|define\) gid_t.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) uid_t.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) nlink_t.*$\)/#  \1/p' $config_h_file
 
 if grep "#undef HAVE_DEV_T" $config_h_file > /dev/null; then
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -359,20 +359,26 @@ if test $ENABLE_64 = yes; then
     ENABLE_64=no
   fi
 else
   OCTAVE_IDX_TYPE=int32_t
 fi
 
 AC_SUBST(ENABLE_64)
 if test $ENABLE_64 = yes; then
+  octave_sizeof_octave_idx_type=8
   AC_DEFINE(OCTAVE_ENABLE_64, 1,
     [Define to 1 to use 64-bit integers for array dimensions and indexing.])
+else
+  octave_sizeof_octave_idx_type=4
 fi
 
+AC_DEFINE_UNQUOTED(OCTAVE_SIZEOF_IDX_TYPE, [$octave_sizeof_octave_idx_type],
+  [Define to the size of the octave_idx_type (8 or 4).])
+
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
 ### GNU libc, just disable them for all platforms.
 
@@ -1084,16 +1090,19 @@ case $octave_cv_sizeof_fortran_integer i
   ;;
   4)
     OCTAVE_F77_INT_TYPE=int32_t
   ;;
 esac
 AC_SUBST(OCTAVE_F77_INT_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_F77_INT_TYPE, [$OCTAVE_F77_INT_TYPE],
   [Define to the type of octave_f77_int_type (64 or 32 bit signed integer).])
+AC_DEFINE_UNQUOTED(OCTAVE_SIZEOF_F77_INT_TYPE,
+  [$octave_cv_sizeof_fortran_integer],
+  [Define to the size of the octave_f77_int_type (8 or 4).])
 
 OCTAVE_F77_FLAG([-ffloat-store], [
   AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
   F77_FLOAT_STORE_FLAG=-ffloat-store
   AC_SUBST(F77_FLOAT_STORE_FLAG)
 ])
 
 ## Dynamic linking is now enabled only if we are building shared
