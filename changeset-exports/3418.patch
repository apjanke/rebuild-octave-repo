# HG changeset patch
# User jwe
# Date 947646472 0
#      Wed Jan 12 03:07:52 2000 +0000
# Node ID ca92c9d3f8826c0a7d6f3892a5c323200f5c9e42
# Parent  cb56e4bd79ca0717e0112bdebae755beba4d0411
[project @ 2000-01-12 03:07:47 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2000-01-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* linear-algebra/cross.m: Only return a row vector if both args
+	are row vectors.
+	* polynomial/polyfit.m: Likewise.
+
+	* signal/autocov.m: Don't reset prefer_column_vectors.
+
+	* statistics/distributions/discrete_rnd.m:
+	Always generate a row vector.
+	* statistics/distributions/hypergeometric_rnd.m: Likewise.
+
 2000-01-11  Ben Sapp <bsapp@nua.lampf.lanl.gov>
 
 	* strings/upper.m: Add missing `-*- texinfo -*-' tag to doc string.
 
 	* audio/setaudio.m: Texinfoize doc string.
 	* control/com2str.m: Likewise.
 	* control/controldemo.m: Likewise.
 	* control/DEMOcontrol.m: Likewise.
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -12,17 +12,20 @@
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cross (@var{x}, @var{y})
 ## Computes the vector cross product of the two 3-dimensional vectors
-## @var{x} and @var{y}.  For example,
+## @var{x} and @var{y}.
+##
+## A row vector is returned if @var{x} and @var{y} are both row vectors;
+## otherwise, a column vector is returned.
 ## 
 ## @example
 ## @group
 ## cross ([1,1,0], [0,1,1])
 ##      @result{} [ 1; -1; 1 ]
 ## @end group
 ## @end example
 ## @end deftypefn
@@ -39,18 +42,17 @@ function z = cross (x, y)
 
   if (length (x) == 3 && length (y) == 3)
 
     z = [x(2)*y(3) - x(3)*y(2); x(3)*y(1) - x(1)*y(3); x(1)*y(2) - x(2)*y(1)];
 
     x_nr = rows (x);
     y_nr = rows (y);
 
-    if ((x_nr == y_nr && x_nr == 1)
- 	|| (x_nr != y_nr && ! prefer_column_vectors))
+    if (x_nr == y_nr && x_nr == 1)
       z = z.';
     endif
 
   else
     error ("cross: both x and y must be 3-dimensional vectors");
   endif
 
 endfunction
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -27,16 +27,20 @@
 ## \sum_{i=1}^N (p(x_i) - y_i)^2
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## @code{sumsq (p(x(i)) - y(i))},
 ## @end ifinfo
 ##  to best fit the data in the least squares sense.
+##
+## The polynomial coefficients are returned in a row vector if @var{x}
+## and @var{y} are both row vectors; otherwise, they are returned in a
+## column vector.
 ## 
 ## If two output arguments are requested, the second contains the values of
 ## the polynomial for each value of @var{x}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
@@ -71,13 +75,13 @@ function [p, yf] = polyfit (x, y, n)
 
     if (y_is_row_vector)
       yf = yf.';
     endif
   endif
 
   p = flipud (p);
 
-  if (! prefer_column_vectors)
-    p = p.';
+  if (y_is_row_vector && rows (x) == 1)
+    p = p';
   endif
 
 endfunction
diff --git a/scripts/signal/autocov.m b/scripts/signal/autocov.m
--- a/scripts/signal/autocov.m
+++ b/scripts/signal/autocov.m
@@ -37,24 +37,13 @@ function retval = autocov (X, h)
   X = center (X);
   
   if (nargin == 1)
     h = n - 1;
   endif
   
   retval = zeros (h + 1, c);
   
-  unwind_protect
-
-    oldpcv = prefer_column_vectors;
-    prefer_column_vectors = "false";
-
-    for i = 0 : h
-      retval(i+1, :) = diag (X(i+1:n, :).' * conj (X(1:n-i, :))) / n;
-    endfor
-
-  unwind_protect_cleanup
-    
-    prefer_column_vectors = oldpcv;
-    
-  end_unwind_protect
+  for i = 0 : h
+    retval(i+1, :) = diag (X(i+1:n, :).' * conj (X(1:n-i, :))) / n;
+  endfor
   
 endfunction
diff --git a/scripts/statistics/distributions/discrete_rnd.m b/scripts/statistics/distributions/discrete_rnd.m
--- a/scripts/statistics/distributions/discrete_rnd.m
+++ b/scripts/statistics/distributions/discrete_rnd.m
@@ -11,45 +11,42 @@
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## usage:  discrete_rnd (N, V, P)
 ##
-## Generate a random sample of size N from the univariate distribution
-## which assumes the values in V with probabilities P.
+## Generate a row vector containing a random sample of size N from the
+## univariate distribution which assumes the values in V with
+## probabilities P.
 ##
 ## Currently, N must be a scalar.
 
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Random deviates from a discrete distribution
 
 function rnd = discrete_rnd (N, V, P)
   
   if (nargin != 3)
     usage ("discrete_rnd (N, V, P)");
   endif
 
-  if !is_scalar (N)
+  if (! is_scalar (N))
     error ("discrete_rnd:  N must be a scalar");
   endif
 
   if (! is_vector (V))
     error ("discrete_rnd:  V must be a vector");
   elseif (! is_vector (P) || (length (P) != length (V)))
     error ("discrete_rnd:  P must be a vector with length (V) elements");
   elseif (! (all (P >= 0) && any (P)))
     error ("discrete_rnd:  P must be a nonzero, nonnegative vector");
   endif
 
   u = rand (1, N);
   m = length (P);
   s = reshape (cumsum (P / sum (P)), m, 1);
 
   rnd = V (1 + sum ((s * ones (1, N)) <= ((ones (m, 1) * u))));
-
-  if (prefer_column_vectors)
-    rnd = rnd';
-  endif
   
 endfunction
diff --git a/scripts/statistics/distributions/hypergeometric_rnd.m b/scripts/statistics/distributions/hypergeometric_rnd.m
--- a/scripts/statistics/distributions/hypergeometric_rnd.m
+++ b/scripts/statistics/distributions/hypergeometric_rnd.m
@@ -9,32 +9,28 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## Generate a random sample of size N from the hypergeometric
-## distribution with parameters m, t, and n.
+## Generate a row vector containing a random sample of size N from the
+## hypergeometric distribution with parameters m, t, and n.
 ##
 ## The parameters m, t, and n must positive integers with m and n not
 ## greater than t.
 
 function rnd = hypergeometric_rnd (N, m, t, n)
 
   if (nargin != 4)
     usage ("hypergeometric_rnd (N, m, t, n)");
   endif
 
   if ((m < 0) | (t < 0) | (n <= 0) | (m != round (m)) | 
       (t != round (t)) | (n != round (n)) | (m > t) | (n > t))
-    if (prefer_column_vectors)
-      rnd = NaN * ones (N, 1)
-    else
-      rnd = NaN * ones (1, N)
-    endif
+    rnd = NaN * ones (1, N)
   else
     rnd = discrete_rnd (N, 0 : n, hypergeometric_pdf (0 : n, m, t, n));
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2000-01-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.cc (Vprefer_column_vectors): Now static.
+	* ov.h (octave_value (const ComplexRowVector&),
+	octave_value (const ComplexColumnVector&),
+	octave_value (const RowVector&), octave_value (const ColumnVector&)):
+	Delete second arg.  Change all callers.
+	* oct-obj.h (octave_value_list (const RowVector&),
+	octave_value_list (const ColumnVector&),
+	octave_value_list (const ComplexRowVector&),
+	octave_value_list (const ComplexColumnVector&)): Likewise.
+	* ov-cx-mat.h, ov-cx-mat.cc
+	(octave_complex_matrix (const ComplexRowVector&),
+	(octave_complex_matrix (const ComplexColumnVector&)):
+	Delete second arg, simply create object with orientation
+	corresponding to vector arg.  Move constructors to class decl.
+	* ov-re-mat.h, ov-re-mat.cc (octave_matrix (const RowVector&),
+	(octave_matrix (const ColumnVector&)):
+	Delete second arg, simply create object with orientation
+	corresponding to vector arg.  Move constructors to class decl.
+
 2000-01-07  Ben Sapp <bsapp@nua.lampf.lanl.gov>
 
 	* mappers.cc (Fconj, Ferf, Ferfc, Fgamma, Fimag, Flgamma, Flog10,
 	Freal, Fround): Add @seealso{...} to doc strings.
 
 2000-01-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (do_scanf): Do the right thing again for character
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -252,20 +252,19 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
   if (nargin < 3 || nargin > 4)
     {
       print_usage ("filter");
       return retval;
     }
 
   const char *errmsg = "filter: arguments must be vectors";
 
-  int x_is_vector = (args(2).rows () == 1 || args(2).columns () == 1);
+  bool x_is_row_vector = (args(2).rows () == 1);
 
-  int si_is_vector = (nargin == 4
-		      && (args(3).rows () == 1 || args(3).columns () == 1));
+  bool si_is_row_vector = (nargin == 4 && args(3).rows () == 1);
 
   if (args(0).is_complex_type ()
       || args(1).is_complex_type ()
       || args(2).is_complex_type ()
       || (nargin == 4 && args(3).is_complex_type ()))
     {
       ComplexColumnVector b = args(0).complex_vector_value ();
       ComplexColumnVector a = args(1).complex_vector_value ();
@@ -288,26 +287,26 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	    si = args(3).complex_vector_value ();
 
 	  if (! error_state)
 	    {
 	      ComplexColumnVector y (filter (b, a, x, si));
 
 	      if (nargout == 2)
 		{
-		  if (si_is_vector)
-		    retval (1) = octave_value (si, (args(3).columns () == 1));
+		  if (si_is_row_vector)
+		    retval(1) = si.transpose ();
 		  else
-		    retval (1) = si;
+		    retval(1) = si;
 		}
 
-	      if (x_is_vector)
-		retval (0) = octave_value (y, (args(2).columns () == 1));
+	      if (x_is_row_vector)
+		retval(0) = y.transpose ();
 	      else
-		retval (0) = y;
+		retval(0) = y;
 	    }
 	  else
 	    error (errmsg);
 	}
       else
 	error (errmsg);
     }
   else
@@ -333,26 +332,26 @@ H(z) = {\\displaystyle\\sum_{k=0}^M d_{k
 	    si = args(3).vector_value ();
 
 	  if (! error_state)
 	    {
 	      ColumnVector y (filter (b, a, x, si));
 
 	      if (nargout == 2)
 		{
-		  if (si_is_vector)
-		    retval (1) = octave_value (si, (args(3).columns () == 1));
+		  if (si_is_row_vector)
+		    retval(1) = si.transpose ();
 		  else
-		    retval (1) = si;
+		    retval(1) = si;
 		}
 
-	      if (x_is_vector)
-		retval (0) = octave_value (y, (args(2).columns () == 1));
+	      if (x_is_row_vector)
+		retval(0) = y.transpose ();
 	      else
-		retval (0) = y;
+		retval(0) = y;
 	    }
 	  else
 	    error (errmsg);
 	}
       else
 	error (errmsg);
     }
 
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -24,53 +24,59 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
+#define DO_FIND_OP(T) \
+  do \
+    { \
+      T tmp (count); \
+ \
+      for (int i = 0; i < count; i++) \
+	tmp (i) = nr * (j_idx (i) - 1.0) + i_idx (i); \
+ \
+      retval(0) = tmp; \
+    } \
+  while (0)
+
+
 static octave_value_list
 find_to_fortran_idx (const ColumnVector i_idx, const ColumnVector j_idx,
 		     const octave_value& val, int nr, int nargout)
 {
   octave_value_list retval;
 
   switch (nargout)
     {
     case 0:
     case 1:
       {
-	int count = i_idx.length ();
-	ColumnVector tmp (count);
-	for (int i = 0; i < count; i++)
-	  tmp (i) = nr * (j_idx (i) - 1.0) + i_idx (i);
-
 	// If the original argument was a row vector, force a row
 	// vector of indices to be returned.
 
-	retval(0) = octave_value (tmp, (nr != 1));
+	int count = i_idx.length ();
+
+	if (nr == 1)
+	  DO_FIND_OP(RowVector);
+	else
+	  DO_FIND_OP(ColumnVector);
       }
       break;
 
     case 3:
       retval(2) = val;
       // Fall through!
 
     case 2:
-      retval(1) = octave_value (j_idx, 1);
-      retval(0) = octave_value (i_idx, 1);
-
-      // If you want this to work more like Matlab, use
-      //
-      //    retval(0) = octave_value (i_idx, (nr != 1));
-      //
-      // instead of the previous statement.
-
+      retval(1) = j_idx;
+      retval(0) = i_idx;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
@@ -107,18 +113,17 @@ find_nonzero_elem_idx (const Matrix& m, 
 	  {
 	    i_idx (count) = i + 1;
 	    j_idx (count) = j + 1;
 	    v (count) = d;
 	    count++;
 	  }
       }
 
-  octave_value tmp (v, 1);
-  return find_to_fortran_idx (i_idx, j_idx, tmp, m_nr, nargout);
+  return find_to_fortran_idx (i_idx, j_idx, octave_value (v), m_nr, nargout);
 }
 
 static octave_value_list
 find_nonzero_elem_idx (const ComplexMatrix& m, int nargout)
 {
   int count = 0;
   int m_nr = m.rows ();
   int m_nc = m.columns ();
@@ -147,18 +152,17 @@ find_nonzero_elem_idx (const ComplexMatr
 	  {
 	    i_idx (count) = i + 1;
 	    j_idx (count) = j + 1;
 	    v (count) = c;
 	    count++;
 	  }
       }
 
-  octave_value tmp (v, 1);
-  return find_to_fortran_idx (i_idx, j_idx, tmp, m_nr, nargout);
+  return find_to_fortran_idx (i_idx, j_idx, octave_value (v), m_nr, nargout);
 }
 
 DEFUN_DLD (find, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} find (@var{x})\n\
 Return a vector of indices of nonzero elements of a matrix.  To obtain a\n\
 single index for each matrix element, Octave pretends that the columns\n\
 of a matrix form one long vector (like Fortran arrays are stored).  For\n\
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -310,29 +310,29 @@ DEFUN_DLD (min, args, nargout,
 	{
 	  Matrix m = arg1.matrix_value ();
 
 	  if (! error_state)
 	    {
 	      if (m.rows () == 1)
 		retval(0) = m.row_min ();
 	      else
-		retval(0) = octave_value (m.column_min (), 0);
+		retval(0) = m.column_min ();
 	    }
 	}
       else if (arg1.is_complex_type ())
 	{
 	  ComplexMatrix m = arg1.complex_matrix_value ();
 
 	  if (! error_state)
 	    {
 	      if (m.rows () == 1)
 		retval(0) = m.row_min ();
 	      else
-		retval(0) = octave_value (m.column_min (), 0);
+		retval(0) = m.column_min ();
 	    }
 	}
       else
 	gripe_wrong_type_arg ("min", arg1);
     }
   else if (nargin == 1 && nargout == 2)
     {
       Array<int> index;
@@ -343,31 +343,31 @@ DEFUN_DLD (min, args, nargout,
 
 	  if (! error_state)
 	    {
 	      retval.resize (2);
 
 	      if (m.rows () == 1)
 		retval(0) = m.row_min (index);
 	      else
-		retval(0) = octave_value (m.column_min (index), 0);
+		retval(0) = m.column_min (index);
 	    }
 	}
       else if (arg1.is_complex_type ())
 	{
 	  ComplexMatrix m = arg1.complex_matrix_value ();
 
 	  if (! error_state)
 	    {
 	      retval.resize (2);
 
 	      if (m.rows () == 1)
 		retval(0) = m.row_min (index);
 	      else
-		retval(0) = octave_value (m.column_min (index), 0);
+		retval(0) = m.column_min (index);
 	    }
 	}
       else
 	gripe_wrong_type_arg ("min", arg1);
 
       int len = index.length ();
 
       if (len > 0)
@@ -376,17 +376,17 @@ DEFUN_DLD (min, args, nargout,
 
 	  for (int i = 0; i < len; i++)
 	    {
 	      int tmp = index.elem (i) + 1;
 	      idx.elem (i) = (tmp <= 0)
 		? octave_NaN : static_cast<double> (tmp);
 	    }
 
-	  retval(1) = octave_value (idx, 0);
+	  retval(1) = idx;
 	}
     }
   else if (nargin == 2)
     {
       int arg1_is_scalar = arg1.is_scalar_type ();
       int arg2_is_scalar = arg2.is_scalar_type ();
 
       int arg1_is_complex = arg1.is_complex_type ();
@@ -524,29 +524,29 @@ DEFUN_DLD (max, args, nargout,
 	{
 	  Matrix m = arg1.matrix_value ();
 
 	  if (! error_state)
 	    {
 	      if (m.rows () == 1)
 		retval(0) = m.row_max ();
 	      else
-		retval(0) = octave_value (m.column_max (), 0);
+		retval(0) = m.column_max ();
 	    }
 	}
       else if (arg1.is_complex_type ())
 	{
 	  ComplexMatrix m = arg1.complex_matrix_value ();
 
 	  if (! error_state)
 	    {
 	      if (m.rows () == 1)
 		retval(0) = m.row_max ();
 	      else
-		retval(0) = octave_value (m.column_max (), 0);
+		retval(0) = m.column_max ();
 	    }
 	}
       else
 	gripe_wrong_type_arg ("max", arg1);
     }
   else if (nargin == 1 && nargout == 2)
     {
       Array<int> index;
@@ -557,31 +557,31 @@ DEFUN_DLD (max, args, nargout,
 
 	  if (! error_state)
 	    {
 	      retval.resize (2);
 
 	      if (m.rows () == 1)
 		retval(0) = m.row_max (index);
 	      else
-		retval(0) = octave_value (m.column_max (index), 0);
+		retval(0) = m.column_max (index);
 	    }
 	}
       else if (arg1.is_complex_type ())
 	{
 	  ComplexMatrix m = arg1.complex_matrix_value ();
 
 	  if (! error_state)
 	    {
 	      retval.resize (2);
 
 	      if (m.rows () == 1)
 		retval(0) = m.row_max (index);
 	      else
-		retval(0) = octave_value (m.column_max (index), 0);
+		retval(0) = m.column_max (index);
 	    }
 	}
       else
 	gripe_wrong_type_arg ("max", arg1);
 
       int len = index.length ();
 
       if (len > 0)
@@ -590,17 +590,17 @@ DEFUN_DLD (max, args, nargout,
 
 	  for (int i = 0; i < len; i++)
 	    {
 	      int tmp = index.elem (i) + 1;
 	      idx.elem (i) = (tmp <= 0)
 		? octave_NaN : static_cast<double> (tmp);
 	    }
 
-	  retval(1) = octave_value (idx, 0);
+	  retval(1) = idx;
 	}
     }
   else if (nargin == 2)
     {
       int arg1_is_scalar = arg1.is_scalar_type ();
       int arg2_is_scalar = arg2.is_scalar_type ();
 
       int arg1_is_complex = arg1.is_complex_type ();
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -159,67 +159,67 @@ mx_sort (const Matrix& m)
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix ms (nr, nc);
   Matrix idx (nr, nc);
 
   if (nr == 1 && nc > 0)
     {
-      retval (1) = Matrix (nr, nc, 1.0);
-      retval (0) = m;
+      retval(1) = Matrix (nr, nc, 1.0);
+      retval(0) = m;
 
       return retval;
     }
   else if (nr > 1 && nc > 0)
     {
       for (int j = 0; j < nc; j++)
 	{
 	  Array<int> l = create_index_array (nr);
 
 	  DO_SORT (nr, (m (p-1, j) > m (q-1, j)));
 
 	  MATRIX_CREATE_RETURN_VALUES (ms, m);
 	}
     }
 
-  retval (1) = idx;
-  retval (0) = ms;
+  retval(1) = idx;
+  retval(0) = ms;
 
   return retval;
 }
 
 static octave_value_list
 mx_sort (const RowVector& v)
 {
   octave_value_list retval;
 
   int n = v.capacity ();
 
   RowVector vs (n);
   RowVector idx (n);
 
   if (n == 1)
     {
-      retval (1) = RowVector (n, 1.0);
-      retval (0) = v;
+      retval(1) = RowVector (n, 1.0);
+      retval(0) = v;
 
       return retval;
     }
   else if (n > 1)
     {
       Array<int> l = create_index_array (n);
 
       DO_SORT (n, (v (p-1) > v (q-1)));
 
       VECTOR_CREATE_RETURN_VALUES (vs, v);
     }
 
-  retval (1) = octave_value (idx, 0);
-  retval (0) = octave_value (vs, 0);
+  retval(1) = idx;
+  retval(0) = vs;
 
   return retval;
 }
 
 static octave_value_list
 mx_sort (const ComplexMatrix& cm)
 {
   octave_value_list retval;
@@ -227,18 +227,18 @@ mx_sort (const ComplexMatrix& cm)
   int nr = cm.rows ();
   int nc = cm.columns ();
 
   ComplexMatrix cms (nr, nc);
   Matrix idx (nr, nc);
 
   if (nr == 1 && nc > 0)
     {
-      retval (1) = Matrix (nr, nc, 1.0);
-      retval (0) = cm;
+      retval(1) = Matrix (nr, nc, 1.0);
+      retval(0) = cm;
 
       return retval;
     }
   else if (nr > 1 && nc > 0)
     {
       for (int j = 0; j < nc; j++)
 	{
 	  Array<int> l = create_index_array (nr);
@@ -254,36 +254,36 @@ mx_sort (const ComplexMatrix& cm)
 	  DO_SORT (nr, ((all_elts_real
 			 && real (cm (p-1, j)) > real (cm (q-1, j)))
 			|| abs (cm (p-1, j)) > abs (cm (q-1, j))));
 
 	  MATRIX_CREATE_RETURN_VALUES (cms, cm);
 	}
     }
 
-  retval (1) = idx;
-  retval (0) = cms;
+  retval(1) = idx;
+  retval(0) = cms;
 
   return retval;
 }
 
 static octave_value_list
 mx_sort (ComplexRowVector& cv)
 {
   octave_value_list retval;
 
   int n = cv.capacity ();
 
   ComplexRowVector cvs (n);
   RowVector idx (n);
 
   if (n == 1)
     {
-      retval (1) = RowVector (n, 1.0);
-      retval (0) = cv;
+      retval(1) = RowVector (n, 1.0);
+      retval(0) = cv;
 
       return retval;
     }
   else if (n > 1)
     {
       Array<int> l = create_index_array (n);
 
       int all_elts_real = 1;
@@ -296,18 +296,18 @@ mx_sort (ComplexRowVector& cv)
 
       DO_SORT (n, ((all_elts_real
 		    && real (cv (p-1)) > real (cv (q-1)))
 		   || abs (cv (p-1)) > abs (cv (q-1))));
 
       VECTOR_CREATE_RETURN_VALUES (cvs, cv);
     }
 
-  retval (1) = octave_value (idx, 0);
-  retval (0) = octave_value (cvs, 0);
+  retval(1) = idx;
+  retval(0) = cvs;
 
   return retval;
 }
 
 DEFUN_DLD (sort, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 Return a copy of @var{x} with the elements elements arranged in\n\
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -153,17 +153,17 @@ decomposition, eliminating the unnecessa
 	    }
 
 	  SVD result (tmp, type);
 
 	  DiagMatrix sigma = result.singular_values ();
 
 	  if (nargout == 0 || nargout == 1)
 	    {
-	      retval(0) = octave_value (sigma.diag (), 1);
+	      retval(0) = sigma.diag ();
 	    }
 	  else
 	    {
 	      retval(2) = result.right_singular_matrix ();
 	      retval(1) = sigma;
 	      retval(0) = result.left_singular_matrix ();
 	    }
 	}
@@ -182,17 +182,17 @@ decomposition, eliminating the unnecessa
 	    }
 
 	  ComplexSVD result (ctmp, type);
 
 	  DiagMatrix sigma = result.singular_values ();
 
 	  if (nargout == 0 || nargout == 1)
 	    {
-	      retval(0) = octave_value (sigma.diag (), 1);
+	      retval(0) = sigma.diag ();
 	    }
 	  else
 	    {
 	      retval(2) = result.right_singular_matrix ();
 	      retval(1) = sigma;
 	      retval(0) = result.left_singular_matrix ();
 	    }
 	}
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1131,17 +1131,17 @@ greater than 1.  The @var{base} and @var
 the range.  If @var{base} is greater than @var{limit}, the elements are\n\
 stored in decreasing order.  If the number of points is not specified, a\n\
 value of 100 is used.\n\
 \n\
 The @code{linspace} function always returns a row vector, regardless of\n\
 the value of @code{prefer_column_vectors}.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   int npoints = 100;
 
   if (nargin != 2 && nargin != 3)
     {
       print_usage ("linspace");
@@ -1161,30 +1161,30 @@ the value of @code{prefer_column_vectors
 	  Complex x1 = arg_1.complex_value ();
 	  Complex x2 = arg_2.complex_value ();
 
 	  if (! error_state)
 	    {
 	      ComplexRowVector rv = linspace (x1, x2, npoints);
 
 	      if (! error_state)
-		retval (0) = octave_value (rv, 0);
+		retval = rv;
 	    }
 	}
       else
 	{
 	  double x1 = arg_1.double_value ();
 	  double x2 = arg_2.double_value ();
 
 	  if (! error_state)
 	    {
 	      RowVector rv = linspace (x1, x2, npoints);
 
 	      if (! error_state)
-		retval (0) = octave_value (rv, 0);
+		retval = rv;
 	    }
 	}
     }
 
   return retval;
 }
 
 void
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -486,17 +486,17 @@ fnmatch (\"a*b\", [\"ab\"; \"axyzb\"; \"
 
 	  int n = tmp.length ();
 
 	  ColumnVector result (n);
 
 	  for (int i = 0; i < n; i++)
 	    result(i) = tmp(i);
 
-	  retval = octave_value (result, true);
+	  retval = result;
 	}
     }
   else
     print_usage ("fnmatch");
 
   return retval;
 }
 
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -53,36 +53,36 @@ public:
     : data (1, octave_value (d)) { }
 
   octave_value_list (const Matrix& m)
     : data (1, octave_value (m)) { }
 
   octave_value_list (const DiagMatrix& d)
     : data (1, octave_value (d)) { }
 
-  octave_value_list (const RowVector& v, int pcv)
-    : data (1, octave_value (v, pcv)) { }
+  octave_value_list (const RowVector& v)
+    : data (1, octave_value (v)) { }
 
-  octave_value_list (const ColumnVector& v, int pcv)
-    : data (1, octave_value (v, pcv)) { }
+  octave_value_list (const ColumnVector& v)
+    : data (1, octave_value (v)) { }
 
   octave_value_list (const Complex& c)
     : data (1, octave_value (c)) { }
 
   octave_value_list (const ComplexMatrix& m)
     : data (1, octave_value (m)) { }
 
   octave_value_list (const ComplexDiagMatrix& d)
     : data (1, octave_value (d)) { }
 
-  octave_value_list (const ComplexRowVector& v, int pcv)
-    : data (1, octave_value (v, pcv)) { }
+  octave_value_list (const ComplexRowVector& v)
+    : data (1, octave_value (v)) { }
 
-  octave_value_list (const ComplexColumnVector& v, int pcv)
-    : data (1, octave_value (v, pcv)) { }
+  octave_value_list (const ComplexColumnVector& v)
+    : data (1, octave_value (v)) { }
 
   octave_value_list (const char *s)
     : data (1, octave_value (s)) { }
 
   octave_value_list (const string& s)
     : data (1, octave_value (s)) { }
 
   octave_value_list (const string_vector& s)
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -46,30 +46,16 @@ Software Foundation, 59 Temple Place - S
 #include "pr-output.h"
 
 template class octave_base_matrix<ComplexMatrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_complex_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_matrix, "complex matrix");
 
-octave_complex_matrix::octave_complex_matrix (const ComplexRowVector& v,
-					      int pcv)
-  : octave_base_matrix<ComplexMatrix> (((pcv < 0 && Vprefer_column_vectors)
-					|| pcv)
-				       ? ComplexMatrix (v.transpose ())
-				       : ComplexMatrix (v)) { }
-
-octave_complex_matrix::octave_complex_matrix (const ComplexColumnVector& v,
-					      int pcv)
-  : octave_base_matrix<ComplexMatrix> (((pcv < 0 && Vprefer_column_vectors)
-					|| pcv)
-				       ? ComplexMatrix (v)
-				       : ComplexMatrix (v.transpose ())) { }
-
 octave_value *
 octave_complex_matrix::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   int nr = matrix.rows ();
   int nc = matrix.cols ();
 
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -58,19 +58,21 @@ public:
     : octave_base_matrix<ComplexMatrix> () { }
 
   octave_complex_matrix (const ComplexMatrix& m)
     : octave_base_matrix<ComplexMatrix> (m) { }
 
   octave_complex_matrix (const ComplexDiagMatrix& d)
     : octave_base_matrix<ComplexMatrix> (d) { }
 
-  octave_complex_matrix (const ComplexRowVector& v, int pcv = -1);
+  octave_complex_matrix (const ComplexRowVector& v)
+    : octave_base_matrix<ComplexMatrix> (ComplexMatrix (v)) { }
 
-  octave_complex_matrix (const ComplexColumnVector& v, int pcv = -1);
+  octave_complex_matrix (const ComplexColumnVector& v)
+    : octave_base_matrix<ComplexMatrix> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const octave_complex_matrix& cm)
     : octave_base_matrix<ComplexMatrix> (cm) { }
 
   ~octave_complex_matrix (void) { }
 
   octave_value *clone (void) { return new octave_complex_matrix (*this); }
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -47,24 +47,16 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 template class octave_base_matrix<Matrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_matrix, "matrix");
 
-octave_matrix::octave_matrix (const RowVector& v, int pcv)
-  : octave_base_matrix<Matrix> ((pcv < 0 && Vprefer_column_vectors) || pcv
-				? Matrix (v.transpose ()) : Matrix (v)) { }
-
-octave_matrix::octave_matrix (const ColumnVector& v, int pcv)
-  : octave_base_matrix<Matrix> ((pcv < 0 && Vprefer_column_vectors) || pcv
-				? Matrix (v) : Matrix (v.transpose ())) { }
-
 octave_value *
 octave_matrix::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   int nr = matrix.rows ();
   int nc = matrix.cols ();
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -58,19 +58,21 @@ public:
     : octave_base_matrix<Matrix> () { }
 
   octave_matrix (const Matrix& m)
     : octave_base_matrix<Matrix> (m) { }
 
   octave_matrix (const DiagMatrix& d)
     : octave_base_matrix<Matrix> (d) { }
 
-  octave_matrix (const RowVector& v, int pcv = -1);
+  octave_matrix (const RowVector& v)
+    : octave_base_matrix<Matrix> (Matrix (v)) { }
 
-  octave_matrix (const ColumnVector& v, int pcv = -1);
+  octave_matrix (const ColumnVector& v)
+    : octave_base_matrix<Matrix> (Matrix (v)) { }
 
   octave_matrix (const octave_matrix& m)
     : octave_base_matrix<Matrix> (m) { }
 
   ~octave_matrix (void) { }
 
   octave_value *clone (void) { return new octave_matrix (*this); }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -91,17 +91,17 @@ int Vimplicit_str_to_num_ok;
 int Vok_to_lose_imaginary_part;
 
 // If TRUE, create column vectors when doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined).  Only matters when resize_on_range_error is also
 // TRUE.
-bool Vprefer_column_vectors;
+static bool Vprefer_column_vectors;
 
 // If TRUE, print the name along with the value.
 bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
@@ -351,25 +351,25 @@ octave_value::octave_value (const Matrix
 
 octave_value::octave_value (const DiagMatrix& d)
   : rep (new octave_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
-octave_value::octave_value (const RowVector& v, int pcv)
-  : rep (new octave_matrix (v, pcv))
+octave_value::octave_value (const RowVector& v)
+  : rep (new octave_matrix (v))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
-octave_value::octave_value (const ColumnVector& v, int pcv)
-  : rep (new octave_matrix (v, pcv))
+octave_value::octave_value (const ColumnVector& v)
+  : rep (new octave_matrix (v))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const Complex& C)
   : rep (new octave_complex (C))
 {
@@ -386,25 +386,25 @@ octave_value::octave_value (const Comple
 
 octave_value::octave_value (const ComplexDiagMatrix& d)
   : rep (new octave_complex_matrix (d))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
-octave_value::octave_value (const ComplexRowVector& v, int pcv)
-  : rep (new octave_complex_matrix (v, pcv))
+octave_value::octave_value (const ComplexRowVector& v)
+  : rep (new octave_complex_matrix (v))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
-octave_value::octave_value (const ComplexColumnVector& v, int pcv)
-  : rep (new octave_complex_matrix (v, pcv))
+octave_value::octave_value (const ComplexColumnVector& v)
+  : rep (new octave_complex_matrix (v))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (bool b)
   : rep (new octave_bool (b))
 {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -151,23 +151,23 @@ public:
   enum magic_colon { magic_colon_t };
   enum all_va_args { all_va_args_t };
 
   octave_value (void);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
-  octave_value (const RowVector& v, int pcv = -1);
-  octave_value (const ColumnVector& v, int pcv = -1);
+  octave_value (const RowVector& v);
+  octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ComplexDiagMatrix& d);
-  octave_value (const ComplexRowVector& v, int pcv = -1);
-  octave_value (const ComplexColumnVector& v, int pcv = -1);
+  octave_value (const ComplexRowVector& v);
+  octave_value (const ComplexColumnVector& v);
   octave_value (bool b);
   octave_value (const boolMatrix& bm);
   octave_value (char c);
   octave_value (const char *s);
   octave_value (const string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
@@ -657,24 +657,16 @@ extern bool Vdo_fortran_indexing;
 extern int Vimplicit_str_to_num_ok;
 
 // Should we allow silent conversion of complex to real when a real
 // type is what we're really looking for?  A positive value means yes.
 // A negative value means yes, but print a warning message.  Zero
 // means it should be considered an error.
 extern int Vok_to_lose_imaginary_part;
 
-// If TRUE, create column vectors when doing assignments like:
-//
-//   octave> A(1) = 3; A(2) = 5
-//
-// (for A undefined).  Only matters when resize_on_range_error is also
-// TRUE.
-extern bool Vprefer_column_vectors;
-
 // If TRUE, print the name along with the value.
 extern bool Vprint_answer_id_name;
 
 // Should operations on empty matrices return empty matrices or an
 // error?  A positive value means yes.  A negative value means yes,
 // but print a warning message.  Zero means it should be considered an
 // error.
 extern int Vpropagate_empty_matrices;
