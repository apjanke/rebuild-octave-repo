# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375549507 25200
#      Sat Aug 03 10:05:07 2013 -0700
# Node ID 4b834dbe4b3ecfc6b8c2cc1762e0f504e33e606a
# Parent  1e2641277b2aa715f27b583a65221365697a506b
meshz.m: Add support for color matrix input.

* scripts/plot/meshz.m: Add support for color matrix input.

diff --git a/scripts/plot/meshz.m b/scripts/plot/meshz.m
--- a/scripts/plot/meshz.m
+++ b/scripts/plot/meshz.m
@@ -59,18 +59,20 @@ function h = meshz (varargin)
     error ("meshz: X, Y, Z, C arguments must be real");
   endif
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("meshz", varargin{:});
 
   ## Find where property/value pairs start
   charidx = find (cellfun ("isclass", varargin, "char"), 1);
 
+  have_c = false;
   if (isempty (charidx))
     if (nargin == 2 || nargin == 4) 
+      have_c = true;
       charidx = nargin;   # bundle C matrix back into varargin 
     else
       charidx = nargin + 1;
     endif
   endif
 
   if (charidx == 2)
     z = varargin{1};
@@ -95,24 +97,48 @@ function h = meshz (varargin)
          y(end,1), y(end,:), y(end,end)];
   endif
 
   zref = min (z(isfinite (z)));
   z = [zref .* ones(1, columns(z) + 2);
        zref .* ones(rows(z), 1), z, zref .* ones(rows(z), 1);
        zref .* ones(1, columns(z) + 2)];
 
+  if (have_c)
+    c = varargin{charidx};
+    cref = min (c(isfinite (c)));
+    c = [cref .* ones(1, columns(c) + 2);
+         cref .* ones(rows(c), 1), c, cref .* ones(rows(c), 1);
+         cref .* ones(1, columns(c) + 2)];
+    varargin(charidx) = c;
+  endif
+    
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     htmp = mesh (x, y, z, varargin{charidx:end});
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
+
+%!demo
+%! clf;
+%! colormap ('default');
+%! Z = peaks ();
+%! meshz (Z);
+
+%!demo
+%! clf;
+%! colormap ('default');
+%! [X,Y,Z] = peaks ();
+%! [fx, fy] = gradient (Z); 
+%! C = sqrt (fx.^2 + fy.^2);
+%! meshz (X,Y,Z,C);
+
