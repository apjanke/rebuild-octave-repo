# HG changeset patch
# User jwe
# Date 1134420846 0
#      Mon Dec 12 20:54:06 2005 +0000
# Node ID c45cf76df06fa3abf700203fac513660bfb69460
# Parent  9fc532d861d4933b8b1ebbcf0b8ce813e697f71d
[project @ 2005-12-12 20:54:06 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2005-12-12  Michael Zeising  <michael@michaels-website.de>
+
+	* audio/wavread.m, audio/wavwrite.m: 
+	Correct scaling for 8-bit linear pcm samples.
+	Improve scaling for all other linear pcm resolutions.
+
 2005-12-07  John W. Eaton  <jwe@octave.org>
 
 	* statistics/base/moment.m: Don't save and restore warn_str_to_num.
 
 	* sparse/spdiags.m: Don't save and restore warn_fortran_indexing.
 	* strings/strjust.m: Likewise.
 
 	* general/shift.m: Don't save and restore warn_empty_list_elements.
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -31,45 +31,42 @@
 ## Read only the first @var{n} samples from each channel.
 ##
 ## @deftypefnx {Function File} {[@dots{}]} = wavread(@var{filename},[@var{n1} @var{n2}])
 ## Read only samples @var{n1} through @var{n2} from each channel.
 ##
 ## @deftypefnx {Function File} {[@var{samples}, @var{channels}]} = wavread (@var{filename}, "size")
 ## Return the number of samples (@var{n}) and channels (@var{ch})
 ## instead of the audio data.
+##
 ## @end deftypefn
 ##
 ## @seealso{wavwrite}
 
 ## Author: Michael Zeising <michael.zeising@stud.uni-erlangen.de>
 ## Created: 06 December 2005
 
 function [y, samples_per_sec, bits_per_sample] = wavread (filename, param)
 
   FORMAT_PCM        = 0x0001;   # PCM (8/16/32 bit)
   FORMAT_IEEE_FLOAT = 0x0003;   # IEEE float (32/64 bit)
-  FORMAT_ALAW       = 0x0006;   # 8-bit ITU-T G.711 A-law   (not yet supported)
-  FORMAT_MULAW      = 0x0007;   # 8-bit ITU-T G.711 Âµ-law   (not yet supported)
-  FORMAT_IMA_ADPCM  = 0x0011;   # IMA/ADPCM 4:1 compression (not yet supported)
   BYTEORDER         = "ieee-le";
 
   if (nargin < 1 || nargin > 2)
     usage ("wavread (filename, param)");
   endif
 
-  # open file for binary reading
-
   if (! ischar (filename))
     error ("wavwrite: expecting filename to be a character string");
   endif
 
+  # open file for binary reading
   [fid, msg] = fopen (filename, "rb");
   if (fid < 0)
-    error ("wavread: %s", msg)
+    error ("wavread: %s", msg);
   endif
   
   ## check for RIFF/WAVE header
   ck_id = char (fread (fid, 4))';
   fseek (fid, 4, SEEK_CUR);
   wave_id = char (fread (fid, 4))';
   if (ck_id != "RIFF" || wave_id != "WAVE")
     fclose (fid);
@@ -125,17 +122,17 @@ function [y, samples_per_sec, bits_per_s
 
   ## data chunk size
   ck_size = fread (fid, 1, "ulong", 0, BYTEORDER);
   
   ## determine sample data type
   if (format_tag == FORMAT_PCM)
     switch bits_per_sample
       case 8
-        format = "int8";
+        format = "uint8";
       case 16 
         format = "int16";
       case 32 
         format = "int32";
       otherwise
         fclose (fid);
         error ("wavread: %d bits sample resolution is not supported with PCM", bits_per_sample);
     endswitch
@@ -170,33 +167,29 @@ function [y, samples_per_sec, bits_per_s
       y = [ck_size/channels/bits_per_sample/8, channels];
       return
     else
       fclose (fid);
       error ("wavread: invalid argument 2");
     endif
   endif
   
-  ## read samples
+  ## read samples and close file
   [yi, n] = fread (fid, length, format, 0, BYTEORDER);
-  
   fclose (fid);
   
   if (format_tag == FORMAT_PCM)
     ## normalize samples
     switch (bits_per_sample)
       case 8
-        yi = (yi - 127)/127;      # 8-bit samples are unsigned
-      case {16, 32}
-        yi = yi/((2 ** bits_per_sample) / 2 - 1);
+        yi = (yi - 127.5)/127.5;
+      case 16
+        yi = yi/32768;
+      case 32
+        yi = yi/2147483648;
     endswitch
   endif
   
   ## deinterleave
-  ## y = [];
-  ## for i = 1:channels
-  ##   y = [y, yi(i:channels:n)];
-  ## endfor
-
   nr = numel (yi) / channels;
   y = reshape (yi, channels, nr)';
   
 endfunction
diff --git a/scripts/audio/wavwrite.m b/scripts/audio/wavwrite.m
--- a/scripts/audio/wavwrite.m
+++ b/scripts/audio/wavwrite.m
@@ -53,17 +53,17 @@ function wavwrite (filename, y, samples_
   if (nargin < 4)
     warning ("wavwrite: sample resolution set to 16-bit");
     bits_per_sample = 16;
   endif
   
   ## determine sample format
   switch (bits_per_sample)
     case 8  
-      format = "int8";
+      format = "uint8";
     case 16 
       format = "int16";
     case 32 
       format = "int32";
     otherwise
       error ("wavread: sample resolution not supported");
   endswitch
   
@@ -116,30 +116,27 @@ function wavwrite (filename, y, samples_
   c += fwrite (fid, "data", "uchar");
   c += fwrite (fid, ck_size, "ulong", 0, BYTEORDER);
   
   if (c < 25)
     fclose (fid);
     error ("wavread: writing to file failed");
   endif
   
+  ## interleave samples
+  yi = reshape (y', n*channels, 1);
+  
   ## scale samples
   switch (bits_per_sample)
     case 8
-      y = floor (y*127 + 127);
-    case {16, 32}
-      y = floor (y*((2 ** bits_per_sample) / 2 - 1));
+      yi = round (yi*127.5 + 127.5);
+    case 16
+      yi = floor (yi*32767.5);
+    case 32
+      yi = floor (yi*2147483647.5);
   endswitch
   
-  ## interleave samples
-  ## l = n*channels;
-  ## for i = 1:channels
-  ##  yi(i:channels:l) = y(:,i);
-  ## endfor
-
-  yi = reshape (y', n*channels, 1);
-  
   ## write to file
   c = fwrite (fid, yi, format, 0, BYTEORDER);
   
   fclose (fid);
   
 endfunction
