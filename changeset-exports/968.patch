# HG changeset patch
# User jwe
# Date 787182780 0
#      Sun Dec 11 21:53:00 1994 +0000
# Node ID 9351572b7210a200b9d78cf824c47327308c8e72
# Parent  b228d6cd59a195dfc307d03ec2d7eb8c47744d3f
[project @ 1994-12-11 21:53:00 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1,9 +1,9 @@
-/* lex.l                                                -*- C -*-
+/* lex.l                                                -*- C++ -*-
 
 Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
@@ -131,28 +131,42 @@ PLUS	((\+)|(\.\+))
 MINUS	((\-)|(\.\-))
 NOT	((\~)|(\!))
 QQ	(\'\')
 ECHAR	(\\.)
 QSTR	([^\n\'\\]*({QQ}|{ECHAR})*)
 DQSTR	([^\n\"\\]*{ECHAR}*)
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
+NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?))
 %%
 
+%{
+// XXX FIXME XXX -- this probably doesn't need to be an exclusive
+// start state since it always matches.  Also, we can probably
+// eliminate it by doing the check below using yyinput() in the only
+// place where we actually set this start state.
+%}
+
 <NEW_MATRIX>[^ \t\n#%] {
     yyless (0);
     BEGIN MATRIX;
   }
 
 <NEW_MATRIX>{SNLCMT}* {
     fixup_column_count (yytext);
     BEGIN MATRIX;
   }
 
+%{
+// Help and other text-style functions are a pain in the ass.  This
+// stuff needs to be simplified.  May require some changes in the
+// parser too.
+%}
+
 <HELP_FCN>{NL} |
 <TEXT_FCN>{NL} {
     BEGIN 0;
     current_input_column = 1;
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return '\n';
@@ -170,20 +184,16 @@ EXPON	([DdEe][+-]?{D}+)
 	BEGIN 0;
 	if (strcmp (yytext, ",") == 0)
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
       }
   }
 
-<TEXT_FCN>{S}* {
-    current_input_column += yyleng;
-  }
-
 <HELP_FCN>[^ \t\n]*{S}*	|
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
     static char *tok = 0;
     delete [] tok;
     tok = strip_trailing_whitespace (yytext);
     yylval.tok_val = new token (tok);
     token_stack.push (yylval.tok_val);
     TOK_RETURN (TEXT);
@@ -230,16 +240,20 @@ EXPON	([DdEe][+-]?{D}+)
 	do_string_escapes (tok);
 	yylval.tok_val = new token (tok);
 	token_stack.push (yylval.tok_val);
 	current_input_column += yyleng;
       }
     return TEXT;
   }
 
+%{
+// XXX FIXME XXX -- these need to be merged into a single function.
+%}
+
 <STRING>{QSTR}*[\n\'] {
     if (braceflag)
       BEGIN MATRIX;
     else
       BEGIN 0;
 
     if (yytext[yyleng-1] == '\n')
       {
@@ -288,30 +302,39 @@ EXPON	([DdEe][+-]?{D}+)
 	quote_is_transpose = 1;
 	cant_be_identifier = 1;
 	convert_spaces_to_comma = 1;
 	current_input_column += yyleng;
       }
     return TEXT;
   }
 
-<MATRIX>{SNL}*\]{S}*/== {
-
+%{
+// It's a pain in the ass to decide whether to insert a comma after
+// seeing a ']' character...
+//
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is '='.
 //
 // All this so we can handle the bogus syntax 
 //
 //   [x,y]                % an expression by itself
 //   [x,y] = expression   % assignment to a list of identifiers
 //   [x,y] == expression  % test for equality
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
+//
+// XXX FIXME XXX -- these could probably be combined, since we have to
+// look ahead anyway, we could just as easily check for the next token
+// being `=' or `=='. 
+%}
+
+<MATRIX>{SNL}*\]{S}*/== {
 
     if (! in_brace_or_paren.empty ())
       {
 	in_brace_or_paren.pop ();
 	braceflag--;
       }
 
     if (braceflag == 0)
@@ -348,19 +371,16 @@ EXPON	([DdEe][+-]?{D}+)
       return SCREW_TWO;
     else
       return ']';
   }
 
 <MATRIX>{SNL}*\]{S}* {
     fixup_column_count (yytext);
 
-// It's a pain in the ass to decide whether to insert a comma after
-// seeing a ']' character...
-
     if (! in_brace_or_paren.empty ())
       {
 	in_brace_or_paren.pop ();
 	braceflag--;
       }
 
     if (braceflag == 0)
       {
@@ -390,93 +410,60 @@ EXPON	([DdEe][+-]?{D}+)
       }
 
     quote_is_transpose = 1;
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return ']';
   }
 
+%{
+// Commas are element separators in matrix constants.
+%}
+
 <MATRIX>{S}*\,{S}* {
     TOK_RETURN (',');
   }
 
-<MATRIX>{S}+ {
+%{
+// In some cases, spaces in matrix constants can turn into commas.
+// If commas are required, spaces are not important in matrix
+// constants so we just eat them.
+%}
 
-// If commas are required, just eat the spaces.
-
+<MATRIX>{S}+ {
     if (user_pref.commas_in_literal_matrix != 2)
       {
 	int bin_op = next_token_is_bin_op (1, yytext);
 	int postfix_un_op = next_token_is_postfix_unary_op (1, yytext);
 
 	if (! (postfix_un_op || bin_op || in_brace_or_paren.empty ())
 	    && in_brace_or_paren.top ()
 	    && convert_spaces_to_comma)
 	  TOK_RETURN (',');
       }
   }
 
+%{
+// New lines and semicolons are both handled as row seprators in
+// matrix constants.
+%}
+
 <MATRIX>{SNLCMT}*[\n;]{SNLCMT}* {
     fixup_column_count (yytext);
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return ';';
   }
 
-\] {
-    if (! in_brace_or_paren.empty ())
-      in_brace_or_paren.pop ();
-
-    if (plotting && ! past_plot_range)
-      {
-	in_plot_range = 0;
-	TOK_RETURN (CLOSE_BRACE);
-      }
-    else
-      TOK_RETURN (']');
-  }
-
-{D}+\.?{D}*{EXPON}?{Im} |
-\.{D}+{EXPON}?{Im} {
-    double value;
-    int nread = sscanf (yytext, "%lf", &value);
-    assert (nread == 1);
-    quote_is_transpose = 1;
-    cant_be_identifier = 1;
-    convert_spaces_to_comma = 1;
-    if (plotting && ! in_plot_range)
-      past_plot_range = 1;
-    yylval.tok_val = new token (value, yytext, input_line_number,
-				current_input_column);
-    token_stack.push (yylval.tok_val);
-    current_input_column += yyleng;
-    do_comma_insert_check ();
-    return IMAG_NUM;
-  }
-
-{D}+/\.[\*/\\^'] |
-{D}+\.?{D}*{EXPON}? |
-\.{D}+{EXPON}? {
-    double value;
-    int nread = sscanf (yytext, "%lf", &value);
-    assert (nread == 1);
-    quote_is_transpose = 1;
-    cant_be_identifier = 1;
-    convert_spaces_to_comma = 1;
-    if (plotting && ! in_plot_range)
-      past_plot_range = 1;
-    yylval.tok_val = new token (value, yytext, input_line_number,
-				current_input_column);
-    token_stack.push (yylval.tok_val);
-    current_input_column += yyleng;
-    do_comma_insert_check ();
-    return NUM;
-  }
+%{
+// Open and close brace are handled differently if we are in the range
+// part of a plot command.
+%}
 
 \[{S}* {
     in_brace_or_paren.push (1);
     if (plotting && ! past_plot_range)
       {
 	in_plot_range = 1;
 	TOK_RETURN (OPEN_BRACE);
       }
@@ -485,77 +472,176 @@ EXPON	([DdEe][+-]?{D}+)
 	mlnm.push (1);
 	braceflag++;
 	promptflag--;
 	BEGIN NEW_MATRIX;
 	TOK_RETURN ('[');
       }
   }
 
+\] {
+    if (! in_brace_or_paren.empty ())
+      in_brace_or_paren.pop ();
+
+    if (plotting && ! past_plot_range)
+      {
+	in_plot_range = 0;
+	TOK_RETURN (CLOSE_BRACE);
+      }
+    else
+      TOK_RETURN (']');
+  }
+
+%{
+// Imaginary numbers.
+%}
+
+{NUMBER}{Im} {
+    double value;
+    int nread = sscanf (yytext, "%lf", &value);
+    assert (nread == 1);
+    quote_is_transpose = 1;
+    cant_be_identifier = 1;
+    convert_spaces_to_comma = 1;
+    if (plotting && ! in_plot_range)
+      past_plot_range = 1;
+    yylval.tok_val = new token (value, yytext, input_line_number,
+				current_input_column);
+    token_stack.push (yylval.tok_val);
+    current_input_column += yyleng;
+    do_comma_insert_check ();
+    return IMAG_NUM;
+  }
+
+%{
+// Real numbers.  Don't grab the `.' part of a dot operator as part of
+// the constant.
+%}
+
+{D}+/\.[\*/\\^'] |
+{NUMBER} {
+    double value;
+    int nread = sscanf (yytext, "%lf", &value);
+    assert (nread == 1);
+    quote_is_transpose = 1;
+    cant_be_identifier = 1;
+    convert_spaces_to_comma = 1;
+    if (plotting && ! in_plot_range)
+      past_plot_range = 1;
+    yylval.tok_val = new token (value, yytext, input_line_number,
+				current_input_column);
+    token_stack.push (yylval.tok_val);
+    current_input_column += yyleng;
+    do_comma_insert_check ();
+    return NUM;
+  }
+
+%{
+// Eat whitespace.  Whitespace inside matrix constants is handled by
+// the <MATRIX> start state code above.
+%}
+
 {S}* {
     current_input_column += yyleng;
   }
 
+%{
+// Continuation lines.  Allow comments after continuations.
+%}
+
 {CONT}{S}*{NL} |
 {CONT}{S}*{COMMENT} {
     promptflag--;
     current_input_column = 1;
   }
 
+%{
+// An ellipsis not at the end of a line is not a continuation, but
+// does have another meaning.
+%}
+
 {EL} {
     return ELLIPSIS;
   }
 
+%{
+// End of file.
+%}
+
 <<EOF>> {
     TOK_RETURN (END_OF_INPUT);
   }
 
+%{
+// Identifiers.  It matters if the next non-whitespace token is `=',
+// so match that here.
+%}
+
 {IDENT}{S}* {
 
 // Truncate the token at the first space or tab but don't write
 // directly on yytext.
 
     static char *tok = 0;
     delete [] tok;
     tok = strip_trailing_whitespace (yytext);
     return handle_identifier (tok, 0);
   }
 
 {IDENT}/{S}*= {
     return handle_identifier (yytext, 1);
   }
 
+%{
+// A new line character.  New line characters inside matrix constants
+// are handled by the <MATRIX> start state code above.
+%}
+
 {NL} {
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     current_input_column = 1;
     convert_spaces_to_comma = 1;
     return '\n';
   }
 
+%{
+// Single quote can either be the beginning of a string or a transpose
+// operator. 
+%}
+
 "'" {
     current_input_column++;
     convert_spaces_to_comma = 1;
 
     if (quote_is_transpose)
       {
 	do_comma_insert_check ();
 	return QUOTE;
       }
     else
       BEGIN STRING;
   }
 
+%{
+// Colon operator is handled differently if we are in the range part
+// of a plot command.
+%}
+
 ":" {
     if (plotting && (in_plot_range || in_plot_using))
       BIN_OP_RETURN (COLON, 1);
     else
       BIN_OP_RETURN (':', 0);
   }
 
+%{
+// Gobble comments.
+%}
+
 {CCHAR} {
     if (in_brace_or_paren.empty () && beginning_of_function)
       {
 	grab_help_text ();
 	beginning_of_function = 0;
       }
     else
       {
@@ -566,16 +652,20 @@ EXPON	([DdEe][+-]?{D}+)
 
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     current_input_column = 1;
     convert_spaces_to_comma = 1;
     return '\n';
   }
 
+%{
+// Other operators.
+%}
+
 \"		{ BEGIN DQSTRING; }
 ".*"		{ BIN_OP_RETURN (EMUL, 0); }
 "./"		{ BIN_OP_RETURN (EDIV, 0); }
 ".\\"		{ BIN_OP_RETURN (ELEFTDIV, 0); }
 {EPOW}		{ BIN_OP_RETURN (EPOW, 0); }
 ".'"		{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, 1); }
 "++"		{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, 1); }
 "--"		{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, 1); }
@@ -643,23 +733,22 @@ EXPON	([DdEe][+-]?{D}+)
     current_input_column++;
     cant_be_identifier = 1;
     quote_is_transpose = 1;
     convert_spaces_to_comma = (! in_brace_or_paren.empty ()
 			       && in_brace_or_paren.top ());
     return ')';
   }
 
-. {
-
+%{
 // We return everything else as single character tokens, which should
 // eventually result in a parse error.
+%}
 
-    TOK_RETURN (yytext[0]);
-  }
+.		{ TOK_RETURN (yytext[0]); }
 
 %%
 
 // GAG.
 //
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
 
