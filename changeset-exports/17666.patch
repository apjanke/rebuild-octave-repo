# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381901715 25200
#      Tue Oct 15 22:35:15 2013 -0700
# Node ID ea1a1eff036daf84ad73fbdc9c49025cd0c52379
# Parent  78e9bfdc544ea336df80ad5b113146ebf89335ab
Plug another memory leak in base64_decode.

* liboctave/util/oct-base64.cc(octave_base64_decode): Free out variable before
calling error handler.

diff --git a/liboctave/util/oct-base64.cc b/liboctave/util/oct-base64.cc
--- a/liboctave/util/oct-base64.cc
+++ b/liboctave/util/oct-base64.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 bool
 octave_base64_encode (const char *inc, const size_t inlen, char **out)
 {  
   bool ret = false;
 
   size_t outlen = base64_encode_alloc (inc, inlen, out);
   
-  if (! *out)
+  if (! out)
     {
       if (outlen == 0 && inlen != 0)
         (*current_liboctave_error_handler)
           ("base64_encode: input array too large");
       else
         (*current_liboctave_error_handler)
           ("base64_encode: memory allocation error");
     }
@@ -69,18 +69,21 @@ octave_base64_decode (const std::string&
     (*current_liboctave_error_handler)
       ("base64_decode: input was not valid base64");
   else if (! out)
     (*current_liboctave_error_handler)
       ("base64_decode: memory allocation error");
   else
     {
       if ((outlen % (sizeof (double) / sizeof (char))) != 0)
-        (*current_liboctave_error_handler)
-          ("base64_decode: incorrect input size");
+        {
+          ::free (out);
+          (*current_liboctave_error_handler)
+            ("base64_decode: incorrect input size");
+        }
       else
         {
           octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
           retval.resize (dim_vector (1, len));
           double *dout = reinterpret_cast<double*> (out);
           std::copy (dout, dout + len, retval.fortran_vec ());
           ::free (out);
         }
