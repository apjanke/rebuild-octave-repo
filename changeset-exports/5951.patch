# HG changeset patch
# User jwe
# Date 1156223622 0
#      Tue Aug 22 05:13:42 2006 +0000
# Node ID b2167e370f82063710c1f29ad397c454d9860095
# Parent  2b2e5a937c599e74c4a1865740eddb65e9a95957
[project @ 2006-08-22 05:13:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2006-08-22  John W. Eaton  <jwe@octave.org>
+
+	* ls-oct-ascii.cc: Increase default value of save_precision to 16.
+
+	* ls-mat-ascii.cc (save_mat5_ascii_data): Use scientific format.
+
 2006-08-21  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat5.cc (read_mat5_binary_data, read_mat5_integer_data,
 	write_mat5_array): Unconditionally enable code for 64-bit int types.
 
 	* ov-fcn-handle.cc (DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA):	
 	For compatibility, set class to function_handle.
 
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -329,34 +329,42 @@ read_mat_ascii_data (std::istream& is, c
 }
 
 bool
 save_mat_ascii_data (std::ostream& os, const octave_value& val,
 		     int precision)
 {
   bool success = true;
 
-  long old_precision = os.precision ();
-  os.precision (precision);
-
   if (val.is_complex_type ())
     warning ("save: omitting imaginary part for ASCII file");
 
   Matrix m = val.matrix_value (true);
 
   if (error_state)
     {
       success = false;
 
       error_state = 0;
     }
   else
-    os << m;
+    {
+      long old_precision = os.precision ();
+
+      os.precision (precision);
 
-  os.precision (old_precision);
+      std::ios::fmtflags oflags
+	= os.flags (static_cast<std::ios::fmtflags> (std::ios::scientific));
+
+      os << m;
+
+      os.flags (oflags);
+
+      os.precision (old_precision);
+    }
 
   return (os && success);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -63,17 +63,17 @@ 02110-1301, USA.
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "dMatrix.h"
 
 #include "ls-oct-ascii.h"
 
 // The number of decimal digits to use when writing ascii data.
-static int Vsave_precision = 15;
+static int Vsave_precision = 16;
 
 // Functions for reading ascii data.
 
 static Matrix
 strip_infnan (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
@@ -352,33 +352,33 @@ read_ascii_data (std::istream& is, const
 bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
 		 const std::string& name, bool& infnan_warned,
 		 bool strip_nan_and_inf, bool mark_as_global,
 		 int precision)
 {
   bool success = true;
 
-  if (! precision)
-    precision = Vsave_precision;
-
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
-  long old_precision = os.precision ();
-  os.precision (precision);
-
   octave_value val = val_arg;
 
   if (mark_as_global)
     os << "# type: global " << val.type_name () << "\n";
   else
     os << "# type: " << val.type_name() << "\n";
 
-  success = val . save_ascii(os, infnan_warned, strip_nan_and_inf);
+  if (! precision)
+    precision = Vsave_precision;
+
+  long old_precision = os.precision ();
+  os.precision (precision);
+
+  success = val . save_ascii (os, infnan_warned, strip_nan_and_inf);
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
 bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
