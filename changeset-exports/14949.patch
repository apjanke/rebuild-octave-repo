# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1339427008 18000
#      Mon Jun 11 10:03:28 2012 -0500
# Node ID c57cfdb37f81a9c88d36278c29acc076c87e6b7e
# Parent  006570a76b90a020532ea6d527ea9d8c3e916e75
Add power to jit

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -50,16 +50,17 @@ along with Octave; see the file COPYING.
 #include <llvm/Support/TargetSelect.h>
 #include <llvm/Support/raw_os_ostream.h>
 
 #include "octave.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-scalar.h"
 #include "pt-all.h"
+#include "xpow.h"
 
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 jit_typeinfo *jit_typeinfo::instance;
 
 // thrown when we should give up on JIT and interpret
@@ -175,16 +176,25 @@ octave_jit_gripe_nan_to_logical_conversi
       gripe_nan_to_logical_conversion ();
     }
   catch (const octave_execution_exception&)
     {
       gripe_library_execution_error ();
     }
 }
 
+extern "C" octave_base_value *
+octave_jit_xpow (double a, double b)
+{
+  octave_value ret = xpow (a, b);
+  octave_base_value *obv = ret.internal_rep ();
+  obv->grab ();
+  return obv;
+}
+
 // -------------------- jit_range --------------------
 std::ostream&
 operator<< (std::ostream& os, const jit_range& rng)
 {
   return os << "Range[" << rng.base << ", " << rng.limit << ", " << rng.inc
             << ", " << rng.nelem << "]";
 }
 
@@ -399,16 +409,25 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
   add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
   add_binary_fcmp (scalar, octave_value::op_eq, llvm::CmpInst::FCMP_UEQ);
   add_binary_fcmp (scalar, octave_value::op_ge, llvm::CmpInst::FCMP_UGE);
   add_binary_fcmp (scalar, octave_value::op_gt, llvm::CmpInst::FCMP_UGT);
   add_binary_fcmp (scalar, octave_value::op_ne, llvm::CmpInst::FCMP_UNE);
 
+  llvm::Function *jxpow = create_function ("octave_jit_xpow", any, scalar,
+                                           scalar);
+  engine->addGlobalMapping (jxpow, reinterpret_cast<void *> (&octave_jit_xpow));
+  {
+    jit_function::overload ol (jxpow, false, any, scalar, scalar);
+    binary_ops[octave_value::op_pow].add_overload (ol);
+    binary_ops[octave_value::op_el_pow].add_overload (ol);
+  }
+
   llvm::Function *gripe_div0 = create_function ("gripe_divide_by_zero", void_t);
   engine->addGlobalMapping (gripe_div0,
                             reinterpret_cast<void *> (&gripe_divide_by_zero));
 
   // divide is annoying because it might error
   fn = create_function ("octave_jit_div_scalar_scalar", scalar, scalar, scalar);
   llvm::BasicBlock *body = llvm::BasicBlock::Create (context, "body", fn);
   builder.SetInsertPoint (body);
