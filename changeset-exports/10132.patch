# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263892002 -3600
#      Tue Jan 19 10:06:42 2010 +0100
# Node ID aa0f575cf39b828131be7f9564608399f1507926
# Parent  30817aa3889a911f5923d3c1ab2c9930d146190d
improve structfun's Matlab compatibility

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-19  Jaroslav Hajek  <highegg@gmail.com>, Thorsten Meyer <thorsten.meyier@gmx.de>
+
+	* general/structfun.m: Correctly support multiple arguments with
+	non-uniform output. Correct test for non-uniform output.
+
 2010-01-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* help/print_usage.m: Try determining whether called from top level.
 	If not, don't print additional help and enable backtrace instead.
 
 2010-01-18  John W. Eaton  <jwe@octave.org>
 
 	* testfun/test.m: Undo previous change.
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2007, 2008, 2009 David Bateman
+## Copyright (C) 2010 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -69,25 +70,59 @@
 ## @seealso{cellfun, arrayfun}
 ## @end deftypefn
 
 function varargout = structfun (fun, s, varargin);
   if (nargin < 2)
     print_usage ();
   endif
 
+  uniform_output = true;
+  uo_str = "uniformoutput";
+
+  nargs = length (varargin);
+  if (nargs >= 2 && strcmpi (varargin{1}, uo_str))
+    uniform_output =varargin{2};
+  elseif (nargs >= 4 && strcmpi (varargin{3}, uo_str))
+    uniform_output =varargin{4};
+  endif
+
   varargout = cell (max ([nargout, 1]), 1);
   [varargout{:}] = cellfun (fun, struct2cell (s), varargin{:});
 
-  if (iscell (varargout{1}))
-    [varargout{:}] = cell2struct (varargout{1}, fieldnames(s), 1);
+  if (! uniform_output)
+    varargout = cellfun (@cell2struct, varargout, {fieldnames(s)}, {1}, uo_str, false);
   endif
 endfunction
 
 
 %!test
 %! s.name1 = "John Smith"; 
 %! s.name2 = "Jill Jones"; 
 %! l.name1 = "Smith";
 %! l.name2 = "Jones";
 %! o = structfun (@(x) regexp (x, '(\w+)$', "matches"){1}, s, 
 %!		  "UniformOutput", false);
 %! assert (o, l);
+
+%!function [a, b] = twoouts (x)
+%! a = x + x;
+%! b = x * x;
+
+%!test
+%! s = struct ("a", {1, 2, 3}, "b", {4, 5, 6});
+%! c(1:2, 1, 1) = [2; 8];
+%! c(1:2, 1, 2) = [4; 10];
+%! c(1:2, 1, 3) = [6; 12];
+%! d(1:2, 1, 1) = [1; 16];
+%! d(1:2, 1, 2) = [4; 25];
+%! d(1:2, 1, 3) = [9; 36];
+%! [aa, bb] = structfun(@twoouts, s);
+%! assert(aa, c);
+%! assert(bb, d);
+
+%!test
+%! s = struct ("a", {1, 2, 3}, "b", {4, 5, 6});
+%! c = struct ("a", {2, 4, 6}, "b", {8, 10, 12});
+%! d = struct ("a", {1, 4, 9}, "b", {16, 25, 36});
+%! [aa, bb] = structfun(@twoouts, s, "uniformoutput", false);
+%! assert(aa, c);
+%! assert(bb, d);
