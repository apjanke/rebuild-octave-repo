# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1257954396 18000
#      Wed Nov 11 10:46:36 2009 -0500
# Node ID 9b4a301d88ed6503c0eb9c396fd4c56c3e6dbb23
# Parent  13868ea67c7188721c1bd7e186d0ec0277ed09be
fix for fltk zoom box problems

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-11-11  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (Fl_Gl_Window::draw):
+	If zooming, call overlay.
+	(Fl_Gl_Window::overlay): Rename from draw_overlay.
+	Don't return early if zooming.  Don't call valid and conditionally
+	call setup_veiwport.  Set overlay color and draw line around zoom
+	box.
+	(Fl_Gl_Window::zoom_box_vertex): New function.
+	(Fl_Gl_Window::pixel2status): Call canvas->redraw, not
+	canvas->redraw_overlay.
+	
 2009-11-10  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* gl2ps-renderer.cc, gl2ps-renderer.h, gl2ps.c, gl2ps.h:
 	New files.  PostScript backend based on opengl_renderer and gl2ps.
 	* Makefile.am (octinclude_HEADERS): Add gl2ps.h to the list.
 	(DIST_SRC): Add gl2ps.c to the list.
 	* gl-render.cc (opengl_renderer::render_text): Rename from
 	opengl_renderer::draw_text.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -137,57 +137,61 @@ private:
 	opengl_renderer *rend = new glps_renderer (print_filename);
 	rend->draw (gh_manager::lookup (number));
 	print_filename = "";
 	delete rend;
       }
     else
       {
 	renderer.draw (gh_manager::lookup (number));
+
+	if (zoom ())
+	  overlay ();
       }
   }
 
   void resize (int _x, int _y, int _w, int _h)
   {
     Fl_Gl_Window::resize (_x, _y, _w, _h);
     setup_viewport (_w, _h);
     redraw ();
   }
 
-  void draw_overlay (void)
+  void zoom_box_vertex (void)
   {
-    if (! in_zoom)
-      return;
-
-    if (! valid ())
-      {
-	valid (1);
-	setup_viewport (w (), h ());
-      }
-
+    glVertex2d (zoom_box(0), h () - zoom_box(1));
+    glVertex2d (zoom_box(0), h () - zoom_box(3));
+    glVertex2d (zoom_box(2), h () - zoom_box(3));
+    glVertex2d (zoom_box(2), h () - zoom_box(1));
+    glVertex2d (zoom_box(0), h () - zoom_box(1));
+  }
+ 
+  void overlay (void)
+  {
     glPushMatrix ();
 
     glMatrixMode (GL_MODELVIEW);
     glLoadIdentity ();
 
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
     gluOrtho2D (0.0, w (), 0.0, h ());
 
     glPushAttrib (GL_DEPTH_BUFFER_BIT | GL_CURRENT_BIT);
     glDisable (GL_DEPTH_TEST);
 
-    glLineWidth (1);
+    glBegin (GL_POLYGON);
+    glColor4f (0.45, 0.62, 0.81, 0.1);
+    zoom_box_vertex ();
+    glEnd ();
+
     glBegin (GL_LINE_STRIP);
-    gl_color(0);
-    glVertex2d (zoom_box(0), h () - zoom_box(1));
-    glVertex2d (zoom_box(0), h () - zoom_box(3));
-    glVertex2d (zoom_box(2), h () - zoom_box(3));
-    glVertex2d (zoom_box(2), h () - zoom_box(1));
-    glVertex2d (zoom_box(0), h () - zoom_box(1));
+    glLineWidth (1.5);
+    glColor4f (0.45, 0.62, 0.81, 0.9);
+    zoom_box_vertex ();
     glEnd ();
 
     glPopAttrib ();
     glPopMatrix ();
   }
 
   int handle (int event)
   {
@@ -398,23 +402,24 @@ private:
 		    return hnd;
 		  }
 	      }
 	  }
       }
     return fp.get_currentaxes ();
   }
   
-  void pixel2status 
-  (graphics_handle ax, int px0, int py0, int px1 = -1, int py1 = -1)
+  void pixel2status (graphics_handle ax, int px0, int py0,
+		     int px1 = -1, int py1 = -1)
   {
     pixel2status (gh_manager::get_object (ax), px0, py0, px1, py1);
   }
-  void pixel2status 
-  (graphics_object ax, int px0, int py0, int px1 = -1, int py1 = -1)
+
+  void pixel2status (graphics_object ax, int px0, int py0,
+		     int px1 = -1, int py1 = -1)
   {
     double x0, y0, x1, y1;
     std::stringstream cbuf;
 
     pixel2pos (ax, px0, py0, x0, y0);
     cbuf << "[" << x0 << ", " << y0 << "]";
     if (px1 >= 0)
       {
@@ -515,17 +520,17 @@ private:
 	  {
 	    Matrix zoom_box (1,4,0);
 	    zoom_box (0) = px0;
 	    zoom_box (1) = py0;
 	    zoom_box (2) =  Fl::event_x ();
 	    zoom_box (3) =  Fl::event_y ();
 	    canvas->set_zoom_box (zoom_box);
 	    canvas->zoom (true);
-	    canvas->redraw_overlay ();
+	    canvas->redraw ();
 	  }
 
 	break;
 
       case FL_MOUSEWHEEL:
         {
 	  graphics_object ax = 
 	    gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (), 
