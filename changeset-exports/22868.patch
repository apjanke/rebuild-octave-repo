# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1481039969 18000
#      Tue Dec 06 10:59:29 2016 -0500
# Node ID 87e3163f6c87494e3f91ddb0a6fcde384519e4d3
# Parent  78f1d359dd8fbba5a954c5cb38ff0276f8d420f0
use c++11 "= default" syntax for declaration of trivial destructors

* make_int.cc, Canvas.h, GenericEventNotify.h, TextEdit.h, gl-select.h, QTerminal.h, files-dock-widget.h, history-dock-widget.h, octave-cmd.h, octave-dock-widget.h, octave-interpreter.h, thread-manager.h, welcome-wizard.h, workspace-model.h, workspace-view.h, base-text-renderer.h, comment-list.h, debug.h, dynamic-ld.cc, dynamic-ld.h, ft-text-renderer.cc, gl-render.h, gl2ps-print.cc, graphics.in.h, hook-fcn.h, input.h, load-path.h, mxarray.in.h, oct-errno.h, oct-fstrm.h, oct-handle.h, oct-iostrm.h, oct-lvalue.h, oct-stdstrm.h, oct-stream.cc, oct-stream.h, oct-strstrm.h, pr-output.cc, procstream.h, sighandlers.cc, symtab.h, text-renderer.h, txt-eng.h, variables.cc, workspace-element.h, __init_fltk__.cc, __init_gnuplot__.cc, ov-base-diag.h, ov-base-int.h, ov-base-scalar.h, ov-base-sparse.h, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h, ov-bool.h, ov-builtin.h, ov-cell.h, ov-ch-mat.h, ov-class.h, ov-classdef.cc, ov-classdef.h, ov-colon.h, ov-complex.cc, ov-complex.h, ov-cs-list.h, ov-cx-diag.h, ov-cx-mat.h, ov-cx-sparse.h, ov-fcn-handle.h, ov-fcn-inline.h, ov-fcn.h, ov-float.h, ov-flt-complex.h, ov-flt-cx-diag.h, ov-flt-cx-mat.h, ov-flt-re-diag.h, ov-flt-re-mat.h, ov-intx.h, ov-lazy-idx.h, ov-re-diag.h, ov-re-mat.h, ov-re-sparse.h, ov-scalar.h, ov-str-mat.h, ov-struct.h, ov-typeinfo.h, ov-usr-fcn.h, ovl.h, octave.h, lex.h, parse.h, pt-binop.h, pt-bp.h, pt-cell.h, pt-check.h, pt-classdef.h, pt-cmd.h, pt-const.h, pt-decl.h, pt-eval.h, pt-exp.h, pt-fcn-handle.h, pt-funcall.h, pt-id.h, pt-jump.h, pt-loop.h, pt-mat.cc, pt-mat.h, pt-misc.h, pt-pr-code.h, pt-unop.h, pt-walk.h, pt.h, DiagArray2.h, MArray.h, MDiagArray2.h, MSparse.h, idx-vector.h, quit.h, CollocWt.h, DAE.h, DAEFunc.h, DAERT.h, DAERTFunc.h, DASPK.h, DASRT.h, DASSL.h, EIG.h, LSODE.h, ODE.h, ODEFunc.h, ODES.h, ODESFunc.h, Quad.h, aepbalance.h, base-dae.h, base-de.h, base-min.h, fEIG.h, gepbalance.h, gsvd.h, hess.h, lu.h, oct-rand.h, oct-spparms.h, qr.h, qrp.h, schur.h, sparse-lu.h, svd.h, child-list.h, file-stat.h, oct-passwd.h, oct-time.h, oct-uname.h, action-container.h, base-list.h, cmd-edit.cc, cmd-edit.h, cmd-hist.cc, cmd-hist.h, glob-match.h, lo-array-errwarn.h, lo-regexp.h, oct-mutex.h, pathsearch.h, str-vec.h, url-transfer.h:

diff --git a/examples/code/make_int.cc b/examples/code/make_int.cc
--- a/examples/code/make_int.cc
+++ b/examples/code/make_int.cc
@@ -40,17 +40,17 @@ public:
     : octave_base_value (), scalar (0) { }
 
   octave_integer (int i)
     : octave_base_value (), scalar (i) { }
 
   octave_integer (const octave_integer& s)
     : octave_base_value (), scalar (s.scalar) { }
 
-  ~octave_integer (void) { }
+  ~octave_integer (void) = default;
 
   octave_base_value *clone (void) { return new octave_integer (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -44,17 +44,17 @@ namespace QtHandles
   public:
     enum EventMask
     {
       KeyPress   = 0x01,
       KeyRelease = 0x02
     };
 
   public:
-    virtual ~Canvas (void) { }
+    virtual ~Canvas (void) = default;
 
     void redraw (bool sync = false);
     void blockRedraw (bool block = true);
 
     void print (const QString& file_cmd, const QString& term);
 
     void addEventMask (int m) { m_eventMask |= m; }
     void clearEventMask (int m) { m_eventMask &= (~m); }
diff --git a/libgui/graphics/GenericEventNotify.h b/libgui/graphics/GenericEventNotify.h
--- a/libgui/graphics/GenericEventNotify.h
+++ b/libgui/graphics/GenericEventNotify.h
@@ -33,17 +33,17 @@ namespace QtHandles
 {
 
   class GenericEventNotifyReceiver;
 
   class GenericEventNotifySender
   {
   public:
     GenericEventNotifySender (void) : m_receivers () { }
-    virtual ~GenericEventNotifySender (void) { }
+    virtual ~GenericEventNotifySender (void) = default;
 
     void addReceiver (GenericEventNotifyReceiver* r)
     { m_receivers.insert (r); }
 
     void removeReceiver (GenericEventNotifyReceiver* r)
     { m_receivers.remove (r); }
 
   protected:
@@ -53,17 +53,17 @@ namespace QtHandles
   private:
     QSet<GenericEventNotifyReceiver*> m_receivers;
   };
 
   class GenericEventNotifyReceiver
   {
   public:
     GenericEventNotifyReceiver (void) { }
-    virtual ~GenericEventNotifyReceiver (void) { }
+    virtual ~GenericEventNotifyReceiver (void) = default;
 
     virtual bool eventNotifyBefore (QObject* obj, QEvent* evt) = 0;
     virtual void eventNotifyAfter (QObject* obj, QEvent* evt) = 0;
   };
 
   inline
   bool GenericEventNotifySender::notifyReceiversBefore (QObject* obj,
       QEvent* evt)
@@ -82,17 +82,17 @@ namespace QtHandles
     r->eventNotifyAfter (obj, evt);
   }
 
 #define DECLARE_GENERICEVENTNOTIFY_SENDER(T,B) \
 class T : public B, public GenericEventNotifySender \
 { \
 public: \
   T (QWidget* xparent) : B (xparent), GenericEventNotifySender () { } \
-  ~ T (void) { } \
+  ~ T (void) = default; \
 \
   bool event (QEvent* evt) \
     { \
       bool result = true; \
       if (! notifyReceiversBefore (this, evt)) \
         result = B::event (evt); \
       notifyReceiversAfter (this, evt); \
       return result; \
diff --git a/libgui/graphics/TextEdit.h b/libgui/graphics/TextEdit.h
--- a/libgui/graphics/TextEdit.h
+++ b/libgui/graphics/TextEdit.h
@@ -29,17 +29,17 @@ namespace QtHandles
 {
 
   class TextEdit : public QTextEdit
   {
     Q_OBJECT
 
   public:
     TextEdit (QWidget* xparent) : QTextEdit(xparent) { }
-    ~TextEdit (void) { }
+    ~TextEdit (void) = default;
 
   signals:
     void editingFinished (void);
     void returnPressed (void);
 
   protected:
     void focusOutEvent (QFocusEvent* event);
     void keyPressEvent (QKeyEvent* event);
diff --git a/libgui/graphics/gl-select.h b/libgui/graphics/gl-select.h
--- a/libgui/graphics/gl-select.h
+++ b/libgui/graphics/gl-select.h
@@ -37,17 +37,17 @@ namespace octave
     select_last           = 0x02
   };
 
   class opengl_selector : public opengl_renderer
   {
   public:
     opengl_selector (void) : size (5) { }
 
-    virtual ~opengl_selector (void) { }
+    virtual ~opengl_selector (void) = default;
 
     graphics_object select (const graphics_object& ax, int x, int y,
                             int flags = 0);
 
     virtual void draw (const graphics_object& go, bool toplevel = true);
 
   protected:
     virtual void draw_text (const text::properties& props);
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -44,17 +44,17 @@ class QTerminal : public QWidget
 public:
 
   static QTerminal *create (QWidget *xparent = 0);
 
   static QList<QColor> default_colors (void);
 
   static QStringList color_names (void);
 
-  virtual ~QTerminal (void) { }
+  virtual ~QTerminal (void) = default;
 
   virtual void setTerminalFont (const QFont& font) = 0;
 
   virtual void setSize (int h, int v) = 0;
 
   virtual void sendText (const QString& text) = 0;
 
   virtual QString selectedText () = 0;
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 class files_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   files_dock_widget (QWidget *parent = 0);
 
-  ~files_dock_widget (void) { }
+  ~files_dock_widget (void) = default;
 
 public slots:
 
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void change_directory_up ();
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   history_dock_widget (QWidget *parent = 0);
-  ~history_dock_widget (void) { }
+  ~history_dock_widget (void) = default;
 
 public slots:
 
   void set_history (const QStringList& hist);
   void append_history (const QString& hist_entry);
   void clear_history (void);
   void save_settings (void);
 
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -105,17 +105,17 @@ class octave_command_queue : QObject
   Q_OBJECT;
 
 public:
 
   octave_command_queue (void) : QObject (),
       _queue (QList<octave_cmd *> ()),
       _processing (1),
       _queue_mutex () { };
-  ~octave_command_queue (void) { };
+  ~octave_command_queue (void) = default;;
 
   /**
    * Adds a new octave command to the command queue.
    * @param cmd The octave command to be queued
    */
   void add_cmd (octave_cmd *cmd);
   /**
    * Callback routine for executing the command by the worker thread
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 
 class octave_dock_widget : public QDockWidget
 {
   Q_OBJECT
 
 public:
 
   octave_dock_widget (QWidget *p = 0);
-  virtual ~octave_dock_widget (void) { }
+  virtual ~octave_dock_widget (void) = default;
 
   virtual void connect_visibility_changed (void);
   void make_window (void);
   void make_widget (bool dock=true);
   void set_title (const QString&);
   void set_predecessor_widget (octave_dock_widget *prev_widget);
 signals:
 
diff --git a/libgui/src/octave-interpreter.h b/libgui/src/octave-interpreter.h
--- a/libgui/src/octave-interpreter.h
+++ b/libgui/src/octave-interpreter.h
@@ -35,17 +35,17 @@ class octave_interpreter : public QObjec
   Q_OBJECT
 
 public:
 
   // An object to manage the Octave interpreter.
 
   octave_interpreter (octave::application *app_context);
 
-  ~octave_interpreter (void) { }
+  ~octave_interpreter (void) = default;
 
 signals:
 
   void octave_ready_signal ();
 
 public slots:
 
   // Initialize and execute the octave interpreter.
diff --git a/libgui/src/thread-manager.h b/libgui/src/thread-manager.h
--- a/libgui/src/thread-manager.h
+++ b/libgui/src/thread-manager.h
@@ -34,17 +34,17 @@ public:
   friend class octave_thread_manager;
 
   octave_base_thread_manager (void) : count (1) { }
 
   octave_base_thread_manager (const octave_base_thread_manager&)
     : count (1)
   { }
 
-  virtual ~octave_base_thread_manager (void) { }
+  virtual ~octave_base_thread_manager (void) = default;
 
   virtual void register_current_thread (void) = 0;
 
   virtual void interrupt (void) = 0;
 
 protected:
 
   octave_refcount<int> count;
diff --git a/libgui/src/welcome-wizard.h b/libgui/src/welcome-wizard.h
--- a/libgui/src/welcome-wizard.h
+++ b/libgui/src/welcome-wizard.h
@@ -33,17 +33,17 @@ class welcome_wizard : public QDialog
   Q_OBJECT
 
 public:
 
   typedef QWidget *(*page_creator_fptr) (welcome_wizard *wizard);
 
   welcome_wizard (QWidget *parent = 0);
 
-  ~welcome_wizard (void) { }
+  ~welcome_wizard (void) = default;
 
 private:
 
   QList<page_creator_fptr> page_ctor_list;
   QList<page_creator_fptr>::iterator page_list_iterator;
   QWidget *current_page;
   bool allow_web_connect_state;
 
@@ -62,17 +62,17 @@ private slots:
 class initial_page : public QWidget
 {
   Q_OBJECT
 
 public:
 
   initial_page (welcome_wizard *wizard);
 
-  ~initial_page (void) { }
+  ~initial_page (void) = default;
 
   static QWidget *
   create (welcome_wizard *wizard) { return new initial_page (wizard); }
 
 private:
 
   QLabel *title;
   QLabel *message;
@@ -85,17 +85,17 @@ private:
 class setup_community_news : public QWidget
 {
   Q_OBJECT
 
 public:
 
   setup_community_news (welcome_wizard *wizard);
 
-  ~setup_community_news (void) { }
+  ~setup_community_news (void) = default;
 
   static QWidget *
   create (welcome_wizard *wizard) { return new setup_community_news (wizard); }
 
 private:
 
   QLabel *title;
   QLabel *message;
@@ -111,17 +111,17 @@ private:
 class final_page : public QWidget
 {
   Q_OBJECT
 
 public:
 
   final_page (welcome_wizard *wizard);
 
-  ~final_page (void) { }
+  ~final_page (void) = default;
 
   static QWidget *
   create (welcome_wizard *wizard) { return new final_page (wizard); }
 
 private:
 
   QLabel *title;
   QLabel *message;
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -40,17 +40,17 @@ class workspace_model
   : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
   workspace_model (QObject *parent = 0);
 
-  ~workspace_model (void) { }
+  ~workspace_model (void) = default;
 
   static QList<QColor> storage_class_default_colors (void);
 
   static QStringList storage_class_names (void);
 
   QVariant data (const QModelIndex& index, int role) const;
 
   bool setData (const QModelIndex& index, const QVariant& value,
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -38,17 +38,17 @@ along with Octave; see the file COPYING.
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   workspace_view (QWidget *parent = 0);
 
-  ~workspace_view (void) { }
+  ~workspace_view (void) = default;
 
 public slots:
 
   void notice_settings (const QSettings *);
 
   void setModel (workspace_model *model);
 
   void save_settings (void);
diff --git a/libinterp/corefcn/base-text-renderer.h b/libinterp/corefcn/base-text-renderer.h
--- a/libinterp/corefcn/base-text-renderer.h
+++ b/libinterp/corefcn/base-text-renderer.h
@@ -39,17 +39,17 @@ namespace octave
 {
   class
   base_text_renderer : public text_processor
   {
   public:
 
     base_text_renderer (void) : text_processor () { }
 
-    virtual ~base_text_renderer (void) { }
+    virtual ~base_text_renderer (void) = default;
 
     virtual Matrix
     get_extent (text_element *elt, double rotation) = 0;
 
     virtual Matrix
     get_extent (const std::string& txt, double rotation,
                 const caseless_str& interpreter) = 0;
 
diff --git a/libinterp/corefcn/comment-list.h b/libinterp/corefcn/comment-list.h
--- a/libinterp/corefcn/comment-list.h
+++ b/libinterp/corefcn/comment-list.h
@@ -67,17 +67,17 @@ public:
 
     return *this;
   }
 
   std::string text (void) const { return txt; }
 
   comment_type type (void) const { return typ; }
 
-  ~octave_comment_elt (void) { }
+  ~octave_comment_elt (void) = default;
 
 private:
 
   // The text of the comment.
   std::string txt;
 
   // The type of comment.
   comment_type typ;
diff --git a/libinterp/corefcn/debug.h b/libinterp/corefcn/debug.h
--- a/libinterp/corefcn/debug.h
+++ b/libinterp/corefcn/debug.h
@@ -47,17 +47,17 @@ bp_type
 class
 OCTINTERP_API
 bp_table
 {
 private:
 
   bp_table (void) : bp_set () { }
 
-  ~bp_table (void) { }
+  ~bp_table (void) = default;
 
 public:
 
   // mapping from (FIXME: arbitrary index??) to line number of breakpoint
   typedef std::map<int, int> intmap;
 
   typedef intmap::const_iterator const_intmap_iterator;
   typedef intmap::iterator intmap_iterator;
diff --git a/libinterp/corefcn/dynamic-ld.cc b/libinterp/corefcn/dynamic-ld.cc
--- a/libinterp/corefcn/dynamic-ld.cc
+++ b/libinterp/corefcn/dynamic-ld.cc
@@ -63,17 +63,17 @@ public:
   static octave::dynamic_library find_file (const std::string& file_name);
 
   static void display (void);
 
 private:
 
   octave_shlib_list (void) : lib_list () { }
 
-  ~octave_shlib_list (void) { }
+  ~octave_shlib_list (void) = default;
 
   void do_append (const octave::dynamic_library& shl);
 
   void do_remove (octave::dynamic_library& shl,
                   octave::dynamic_library::close_hook cl_hook = 0);
 
   octave::dynamic_library do_find_file (const std::string& file_name) const;
 
diff --git a/libinterp/corefcn/dynamic-ld.h b/libinterp/corefcn/dynamic-ld.h
--- a/libinterp/corefcn/dynamic-ld.h
+++ b/libinterp/corefcn/dynamic-ld.h
@@ -35,17 +35,17 @@ class
 octave_dynamic_loader
 {
 protected:
 
   octave_dynamic_loader (void) { }
 
 public:
 
-  virtual ~octave_dynamic_loader (void) { }
+  virtual ~octave_dynamic_loader (void) = default;
 
   static octave_function *
   load_oct (const std::string& fcn_name,
             const std::string& file_name = "",
             bool relative = false);
 
   static octave_function *
   load_mex (const std::string& fcn_name,
diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -346,17 +346,17 @@ namespace octave
   public:
 
     ft_text_renderer (void)
       : base_text_renderer (), font (), bbox (1, 4, 0.0), halign (0),
         xoffset (0), line_yoffset (0), yoffset (0), mode (MODE_BBOX),
         color (dim_vector (1, 3), 0)
     { }
 
-    ~ft_text_renderer (void) { }
+    ~ft_text_renderer (void) = default;
 
     void visit (text_element_string& e);
 
     void visit (text_element_list& e);
 
     void visit (text_element_subscript& e);
 
     void visit (text_element_superscript& e);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -33,17 +33,17 @@ namespace octave
   class
   OCTINTERP_API
   opengl_renderer
   {
   public:
 
     opengl_renderer (void);
 
-    virtual ~opengl_renderer (void) { }
+    virtual ~opengl_renderer (void) = default;
 
     virtual void draw (const graphics_object& go, bool toplevel = true);
 
     virtual void draw (const Matrix& hlist, bool toplevel = false)
     {
       int len = hlist.numel ();
 
       for (int i = len-1; i >= 0; i--)
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -56,17 +56,17 @@ namespace octave
   {
   public:
 
     gl2ps_renderer (FILE *_fp, const std::string& _term)
       : octave::opengl_renderer () , fp (_fp), term (_term), fontsize (),
         fontname (), buffer_overflow (false)
     { }
 
-    ~gl2ps_renderer (void) { }
+    ~gl2ps_renderer (void) = default;
 
     // FIXME: should we import the functions from the base class and
     // overload them here, or should we use a different name so we don't
     // have to do this?  Without the using declaration or a name change,
     // the base class functions will be hidden.  That may be OK, but it
     // can also cause some confusion.
     using octave::opengl_renderer::draw;
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -55,17 +55,17 @@ typedef octave_handle graphics_handle;
 
 // ---------------------------------------------------------------------
 
 class base_scaler
 {
 public:
   base_scaler (void) { }
 
-  virtual ~base_scaler (void) { }
+  virtual ~base_scaler (void) = default;
 
   virtual Matrix scale (const Matrix&) const
   {
     error ("invalid axis scale");
   }
 
   virtual NDArray scale (const NDArray&) const
   {
@@ -275,17 +275,17 @@ public:
     : id (-1), count (1), name (s), parent (h), hidden (false), listeners ()
   { }
 
   base_property (const base_property& p)
     : id (-1), count (1), name (p.name), parent (p.parent),
       hidden (p.hidden), listeners ()
   { }
 
-  virtual ~base_property (void) { }
+  virtual ~base_property (void) = default;
 
   bool ok (void) const { return parent.ok (); }
 
   std::string get_name (void) const { return name; }
 
   void set_name (const std::string& s) { name = s; }
 
   graphics_handle get_parent (void) const { return parent; }
@@ -2063,17 +2063,17 @@ public:
   typedef pval_map_type::const_iterator pval_map_const_iterator;
 
   typedef plist_map_type::iterator plist_map_iterator;
   typedef plist_map_type::const_iterator plist_map_const_iterator;
 
   property_list (const plist_map_type& m = plist_map_type ())
     : plist_map (m) { }
 
-  ~property_list (void) { }
+  ~property_list (void) = default;
 
   void set (const caseless_str& name, const octave_value& val);
 
   octave_value lookup (const caseless_str& name) const;
 
   plist_map_iterator begin (void) { return plist_map.begin (); }
   plist_map_const_iterator begin (void) const { return plist_map.begin (); }
 
@@ -2105,17 +2105,17 @@ class base_graphics_toolkit
 {
 public:
   friend class graphics_toolkit;
 
 public:
   base_graphics_toolkit (const std::string& nm)
     : name (nm), count (0) { }
 
-  virtual ~base_graphics_toolkit (void) { }
+  virtual ~base_graphics_toolkit (void) = default;
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
   { gripe_if_tkit_invalid ("redraw_figure"); }
 
@@ -2337,17 +2337,17 @@ public:
   {
     return instance_ok () ? instance->do_default_toolkit () : "";
   }
 
 private:
 
   gtk_manager (void) { }
 
-  ~gtk_manager (void) { }
+  ~gtk_manager (void) = default;
 
   OCTINTERP_API static void create_instance (void);
 
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
@@ -2457,17 +2457,17 @@ class graphics_object;
 
 class OCTINTERP_API base_properties
 {
 public:
   base_properties (const std::string& ty = "unknown",
                    const graphics_handle& mh = graphics_handle (),
                    const graphics_handle& p = graphics_handle ());
 
-  virtual ~base_properties (void) { }
+  virtual ~base_properties (void) = default;
 
   virtual std::string graphics_object_name (void) const { return "unknown"; }
 
   void mark_modified (void);
 
   void override_defaults (base_graphics_object& obj);
 
   virtual void init_integerhandle (const octave_value&)
@@ -2685,17 +2685,17 @@ protected:
 
 class OCTINTERP_API base_graphics_object
 {
 public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1), toolkit_flag (false) { }
 
-  virtual ~base_graphics_object (void) { }
+  virtual ~base_graphics_object (void) = default;
 
   virtual void mark_modified (void)
   {
     if (! valid_object ())
       error ("base_graphics_object::mark_modified: invalid graphics object");
 
     get_properties ().mark_modified ();
   }
@@ -3215,17 +3215,17 @@ public:
 private:
   properties xproperties;
 
 public:
 
   root_figure (void)
     : xproperties (0, graphics_handle ()), default_properties () { }
 
-  ~root_figure (void) { }
+  ~root_figure (void) = default;
 
   void mark_modified (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
@@ -3514,17 +3514,17 @@ public:
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   { }
 
-  ~figure (void) { }
+  ~figure (void) = default;
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
@@ -3606,17 +3606,17 @@ public:
                   const scaler& x, const scaler& y, const scaler& z,
                   const Matrix& zl)
     : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
 
   graphics_xform (const graphics_xform& g)
     : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
       sy (g.sy), sz (g.sz), zlim (g.zlim) { }
 
-  ~graphics_xform (void) { }
+  ~graphics_xform (void) = default;
 
   graphics_xform& operator = (const graphics_xform& g)
   {
     xform = g.xform;
     xform_inv = g.xform_inv;
     sx = g.sx;
     sy = g.sy;
     sz = g.sz;
@@ -4314,17 +4314,17 @@ private:
 
 public:
   axes (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
     xproperties.update_transform ();
   }
 
-  ~axes (void) { }
+  ~axes (void) = default;
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
@@ -4472,17 +4472,17 @@ public:
 private:
   properties xproperties;
 
 public:
   line (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~line (void) { }
+  ~line (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -4646,17 +4646,17 @@ private:
 
 public:
   text (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.set_clipping ("off");
   }
 
-  ~text (void) { }
+  ~text (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -4856,17 +4856,17 @@ private:
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.initialize_data ();
   }
 
-  ~image (void) { }
+  ~image (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -4905,17 +4905,17 @@ public:
 private:
   properties xproperties;
 
 public:
   light (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~light (void) { }
+  ~light (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5126,17 +5126,17 @@ public:
 private:
   properties xproperties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~patch (void) { }
+  ~patch (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5318,17 +5318,17 @@ public:
 private:
   properties xproperties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~surface (void) { }
+  ~surface (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5396,17 +5396,17 @@ public:
 private:
   properties xproperties;
 
 public:
   hggroup (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~hggroup (void) { }
+  ~hggroup (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   void update_axis_limits (const std::string& axis_type);
@@ -5470,17 +5470,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uimenu (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uimenu (void) { }
+  ~uimenu (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5636,17 +5636,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uicontrol (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uicontrol (void) { }
+  ~uicontrol (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5722,17 +5722,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uibuttongroup (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uibuttongroup (void) { }
+  ~uibuttongroup (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5798,17 +5798,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uipanel (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uipanel (void) { }
+  ~uipanel (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -5844,17 +5844,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uitoolbar (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   { }
 
-  ~uitoolbar (void) { }
+  ~uitoolbar (void) = default;
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
@@ -5953,17 +5953,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uipushtool (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uipushtool (void) { }
+  ~uipushtool (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -6012,17 +6012,17 @@ public:
 private:
   properties xproperties;
 
 public:
   uitoggletool (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   { }
 
-  ~uitoggletool (void) { }
+  ~uitoggletool (void) = default;
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
   bool has_readonly_property (const caseless_str& pname) const
@@ -6051,17 +6051,17 @@ class graphics_event;
 class
 base_graphics_event
 {
 public:
   friend class graphics_event;
 
   base_graphics_event (void) : count (1) { }
 
-  virtual ~base_graphics_event (void) { }
+  virtual ~base_graphics_event (void) = default;
 
   virtual void execute (void) = 0;
 
 private:
   octave_refcount<int> count;
 };
 
 class
diff --git a/libinterp/corefcn/hook-fcn.h b/libinterp/corefcn/hook-fcn.h
--- a/libinterp/corefcn/hook-fcn.h
+++ b/libinterp/corefcn/hook-fcn.h
@@ -39,17 +39,17 @@ base_hook_function
 public:
 
   friend class hook_function;
 
   base_hook_function (void) : count (1) { }
 
   base_hook_function (const base_hook_function&) : count (1) { }
 
-  virtual ~base_hook_function (void) { }
+  virtual ~base_hook_function (void) = default;
 
   virtual std::string id (void) { return ""; }
 
   virtual bool is_valid (void) { return false; }
 
   virtual void eval (const octave_value_list&) { }
 
 protected:
@@ -194,17 +194,17 @@ public:
 
   typedef std::map<std::string, hook_function> map_type;
 
   typedef map_type::iterator iterator;
   typedef map_type::const_iterator const_iterator;
 
   hook_function_list (void) : fcn_map () { }
 
-  ~hook_function_list (void) { }
+  ~hook_function_list (void) = default;
 
   hook_function_list (const hook_function_list& lst)
     : fcn_map (lst.fcn_map)
   { }
 
   hook_function_list& operator = (const hook_function_list& lst)
   {
     if (&lst != this)
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -96,17 +96,17 @@ public:
   octave_base_reader (octave::base_lexer *lxr)
     : count (1), pflag (0), lexer (lxr)
   { }
 
   octave_base_reader (const octave_base_reader& x)
     : count (1), pflag (x.pflag), lexer (x.lexer)
   { }
 
-  virtual ~octave_base_reader (void) { }
+  virtual ~octave_base_reader (void) = default;
 
   virtual std::string get_input (bool& eof) = 0;
 
   virtual std::string input_source (void) const { return in_src; }
 
   void reset (void) { promptflag (1); }
 
   void increment_promptflag (void) { pflag++; }
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -43,17 +43,17 @@ protected:
 
   load_path (void)
     : loader_map (), default_loader (), dir_info_list (), init_dirs () { }
 
 public:
 
   typedef void (*hook_fcn_ptr) (const std::string& dir);
 
-  ~load_path (void) { }
+  ~load_path (void) = default;
 
   static void initialize (bool set_initial_path = false)
   {
     if (instance_ok ())
       instance->do_initialize (set_initial_path);
   }
 
   static void clear (void)
@@ -317,17 +317,17 @@ private:
         if (this != &ci)
           {
             method_file_map = ci.method_file_map;
             private_file_map = ci.private_file_map;
           }
         return *this;
       }
 
-      ~class_info (void) { }
+      ~class_info (void) = default;
 
       fcn_file_map_type method_file_map;
       fcn_file_map_type private_file_map;
     };
 
     // <CLASS_NAME, CLASS_INFO>
     typedef std::map<std::string, class_info> method_file_map_type;
 
@@ -364,17 +364,17 @@ private:
         is_relative (di.is_relative),
         dir_mtime (di.dir_mtime),
         dir_time_last_checked (di.dir_time_last_checked),
         all_files (di.all_files), fcn_files (di.fcn_files),
         private_file_map (di.private_file_map),
         method_file_map (di.method_file_map),
         package_dir_map (di.package_dir_map) { }
 
-    ~dir_info (void) { }
+    ~dir_info (void) = default;
 
     dir_info& operator = (const dir_info& di)
     {
       if (&di != this)
         {
           dir_name = di.dir_name;
           abs_dir_name = di.abs_dir_name;
           is_relative = di.is_relative;
@@ -426,17 +426,17 @@ private:
   {
   public:
 
     file_info (const std::string& d, int t) : dir_name (d), types (t) { }
 
     file_info (const file_info& fi)
       : dir_name (fi.dir_name), types (fi.types) { }
 
-    ~file_info (void) { }
+    ~file_info (void) = default;
 
     file_info& operator = (const file_info& fi)
     {
       if (&fi != this)
         {
           dir_name = fi.dir_name;
           types = fi.types;
         }
@@ -501,17 +501,17 @@ private:
     loader (const std::string& pfx = "")
       : prefix (pfx), dir_list (), fcn_map (), private_fcn_map (),
         method_map () { }
 
     loader (const loader& l)
       : prefix (l.prefix), dir_list (l.dir_list),
         private_fcn_map (l.private_fcn_map), method_map (l.method_map) { }
 
-    ~loader (void) { }
+    ~loader (void) = default;
 
     loader& operator = (const loader& l)
     {
       if (&l != this)
         {
           prefix = l.prefix;
           dir_list = l.dir_list;
           fcn_map = l.fcn_map;
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -133,17 +133,17 @@ protected:
   mxArray_base (void) { }
 
 public:
 
   virtual mxArray_base *dup (void) const = 0;
 
   virtual mxArray *as_mxArray (void) const { return 0; }
 
-  virtual ~mxArray_base (void) { }
+  virtual ~mxArray_base (void) = default;
 
   virtual bool is_octave_value (void) const { return false; }
 
   virtual int is_cell (void) const = 0;
 
   virtual int is_char (void) const = 0;
 
   virtual int is_class (const char *name_arg) const
diff --git a/libinterp/corefcn/oct-errno.h b/libinterp/corefcn/oct-errno.h
--- a/libinterp/corefcn/oct-errno.h
+++ b/libinterp/corefcn/oct-errno.h
@@ -36,17 +36,17 @@ class
 octave_errno
 {
 protected:
 
   octave_errno (void);
 
 public:
 
-  ~octave_errno (void) { }
+  ~octave_errno (void) = default;
 
   static bool instance_ok (void);
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   static int lookup (const std::string& name);
 
   static octave_scalar_map list (void);
diff --git a/libinterp/corefcn/oct-fstrm.h b/libinterp/corefcn/oct-fstrm.h
--- a/libinterp/corefcn/oct-fstrm.h
+++ b/libinterp/corefcn/oct-fstrm.h
@@ -65,17 +65,17 @@ public:
   std::string name (void) const { return nm; }
 
   std::istream *input_stream (void);
 
   std::ostream *output_stream (void);
 
 protected:
 
-  ~octave_fstream (void) { }
+  ~octave_fstream (void) = default;
 
 private:
 
   std::string nm;
 
   std::fstream fs;
 
   // No copying!
diff --git a/libinterp/corefcn/oct-handle.h b/libinterp/corefcn/oct-handle.h
--- a/libinterp/corefcn/oct-handle.h
+++ b/libinterp/corefcn/oct-handle.h
@@ -64,17 +64,17 @@ public:
   octave_handle& operator = (const octave_handle& a)
   {
     if (&a != this)
       val = a.val;
 
     return *this;
   }
 
-  ~octave_handle (void) { }
+  ~octave_handle (void) = default;
 
   double value (void) const { return val; }
 
   octave_value as_octave_value (void) const
   {
     return ok () ? octave_value (val) : octave_value (Matrix ());
   }
 
diff --git a/libinterp/corefcn/oct-iostrm.h b/libinterp/corefcn/oct-iostrm.h
--- a/libinterp/corefcn/oct-iostrm.h
+++ b/libinterp/corefcn/oct-iostrm.h
@@ -53,17 +53,17 @@ public:
   bool eof (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
 
 protected:
 
-  ~octave_base_iostream (void) { }
+  ~octave_base_iostream (void) = default;
 
   void invalid_operation (void) const;
 
 private:
 
   std::string nm;
 
   virtual const char *stream_type (void) const = 0;
@@ -94,17 +94,17 @@ public:
   bool eof (void) const;
 
   std::istream *input_stream (void) { return is; }
 
   std::ostream *output_stream (void) { return 0; }
 
 protected:
 
-  ~octave_istream (void) { }
+  ~octave_istream (void) = default;
 
 private:
 
   std::istream *is;
 
   const char *stream_type (void) const { return "octave_istream"; }
 
   // No copying!
@@ -133,17 +133,17 @@ public:
   bool eof (void) const;
 
   std::istream *input_stream (void) { return 0; }
 
   std::ostream *output_stream (void) { return os; }
 
 protected:
 
-  ~octave_ostream (void) { }
+  ~octave_ostream (void) = default;
 
 private:
 
   std::ostream *os;
 
   const char *stream_type (void) const { return "octave_ostream"; }
 
   // No copying!
diff --git a/libinterp/corefcn/oct-lvalue.h b/libinterp/corefcn/oct-lvalue.h
--- a/libinterp/corefcn/oct-lvalue.h
+++ b/libinterp/corefcn/oct-lvalue.h
@@ -56,17 +56,17 @@ public:
         type = vr.type;
         idx = vr.idx;
         nel = vr.nel;
       }
 
     return *this;
   }
 
-  ~octave_lvalue (void) { }
+  ~octave_lvalue (void) = default;
 
   bool is_black_hole (void) const { return sym.is_black_hole (); }
 
   bool is_defined (void) const
   {
     return ! is_black_hole () && sym->is_defined ();
   }
 
diff --git a/libinterp/corefcn/oct-stdstrm.h b/libinterp/corefcn/oct-stdstrm.h
--- a/libinterp/corefcn/oct-stdstrm.h
+++ b/libinterp/corefcn/oct-stdstrm.h
@@ -119,17 +119,17 @@ public:
             = octave::mach_info::native_float_format (),
           c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::file_close)
   {
     return octave_stream (new octave_stdiostream (n, f, m, ff, cf));
   }
 
 protected:
 
-  ~octave_stdiostream (void) { }
+  ~octave_stdiostream (void) = default;
 
 private:
 
   // No copying!
 
   octave_stdiostream (const octave_stdiostream&) = delete;
 
   octave_stdiostream& operator = (const octave_stdiostream&) = delete;
@@ -159,17 +159,17 @@ public:
             = octave::mach_info::native_float_format (),
           c_zfile_ptr_buf::close_fcn cf = c_zfile_ptr_buf::file_close)
   {
     return octave_stream (new octave_zstdiostream (n, f, fid, m, ff, cf));
   }
 
 protected:
 
-  ~octave_zstdiostream (void) { }
+  ~octave_zstdiostream (void) = default;
 
 private:
 
   // No copying!
 
   octave_zstdiostream (const octave_zstdiostream&) = delete;
 
   octave_zstdiostream& operator = (const octave_zstdiostream&) = delete;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1796,17 +1796,17 @@ namespace octave
   class
   OCTINTERP_API
   textscan
   {
   public:
 
     textscan (const std::string& who_arg = "textscan");
 
-    ~textscan (void) { }
+    ~textscan (void) = default;
 
     octave_value scan (std::istream& isp, const std::string& fmt,
                        octave_idx_type ntimes,
                        const octave_value_list& options,
                        octave_idx_type& read_count);
 
   private:
 
@@ -5292,17 +5292,17 @@ public:
       {
         octave_value val = values(i);
 
         if (val.is_map () || val.is_cell () || val.is_object ())
           err_wrong_type_arg (who, val);
       }
   }
 
-  ~printf_value_cache (void) { }
+  ~printf_value_cache (void) = default;
 
   // Get the current value as a double and advance the internal pointer.
   octave_value get_next_value (char type = 0);
 
   // Get the current value as an int and advance the internal pointer.
   int int_value (void);
 
   operator bool () const { return (curr_state == ok); }
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -64,17 +64,17 @@ public:
 
   octave_base_stream (std::ios::openmode arg_md = std::ios::in | std::ios::out,
                       octave::mach_info::float_format ff
                         = octave::mach_info::native_float_format ())
     : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true),
       errmsg ()
   { }
 
-  virtual ~octave_base_stream (void) { }
+  virtual ~octave_base_stream (void) = default;
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   virtual int seek (off_t offset, int origin) = 0;
 
@@ -413,17 +413,17 @@ OCTINTERP_API
 octave_stream_list
 {
 protected:
 
   octave_stream_list (void) : list (), lookup_cache (list.end ()) { }
 
 public:
 
-  ~octave_stream_list (void) { }
+  ~octave_stream_list (void) = default;
 
   static bool instance_ok (void);
 
   static int insert (octave_stream& os);
 
   static octave_stream
   lookup (int fid, const std::string& who = "");
 
diff --git a/libinterp/corefcn/oct-strstrm.h b/libinterp/corefcn/oct-strstrm.h
--- a/libinterp/corefcn/oct-strstrm.h
+++ b/libinterp/corefcn/oct-strstrm.h
@@ -55,17 +55,17 @@ public:
   virtual std::streambuf *rdbuf (void) = 0;
 
   virtual bool bad (void) const = 0;
 
   virtual void clear (void) = 0;
 
 protected:
 
-  ~octave_base_strstream (void) { }
+  ~octave_base_strstream (void) = default;
 
 private:
 
   // No copying!
 
   octave_base_strstream (const octave_base_strstream&) = delete;
 
   octave_base_strstream& operator = (const octave_base_strstream&) = delete;
@@ -111,17 +111,17 @@ public:
   std::streambuf *rdbuf (void) { return is ? is.rdbuf () : 0; }
 
   bool bad (void) const { return is.bad (); }
 
   void clear (void) { is.clear (); }
 
 protected:
 
-  ~octave_istrstream (void) { }
+  ~octave_istrstream (void) = default;
 
 private:
 
   std::istringstream is;
 
   // No copying!
 
   octave_istrstream (const octave_istrstream&) = delete;
@@ -157,17 +157,17 @@ public:
   std::streambuf *rdbuf (void) { return os ? os.rdbuf () : 0; }
 
   bool bad (void) const { return os.bad (); }
 
   void clear (void) { os.clear (); }
 
 protected:
 
-  ~octave_ostrstream (void) { }
+  ~octave_ostrstream (void) = default;
 
 private:
 
   std::ostringstream os;
 
   // No copying!
 
   octave_ostrstream (const octave_ostrstream&) = delete;
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -160,17 +160,17 @@ public:
         fmt = ff.fmt;
         up = ff.up;
         sp = ff.sp;
       }
 
     return *this;
   }
 
-  ~float_format (void) { }
+  ~float_format (void) = default;
 
   float_format& scientific (void) { fmt = std::ios::scientific; return *this; }
   float_format& fixed (void) { fmt = std::ios::fixed; return *this; }
   float_format& general (void) { fmt = 0; return *this; }
 
   float_format& uppercase (void) { up = std::ios::uppercase; return *this; }
   float_format& lowercase (void) { up = 0; return *this; }
 
diff --git a/libinterp/corefcn/procstream.h b/libinterp/corefcn/procstream.h
--- a/libinterp/corefcn/procstream.h
+++ b/libinterp/corefcn/procstream.h
@@ -81,17 +81,17 @@ public:
   iprocstream (void) : std::istream (0), procstreambase () { }
 
   iprocstream (const std::string& name, int mode = std::ios::in)
     : std::istream (0), procstreambase (name, mode) { }
 
   iprocstream (const char *name, int mode = std::ios::in)
     : std::istream (0), procstreambase (name, mode) { }
 
-  ~iprocstream (void) { }
+  ~iprocstream (void) = default;
 
   void open (const std::string& name, int mode = std::ios::in)
   { procstreambase::open (name, mode); }
 
   void open (const char *name, int mode = std::ios::in)
   { procstreambase::open (name, mode); }
 
 private:
@@ -111,17 +111,17 @@ public:
   oprocstream (void) : std::ostream (0), procstreambase () { }
 
   oprocstream (const std::string& name, int mode = std::ios::out)
     : std::ostream (0), procstreambase (name, mode) { }
 
   oprocstream (const char *name, int mode = std::ios::out)
     : std::ostream (0), procstreambase (name, mode) { }
 
-  ~oprocstream (void) { }
+  ~oprocstream (void) = default;
 
   void open (const std::string& name, int mode = std::ios::out)
   { procstreambase::open (name, mode); }
 
   void open (const char *name, int mode = std::ios::out)
   { procstreambase::open (name, mode); }
 
 private:
@@ -141,17 +141,17 @@ public:
   procstream (void) : std::iostream (0), procstreambase () { }
 
   procstream (const std::string& name, int mode)
     : std::iostream (0), procstreambase (name, mode) { }
 
   procstream (const char *name, int mode)
     : std::iostream (0), procstreambase (name, mode) { }
 
-  ~procstream (void) { }
+  ~procstream (void) = default;
 
   void open (const std::string& name, int mode)
   { procstreambase::open (name, mode); }
 
   void open (const char *name, int mode)
   { procstreambase::open (name, mode); }
 
 private:
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -85,17 +85,17 @@ namespace octave
 
   class
   base_interrupt_manager
   {
   public:
 
     base_interrupt_manager (void) { }
 
-    virtual ~base_interrupt_manager (void) { }
+    virtual ~base_interrupt_manager (void) = default;
 
     virtual void do_jump_to_enclosing_context (void) = 0;
 
     virtual void do_user_abort (const char *sig_name, int sig_number) = 0;
 
     virtual void do_raise_sigint (void) = 0;
 
   private:
@@ -119,17 +119,17 @@ namespace octave
     {
       thread_id = GetCurrentThreadId ();
 
       DuplicateHandle (GetCurrentProcess (), GetCurrentThread (),
                        GetCurrentProcess (), &thread, 0, FALSE,
                        DUPLICATE_SAME_ACCESS);
     }
 
-    ~w32_interrupt_manager (void) { }
+    ~w32_interrupt_manager (void) = default;
 
     static void jump_to_enclosing_context_sync (void)
     {
 #if defined (_MSC_VER)
       _fpreset ();
 #endif
       ::octave_jump_to_enclosing_context ();
     }
@@ -212,17 +212,17 @@ namespace octave
   posix_interrupt_manager : public base_interrupt_manager
   {
   public:
 
     posix_interrupt_manager (void)
       : base_interrupt_manager ()
     { }
 
-    ~posix_interrupt_manager (void) { }
+    ~posix_interrupt_manager (void) = default;
 
     void do_jump_to_enclosing_context (void)
     {
       ::octave_jump_to_enclosing_context ();
     }
 
     void do_user_abort (const char *sig_name, int sig_number)
     {
@@ -243,17 +243,17 @@ namespace octave
     posix_interrupt_manager& operator = (const posix_interrupt_manager&) = delete;
   };
 
   class
   interrupt_manager
   {
   public:
 
-    ~interrupt_manager (void) { }
+    ~interrupt_manager (void) = default;
 
     static bool init (void) { return instance_ok (); }
 
     static void jump_to_enclosing_context (void)
     {
       if (instance_ok ())
         instance->do_jump_to_enclosing_context ();
     }
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -64,17 +64,17 @@ public:
 
     // We start with 2 because we allocate 0 for the global symbols
     // and 1 for the top-level workspace.
 
     scope_id_cache (void) : next_available (2), in_use (), free_list () { }
 
   public:
 
-    ~scope_id_cache (void) { }
+    ~scope_id_cache (void) = default;
 
     static scope_id alloc (void)
     {
       return instance_ok () ? instance->do_alloc () : -1;
     }
 
     static void free (scope_id scope)
     {
@@ -2288,17 +2288,17 @@ private:
 
   static const context_id xdefault_context = static_cast<context_id> (-1);
 
   symbol_table (scope_id scope)
     : my_scope (scope), table_name (), table (), nest_children (),
       nest_parent (0), curr_fcn (0), static_workspace (false),
       persistent_table () { }
 
-  ~symbol_table (void) { }
+  ~symbol_table (void) = default;
 
   static symbol_table *get_instance (scope_id scope, bool create = true)
   {
     symbol_table *retval = 0;
 
     bool ok = true;
 
     if (scope != xglobal_scope)
diff --git a/libinterp/corefcn/text-renderer.h b/libinterp/corefcn/text-renderer.h
--- a/libinterp/corefcn/text-renderer.h
+++ b/libinterp/corefcn/text-renderer.h
@@ -80,17 +80,17 @@ namespace octave
         : name (nm), weight (wt), angle (ang), size (sz)
       { }
 
       font (const font& ft)
         : name (ft.name), weight (ft.weight), angle (ft.angle),
           size (ft.size)
       { }
 
-      ~font (void) { }
+      ~font (void) = default;
 
       font& operator = (const font& ft)
       {
         if (&ft != this)
           {
             name = ft.name;
             weight = ft.weight;
             angle = ft.angle;
@@ -127,17 +127,17 @@ namespace octave
           color (Matrix (1,3,0.0))
       { }
 
       string (const string& s)
         : str (s.str), fnt (s.fnt), x (s.x), y (s.y), code (s.code),
           color (s.color)
       { }
 
-      ~string (void) { }
+      ~string (void) = default;
 
       string& operator = (const string& s)
       {
         if (&s != this)
           {
             str = s.str;
             fnt = s.fnt;
             x = s.x;
diff --git a/libinterp/corefcn/txt-eng.h b/libinterp/corefcn/txt-eng.h
--- a/libinterp/corefcn/txt-eng.h
+++ b/libinterp/corefcn/txt-eng.h
@@ -48,33 +48,33 @@ class text_processor;
 
 class
 OCTINTERP_API
 text_element
 {
 public:
   text_element (void) { }
 
-  virtual ~text_element (void) { }
+  virtual ~text_element (void) = default;
 
   virtual void accept (text_processor& p) = 0;
 
 private:
   text_element (const text_element&);
 };
 
 class
 OCTINTERP_API
 text_element_string : public text_element
 {
 public:
   text_element_string (const std::string& s = "")
     : text_element (), str (s) { }
 
-  ~text_element_string (void) { }
+  ~text_element_string (void) = default;
 
   std::string string_value (void) const { return str; }
 
   void accept (text_processor& p);
 
 private:
   std::string str;
 
@@ -88,17 +88,17 @@ text_element_symbol : public text_elemen
 {
 public:
   enum { invalid_code = 0xFFFFFFFFU };
 
 public:
   text_element_symbol (int sym)
     : text_element (), symbol (sym) { }
 
-  ~text_element_symbol (void) { }
+  ~text_element_symbol (void) = default;
 
   int get_symbol (void) const { return symbol; }
 
   uint32_t get_symbol_code (void) const;
 
   void accept (text_processor& p);
 
 private:
@@ -209,17 +209,17 @@ public:
     bold,
     italic,
     oblique
   };
 
   text_element_fontstyle (fontstyle st)
     : text_element (), style (st) { }
 
-  ~text_element_fontstyle (void) { }
+  ~text_element_fontstyle (void) = default;
 
   fontstyle get_fontstyle (void) const { return style; }
 
   void accept (text_processor& p);
 
 private:
   fontstyle style;
 
@@ -230,17 +230,17 @@ private:
 class
 OCTINTERP_API
 text_element_fontname : public text_element
 {
 public:
   text_element_fontname (const std::string& fname)
     : text_element (), name (fname) { }
 
-  ~text_element_fontname (void) { }
+  ~text_element_fontname (void) = default;
 
   const std::string& get_fontname (void) const { return name; }
 
   void accept (text_processor& p);
 
 private:
   std::string name;
 
@@ -251,17 +251,17 @@ private:
 class
 OCTINTERP_API
 text_element_fontsize : public text_element
 {
 public:
   text_element_fontsize (double fsize)
     : text_element (), size (fsize) { }
 
-  ~text_element_fontsize (void) { }
+  ~text_element_fontsize (void) = default;
 
   double get_fontsize (void) const { return size; }
 
   void accept (text_processor& p);
 
 private:
   double size;
 
@@ -295,17 +295,17 @@ public:
                 else if (cname == "white") ASSIGN_COLOR(1, 1, 1)
                   else if (cname == "gray") ASSIGN_COLOR(.5, .5, .5)
                     else if (cname == "darkGreen") ASSIGN_COLOR(0, .5, 0)
                       else if (cname == "orange") ASSIGN_COLOR(1, .65, 0)
                         else if (cname == "lightBlue") ASSIGN_COLOR(0.68, .85, .9)
 #undef ASSIGN_COLOR
   }
 
-  ~text_element_color (void) { }
+  ~text_element_color (void) = default;
 
   Matrix get_color (void) { return rgb; }
 
   void accept (text_processor& p);
 
 private:
   Matrix rgb;
 };
@@ -343,17 +343,17 @@ public:
 
   virtual void visit (text_element_color&) { }
 
   virtual void reset (void) { }
 
 protected:
   text_processor (void) { }
 
-  virtual ~text_processor (void) { }
+  virtual ~text_processor (void) = default;
 };
 
 #define TEXT_ELEMENT_ACCEPT(cls)                \
   inline void                                   \
   cls::accept (text_processor& p)               \
   {                                             \
     p.visit (*this);                            \
   }
@@ -371,33 +371,33 @@ TEXT_ELEMENT_ACCEPT(text_element_color)
 
 class
 OCTINTERP_API
 text_parser
 {
 public:
   text_parser (void) { }
 
-  virtual ~text_parser (void) { }
+  virtual ~text_parser (void) = default;
 
   virtual text_element* parse (const std::string& s) = 0;
 
 public:
   static text_element* parse (const std::string& s,
                               const caseless_str& interpreter);
 };
 
 class
 OCTINTERP_API
 text_parser_none : public text_parser
 {
 public:
   text_parser_none (void) : text_parser () { }
 
-  ~text_parser_none (void) { }
+  ~text_parser_none (void) = default;
 
   // FIXME: is it possible to use reference counting to manage the
   // memory for the object returned by the text parser?  That would be
   // preferable to having to know when and where to delete the object it
   // creates...
 
   text_element* parse (const std::string& s)
   {
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1299,17 +1299,17 @@ public:
   symbol_info_list& operator = (const symbol_info_list& sil)
   {
     if (this != &sil)
       lst = sil.lst;
 
     return *this;
   }
 
-  ~symbol_info_list (void) { }
+  ~symbol_info_list (void) = default;
 
   void append (const symbol_table::symbol_record& sr)
   {
     lst.push_back (symbol_info (sr));
   }
 
   void append (const symbol_table::symbol_record& sr,
                const std::string& expr_str,
diff --git a/libinterp/corefcn/workspace-element.h b/libinterp/corefcn/workspace-element.h
--- a/libinterp/corefcn/workspace-element.h
+++ b/libinterp/corefcn/workspace-element.h
@@ -58,17 +58,17 @@ public:
         xvalue = ws_elt.xvalue;
         xdimension = ws_elt.xdimension;
         xcomplex_flag = ws_elt.xcomplex_flag;
       }
 
     return *this;
   }
 
-  ~workspace_element (void) { }
+  ~workspace_element (void) = default;
 
   char scope (void) const { return xscope; }
 
   std::string symbol (void) const { return xsymbol; }
 
   std::string class_name (void) const { return xclass_name; }
 
   std::string value (void) const { return xvalue; }
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -118,17 +118,17 @@ public:
 #if defined (HAVE_OPENGL)
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE | FL_MULTISAMPLE);
 #else
     err_disabled_feature ("OpenGL_fltk", "OpenGL");
 #endif
   }
 
-  ~OpenGL_fltk (void) { }
+  ~OpenGL_fltk (void) = default;
 
   void zoom (bool z)
   {
     in_zoom = z;
     if (! in_zoom)
       hide_overlay ();
   }
 
@@ -2186,17 +2186,17 @@ class fltk_graphics_toolkit : public bas
 public:
   fltk_graphics_toolkit (void)
     : base_graphics_toolkit (FLTK_GRAPHICS_TOOLKIT_NAME),
       input_event_hook_fcn_id ()
   {
     Fl::visual (FL_RGB);
   }
 
-  ~fltk_graphics_toolkit (void) { }
+  ~fltk_graphics_toolkit (void) = default;
 
   bool is_valid (void) const { return true; }
 
   bool initialize (const graphics_object& go)
   {
     if (go.isa ("figure")
         || go.isa ("uimenu"))
       {
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -49,17 +49,17 @@ To initialize:
 static bool toolkit_loaded = false;
 
 class gnuplot_graphics_toolkit : public base_graphics_toolkit
 {
 public:
   gnuplot_graphics_toolkit (void)
     : base_graphics_toolkit ("gnuplot") { }
 
-  ~gnuplot_graphics_toolkit (void) { }
+  ~gnuplot_graphics_toolkit (void) = default;
 
   bool is_valid (void) const { return true; }
 
   bool initialize (const graphics_object& go)
   {
     return go.isa ("figure");
   }
 
diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -53,17 +53,17 @@ public:
 
   octave_base_diag (const DMT& m)
     : octave_base_value (), matrix (m), dense_cache ()
   { }
 
   octave_base_diag (const octave_base_diag& m)
     : octave_base_value (), matrix (m.matrix), dense_cache () { }
 
-  ~octave_base_diag (void) { }
+  ~octave_base_diag (void) = default;
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix; }
 
   octave_value full_value (void) const { return to_dense (); }
 
   octave_value subsref (const std::string& type,
diff --git a/libinterp/octave-value/ov-base-int.h b/libinterp/octave-value/ov-base-int.h
--- a/libinterp/octave-value/ov-base-int.h
+++ b/libinterp/octave-value/ov-base-int.h
@@ -46,17 +46,17 @@ class
 octave_base_int_matrix : public octave_base_matrix<T>
 {
 public:
 
   octave_base_int_matrix (void) : octave_base_matrix<T> () { }
 
   octave_base_int_matrix (const T& nda) : octave_base_matrix<T> (nda) { }
 
-  ~octave_base_int_matrix (void) { }
+  ~octave_base_int_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_base_int_matrix (*this); }
 
   octave_base_value *empty_clone (void) const
   { return new octave_base_int_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
@@ -105,17 +105,17 @@ class
 octave_base_int_scalar : public octave_base_scalar<T>
 {
 public:
 
   octave_base_int_scalar (void) : octave_base_scalar<T> () { }
 
   octave_base_int_scalar (const T& s) : octave_base_scalar<T> (s) { }
 
-  ~octave_base_int_scalar (void) { }
+  ~octave_base_int_scalar (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_base_int_scalar (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_base_int_scalar (); }
 
   octave_base_value *try_narrowing_conversion (void) { return 0; }
 
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -50,17 +50,17 @@ public:
     : octave_base_value (), scalar () { }
 
   octave_base_scalar (const ST& s)
     : octave_base_value (), scalar (s) { }
 
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
-  ~octave_base_scalar (void) { }
+  ~octave_base_scalar (void) = default;
 
   octave_value squeeze (void) const { return scalar; }
 
   octave_value full_value (void) const { return scalar; }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx);
 
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -67,17 +67,17 @@ public:
   {
     if (matrix.ndims () == 0)
       matrix.resize (dim_vector (0, 0));
   }
 
   octave_base_sparse (const octave_base_sparse& a)
     : octave_base_value (), matrix (a.matrix), typ (a.typ) { }
 
-  ~octave_base_sparse (void) { }
+  ~octave_base_sparse (void) = default;
 
   octave_idx_type numel (void) const { return dims ().safe_numel (); }
 
   octave_idx_type nnz (void) const { return matrix.nnz (); }
 
   octave_idx_type nzmax (void) const { return matrix.nzmax (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -209,17 +209,17 @@ public:
   };
 
   friend class octave_value;
 
   octave_base_value (void) : count (1) { }
 
   octave_base_value (const octave_base_value&) : count (1) { }
 
-  virtual ~octave_base_value (void) { }
+  virtual ~octave_base_value (void) = default;
 
   // Unconditional clone.  Always clones.
   virtual octave_base_value *
   clone (void) const { return new octave_base_value (*this); }
 
   // Empty clone.
   virtual octave_base_value *
   empty_clone (void) const;
diff --git a/libinterp/octave-value/ov-bool-mat.h b/libinterp/octave-value/ov-bool-mat.h
--- a/libinterp/octave-value/ov-bool-mat.h
+++ b/libinterp/octave-value/ov-bool-mat.h
@@ -72,17 +72,17 @@ public:
     : octave_base_matrix<boolNDArray> (bm)
   {
     set_idx_cache (cache);
   }
 
   octave_bool_matrix (const octave_bool_matrix& bm)
     : octave_base_matrix<boolNDArray> (bm) { }
 
-  ~octave_bool_matrix (void) { }
+  ~octave_bool_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_bool_matrix (*this); }
 
   octave_base_value *empty_clone (void) const
   { return new octave_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
diff --git a/libinterp/octave-value/ov-bool-sparse.h b/libinterp/octave-value/ov-bool-sparse.h
--- a/libinterp/octave-value/ov-bool-sparse.h
+++ b/libinterp/octave-value/ov-bool-sparse.h
@@ -70,17 +70,17 @@ public:
     : octave_base_sparse<SparseBoolMatrix> (SparseBoolMatrix (m)) { }
 
   octave_sparse_bool_matrix (const Sparse<bool>& a)
     : octave_base_sparse<SparseBoolMatrix> (a) { }
 
   octave_sparse_bool_matrix (const octave_sparse_bool_matrix& bm)
     : octave_base_sparse<SparseBoolMatrix> (bm) { }
 
-  ~octave_sparse_bool_matrix (void) { }
+  ~octave_sparse_bool_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_sparse_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_sparse_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -57,17 +57,17 @@ public:
     : octave_base_scalar<bool> (false) { }
 
   octave_bool (bool b)
     : octave_base_scalar<bool> (b) { }
 
   octave_bool (const octave_bool& s)
     : octave_base_scalar<bool> (s) { }
 
-  ~octave_bool (void) { }
+  ~octave_bool (void) = default;
 
   octave_base_value *clone (void) const { return new octave_bool (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_bool_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -49,17 +49,17 @@ public:
   octave_builtin (fcn ff, const std::string& nm = "",
                   const std::string& ds = "")
     : octave_function (nm, ds), f (ff), file (), jtype (0) { }
 
   octave_builtin (fcn ff, const std::string& nm, const std::string& fnm,
                   const std::string& ds)
     : octave_function (nm, ds), f (ff), file (fnm), jtype (0) { }
 
-  ~octave_builtin (void) { }
+  ~octave_builtin (void) = default;
 
   std::string src_file_name (void) const { return file; }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
   {
     octave_value_list tmp = subsref (type, idx, 1);
     return tmp.length () > 0 ? tmp(0) : octave_value ();
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -59,17 +59,17 @@ public:
 
   octave_cell (const Array<std::string>& str)
     : octave_base_matrix<Cell> (Cell (str)),
       cellstr_cache (new Array<std::string> (str)) { }
 
   octave_cell (const octave_cell& c)
     : octave_base_matrix<Cell> (c), cellstr_cache () { }
 
-  ~octave_cell (void) { }
+  ~octave_cell (void) = default;
 
   octave_base_value *clone (void) const { return new octave_cell (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_base_value *try_narrowing_conversion (void);
 #endif
 
diff --git a/libinterp/octave-value/ov-ch-mat.h b/libinterp/octave-value/ov-ch-mat.h
--- a/libinterp/octave-value/ov-ch-mat.h
+++ b/libinterp/octave-value/ov-ch-mat.h
@@ -77,17 +77,17 @@ protected:
   octave_char_matrix (const string_vector& s)
     : octave_base_matrix<charNDArray> (s) { }
 
   octave_char_matrix (const octave_char_matrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
 public:
 
-  ~octave_char_matrix (void) { }
+  ~octave_char_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_char_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_char_matrix (); }
 
   idx_vector index_vector (bool require_integers = false) const;
 
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -63,17 +63,17 @@ public:
 
   octave_class (const octave_map& m, const std::string& id,
                 const octave_value_list& parents);
 
   octave_class (const octave_class& s)
     : octave_base_value (s), map (s.map), c_name (s.c_name),
       parent_list (s.parent_list), obsolete_copies (0)  { }
 
-  ~octave_class (void) { }
+  ~octave_class (void) = default;
 
   octave_base_value *clone (void) const { return new octave_class (*this); }
 
   octave_base_value *unique_clone (void);
 
   octave_base_value *empty_clone (void) const
   {
     return new octave_class (octave_map (map.keys ()), c_name, parent_list);
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1092,17 +1092,17 @@ private:
 //----------------------------------------------------------------------------
 
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
   octave_classdef_superclass_ref (const octave_value_list& a)
     : octave_function (), args (a) { }
 
-  ~octave_classdef_superclass_ref (void) { }
+  ~octave_classdef_superclass_ref (void) = default;
 
   octave_function* function_value (bool = false) { return this; }
 
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
   {
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -49,17 +49,17 @@ class
 cdef_object_rep
 {
 public:
   friend class cdef_object;
 
 public:
   cdef_object_rep (void) : refcount (1) { }
 
-  virtual ~cdef_object_rep (void) { }
+  virtual ~cdef_object_rep (void) = default;
 
   virtual cdef_class get_class (void) const;
 
   virtual void set_class (const cdef_class&)
   { err_invalid_object ("set_class"); }
 
   virtual cdef_object_rep* clone (void) const
   {
@@ -393,17 +393,17 @@ private:
 };
 
 class
 cdef_object_scalar : public cdef_object_base
 {
 public:
   cdef_object_scalar (void) : cdef_object_base () { }
 
-  ~cdef_object_scalar (void) { }
+  ~cdef_object_scalar (void) = default;
 
   dim_vector dims (void) const { return dim_vector (1, 1); }
 
   void put (const std::string& pname, const octave_value& val)
   { map.assign (pname, val); }
 
   octave_value get (const std::string& pname) const
   {
@@ -515,17 +515,17 @@ private:
 
 class
 cdef_meta_object_rep : public handle_cdef_object
 {
 public:
   cdef_meta_object_rep (void)
     : handle_cdef_object () { }
 
-  ~cdef_meta_object_rep (void) { }
+  ~cdef_meta_object_rep (void) = default;
 
   cdef_object_rep* copy (void) const
   { return new cdef_meta_object_rep (*this); }
 
   bool is_meta_object (void) const { return true; }
 
   virtual bool is_class (void) const { return false; }
 
@@ -570,17 +570,17 @@ public:
 
   cdef_meta_object (cdef_meta_object_rep *r)
     : cdef_object (r) { }
 
   // Object consistency is checked in sub-classes.
   cdef_meta_object (const cdef_object& obj)
     : cdef_object (obj) { }
 
-  ~cdef_meta_object (void) { }
+  ~cdef_meta_object (void) = default;
 
   bool is_class (void) const { return get_rep ()->is_class (); }
 
   bool is_property (void) const { return get_rep ()->is_property (); }
 
   bool is_method (void) const { return get_rep ()->is_method (); }
 
   bool is_package (void) const { return get_rep ()->is_package (); }
@@ -1244,17 +1244,17 @@ private:
 
   class
   cdef_package_rep : public cdef_meta_object_rep
   {
   public:
     cdef_package_rep (void)
       : cdef_meta_object_rep (), member_count (0) { }
 
-    ~cdef_package_rep (void) { }
+    ~cdef_package_rep (void) = default;
 
     cdef_object_rep* copy (void) const { return new cdef_package_rep (*this); }
 
     bool is_package (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -1594,17 +1594,17 @@ public:
 private:
 
   cdef_manager (void) { }
 
   cdef_manager (const cdef_manager&);
 
   cdef_manager& operator = (const cdef_manager&);
 
-  ~cdef_manager (void) { }
+  ~cdef_manager (void) = default;
 
   static void create_instance (void);
 
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
diff --git a/libinterp/octave-value/ov-colon.h b/libinterp/octave-value/ov-colon.h
--- a/libinterp/octave-value/ov-colon.h
+++ b/libinterp/octave-value/ov-colon.h
@@ -49,17 +49,17 @@ octave_magic_colon : public octave_base_
 public:
 
   octave_magic_colon (void)
     : octave_base_value () { }
 
   octave_magic_colon (const octave_magic_colon&)
     : octave_base_value () { }
 
-  ~octave_magic_colon (void) { }
+  ~octave_magic_colon (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_magic_colon (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_magic_colon (); }
 
   idx_vector index_vector (bool /* require_integers */ = false) const { return idx_vector (':'); }
 
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -67,17 +67,17 @@ namespace octave
 
   class complex_index_exception : public index_exception
   {
   public:
 
     complex_index_exception (const std::string& value)
       : index_exception (value) { }
 
-    ~complex_index_exception (void) { }
+    ~complex_index_exception (void) = default;
 
     std::string details (void) const
     {
       return "subscripts must be real (forgot to initialize i or j?)";
     }
 
     // ID of error to throw.
     const char *err_id (void) const
diff --git a/libinterp/octave-value/ov-complex.h b/libinterp/octave-value/ov-complex.h
--- a/libinterp/octave-value/ov-complex.h
+++ b/libinterp/octave-value/ov-complex.h
@@ -57,17 +57,17 @@ public:
     : octave_base_scalar<Complex> () { }
 
   octave_complex (const Complex& c)
     : octave_base_scalar<Complex> (c) { }
 
   octave_complex (const octave_complex& c)
     : octave_base_scalar<Complex> (c) { }
 
-  ~octave_complex (void) { }
+  ~octave_complex (void) = default;
 
   octave_base_value *clone (void) const { return new octave_complex (*this); }
 
   // We return an octave_complex_matrix object here instead of an
   // octave_complex object so that in expressions like A(2,2,2) = 2
   // (for A previously undefined), A will be empty instead of a 1x1
   // object.
   octave_base_value *empty_clone (void) const
diff --git a/libinterp/octave-value/ov-cs-list.h b/libinterp/octave-value/ov-cs-list.h
--- a/libinterp/octave-value/ov-cs-list.h
+++ b/libinterp/octave-value/ov-cs-list.h
@@ -53,17 +53,17 @@ public:
   octave_cs_list (const octave_value_list& l)
     : octave_base_value (), lst (l) { }
 
   octave_cs_list (const Cell& c);
 
   octave_cs_list (const octave_cs_list& l)
     : octave_base_value (), lst (l.lst) { }
 
-  ~octave_cs_list (void) { }
+  ~octave_cs_list (void) = default;
 
   octave_base_value *clone (void) const { return new octave_cs_list (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cs_list (); }
 
   dim_vector dims (void) const { return dim_vector (1, lst.length ()); }
 
   bool is_defined (void) const { return true; }
 
diff --git a/libinterp/octave-value/ov-cx-diag.h b/libinterp/octave-value/ov-cx-diag.h
--- a/libinterp/octave-value/ov-cx-diag.h
+++ b/libinterp/octave-value/ov-cx-diag.h
@@ -43,17 +43,17 @@ public:
     : octave_base_diag<ComplexDiagMatrix, ComplexMatrix> () { }
 
   octave_complex_diag_matrix (const ComplexDiagMatrix& m)
     : octave_base_diag<ComplexDiagMatrix, ComplexMatrix> (m) { }
 
   octave_complex_diag_matrix (const octave_complex_diag_matrix& m)
     : octave_base_diag<ComplexDiagMatrix, ComplexMatrix> (m) { }
 
-  ~octave_complex_diag_matrix (void) { }
+  ~octave_complex_diag_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_complex_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_complex_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-cx-mat.h b/libinterp/octave-value/ov-cx-mat.h
--- a/libinterp/octave-value/ov-cx-mat.h
+++ b/libinterp/octave-value/ov-cx-mat.h
@@ -76,17 +76,17 @@ public:
     : octave_base_matrix<ComplexNDArray> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const ComplexColumnVector& v)
     : octave_base_matrix<ComplexNDArray> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const octave_complex_matrix& cm)
     : octave_base_matrix<ComplexNDArray> (cm) { }
 
-  ~octave_complex_matrix (void) { }
+  ~octave_complex_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_complex_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-cx-sparse.h b/libinterp/octave-value/ov-cx-sparse.h
--- a/libinterp/octave-value/ov-cx-sparse.h
+++ b/libinterp/octave-value/ov-cx-sparse.h
@@ -81,17 +81,17 @@ public:
     : octave_base_sparse<SparseComplexMatrix> (SparseComplexMatrix (m), t) { }
 
   octave_sparse_complex_matrix (const Sparse<Complex>& m)
     : octave_base_sparse<SparseComplexMatrix> (SparseComplexMatrix (m)) { }
 
   octave_sparse_complex_matrix (const octave_sparse_complex_matrix& cm)
     : octave_base_sparse<SparseComplexMatrix> (cm) { }
 
-  ~octave_sparse_complex_matrix (void) { }
+  ~octave_sparse_complex_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_sparse_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_sparse_complex_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -62,17 +62,17 @@ public:
       has_overloads (fh.has_overloads), overloads ()
   {
     for (int i = 0; i < btyp_num_types; i++)
       builtin_overloads[i] = fh.builtin_overloads[i];
 
     overloads = fh.overloads;
   }
 
-  ~octave_fcn_handle (void) { }
+  ~octave_fcn_handle (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_fcn_handle (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_fcn_handle (); }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
diff --git a/libinterp/octave-value/ov-fcn-inline.h b/libinterp/octave-value/ov-fcn-inline.h
--- a/libinterp/octave-value/ov-fcn-inline.h
+++ b/libinterp/octave-value/ov-fcn-inline.h
@@ -47,17 +47,17 @@ public:
     : octave_fcn_handle (), iftext (), ifargs () { }
 
   octave_fcn_inline (const std::string& f, const string_vector& a,
                      const std::string& n = "");
 
   octave_fcn_inline (const octave_fcn_inline& fi)
     : octave_fcn_handle (fi), iftext (fi.iftext), ifargs (fi.ifargs) { }
 
-  ~octave_fcn_inline (void) { }
+  ~octave_fcn_inline (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_fcn_inline (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_fcn_inline (); }
 
   bool is_inline_function (void) const { return true; }
 
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -45,17 +45,17 @@ octave_function : public octave_base_val
 {
 public:
 
   octave_function (void)
     : relative (false), locked (false), private_function (false),
       xdispatch_class (), xpackage_name (), my_name (), my_dir_name (),
       doc () { }
 
-  ~octave_function (void) { }
+  ~octave_function (void) = default;
 
   octave_base_value *clone (void) const;
   octave_base_value *empty_clone (void) const;
 
   bool is_defined (void) const { return true; }
 
   bool is_function (void) const { return true; }
 
diff --git a/libinterp/octave-value/ov-float.h b/libinterp/octave-value/ov-float.h
--- a/libinterp/octave-value/ov-float.h
+++ b/libinterp/octave-value/ov-float.h
@@ -59,17 +59,17 @@ public:
     : octave_base_scalar<float> (0.0) { }
 
   octave_float_scalar (float d)
     : octave_base_scalar<float> (d) { }
 
   octave_float_scalar (const octave_float_scalar& s)
     : octave_base_scalar<float> (s) { }
 
-  ~octave_float_scalar (void) { }
+  ~octave_float_scalar (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_scalar (*this); }
 
   // We return an octave_matrix here instead of an octave_float_scalar so
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
   octave_base_value *empty_clone (void) const
diff --git a/libinterp/octave-value/ov-flt-complex.h b/libinterp/octave-value/ov-flt-complex.h
--- a/libinterp/octave-value/ov-flt-complex.h
+++ b/libinterp/octave-value/ov-flt-complex.h
@@ -57,17 +57,17 @@ public:
     : octave_base_scalar<FloatComplex> () { }
 
   octave_float_complex (const FloatComplex& c)
     : octave_base_scalar<FloatComplex> (c) { }
 
   octave_float_complex (const octave_float_complex& c)
     : octave_base_scalar<FloatComplex> (c) { }
 
-  ~octave_float_complex (void) { }
+  ~octave_float_complex (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_complex (*this); }
 
   // We return an octave_float_complex_matrix object here instead of an
   // octave_float_complex object so that in expressions like A(2,2,2) = 2
   // (for A previously undefined), A will be empty instead of a 1x1
   // object.
diff --git a/libinterp/octave-value/ov-flt-cx-diag.h b/libinterp/octave-value/ov-flt-cx-diag.h
--- a/libinterp/octave-value/ov-flt-cx-diag.h
+++ b/libinterp/octave-value/ov-flt-cx-diag.h
@@ -43,17 +43,17 @@ public:
     : octave_base_diag<FloatComplexDiagMatrix, FloatComplexMatrix> () { }
 
   octave_float_complex_diag_matrix (const FloatComplexDiagMatrix& m)
     : octave_base_diag<FloatComplexDiagMatrix, FloatComplexMatrix> (m) { }
 
   octave_float_complex_diag_matrix (const octave_float_complex_diag_matrix& m)
     : octave_base_diag<FloatComplexDiagMatrix, FloatComplexMatrix> (m) { }
 
-  ~octave_float_complex_diag_matrix (void) { }
+  ~octave_float_complex_diag_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_complex_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_float_complex_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-flt-cx-mat.h b/libinterp/octave-value/ov-flt-cx-mat.h
--- a/libinterp/octave-value/ov-flt-cx-mat.h
+++ b/libinterp/octave-value/ov-flt-cx-mat.h
@@ -76,17 +76,17 @@ public:
     : octave_base_matrix<FloatComplexNDArray> (FloatComplexMatrix (v)) { }
 
   octave_float_complex_matrix (const FloatComplexColumnVector& v)
     : octave_base_matrix<FloatComplexNDArray> (FloatComplexMatrix (v)) { }
 
   octave_float_complex_matrix (const octave_float_complex_matrix& cm)
     : octave_base_matrix<FloatComplexNDArray> (cm) { }
 
-  ~octave_float_complex_matrix (void) { }
+  ~octave_float_complex_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_float_complex_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/libinterp/octave-value/ov-flt-re-diag.h b/libinterp/octave-value/ov-flt-re-diag.h
--- a/libinterp/octave-value/ov-flt-re-diag.h
+++ b/libinterp/octave-value/ov-flt-re-diag.h
@@ -43,17 +43,17 @@ public:
     : octave_base_diag<FloatDiagMatrix, FloatMatrix> () { }
 
   octave_float_diag_matrix (const FloatDiagMatrix& m)
     : octave_base_diag<FloatDiagMatrix, FloatMatrix> (m) { }
 
   octave_float_diag_matrix (const octave_float_diag_matrix& m)
     : octave_base_diag<FloatDiagMatrix, FloatMatrix> (m) { }
 
-  ~octave_float_diag_matrix (void) { }
+  ~octave_float_diag_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_float_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-flt-re-mat.h b/libinterp/octave-value/ov-flt-re-mat.h
--- a/libinterp/octave-value/ov-flt-re-mat.h
+++ b/libinterp/octave-value/ov-flt-re-mat.h
@@ -76,17 +76,17 @@ public:
     : octave_base_matrix<FloatNDArray> (FloatMatrix (v)) { }
 
   octave_float_matrix (const FloatColumnVector& v)
     : octave_base_matrix<FloatNDArray> (FloatMatrix (v)) { }
 
   octave_float_matrix (const octave_float_matrix& m)
     : octave_base_matrix<FloatNDArray> (m) { }
 
-  ~octave_float_matrix (void) { }
+  ~octave_float_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_float_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_float_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -59,17 +59,17 @@ public:
 
   OCTAVE_VALUE_INT_MATRIX_T (const intNDArray<OCTAVE_INT_T>& nda)
     : octave_base_int_matrix<intNDArray<OCTAVE_INT_T> > (nda) { }
 
   OCTAVE_VALUE_INT_MATRIX_T (const Array<OCTAVE_INT_T>& nda)
     : octave_base_int_matrix<intNDArray<OCTAVE_INT_T> >
         (intNDArray<OCTAVE_INT_T> (nda)) { }
 
-  ~OCTAVE_VALUE_INT_MATRIX_T (void) { }
+  ~OCTAVE_VALUE_INT_MATRIX_T (void) = default;
 
   octave_base_value *clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_base_value *empty_clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
@@ -382,17 +382,17 @@ OCTAVE_VALUE_INT_SCALAR_T
 public:
 
   OCTAVE_VALUE_INT_SCALAR_T (void)
     : octave_base_int_scalar<OCTAVE_INT_T> () { }
 
   OCTAVE_VALUE_INT_SCALAR_T (const OCTAVE_INT_T& nda)
     : octave_base_int_scalar<OCTAVE_INT_T> (nda) { }
 
-  ~OCTAVE_VALUE_INT_SCALAR_T (void) { }
+  ~OCTAVE_VALUE_INT_SCALAR_T (void) = default;
 
   octave_base_value *clone (void) const
   { return new OCTAVE_VALUE_INT_SCALAR_T (*this); }
 
   octave_base_value *empty_clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   octave_value do_index_op (const octave_value_list& idx,
diff --git a/libinterp/octave-value/ov-lazy-idx.h b/libinterp/octave-value/ov-lazy-idx.h
--- a/libinterp/octave-value/ov-lazy-idx.h
+++ b/libinterp/octave-value/ov-lazy-idx.h
@@ -40,17 +40,17 @@ public:
     : octave_base_value (), index (), value () { }
 
   octave_lazy_index (const idx_vector& idx)
     : octave_base_value (), index (idx), value () { }
 
   octave_lazy_index (const octave_lazy_index& i)
     : octave_base_value (), index (i.index), value (i.value) { }
 
-  ~octave_lazy_index (void) { }
+  ~octave_lazy_index (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_lazy_index (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
diff --git a/libinterp/octave-value/ov-re-diag.h b/libinterp/octave-value/ov-re-diag.h
--- a/libinterp/octave-value/ov-re-diag.h
+++ b/libinterp/octave-value/ov-re-diag.h
@@ -43,17 +43,17 @@ public:
     : octave_base_diag<DiagMatrix, Matrix> () { }
 
   octave_diag_matrix (const DiagMatrix& m)
     : octave_base_diag<DiagMatrix, Matrix> (m) { }
 
   octave_diag_matrix (const octave_diag_matrix& m)
     : octave_base_diag<DiagMatrix, Matrix> (m) { }
 
-  ~octave_diag_matrix (void) { }
+  ~octave_diag_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
diff --git a/libinterp/octave-value/ov-re-mat.h b/libinterp/octave-value/ov-re-mat.h
--- a/libinterp/octave-value/ov-re-mat.h
+++ b/libinterp/octave-value/ov-re-mat.h
@@ -91,17 +91,17 @@ public:
   }
 
   octave_matrix (const NDArray& nda, const idx_vector& cache)
     : octave_base_matrix<NDArray> (nda)
   {
     set_idx_cache (cache);
   }
 
-  ~octave_matrix (void) { }
+  ~octave_matrix (void) = default;
 
   octave_base_value *clone (void) const { return new octave_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/libinterp/octave-value/ov-re-sparse.h b/libinterp/octave-value/ov-re-sparse.h
--- a/libinterp/octave-value/ov-re-sparse.h
+++ b/libinterp/octave-value/ov-re-sparse.h
@@ -79,17 +79,17 @@ public:
     : octave_base_sparse<SparseMatrix> (SparseMatrix (m)) { }
 
   octave_sparse_matrix (const Sparse<double>& m, const MatrixType& t)
     : octave_base_sparse<SparseMatrix> (SparseMatrix (m), t) { }
 
   octave_sparse_matrix (const octave_sparse_matrix& m)
     : octave_base_sparse<SparseMatrix> (m) { }
 
-  ~octave_sparse_matrix (void) { }
+  ~octave_sparse_matrix (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_sparse_matrix (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_sparse_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -58,17 +58,17 @@ public:
     : octave_base_scalar<double> (0.0) { }
 
   octave_scalar (double d)
     : octave_base_scalar<double> (d) { }
 
   octave_scalar (const octave_scalar& s)
     : octave_base_scalar<double> (s) { }
 
-  ~octave_scalar (void) { }
+  ~octave_scalar (void) = default;
 
   octave_base_value *clone (void) const { return new octave_scalar (*this); }
 
   // We return an octave_matrix here instead of an octave_scalar so
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -79,17 +79,17 @@ public:
     : octave_char_matrix (s) { }
 
   octave_char_matrix_str (const octave_char_matrix& chm)
     : octave_char_matrix (chm) { }
 
   octave_char_matrix_str (const octave_char_matrix_str& chms)
     : octave_char_matrix (chms) { }
 
-  ~octave_char_matrix_str (void) { }
+  ~octave_char_matrix_str (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_char_matrix_str (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_char_matrix_str (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
@@ -208,17 +208,17 @@ public:
     : octave_char_matrix_str (s) { }
 
   octave_char_matrix_sq_str (const octave_char_matrix_str& chm)
     : octave_char_matrix_str (chm) { }
 
   octave_char_matrix_sq_str (const octave_char_matrix_sq_str& chms)
     : octave_char_matrix_str (chms) { }
 
-  ~octave_char_matrix_sq_str (void) { }
+  ~octave_char_matrix_sq_str (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_char_matrix_sq_str (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_char_matrix_sq_str (); }
 
   octave_value squeeze (void) const
   { return octave_value (charNDArray (matrix.squeeze ()), '\''); }
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -53,17 +53,17 @@ public:
     : octave_base_value (), map () { }
 
   octave_struct (const octave_map& m)
     : octave_base_value (), map (m) { }
 
   octave_struct (const octave_struct& s)
     : octave_base_value (), map (s.map) { }
 
-  ~octave_struct (void) { }
+  ~octave_struct (void) = default;
 
   octave_base_value *clone (void) const { return new octave_struct (*this); }
   octave_base_value *empty_clone (void) const { return new octave_struct (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
   Cell dotref (const octave_value_list& idx, bool auto_add = false);
 
@@ -173,17 +173,17 @@ public:
     : octave_base_value (), map () { }
 
   octave_scalar_struct (const octave_scalar_map& m)
     : octave_base_value (), map (m) { }
 
   octave_scalar_struct (const octave_scalar_struct& s)
     : octave_base_value (), map (s.map) { }
 
-  ~octave_scalar_struct (void) { }
+  ~octave_scalar_struct (void) = default;
 
   octave_base_value *clone (void) const
   { return new octave_scalar_struct (*this); }
   octave_base_value *empty_clone (void) const
   { return new octave_scalar_struct (); }
 
   octave_value dotref (const octave_value_list& idx, bool auto_add = false);
 
diff --git a/libinterp/octave-value/ov-typeinfo.h b/libinterp/octave-value/ov-typeinfo.h
--- a/libinterp/octave-value/ov-typeinfo.h
+++ b/libinterp/octave-value/ov-typeinfo.h
@@ -201,17 +201,17 @@ protected:
       compound_binary_class_ops (dim_vector (octave_value::num_compound_binary_ops, 1), 0),
       compound_binary_ops (dim_vector (octave_value::num_compound_binary_ops, init_tab_sz, init_tab_sz), 0),
       cat_ops (dim_vector (init_tab_sz, init_tab_sz), 0),
       assign_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz, init_tab_sz), 0),
       assignany_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz), 0),
       pref_assign_conv (dim_vector (init_tab_sz, init_tab_sz), -1),
       widening_ops (dim_vector (init_tab_sz, init_tab_sz), 0)  { }
 
-  ~octave_value_typeinfo (void) { }
+  ~octave_value_typeinfo (void) = default;
 
 private:
 
   static const int init_tab_sz;
 
   static octave_value_typeinfo *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -52,17 +52,17 @@ class jit_function_info;
 
 class
 octave_user_code : public octave_function
 {
 public:
   octave_user_code (void)
     : octave_function () { }
 
-  ~octave_user_code (void) { }
+  ~octave_user_code (void) = default;
 
   bool is_user_code (void) const { return true; }
 
   virtual std::map<std::string, octave_value> subfunctions (void) const;
 
   virtual tree_statement_list *body (void) = 0;
 
 protected:
diff --git a/libinterp/octave-value/ovl.h b/libinterp/octave-value/ovl.h
--- a/libinterp/octave-value/ovl.h
+++ b/libinterp/octave-value/ovl.h
@@ -65,17 +65,17 @@ public:
     : data (tc.as_row ()), names () { }
 
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   // Concatenation constructor.
   octave_value_list (const std::list<octave_value_list>&);
 
-  ~octave_value_list (void) { }
+  ~octave_value_list (void) = default;
 
   octave_value_list& operator = (const octave_value_list& obj)
   {
     if (this != &obj)
       {
         data = obj.data;
         names = obj.names;
       }
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -286,17 +286,17 @@ namespace octave
     cli_application (const cmdline_options& opts = cmdline_options ())
       : application (opts)
     { }
 
     cli_application (int argc, char **argv)
       : application (argc, argv)
     { }
 
-    ~cli_application (void) { }
+    ~cli_application (void) = default;
 
     int execute (void);
 
   private:
 
     // No copying, at least not yet...
 
     cli_application (const cli_application&) = delete;
@@ -311,17 +311,17 @@ namespace octave
     embedded_application (const cmdline_options& opts = cmdline_options ())
       : application (opts)
     { }
 
     embedded_application (int argc, char **argv)
       : application (argc, argv)
     { }
 
-    ~embedded_application (void) { }
+    ~embedded_application (void) = default;
 
     void create_interpreter (void);
 
     int execute (void);
 
   private:
 
     // No copying, at least not yet...
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -111,17 +111,17 @@ namespace octave
       bbp_nesting_level& operator = (const bbp_nesting_level& nl)
       {
         if (&nl != this)
           context = nl.context;
 
         return *this;
       }
 
-      ~bbp_nesting_level (void) { }
+      ~bbp_nesting_level (void) = default;
 
       void reset (void)
       {
         while (! context.empty ())
           context.pop ();
       }
 
       void bracket (void) { context.push (BRACKET); }
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -486,17 +486,17 @@ namespace octave
     parser (const std::string& eval_string)
       : base_parser (*(new octave::lexer (eval_string)))
     { }
 
     parser (octave::lexer& lxr)
       : base_parser (lxr)
     { }
 
-    ~parser (void) { }
+    ~parser (void) = default;
 
     int run (void);
 
   private:
 
     // No copying!
 
     parser (const parser&) = delete;
@@ -508,17 +508,17 @@ namespace octave
   push_parser : public base_parser
   {
   public:
 
     push_parser (void)
       : base_parser (*(new octave::push_lexer ()))
     { }
 
-    ~push_parser (void) { }
+    ~push_parser (void) = default;
 
     int run (const std::string& input, bool eof);
 
   private:
 
     // No copying!
 
     push_parser (const push_parser&) = delete;
diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -148,17 +148,17 @@ public:
 
   tree_boolean_expression (int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (l, c), etype (t) { }
 
   tree_boolean_expression (tree_expression *a, tree_expression *b,
                            int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
-  ~tree_boolean_expression (void) { }
+  ~tree_boolean_expression (void) = default;
 
   bool is_boolean_expression (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
diff --git a/libinterp/parse-tree/pt-bp.h b/libinterp/parse-tree/pt-bp.h
--- a/libinterp/parse-tree/pt-bp.h
+++ b/libinterp/parse-tree/pt-bp.h
@@ -40,17 +40,17 @@ tree_breakpoint : public tree_walker
 {
 public:
 
   enum action { set = 1, clear = 2, list = 3 };
 
   tree_breakpoint (int l, action a, const std::string& c = pt_bp_empty_string)
     : line (l), act (a), condition (c), found (false), bp_list () { }
 
-  ~tree_breakpoint (void) { }
+  ~tree_breakpoint (void) = default;
 
   bool success (void) const { return found; }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -42,17 +42,17 @@ class
 tree_cell : public tree_array_list
 {
 public:
 
   tree_cell (tree_argument_list *row = 0, int l = -1, int c = -1)
     : tree_array_list (row, l, c)
   { }
 
-  ~tree_cell (void) { }
+  ~tree_cell (void) = default;
 
   bool is_cell (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int);
diff --git a/libinterp/parse-tree/pt-check.h b/libinterp/parse-tree/pt-check.h
--- a/libinterp/parse-tree/pt-check.h
+++ b/libinterp/parse-tree/pt-check.h
@@ -34,17 +34,17 @@ class tree_decl_command;
 class
 tree_checker : public tree_walker
 {
 public:
 
   tree_checker (void)
     : do_lvalue_check (false), file_name () { }
 
-  ~tree_checker (void) { }
+  ~tree_checker (void) = default;
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
 
   void visit_colon_expression (tree_colon_expression&);
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -100,17 +100,17 @@ private:
 
 class tree_classdef_superclass
 {
 public:
 
   tree_classdef_superclass (const std::string& cname)
     : cls_name (cname) { }
 
-  ~tree_classdef_superclass (void) { }
+  ~tree_classdef_superclass (void) = default;
 
   std::string class_name (void) { return cls_name; }
 
   void accept (tree_walker&);
 
 private:
 
   std::string cls_name;
@@ -260,17 +260,17 @@ public:
 
   tree_classdef_properties_block (tree_classdef_attribute_list *a,
                                   tree_classdef_property_list *plist,
                                   octave_comment_list *lc,
                                   octave_comment_list *tc,
                                   int l = -1, int c = -1)
     : tree_classdef_element<tree_classdef_property *> (a, plist, lc, tc, l, c) { }
 
-  ~tree_classdef_properties_block (void) { }
+  ~tree_classdef_properties_block (void) = default;
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
   tree_classdef_properties_block (const tree_classdef_properties_block&) = delete;
@@ -284,17 +284,17 @@ public:
 
   tree_classdef_methods_list (void) { }
 
   tree_classdef_methods_list (const octave_value& f) { append (f); }
 
   tree_classdef_methods_list (const octave::base_list<octave_value>& a)
     : octave::base_list<octave_value> (a) { }
 
-  ~tree_classdef_methods_list (void) { }
+  ~tree_classdef_methods_list (void) = default;
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
   tree_classdef_methods_list (const tree_classdef_methods_list&) = delete;
@@ -307,17 +307,17 @@ class tree_classdef_methods_block : publ
 public:
 
   tree_classdef_methods_block (tree_classdef_attribute_list *a,
                                tree_classdef_methods_list *mlist,
                                octave_comment_list *lc,
                                octave_comment_list *tc, int l = -1, int c = -1)
     : tree_classdef_element<octave_value> (a, mlist, lc, tc, l, c) { }
 
-  ~tree_classdef_methods_block (void) { }
+  ~tree_classdef_methods_block (void) = default;
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
   tree_classdef_methods_block (const tree_classdef_methods_block&) = delete;
@@ -381,17 +381,17 @@ class tree_classdef_events_block
 public:
 
   tree_classdef_events_block (tree_classdef_attribute_list *a,
                               tree_classdef_events_list *elist,
                               octave_comment_list *lc,
                               octave_comment_list *tc, int l = -1, int c = -1)
     : tree_classdef_element<tree_classdef_event *> (a, elist, lc, tc, l, c) { }
 
-  ~tree_classdef_events_block (void) { }
+  ~tree_classdef_events_block (void) = default;
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
   tree_classdef_events_block (const tree_classdef_events_block&) = delete;
@@ -462,17 +462,17 @@ class tree_classdef_enum_block
 public:
 
   tree_classdef_enum_block (tree_classdef_attribute_list *a,
                             tree_classdef_enum_list *elist,
                             octave_comment_list *lc,
                             octave_comment_list *tc, int l = -1, int c = -1)
     : tree_classdef_element<tree_classdef_enum *> (a, elist, lc, tc, l, c) { }
 
-  ~tree_classdef_enum_block (void) { }
+  ~tree_classdef_enum_block (void) = default;
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
   tree_classdef_enum_block (const tree_classdef_enum_block&) = delete;
diff --git a/libinterp/parse-tree/pt-cmd.h b/libinterp/parse-tree/pt-cmd.h
--- a/libinterp/parse-tree/pt-cmd.h
+++ b/libinterp/parse-tree/pt-cmd.h
@@ -39,17 +39,17 @@ class tree_walker;
 class
 tree_command : public tree
 {
 public:
 
   tree_command (int l = -1, int c = -1)
     : tree (l, c) { }
 
-  virtual ~tree_command (void) { }
+  virtual ~tree_command (void) = default;
 
   virtual tree_command *dup (symbol_table::scope_id,
                              symbol_table::context_id context) const = 0;
 
 private:
 
   // No copying!
 
@@ -64,17 +64,17 @@ class
 tree_no_op_command : public tree_command
 {
 public:
 
   tree_no_op_command (const std::string& cmd = "no_op", bool e = false,
                       int l = -1, int c = -1)
     : tree_command (l, c), eof (e), orig_cmd (cmd) { }
 
-  ~tree_no_op_command (void) { }
+  ~tree_no_op_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   bool is_end_of_fcn_or_script (void) const
   {
@@ -103,17 +103,17 @@ private:
 class
 tree_function_def : public tree_command
 {
 public:
 
   tree_function_def (octave_function *f, int l = -1, int c = -1)
     : tree_command (l, c), fcn (f) { }
 
-  ~tree_function_def (void) { }
+  ~tree_function_def (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   octave_value function (void) { return fcn; }
 
diff --git a/libinterp/parse-tree/pt-const.h b/libinterp/parse-tree/pt-const.h
--- a/libinterp/parse-tree/pt-const.h
+++ b/libinterp/parse-tree/pt-const.h
@@ -47,17 +47,17 @@ public:
 
   tree_constant (const octave_value& v, int l = -1, int c = -1)
     : tree_expression (l, c), val (v), orig_text () { }
 
   tree_constant (const octave_value& v, const std::string& ot,
                  int l = -1, int c = -1)
     : tree_expression (l, c), val (v), orig_text (ot) { }
 
-  ~tree_constant (void) { }
+  ~tree_constant (void) = default;
 
   bool has_magic_end (void) const { return false; }
 
   // Type.  It would be nice to eliminate the need for this.
 
   bool is_constant (void) const { return true; }
 
   void maybe_mutate (void) { val.maybe_mutate (); }
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -188,17 +188,17 @@ tree_global_command : public tree_decl_c
 public:
 
   tree_global_command (int l = -1, int c = -1)
     : tree_decl_command ("global", l, c) { }
 
   tree_global_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("global", t, l, c) { }
 
-  ~tree_global_command (void) { }
+  ~tree_global_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
@@ -219,17 +219,17 @@ tree_persistent_command : public tree_de
 public:
 
   tree_persistent_command (int l = -1, int c = -1)
     : tree_decl_command ("persistent", l, c) { }
 
   tree_persistent_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("persistent", t, l, c) { }
 
-  ~tree_persistent_command (void) { }
+  ~tree_persistent_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -47,17 +47,17 @@ namespace octave
   public:
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter *interp_context)
       : m_interp_context (interp_context)
     { }
 
-    ~tree_evaluator (void) { }
+    ~tree_evaluator (void) = default;
 
     void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
     void visit_argument_list (tree_argument_list&);
 
     void visit_binary_expression (tree_binary_expression&);
 
     void visit_break_command (tree_break_command&);
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -40,17 +40,17 @@ class
 tree_expression : public tree
 {
 public:
 
   tree_expression (int l = -1, int c = -1)
     : tree (l, c), num_parens (0), postfix_index_type ('\0'),
       for_cmd_expr (false), print_flag (false) { }
 
-  virtual ~tree_expression (void) { }
+  virtual ~tree_expression (void) = default;
 
   virtual bool has_magic_end (void) const = 0;
 
   virtual tree_expression *dup (symbol_table::scope_id,
                                 symbol_table::context_id context) const = 0;
 
   virtual bool is_constant (void) const { return false; }
 
diff --git a/libinterp/parse-tree/pt-fcn-handle.h b/libinterp/parse-tree/pt-fcn-handle.h
--- a/libinterp/parse-tree/pt-fcn-handle.h
+++ b/libinterp/parse-tree/pt-fcn-handle.h
@@ -48,17 +48,17 @@ tree_fcn_handle : public tree_expression
 public:
 
   tree_fcn_handle (int l = -1, int c = -1)
     : tree_expression (l, c), nm () { }
 
   tree_fcn_handle (const std::string& n, int l = -1, int c = -1)
     : tree_expression (l, c), nm (n) { }
 
-  ~tree_fcn_handle (void) { }
+  ~tree_fcn_handle (void) = default;
 
   bool has_magic_end (void) const { return false; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false,
               bool pr_orig_txt = true);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false,
                   bool pr_orig_txt = true);
diff --git a/libinterp/parse-tree/pt-funcall.h b/libinterp/parse-tree/pt-funcall.h
--- a/libinterp/parse-tree/pt-funcall.h
+++ b/libinterp/parse-tree/pt-funcall.h
@@ -43,17 +43,17 @@ public:
   tree_funcall (const octave_value& f, const octave_value_list& a,
                 int l = -1, int c = -1)
     : tree_expression (l, c), fcn (f), args (a)
   {
     if (! fcn.is_function ())
       error ("tree_funcall: invalid function");
   }
 
-  ~tree_funcall (void) { }
+  ~tree_funcall (void) = default;
 
   bool has_magic_end (void) const { return false; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false,
               bool pr_orig_txt = true);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false,
                   bool pr_orig_txt = true);
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -51,17 +51,17 @@ public:
   tree_identifier (int l = -1, int c = -1)
     : tree_expression (l, c) { }
 
   tree_identifier (const symbol_table::symbol_record& s,
                    int l = -1, int c = -1,
                    symbol_table::scope_id sc = symbol_table::current_scope ())
     : tree_expression (l, c), sym (s, sc) { }
 
-  ~tree_identifier (void) { }
+  ~tree_identifier (void) = default;
 
   bool has_magic_end (void) const { return (name () == "end"); }
 
   bool is_identifier (void) const { return true; }
 
   // The name doesn't change with scope, so use sym instead of
   // accessing it through sym so that this function may remain const.
   std::string name (void) const { return sym.name (); }
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -35,17 +35,17 @@ class tree_walker;
 class
 tree_break_command : public tree_command
 {
 public:
 
   tree_break_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
-  ~tree_break_command (void) { }
+  ~tree_break_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int breaking;
 
@@ -63,17 +63,17 @@ private:
 class
 tree_continue_command : public tree_command
 {
 public:
 
   tree_continue_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
-  ~tree_continue_command (void) { }
+  ~tree_continue_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int continuing;
 
@@ -91,17 +91,17 @@ private:
 class
 tree_return_command : public tree_command
 {
 public:
 
   tree_return_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
-  ~tree_return_command (void) { }
+  ~tree_return_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int returning;
 
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -150,17 +150,17 @@ public:
     : tree_while_command (e, lc, tc, l, c) { }
 
   tree_do_until_command (tree_expression *e, tree_statement_list *lst,
                          octave_comment_list *lc = 0,
                          octave_comment_list *tc = 0,
                          int l = -1, int c = -1)
     : tree_while_command (e, lst, lc, tc, l, c) { }
 
-  ~tree_do_until_command (void) { }
+  ~tree_do_until_command (void) = default;
 
   tree_command *dup (symbol_table::scope_id scope,
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -80,17 +80,17 @@ private:
     tm_row_const_rep (const tree_argument_list& row)
       : count (1), dv (0, 0), all_str (false), all_sq_str (false),
         some_str (false), all_real (false), all_cmplx (false),
         all_mt (true), any_cell (false), any_sparse (false),
         any_class (false), all_1x1 (! row.empty ()),
         first_elem_is_struct (false), class_nm (), ok (false)
     { init (row); }
 
-    ~tm_row_const_rep (void) { }
+    ~tm_row_const_rep (void) = default;
 
     octave_refcount<int> count;
 
     dim_vector dv;
 
     bool all_str;
     bool all_sq_str;
     bool all_dq_str;
@@ -468,17 +468,17 @@ public:
 
   tm_const (const tree_matrix& tm)
     : dv (0, 0), all_str (false), all_sq_str (false), all_dq_str (false),
       some_str (false), all_real (false), all_cmplx (false),
       all_mt (true), any_cell (false), any_sparse (false),
       any_class (false), class_nm (), ok (false)
   { init (tm); }
 
-  ~tm_const (void) { }
+  ~tm_const (void) = default;
 
   octave_idx_type rows (void) const { return dv.elem (0); }
   octave_idx_type cols (void) const { return dv.elem (1); }
 
   dim_vector dims (void) const { return dv; }
 
   bool all_strings_p (void) const { return all_str; }
   bool all_sq_strings_p (void) const { return all_sq_str; }
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -45,17 +45,17 @@ class
 tree_matrix : public tree_array_list
 {
 public:
 
   tree_matrix (tree_argument_list *row = 0, int l = -1, int c = -1)
     : tree_array_list (row, l, c)
   { }
 
-  ~tree_matrix (void) { }
+  ~tree_matrix (void) = default;
 
   bool is_matrix (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
diff --git a/libinterp/parse-tree/pt-misc.h b/libinterp/parse-tree/pt-misc.h
--- a/libinterp/parse-tree/pt-misc.h
+++ b/libinterp/parse-tree/pt-misc.h
@@ -138,17 +138,17 @@ private:
 
 class
 tree_va_return_list : public octave::base_list<octave_value>
 {
 public:
 
   tree_va_return_list (void) { }
 
-  ~tree_va_return_list (void) { }
+  ~tree_va_return_list (void) = default;
 
 private:
 
   // No copying!
 
   tree_va_return_list (const tree_va_return_list&) = delete;
 
   tree_va_return_list& operator = (const tree_va_return_list&) = delete;
diff --git a/libinterp/parse-tree/pt-pr-code.h b/libinterp/parse-tree/pt-pr-code.h
--- a/libinterp/parse-tree/pt-pr-code.h
+++ b/libinterp/parse-tree/pt-pr-code.h
@@ -48,17 +48,17 @@ public:
       print_original_text (pr_orig_txt),
       curr_print_indent_level (0), beginning_of_line (true),
       suppress_newlines (0)
   {
     // For "none".
     nesting.push ('n');
   }
 
-  ~tree_print_code (void) { }
+  ~tree_print_code (void) = default;
 
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -92,17 +92,17 @@ public:
   tree_prefix_expression (int l = -1, int c = -1)
     : tree_unary_expression (l, c, octave_value::unknown_unary_op) { }
 
   tree_prefix_expression (tree_expression *e, int l = -1, int c = -1,
                           octave_value::unary_op t
                             = octave_value::unknown_unary_op)
     : tree_unary_expression (e, l, c, t) { }
 
-  ~tree_prefix_expression (void) { }
+  ~tree_prefix_expression (void) = default;
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
@@ -131,17 +131,17 @@ public:
   tree_postfix_expression (int l = -1, int c = -1)
     : tree_unary_expression (l, c, octave_value::unknown_unary_op) { }
 
   tree_postfix_expression (tree_expression *e, int l = -1, int c = -1,
                            octave_value::unary_op t
                              = octave_value::unknown_unary_op)
     : tree_unary_expression (e, l, c, t) { }
 
-  ~tree_postfix_expression (void) { }
+  ~tree_postfix_expression (void) = default;
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
diff --git a/libinterp/parse-tree/pt-walk.h b/libinterp/parse-tree/pt-walk.h
--- a/libinterp/parse-tree/pt-walk.h
+++ b/libinterp/parse-tree/pt-walk.h
@@ -267,17 +267,17 @@ public:
 
   virtual void
   visit_classdef (tree_classdef&) { } // = 0;
 
 protected:
 
   tree_walker (void) { }
 
-  virtual ~tree_walker (void) { }
+  virtual ~tree_walker (void) = default;
 
 private:
 
   // No copying!
 
   tree_walker (const tree_walker&) = delete;
 
   tree_walker& operator = (const tree_walker&) = delete;
diff --git a/libinterp/parse-tree/pt.h b/libinterp/parse-tree/pt.h
--- a/libinterp/parse-tree/pt.h
+++ b/libinterp/parse-tree/pt.h
@@ -39,17 +39,17 @@ bool meets_condition (std::string *);
 class
 tree
 {
 public:
 
   tree (int l = -1, int c = -1)
     : line_num (l), column_num (c), bp (NULL) { }
 
-  virtual ~tree (void) { }
+  virtual ~tree (void) = default;
 
   virtual int line (void) const { return line_num; }
 
   virtual int column (void) const { return column_num; }
 
   void line (int l) { line_num = l; }
 
   void column (int c) { column_num = c; }
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -63,17 +63,17 @@ public:
 
   DiagArray2 (const DiagArray2<T>& a)
     : Array<T> (a), d1 (a.d1), d2 (a.d2) { }
 
   template <typename U>
   DiagArray2 (const DiagArray2<U>& a)
     : Array<T> (a.extract_diag ()), d1 (a.dim1 ()), d2 (a.dim2 ()) { }
 
-  ~DiagArray2 (void) { }
+  ~DiagArray2 (void) = default;
 
   DiagArray2<T>& operator = (const DiagArray2<T>& a)
   {
     if (this != &a)
       {
         Array<T>::operator = (a);
         d1 = a.d1;
         d2 = a.d2;
diff --git a/liboctave/array/MArray.h b/liboctave/array/MArray.h
--- a/liboctave/array/MArray.h
+++ b/liboctave/array/MArray.h
@@ -75,17 +75,17 @@ public:
   explicit MArray (const dim_vector& dv, const T& val)
     : Array<T> (dv, val) { }
 
   MArray (const MArray<T>& a) : Array<T> (a) { }
 
   template <typename U>
   MArray (const Array<U>& a) : Array<T> (a) { }
 
-  ~MArray (void) { }
+  ~MArray (void) = default;
 
   MArray<T>& operator = (const MArray<T>& a)
   {
     Array<T>::operator = (a);
     return *this;
   }
 
   MArray<T> reshape (const dim_vector& new_dims) const
diff --git a/liboctave/array/MDiagArray2.h b/liboctave/array/MDiagArray2.h
--- a/liboctave/array/MDiagArray2.h
+++ b/liboctave/array/MDiagArray2.h
@@ -68,17 +68,17 @@ public:
   template <typename U>
   MDiagArray2 (const DiagArray2<U>& a) : DiagArray2<T> (a) { }
 
   explicit MDiagArray2 (const Array<T>& a) : DiagArray2<T> (a) { }
 
   MDiagArray2 (const Array<T>& a, octave_idx_type r, octave_idx_type c)
     : DiagArray2<T> (a, r, c) { }
 
-  ~MDiagArray2 (void) { }
+  ~MDiagArray2 (void) = default;
 
   MDiagArray2<T>& operator = (const MDiagArray2<T>& a)
   {
     DiagArray2<T>::operator = (a);
     return *this;
   }
 
   MArray<T> array_value () const
diff --git a/liboctave/array/MSparse.h b/liboctave/array/MSparse.h
--- a/liboctave/array/MSparse.h
+++ b/liboctave/array/MSparse.h
@@ -64,17 +64,17 @@ public:
   explicit MSparse (octave_idx_type r, octave_idx_type c, T val)
     : Sparse<T> (r, c, val) { }
 
   explicit MSparse (const PermMatrix& a) : Sparse<T>(a) { }
 
   MSparse (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz)
     : Sparse<T> (r, c, num_nz) { }
 
-  ~MSparse (void) { }
+  ~MSparse (void) = default;
 
   MSparse<T>& operator = (const MSparse<T>& a)
   {
     Sparse<T>::operator = (a);
     return *this;
   }
 
   MSparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c)
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -69,17 +69,17 @@ public:
 
 private:
 
   class OCTAVE_API idx_base_rep
   {
   public:
     idx_base_rep (void) : count (1), err (false) { }
 
-    virtual ~idx_base_rep (void) { }
+    virtual ~idx_base_rep (void) = default;
 
     // Non-range-checking element query.
     virtual octave_idx_type xelem (octave_idx_type i) const = 0;
 
     // Range-checking element query.
     virtual octave_idx_type checkelem (octave_idx_type i) const = 0;
 
     // Length of the index vector.
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -75,17 +75,17 @@ namespace octave
     execution_exception& operator = (const execution_exception& x)
     {
       if (&x != this)
         m_stack_trace = x.m_stack_trace;
 
       return *this;
     }
 
-    ~execution_exception (void) { }
+    ~execution_exception (void) = default;
 
     virtual void set_stack_trace (const std::string& st)
     {
       m_stack_trace = st;
     }
 
     virtual void set_stack_trace (void)
     {
@@ -121,17 +121,17 @@ namespace octave
         {
           m_exit_status = ex.m_exit_status;
           m_safe_to_return = ex.m_safe_to_return;
         }
 
       return *this;
     }
 
-    ~exit_exception (void) { }
+    ~exit_exception (void) = default;
 
     int exit_status (void) const { return m_exit_status; }
 
     bool safe_to_return (void) const { return m_safe_to_return; }
 
   private:
 
     int m_exit_status;
diff --git a/liboctave/numeric/CollocWt.h b/liboctave/numeric/CollocWt.h
--- a/liboctave/numeric/CollocWt.h
+++ b/liboctave/numeric/CollocWt.h
@@ -79,17 +79,17 @@ public:
         q = a.q;
         A = a.A;
         B = a.B;
         initialized = a.initialized;
       }
     return *this;
   }
 
-  ~CollocWt (void) { }
+  ~CollocWt (void) = default;
 
   CollocWt& resize (octave_idx_type nc)
   {
     n = nc;
     initialized = false;
     return *this;
   }
 
diff --git a/liboctave/numeric/DAE.h b/liboctave/numeric/DAE.h
--- a/liboctave/numeric/DAE.h
+++ b/liboctave/numeric/DAE.h
@@ -52,13 +52,13 @@ public:
     if (this != &a)
       {
         base_diff_alg_eqn::operator = (a);
         DAEFunc::operator = (a);
       }
     return *this;
   }
 
-  virtual ~DAE (void) { }
+  virtual ~DAE (void) = default;
 };
 
 #endif
 
diff --git a/liboctave/numeric/DAEFunc.h b/liboctave/numeric/DAEFunc.h
--- a/liboctave/numeric/DAEFunc.h
+++ b/liboctave/numeric/DAEFunc.h
@@ -63,17 +63,17 @@ public:
       {
         fun = a.fun;
         jac = a.jac;
         reset = a.reset;
       }
     return *this;
   }
 
-  virtual ~DAEFunc (void) { }
+  virtual ~DAEFunc (void) = default;
 
   DAERHSFunc function (void) const { return fun; }
 
   DAEFunc& set_function (DAERHSFunc f)
   {
     fun = f;
     reset = true;
     return *this;
diff --git a/liboctave/numeric/DAERT.h b/liboctave/numeric/DAERT.h
--- a/liboctave/numeric/DAERT.h
+++ b/liboctave/numeric/DAERT.h
@@ -53,17 +53,17 @@ public:
       {
         base_diff_alg_eqn::operator = (a);
         DAERTFunc::operator = (a);
 
       }
     return *this;
   }
 
-  virtual ~DAERT (void) { }
+  virtual ~DAERT (void) = default;
 
   void initialize (const ColumnVector& xx, const ColumnVector& xxdot,
                    double tt)
   {
     base_diff_alg_eqn::initialize (xx, xxdot, tt);
   }
 };
 
diff --git a/liboctave/numeric/DAERTFunc.h b/liboctave/numeric/DAERTFunc.h
--- a/liboctave/numeric/DAERTFunc.h
+++ b/liboctave/numeric/DAERTFunc.h
@@ -58,17 +58,17 @@ public:
       {
         DAEFunc::operator = (a);
         constr = a.constr;
         reset = a.reset;
       }
     return *this;
   }
 
-  virtual ~DAERTFunc (void) { }
+  virtual ~DAERTFunc (void) = default;
 
   DAERTConstrFunc constraint_function (void) const { return constr; }
 
   DAERTFunc& set_constraint_function (DAERTConstrFunc cf)
   {
     constr = cf;
     reset = true;
     return *this;
diff --git a/liboctave/numeric/DASPK.h b/liboctave/numeric/DASPK.h
--- a/liboctave/numeric/DASPK.h
+++ b/liboctave/numeric/DASPK.h
@@ -44,17 +44,17 @@ public:
       lrw (0), info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASPK (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAEFunc& f)
     : DAE (s, deriv, tm, f), DASPK_options (), initialized (false),
       liw (0), lrw (0), info (), iwork (), rwork (), abs_tol (),
       rel_tol () { }
 
-  ~DASPK (void) { }
+  ~DASPK (void) = default;
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out);
diff --git a/liboctave/numeric/DASRT.h b/liboctave/numeric/DASRT.h
--- a/liboctave/numeric/DASRT.h
+++ b/liboctave/numeric/DASRT.h
@@ -49,17 +49,17 @@ public:
       {
         x = r.x;
         xdot = r.xdot;
         t = r.t;
       }
     return *this;
   }
 
-  ~DASRT_result (void) { }
+  ~DASRT_result (void) = default;
 
   Matrix state (void) const { return x; }
   Matrix deriv (void) const { return xdot; }
   ColumnVector times (void) const { return t; }
 
 private:
 
   Matrix x;
@@ -87,17 +87,17 @@ public:
 
   DASRT (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAERTFunc& f)
     : DAERT (s, deriv, tm, f), DASRT_options (), initialized (false),
       liw (0), lrw (0), ng (0), info (), iwork (), jroot (), rwork (),
       abs_tol (), rel_tol ()
   { }
 
-  ~DASRT (void) { }
+  ~DASRT (void) = default;
 
   DASRT_result integrate (const ColumnVector& tout);
 
   DASRT_result integrate (const ColumnVector& tout,
                           const ColumnVector& tcrit);
 
   std::string error_message (void) const;
 
diff --git a/liboctave/numeric/DASSL.h b/liboctave/numeric/DASSL.h
--- a/liboctave/numeric/DASSL.h
+++ b/liboctave/numeric/DASSL.h
@@ -44,17 +44,17 @@ public:
       lrw (0), info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASSL (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAEFunc& f)
     : DAE (s, deriv, tm, f), DASSL_options (), initialized (false),
       liw (0), lrw (0), info (), iwork (), rwork (), abs_tol (),
       rel_tol () { }
 
-  ~DASSL (void) { }
+  ~DASSL (void) = default;
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out);
diff --git a/liboctave/numeric/EIG.h b/liboctave/numeric/EIG.h
--- a/liboctave/numeric/EIG.h
+++ b/liboctave/numeric/EIG.h
@@ -107,17 +107,17 @@ public:
       {
         lambda = a.lambda;
         v = a.v;
         w = a.w;
       }
     return *this;
   }
 
-  ~EIG (void) { }
+  ~EIG (void) = default;
 
   ComplexColumnVector eigenvalues (void) const { return lambda; }
   ComplexMatrix right_eigenvectors (void) const { return v; }
   ComplexMatrix left_eigenvectors (void) const { return w; }
 
   friend std::ostream&  operator << (std::ostream& os, const EIG& a);
 
 private:
diff --git a/liboctave/numeric/LSODE.h b/liboctave/numeric/LSODE.h
--- a/liboctave/numeric/LSODE.h
+++ b/liboctave/numeric/LSODE.h
@@ -40,17 +40,17 @@ public:
       maxord (0), itask (0), iopt (0), itol (0), liw (0), lrw (0),
       iwork (), rwork (), rel_tol (0.0), abs_tol () { }
 
   LSODE (const ColumnVector& s, double tm, const ODEFunc& f)
     : ODE (s, tm, f), LSODE_options (), initialized (false), method_flag (0),
       maxord (0), itask (0), iopt (0), itol (0), liw (0), lrw (0),
       iwork (), rwork (), rel_tol (0.0), abs_tol () { }
 
-  ~LSODE (void) { }
+  ~LSODE (void) = default;
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
   std::string error_message (void) const;
diff --git a/liboctave/numeric/ODE.h b/liboctave/numeric/ODE.h
--- a/liboctave/numeric/ODE.h
+++ b/liboctave/numeric/ODE.h
@@ -47,17 +47,17 @@ public:
     if (this != &a)
       {
         base_diff_eqn::operator = (a);
         ODEFunc::operator = (a);
       }
     return *this;
   }
 
-  virtual ~ODE (void) { }
+  virtual ~ODE (void) = default;
 
   // Derived classes must provide functions to actually do the
   // integration.
 
   // Return the vector of states at output time t.
   virtual ColumnVector do_integrate (double tt) = 0;
 
   // Return a matrix of states at each output time specified by t.
diff --git a/liboctave/numeric/ODEFunc.h b/liboctave/numeric/ODEFunc.h
--- a/liboctave/numeric/ODEFunc.h
+++ b/liboctave/numeric/ODEFunc.h
@@ -54,17 +54,17 @@ public:
       {
         fun = a.fun;
         jac = a.jac;
         reset = a.reset;
       }
     return *this;
   }
 
-  virtual ~ODEFunc (void) { }
+  virtual ~ODEFunc (void) = default;
 
   ODERHSFunc function (void) const { return fun; }
 
   ODEFunc& set_function (ODERHSFunc f)
   {
     fun = f;
     reset = true;
     return *this;
diff --git a/liboctave/numeric/ODES.h b/liboctave/numeric/ODES.h
--- a/liboctave/numeric/ODES.h
+++ b/liboctave/numeric/ODES.h
@@ -55,17 +55,17 @@ public:
         ODESFunc::operator = (a);
 
         xdot = a.xdot;
         theta = a.theta;
       }
     return *this;
   }
 
-  ~ODES (void) { }
+  ~ODES (void) = default;
 
   ColumnVector parameter_vector (void) { return theta; }
 
   void initialize (const ColumnVector& x, double t);
 
   void initialize (const ColumnVector& x, double t,
                    const ColumnVector& theta);
 
diff --git a/liboctave/numeric/ODESFunc.h b/liboctave/numeric/ODESFunc.h
--- a/liboctave/numeric/ODESFunc.h
+++ b/liboctave/numeric/ODESFunc.h
@@ -68,17 +68,17 @@ public:
       {
         fsub = a.fsub;
         bsub = a.bsub;
         jsub = a.jsub;
       }
     return *this;
   }
 
-  virtual ~ODESFunc (void) { }
+  virtual ~ODESFunc (void) = default;
 
   ODES_fsub fsub_function (void) const { return fsub; }
 
   ODESFunc& set_fsub_function (ODES_fsub f)
   {
     fsub = f;
     return *this;
   }
diff --git a/liboctave/numeric/Quad.h b/liboctave/numeric/Quad.h
--- a/liboctave/numeric/Quad.h
+++ b/liboctave/numeric/Quad.h
@@ -47,17 +47,17 @@ Quad : public Quad_options
 public:
 
   Quad (integrand_fcn fcn)
     : Quad_options (), f (fcn), ff () { }
 
   Quad (float_integrand_fcn fcn)
     : Quad_options (), f (), ff (fcn) { }
 
-  virtual ~Quad (void) { }
+  virtual ~Quad (void) = default;
 
   virtual double integrate (void)
   {
     octave_idx_type ier, neval;
     double abserr;
     return do_integrate (ier, neval, abserr);
   }
 
@@ -134,17 +134,17 @@ public:
            const ColumnVector& sing)
     : Quad (fcn), lower_limit (ll), upper_limit (ul),
       singularities (sing) { }
 
   DefQuad (integrand_fcn fcn, const ColumnVector& sing)
     : Quad (fcn), lower_limit (0.0), upper_limit (1.0),
       singularities (sing) { }
 
-  ~DefQuad (void) { }
+  ~DefQuad (void) = default;
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr);
 
   OCTAVE_NORETURN float do_integrate (octave_idx_type& ier,
                                       octave_idx_type& neval, float& abserr);
 
 private:
@@ -164,17 +164,17 @@ public:
   enum IntegralType { bound_to_inf, neg_inf_to_bound, doubly_infinite };
 
   IndefQuad (integrand_fcn fcn)
     : Quad (fcn), bound (0.0), type (bound_to_inf) { }
 
   IndefQuad (integrand_fcn fcn, double b, IntegralType t)
     : Quad (fcn), bound (b), type (t) { }
 
-  ~IndefQuad (void) { }
+  ~IndefQuad (void) = default;
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                        double& abserr);
 
   OCTAVE_NORETURN float do_integrate (octave_idx_type& ier,
                                       octave_idx_type& neval, float& abserr);
 
 private:
@@ -199,17 +199,17 @@ public:
                 const FloatColumnVector& sing)
     : Quad (fcn), lower_limit (ll), upper_limit (ul),
       singularities (sing) { }
 
   FloatDefQuad (float_integrand_fcn fcn, const FloatColumnVector& sing)
     : Quad (fcn), lower_limit (0.0), upper_limit (1.0),
       singularities (sing) { }
 
-  ~FloatDefQuad (void) { }
+  ~FloatDefQuad (void) = default;
 
   OCTAVE_NORETURN double do_integrate (octave_idx_type& ier,
                                        octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                       float& abserr);
 
 private:
@@ -229,17 +229,17 @@ public:
   enum IntegralType { bound_to_inf, neg_inf_to_bound, doubly_infinite };
 
   FloatIndefQuad (float_integrand_fcn fcn)
     : Quad (fcn), bound (0.0), type (bound_to_inf) { }
 
   FloatIndefQuad (float_integrand_fcn fcn, double b, IntegralType t)
     : Quad (fcn), bound (b), type (t) { }
 
-  ~FloatIndefQuad (void) { }
+  ~FloatIndefQuad (void) = default;
 
   OCTAVE_NORETURN double do_integrate (octave_idx_type& ier,
                                        octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval,
                       float& abserr);
 
 private:
diff --git a/liboctave/numeric/aepbalance.h b/liboctave/numeric/aepbalance.h
--- a/liboctave/numeric/aepbalance.h
+++ b/liboctave/numeric/aepbalance.h
@@ -55,17 +55,17 @@ namespace octave
             ilo = a.ilo;
             ihi = a.ihi;
             job = a.job;
           }
 
         return *this;
       }
 
-      virtual ~aepbalance (void) { }
+      virtual ~aepbalance (void) = default;
 
       MT balancing_matrix (void) const;
 
       MT balanced_matrix (void) const
       {
         return balanced_mat;
       }
 
diff --git a/liboctave/numeric/base-dae.h b/liboctave/numeric/base-dae.h
--- a/liboctave/numeric/base-dae.h
+++ b/liboctave/numeric/base-dae.h
@@ -40,17 +40,17 @@ public:
 
   base_diff_alg_eqn (const ColumnVector& xx, const ColumnVector& xxdot,
                      double tt)
     : base_diff_eqn (xx, tt), xdot (xxdot) { }
 
   base_diff_alg_eqn (const base_diff_alg_eqn& a)
     : base_diff_eqn (a), xdot (a.xdot) { }
 
-  virtual ~base_diff_alg_eqn (void) { }
+  virtual ~base_diff_alg_eqn (void) = default;
 
   base_diff_alg_eqn& operator = (const base_diff_alg_eqn& a)
   {
     if (this != &a)
       {
         base_diff_eqn::operator = (a);
         xdot = a.xdot;
       }
diff --git a/liboctave/numeric/base-de.h b/liboctave/numeric/base-de.h
--- a/liboctave/numeric/base-de.h
+++ b/liboctave/numeric/base-de.h
@@ -42,17 +42,17 @@ public:
   base_diff_eqn (const ColumnVector& xx, double tt)
     : x (xx), t (tt), stop_time (0.0), stop_time_set (false),
       restart (true), integration_error (false), istate (0) { }
 
   base_diff_eqn (const base_diff_eqn& a)
     : x (a.x), t (a.t), stop_time (0.0), stop_time_set (false),
       restart (true), integration_error (false), istate (0) { }
 
-  virtual ~base_diff_eqn (void) { }
+  virtual ~base_diff_eqn (void) = default;
 
   base_diff_eqn& operator = (const base_diff_eqn& a)
   {
     if (this != &a)
       {
         x = a.x;
         t = a.t;
         stop_time = a.stop_time;
diff --git a/liboctave/numeric/base-min.h b/liboctave/numeric/base-min.h
--- a/liboctave/numeric/base-min.h
+++ b/liboctave/numeric/base-min.h
@@ -33,17 +33,17 @@ base_minimizer
 public:
 
   base_minimizer (void) : x () { }
 
   base_minimizer (const ColumnVector& xx) : x (xx) { }
 
   base_minimizer (const base_minimizer& a) : x (a.x) { }
 
-  virtual ~base_minimizer (void) { }
+  virtual ~base_minimizer (void) = default;
 
   base_minimizer& operator = (const base_minimizer& a)
   {
     if (this != &a)
       x = a.x;
 
     return *this;
   }
diff --git a/liboctave/numeric/fEIG.h b/liboctave/numeric/fEIG.h
--- a/liboctave/numeric/fEIG.h
+++ b/liboctave/numeric/fEIG.h
@@ -107,17 +107,17 @@ public:
       {
         lambda = a.lambda;
         v = a.v;
         w = a.w;
       }
     return *this;
   }
 
-  ~FloatEIG (void) { }
+  ~FloatEIG (void) = default;
 
   FloatComplexColumnVector eigenvalues (void) const { return lambda; }
   FloatComplexMatrix right_eigenvectors (void) const { return v; }
   FloatComplexMatrix left_eigenvectors (void) const { return w; }
 
   friend std::ostream&  operator << (std::ostream& os, const FloatEIG& a);
 
 private:
diff --git a/liboctave/numeric/gepbalance.h b/liboctave/numeric/gepbalance.h
--- a/liboctave/numeric/gepbalance.h
+++ b/liboctave/numeric/gepbalance.h
@@ -62,17 +62,17 @@ namespace octave
             balanced_mat2 = a.balanced_mat2;
             balancing_mat = a.balancing_mat;
             balancing_mat2 = a.balancing_mat2;
           }
 
         return *this;
       }
 
-      ~gepbalance (void) { }
+      ~gepbalance (void) = default;
 
       T balanced_matrix (void) const { return balanced_mat; }
 
       T balanced_matrix2 (void) const { return balanced_mat2; }
 
       RT balancing_matrix (void) const { return balancing_mat; }
 
       RT balancing_matrix2 (void) const { return balancing_mat2; }
diff --git a/liboctave/numeric/gsvd.h b/liboctave/numeric/gsvd.h
--- a/liboctave/numeric/gsvd.h
+++ b/liboctave/numeric/gsvd.h
@@ -67,17 +67,17 @@ namespace octave
             left_smB = a.left_smB;
             right_sm = a.right_sm;
             R = a.R;
           }
 
         return *this;
       }
 
-      ~gsvd (void) { }
+      ~gsvd (void) = default;
 
       typename T::real_diag_matrix_type
       singular_values_A (void) const { return sigmaA; }
 
       typename T::real_diag_matrix_type
       singular_values_B (void) const { return sigmaB; }
 
       T left_singular_matrix_A (void) const;
diff --git a/liboctave/numeric/hess.h b/liboctave/numeric/hess.h
--- a/liboctave/numeric/hess.h
+++ b/liboctave/numeric/hess.h
@@ -63,17 +63,17 @@ namespace octave
           {
             hess_mat = a.hess_mat;
             unitary_hess_mat = a.unitary_hess_mat;
           }
 
         return *this;
       }
 
-      ~hess (void) { }
+      ~hess (void) = default;
 
       T hess_matrix (void) const { return hess_mat; }
 
       T unitary_hess_matrix (void) const { return unitary_hess_mat; }
 
     private:
 
       T hess_mat;
diff --git a/liboctave/numeric/lu.h b/liboctave/numeric/lu.h
--- a/liboctave/numeric/lu.h
+++ b/liboctave/numeric/lu.h
@@ -58,17 +58,17 @@ namespace octave
             a_fact = a.a_fact;
             l_fact = a.l_fact;
             ipvt = a.ipvt;
           }
 
         return *this;
       }
 
-      virtual ~lu (void) { }
+      virtual ~lu (void) = default;
 
       bool packed (void) const;
 
       void unpack (void);
 
       T L (void) const;
 
       T U (void) const;
diff --git a/liboctave/numeric/oct-rand.h b/liboctave/numeric/oct-rand.h
--- a/liboctave/numeric/oct-rand.h
+++ b/liboctave/numeric/oct-rand.h
@@ -38,17 +38,17 @@ OCTAVE_API
 octave_rand
 {
 protected:
 
   octave_rand (void);
 
 public:
 
-  ~octave_rand (void) { }
+  ~octave_rand (void) = default;
 
   static bool instance_ok (void);
 
   // Return the current seed.
   static double seed (void)
   {
     return instance_ok () ? instance->do_seed ()
                           : octave::numeric_limits<double>::NaN ();
diff --git a/liboctave/numeric/oct-spparms.h b/liboctave/numeric/oct-spparms.h
--- a/liboctave/numeric/oct-spparms.h
+++ b/liboctave/numeric/oct-spparms.h
@@ -62,17 +62,17 @@ public:
       {
         params = a.params;
         keys = a.keys;
       }
 
     return *this;
   }
 
-  ~octave_sparse_params (void) { }
+  ~octave_sparse_params (void) = default;
 
   static bool instance_ok (void);
 
   static void defaults (void);
 
   static void tight (void);
 
   static string_vector get_keys (void);
diff --git a/liboctave/numeric/qr.h b/liboctave/numeric/qr.h
--- a/liboctave/numeric/qr.h
+++ b/liboctave/numeric/qr.h
@@ -68,17 +68,17 @@ namespace octave
           {
             q = a.q;
             r = a.r;
           }
 
         return *this;
       }
 
-      virtual ~qr (void) { }
+      virtual ~qr (void) = default;
 
       T Q (void) const { return q; }
 
       T R (void) const { return r; }
 
       type get_type (void) const;
 
       bool regular (void) const;
diff --git a/liboctave/numeric/qrp.h b/liboctave/numeric/qrp.h
--- a/liboctave/numeric/qrp.h
+++ b/liboctave/numeric/qrp.h
@@ -55,17 +55,17 @@ namespace octave
           {
             qr<T>::operator = (a);
             p = a.p;
           }
 
         return *this;
       }
 
-      ~qrp (void) { }
+      ~qrp (void) = default;
 
       void init (const T&, type = qr<T>::std);
 
       PermMatrix P (void) const { return p; }
 
       RV_T Pvec (void) const;
 
     private:
diff --git a/liboctave/numeric/schur.h b/liboctave/numeric/schur.h
--- a/liboctave/numeric/schur.h
+++ b/liboctave/numeric/schur.h
@@ -75,17 +75,17 @@ namespace octave
           {
             schur_mat = a.schur_mat;
             unitary_mat = a.unitary_mat;
           }
 
         return *this;
       }
 
-      ~schur (void) { }
+      ~schur (void) = default;
 
       T schur_matrix (void) const { return schur_mat; }
 
       T unitary_matrix (void) const { return unitary_mat; }
 
     protected:
 
     private:
diff --git a/liboctave/numeric/sparse-lu.h b/liboctave/numeric/sparse-lu.h
--- a/liboctave/numeric/sparse-lu.h
+++ b/liboctave/numeric/sparse-lu.h
@@ -72,17 +72,17 @@ namespace octave
             cond = a.cond;
             P = a.P;
             Q = a.Q;
           }
 
         return *this;
       }
 
-      virtual ~sparse_lu (void) { }
+      virtual ~sparse_lu (void) = default;
 
       lu_type L (void) const { return Lfact; }
 
       lu_type U (void) const { return Ufact; }
 
       SparseMatrix R (void) const { return Rfact; }
 
       lu_type Y (void) const;
diff --git a/liboctave/numeric/svd.h b/liboctave/numeric/svd.h
--- a/liboctave/numeric/svd.h
+++ b/liboctave/numeric/svd.h
@@ -74,17 +74,17 @@ namespace octave
             sigma = a.sigma;
             right_sm = a.right_sm;
             m_driver = a.m_driver;
           }
 
         return *this;
       }
 
-      ~svd (void) { }
+      ~svd (void) = default;
 
       T left_singular_matrix (void) const;
 
       DM_T singular_values (void) const { return sigma; }
 
       T right_singular_matrix (void) const;
 
     private:
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
--- a/liboctave/system/child-list.h
+++ b/liboctave/system/child-list.h
@@ -61,17 +61,17 @@ namespace octave
           pid = oc.pid;
           handler = oc.handler;
           have_status = oc.have_status;
           status = oc.status;
         }
       return *this;
     }
 
-    ~child (void) { }
+    ~child (void) = default;
 
     // The process id of this child.
     pid_t pid;
 
     // The function we call if an event happens for this child.
     child_event_handler handler;
 
     // Nonzero if this child has stopped or terminated.
@@ -98,17 +98,17 @@ namespace octave
 
       void reap (void);
 
       bool wait (void);
     };
 
   public:
 
-    ~child_list (void) { }
+    ~child_list (void) = default;
 
     static void insert (pid_t pid, child::child_event_handler f);
 
     static void reap (void);
 
     static bool wait (void);
 
     static void remove (pid_t pid);
diff --git a/liboctave/system/file-stat.h b/liboctave/system/file-stat.h
--- a/liboctave/system/file-stat.h
+++ b/liboctave/system/file-stat.h
@@ -149,17 +149,17 @@ namespace octave
       bool is_newer (const octave::sys::time& time) const { return m_mtime > time; }
 
       // It's nice to be able to hide the file_stat object if we don't
       // really care about it.
       static int is_newer (const std::string&, const octave::sys::time&);
 
     protected:
 
-      virtual ~base_file_stat (void) { }
+      virtual ~base_file_stat (void) = default;
 
       // TRUE means we have already called stat.
       bool initialized;
 
       // TRUE means the stat for this file failed.
       bool fail;
 
       // If a failure occurs, this contains the system error text.
@@ -230,17 +230,17 @@ namespace octave
 
             file_name = fs.file_name;
             follow_links = fs.follow_links;
           }
 
         return *this;
       }
 
-      ~file_stat (void) { }
+      ~file_stat (void) = default;
 
       void get_stats (bool force = false)
       {
         if (! initialized || force)
           update_internal (force);
       }
 
       void get_stats (const std::string& n, bool force = false)
@@ -288,17 +288,17 @@ namespace octave
             base_file_stat::operator = (fs);
 
             fid = fs.fid;
           }
 
         return *this;
       }
 
-      ~file_fstat (void) { }
+      ~file_fstat (void) = default;
 
       void get_stats (bool force = false)
       {
         if (! initialized || force)
           update_internal (force);
       }
 
       void get_stats (int n, bool force = false)
diff --git a/liboctave/system/oct-passwd.h b/liboctave/system/oct-passwd.h
--- a/liboctave/system/oct-passwd.h
+++ b/liboctave/system/oct-passwd.h
@@ -62,17 +62,17 @@ namespace octave
             m_dir = pw.m_dir;
             m_shell = pw.m_shell;
             valid = pw.valid;
           }
 
         return *this;
       }
 
-      ~password (void) { }
+      ~password (void) = default;
 
       std::string name (void) const;
 
       std::string passwd (void) const;
 
       uid_t uid (void) const;
 
       gid_t gid (void) const;
diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -91,17 +91,17 @@ namespace octave
           {
             ot_unix_time = ot.ot_unix_time;
             ot_usec = ot.ot_usec;
           }
 
         return *this;
       }
 
-      ~time (void) { }
+      ~time (void) = default;
 
       void stamp (void);
 
       double double_value (void) const
       {
         return as_double (ot_unix_time, ot_usec);
       }
 
@@ -212,17 +212,17 @@ namespace octave
             m_isdst = tm.m_isdst;
             m_gmtoff = tm.m_gmtoff;
             m_zone = tm.m_zone;
           }
 
         return *this;
       }
 
-      virtual ~base_tm (void) { }
+      virtual ~base_tm (void) = default;
 
       int usec (void) const { return m_usec; }
       int sec (void) const { return m_sec; }
       int min (void) const { return m_min; }
       int hour (void) const { return m_hour; }
       int mday (void) const { return m_mday; }
       int mon (void) const { return m_mon; }
       int year (void) const { return m_year; }
@@ -307,17 +307,17 @@ namespace octave
         : base_tm (t) { }
 
       localtime& operator = (const localtime& t)
       {
         base_tm::operator = (t);
         return *this;
       }
 
-      ~localtime (void) { }
+      ~localtime (void) = default;
 
     private:
 
       void init (const time& ot);
     };
 
     class
     OCTAVE_API
@@ -332,17 +332,17 @@ namespace octave
         : base_tm () { init (ot); }
 
       gmtime& operator = (const gmtime& t)
       {
         base_tm::operator = (t);
         return *this;
       }
 
-      ~gmtime (void) { }
+      ~gmtime (void) = default;
 
     private:
 
       void init (const time& ot);
     };
 
     class
     OCTAVE_API
@@ -363,17 +363,17 @@ namespace octave
       {
         base_tm::operator = (s);
         nchars = s.nchars;
         return *this;
       }
 
       int characters_converted (void) const { return nchars; }
 
-      ~strptime (void) { }
+      ~strptime (void) = default;
 
     private:
 
       int nchars;
 
       void init (const std::string& str, const std::string& fmt);
     };
 
diff --git a/liboctave/system/oct-uname.h b/liboctave/system/oct-uname.h
--- a/liboctave/system/oct-uname.h
+++ b/liboctave/system/oct-uname.h
@@ -62,17 +62,17 @@ namespace octave
 
             msg = unm.msg;
             err = unm.err;
           }
 
         return *this;
       }
 
-      ~uname (void) { }
+      ~uname (void) = default;
 
       std::string sysname (void) const { return m_sysname; }
       std::string nodename (void) const { return m_nodename; }
       std::string release (void) const { return m_release; }
       std::string version (void) const { return m_version; }
       std::string machine (void) const { return m_machine; }
 
       std::string message (void) const { return msg; }
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -41,17 +41,17 @@ public:
   // discard itself.  Also, contains a pointer to the next element.
   class elem
   {
   public:
     elem (void) { }
 
     virtual void run (void) { }
 
-    virtual ~elem (void) { }
+    virtual ~elem (void) = default;
 
     friend class action_container;
 
   private:
 
     // No copying!
 
     elem (const elem&) = delete;
@@ -227,17 +227,17 @@ public:
 
     delete_ptr_elem (const delete_ptr_elem&) = delete;
 
     delete_ptr_elem operator = (const delete_ptr_elem&) = delete;
   };
 
   action_container (void) { }
 
-  virtual ~action_container (void) { }
+  virtual ~action_container (void) = default;
 
   virtual void add (elem *new_elem) = 0;
 
   // Call to void func (void).
   void add_fcn (void (*fcn) (void))
   {
     add (new fcn_elem (fcn));
   }
diff --git a/liboctave/util/base-list.h b/liboctave/util/base-list.h
--- a/liboctave/util/base-list.h
+++ b/liboctave/util/base-list.h
@@ -119,17 +119,17 @@ namespace octave
     {
       if (this != &bl)
         {
           lst = bl.lst;
         }
       return *this;
     }
 
-    virtual ~base_list (void) { }
+    virtual ~base_list (void) = default;
 
   private:
 
     std::list<elt_type> lst;
   };
 }
 
 #endif
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -75,17 +75,17 @@ namespace octave
     typedef command_editor::pre_input_hook_fcn pre_input_hook_fcn;
 
     typedef command_editor::event_hook_fcn event_hook_fcn;
 
     typedef command_editor::completion_fcn completion_fcn;
 
     gnu_readline (void);
 
-    ~gnu_readline (void) { }
+    ~gnu_readline (void) = default;
 
     void do_set_name (const std::string& n);
 
     std::string do_readline (const std::string& prompt, bool& eof);
 
     void do_set_input_stream (FILE *f);
 
     FILE *do_get_input_stream (void);
@@ -918,17 +918,17 @@ namespace octave
   class
   default_command_editor : public command_editor
   {
   public:
 
     default_command_editor (void)
       : command_editor (), input_stream (stdin), output_stream (stdout) { }
 
-    ~default_command_editor (void) { }
+    ~default_command_editor (void) = default;
 
     std::string do_readline (const std::string& prompt, bool& eof);
 
     void do_set_input_stream (FILE *f);
 
     FILE *do_get_input_stream (void);
 
     void do_set_output_stream (FILE *f);
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -58,17 +58,17 @@ namespace octave
     typedef std::string (*quoting_fcn) (const std::string&, int, char);
 
     typedef std::string (*dequoting_fcn) (const std::string&, int);
 
     typedef int (*char_is_quoted_fcn) (const std::string&, int);
 
     typedef void (*user_accept_line_fcn) (const std::string&);
 
-    virtual ~command_editor (void) { }
+    virtual ~command_editor (void) = default;
 
     static void set_name (const std::string& n);
 
     static std::string readline (const std::string& prompt);
 
     static std::string readline (const std::string& prompt, bool& eof);
 
     static void set_input_stream (FILE *f);
diff --git a/liboctave/util/cmd-hist.cc b/liboctave/util/cmd-hist.cc
--- a/liboctave/util/cmd-hist.cc
+++ b/liboctave/util/cmd-hist.cc
@@ -55,17 +55,17 @@ namespace octave
   class
   gnu_history : public command_history
   {
   public:
 
     gnu_history (void)
       : command_history (), mark (0) { }
 
-    ~gnu_history (void) { }
+    ~gnu_history (void) = default;
 
     void do_process_histcontrol (const std::string&);
 
     std::string do_histcontrol (void) const;
 
     bool do_add (const std::string&);
 
     void do_remove (int);
diff --git a/liboctave/util/cmd-hist.h b/liboctave/util/cmd-hist.h
--- a/liboctave/util/cmd-hist.h
+++ b/liboctave/util/cmd-hist.h
@@ -38,17 +38,17 @@ namespace octave
   protected:
 
     command_history (void)
       : initialized (false), ignoring_additions (false), history_control (0),
         lines_in_file (0), lines_this_session (0), xfile (), xsize (-1) { }
 
   public:
 
-    virtual ~command_history (void) { }
+    virtual ~command_history (void) = default;
 
     static void initialize (bool, const std::string&, int, const std::string&);
 
     static bool is_initialized (void);
 
     static void set_file (const std::string&);
 
     static std::string file (void);
diff --git a/liboctave/util/glob-match.h b/liboctave/util/glob-match.h
--- a/liboctave/util/glob-match.h
+++ b/liboctave/util/glob-match.h
@@ -59,17 +59,17 @@ public:
     if (this != &gm)
       {
         pat = gm.pat;
         fnmatch_flags = gm.fnmatch_flags;
       }
     return *this;
   }
 
-  ~glob_match (void) { }
+  ~glob_match (void) = default;
 
   void set_pattern (const std::string& p) { pat = p; }
 
   void set_pattern (const string_vector& p) { pat = p; }
 
   bool match (const std::string& str) const;
 
   Array<bool> match (const string_vector& str) const
diff --git a/liboctave/util/lo-array-errwarn.h b/liboctave/util/lo-array-errwarn.h
--- a/liboctave/util/lo-array-errwarn.h
+++ b/liboctave/util/lo-array-errwarn.h
@@ -42,17 +42,17 @@ namespace octave
   {
   public:
 
     index_exception (const std::string& index_arg, octave_idx_type nd_arg = 0,
                      octave_idx_type dim_arg = -1, const char *var_arg = "")
       : index (index_arg), nd (nd_arg), dim (dim_arg), var (var_arg)
     { }
 
-    ~index_exception (void) { }
+    ~index_exception (void) = default;
 
     // Erroneous index value.  Called in what, and by external code
     // (e.g., nth_element) to make a custom error message.
     std::string idx (void) const { return index; }
 
     // details set by subclass.
     virtual std::string details (void) const = 0;
 
diff --git a/liboctave/util/lo-regexp.h b/liboctave/util/lo-regexp.h
--- a/liboctave/util/lo-regexp.h
+++ b/liboctave/util/lo-regexp.h
@@ -162,17 +162,17 @@ namespace octave
             x_freespacing = o.x_freespacing;
             x_lineanchors = o.x_lineanchors;
             x_once = o.x_once;
           }
 
         return *this;
       }
 
-      ~opts (void) { }
+      ~opts (void) = default;
 
       void case_insensitive (bool val) { x_case_insensitive = val; }
       void dotexceptnewline (bool val) { x_dotexceptnewline = val; }
       void emptymatch (bool val) { x_emptymatch = val; }
       void freespacing (bool val) { x_freespacing = val; }
       void lineanchors (bool val) { x_lineanchors = val; }
       void once (bool val) { x_once = val; }
 
@@ -251,17 +251,17 @@ namespace octave
           {
             base_list<match_element>::operator = (rx_lst);
             named_pats = rx_lst.named_pats;
           }
 
         return *this;
       }
 
-      ~match_data (void) { }
+      ~match_data (void) = default;
 
       string_vector named_patterns (void) { return named_pats; }
 
     private:
 
       string_vector named_pats;
     };
 
diff --git a/liboctave/util/oct-mutex.h b/liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h
+++ b/liboctave/util/oct-mutex.h
@@ -32,17 +32,17 @@ class octave_mutex;
 class
 octave_base_mutex
 {
 public:
   friend class octave_mutex;
 
   octave_base_mutex (void) : count (1) { }
 
-  virtual ~octave_base_mutex (void) { }
+  virtual ~octave_base_mutex (void) = default;
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
   virtual bool try_lock (void);
 
 private:
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -61,17 +61,17 @@ namespace octave
           m_initialized = dp.m_initialized;
           m_expanded_path = dp.m_expanded_path;
           m_path_elements = dp.m_path_elements;
         }
 
       return *this;
     }
 
-    ~directory_path (void) { }
+    ~directory_path (void) = default;
 
     void set (const std::string& s)
     {
       m_initialized = false;
       m_orig_path = s;
       init ();
     }
 
diff --git a/liboctave/util/str-vec.h b/liboctave/util/str-vec.h
--- a/liboctave/util/str-vec.h
+++ b/liboctave/util/str-vec.h
@@ -69,17 +69,17 @@ public:
   string_vector& operator = (const string_vector& s)
   {
     if (this != &s)
       Array<std::string>::operator = (s);
 
     return *this;
   }
 
-  ~string_vector (void) { }
+  ~string_vector (void) = default;
 
   bool empty (void) const { return numel () == 0; }
 
   octave_idx_type max_length (void) const
   {
     octave_idx_type n = numel ();
     octave_idx_type longest = 0;
 
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -65,17 +65,17 @@ namespace octave
         ascii_mode (false), ok (true), errmsg (), curr_istream (&std::cin),
         curr_ostream (&os) { }
 
     base_url_transfer (const std::string& url, std::ostream& os)
       : count (1), host_or_url (url), valid (false), ftp (false),
         ascii_mode (false), ok (true), errmsg (),
         curr_istream (&std::cin), curr_ostream (&os) { }
 
-    virtual ~base_url_transfer (void) { }
+    virtual ~base_url_transfer (void) = default;
 
     bool is_valid (void) const { return valid; }
 
     bool good (void) const { return valid && ok; }
 
     virtual void perform (void) { }
 
     virtual std::string lasterror (void) const { return errmsg; }
