# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452013028 28800
#      Tue Jan 05 08:57:08 2016 -0800
# Node ID b4d6e7cd28db81b54b8101576ce28edb662b0739
# Parent  b432e7bb3cbdf001e2ccf55476d48a00eba94205
maint: Avoid GCC_ATTR_RETURN in typedef which clang can't compile.

* lo-error.h: Remove GCC_ATTR_NORETURN from typedef for liboctave_error_handler
and liboctave_error_with_id_handler.
* lo-error.h (current_liboctave_error_handler,
current_liboctave_error_with_id_handler): Add GCC_ATTR_RETURN to the
 declaration of global variables.
* lo-error.h (set_liboctave_error_handler, set_liboctave_error_with_id_handler):
Add GCC_ATTR_NO_RETURN to argument passed in to function.

* lo-error.c (current_liboctave_error_handler,
current_liboctave_error_with_id_handler, set_liboctave_error_handler,
set_liboctave_error_with_id_handler): Add GCC_ATTR_NO_RETURN to variables and
functions whose prototypes were changed in lo-error.h.

* octave.cc (lo_error_handler, lo_error_with_id_handler): Add GCC_ATTR_NORETURN
to functions to match prototype of set_liboctave_error_XXX_handler.

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -451,28 +451,28 @@ execute_command_line_file (const std::st
 
   std::string context;
   bool verbose = false;
   bool require_file = true;
 
   safe_source_file (fname, context, verbose, require_file, "octave");
 }
 
-static void
+GCC_ATTR_NORETURN static void
 lo_error_handler (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror_with_cfn (fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
 }
 
-static void
+GCC_ATTR_NORETURN static void
 lo_error_with_id_handler (const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror_with_id_cfn (id, fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
diff --git a/liboctave/cruft/misc/lo-error.c b/liboctave/cruft/misc/lo-error.c
--- a/liboctave/cruft/misc/lo-error.c
+++ b/liboctave/cruft/misc/lo-error.c
@@ -29,21 +29,21 @@ along with Octave; see the file COPYING.
 #include <stdlib.h>
 
 #include "lo-error.h"
 
 /* Having this file in this directory is a kluge to avoid unresolved
    symbol errors when creating shared versions of libcruft. */
 
 /* Pointer to the current error handling function. */
-liboctave_error_handler current_liboctave_error_handler
+GCC_ATTR_NORETURN liboctave_error_handler current_liboctave_error_handler
   = liboctave_fatal;
 
 /* Pointer to the current error_with_id handling function. */
-liboctave_error_with_id_handler current_liboctave_error_with_id_handler
+GCC_ATTR_NORETURN liboctave_error_with_id_handler current_liboctave_error_with_id_handler
   = liboctave_fatal_with_id;
 
 /* Pointer to the current warning handler. */
 liboctave_warning_handler current_liboctave_warning_handler
   = liboctave_warning;
 
 /* Pointer to the current warning_with_id handler. */
 liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler
@@ -56,26 +56,26 @@ verror (const char *name, const char *fm
     fprintf (stderr, "%s: ", name);
 
   vfprintf (stderr, fmt, args);
   fprintf (stderr, "\n");
   fflush (stderr);
 }
 
 void
-set_liboctave_error_handler (liboctave_error_handler f)
+set_liboctave_error_handler (GCC_ATTR_NORETURN liboctave_error_handler f)
 {
   if (f)
     current_liboctave_error_handler = f;
   else
     current_liboctave_error_handler = liboctave_fatal;
 }
 
 void
-set_liboctave_error_with_id_handler (liboctave_error_with_id_handler f)
+set_liboctave_error_with_id_handler (GCC_ATTR_NORETURN liboctave_error_with_id_handler f)
 {
   if (f)
     current_liboctave_error_with_id_handler = f;
   else
     current_liboctave_error_with_id_handler = liboctave_fatal_with_id;
 }
 
 void
diff --git a/liboctave/cruft/misc/lo-error.h b/liboctave/cruft/misc/lo-error.h
--- a/liboctave/cruft/misc/lo-error.h
+++ b/liboctave/cruft/misc/lo-error.h
@@ -31,37 +31,37 @@ GCC_ATTR_NORETURN extern void liboctave_
 
 GCC_ATTR_NORETURN extern
 void liboctave_fatal_with_id (const char *id, const char *fmt, ...);
 
 extern void liboctave_warning (const char *fmt, ...);
 
 extern void liboctave_warning_with_id (const char *id, const char *fmt, ...);
 
-typedef GCC_ATTR_NORETURN void (*liboctave_error_handler) (const char *, ...);
+typedef void (*liboctave_error_handler) (const char *, ...);
 
-typedef GCC_ATTR_NORETURN void (*liboctave_error_with_id_handler) (const char *, const char *, ...);
+typedef void (*liboctave_error_with_id_handler) (const char *, const char *, ...);
 
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *, ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
-CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
+GCC_ATTR_NORETURN CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
 
-CRUFT_API extern liboctave_error_with_id_handler current_liboctave_error_with_id_handler;
+GCC_ATTR_NORETURN CRUFT_API extern liboctave_error_with_id_handler current_liboctave_error_with_id_handler;
 
 CRUFT_API extern liboctave_warning_handler current_liboctave_warning_handler;
 
 CRUFT_API extern liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler;
 
-CRUFT_API extern void set_liboctave_error_handler (liboctave_error_handler f);
+CRUFT_API extern void set_liboctave_error_handler (GCC_ATTR_NORETURN liboctave_error_handler f);
 
-CRUFT_API extern void set_liboctave_error_with_id_handler (liboctave_error_with_id_handler f);
+CRUFT_API extern void set_liboctave_error_with_id_handler (GCC_ATTR_NORETURN liboctave_error_with_id_handler f);
 
 CRUFT_API extern void set_liboctave_warning_handler (liboctave_warning_handler f);
 
 CRUFT_API extern void set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);
 
 #ifdef __cplusplus
 }
 #endif
