# HG changeset patch
# User jwe
# Date 1026880362 0
#      Wed Jul 17 04:32:42 2002 +0000
# Node ID ee0304212be0c3d258835d9c0206c745af511460
# Parent  a41827ec56771666ce59b020032029dd05b7406f
[project @ 2002-07-17 04:32:42 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,20 @@
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* base-de.h (base_diff_eqn::stop_time,
+	base_diff_eqn::stop_time_set, base_diff_eqn::restart,
+	base_diff_eqn::integration_error): New data members.
+	(base_diff_eqn::set_stop_time, base_diff_eqn::clear_stop_time,
+	base_diff_eqn::force_restart, base_diff_eqn::integration_ok,
+	base_diff_eqn::error_message): New member functions.
+	* LSODE.h, LSODE.cc, DASSL.h, DASSL.cc, DASPK.h, DASPK.cc,
+	DASRT.h, DASRT.cc, ODESSA.h, ODESSA.cc: Delete corresponding data
+	members and functions.
+
 	* DASRT.h (DASRT::set_ng, DASRT::get_ng): Delete
 	* DASRT.cc (DASRT::DASRT): Set ng here.
 	(DASRT::integrate): Don't forget to set nn.
 
 	* DAEFunc.h (DAEFunc): Jacobian function now follows format of DASSL.
 	* DASSL.cc (ddassl_j): Make it work.
 	* DASPK.cc (ddaspk_j): Likewise.
 
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -59,83 +59,54 @@ int F77_FUNC (ddaspk, DDASPK) (daspk_fcn
 			      daspk_jac_ptr, daspk_psol_ptr);
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 static int nn;
 
 DASPK::DASPK (void) : DAE ()
 {
-  stop_time_set = 0;
-  stop_time = 0.0;
-
   sanity_checked = 0;
 
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 DASPK::DASPK (const ColumnVector& state, double time, DAEFunc& f)
   : DAE (state, time, f)
 {
   n = size ();
 
-  stop_time_set = 0;
-  stop_time = 0.0;
-
   sanity_checked = 0;
 
   info.resize (20);
 
   for (int i = 0; i < 20; i++)
     info.elem (i) = 0;
 }
 
 DASPK::DASPK (const ColumnVector& state, const ColumnVector& deriv,
 	  double time, DAEFunc& f)
   : DAE (state, deriv, time, f)
 {
   n = size ();
 
-  stop_time_set = 0;
-  stop_time = 0.0;
-
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   sanity_checked = 0;
 
   info.resize (20);
 
   for (int i = 0; i < 20; i++)
     info.elem (i) = 0;
 }
 
-void
-DASPK::force_restart (void)
-{
-  restart = 1;
-  integration_error = 0;
-}
-
-void
-DASPK::set_stop_time (double tt)
-{
-  stop_time_set = 1;
-  stop_time = tt;
-}
-
-void
-DASPK::clear_stop_time (void)
-{
-  stop_time_set = 0;
-}
-
 int
 ddaspk_f (const double& time, const double *state, const double *deriv,
 	  const double&, double *delta, int& ires, double *, int *)
 {
   ColumnVector tmp_deriv (nn);
   ColumnVector tmp_state (nn);
   ColumnVector tmp_delta (nn);
 
@@ -202,17 +173,17 @@ ddaspk_j (const double& time, const doub
 
 ColumnVector
 DASPK::do_integrate (double tout)
 {
   ColumnVector retval;
 
   if (restart)
     {
-      restart = 0;
+      restart = false;
       info.elem (0) = 0;
     }
 
   liw = 40 + n;
   if (info(9) == 1 || info(9) == 3)
     liw += n;
   if (info (10) == 1 || info(15) == 1)
     liw += n;
@@ -224,17 +195,17 @@ DASPK::do_integrate (double tout)
     lrw += n;
 
   if (iwork.length () != liw)
     iwork.resize (liw);
 
   if (rwork.length () != lrw)
     rwork.resize (lrw);
 
-  integration_error = 0;
+  integration_error = false;
 
   if (DAEFunc::jacobian_function ())
     info.elem (4) = 1;
   else
     info.elem (4) = 0;
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
@@ -249,17 +220,17 @@ DASPK::do_integrate (double tout)
 
       ColumnVector res = (*user_fun) (x, xdot, t, ires);
 
       if (res.length () != x.length ())
 	{
 	  (*current_liboctave_error_handler)
 	    ("daspk: inconsistent sizes for state and residual vectors");
 
-	  integration_error = 1;
+	  integration_error = true;
 	  return retval;
 	}
 
       sanity_checked = 1;
     }
   
   if (stop_time_set)
     {
@@ -299,17 +270,17 @@ DASPK::do_integrate (double tout)
 
   F77_XFCN (ddaspk, DDASPK, (ddaspk_f, n, t, px, pxdot, tout, pinfo,
 			     rel_tol, abs_tol, idid, prwork, lrw,
 			     piwork, liw, dummy, idummy, ddaspk_j,
 			     ddaspk_psol));
 
   if (f77_exception_encountered)
     {
-      integration_error = 1;
+      integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in daspk");
     }
   else
     {
       switch (idid)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
@@ -341,17 +312,17 @@ DASPK::do_integrate (double tout)
 	case -11: // IRES equal to -2 was encountered and control is being
 		  // returned to the calling program.
 	case -12: // DDASPK failed to compute the initial YPRIME.
 	case -33: // The code has encountered trouble from which it cannot
 		  // recover. A message is printed explaining the trouble
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
 	default:
-	  integration_error = 1;
+	  integration_error = true;
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -500,13 +471,28 @@ DASPK::integrate (const ColumnVector& to
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
 
+std::string
+DASPK::error_message (void) const
+{
+  std::string retval;
+
+  switch (idid)
+    {
+    default:
+      retval = "unknown error state";
+      break;
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -115,40 +115,32 @@ public:
 
   DASPK (const ColumnVector& x, double time, DAEFunc& f);
 
   DASPK (const ColumnVector& x, const ColumnVector& xdot,
 	 double time, DAEFunc& f);
 
   ~DASPK (void) { }
 
-  void force_restart (void);
-
-  void set_stop_time (double t);
-  void clear_stop_time (void);
-
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit); 
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out);
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out,
 		    const ColumnVector& tcrit); 
 
+  std::string error_message (void) const;
+
 private:
 
-  double stop_time;
-  int stop_time_set;
-
   int n;
-  int integration_error;
-  int restart;
   int liw;  
   int lrw;
   int idid;
   int sanity_checked;
   Array<int> info;
   Array<int> iwork;
   Array<double> rwork;
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -142,20 +142,16 @@ ddasrt_g (const int& neq, const double& 
 
   return 0;
 }
 
 DASRT::DASRT (void)
   : DAERT ()
 {
   initialized = false;
-  restart = false;
-
-  stop_time_set = false;
-  stop_time = 0.0;
 
   sanity_checked = false;
 
   info.resize (30, 0);
 
   ng = 0;
 
   liw = 0;
@@ -163,20 +159,16 @@ DASRT::DASRT (void)
 }
 
 DASRT::DASRT (const ColumnVector& state, double time, DAERTFunc& f)
   : DAERT (state, time, f)
 {
   n = size ();
 
   initialized = false;
-  restart = false;
-
-  stop_time_set = false;
-  stop_time = 0.0;
 
   liw = 20 + n;
   lrw = 50 + 9*n + n*n;
 
   sanity_checked = false;
 
   info.resize (15, 0);
 
@@ -195,20 +187,16 @@ DASRT::DASRT (const ColumnVector& state,
 
 DASRT::DASRT (const ColumnVector& state, const ColumnVector& deriv,
 	      double time, DAERTFunc& f)
   : DAERT (state, deriv, time, f)
 {
   n = size ();
 
   initialized = false;
-  restart = false;
-
-  stop_time_set = false;
-  stop_time = 0.0;
 
   sanity_checked = false;
 
   info.resize (30, 0);
 
   DAERTFunc::DAERTConstrFunc tmp_csub = DAERTFunc::constraint_function ();
   
   if (tmp_csub)
@@ -221,36 +209,16 @@ DASRT::DASRT (const ColumnVector& state,
 
   liw = 20 + n + 1000;
   lrw = 50 + 9*n + n*n + 1000;
 
   jroot.resize (ng, 1);
 }
 
 void
-DASRT::force_restart (void)
-{
-  restart = true;
-  integration_error = false;
-}
-
-void
-DASRT::set_stop_time (double t)
-{
-  stop_time_set = true;
-  stop_time = t;
-}
-
-void
-DASRT::clear_stop_time (void)
-{
-  stop_time_set = false;
-}
-
-void
 DASRT::integrate (double tout)
 {
   DASRT_result retval;
 
   if (! initialized)
     {
       info(0) = 0;
 
@@ -413,18 +381,16 @@ DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
   DASRT_result retval;
 
   Matrix x_out;
   Matrix xdot_out;
   ColumnVector t_out = tout;
 
-  int oldj = 0;
-
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
 
       for (int i = 0; i < n; i++)
@@ -582,13 +548,28 @@ DASRT::integrate (const ColumnVector& to
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
 
+std::string
+DASRT::error_message (void) const
+{
+  std::string retval;
+
+  switch (idid)
+    {
+    default:
+      retval = "unknown error state";
+      break;
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -160,39 +160,29 @@ public:
 
   DASRT (const ColumnVector& state, double time, DAERTFunc& f);
 
   DASRT (const ColumnVector& state, const ColumnVector& deriv,
 	 double time, DAERTFunc& f);
 
   ~DASRT (void) { }
 
-  void force_restart (void);
-
-  void set_stop_time (double t);
-  void clear_stop_time (void);
-
   DASRT_result integrate (const ColumnVector& tout);
 
   DASRT_result integrate (const ColumnVector& tout,
 			  const ColumnVector& tcrit); 
 
+  std::string error_message (void) const;
+
 private:
 
   bool initialized;
 
   bool sanity_checked;
 
-  bool stop_time_set;
-  double stop_time;
-
-  bool restart;
-
-  bool integration_error;
-
   int liw;  
   int lrw;
   int idid;
 
   int n;
   int ng;
 
   Array<int> info;
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -51,89 +51,60 @@ int F77_FUNC (ddassl, DDASSL) (dassl_fcn
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 
 static int nn;
 
 DASSL::DASSL (void) : DAE ()
 {
-  stop_time_set = false;
-  stop_time = 0.0;
-
   liw = 0;
   lrw = 0;
 
   sanity_checked = false;
 
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, double time, DAEFunc& f)
   : DAE (state, time, f)
 {
   n = size ();
 
-  stop_time_set = false;
-  stop_time = 0.0;
-
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
   sanity_checked = false;
 
   info.resize (15, 0);
 }
 
 DASSL::DASSL (const ColumnVector& state, const ColumnVector& deriv,
 	      double time, DAEFunc& f)
   : DAE (state, deriv, time, f)
 {
   n = size ();
 
-  stop_time_set = false;
-  stop_time = 0.0;
-
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
   sanity_checked = false;
 
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
-void
-DASSL::force_restart (void)
-{
-  restart = 1;
-  integration_error = false;
-}
-
-void
-DASSL::set_stop_time (double tt)
-{
-  stop_time_set = true;
-  stop_time = tt;
-}
-
-void
-DASSL::clear_stop_time (void)
-{
-  stop_time_set = false;
-}
-
 int
 ddassl_f (const double& time, const double *state, const double *deriv,
 	  double *delta, int& ires, double *, int *)
 {
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_deriv (nn);
   ColumnVector tmp_state (nn);
@@ -187,17 +158,17 @@ ddassl_j (const double& time, const doub
 
 ColumnVector
 DASSL::do_integrate (double tout)
 {
   ColumnVector retval;
 
   if (restart)
     {
-      restart = 0;
+      restart = false;
       info.elem (0) = 0;
     }
 
   if (iwork.length () != liw)
     iwork.resize (liw);
 
   if (rwork.length () != lrw)
     rwork.resize (lrw);
@@ -472,13 +443,28 @@ DASSL::integrate (const ColumnVector& to
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
 
+std::string
+DASSL::error_message (void) const
+{
+  std::string retval;
+
+  switch (idid)
+    {
+    default:
+      retval = "unknown error state";
+      break;
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -115,44 +115,36 @@ public:
 
   DASSL (const ColumnVector& state, double time, DAEFunc& f);
 
   DASSL (const ColumnVector& state, const ColumnVector& xdot,
 	 double time, DAEFunc& f);
 
   ~DASSL (void) { }
 
-  void force_restart (void);
-
-  void set_stop_time (double t);
-  void clear_stop_time (void);
-
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit); 
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out);
 
   Matrix integrate (const ColumnVector& tout, Matrix& xdot_out,
 		    const ColumnVector& tcrit); 
 
+  std::string error_message (void) const;
+
 private:
 
-  double stop_time;
-  int stop_time_set;
-
   int n;
-  int integration_error;
-  int restart;
   int liw;  
   int lrw;
   int idid;
-  int sanity_checked;
+  bool sanity_checked;
   Array<int> info;
   Array<int> iwork;
   Array<double> rwork;
 
   friend int ddassl_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
   friend int ddassl_f (double *time, double *state, double *deriv,
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -65,64 +65,33 @@ int F77_FUNC (lsode, LSODE) (lsode_fcn_p
 static ODEFunc::ODERHSFunc user_fun;
 static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 LSODE::LSODE (void) : ODE (), LSODE_options ()
 {
   n = size ();
 
-  stop_time_set = 0;
-  stop_time = 0.0;
-
-  integration_error = 0;
-  restart = 1;
-
   istate = 1;
   itask = 1;
   iopt = 0;
 
-  sanity_checked = 0;
+  sanity_checked = false;
 }
 
 LSODE::LSODE (const ColumnVector& state, double time, const ODEFunc& f)
   : ODE (state, time, f), LSODE_options ()
 {
   n = size ();
 
-  stop_time_set = 0;
-  stop_time = 0.0;
-
-  integration_error = 0;
-  restart = 1;
-
   istate = 1;
   itask = 1;
   iopt = 0;
 
-  sanity_checked = 0;
-}
-
-void
-LSODE::force_restart (void)
-{
-  restart = 1;
-}
-
-void
-LSODE::set_stop_time (double time)
-{
-  stop_time_set = 1;
-  stop_time = time;
-}
-
-void
-LSODE::clear_stop_time (void)
-{
-  stop_time_set = 0;
+  sanity_checked = false;
 }
 
 int
 lsode_f (const int& neq, const double& time, double *,
 	 double *deriv, int& ierr) 
 {
   ColumnVector tmp_deriv;
 
@@ -164,17 +133,17 @@ lsode_j (const int& neq, const double& t
 
 ColumnVector
 LSODE::do_integrate (double tout)
 {
   ColumnVector retval;
 
   if (restart)
     {
-      restart = 0;
+      restart = false;
       istate = 1;
     }
 
   if (integration_method () == "stiff")
     {
       if (jac)
 	method_flag = 21;
       else
@@ -202,17 +171,17 @@ LSODE::do_integrate (double tout)
   if (rwork.length () != lrw)
     {
       rwork.resize (lrw);
 
       for (int i = 4; i < 9; i++)
 	rwork.elem (i) = 0;
     }
 
-  integration_error = 0;
+  integration_error = false;
 
   double *xp = x.fortran_vec ();
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_x = &x;
@@ -223,21 +192,21 @@ LSODE::do_integrate (double tout)
     {
       ColumnVector xdot = (*user_fun) (x, t);
 
       if (x.length () != xdot.length ())
 	{
 	  (*current_liboctave_error_handler)
 	    ("lsode: inconsistent sizes for state and derivative vectors");
 
-	  integration_error = 1;
+	  integration_error = true;
 	  return retval;
 	}
 
-      sanity_checked = 1;
+      sanity_checked = true;
     }
 
   if (stop_time_set)
     {
       itask = 4;
       rwork.elem (0) = stop_time;
       iopt = 1;
     }
@@ -258,17 +227,17 @@ LSODE::do_integrate (double tout)
     itol = 1;
   else if (abs_tol_len == n)
     itol = 2;
   else
     {
       (*current_liboctave_error_handler)
 	("lsode: inconsistent sizes for state and absolute tolerance vectors");
 
-      integration_error = 1;
+      integration_error = true;
       return retval;
     }
 
   if (initial_step_size () >= 0.0)
     {
       rwork.elem (4) = initial_step_size ();
       iopt = 1;
     }
@@ -296,33 +265,33 @@ LSODE::do_integrate (double tout)
   double *prwork = rwork.fortran_vec ();
 
   F77_XFCN (lsode, LSODE, (lsode_f, n, xp, t, tout, itol, rel_tol,
 			   pabs_tol, itask, istate, iopt, prwork, lrw,
 			   piwork, liw, lsode_j, method_flag));
 
   if (f77_exception_encountered)
     {
-      integration_error = 1;
+      integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in lsode");
     }
   else
     {
       switch (istate)
 	{
-	case -13: // Return requested in user-supplied function.
+	case -13: // return requested in user-supplied function.
 	case -6:  // error weight became zero during problem. (solution
 	          // component i vanished, and atol or atol(i) = 0.)
 	case -5:  // repeated convergence failures (perhaps bad jacobian
 	          // supplied or wrong choice of mf or tolerances).
 	case -4:  // repeated error test failures (check all inputs).
 	case -3:  // illegal input detected (see printed message).
 	case -2:  // excess accuracy requested (tolerances too small).
 	case -1:  // excess work done on this call (perhaps wrong mf).
-	  integration_error = 1;
+	  integration_error = true;
 	  break;
 
 	case 2:  // lsode was successful
 	  retval = x;
 	  t = tout;
 	  break;
 	  
 	default: // Error?
@@ -438,43 +407,43 @@ LSODE::do_integrate (const ColumnVector&
       if (n_crit > 0)
 	{
 	  int i_crit = 0;
 	  int i_out = 1;
 	  double next_crit = tcrit.elem (0);
 	  double next_out;
 	  while (i_out < n_out)
 	    {
-	      int do_restart = 0;
+	      bool do_restart = false;
 
 	      next_out = tout.elem (i_out);
 	      if (i_crit < n_crit)
 		next_crit = tcrit.elem (i_crit);
 
 	      int save_output;
 	      double t_out;
 
 	      if (next_crit == next_out)
 		{
 		  set_stop_time (next_crit);
 		  t_out = next_out;
 		  save_output = 1;
 		  i_out++;
 		  i_crit++;
-		  do_restart = 1;
+		  do_restart = true;
 		}
 	      else if (next_crit < next_out)
 		{
 		  if (i_crit < n_crit)
 		    {
 		      set_stop_time (next_crit);
 		      t_out = next_crit;
 		      save_output = 0;
 		      i_crit++;
-		      do_restart = 1;
+		      do_restart = true;
 		    }
 		  else
 		    {
 		      clear_stop_time ();
 		      t_out = next_out;
 		      save_output = 1;
 		      i_out++;
 		    }
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -148,50 +148,38 @@ public:
   LSODE (void);
 
   LSODE (int n);
   
   LSODE (const ColumnVector& state, double time, const ODEFunc& f);
 
   ~LSODE (void) { }
 
-  void force_restart (void);
-
-  void set_stop_time (double t);
-  void clear_stop_time (void);
-
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
   int integration_state (void) const { return istate; }
 
-  bool integration_ok (void) const { return ! integration_error; }
-
   std::string error_message (void) const;
 
 private:
 
-  double stop_time;
-  int stop_time_set;
-
   int n;
-  int integration_error;
-  int restart;
   int method_flag;
   Array<int> iwork;
   Array<double> rwork;
   int istate;
   int itask;
   int iopt;
   int liw;
   int lrw;
-  int sanity_checked;
+  bool sanity_checked;
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
   friend int lsode_j (int *neq, double *t, double *y, int *ml, int *mu,
 		      double *pd, int *nrowpd);
 };
 
 #endif
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -171,21 +171,16 @@ odessa_b (int* neq, const double& t, dou
   return 0;
 }
 
 ODESSA::ODESSA (void) : ODES (), ODESSA_options ()
 {
   neq.resize(2);
   n = size ();
 
-  stop_time_set = false;
-  stop_time = 0.0;
-
-  integration_error = false;
-  restart = true;
   iopt.resize(4);
 
   istate = 1;
   itask = 1;
   iopt(0) = 0;
   isopt = 0;
   iopt(1) = isopt;
   npar = 0;
@@ -196,24 +191,16 @@ ODESSA::ODESSA (void) : ODES (), ODESSA_
 }
 
 ODESSA::ODESSA (const ColumnVector& state, double time, ODESFunc& f)
   : ODES (state, time, f), ODESSA_options ()
 {
   neq.resize(2);
   n = size ();
 
-  stop_time_set = false;
-  stop_time = 0.0;
- 
-  ODESFunc::operator = (f);
-
-  integration_error = false;
-  restart = true;
-
   iopt.resize(4);
   istate = 1;
   itask = 1;
   iopt(0) = 0;
   isopt = 0;
   iopt(1) = isopt;
 
   sanity_checked = false;
@@ -225,30 +212,24 @@ ODESSA::ODESSA (const ColumnVector& stat
   y.resize (n, 1, 0.0);
 }
 
 ODESSA::ODESSA (const ColumnVector& state, const ColumnVector& theta,
 		const Matrix& sensitivity_guess, double time, ODESFunc& f)
   : ODES (state, theta, time, f)
 {
   initialized = false;
-  restart = false;
 
   neq.resize(2);
   n = state.length();
   npar = theta.length();
 
   neq(0) = n;
   neq(1) = npar;
 
-  stop_time_set = false;
-  stop_time = 0.0;
-
-  ODESFunc::operator = (f);
-
   sx0 = sensitivity_guess;
   par.resize (npar);
 
   for (int i = 0; i < npar; i++)
     {
       par(i) = theta(i);
     }
 
@@ -262,35 +243,16 @@ ODESSA::ODESSA (const ColumnVector& stat
   iopt(0) = 0;
   isopt = 1;
   iopt(1) = isopt;
 
   y.resize (n, npar+1, 0.0);
 }
 
 void
-ODESSA::force_restart (void)
-{
-  restart = true;
-}
-
-void
-ODESSA::set_stop_time (double time)
-{
-  stop_time_set = true;
-  stop_time = time;
-}
-
-void
-ODESSA::clear_stop_time (void)
-{
-  stop_time_set = 0;
-}
-
-void
 ODESSA::integrate (double tout)
 {
   ODESSA_result retval;
   if (! initialized)
     {
       
       for (int i = 0; i < n; i++)
 	y(i,0) = x(i);
diff --git a/liboctave/ODESSA.h b/liboctave/ODESSA.h
--- a/liboctave/ODESSA.h
+++ b/liboctave/ODESSA.h
@@ -187,45 +187,31 @@ public:
 
   ODESSA (const ColumnVector& x, double time, ODESFunc& f);
 
   ODESSA (const ColumnVector& x, const ColumnVector& theta,
 	  const Matrix& sensitivity_guess, double time, ODESFunc& f);
 
   ~ODESSA (void) { }
 
-  void force_restart (void);
-
-  void set_stop_time (double t);
-  void clear_stop_time (void);
-
   ODESSA_result integrate (const ColumnVector& tout);
 
   ODESSA_result integrate (const ColumnVector& tout,
 			   const ColumnVector& tcrit); 
 
   int integration_state (void) const { return istate; }
 
-  bool integration_ok (void) const { return ! integration_error; }
-
   std::string error_message (void) const;
 
 private:
 
   bool initialized;
 
   bool sanity_checked;
 
-  bool stop_time_set;
-  double stop_time;
-
-  bool restart;
-
-  bool integration_error;
-
   int liw;  
   int lrw;
   int method_flag;
   Array<int> iwork;
   Array<double> rwork;
   int istate;
   int itask;
   Array<int> iopt;
diff --git a/liboctave/base-dae.h b/liboctave/base-dae.h
--- a/liboctave/base-dae.h
+++ b/liboctave/base-dae.h
@@ -53,26 +53,24 @@ public:
 	  xdot = a.xdot;
 	}
       return *this;
     }
 
   void initialize (const ColumnVector& x0, double t0)
     {
       base_diff_eqn::initialize (x0, t0);
-      xdot.resize (x0.length (), 0.0);
-      force_restart ();
+      xdot = ColumnVector (x0.length (), 0.0);
     }
 
   void initialize (const ColumnVector& x0, const ColumnVector& xdot0,
 		   double t0)
     {
       base_diff_eqn::initialize (x0, t0);
       xdot = xdot0;
-      force_restart ();
     }
 
   ColumnVector state_derivative (void) { return xdot; }
 
 protected:
 
   ColumnVector xdot;
 };
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -18,63 +18,96 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_base_de_h)
 #define octave_base_de_h 1
 
+#include <string>
+
 #include "dColVector.h"
 #include "dMatrix.h"
 
 class
 base_diff_eqn
 {
 public:
 
-  base_diff_eqn (void) : x (), t (0.0) { }
+  base_diff_eqn (void)
+    : x (), t (0.0), stop_time (0.0), stop_time_set (false),
+      restart (true), integration_error (false) { } 
 
-  base_diff_eqn (const ColumnVector& xx, double tt) : x (xx), t (tt) { }
+  base_diff_eqn (const ColumnVector& xx, double tt)
+    : x (xx), t (tt), stop_time (0.0), stop_time_set (false),
+      restart (true), integration_error (false) { }
 
-  base_diff_eqn (const base_diff_eqn& a) : x (a.x), t (a.t) { }
+  base_diff_eqn (const base_diff_eqn& a)
+    : x (a.x), t (a.t), stop_time (0.0), stop_time_set (false),
+      restart (true), integration_error (false) { }
 
   virtual ~base_diff_eqn (void) { }
 
   base_diff_eqn& operator = (const base_diff_eqn& a)
     {
       if (this != &a)
 	{
 	  x = a.x;
 	  t = a.t;
+	  stop_time = a.stop_time;
+	  stop_time_set = a.stop_time_set;
+	  restart = a.restart;
+	  integration_error = a.integration_error;
 	}
+
       return *this;
     }
 
-  // There must be a way for us to force the integration to restart.
-
-  virtual void force_restart (void) = 0;
-
   void initialize (const ColumnVector& x0, double t0)
     {
       x = x0;
       t = t0;
+      integration_error = false;
       force_restart ();
     }
 
   int size (void) const { return x.capacity (); }
 
   ColumnVector state (void) const { return x; }
 
   double time (void) const { return t; }
 
+  void set_stop_time (double t)
+    {
+      stop_time_set = true;
+      stop_time = t;
+    }
+
+  void clear_stop_time (void) { stop_time_set = false; }
+
+  virtual void force_restart (void) { restart = true; }
+
+  bool integration_ok (void) const { return ! integration_error; }
+
+  virtual std::string error_message (void) const = 0;
+
 protected:
 
   ColumnVector x;
+
   double t;
+
+  double stop_time;
+
+  bool stop_time_set;
+
+  bool restart;
+
+  bool integration_error;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
