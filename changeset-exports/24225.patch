# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510343676 18000
#      Fri Nov 10 14:54:36 2017 -0500
# Node ID b8cb5a05955e2df0488cc14710faee5a6ff2a5b4
# Parent  ff81c6772664b90153d98d1d4378bf17145d9607
improve on lto fix made in changeset ff81c6772664

* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::hdf5_save_type,
OCTAVE_VALUE_INT_MATRIX_T::hdf5_save_type,
OCTAVE_VALUE_INT_MATRIX_T::hdf5_save_type,
OCTAVE_VALUE_INT_MATRIX_T::hdf5_save_type):
New static data members.
* ov-int16.cc, ov-int32.cc, ov-int64.cc, ov-int8.cc, ov-uint16.cc,
ov-uint32.cc, ov-uint64.cc, ov-uint8.cc: Initialize new static data
members.  Don't define load_hdf5 and save_hdf5.

* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::save_hdf5,
OCTAVE_VALUE_INT_MATRIX_T::load_hdf5,
OCTAVE_VALUE_INT_MATRIX_T::save_hdf5,
OCTAVE_VALUE_INT_MATRIX_T::load_hdf5): Use new static hdf5_save_type
and forward to internal functions.

diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -51,53 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_int16_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_int16_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<int16NDArray>;
 
 template class octave_base_int_matrix<int16NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_matrix,
                                      "int16 matrix", "int16");
 
-
-bool
-octave_int16_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int16_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_int16>;
 
 template class octave_base_int_scalar<octave_int16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_scalar,
                                      "int16 scalar", "int16");
-
-bool
-octave_int16_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int16_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -51,51 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_int32_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_int32_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<int32NDArray>;
 
 template class octave_base_int_matrix<int32NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_matrix,
                                      "int32 matrix", "int32");
-bool
-octave_int32_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int32_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
 
 template class octave_base_scalar<octave_int32>;
 
 template class octave_base_int_scalar<octave_int32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_scalar,
                                      "int32 scalar", "int32");
-
-bool
-octave_int32_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int32_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -51,52 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_int64_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_int64_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<int64NDArray>;
 
 template class octave_base_int_matrix<int64NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_matrix,
                                      "int64 matrix", "int64");
 
-bool
-octave_int64_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int64_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_int64>;
 
 template class octave_base_int_scalar<octave_int64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_scalar,
                                      "int64 scalar", "int64");
-
-bool
-octave_int64_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int64_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -51,52 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_int8_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_int8_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<int8NDArray>;
 
 template class octave_base_int_matrix<int8NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_matrix,
                                      "int8 matrix", "int8");
 
-bool
-octave_int8_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                               bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int8_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_int8>;
 
 template class octave_base_int_scalar<octave_int8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_scalar,
                                      "int8 scalar", "int8");
-
-bool
-octave_int8_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                               bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_int8_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -364,22 +364,30 @@ public:
           // FIXME: we should be able to do better than converting to
           // double here.
           octave_matrix m (array_value ());
           return m.map (umap);
         }
       }
   }
 
-  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag);
+  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag)
+  {
+    return save_hdf5_internal (loc_id, hdf5_save_type, name, flag);
+  }
 
-  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+  bool load_hdf5 (octave_hdf5_id loc_id, const char *name)
+  {
+    return load_hdf5_internal (loc_id, hdf5_save_type, name);
+  }
 
 private:
 
+  static octave_hdf5_id hdf5_save_type;
+
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 class
 OCTINTERP_API
 OCTAVE_VALUE_INT_SCALAR_T
   : public octave_base_int_scalar<OCTAVE_INT_T>
 {
@@ -671,16 +679,24 @@ public:
       default:
         {
           octave_scalar m (scalar_value ());
           return m.map (umap);
         }
       }
   }
 
-  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag);
+  bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool flag)
+  {
+    return save_hdf5_internal (loc_id, hdf5_save_type, name, flag);
+  }
 
-  bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
+  bool load_hdf5 (octave_hdf5_id loc_id, const char *name)
+  {
+    return load_hdf5_internal (loc_id, hdf5_save_type, name);
+  }
 
- private:
+private:
+
+  static octave_hdf5_id hdf5_save_type;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -52,52 +52,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_uint16_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_uint16_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<uint16NDArray>;
 
 template class octave_base_int_matrix<uint16NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_matrix,
                                      "uint16 matrix", "uint16");
 
-bool
-octave_uint16_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint16_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_uint16>;
 
 template class octave_base_int_scalar<octave_uint16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_scalar,
                                      "uint16 scalar", "uint16");
-
-bool
-octave_uint16_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint16_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -51,52 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_uint32_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_uint32_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<uint32NDArray>;
 
 template class octave_base_int_matrix<uint32NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_matrix,
                                      "uint32 matrix", "uint32");
 
-bool
-octave_uint32_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint32_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_uint32>;
 
 template class octave_base_int_scalar<octave_uint32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_scalar,
                                      "uint32 scalar", "uint32");
-
-bool
-octave_uint32_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint32_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -51,52 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_uint64_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_uint64_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<uint64NDArray>;
 
 template class octave_base_int_matrix<uint64NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_matrix,
                                      "uint64 matrix", "uint64");
 
-bool
-octave_uint64_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint64_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_uint64>;
 
 template class octave_base_int_scalar<octave_uint64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_scalar,
                                      "uint64 scalar", "uint64");
-
-bool
-octave_uint64_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                 bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint64_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -51,52 +51,29 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
+octave_hdf5_id octave_uint8_matrix::hdf5_save_type = HDF5_SAVE_TYPE;
+octave_hdf5_id octave_uint8_scalar::hdf5_save_type = HDF5_SAVE_TYPE;
+
 // Prevent implicit instantiations on some systems (Windows, others?)
 // that can lead to duplicate definitions of static data members.
 
 extern template class OCTINTERP_API octave_base_scalar<double>;
 
 template class octave_base_matrix<uint8NDArray>;
 
 template class octave_base_int_matrix<uint8NDArray>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_matrix,
                                      "uint8 matrix", "uint8");
 
-bool
-octave_uint8_matrix::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint8_matrix::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
-
 template class octave_base_scalar<octave_uint8>;
 
 template class octave_base_int_scalar<octave_uint8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_scalar,
                                      "uint8 scalar", "uint8");
-
-bool
-octave_uint8_scalar::save_hdf5 (octave_hdf5_id loc_id, const char *name,
-                                bool flag)
-{
-  return save_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name, flag);
-}
-
-bool
-octave_uint8_scalar::load_hdf5 (octave_hdf5_id loc_id, const char *name)
-{
-  return load_hdf5_internal (loc_id, HDF5_SAVE_TYPE, name);
-}
