# HG changeset patch
# User jwe
# Date 1077574232 0
#      Mon Feb 23 22:10:32 2004 +0000
# Node ID 19b8225bdaa2f2c4e4b3f32fb8a39cc96753561e
# Parent  962457f25a6df5ef3da5d3b76c3cdd42d0ca3d3b
[project @ 2004-02-23 22:10:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,33 @@
+2004-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-io.cc (Fftell): Return long integer instead of streamoff_array.
+	(do_stream_open): Create octave_stdiostream instead of octave_fstream.
+
+	* oct-fstrm.cc (octave_fstream::seek, octave_fstream::tell):
+	Always fail.  Signatures now match C library functionsb.
+	* oct-iostrm.cc (octave_base_iostream::seek,
+	octave_base_iostream::tell): Likewise.
+	* oct-strstrm.cc (octave_base_strstream::seek,
+	octave_base_strstream::tell): Likewise.
+
+	* oct-stream.cc (octave_stream::seek, octave_stream::tell):
+	Signatures now match C-library functions.
+
+	* oct-stdstrm.cc (octave_stdiostream::seek, octave_stdiostream::tell):
+	Call io_c_file_ptr_stream::seek and tell.  Signatures now match
+	C-library functions.
+
+	* c-file-ptr-stream.h (c_file_ptr_buf::seek, c_file_ptr_buf::tell): 
+	New functions.
+	(i_c_file_ptr_stream::seek, i_c_file_ptr_stream::tell): Likewise.
+	(o_c_file_ptr_stream::seek, o_c_file_ptr_stream::tell): Likewise.
+	(io_c_file_ptr_stream::seek, io_c_file_ptr_stream::tell): Likewise.
+
 2004-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.55.
 	(OCTAVE_API_VERSION): Now api-v6.
 
 	* sighandlers.cc (sigfpe_handler, sigpipe_handler):
 	Don't increment	octave_interrupt_state if it is less than 0.
 	(sigint_handler): If octave_interrupt_state is less than zero,
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -38,17 +38,17 @@ public:
 #if !defined (CXX_ISO_COMPLIANT_LIBRARY)
   typedef int int_type;
 #else
   typedef std::streambuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
-  FILE* stdiofile (void) const { return f; }
+  FILE* stdiofile (void) { return f; }
 
   c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = fclose)
     : std::streambuf (), f (f_arg), cf (cf_arg)
     { }
 
   ~c_file_ptr_buf (void);
 
   int_type overflow (int_type);
@@ -72,16 +72,21 @@ public:
   int sync (void);
 
   int flush (void);
 
   int close (void);
 
   int file_number () const { return f ? fileno (f) : -1; }
 
+  int seek (long offset, int origin)
+    { return f ? fseek (f, offset, origin) : -1; }
+
+  long tell (void) { return f ? ftell (f) : -1; }
+
   static int fclose (FILE *f) { return ::fclose (f); }
 
 protected:
 
   FILE *f;
 
   close_fcn cf;
 
@@ -100,16 +105,21 @@ public:
     : std::istream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~i_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void) { if (buf) buf->close (); }
 
+  int seek (long offset, int origin)
+    { return buf ? buf->seek (offset, origin) : -1; }
+
+  long tell (void) { return buf ? buf->tell () : -1; }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
@@ -120,16 +130,21 @@ public:
     : std::ostream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~o_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void) { if (buf) buf->close (); }
 
+  int seek (long offset, int origin)
+    { return buf ? buf->seek (offset, origin) : -1; }
+
+  long tell (void) { return buf ? buf->tell () : -1; }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 class
 io_c_file_ptr_stream : public std::iostream
 {
@@ -140,16 +155,21 @@ public:
     : std::iostream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~io_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void) { if (buf) buf->close (); }
 
+  int seek (long offset, int origin)
+    { return buf ? buf->seek (offset, origin) : -1; }
+
+  long tell (void) { return buf ? buf->tell () : -1; }
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 #endif
 
 /*
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -33,18 +33,19 @@ Software Foundation, 59 Temple Place - S
 
 // Completely rewritten by John W. Eaton <jwe@bevo.che.wisc.edu>,
 // April 1996.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cerrno>
 #include <climits>
-#include <cerrno>
+#include <cstdio>
 
 #include <iostream>
 #include <vector>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
@@ -332,18 +333,25 @@ do_stream_open (const std::string& name,
 
   std::ios::openmode md = fopen_mode_to_ios_mode (mode);
 
   if (! error_state)
     {
       oct_mach_info::float_format flt_fmt =
 	oct_mach_info::string_to_float_format (arch);
 
-      if (! error_state)
-	retval = octave_fstream::create (name, md, flt_fmt);
+      FILE *fptr = ::fopen (name.c_str (), mode.c_str ());
+
+      if (fptr)
+	{	
+	  if (! error_state)
+	    retval = octave_stdiostream::create (name, fptr, md, flt_fmt);
+	}
+      else
+	error ("fopen: failed to open file %s", name.c_str ());
     }
 
   return retval;
 }
 
 static octave_stream
 do_stream_open (const octave_value& tc_name, const octave_value& tc_mode,
 		const octave_value& tc_arch, const char *fcn, int& fid)
@@ -633,26 +641,26 @@ offset must be zero, or a value returned
 
 DEFUN (ftell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ftell (@var{fid})\n\
 Return the position of the file pointer as the number of characters\n\
 from the beginning of the file @var{fid}.\n\
 @end deftypefn")
 {
-  octave_value retval = streamoff_array (dim_vector (1, 1), -1);
+  octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream os = octave_stream_list::lookup (args(0), "ftell");
 
       if (! error_state)
-	retval = streamoff_array (dim_vector (1, 1), os.tell ());
+	retval = os.tell ();
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
 DEFUN (fprintf, args, nargout,
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -61,51 +61,29 @@ octave_fstream::octave_fstream (const st
 
       error (strerror (errno));
     }
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_fstream::seek (std::streamoff offset, std::ios::seekdir origin)
+octave_fstream::seek (long, int)
 {
-  int retval = -1;
-
-  if (! fs.bad ())
-    {
-      fs.clear ();
-
-      std::filebuf *fb = fs.rdbuf ();
-
-      if (fb)
-	{
-	  fb->pubseekoff (offset, origin);
-	  retval = fs.bad () ? -1 : 0;
-	}
-    }
-
-  return retval;
+  error ("fseek: invalid_operation");
+  return -1;
 }
 
 // Return current stream position.
 
-std::streamoff
-octave_fstream::tell (void) const
+long
+octave_fstream::tell (void)
 {
-  std::streamoff retval = -1;
-
-  if (fs)
-    {
-      std::filebuf *fb = fs.rdbuf ();
-
-      retval = std::streamoff (fb->pubseekoff (0, std::ios::cur));
-    }
-
-  return retval;
+  error ("ftell: invalid_operation");
+  return -1;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
 bool
 octave_fstream::eof (void) const
 {
   return fs.eof ();
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -40,21 +40,21 @@ public:
 
   static octave_stream
   create (const std::string& nm_arg,
 	  std::ios::openmode arg_md = std::ios::in|std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (std::streamoff offset, std::ios::seekdir origin);
+  int seek (long offset, int origin);
 
   // Return current stream position.
 
-  std::streamoff tell (void) const;
+  long tell (void);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   void do_close (void);
 
   // The name of the file.
diff --git a/src/oct-iostrm.cc b/src/oct-iostrm.cc
--- a/src/oct-iostrm.cc
+++ b/src/oct-iostrm.cc
@@ -25,26 +25,26 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "oct-iostrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_iostream::seek (std::streamoff, std::ios::seekdir)
+octave_base_iostream::seek (long, int)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return current stream position.
 
-std::streamoff
-octave_base_iostream::tell (void) const
+long
+octave_base_iostream::tell (void)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
 bool
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -35,21 +35,21 @@ public:
   octave_base_iostream (const std::string& n = std::string (),
 			std::ios::openmode m = std::ios::in|std::ios::out,
 			oct_mach_info::float_format ff =
 			oct_mach_info::flt_fmt_native)
     : octave_base_stream (m, ff), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (std::streamoff offset, std::ios::seekdir origin);
+  int seek (long offset, int origin);
 
   // Return current stream position.
 
-  std::streamoff tell (void) const;
+  long tell (void);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -26,55 +26,35 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdio>
 
 #include "oct-stdstrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_stdiostream::seek (std::streamoff offset, std::ios::seekdir origin)
+octave_stdiostream::seek (long offset, int origin)
 {
   int retval = -1;
 
-  if (! bad ())
-    {
-      c_file_ptr_buf *sb = rdbuf ();
-
-      if (sb)
-	{
-	  clear ();
-
-	  sb->pubseekoff (offset, origin);
-	  retval = bad () ? -1 : 0;
-	}
-    }
+  if (s)
+    retval = s->seek (offset, origin);
 
   return retval;
 }
 
 // Return current stream position.
 
-std::streamoff
-octave_stdiostream::tell (void) const
+long
+octave_stdiostream::tell (void)
 {
-  std::streamoff retval = -1;
-
-  if (! bad ())
-    {
-      c_file_ptr_buf *sb = rdbuf ();
+  long retval = -1;
 
-      if (sb)
-	{
-	  retval = std::streamoff (sb->pubseekoff (0, std::ios::cur));
-
-	  if (bad ())
-	    retval = -1;
-	}
-    }
+  if (s)
+    retval = s->tell ();
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -48,21 +48,21 @@ public:
 	  oct_mach_info::float_format ff = oct_mach_info::flt_fmt_native,
 	  c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
   {
     return octave_stream (new octave_stdiostream (n, f, m, ff, cf));
   }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (std::streamoff offset, std::ios::seekdir origin);
+  int seek (long offset, int origin);
 
   // Return current stream position.
 
-  std::streamoff tell (void) const;
+  long tell (void);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return s ? s->eof () : true; }
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2687,85 +2687,85 @@ octave_stream::gets (const octave_value&
     }
   else
     retval = gets (max_len, err, who);
 
   return retval;
 }
 
 int
-octave_stream::seek (std::streamoff offset, std::ios::seekdir origin)
+octave_stream::seek (long offset, int origin)
 {
   int retval = -1;
 
   if (stream_ok ("fseek"))
     retval = rep->seek (offset, origin);
 
   return retval;
 }
 
 int
 octave_stream::seek (const octave_value& tc_offset,
 		     const octave_value& tc_origin)
 {
   int retval = -1;
 
-  std::streamoff xoffset = tc_offset.streamoff_value ();
+  long xoffset = tc_offset.long_value (true);
 
   if (! error_state)
     {
       int conv_err = 0;
 
-      std::ios::seekdir origin = std::ios::beg;
+      int origin = SEEK_SET;
 
       if (tc_origin.is_string ())
 	{
 	  std::string xorigin = tc_origin.string_value ();
 
 	  if (xorigin == "bof")
-	    origin = std::ios::beg;
+	    origin = SEEK_SET;
 	  else if (xorigin == "cof")
-	    origin = std::ios::cur;
+	    origin = SEEK_CUR;
 	  else if (xorigin == "eof")
-	    origin = std::ios::end;
+	    origin = SEEK_END;
 	  else
 	    conv_err = -1;
 	}
       else
 	{
 	  int xorigin = convert_to_valid_int (tc_origin, conv_err);
 
 	  if (! conv_err)
 	    {
 	      if (xorigin == -1)
-		origin = std::ios::beg;
+		origin = SEEK_SET;
 	      else if (xorigin == 0)
-		origin = std::ios::cur;
+		origin = SEEK_CUR;
 	      else if (xorigin == 1)
-		origin = std::ios::end;
+		origin = SEEK_END;
 	      else
 		conv_err = -1;
 	    }
 	}
 
       if (! conv_err)
 	retval = seek (xoffset, origin);
       else
 	error ("fseek: invalid value for origin");
     }
   else
     error ("fseek: invalid value for offset");
 
   return retval;
 }
 
-std::streamoff
-octave_stream::tell (void) const
+long
+octave_stream::tell (void)
 {
-  std::streamoff retval = -1;
+  long retval = -1;
 
   if (stream_ok ("tell"))
     retval = rep->tell ();
 
   return retval;
 }
 
 int
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -329,21 +329,21 @@ public:
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  virtual int seek (std::streamoff offset, std::ios::seekdir origin) = 0;
+  virtual int seek (long offset, int origin) = 0;
 
   // Return current stream position.
 
-  virtual std::streamoff tell (void) const = 0;
+  virtual long tell (void) = 0;
 
   // Return TRUE if EOF has been reached on this stream.
 
   virtual bool eof (void) const = 0;
 
   // The name of the file.
 
   virtual std::string name (void) const = 0;
@@ -497,20 +497,20 @@ public:
   std::string getl (int max_len, bool& err, const std::string& who /* = "getl" */);
   std::string getl (const octave_value& max_len, bool& err,
 		    const std::string& who /* = "getl" */);
 
   std::string gets (int max_len, bool& err, const std::string& who /* = "gets" */);
   std::string gets (const octave_value& max_len, bool& err,
 		    const std::string& who /* = "gets" */);
 
-  int seek (std::streamoff offset, std::ios::seekdir origin);
+  int seek (long offset, int origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
-  std::streamoff tell (void) const;
+  long tell (void);
 
   int rewind (void);
 
   bool is_open (void) const;
 
   void close (void);
 
   octave_value read (const Array<double>& size, oct_data_conv::data_type dt,
diff --git a/src/oct-strstrm.cc b/src/oct-strstrm.cc
--- a/src/oct-strstrm.cc
+++ b/src/oct-strstrm.cc
@@ -24,59 +24,29 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "oct-strstrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_strstream::seek (std::streamoff offset, std::ios::seekdir origin)
+octave_base_strstream::seek (long offset, int origin)
 {
-  int retval = -1;
-
-  if (! bad ())
-    {
-      std::streambuf *sb = rdbuf ();
-
-      if (sb)
-	{
-	  clear ();
-
-	  sb->pubseekoff (offset, origin);
-	  retval = bad () ? -1 : 0;
-	}
-    }
-
-  return retval;
+  error ("fseek: invalid operation");
+  return -1;
 }
 
 // Return current stream position.
 
-std::streamoff
-octave_base_strstream::tell (void) const
+long
+octave_base_strstream::tell (void)
 {
-  std::streamoff retval = -1;
-
-  if (! bad ())
-    {
-      // XXX FIXME XXX -- shouldn't have to do this!
-
-      std::streambuf *sb = (const_cast<octave_base_strstream *>(this))->rdbuf ();
-
-      if (sb)
-	{
-	  retval = std::streamoff (sb->pubseekoff (0, std::ios::cur));
-
-	  if (bad ())
-	    retval = -1;
-	}
-    }
-
-  return retval;
+  error ("ftell: invalid operation");
+  return -1;
 }
 
 octave_stream
 octave_istrstream::create (const char *data, std::ios::openmode arg_md,
 			   oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_istrstream (data, arg_md, flt_fmt));
 }
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -36,21 +36,21 @@ public:
 
   octave_base_strstream (std::ios::openmode m = std::ios::out,
 			 oct_mach_info::float_format ff =
 			 oct_mach_info::flt_fmt_native)
     : octave_base_stream (m, ff) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (std::streamoff offset, std::ios::seekdir origin);
+  int seek (long offset, int origin);
 
   // Return current stream position.
 
-  std::streamoff tell (void) const;
+  long tell (void);
 
   // The name of the file.
 
   std::string name (void) const { return std::string (); }
 
   virtual std::streambuf *rdbuf (void) = 0;
 
   virtual bool bad (void) const = 0;
