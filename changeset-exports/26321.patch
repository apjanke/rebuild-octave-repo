# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546151808 28800
#      Sat Dec 29 22:36:48 2018 -0800
# Node ID cb96d4ba6daa501619ab9f357428cc98ecbb6827
# Parent  7902a3a8f02cbd34704c6f3e76aa8b01b96917ab
# Parent  92c88ff620550240f417e7da51d93bc869acbfe3
maint: merge stable to default.

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -383,29 +383,38 @@ namespace octave
                                     m_doc_browser, m_tool_bar);
     m_action_zoom_original = add_action (resource_manager::icon ("zoom-original"),
                                    tr ("Zoom original"), SLOT (zoom_original (void)),
                                    m_doc_browser, m_tool_bar);
   }
 
   void documentation::global_search (void)
   {
+
+    QString query_string;
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
     QString queries
       = m_help_engine->searchEngine ()->queryWidget ()->searchInput ();
-    m_query_string = queries.split (" ").first ();
+    query_string = queries;
 #else
+    // FIXME: drop this part when support for Qt4 is dropped
     QList<QHelpSearchQuery> queries
       = m_help_engine->searchEngine ()->queryWidget ()->query ();
     if (queries.count ())
-      m_query_string = queries.first ().wordList.first ();
+      query_string = queries.first ().wordList.join (" ");
     else
-      m_query_string = "";
+      query_string = "";
 #endif
 
+    // Get quoted search strings first, then take first string as fall back
+    QRegExp rx ("\"([^\"]*)\"");
+    if (rx.indexIn (query_string, 0) != -1)
+      m_query_string = rx.cap (1);
+    else
+      m_query_string = query_string.split (" ", QString::SkipEmptyParts).first ();
 
     m_help_engine->searchEngine ()->search (queries);
   }
 
   void documentation::global_search_started (void)
   {
     qApp->setOverrideCursor(QCursor(Qt::WaitCursor));
   }
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -12434,28 +12434,30 @@ make_graphics_object (const std::string&
   octave_value retval;
 
   double val = octave::numeric_limits<double>::NaN ();
 
   octave_value_list xargs = args.splice (0, 1);
 
   caseless_str p ("parent");
 
-  for (int i = 0; i < xargs.length (); i++)
+  // Remove all "parent" property overrides of the first argument to function
+  // and accept only the last one (bug #55322).
+  for (int i = 0; i < xargs.length (); i += 2)
     {
       if (xargs(i).is_string () && p.compare (xargs(i).string_value ()))
         {
           if (i >= (xargs.length () - 1))
             error ("__go_%s__: missing value for parent property",
                    go_name.c_str ());
 
           val = xargs(i+1).double_value ();
 
           xargs = xargs.splice (i, 2);
-          break;
+          i -= 2;
         }
     }
 
   if (octave::math::isnan (val))
     val = args(0).xdouble_value ("__go_%s__: invalid parent", go_name.c_str ());
 
   graphics_handle parent = gh_manager::lookup (val);
 
diff --git a/scripts/plot/util/__plt_get_axis_arg__.m b/scripts/plot/util/__plt_get_axis_arg__.m
--- a/scripts/plot/util/__plt_get_axis_arg__.m
+++ b/scripts/plot/util/__plt_get_axis_arg__.m
@@ -21,43 +21,47 @@
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
 function [h, varargin, narg] = __plt_get_axis_arg__ (caller, varargin)
 
   h = [];
-  parent = find (strcmpi (varargin, "parent"), 1);
 
   ## Look for a scalar which is a graphics handle but not the
   ## Root Figure (0) or an ordinary figure (integer).
-  if (numel (varargin) > 0 && numel (varargin{1}) == 1
-      && ishghandle (varargin{1}) && varargin{1} != 0 && ! isfigure (varargin{1}))
+  if (! isempty (varargin) && isscalar (varargin{1})
+      && ishghandle (varargin{1}) && varargin{1} != 0
+      && ! isfigure (varargin{1}))
     htmp = varargin{1};
     if (! isaxes (htmp))
       error ("%s: first argument must be axes handle", caller);
     endif
     if (! strcmp (get (htmp, "tag"), "legend"))
       h = htmp;
       varargin(1) = [];
     endif
   ## Look for "parent"/axis prop/value pair
-  elseif (numel (varargin) > 1 && ! isempty (parent))
-    if (parent < numel (varargin) && ishghandle (varargin{parent+1}))
+  elseif (numel (varargin) > 1)
+    ## FIXME: This can be fooled by any string "parent" such as
+    ##        the prop/val pair "tag"/"parent".
+    parent = find (strcmpi (varargin, "parent"), 1, "last");
+    if (! isempty (parent))
+      if (parent == numel (varargin) || ! ishghandle (varargin{parent+1}))
+        error ('%s: "parent" value must be an axes handle', caller);
+      endif
       htmp = varargin{parent+1};
       if (isaxes (htmp) && ! strcmp (get (htmp, "tag"), "legend"))
         h = htmp;
         varargin(parent:parent+1) = [];
       else
-        ## 'parent' property for some other type like hggroup
+        ## "parent" property for some other type like hggroup
         h = [ancestor(htmp, "axes"), htmp];
       endif
-    else
-      error ("%s: parent value must be an axes handle", caller);
     endif
   endif
 
   narg = length (varargin);
 
 endfunction
 
 
diff --git a/test/bug-55322/bug-55322.tst b/test/bug-55322/bug-55322.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-55322/bug-55322.tst
@@ -0,0 +1,29 @@
+## Copyright (C) 2018 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ("parent", hf);
+%!   hg = hggroup ();
+%!   hl = line (hax, [0, 1], [1, 1], "parent", hax, "parent", hg);
+%!   assert (get (hax, "children"), hg);
+%!   assert (get (hg, "children"), hl);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/test/bug-55322/module.mk b/test/bug-55322/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-55322/module.mk
@@ -0,0 +1,4 @@
+bug_55322_TEST_FILES = \
+  %reldir%/bug-55322.tst
+
+TEST_FILES += $(bug_55322_TEST_FILES)
