# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1221248053 14400
#      Fri Sep 12 15:34:13 2008 -0400
# Node ID fc45357bf50ccdb48fceb36ef92db2c5e19dc671
# Parent  3b2346046d32ad8a819b26236c575a6fc2a1436a
fix integer exponentiation with negative exponent

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-inttypes.h (pow (const octave_int<T>&, const octave_int<T>&)): 
+	Handle negative exponent correctly.
+
 2008-08-19  David Bateman  <dbateman@free.fr>
 
 	* oct-inttypes.h (template <class T1, class T2> inline T2
 	octave_int_fit_to_range (const T1&, const T2&, const T2&),
 	template <typename T> inline T octave_int_fit_to_range (const
 	double&, const T&, const T&), template <> inline T2
 	octave_int_fit_to_range<T1, T2> (const T1&, const T2&, const T2&),
 	OCTAVE_S_US_FTR): Check and flag integer trunctation.
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -476,20 +476,25 @@ template <class T>
 octave_int<T>
 pow (const octave_int<T>& a, const octave_int<T>& b)
 {
   octave_int<T> retval;
 
   octave_int<T> zero = octave_int<T> (0);
   octave_int<T> one = octave_int<T> (1);
 
-  if (b == zero)
+  if (b == zero || a == one)
     retval = one;
   else if (b < zero)
-    retval = zero;
+    {
+      if (std::numeric_limits<T>::is_signed && a.value () == -1)
+        retval = (b.value () % 2) ? a : one;
+      else
+        retval = zero;
+    }
   else
     {
       octave_int<T> a_val = a;
       octave_int<T> b_val = b;
 
       retval = a;
 
       b_val -= 1;
