# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482796301 28800
#      Mon Dec 26 15:51:41 2016 -0800
# Node ID 80ac3e38b03de7f25653469386c7904e2a661508
# Parent  7627ebcf194dd8776577c09e7662245260489671
decic.m: Use Octave coding conventions.

* decic.m: Match variable names in docstring to those in function.
Use '##' to start stand-alone comments.  Use '!' rather than '~'
for logical negation.  Use double quotes rather than single quotes.
Capitalize variable names in error() messages.

diff --git a/scripts/ode/decic.m b/scripts/ode/decic.m
--- a/scripts/ode/decic.m
+++ b/scripts/ode/decic.m
@@ -13,135 +13,137 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{y0_new}, @var{yp0_new}] =} decic (@var{fun}, @var{t0}, @var{y0}, @var{fixed_y0}, @var{yp0}, @var{fixed_yp0})
-## @deftypefnx  {} {[@var{y0_new}, @var{yp0_new}] =} decic (@var{fun}, @var{t0}, @var{y0}, @var{fixed_y0}, @var{yp0}, @var{fixed_yp0}, @var{options})
-## @deftypefnx  {} {[@var{y0_new}, @var{yp0_new}, @var{resnorm}] =} decic (@dots{})
+## @deftypefnx {} {[@var{y0_new}, @var{yp0_new}] =} decic (@var{fun}, @var{t0}, @var{y0}, @var{fixed_y0}, @var{yp0}, @var{fixed_yp0}, @var{options})
+## @deftypefnx {} {[@var{y0_new}, @var{yp0_new}, @var{resnorm}] =} decic (@dots{})
 ##
 ## Compute consistent initial conditions @var{y0_new} and @var{yp0_new}, given
-## initial guesses @var{y0} and @var{yp0}. Choose a maximum of
+## initial guesses @var{y0} and @var{yp0}.  Choose a maximum of
 ## @code{length(@var{y0})} components between @var{fixed_y0} and
 ## @var{fixed_yp0} as fixed values.
 ##
-## @var{fun} is a function handle. The function must accept three inputs where
-## the first is time @var{t}, the second is a column vector of unknowns @var{y}
-## and the third is a column vector of unknowns @var{yp}.
+## @var{fun} is a function handle.  The function must accept three inputs where
+## the first is time @var{t}, the second is a column vector of unknowns
+## @var{y}, and the third is a column vector of unknowns @var{yp}.
 ##
 ## @var{t0} is the initial time such that @code{@var{fun}(@var{t0},
 ## @var{y0_new}, @var{yp0_new}) = 0}, specified as a scalar.
 ##
-## @var{y0} is a vector used as initial guess for @var{y}.
+## @var{y0} is a vector used as the initial guess for @var{y}.
 ##
-## @var{fixed_y0} is a vector which specifies the components of @var{y0} to be
-## hold fixed. Choose a maximum of @code{length(@var{y0})} components between
+## @var{fixed_y0} is a vector which specifies the components of @var{y0} to
+## hold fixed.  Choose a maximum of @code{length(@var{y0})} components between
 ## @var{fixed_y0} and @var{fixed_yp0} as fixed values.
 ## Set @var{fixed_y0}(i) component to 1 if you want to fix the value of
 ## @var{y0}(i).
 ## Set @var{fixed_y0}(i) component to 0 if you want to allow the value of
 ## @var{y0}(i) to change.
 ##
-## @var{yp0} is a vector used as initial guess for @var{yp}.
+## @var{yp0} is a vector used as the initial guess for @var{yp}.
 ##
 ## @var{fixed_yp0} is a vector which specifies the components of @var{yp0} to
-## be hold fixed. Choose a maximum of @code{length(@var{yp0})} components
+## hold fixed.  Choose a maximum of @code{length(@var{yp0})} components
 ## between @var{fixed_y0} and @var{fixed_yp0} as fixed values.
 ## Set @var{fixed_yp0}(i) component to 1 if you want to fix the value of
 ## @var{yp0}(i).
 ## Set @var{fixed_yp0}(i) component to 0 if you want to allow the value of
 ## @var{yp0}(i) to change.
 ##
 ## The optional seventh argument @var{options} is a structure array.
-## Use @code{odeset} to generate this structure. The relevant options are
+## Use @code{odeset} to generate this structure.  The relevant options are
 ## @code{RelTol} and @code{AbsTol} which specify the error thresholds used to
 ## compute the initial conditions.
 ##
-## The function typically returns two outputs. Variable @var{y0_new} is a
+## The function typically returns two outputs.  Variable @var{y0_new} is a
 ## column vector and contains the consistent initial value of y.  The
 ## output @var{yp0_new} is a column vector and contains the consistent initial
 ## value of yp.
 ##
-## The optional third output @var{resnorm} is the vector of norm of the
-## residuals. If @var{resnorm} is small, @code{decic} has successfully computed
-## the initial conditions. If the value of  @var{resnorm} is large, use
-## @code{RelTol} and @code{AbsTol} to adjust it.
+## The optional third output @var{resnorm} is the norm of the vector of
+## residuals.  If @var{resnorm} is small, @code{decic} has successfully
+## computed the initial conditions.  If the value of @var{resnorm} is large,
+## use @code{RelTol} and @code{AbsTol} to adjust it.
 ##
-## Example: Compute initial conditions of @nospell{Robetson}'s equations:
+## Example: Compute initial conditions of @nospell{Robetson's} equations:
 ##
 ## @example
 ## @group
-## function res = robertsidae(@var{t}, @var{y}, @var{yp})
-## res = [-(@var{yp}(1) + 0.04*@var{y}(1) - 1e4*@var{y}(2)*@var{y}(3));
-##        -(@var{yp}(2) - 0.04*@var{y}(1) + 1e4*@var{y}(2)*@var{y}(3) +
-##        3e7*@var{y}(2)^2);
+## function r = robertsidae(@var{t}, @var{y}, @var{yp})
+##   r = [-(@var{yp}(1) + 0.04*@var{y}(1) - 1e4*@var{y}(2)*@var{y}(3));
+##        -(@var{yp}(2) - 0.04*@var{y}(1) + 1e4*@var{y}(2)*@var{y}(3) + 3e7*@var{y}(2)^2);
 ##        @var{y}(1) + @var{y}(2) + @var{y}(3) - 1];
 ## endfunction
 ## @end group
 ## [@var{y0_new},@var{yp0_new}] = decic (@@robertsidae, 0, [1; 0; 0], [1; 1; 0],
 ## [-1e-4; 1; 0], [0; 0; 0]);
 ## @end example
-## @seealso{odeset}
+## @seealso{ode1
 ## @end deftypefn
 
-function [y0_new, yp0_new, resnrm] = decic (odefun, t0, y0, fixed_y0, yp0,
-                                            fixed_yp0, options)
+function [y0_new, yp0_new, resnorm] = decic (fun, t0,
+                                             y0, fixed_y0, yp0, fixed_yp0,
+                                             options)
 
-  if (nargin < 6 || nargin > 7 || nargout > 3)
+  if (nargin < 6 || nargin > 7)
     print_usage ();
   endif
 
-  #Check input
-  if (! isa (odefun, "function_handle"))
+  ## Validate inputs
+  if (! isa (fun, "function_handle"))
     error ("Octave:invalid-input-arg",
            "decic: FUN must be a valid function handle");
   endif
 
-  if (! isnumeric (t0) || numel (t0) != 1)
+  if (! (isnumeric (t0) && isscalar (t0)))
     error ("Octave:invalid-input-arg",
-           "decic: INIT must be a numeric scalar value");
+           "decic: T0 must be a numeric scalar");
   endif
 
-  if (! isnumeric (y0) || ! isvector (y0) || ! isnumeric (fixed_y0) ||
-      ! isvector (fixed_y0) || ! isnumeric (yp0) || ! isvector (yp0)||
-      ! isnumeric (fixed_yp0) || ! isvector (fixed_yp0))
+  if (   ! (isnumeric (y0) && isvector (y0))
+      || ! (isnumeric (fixed_y0) && isvector (fixed_y0))
+      || ! (isnumeric (yp0) && isvector (yp0))
+      || ! (isnumeric (fixed_yp0) && isvector (fixed_yp0)))
    error ("Octave:invalid-input-arg",
-           "decic: y0, fixed_y0, yp0 and fixed_yp0 must be numeric vectors");
+          "decic: Y0, FIXED_Y0, YP0, and FIXED_YP0 must be numeric vectors");
 
   elseif (! isequal (numel (y0), numel (fixed_y0), numel (yp0),
-          numel (fixed_yp0)))
+                     numel (fixed_yp0)))
     error ("Octave:invalid-input-arg",
-           "decic: length of y0, fixed_y0, yp0 and fixed_yp0 must be equal");
+           "decic: length of Y0, FIXED_Y0, YP0, and FIXED_YP0 must be equal");
   endif
 
+  ## FIXME: This level of checking isn't necessary
   for i = 1:numel (y0)
     if (! (fixed_y0(i) == 0 || fixed_y0(i) == 1) || ! (fixed_yp0(i) == 0
         || fixed_yp0(i) == 1))
       error ("Octave:invalid-input-arg",
-             "decic: fixed_y0 and fixed_yp0 must be boolean vectors");
+             "decic: FIXED_Y0 and FIXED_YP0 must be boolean vectors");
     endif
   endfor
 
   n  = numel (y0);
-  nl = sum (~fixed_y0);
-  nu = sum (~fixed_yp0);
+  nl = sum (! fixed_y0);
+  nu = sum (! fixed_yp0);
 
   if (n - nl - nu > 0)
     error ("Octave:invalid-input-arg",
-           "decic: you cannot fix more than length(y0) components");
+           "decic: cannot fix more than length (Y0) components");
   endif
 
-  #Set default value
+  ## Set default values
   TolFun = 0;
   TolX   = eps;
 
-  #Check AbsTol and RelTol
+  ## Check AbsTol and RelTol
   if (nargin == 7)
     if (! isempty (options.AbsTol))
       if (! isscalar (options.AbsTol))
         error ("Octave:invalid-input-arg",
                "decic: AbsTol must be a scalar value");
       else
         TolFun = options.AbsTol;
       endif
@@ -152,72 +154,79 @@ function [y0_new, yp0_new, resnrm] = dec
         error ("Octave:invalid-input-arg",
                "decic: RelTol must be a scalar value");
       else
         TolX = options.RelTol;
       endif
     endif
   endif
 
-  x0 = [y0(~fixed_y0); yp0(~fixed_yp0)];
-  opt = optimset ('tolfun', TolFun, 'tolx', TolX, 'display', 'iter-detailed');
-  x = fminunc (@(x) objective (x, t0, y0, fixed_y0, yp0, fixed_yp0, nl, nu,
-                               odefun),
-               x0, opt);
+  x0 = [y0(! fixed_y0); yp0(! fixed_yp0)];
+  opt = optimset ("tolfun", TolFun, "tolx", TolX, "display", "iter-detailed");
+  x = ...
+    fminunc (@(x) objective (x, t0, y0, fixed_y0, yp0, fixed_yp0, nl, nu, fun),
+             x0, opt);
 
   y0_new  = y0;
   yp0_new = yp0;
 
-  y0_new(~fixed_y0)   = x(1:nl);
-  yp0_new(~fixed_yp0) = x(nl+1:nl+nu);
-  resnrm = odefun (t0, y0_new, yp0_new);
+  y0_new(! fixed_y0)   = x(1:nl);
+  yp0_new(! fixed_yp0) = x(nl+1:nl+nu);
+  if (isargout (3))
+    resnorm = fun (t0, y0_new, yp0_new);
+  endif
 
 endfunction
 
-function res = objective (x, t0, y0, fixed_y0, yp0,
-                          fixed_yp0, nl, nu, odefun)
+function res = objective (x, t0, y0, fixed_y0, yp0, fixed_yp0, nl, nu, fun)
+
   y = y0;
-  y(~fixed_y0) = x(1:nl);
+  y(! fixed_y0) = x(1:nl);
   yp = yp0;
-  yp(~fixed_yp0) = x(nl+1:nl+nu);
-  res = sqrt (sum (odefun (t0, y, yp) .^ 2));
+  yp(! fixed_yp0) = x(nl+1:nl+nu);
+  res = sqrt (sum (fun (t0, y, yp) .^ 2));
+
 endfunction
 
+
 %!function res = rob (t, y, yp)
-%! res =[-(yp(1) + 0.04*y(1) - 1e4*y(2)*y(3)); -(yp(2) - 0.04*y(1) +
-%!      + 1e4*y(2)*y(3) + 3e7*y(2)^2); y(1) + y(2) + y(3) - 1];
+%!  res =[-(yp(1) + 0.04*y(1) - 1e4*y(2)*y(3));
+%!        -(yp(2) - 0.04*y(1) + 1e4*y(2)*y(3) + 3e7*y(2)^2);
+%!        y(1) + y(2) + y(3) - 1];
 %!endfunction
 
 %!test  # Without options
 %! ref1 = [1;0;0];
 %! ref2 = [-4e-2; 4e-2; 0];
-%! [ynew,ypnew] = decic (@rob,0,[1;0;0],[1;1;0],[23;110;0],[0;0;1]);
+%! [ynew, ypnew] = decic (@rob,0,[1;0;0],[1;1;0],[23;110;0],[0;0;1]);
 %! assert ([ynew(1:end), ypnew(1:end)], [ref1(1:end), ref2(1:end)], 1e-10);
 %!test  # With options
 %! ref1 = [1;0;0];
 %! ref2 = [-4e-2; 4e-2; 0];
 %! opt = odeset ("AbsTol", 1e-8, "RelTol", 1e-4);
-%! [ynew,ypnew] = decic (@rob,0,[1;0;0],[1;1;0],[23;110;0],[0;0;1],opt);
+%! [ynew, ypnew] = decic (@rob,0,[1;0;0],[1;1;0],[23;110;0],[0;0;1],opt);
 %! assert ([ynew(1:end), ypnew(1:end)], [ref1(1:end), ref2(1:end)], 1e-5);
 
 ## Test input validation
 %!error decic ()
 %!error decic (1)
 %!error decic (1,2)
+%!error decic (1,2,3)
+%!error decic (1,2,3,4)
+%!error decic (1,2,3,4,5)
 %!error decic (1,2,3,4,5,6,7,8)
 %!error <FUN must be a valid function handle>
-%!  decic (1, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
-%!error <INIT must be a numeric scalar value>
-%!  decic (@rob, [1, 1], [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
-%!error <length of y0, fixed_y0, yp0 and fixed_yp0 must be equal>
-%!  decic (@rob, 0, [0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
-%!error <y0, fixed_y0, yp0 and fixed_yp0 must be numeric vectors>
-%!  decic (@rob, 0, [1; 0; 0], [1; 0],"", [0; 0; 0]);
-%!error <y0, fixed_y0, yp0 and fixed_yp0 must be numeric vectors>
-%!  decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; "1"]);
-%!error <fixed_y0 and fixed_yp0 must be boolean vectors>
-%!  decic (@rob, 0, [1; 0; 0], [5; 5; 0], [-1e-4; 1; 0], [0; 0; 0]);
-%!error <fixed_y0 and fixed_yp0 must be boolean vectors>
-%!  decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 4; 0]);
-%!error #too many components fixed
-%!  decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 1; 1]);
+%! decic (1, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
+%!error <T0 must be a numeric scalar>
+%! decic (@rob, [1, 1], [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
+%!error <length of Y0, FIXED_Y0, YP0, and FIXED_YP0 must be equal>
+%! decic (@rob, 0, [0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; 0]);
+%!error <Y0, FIXED_Y0, YP0, and FIXED_YP0 must be numeric vectors>
+%! decic (@rob, 0, [1; 0; 0], [1; 0],"", [0; 0; 0]);
+%!error <Y0, FIXED_Y0, YP0, and FIXED_YP0 must be numeric vectors>
+%! decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 0; "1"]);
+%!error <FIXED_Y0 and FIXED_YP0 must be boolean vectors>
+%! decic (@rob, 0, [1; 0; 0], [5; 5; 0], [-1e-4; 1; 0], [0; 0; 0]);
+%!error <FIXED_Y0 and FIXED_YP0 must be boolean vectors>
+%! decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 4; 0]);
+%!error  <cannot fix more than length \(Y0\) components>
+%! decic (@rob, 0, [1; 0; 0], [1; 1; 0], [-1e-4; 1; 0], [0; 1; 1]);
 
-
