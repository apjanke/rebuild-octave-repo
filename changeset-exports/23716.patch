# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498708718 14400
#      Wed Jun 28 23:58:38 2017 -0400
# Node ID b89b86d741e6774c6dc8a005fb5bec0cbe9936b0
# Parent  e8e27cd4156c49c2906db007369276099a30e3f3
omit explicit octave_value constructor calls in initialization lists

* symtab.cc, ov-base.cc, ov-usr-fcn.cc: Omit explicit octave_value
construstors in container initialization lists.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -111,23 +111,23 @@ namespace octave
     return new symbol_record_rep (new_scope, name, varval (), storage_class);
   }
 
   octave_value
   symbol_table::symbol_record::symbol_record_rep::dump (void) const
   {
     std::map<std::string, octave_value> m
       = {{"name", name},
-         {"local", octave_value (is_local ())},
-         {"automatic", octave_value (is_automatic ())},
-         {"formal", octave_value (is_formal ())},
-         {"hidden", octave_value (is_hidden ())},
-         {"inherited", octave_value (is_inherited ())},
-         {"global", octave_value (is_global ())},
-         {"persistent", octave_value (is_persistent ())}};
+         {"local", is_local ()},
+         {"automatic", is_automatic ()},
+         {"formal", is_formal ()},
+         {"hidden", is_hidden ()},
+         {"inherited", is_inherited ()},
+         {"global", is_global ()},
+         {"persistent", is_persistent ()}};
 
     octave_value val = varval ();
 
     if (val.is_defined ())
       m["value"] = val;
 
     return octave_value (m);
   }
@@ -1303,18 +1303,18 @@ dump_function_map (const std::map<std::s
 }
 
 namespace octave
 {
   octave_value
   symbol_table::fcn_info::fcn_info_rep::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"name", octave_value (full_name ())},
-         {"refcount", octave_value (count.value ())},
+      = {{"name", full_name ()},
+         {"refcount", count.value ()},
          {"package", package.dump ()},
          {"local_functions", dump_function_map (local_functions)},
          {"private_functions", dump_function_map (private_functions)},
          {"class_methods", dump_function_map (class_methods)},
          {"class_constructors", dump_function_map (class_constructors)},
          {"cmdline_function", cmdline_function.dump ()},
          {"autoload_function", autoload_function.dump ()},
          {"function_on_path", function_on_path.dump ()},
@@ -1709,19 +1709,19 @@ namespace octave
 
     return retval;
   }
 
   octave_value
   symbol_table::scope::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"name", octave_value (m_name)},
+      = {{"name", m_name},
          {"symbols", dump_symbols_map ()},
-         {"persistent_variables", octave_value (m_persistent_symbols)},
+         {"persistent_variables", m_persistent_symbols},
          {"subfunctions", dump_function_map (m_subfunctions)}};
 
     return octave_value (m);
   }
 
   octave_value
   symbol_table::scope::dump_symbols_map (void) const
   {
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1164,19 +1164,19 @@ octave_base_value::unlock (void)
 {
   err_wrong_type_arg ("octave_base_value::unlock ()", type_name ());
 }
 
 octave_value
 octave_base_value::dump (void) const
 {
   std::map<std::string, octave_value> m
-    = {{"class", octave_value (this->class_name ())},
-       {"type", octave_value (this->type_name ())},
-       {"dims", octave_value (this->dims().as_array ())}};
+    = {{"class", this->class_name ()},
+       {"type", this->type_name ()},
+       {"dims", this->dims().as_array ()}};
 
   return octave_value (m);
 }
 
 OCTAVE_NORETURN static
 void
 err_indexed_assignment (const std::string& tn1, const std::string& tn2)
 {
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -671,36 +671,35 @@ octave_user_function::ctor_type_str (voi
 
   return retval;
 }
 
 octave_value
 octave_user_function::dump (void) const
 {
   std::map<std::string, octave_value> m
-    = {{"file_name", octave_value (file_name)},
-       {"line", octave_value (location_line)},
-       {"col", octave_value (location_column)},
-       {"end_line", octave_value (end_location_line)},
-       {"end_col", octave_value (end_location_column)},
-       {"time_parsed", octave_value (t_parsed)},
-       {"time_checked", octave_value (t_checked)},
-       {"parent_name", octave_value (parent_name)},
-       {"system_fcn_file", octave_value (system_fcn_file)},
-       {"call_depth", octave_value (call_depth)},
-       {"num_named_args", octave_value (num_named_args)},
-       {"subfunction", octave_value (subfunction)},
-       {"inline_function", octave_value (inline_function)},
-       {"anonymous_function", octave_value (anonymous_function)},
-       {"nested_function", octave_value (nested_function)},
-       {"ctor_type", octave_value (ctor_type_str ())},
-       {"class_method", octave_value (class_method)},
-       {"parent_scope", octave_value (parent_scope
-                                      ? parent_scope->name () : "0x0")},
-       {"scope_info", m_scope ? m_scope->dump () : octave_value ("0x0")}};
+    = {{"file_name", file_name},
+       {"line", location_line},
+       {"col", location_column},
+       {"end_line", end_location_line},
+       {"end_col", end_location_column},
+       {"time_parsed", t_parsed},
+       {"time_checked", t_checked},
+       {"parent_name", parent_name},
+       {"system_fcn_file", system_fcn_file},
+       {"call_depth", call_depth},
+       {"num_named_args", num_named_args},
+       {"subfunction", subfunction},
+       {"inline_function", inline_function},
+       {"anonymous_function", anonymous_function},
+       {"nested_function", nested_function},
+       {"ctor_type", ctor_type_str ()},
+       {"class_method", class_method},
+       {"parent_scope", parent_scope ? parent_scope->name () : "0x0"},
+       {"scope_info", m_scope ? m_scope->dump () : "0x0"}};
 
   return octave_value (m);
 }
 
 void
 octave_user_function::print_code_function_header (void)
 {
   octave::tree_print_code tpc (octave_stdout, VPS4);
