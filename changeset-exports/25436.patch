# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1528303263 14400
#      Wed Jun 06 12:41:03 2018 -0400
# Node ID 996d78102a719cdfe28fbd68f24adb9874eb143a
# Parent  a52e6fb674b1381c608dc85b41ac7c0358bbbd40
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9296,17 +9296,17 @@ patch::properties::calc_face_normals (Ma
 
           if (is_3d)
             cross_product
               (v(i3,0) - v(i1,0), v(i3,1) - v(i1,1), v(i3,2) - v(i1,2),
                v(i2,0) - v(i1,0), v(i2,1) - v(i1,1), v(i2,2) - v(i1,2),
                nx, ny, nz);
           else
             {
-              nz = (v(i2,0) - v(i1,0)) * (v(i3,1) - v(i1,1)) - 
+              nz = (v(i2,0) - v(i1,0)) * (v(i3,1) - v(i1,1)) -
                    (v(i2,1) - v(i1,1)) * (v(i3,0) - v(i1,0));
               // 2-d vertices always point towards +z
               nz = (nz < 0) ? -nz : nz;
             }
         }
       else
         {
           // more general for non-planar polygons
@@ -9427,17 +9427,17 @@ patch::properties::update_vertex_normals
               // FIXME: Currently, the first vector also determines the
               // direction of the normal.  How to determine the inner and outer
               // faces of all parts of the patch and point the normals outwards?
               // (Necessary for correct lighting with "backfacelighting" set to
               // "lit" or "unlit".) Matlab does not seem to do it correctly
               // either.  So bother here?
 
               vn0 = *it;
-              
+
               for (++it; it != vec_vn[i].end (); ++it)
                 {
                   RowVector vn1 = *it;
                   // Use sign of dot product to point vectors in a similar
                   // direction before taking the average.
                   double dir =
                     (vn0(0)*vn1(0) + vn0(1)*vn1(1) + vn0(2)*vn1(2) < 0) ? -1
                                                                         : 1;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2855,17 +2855,17 @@ public:
 
   void add_property_listener (const std::string& nm, const octave_value& v,
                               listener_mode mode = POSTSET)
   { rep->add_property_listener (nm, v, mode); }
 
   void delete_property_listener (const std::string& nm, const octave_value& v,
                                  listener_mode mode = POSTSET)
   { rep->delete_property_listener (nm, v, mode); }
-  
+
   void remove_all_listeners (void) { rep->remove_all_listeners (); }
 
   void initialize (void) { rep->initialize (*this); }
 
   void finalize (void) { rep->finalize (*this); }
 
   void update (int id) { rep->update (*this, id); }
 
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -870,17 +870,17 @@ unicode_idx ("aäbc")
   {
     int mblen = octave_u8_strmblen_wrapper (src + i);
     if (mblen < 1)
       mblen = 1;
     for (octave_idx_type j = 0; j < mblen; j++)
       idx (i+j) = u8_char_num;
     i += mblen;
   }
-  
+
   return ovl(str.ndims () > 1 ? idx.permute (p, true) : idx);
 }
 
 /*
 %!assert (unicode_idx (["aäou"; "Ä∞"]), [1 2 2 3 4; 5 5 6 6 6]);
 */
 
 DEFUN (list_in_columns, args, ,
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -44,17 +44,17 @@ function n = nextpow2 (x)
 
   if (! isnumeric (x))
     error ("nextpow2: X must be numeric");
   endif
 
   [f, n] = log2 (abs (x));
   idx = (n == 0);   # Find any failures of log2 function (n == 0)
   n(idx) = f(idx);  # and copy over value.
-  n(f == 0.5)--; 
+  n(f == 0.5)--;
 
 endfunction
 
 
 %!assert (nextpow2 (16), 4)
 %!assert (nextpow2 (17), 5)
 %!assert (nextpow2 (31), 5)
 %!assert (nextpow2 (-16), 4)
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -30,26 +30,26 @@
 ##
 ## @item .mat
 ## @item octave-workspace
 ## Open the data file with @code{load}. If no return value @var{output}
 ## is requested, variables are loaded in the base workspace. Otherwise
 ## @var{output} will be a structure containing loaded data.
 ## @xref{XREFload, , load function}.
 ##
-## @item .ofig 
+## @item .ofig
 ## Open the figure with hgload.  @xref{XREFhgload, , hgload function}.
 ##
 ## @item .exe
 ## Execute the program (on Windows systems only). No @var{output} value
 ## is returned.
 ## @end table
 ##
-## Custom file extensions may also be handled if a function @code{openxxx}, 
-## where @code{xxx} is the extension, is found in the load path.  The function 
+## Custom file extensions may also be handled if a function @code{openxxx},
+## where @code{xxx} is the extension, is found in the load path.  The function
 ## must accept the file name as input.  For example, in order to load ".dat"
 ## data files in the base workspace, as is done by default for ".mat" files, one
 ## may define "opendat.m" with the following contents:
 ## @example
 ## function retval = opendat (fname)
 ##   evalin ("base", sprintf ("load ('%s');", fname));
 ## endfunction
 ## @end example
@@ -68,17 +68,17 @@ function output = open (file)
   if (! ischar (file))
     error ("open: FILE must be a string");
   endif
 
   [~, fname, ext] = fileparts (file);
 
   if (! isempty (ext)
       && any (exist (["open" tolower(ext(2:end))]) == [2 3 5 103]))
-    try 
+    try
       feval (["open" tolower(ext(2:end))], file)
     catch
       error ("open: %s", lasterr);
     end_try_catch
   elseif (strcmpi (ext, ".m"))
     edit (file);
   elseif (strcmpi (ext, ".mat") || strcmp (fname, "octave-workspace"))
     if (nargout > 0)
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -149,18 +149,18 @@ function [x, fval, info, output] = fzero
     fb = fun (b);
     nfev += 1;
   else
     ## Try to find a value for b which brackets a zero-crossing
 
     ## For very small values, switch to absolute rather than relative search
     ifelse (abs (a) < .001, aa = sign (a) * 0.1, aa = a);
     ## Search in an ever-widening range around the initial point.
-    for srch = [-.01 +.025 -.05 +.10 -.25 +.50 -1 +2.5 -5 +10 -50 +100 -500 +1000] 
-      b = aa + aa*srch; 
+    for srch = [-.01 +.025 -.05 +.10 -.25 +.50 -1 +2.5 -5 +10 -50 +100 -500 +1000]
+      b = aa + aa*srch;
       fb = fun (b);
       nfev += 1;
       if (sign (fa) * sign (fb) <= 0)
         break;
       endif
     endfor
   endif
 
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -84,17 +84,17 @@ function h = patch (varargin)
   endif
 
   [htmp, failed] = __patch__ (hax, varargin{:});
 
   if (failed)
     print_usage ();
   endif
 
-  ## FIXME: ishold called this way is very slow. 
+  ## FIXME: ishold called this way is very slow.
   if (! ishold (hax))
     ## FIXME: This is a hack to get 'layer' command to work for 2D patches
     ##        Alternative is much more complicated surgery in graphics.cc.
     ##        of get_children_limits() for 'z' axis and 'patch' object type.
     if (isempty (get (htmp, "zdata")))
       set (hax, "zlim", [-1 1]);
     endif
   endif
diff --git a/scripts/plot/draw/pie.m b/scripts/plot/draw/pie.m
--- a/scripts/plot/draw/pie.m
+++ b/scripts/plot/draw/pie.m
@@ -56,17 +56,17 @@ function h = pie (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("pie", varargin{:});
 
   if (nargin < 1)
     print_usage ();
   endif
 
   if (! all (isfinite (varargin{1})))
-    error ("pie: all data in X must be finite"); 
+    error ("pie: all data in X must be finite");
   endif
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
diff --git a/scripts/plot/draw/pie3.m b/scripts/plot/draw/pie3.m
--- a/scripts/plot/draw/pie3.m
+++ b/scripts/plot/draw/pie3.m
@@ -57,17 +57,17 @@ function h = pie3 (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("pie3", varargin{:});
 
   if (nargin < 1)
     print_usage ();
   endif
 
   if (! all (isfinite (varargin{1})))
-    error ("pie3: all data in X must be finite"); 
+    error ("pie3: all data in X must be finite");
   endif
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -184,17 +184,17 @@ function [h, bad_usage] = __surface__ (a
   if (firststring < nargin)
     other_args = varargin(firststring:end);
   else
     other_args = {};  # make a default surface object.
   endif
   h = __go_surface__ (ax, "xdata", x, "ydata", y, "zdata", z, "cdata", c,
                       other_args{:});
 
-  ## FIXME: ishold called this way is very slow. 
+  ## FIXME: ishold called this way is very slow.
   if (! ishold (ax))
     set (ax, "view", [0, 90]);
   endif
 
 endfunction
 
 
 ## Functional tests for surface() are in surf.m, surfc.m, surfl.m, and pcolor.m
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -567,17 +567,17 @@ endfunction
 %! A = zeros (N, N);
 %! for i = 1 : N - 1  # form 1-D Laplacian matrix
 %!   A(i:i+1, i:i+1) = [2 -1; -1 2];
 %! endfor
 %! b = ones (N, 1);
 %! [x, flag, relres, iter, resvec, eigest] = pcg (A, b, [], [], A, [], b);
 %! assert (flag, 0);
 %! assert (norm (b - A*x) / norm (b), 0, 1e-6);
-%! 
+%!
 %! assert (isnan (eigest), isnan ([NaN, NaN]));
 
 %!test
 %! ## pcg detect a non-Hermitian matrix, with a considerable imaginary part.
 %! ## In this example, Matlab does not recognize the wrong type of matrix and
 %! ## makes iterations until it reaches maxit.
 %! N = 10;
 %! A = diag (1:N) + 1e-4*i;
diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -86,17 +86,17 @@ function [pf, n] = factor (q)
   ## Determine multiplicity.
   if (nargout > 1)
     idx = find ([0, pf] != [pf, 0]);
     pf = pf(idx(1:length (idx)-1));
     n = diff (idx);
   endif
 
  ## Restore class of input
- pf = feval (cls, pf); 
+ pf = feval (cls, pf);
 
 endfunction
 
 
 %!assert (factor (1), 1)
 %!test
 %! for i = 2:20
 %!   pf = factor (i);
diff --git a/scripts/testfun/speed.m b/scripts/testfun/speed.m
--- a/scripts/testfun/speed.m
+++ b/scripts/testfun/speed.m
@@ -283,18 +283,18 @@ function [__order, __test_n, __tnew, __t
     loglog (__test_n, __tnew*1000, "*-g;execution time;");
     xlabel ("test length");
     ylabel ("best execution time (ms)");
     title ({__f1, ["init: " __init]});
 
   elseif (do_display)
 
     subplot (1, 2, 1);
-    semilogx (__test_n, __tnew./__torig, "-*g", 
-              __test_n, __torig./__tnew, "-*r");
+    semilogx (__test_n, __tnew ./ __torig, "-*g",
+              __test_n, __torig ./ __tnew, "-*r");
     legend ({[strrep(__f1, ";", ".") " / " strrep(__f2, ";", ".")],
              [strrep(__f2, ";", ".") " / " strrep(__f1, ";", ".")]},
             "location", "northwest");
     title ("Speedup Ratio");
     xlabel ("test length");
     ylabel ("speedup ratio");
 
     subplot (1, 2, 2);
