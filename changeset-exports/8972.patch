# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236947962 -3600
#      Fri Mar 13 13:39:22 2009 +0100
# Node ID 5fa53d1b6247a4f98377c1181cf6fcefdbfb9b77
# Parent  967a692ddfe249db30f5ec6ff430795dbcfe9a57
more indexing optimizations

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,14 +1,17 @@
 2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Range.h (Range::Range (double, double, octave_idx_type)): Remove
 	constructor body.
 	* Range.cc: Move it here. Check for invalid range op results.
 	(all operators): Validate cache for invalid range op results.
+	* idx-vector.h (idx_vector::index): Optimize zero-step range case.
+	* idx-vector.cc (idx_vector::maybe_reduce): Always reduce colon in
+	singleton dimension.
 
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* sparse-base-lu.cc (Pr_mat): New member function.  Return the row
 	permutation as a PermMatrix.
 	(Pc_mat): New member function.  Return the col permutation as a
 	PermMatrix.
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -411,16 +411,26 @@ bool idx_vector::maybe_reduce (octave_id
 
   // Empty index always reduces.
   if (rep->length (n) == 0)
     {
       *this = idx_vector ();
       return true;
     }
 
+  // Possibly skip singleton dims.
+  if (n == 1 && rep->is_colon_equiv (n))
+    {
+      *this = j;
+      return true;
+    }
+
+  if (nj == 1 && j.is_colon_equiv (nj))
+    return true;
+
   switch (j.idx_class ())
     {
     case class_colon:
       if (rep->is_colon_equiv (n))
         {
           // (:,:) reduces to (:)
           *this = colon;
           reduced = true;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -512,16 +512,18 @@ public:
           {
             idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
             octave_idx_type start = r->get_start (), step = r->get_step ();
             const T *ssrc = src + start;
             if (step == 1)
               std::copy (ssrc, ssrc + len, dest);
             else if (step == -1)
               std::reverse_copy (ssrc - len + 1, ssrc + 1, dest);
+            else if (step == 0)
+              std::fill_n (dest, len, *ssrc);
             else
               {
                 for (octave_idx_type i = 0, j = 0; i < len; i++, j += step)
                   dest[i] = ssrc[j];
               }
           }
           break;
         case class_scalar:
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,16 @@
 2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.h (octave_range::octave_range (const Range&)): Allow
 	constructing from invalid range op result.
 	* ov-range.cc (octave_range::try_narrowing_conversion): Validate
 	invalid range op results.
+	* data.cc (fill_matrix): Return packed form (zero-step range) if
+	possible.
 
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* DLD-FUNCTIONS/lu.cc (lu): Call fact.Pr_mat () and fact.Pc_mat ()
 	to return permutation matrices in the sparse case.
 
 2009-03-12  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -3243,17 +3243,22 @@ fill_matrix (const octave_value_list& ar
 	      retval = uint64NDArray (dims, val);
 	      break;
 
 	    case oct_data_conv::dt_single:
 	      retval = FloatNDArray (dims, val);
 	      break;
 
 	    case oct_data_conv::dt_double:
-	      retval = NDArray (dims, val);
+              {
+                if (val == 1 && dims.length () == 2 && dims (0) == 1)
+                  retval = Range (1.0, 0.0, dims (1)); // packed form
+                else
+                  retval = NDArray (dims, val);
+              }
 	      break;
 
 	    case oct_data_conv::dt_logical:
 	      retval = boolNDArray (dims, val);
 	      break;
 
 	    default:
 	      error ("%s: invalid class name", fcn);
