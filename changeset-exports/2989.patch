# HG changeset patch
# User jwe
# Date 863769259 0
#      Fri May 16 07:54:19 1997 +0000
# Node ID 6a7b578b6fb4b14467de0bf3ea0ee9cd6e160cc8
# Parent  daa1ed1f5462886126488b949fcb9c72d8b049b7
[project @ 1997-05-16 07:54:10 by jwe]

diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -99,20 +99,19 @@ private:
   // True if this is an assignment to the built-in variable ans.
   bool ans_ass;
 
   // The type of the expression.
   octave_value::assign_op etype;
 
   // No copying!
 
-  tree_simple_assignment_expression (const tree_simple_assignment_expression&);
+  tree_simple_assignment (const tree_simple_assignment&);
 
-  tree_simple_assignment_expression&
-  operator = (const tree_simple_assignment_expression&);
+  tree_simple_assignment& operator = (const tree_simple_assignment&);
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
@@ -147,20 +146,19 @@ public:
 private:
 
   bool preserve;
   tree_argument_list *lhs;
   tree_expression *rhs;
 
   // No copying!
 
-  tree_multi_assignment_expression (const tree_multi_assignment_expression&);
+  tree_multi_assignment (const tree_multi_assignment&);
 
-  tree_multi_assignment_expression&
-  operator = (const tree_multi_assignment_expression&);
+  tree_multi_assignment& operator = (const tree_multi_assignment&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -47,31 +47,18 @@ tree_constant : public tree_expression
 public:
 
   tree_constant (int l = -1, int c = -1)
     : tree_expression (l, c), val (), orig_text () { }
 
   tree_constant (const octave_value& v, int l = -1, int c = -1)
     : tree_expression (l, c), val (v), orig_text () { }
 
-  tree_constant (const tree_constant& a)
-    : tree_expression (-1, -1), val (a.val), orig_text () { }
-
   ~tree_constant (void) { }
 
-  tree_constant& operator = (const tree_constant& a)
-    {
-      if (this != &a)
-	{
-	  tree_expression::operator = (a);
-	  val = a.val;
-	}
-      return *this;
-    }
-
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   // Type.  It would be nice to eliminate the need for this.
 
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -49,21 +49,21 @@ void
 tree_decl_elt::accept (tree_walker& tw)
 {
   tw.visit_decl_elt (*this);
 }
 
 // Initializer lists for declaration statements.
 
 void
-tree_decl_init_list::eval (tree_decl_elt::eval_fcn f, bool skip_init)
+tree_decl_init_list::eval (tree_decl_elt::eval_fcn f)
 {
   for (Pix p = first (); p != 0; next (p))
     {
-      f (*(this->operator () (p)), skip_init);
+      f (*(this->operator () (p)));
 
       if (error_state)
 	break;
     }
 }
 
 void
 tree_decl_init_list::accept (tree_walker& tw)
@@ -81,18 +81,18 @@ tree_decl_command::~tree_decl_command (v
 void
 tree_decl_command::accept (tree_walker& tw)
 {
   tw.visit_decl_command (*this);
 }
 
 // Global.
 
-static void
-do_global_init (tree_decl_elt& elt, bool skip_initializer)
+void
+tree_global_command::do_init (tree_decl_elt& elt)
 {
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->link_to_global ();
 
       tree_expression *expr = elt.expression ();
@@ -108,30 +108,30 @@ do_global_init (tree_decl_elt& elt, bool
     }
 }
 
 void
 tree_global_command::eval (void)
 {
   if (init_list)
     {
-      init_list->eval (do_global_init, initialized);
+      init_list->eval (do_init);
 
       initialized = true;
     }
 
   if (error_state > 0)
     ::error ("evaluating global command near line %d, column %d",
 	     line (), column ());
 }
 
 // Static.
 
-static void
-do_static_init (tree_decl_elt& elt, bool)
+void
+tree_static_command::do_init (tree_decl_elt& elt)
 {
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->mark_as_static ();
 
       tree_expression *expr = elt.expression ();
@@ -149,17 +149,17 @@ do_static_init (tree_decl_elt& elt, bool
 
 void
 tree_static_command::eval (void)
 {
   // Static variables only need to be marked and initialized once.
 
   if (init_list && ! initialized)
     {
-      init_list->eval (do_static_init, initialized);
+      init_list->eval (do_init);
 
       initialized = true;
 
       if (error_state > 0)
 	::error ("evaluating static command near line %d, column %d",
 		 line (), column ());
     }
 }
diff --git a/src/pt-decl.h b/src/pt-decl.h
--- a/src/pt-decl.h
+++ b/src/pt-decl.h
@@ -40,17 +40,17 @@ class tree_walker;
 
 // List of expressions that make up a declaration statement.
 
 class
 tree_decl_elt
 {
 public:
 
-  typedef void (*eval_fcn) (tree_decl_elt &, bool);
+  typedef void (*eval_fcn) (tree_decl_elt &);
 
   tree_decl_elt (tree_identifier *i = 0, tree_expression *e = 0)
     : id (i), expr (e) { }
 
   ~tree_decl_elt (void);
 
   void eval (void);
 
@@ -90,17 +90,17 @@ public:
     {
       while (! empty ())
 	{
 	  tree_decl_elt *t = remove_front ();
 	  delete t;
 	}
     }
 
-  void eval (tree_decl_elt::eval_fcn, bool);
+  void eval (tree_decl_elt::eval_fcn);
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_decl_init_list (const tree_decl_init_list&);
@@ -164,16 +164,18 @@ public:
     : tree_decl_command ("global", t, l, c) { }
 
   ~tree_global_command (void) { }
 
   void eval (void);
 
 private:
 
+  static void do_init (tree_decl_elt& elt);
+
   // No copying!
 
   tree_global_command (const tree_global_command&);
 
   tree_global_command& operator = (const tree_global_command&);
 };
 
 // Static.
@@ -190,16 +192,18 @@ public:
     : tree_decl_command ("static", t, l, c) { }
 
   ~tree_static_command (void) { }
 
   void eval (void);
 
 private:
 
+  static void do_init (tree_decl_elt& elt);
+
   // No copying!
 
   tree_static_command (const tree_static_command&);
 
   tree_static_command& operator = (const tree_static_command&);
 };
 
 #endif
