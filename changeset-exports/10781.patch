# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278924735 -7200
#      Mon Jul 12 10:52:15 2010 +0200
# Node ID f7584d0ba5d3d2bc491c96743ff0f7e0472bb5b8
# Parent  6e7590d003dc67c38fe704269337679d1ba8150b
allow unwind_protect register actions with const T& args

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* unwind-prot.h (unwind_protect::fcn_crefarg_elem): New class.
+	(unwind_protect::add_fcn (void (*) (const T&), T)): New method
+	overload.
+
 2010-07-08  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/__magick_read__,cc (F__magick_read__): Add the syntax
 	__magick_read__ ("file", "frames", "all").
 
 2010-07-08  Rik <octave@nomad.inbox5.com>
 
 	* DLD_FUNCTIONS/eigs.cc: Initialize random number generator in test
diff --git a/src/unwind-prot.h b/src/unwind-prot.h
--- a/src/unwind-prot.h
+++ b/src/unwind-prot.h
@@ -76,16 +76,33 @@ public:
 
     void run (void) { e_fcn (e_arg); }
 
   private:
     void (*e_fcn) (T);
     T e_arg;
   };
 
+  // An element that stores a variable of type T along with a void (*) (const T&)
+  // function pointer, and calls the function with the parameter.
+
+  template <class T>
+  class fcn_crefarg_elem : public elem
+  {
+  public:
+    fcn_crefarg_elem (void (*fcn) (const T&), T arg)
+      : e_fcn (fcn), e_arg (arg) { }
+
+    void run (void) { e_fcn (e_arg); }
+
+  private:
+    void (*e_fcn) (const T&);
+    T e_arg;
+  };
+
   // An element for calling a member function.
 
   template <class T>
   class method_elem : public elem
   {
   public:
     method_elem (T *obj, void (T::*method) (void))
       : e_obj (obj), e_method (method) { }
@@ -149,16 +166,23 @@ public:
 
   // Call to void func (T).
   template <class T>
   void add_fcn (void (*action) (T), T val)
     {
       add (new fcn_arg_elem<T> (action, val));
     }
 
+  // Call to void func (const T&).
+  template <class T>
+  void add_fcn (void (*action) (const T&), T val)
+    {
+      add (new fcn_crefarg_elem<T> (action, val));
+    }
+
   // Call to T::method (void).
   template <class T>
   void add_method (T *obj, void (T::*method) (void))
     {
       add (new method_elem<T> (obj, method));
     }
 
   // Call to delete (T*).
