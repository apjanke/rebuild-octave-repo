# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1292608169 28800
#      Fri Dec 17 09:49:29 2010 -0800
# Node ID 473e4adaa5a28a5f6e85e36827ba60202d08f3a7
# Parent  567ca09a97aa6417590481ce7a43c13648e7471a
oop.txi: Redo table rendered incorrectly in Info environment.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-12-17  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/oop.txi: Redo table rendered incorrectly in Info
+	environment.
+
 2010-12-17  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/numbers.txi: Remove obsolete documentation about 64-bit
 	integer arithmetic.
 
 2010-12-16  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/doccheck/mk_undocumented_list: Update list of exception
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -119,17 +119,17 @@ getting help for the overloaded methods 
 The same is true for other Octave functions that take a function name
 as an argument.  For example @code{type @@polynomial/display} will
 print the code of the display method of the polynomial class to the
 screen, and @code{dbstop @@polynomial/display} will set a breakpoint
 at the first executable line of the display method of the polynomial
 class.
 
 To check where a variable is a user class, the @code{isobject} and
-@code{isa} functions can be used. for example:
+@code{isa} functions can be used.  For example:
 
 @example
 @group
 p = polynomial ([1, 0, 1]);
 isobject (p)
 @result{} 1
 isa (p, "polynomial")
 @result{} 1
@@ -513,45 +513,45 @@ width 0.6pt \tabskip=0pt\cr
 & {\it display} && display (a) && Commandline display function &\cr
 \noalign{\hrule height 0.6pt}
 }}\hfill}}
 @end tex
 @ifnottex
 @multitable @columnfractions .1 .20 .20 .40 .1
 @item @tab Operation @tab Method @tab Description @tab
 @item @tab a + b @tab plus (a, b) @tab Binary addition @tab
-@item @tab a - b$ @tab minus (a, b) @tab Binary subtraction operator @tab
-@item @tab + a$ @tab uplus (a) @tab Unary addition operator @tab
-@item @tab - a$ @tab uminus (a) @tab Unary subtraction operator @tab
-@item @tab a .* b$ @tab times (a, b) @tab Element-wise multiplication operator @tab
-@item @tab a * b$ @tab mtimes (a, b) @tab Matrix multiplication operator @tab
-@item @tab a ./ b$ @tab rdivide (a, b) @tab Element-wise right division operator @tab
-@item @tab a / b$ @tab mrdivide (a, b) @tab Matrix right division operator @tab
-@item @tab a .\ b$ @tab ldivide (a, b) @tab Element-wise left division operator @tab
-@item @tab a \ b$ @tab mldivide (a, b) @tab Matrix left division operator @tab
-@item @tab a .^ b$ @tab ldivide (a, b) @tab Element-wise power operator @tab
-@item @tab a ^ b$ @tab mldivide (a, b) @tab Matrix power operator @tab
-@item @tab a < b$ @tab lt (a, b) @tab Less than operator @tab
-@item @tab a <= b$ @tab le (a, b) @tab Less than or equal to operator @tab
-@item @tab a > b$ @tab gt (a, b) @tab Greater than operator @tab
-@item @tab a >= b$ @tab ge (a, b) @tab Greater than or equal to operator @tab
-@item @tab a == b$ @tab eq (a, b) @tab Equal to operator @tab
-@item @tab a != b$ @tab ne (a, b) @tab Not equal to operator @tab
-@item @tab a \& b$ @tab and (a, b) @tab Logical and operator @tab
-@item @tab a | b$ @tab or (a, b) @tab Logical or operator @tab
-@item @tab ! b$ @tab not (a) @tab Logical not operator @tab
-@item @tab a'$ @tab ctranspose (a) @tab Complex conjugate transpose operator @tab
-@item @tab a.'$ @tab transpose (a) @tab Transpose operator @tab
-@item @tab a : b$ @tab colon (a, b) @tab Two element range operator @tab
-@item @tab a : b : c$ @tab colon (a, b, c) @tab Three element range operator @tab
-@item @tab [a, b]$ @tab horzcat (a, b) @tab Horizontal concatenation operator @tab
-@item @tab [a; b]$ @tab vertcat (a, b) @tab Vertical concatenation operator @tab
-@item @tab a(s_1, \ldots, s_n)$ @tab subsref (a, s) @tab Subscripted reference @tab
-@item @tab a(s_1, \ldots, s_n) = b$ @tab subsasgn (a, s, b) @tab Subscripted assignment @tab
-@item @tab b (a)$ @tab subsindex (a) @tab Convert to zero-based index @tab
+@item @tab a - b @tab minus (a, b) @tab Binary subtraction operator @tab
+@item @tab + a @tab uplus (a) @tab Unary addition operator @tab
+@item @tab - a @tab uminus (a) @tab Unary subtraction operator @tab
+@item @tab a .* b @tab times (a, b) @tab Element-wise multiplication operator @tab
+@item @tab a * b @tab mtimes (a, b) @tab Matrix multiplication operator @tab
+@item @tab a ./ b @tab rdivide (a, b) @tab Element-wise right division operator @tab
+@item @tab a / b @tab mrdivide (a, b) @tab Matrix right division operator @tab
+@item @tab a .\ b @tab ldivide (a, b) @tab Element-wise left division operator @tab
+@item @tab a \ b @tab mldivide (a, b) @tab Matrix left division operator @tab
+@item @tab a .^ b @tab ldivide (a, b) @tab Element-wise power operator @tab
+@item @tab a ^ b @tab mldivide (a, b) @tab Matrix power operator @tab
+@item @tab a < b @tab lt (a, b) @tab Less than operator @tab
+@item @tab a <= b @tab le (a, b) @tab Less than or equal to operator @tab
+@item @tab a > b @tab gt (a, b) @tab Greater than operator @tab
+@item @tab a >= b @tab ge (a, b) @tab Greater than or equal to operator @tab
+@item @tab a == b @tab eq (a, b) @tab Equal to operator @tab
+@item @tab a != b @tab ne (a, b) @tab Not equal to operator @tab
+@item @tab a \& b @tab and (a, b) @tab Logical and operator @tab
+@item @tab a | b @tab or (a, b) @tab Logical or operator @tab
+@item @tab ! b @tab not (a) @tab Logical not operator @tab
+@item @tab a' @tab ctranspose (a) @tab Complex conjugate transpose operator @tab
+@item @tab a.' @tab transpose (a) @tab Transpose operator @tab
+@item @tab a : b @tab colon (a, b) @tab Two element range operator @tab
+@item @tab a : b : c @tab colon (a, b, c) @tab Three element range operator @tab
+@item @tab [a, b] @tab horzcat (a, b) @tab Horizontal concatenation operator @tab
+@item @tab [a; b] @tab vertcat (a, b) @tab Vertical concatenation operator @tab
+@item @tab a(s_1, @dots{}, s_n) @tab subsref (a, s) @tab Subscripted reference @tab
+@item @tab a(s_1, @dots{}, s_n) = b @tab subsasgn (a, s, b) @tab Subscripted assignment @tab
+@item @tab b (a) @tab subsindex (a) @tab Convert to zero-based index @tab
 @item @tab  @dfn{display} @tab display (a) @tab Commandline display function @tab
 @end multitable
 @end ifnottex
 @caption{Available overloaded operators and their corresponding class method}
 @end float
 
 An example @code{mtimes} method for our polynomial class might look like
 
