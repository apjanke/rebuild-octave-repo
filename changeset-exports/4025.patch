# HG changeset patch
# User jwe
# Date 1028874736 0
#      Fri Aug 09 06:32:16 2002 +0000
# Node ID cfb762dc92595fb31c7b6cd06105dc8e9a9e9bed
# Parent  00d06e24cc8900f64eb799cdae9c2389ea5bb2ca
[project @ 2002-08-09 06:32:15 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-ieee.cc (lo_ieee_is_NA): New function.
+	(lo_ieee_is_NaN_or_NA): New function.
+	(octave_NA): New global value.
+	(octave_ieee_init): Initialize it.
+	* lo-mappers.cc (octave_is_NA): New function.
+	(octave_is_NaN_or_NA): New function.
+	(xisnan): Return false if NaN looks like a missing value.
+	(xisnan (const Complex&)): Use xisnan here.
+
 2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.h (ComplexMatrix::all, ComplexMatrix::any,
 	ComplexMatrix::cumprod, ComplexMatrix::cumsum,
 	ComplexMatrix::prod, ComplexMatrix::sum, ComplexMatrix::sumsq):
 	Default value for dim is -1, not 0.
 	* dMatrix.h (Matrix::all, Matrix::any, Matrix::cumprod,
 	Matrix::cumsum, Matrix::prod, Matrix::sum, Matrix::sumsq): Likewise.
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -41,23 +41,39 @@ Software Foundation, 59 Temple Place - S
 #endif
 #include <nan.h>
 #if defined (SCO)
 #undef _IEEE
 #endif
 #endif
 
 #include "lo-ieee.h"
+#include "mach-info.h"
 
 // Octave's idea of infinity.
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
+// Octave's idea of a missing value.
+double octave_NA;
+
+static int hw;
+static int lw;
+
+typedef union
+{
+  double value;
+  unsigned int word[2];
+} ieee_double;
+
+#define NA_HW 0x7ff00000
+#define NA_LW 1954
+
 void
 octave_ieee_init (void)
 {
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 
 // Some version of gcc on some old version of Linux used to crash when
 // trying to make Inf and NaN.
 
@@ -85,16 +101,37 @@ octave_ieee_init (void)
 
 #if defined (__alpha__) && ! defined (linux)
   extern unsigned int DQNAN[2];
   octave_NaN = (*(X_CAST(double *, DQNAN)));
 #else
   octave_NaN = octave_Inf / octave_Inf;
 #endif
 
+  // This is patterned after code in R.
+
+  oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
+
+  if (ff == oct_mach_info::ieee_big_endian)
+    {
+      hw = 0;
+      lw = 1;
+    }
+  else
+    {
+      hw = 1;
+      lw = 0;
+    }
+
+  ieee_double t;
+  t.word[hw] = NA_HW;
+  t.word[lw] = NA_LW;
+
+  octave_NA = t.value;
+
 #endif
 }
 
 #if defined (SCO)
 
 extern "C" int
 isnan (double x)
 {
@@ -104,13 +141,27 @@ isnan (double x)
 extern "C" int
 isinf (double x)
 {
   return (IsNANorINF (x) && IsINF (x)) ? 1 : 0;
 }
 
 #endif
 
+extern "C" int
+lo_ieee_is_NA (double x)
+{
+  ieee_double t;
+  t.value = x;
+  return (isnan (x) && t.word[lw] == NA_LW) ? 1 : 0;
+}
+
+extern "C" int
+lo_ieee_is_NaN_or_NA (double x)
+{
+  return isnan (x);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -24,18 +24,24 @@ Software Foundation, 59 Temple Place - S
 #define octave_liboctave_ieee_h 1
 
 // Octave's idea of infinity.
 extern double octave_Inf;
 
 // Octave's idea of not a number.
 extern double octave_NaN;
 
+// Octave's idea of a missing value.
+extern double octave_NA;
+
 extern void octave_ieee_init (void);
 
+extern "C" int lo_ieee_is_NA (double);
+extern "C" int lo_ieee_is_NaN_or_NA (double);
+
 #if defined (SCO)
 extern "C" int isnan (double);
 extern "C" int isinf (double);
 #endif
 
 #endif
 
 /*
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -138,48 +138,62 @@ xerfc (double x)
 }
 
 // double -> bool mappers.
 
 bool
 xisnan (double x)
 {
 #if defined (HAVE_ISNAN)
-  return isnan (x) != 0;
+  return isnan (x) ? ! lo_ieee_is_NA (x) : false;
 #else
   return false;
 #endif
 }
 
 bool
 xfinite (double x)
 {
 #if defined (HAVE_FINITE)
-  return finite (x) != 0;
-#elif defined (HAVE_ISINF) && defined (HAVE_ISNAN)
-  return (! isinf (x) && ! isnan (x));
+  return finite (x) != 0 && ! octave_is_NaN_or_NA (x);
+#elif defined (HAVE_ISINF)
+  return (! isinf (x) && ! octave_is_NaN_or_NA (x));
 #else
-  return true;
+  return ! octave_is_NaN_or_NA (x);
 #endif
 }
 
 bool
 xisinf (double x)
 {
 #if defined (HAVE_ISINF)
   return isinf (x);
-#elif defined (HAVE_FINITE) && defined (HAVE_ISNAN)
-  return (! (finite (x) || isnan (x)));
+#elif defined (HAVE_FINITE)
+  return (! (finite (x) || octave_is_NaN_or_NA (x)));
 #else
   return false;
 #endif
 }
 
+bool
+octave_is_NA (double x)
+{
+  return lo_ieee_is_NA (x);
+}
+
+bool
+octave_is_NaN_or_NA (double x)
+{
+  return lo_ieee_is_NaN_or_NA (x);
+}
+
 // (double, double) -> double mappers.
 
+// XXX FIXME XXX -- need to handle NA too?
+
 double
 xmin (double x, double y)
 {
   return x < y ? x : (xisnan (x) ? x : y);
 }
 
 double
 xmax (double x, double y)
@@ -283,37 +297,51 @@ signum (const Complex& x)
   return x / abs (x);
 }
 
 // complex -> bool mappers.
 
 bool
 xisnan (const Complex& x)
 {
-#if defined (HAVE_ISNAN)
-  return (isnan (real (x)) || isnan (imag (x)));
-#else
-  return false;
-#endif
+  return (xisnan (real (x)) || xisnan (imag (x)));
 }
 
 bool
 xfinite (const Complex& x)
 {
-  return (xfinite (real (x)) && xfinite (imag (x)));
+  double rx = real (x);
+  double ix = imag (x);
+
+  return (xfinite (rx) && ! octave_is_NaN_or_NA (rx)
+	  && xfinite (ix) && ! octave_is_NaN_or_NA (ix));
 }
 
 bool
 xisinf (const Complex& x)
 {
   return (xisinf (real (x)) || xisinf (imag (x)));
 }
 
+bool
+octave_is_NA (const Complex& x)
+{
+  return (octave_is_NA (real (x)) || octave_is_NA (imag (x)));
+}
+
+bool
+octave_is_NaN_or_NA (const Complex& x)
+{
+  return (octave_is_NaN_or_NA (real (x)) || octave_is_NaN_or_NA (imag (x)));
+}
+
 // (complex, complex) -> complex mappers.
 
+// XXX FIXME XXX -- need to handle NA too?
+
 Complex
 xmin (const Complex& x, const Complex& y)
 {
   return abs (x) <= abs (y) ? x : (xisnan (x) ? x : y);
 }
 
 Complex
 xmax (const Complex& x, const Complex& y)
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -34,16 +34,19 @@ extern double round (double x);
 extern double signum (double x);
 extern double xerf (double x);
 extern double xerfc (double x);
 
 extern bool xisnan (double x);
 extern bool xfinite (double x);
 extern bool xisinf (double x);
 
+extern bool octave_is_NA (double x);
+extern bool octave_is_NaN_or_NA (double x);
+
 extern double xmin (double x, double y);
 extern double xmax (double x, double y);
 
 extern Complex acos (const Complex& x);
 extern Complex acosh (const Complex& x);
 extern Complex asin (const Complex& x);
 extern Complex asinh (const Complex& x);
 extern Complex atan (const Complex& x);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2002-08-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (switch_case): Make list of command optional.
+
+2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (pr_max_internal): Use octave_is_NaN_or_NA instead
+	of xisnan.
+	(pr_min_internal): Likewise.
+	(output_max_field_width): Likewise.
+	(output_precision): Likewise.
+	(pr_any_float): Handle NA.
+	* mappers.cc (Fisna, F_is_nan_or_na): New functions.
+	* data.cc (symbols_of_data): New constant, NA.
+
 2002-08-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-binop.h (tree_binary_expression::is_binary_expression):
 	New function, return true.
 	(tree_boolean_expression::is_boolean_expression): New function,
 	return true.
 	* pt-exp.h (tree_expression::is_binary_expression): New function.
 	(tree_expression::is_boolean_expression): Likewise.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1188,16 +1188,22 @@ find NaN values, you must use the @code{
     IMAGINARY_DOC_STRING);
 
   DEFCONST (Inf, octave_Inf,
     INFINITY_DOC_STRING);
 
   DEFCONST (J, Complex (0.0, 1.0),
     IMAGINARY_DOC_STRING);
 
+  DEFCONST (NA, octave_NA,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} NA\n\
+Missing value.\n\
+@end defvr");
+
   DEFCONST (NaN, octave_NaN,
     NAN_DOC_STRING);
 
 #if defined (M_E)
   double e_val = M_E;
 #else
   double e_val = exp (1.0);
 #endif
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -424,44 +424,73 @@ Return 1 for characters that are decimal
   DEFUN_MAPPER (isinf, 0, xisinf, xisinf, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isinf (@var{x})\n\
 Return 1 for elements of @var{x} that are infinite and zero\n\
 otherwise. For example,\n\
 \n\
 @example\n\
 @group\n\
-isinf ([13, Inf, NaN])\n\
-     @result{} [ 0, 1, 0 ]\n\
+isinf ([13, Inf, NA, NaN])\n\
+     @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isgraph, xisgraph, 0, 0, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isgraph (@var{s})\n\
 Return 1 for printable characters (but not the space character).\n\
 @end deftypefn");
 
   DEFUN_MAPPER (islower, xislower, 0, 0, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} islower (@var{s})\n\
 Return 1 for characters that are lower case letters.\n\
 @end deftypefn");
 
+  DEFUN_MAPPER (isna, 0, octave_is_NA, octave_is_NA, 0, 0, 0, 0.0, 0.0, 0,
+    "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} isna (@var{x})\n\
+Return 1 for elements of @var{x} that are NA (missing) values and zero\n\
+otherwise. For example,\n\
+\n\
+@example\n\
+@group\n\
+is_NA ([13, Inf, NA, NaN])\n\
+     @result{} [ 0, 0, 1, 0 ]\n\
+@end group\n\
+@end example\n\
+@end deftypefn");
+
+  DEFUN_MAPPER (is_nan_or_na, 0, octave_is_NaN_or_NA,
+		octave_is_NaN_or_NA, 0, 0, 0, 0.0, 0.0, 0,
+    "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} is_nan_or_na (@var{x})\n\
+Return 1 for elements of @var{x} that are NaN or NA (missing) values\n\
+and zero otherwise. For example,\n\
+\n\
+@example\n\
+@group\n\
+is_NAN_or_NA ([13, Inf, NA, NaN])\n\
+     @result{} [ 0, 0, 1, 1 ]\n\
+@end group\n\
+@end example\n\
+@end deftypefn");
+
   DEFUN_MAPPER (isnan, 0, xisnan, xisnan, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isnan (@var{x})\n\
 Return 1 for elements of @var{x} that are NaN values and zero\n\
 otherwise. For example,\n\
 \n\
 @example\n\
 @group\n\
-isnan ([13, Inf, NaN])\n\
-     @result{} [ 0, 0, 1 ]\n\
+isnan ([13, Inf, NA, NaN])\n\
+     @result{} [ 0, 0, 0, 1 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isprint, xisprint, 0, 0, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isprint (@var{s})\n\
 Return 1 for printable characters (including the space character).\n\
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -993,17 +993,17 @@ case_list1	: switch_case
 		  { $$ = new tree_switch_case_list ($1); }
 		| case_list1 switch_case
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
 		;
 
-switch_case	: CASE stash_comment opt_sep expression opt_sep list
+switch_case	: CASE stash_comment opt_sep expression opt_sep opt_list
 		  { $$ = make_switch_case ($4, $6, $2); }
 		;
 
 default_case	: OTHERWISE stash_comment opt_sep opt_list
 		  {
 		    $$ = new tree_switch_case ($4, $2);
 		  }
 		;
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -210,17 +210,17 @@ pr_max_internal (const Matrix& m)
   int nc = m.columns ();
 
   double result = -DBL_MAX;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double val = m(i,j);
-	if (xisinf (val) || xisnan (val))
+	if (xisinf (val) || octave_is_NaN_or_NA (val))
 	  continue;
 
 	if (val > result)
 	  result = val;
       }
 
   return result;
 }
@@ -232,17 +232,17 @@ pr_min_internal (const Matrix& m)
   int nc = m.columns ();
 
   double result = DBL_MAX;
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double val = m(i,j);
-	if (xisinf (val) || xisnan (val))
+	if (xisinf (val) || octave_is_NaN_or_NA (val))
 	  continue;
 
 	if (val < result)
 	  result = val;
       }
 
   return result;
 }
@@ -1133,16 +1133,23 @@ pr_any_float (const float_format *fmt, s
 	  else
 	    s = "Inf";
 
 	  if (fw > 0)
 	    os << std::setw (fw) << s;
 	  else
 	    os << s;
 	}
+      else if (octave_is_NA (d))
+	{
+	  if (fw > 0)
+	    os << std::setw (fw) << "NA";
+	  else
+	    os << "NA";
+	}
       else if (xisnan (d))
 	{
 	  if (fw > 0)
 	    os << std::setw (fw) << "NaN";
 	  else
 	    os << "NaN";
 	}
       else
@@ -2097,17 +2104,17 @@ fixed_point_format (void)
   return 0;
 }
 
 static int
 output_max_field_width (void)
 {
   double val;
   if (builtin_real_scalar_variable ("output_max_field_width", val)
-      && ! xisnan (val))
+      && ! octave_is_NaN_or_NA (val))
     {
       int ival = NINT (val);
       if (ival > 0 && ival == val)
 	{
 	  Voutput_max_field_width = ival;
 	  return 0;
 	}
     }
@@ -2115,17 +2122,17 @@ output_max_field_width (void)
   return -1;
 }
 
 static int
 output_precision (void)
 {
   double val;
   if (builtin_real_scalar_variable ("output_precision", val)
-      && ! xisnan (val))
+      && ! octave_is_NaN_or_NA (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && ival == val)
 	{
 	  Voutput_precision = ival;
 	  return 0;
 	}
     }
