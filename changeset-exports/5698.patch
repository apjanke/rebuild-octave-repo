# HG changeset patch
# User dbateman
# Date 1142959018 0
#      Tue Mar 21 16:36:58 2006 +0000
# Node ID e33aff8ba3780d20a229c30b0f119c4d08007462
# Parent  2fe20065a545777c62b9e80455bac8f9b47a82ea
[project @ 2006-03-21 16:36:58 by dbateman]

diff --git a/src/DLD-FUNCTIONS/getrusage.cc b/src/DLD-FUNCTIONS/getrusage.cc
--- a/src/DLD-FUNCTIONS/getrusage.cc
+++ b/src/DLD-FUNCTIONS/getrusage.cc
@@ -30,16 +30,20 @@ 02110-1301, USA.
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #ifdef HAVE_SYS_RESOURCE_H
 #include <sys/resource.h>
 #endif
 
+#if defined (__MINGW32__)
+#include <windows.h>
+#endif
+
 #if defined (HAVE_TIMES) && defined (HAVE_SYS_TIMES_H)
 
 #if defined (HAVE_SYS_PARAM_H)
 #include <sys/param.h>
 #endif
 #include <sys/times.h>
 
 #if !defined (HZ)
@@ -128,16 +132,17 @@ elements @code{sec} (seconds) @code{usec
 A structure containing the user CPU time used.  The structure has the\n\
 elements @code{sec} (seconds) @code{usec} (microseconds).\n\
 @end table\n\
 @end deftypefn")
 {
   Octave_map m;
   Octave_map tv_tmp;
 
+  // XXX FIXME XX -- maybe encapsulate all of this in a liboctave class
 #if defined (HAVE_GETRUSAGE)
 
   struct rusage ru;
 
   getrusage (RUSAGE_SELF, &ru);
 
   tv_tmp.assign ("sec", static_cast<double> (ru.ru_utime.tv_sec));
   tv_tmp.assign ("usec", static_cast<double> (ru.ru_utime.tv_usec));
@@ -186,16 +191,30 @@ elements @code{sec} (seconds) @code{usec
   ticks = t.tms_stime + t.tms_cstime;
   fraction = ticks % HZ;
   seconds = ticks / HZ;
 
   tv_tmp.assign ("sec", static_cast<double> (seconds));
   tv_tmp.assign ("usec", static_cast<double> (fraction * 1e6 / HZ));
   m.assign ("stime", octave_value (tv_tmp));
 
+#elif defined (__MINGW32__)
+  HANDLE hProcess = GetCurrentProcess ();
+  FILETIME ftCreation, ftExit, ftUser, ftKernel;
+  GetProcessTimes (hProcess, &ftCreation, &ftExit, &ftKernel, &ftUser);
+
+  EIGHT_BYTE_INT itmp = *(reinterpret_cast<EIGHT_BYTE_INT *> (&ftUser));
+  tv_tmp.assign ("sec", static_cast<double> (itmp / 10000000U));
+  tv_tmp.assign ("usec", static_cast<double> (itmp % 10000000U) / 10.);
+  m.assign ("utime", octave_value (tv_tmp));
+
+  itmp = *(reinterpret_cast<EIGHT_BYTE_INT *> (&ftKernel));
+  tv_tmp.assign ("sec", static_cast<double> (itmp / 10000000U));
+  tv_tmp.assign ("usec", static_cast<double> (itmp % 10000000U) / 10.);
+  m.assign ("stime", octave_value (tv_tmp));
 #else
 
   tv_tmp.assign ("sec", 0);
   tv_tmp.assign ("usec", 0);
   m.assign ("utime", octave_value (tv_tmp));
 
   tv_tmp.assign ("sec", 0);
   tv_tmp.assign ("usec", 0);
