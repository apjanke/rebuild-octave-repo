# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458411130 14400
#      Sat Mar 19 14:12:10 2016 -0400
# Node ID 128703a2938862fbaaf176a38c4678f8d83a2966
# Parent  7f7d7cb73e0d9deef9088713b23b0cc66916e6f7
avoid some duplicate code in file-io functions

* file-io.cc (Ffscanf, Fsscanf): Share code for extracting stream and
format from function arguments.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -933,18 +933,22 @@ expanded even when the template string i
 {
   static std::string who = "sprintf";
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
 
+  // We don't use octave_ostrstream::create here because need direct
+  // access to the OSTR object so that we can extract a string object
+  // from it to return.
   octave_ostrstream *ostr = new octave_ostrstream ();
 
+  // The octave_stream destructor will delete OSTR for us.
   octave_stream os (ostr);
 
   if (! os.is_valid ())
     error ("%s: unable to create output buffer", who.c_str ());
 
   octave_value fmt_arg = args(0);
 
   if (! fmt_arg.is_string ())
@@ -1028,32 +1032,27 @@ complete description of the syntax of th
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   octave_value_list retval;
 
+  octave_stream os = octave_stream_list::lookup (args(0), who);
+
+  if (! args(1).is_string ())
+    error ("%s: format TEMPLATE must be a string", who.c_str ());
+
   if (nargin == 3 && args(2).is_string ())
     {
-      octave_stream os = octave_stream_list::lookup (args(0), who);
-
-      if (! args(1).is_string ())
-        error ("%s: format TEMPLATE must be a string", who.c_str ());
-
       retval = ovl (os.oscanf (args(1), who));
     }
   else
     {
-      octave_stream os = octave_stream_list::lookup (args(0), who);
-
-      if (! args(1).is_string ())
-        error ("%s: format must be a string", who.c_str ());
-
       octave_idx_type count = 0;
 
       Array<double> size = (nargin == 3)
         ? args(2).vector_value ()
         : Array<double> (dim_vector (1, 1),
                          lo_ieee_inf_value ());
 
       octave_value tmp = os.scanf (args(1), size, count, who);
@@ -1096,42 +1095,32 @@ character to be read is returned in @var
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   octave_value_list retval;
 
+  std::string data = get_sscanf_data (args(0));
+
+  octave_stream os = octave_istrstream::create (data);
+
+  if (! os.is_valid ())
+    error ("%s: unable to create temporary input buffer", who.c_str ());
+
+  if (! args(1).is_string ())
+    error ("%s: format TEMPLATE must be a string", who.c_str ());
+
   if (nargin == 3 && args(2).is_string ())
     {
-      std::string data = get_sscanf_data (args(0));
-
-      octave_stream os = octave_istrstream::create (data);
-
-      if (! os.is_valid ())
-        error ("%s: unable to create temporary input buffer", who.c_str ());
-
-      if (! args(1).is_string ())
-        error ("%s: format TEMPLATE must be a string", who.c_str ());
-
       retval = ovl (os.oscanf (args(1), who));
     }
   else
     {
-      std::string data = get_sscanf_data (args(0));
-
-      octave_stream os = octave_istrstream::create (data);
-
-      if (! os.is_valid ())
-        error ("%s: unable to create temporary input buffer", who.c_str ());
-
-      if (! args(1).is_string ())
-        error ("%s: format TEMPLATE must be a string", who.c_str ());
-
       octave_idx_type count = 0;
 
       Array<double> size = (nargin == 3) ? args(2).vector_value ()
                                          : Array<double> (dim_vector (1, 1),
                                                           lo_ieee_inf_value ());
 
       octave_value tmp = os.scanf (args(1), size, count, who);
 
