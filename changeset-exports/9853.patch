# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1258969711 -3600
#      Mon Nov 23 10:48:31 2009 +0100
# Node ID 8d9e4752441afccc9f1260f60d0faa5a9181301e
# Parent  aabf7a8c2e5747fdf6c6f50635cd234bd831773d
implement complex built-in logical conversions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-complex.h (octave_complex::bool_value,
+	octave_complex::bool_array_value): New methods.
+	* ov-flt-complex.h (octave_float_complex::bool_value,
+	octave_float_complex::bool_array_value): New methods.
+	* ov-cx-mat.cc (octave_complex_matrix::bool_array_value): New method.
+	* ov-cx-mat.h: Declare it.
+	* ov-flt-cx-mat.cc (octave_float_complex_matrix::bool_array_value):
+	New method.
+	* ov-flt-cx-mat.h: Declare it.
+
 2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (octave_struct::save_ascii): Save dimensions for
 	structs.
 	(octave_struct::load_ascii): Load dimensions if present, 
 	use 1x1 otherwise.
 
 2009-11-20  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
+#include "gripes.h"
 #include "error.h"
 #include "ov-base.h"
 #include "ov-cx-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
@@ -130,16 +131,36 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
+  bool bool_value (bool warn = false) const
+  {
+    if (xisnan (scalar))
+      error ("invalid conversion from NaN to logical");
+    else if (warn && scalar != 0.0 && scalar != 1.0)
+      gripe_logical_conversion ();
+
+    return scalar != 0.0;
+  }
+
+  boolNDArray bool_array_value (bool warn = false) const
+  {
+    if (xisnan (scalar))
+      error ("invalid conversion from NaN to logical");
+    else if (warn && scalar != 0.0 && scalar != 1.0)
+      gripe_logical_conversion ();
+
+    return boolNDArray (dim_vector (1, 1), scalar != 0.0);
+  }
+
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -216,16 +216,28 @@ octave_complex_matrix::complex_matrix_va
 }
 
 FloatComplexMatrix
 octave_complex_matrix::float_complex_matrix_value (bool) const
 {
   return FloatComplexMatrix (matrix.matrix_value ());
 }
 
+boolNDArray
+octave_complex_matrix::bool_array_value (bool warn) const
+{
+  if (matrix.any_element_is_nan ())
+    error ("invalid conversion from NaN to logical");
+  else if (warn && (! matrix.all_elements_are_real () 
+                    || real (matrix).any_element_not_one_or_zero ()))
+    gripe_logical_conversion ();
+
+  return mx_el_ne (matrix, Complex (0.0));
+}
+  
 charNDArray
 octave_complex_matrix::char_array_value (bool frc_str_conv) const
 {
   charNDArray retval;
 
   if (! frc_str_conv)
     gripe_implicit_conversion ("Octave:num-to-str",
 			       "complex matrix", "string");
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -121,16 +121,18 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const { return matrix; }
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
+  boolNDArray bool_array_value (bool warn = false) const;
+
   charNDArray char_array_value (bool frc_str_conv = false) const;
   
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   octave_value diag (octave_idx_type k = 0) const;
 
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -225,16 +225,28 @@ octave_sparse_complex_matrix::sparse_mat
 			       "complex sparse matrix", 
 			       "real sparse matrix");
 
   retval = ::real (matrix);
 
   return retval;
 }
 
+SparseBoolMatrix 
+octave_sparse_complex_matrix::sparse_bool_matrix_value (bool warn) const
+{
+  if (matrix.any_element_is_nan ())
+    error ("invalid conversion from NaN to logical");
+  else if (warn && (! matrix.all_elements_are_real () 
+                    || real (matrix).any_element_not_one_or_zero ()))
+    gripe_logical_conversion ();
+
+  return mx_el_ne (matrix, Complex (0.0));
+}
+
 bool 
 octave_sparse_complex_matrix::save_binary (std::ostream& os, 
 					   bool&save_as_floats)
 {
   dim_vector d = this->dims ();
   if (d.length() < 1)
     return false;
 
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -122,16 +122,18 @@ public:
 
   charNDArray char_array_value (bool frc_str_conv = false) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
     { return matrix; }
 
+  SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const;
+
 #if 0
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     {
       // Yes, for compatibility, we drop the imaginary part here.
       return os.write (matrix_value (true), block_size, output_type,
 		       skip, flt_fmt);
diff --git a/src/ov-flt-complex.h b/src/ov-flt-complex.h
--- a/src/ov-flt-complex.h
+++ b/src/ov-flt-complex.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
+#include "gripes.h"
 #include "error.h"
 #include "ov-base.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
@@ -128,16 +129,36 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
+  bool bool_value (bool warn = false) const
+  {
+    if (xisnan (scalar))
+      error ("invalid conversion from NaN to logical");
+    else if (warn && scalar != 0.0f && scalar != 1.0f)
+      gripe_logical_conversion ();
+
+    return scalar != 0.0f;
+  }
+
+  boolNDArray bool_array_value (bool warn = false) const
+  {
+    if (xisnan (scalar))
+      error ("invalid conversion from NaN to logical");
+    else if (warn && scalar != 0.0f && scalar != 1.0f)
+      gripe_logical_conversion ();
+
+    return boolNDArray (dim_vector (1, 1), scalar != 1.0f);
+  }
+
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -205,16 +205,28 @@ octave_float_complex_matrix::complex_mat
 }
 
 FloatComplexMatrix
 octave_float_complex_matrix::float_complex_matrix_value (bool) const
 {
   return FloatComplexMatrix (matrix.matrix_value ());
 }
 
+boolNDArray
+octave_float_complex_matrix::bool_array_value (bool warn) const
+{
+  if (matrix.any_element_is_nan ())
+    error ("invalid conversion from NaN to logical");
+  else if (warn && (! matrix.all_elements_are_real () 
+                    || real (matrix).any_element_not_one_or_zero ()))
+    gripe_logical_conversion ();
+
+  return mx_el_ne (matrix, FloatComplex (0.0));
+}
+  
 charNDArray
 octave_float_complex_matrix::char_array_value (bool frc_str_conv) const
 {
   charNDArray retval;
 
   if (! frc_str_conv)
     gripe_implicit_conversion ("Octave:num-to-str",
 			       "complex matrix", "string");
diff --git a/src/ov-flt-cx-mat.h b/src/ov-flt-cx-mat.h
--- a/src/ov-flt-cx-mat.h
+++ b/src/ov-flt-cx-mat.h
@@ -119,16 +119,18 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const { return matrix; }
 
   FloatComplexNDArray float_complex_array_value (bool = false) const;
 
+  boolNDArray bool_array_value (bool warn = false) const;
+
   charNDArray char_array_value (bool frc_str_conv = false) const;
   
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   octave_value diag (octave_idx_type k = 0) const;
 
