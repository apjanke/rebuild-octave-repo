# HG changeset patch
# User Rik <rik@octave.org>
# Date 1486229382 28800
#      Sat Feb 04 09:29:42 2017 -0800
# Node ID eb5a162c13421e26c1b15741d738029ebb375c24
# Parent  c9082b847f79a7cb30565b3343ef1948965e3bda
Accept case-insensitive string value for p-value input to norm (bug #50195);

* data.cc (Fnorm): New value of strflag enum sfneginf to represent p-value of "-Inf".
Use std::transform (..., tolower) to change any input string to lower case.
Check for string "-inf" and set p-value to numeric -Inf.  Add BIST tests for behavior.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5582,52 +5582,58 @@ compute the norms of each column and ret
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value x_arg = args(0);
 
   if (x_arg.ndims () != 2)
     error ("norm: only valid for 2-D objects");
 
-  enum { sfmatrix, sfcols, sfrows, sffrob, sfinf } strflag = sfmatrix;
+  enum {sfmatrix, sfcols, sfrows, sffrob, sfinf, sfneginf} strflag = sfmatrix;
   if (nargin > 1 && args(nargin-1).is_string ())
     {
       std::string str = args(nargin-1).string_value ();
+      std::transform (str.begin (), str.end (), str.begin (), tolower);
       if (str == "cols" || str == "columns")
         strflag = sfcols;
       else if (str == "rows")
         strflag = sfrows;
       else if (str == "fro")
         strflag = sffrob;
       else if (str == "inf")
         strflag = sfinf;
+      else if (str == "-inf")
+        strflag = sfneginf;
       else
         error ("norm: unrecognized option: %s", str.c_str ());
 
       // we've handled the last parameter, so act as if it was removed
       nargin--;
     }
 
   octave_value p_arg = (nargin > 1) ? args(1) : octave_value (2);
 
   if (p_arg.is_empty ())
     p_arg = octave_value (2);
   else if (p_arg.is_string ())
     {
       std::string str = p_arg.string_value ();
+      std::transform (str.begin (), str.end (), str.begin (), tolower);
       if (strflag != sfcols && strflag != sfrows)
         error ("norm: invalid combination of options");
 
       if (str == "cols" || str == "columns" || str == "rows")
         error ("norm: invalid combination of options");
 
       if (str == "fro")
         p_arg = octave_value (2);
       else if (str == "inf")
         p_arg = octave::numeric_limits<double>::Inf ();
+      else if (str == "-inf")
+        p_arg = -octave::numeric_limits<double>::Inf ();
       else
         error ("norm: unrecognized option: %s", str.c_str ());
     }
   else if (! p_arg.is_scalar_type ())
     err_wrong_type_arg ("norm", p_arg);
 
   octave_value retval;
 
@@ -5647,31 +5653,36 @@ compute the norms of each column and ret
 
     case sffrob:
       retval = xfrobnorm (x_arg);
       break;
 
     case sfinf:
       retval = xnorm (x_arg, octave::numeric_limits<double>::Inf ());
       break;
+
+    case sfneginf:
+      retval = xnorm (x_arg, -octave::numeric_limits<double>::Inf ());
+      break;
     }
 
   return retval;
 }
 
 /*
 %!shared x
 %! x = [1, -3, 4, 5, -7];
 %!assert (norm (x,0), 5)
 %!assert (norm (x,1), 20)
 %!assert (norm (x,2), 10)
 %!assert (norm (x,3), 8.24257059961711, -4*eps)
 %!assert (norm (x,Inf), 7)
 %!assert (norm (x,-Inf), 1)
 %!assert (norm (x,"inf"), 7)
+%!assert (norm (x,"-Inf"), 1)
 %!assert (norm (x,"fro"), 10, -eps)
 %!assert (norm (x), 10)
 %!assert (norm ([1e200, 1]), 1e200)
 %!assert (norm ([3+4i, 3-4i, sqrt(31)]), 9, -4*eps)
 %!shared m
 %! m = magic (4);
 %!assert (norm (m,1), 34)
 %!assert (norm (m,2), 34, -eps)
@@ -5689,16 +5700,17 @@ compute the norms of each column and ret
 %! x = single ([1, -3, 4, 5, -7]);
 %!assert (norm (x,0), single (5))
 %!assert (norm (x,1), single (20))
 %!assert (norm (x,2), single (10))
 %!assert (norm (x,3), single (8.24257059961711), -4*eps ("single"))
 %!assert (norm (x,Inf), single (7))
 %!assert (norm (x,-Inf), single (1))
 %!assert (norm (x,"inf"), single (7))
+%!assert (norm (x,"-Inf"), single (1))
 %!assert (norm (x,"fro"), single (10), -eps ("single"))
 %!assert (norm (x), single (10))
 %!assert (norm (single ([1e38, 1])), single (1e38))
 %!assert (norm (single ([3+4i, 3-4i, sqrt(31)])), single (9), -4*eps ("single"))
 %!shared m
 %! m = single (magic (4));
 %!assert (norm (m,1), single (34))
 %!assert (norm (m,2), single (34), -eps ("single"))
