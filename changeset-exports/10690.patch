# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1276060165 25200
#      Tue Jun 08 22:09:25 2010 -0700
# Node ID 35adf2a71f3f6d51b64dff129cf37fd605058696
# Parent  6622772a0add9aacf3578ec4f15825f6fc1e0f29
Use common code block to find first non-singleton dimension.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-03  Rik <octave@nomad.inbox5.com>
+
+        * general/cumtrapz.m, general/postpad.m, general/prepad.m, 
+        general/shift.m, general/trapz.m, signal/unwrap.m: Use common 
+        method to find first non-singleton dimension.
 2010-06-03  Rik <octave@nomad.inbox5.com>
 
         * general/rotdim.m: Modify function to use same variable names
         as documentation.
 
 2010-06-03  Rik <octave@nomad.inbox5.com>
 
         * general/cart2pol.m, general/cart2sph.m, general/pol2cart.m, 
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -12,24 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{z} =} cumtrapz (@var{y})
+## @deftypefn  {Function File} {@var{z} =} cumtrapz (@var{y})
 ## @deftypefnx {Function File} {@var{z} =} cumtrapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{z} =} cumtrapz (@dots{}, @var{dim})
 ## 
 ## Cumulative numerical integration using trapezoidal method.
 ## @code{cumtrapz (@var{y})} computes the cumulative integral of the 
 ## @var{y} along the first non-singleton dimension.  If the argument 
-## @var{x} is omitted a equally spaced vector is assumed.  @code{cumtrapz 
+## @var{x} is omitted an equally spaced vector is assumed.  @code{cumtrapz 
 ## (@var{x}, @var{y})} evaluates the cumulative integral with respect 
 ## to @var{x}.
 ##  
 ## @seealso{trapz,cumsum}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ##
@@ -45,57 +45,52 @@ function z = cumtrapz (x, y, dim)
   nd = ndims (x);
   sz = size (x);
 
   have_x = false;
   have_dim = false;
   if (nargin == 3)
     have_x = true;
     have_dim = true;
-  endif
-  if (nargin == 2)
+  elseif (nargin == 2)
     if (! size_equal (x, y) && isscalar (y))
       dim = y;
       have_dim = true;
     else
       have_x = true;
     endif
   endif
 
   if (! have_dim)
-    ## Find the first singleton dimension.
-    dim = 0;
-    while (dim < nd && sz(dim+1) == 1)
-      dim++;
-    endwhile
-    dim++;
-    if (dim > nd)
+    ## Find the first non-singleton dimension.
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
     dim = floor (dim);
-    if (dim < 1 || dim > nd)
-      error ("cumtrapz: invalid dimension along which to sort");
+    if (! (isscalar (dim) && 1 <= dim && dim <= nd))
+      error ("cumtrapz: invalid dimension DIM");
     endif
   endif
 
   n = sz(dim);
   idx1 = cell ();
   for i = 1:nd
     idx1{i} = 1:sz(i);
   endfor
   idx2 = idx1;
   idx1{dim} = 2 : n;    
   idx2{dim} = 1 : (n - 1);
 
   if (! have_x)
     z = 0.5 * cumsum (x(idx1{:}) + x(idx2{:}), dim);
   else
     if (! size_equal (x, y))
-      error ("cumtrapz: x and y must have same shape");
+      error ("cumtrapz: X and Y must have the same shape");
     endif
     z = 0.5 * cumsum ((x(idx1{:}) - x(idx2{:})) .* 
                       (y(idx1{:}) + y(idx2{:})), dim);
   endif
 
   sz(dim) = 1;
   z = cat (dim, zeros (sz), z);
 
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} postpad (@var{x}, @var{l}, @var{c})
+## @deftypefn  {Function File} {} postpad (@var{x}, @var{l}, @var{c})
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c}, @var{dim})
 ## @seealso{prepad, resize}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = postpad (x, l, c, dim)
@@ -38,28 +38,25 @@ function y = postpad (x, l, c, dim)
     if (! isscalar (c))
       error ("postpad: third argument must be empty or a scalar");
     endif
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 4)
-    %% Find the first non-singleton dimension
-    dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    ## Find the first non-singleton dimension
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-        dim < (nd + 1))
-      error ("postpad: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == fix (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("postpad: DIM must be an integer and a valid dimension");
     endif
   endif
 
   if (! isscalar (l) || l < 0)
     error ("postpad: second argument must be a positive scaler");
   endif
 
   if (dim > nd)
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -49,28 +49,25 @@ function y = prepad (x, l, c, dim)
     if (! isscalar (c))
       error ("prepad: third argument must be empty or a scalar");
     endif
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 4)
-    %% Find the first non-singleton dimension
-    dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    ## Find the first non-singleton dimension
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-        dim < (nd + 1))
-      error ("prepad: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == fix (dim)) ||
+        !(1 <= dimm && dim <= nd))
+      error ("prepad: DIM must be an integer and a valid dimension");
     endif
   endif
 
   if (! isscalar (l) || l < 0)
     error ("prepad: second argument must be a positive scaler");
   endif
 
   if (dim > nd)
diff --git a/scripts/general/shift.m b/scripts/general/shift.m
--- a/scripts/general/shift.m
+++ b/scripts/general/shift.m
@@ -13,61 +13,58 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} shift (@var{x}, @var{b})
+## @deftypefn  {Function File} {} shift (@var{x}, @var{b})
 ## @deftypefnx {Function File} {} shift (@var{x}, @var{b}, @var{dim})
 ## If @var{x} is a vector, perform a circular shift of length @var{b} of
 ## the elements of @var{x}.
 ##
 ## If @var{x} is a matrix, do the same for each column of @var{x}.
 ## If the optional @var{dim} argument is given, operate along this 
-## dimension
+## dimension.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 14 September 1994
 ## Adapted-By: jwe
 
 function y = shift (x, b, dim)
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
   endif
 
   if (! (isscalar (b) && b == round (b)))
-    error ("shift: b must be an integer");
+    error ("shift: B must be an integer");
   endif
 
   nd = ndims (x);
   sz = size (x);
 
   if (nargin == 3)
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-        dim < (nd + 1))
-      error ("shift: dim must be an integer and valid dimension");
+    if (!(isscalar (dim) && dim == round (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("shift: DIM must be an integer and a valid dimension");
     endif
   else
-    ## Find the first non-singleton dimension
-    dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    ## Find the first non-singleton dimension.
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   endif
 
   if (numel (x) < 1)
-    error ("shift: x must not be empty");
+    error ("shift: X must not be empty");
   endif
 
   d = sz (dim);
 
   idx = cell ();
   for i = 1:nd
     idx{i} = 1:sz(i);
   endfor
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{z} =} trapz (@var{y})
+## @deftypefn {Function File}  {@var{z} =} trapz (@var{y})
 ## @deftypefnx {Function File} {@var{z} =} trapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{z} =} trapz (@dots{}, @var{dim})
 ## 
 ## Numerical integration using trapezoidal method.  @code{trapz
 ## (@var{y})} computes the integral of the @var{y} along the first
 ## non-singleton dimension.  If the argument @var{x} is omitted a 
 ## equally spaced vector is assumed.  @code{trapz (@var{x}, @var{y})} 
 ## evaluates the integral with respect to @var{x}.
@@ -32,17 +32,16 @@
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ##
 ## also: June 2000 - Paul Kienzle (fixes,suggestions) 
 ## 2006-05-12 David Bateman - Modified for NDArrays
 
 function z = trapz (x, y, dim)
         
-
   if (nargin < 1) || (nargin > 3)
     print_usage ();
   endif
 
   nd = ndims (x);
   sz = size (x);
 
   have_x = false;
@@ -56,29 +55,25 @@ function z = trapz (x, y, dim)
       dim = y;
       have_dim = true;
     else
       have_x = true;
     endif
   endif
 
   if (! have_dim)
-    ## Find the first singleton dimension.
-    dim = 0;
-    while (dim < nd && sz(dim+1) == 1)
-      dim++;
-    endwhile
-    dim++;
-    if (dim > nd)
+    ## Find the first non-singleton dimension.
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
     dim = floor (dim);
     if (dim < 1 || dim > nd)
-      error ("trapz: invalid dimension along which to sort");
+      error ("trapz: invalid dimension DIM along which to sort");
     endif
   endif
  
   n = sz(dim);
   idx1 = cell ();
   for i = 1:nd
     idx1{i} = 1:sz(i);
   endfor
diff --git a/scripts/signal/unwrap.m b/scripts/signal/unwrap.m
--- a/scripts/signal/unwrap.m
+++ b/scripts/signal/unwrap.m
@@ -12,60 +12,61 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{b} =} unwrap (@var{a}, @var{tol}, @var{dim})
+## @deftypefn  {Function File} {@var{b} =} unwrap (@var{a})
+## @deftypefnx {Function File} {@var{b} =} unwrap (@var{a}, @var{tol})
+## @deftypefnx {Function File} {@var{b} =} unwrap (@var{a}, @var{tol}, @var{dim})
 ## 
 ## Unwrap radian phases by adding multiples of 2*pi as appropriate to
 ## remove jumps greater than @var{tol}.  @var{tol} defaults to pi.
 ##
-## Unwrap will unwrap along the first non-singleton dimension of
-## @var{a}, unless the optional argument @var{dim} is given, in 
-## which case the data will be unwrapped along this dimension
+## Unwrap will work along the the dimension @var{dim}.  If @var{dim}
+## is unspecified it defaults to the first non-singleton dimension.
 ## @end deftypefn
 
 ## Author: Bill Lash <lash@tellabs.com>
 
 function retval = unwrap (a, tol, dim)
         
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
-  nd = ndims (a);
-  sz = size (a);
-
-  if (nargin == 3)
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-        dim < (nd + 1))
-      error ("unwrap: dim must be an integer and valid dimension");
-    endif
-  else
-    ## Find the first non-singleton dimension
-    dim  = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
-      dim = 1;
-    endif
+  if (!isnumeric(a))
+    error ("unwrap: A must be a numeric matrix or vector");
   endif
 
   if (nargin < 2 || isempty (tol))
     tol = pi;
   endif
 
   ## Don't let anyone use a negative value for TOL.
   tol = abs (tol);
-  
+
+  nd = ndims (a);
+  sz = size (a);
+  if (nargin == 3)
+    if (!(isscalar (dim) && dim == fix (dim)) || 
+        !(1 <= dim && dim <= nd))
+      error ("unwrap: DIM must be an integer and a valid dimension");
+    endif
+  else
+    ## Find the first non-singleton dimension
+    dim = find (sz > 1, 1);
+    if (isempty (dim))
+      dim = 1;
+    endif
+  endif
+
   rng = 2*pi;
   m = sz(dim);
 
   ## Handle case where we are trying to unwrap a scalar, or only have
   ## one sample in the specified dimension.
   if (m == 1)       
     retval = a;     
     return;         
