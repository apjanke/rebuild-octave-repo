# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277452255 -7200
#      Fri Jun 25 09:50:55 2010 +0200
# Node ID bee1b1a2e29a1d1cb10ddcda4feef323edd2bf26
# Parent  d1b09c44d797cfd267fe3669d336fe19747abbf6
yield compatible dims from cell2struct + more fixes. build & tests OK

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-map.h (octave_map::octave_map (const dim_vector&, const
+	octave_fields&)): New internal ctor.
+
+	* oct-map.cc (octave_map::assign): Handle no fields case.
+
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (Fcell2struct): Rewrite.
 
 2010-06-24  Rik <octave@nomad.inbox5.com>
 
         * octave.cc: Add [FILE] to octave usage string (bug #30258).
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -828,16 +828,22 @@ octave_map::assign (const idx_vector& i,
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (i, rhs_dummy);;
           dimensions = dummy.dims ();
         }
 
       optimize_dimensions ();
     }
+  else if (nfields () == 0)
+    {
+      octave_map tmp (dimensions, rhs.xkeys);
+      tmp.assign (i, rhs);
+      *this = tmp;
+    }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
           assert (rhs1.xkeys.is_same (xkeys));
           assign (i, rhs1);
@@ -865,16 +871,22 @@ octave_map::assign (const idx_vector& i,
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (i, j, rhs_dummy);;
           dimensions = dummy.dims ();
         }
 
       optimize_dimensions ();
     }
+  else if (nfields () == 0)
+    {
+      octave_map tmp (dimensions, rhs.xkeys);
+      tmp.assign (i, j, rhs);
+      *this = tmp;
+    }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
           assert (rhs1.xkeys.is_same (xkeys));
           assign (i, j, rhs1);
@@ -902,16 +914,22 @@ octave_map::assign (const Array<idx_vect
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (ia, rhs_dummy);;
           dimensions = dummy.dims ();
         }
 
       optimize_dimensions ();
     }
+  else if (nfields () == 0)
+    {
+      octave_map tmp (dimensions, rhs.xkeys);
+      tmp.assign (ia, rhs);
+      *this = tmp;
+    }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
           assert (rhs1.xkeys.is_same (xkeys));
           assign (ia, rhs1);
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -242,27 +242,30 @@ private:
 };
 
 class OCTINTERP_API
 octave_map
 {
   octave_map (const octave_fields& k)
     : xkeys (k), xvals (k.nfields ()), dimensions () { }
 
+  octave_map (const dim_vector& dv, const octave_fields& k)
+    : xkeys (k), xvals (k.nfields (), Cell (dv)), dimensions (dv) { }
+
 public:
 
   octave_map (void) : xkeys (), xvals (), dimensions () { }
 
   octave_map (const dim_vector& dv) : xkeys (), xvals (), dimensions (dv) { }
 
   octave_map (const string_vector& k)
     : xkeys (k), xvals (k.length ()), dimensions (1, 1) { }
 
   octave_map (const dim_vector& dv, const string_vector& k)
-    : xkeys (k), xvals (k.length ()), dimensions (dv) { }
+    : xkeys (k), xvals (k.length (), Cell (dv)), dimensions (dv) { }
 
   octave_map (const octave_map& m)
     : xkeys (m.xkeys), xvals (m.xvals), dimensions (m.dimensions) { }
 
   octave_map (const octave_scalar_map& m);
 
   octave_map (const Octave_map& m);
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1413,17 +1413,17 @@ octave_scalar_struct::save_ascii (std::o
 }
 
 bool
 octave_scalar_struct::load_ascii (std::istream& is)
 {
   bool success = true;
   octave_idx_type len = 0;
 
-  if (extract_keyword (is, "length", len, true) && len >= 0)
+  if (extract_keyword (is, "length", len) && len >= 0)
     {
       if (len > 0)
         {
           octave_scalar_map m;
 
           for (octave_idx_type j = 0; j < len; j++)
             {
               octave_value t2;
@@ -2038,24 +2038,41 @@ A(1)\n\
               ext = vals.ndims () > dim ? vals.dims ()(dim) : 1;
               if (ext != fields.numel ())
                 error ("cell2struct: number of fields doesn't match dimension");
             }
 
 
           if (! error_state)
             {
-              octave_map map;
-              Array<idx_vector> ia (std::max (dim+1, vals.ndims ()), 1, 
-                                    idx_vector::colon);
+              int nd = std::max (dim+1, vals.ndims ());
+              // result dimensions.
+              dim_vector rdv = vals.dims ().redim (nd);
+
+              assert (ext == rdv(dim));
+              if (nd == 2)
+                {
+                  rdv(0) = rdv(1-dim);
+                  rdv(1) = 1;
+                }
+              else
+                {
+                  for (int i =  dim + 1; i < nd; i++)
+                    rdv(i-1) = rdv(i);
+
+                  rdv.resize (nd-1);
+                }
+
+              octave_map map (rdv);
+              Array<idx_vector> ia (nd, 1, idx_vector::colon);
 
               for (octave_idx_type i = 0; i < ext; i++)
                 {
                   ia(dim) = i;
-                  map.setfield (fields(i), vals.index (ia));
+                  map.setfield (fields(i), vals.index (ia).reshape (rdv));
                 }
 
               retval = map;
             }
         }
     }
   else
     print_usage ();
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -2648,16 +2648,17 @@ install_types (void)
   octave_uint8_matrix::register_type ();
   octave_uint16_matrix::register_type ();
   octave_uint32_matrix::register_type ();
   octave_uint64_matrix::register_type ();
   octave_sparse_bool_matrix::register_type ();
   octave_sparse_matrix::register_type ();
   octave_sparse_complex_matrix::register_type ();
   octave_struct::register_type ();
+  octave_scalar_struct::register_type ();
   octave_class::register_type ();
   octave_cs_list::register_type ();
   octave_magic_colon::register_type ();
   octave_builtin::register_type ();
   octave_user_function::register_type ();
   octave_dld_function::register_type ();
   octave_fcn_handle::register_type ();
   octave_fcn_inline::register_type ();
