# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1220381408 14400
#      Tue Sep 02 14:50:08 2008 -0400
# Node ID 4665276ff7f618f116d95c995fd27c30e45da7c7
# Parent  a4e03f9b4b8ad5926df241e267861c27a0573e87
correctly plot matrices in plot3

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-02  David Bateman  <dbateman@free.fr>
+
+	* plot/__line__.m: Remove empty clause fof if/then/else test
+	* plot/plot3.m: Correctly plot matrices.
+
 2008-08-31  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* plot/__plt2mm__.m, plot/__plt2mv__.m, plot/__plt2ss__.m,
 	plot/__plt2sv__.m, plot/__plt2vm__.m, plot/__plt2vs__.m,
 	plot/__plt2vv__.m: Do not call "set" with empty arguments.
 
 2008-08-29  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/plot/__line__.m b/scripts/plot/__line__.m
--- a/scripts/plot/__line__.m
+++ b/scripts/plot/__line__.m
@@ -37,18 +37,17 @@ function h = __line__ (p, varargin)
       num_data_args = 3;
     else
       num_data_args = 2;
     endif
   else
     num_data_args = 0;
   endif
 
-  if (rem (nvargs - num_data_args, 2) == 0)
-  else
+  if (rem (nvargs - num_data_args, 2) != 0)
     print_usage ("line");
   endif
 
   data_args = {};
   if (num_data_args > 1)
     data_args(1:4) = { "xdata", varargin{1}, "ydata", varargin{2} };
     if (num_data_args == 3)
       data_args(5:6) = { "zdata", varargin{3} };
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -156,46 +156,52 @@ function retval = plot3 (varargin)
       endif
 
       if (isvector (x) && isvector (y))
 	if (isvector (z))
 	  x = x(:);
 	  y = y(:);
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
-	  error ("plot3: [length(x), length(y)] must match size(z)");
+	  [x, y] = meshgrid (x, y);
 	else
-	  [x, y] = meshgrid (x, y);
+	  error ("plot3: [length(x), length(y)] must match size(z)");
 	endif
       endif
 
       if (! size_equal (x, y, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
-      color = options.color;
-      if (isempty (options.color))
-	color = __next_line_color__ ();
-      endif
+
+      for i = 1 : columns (x)
+	color = options.color;
+	if (isempty (options.color))
+	  color = __next_line_color__ ();
+	endif
+
+	hg = hggroup ();
+	tmp(++idx) = hg;
+	properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
 
-      hg = hggroup ();
-      tmp(++idx) = hg;
-      properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
+	hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
+		      "color", color,
+		      "linestyle", options.linestyle,
+		      "marker", options.marker, "parent", hg);
 
-      hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
-		    "linestyle", options.linestyle,
-		    "marker", options.marker, "parent", hg);
+	__add_line_series__ (hline, hg);
 
-      __add_line_series__ (hline, hg);
-
-      set (hg, properties{:});
+	if (! isempty (properties))
+	  set (hg, properties{:});
+	endif
+      endfor
 
       x_set = 0;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     elseif (! x_set)
       x = new;
@@ -208,47 +214,53 @@ function retval = plot3 (varargin)
       z_set = 1;
     else
       if (isvector (x) && isvector (y))
 	if (isvector (z))
 	  x = x(:);
 	  y = y(:);
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
-	  error ("plot3: [length(x), length(y)] must match size(z)");
+	  [x, y] = meshgrid (x, y);
 	else
-	  [x, y] = meshgrid (x, y);
+	  error ("plot3: [length(x), length(y)] must match size(z)");
 	endif
       endif
 
       if (! size_equal (x, y, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       options =  __default_plot_options__ ();
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
-      color = options.color;
-      if (isempty (color))
-	color = __next_line_color__ ();
-      endif
+
+      for i = 1 : columns (x)
+	color = options.color;
+	if (isempty (color))
+	  color = __next_line_color__ ();
+	endif
+
+	hg = hggroup ();
+	tmp(++idx) = hg;
+	properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
 
-      hg = hggroup ();
-      tmp(++idx) = hg;
-      properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
+	hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key,
+		      "color", color,
+		      "linestyle", options.linestyle,
+		      "marker", options.marker, "parent", hg);
 
-      hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
-		    "linestyle", options.linestyle,
-		    "marker", options.marker, "parent", hg);
+	__add_line_series__ (hline, hg);
 
-      __add_line_series__ (hline, hg);
-
-      set (hg, properties{:});
+	if (! isempty (properties))
+	  set (hg, properties{:});
+	endif
+      endfor
 
       x = new;
       y_set = 0;
       z_set = 0;
       fmt_set = 0;
       properties = {};
     endif
 
@@ -280,46 +292,53 @@ function retval = plot3 (varargin)
     endif
 
     if (isvector (x) && isvector (y))
       if (isvector (z))
 	x = x(:);
 	y = y(:);
 	z = z(:);
       elseif (length (x) == rows (z) && length (y) == columns (z))
-	error ("plot3: [length(x), length(y)] must match size(z)");
+	[x, y] = meshgrid (x, y);
       else
-	[x, y] = meshgrid (x, y);
+	error ("plot3: [length(x), length(y)] must match size(z)");
       endif
     endif
 
     if (! size_equal (x, y, z))
       error ("plot3: x, y, and z must have the same shape");
     endif
 
     options =  __default_plot_options__ ();
     key = options.key;
     if (! isempty (key))
       set (gca (), "key", "on");
     endif
-    color = options.color;
-    if (isempty (color))
-      color = __next_line_color__ ();
-    endif
+
+    for i = 1 : columns (x)
+      color = options.color;
+      if (isempty (color))
+	color = __next_line_color__ ();
+      endif
+
+      hg = hggroup ();
+      tmp(++idx) = hg;
+      properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
 
-    hg = hggroup ();
-    tmp(++idx) = hg;
-    properties = __add_datasource__ ("plot3", hg, {"x", "y", "z"}, properties{:});
+      hline = line (x(:, i), y(:, i), z(:, i),  "keylabel", key, 
+		    "color", color,
+		    "linestyle", options.linestyle,
+		    "marker", options.marker, "parent", hg);
 
-    hline = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
-		  "linestyle", options.linestyle,
-		  "marker", options.marker, "parent", hg);
+      __add_line_series__ (hline, hg);
 
-    __add_line_series__ (hline, hg);
-
+      if (! isempty (properties))
+	set (hg, properties{:});
+      endif
+    endfor
   endif
 
   set (gca (), "view", [-37.5, 30]);
 
   if (nargout > 0 && idx > 0)
     retval = tmp;
   endif
 
