# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1223031854 -7200
#      Fri Oct 03 13:04:14 2008 +0200
# Node ID 6c08e3921d3e1931e3e201f958de59fe1db51dc2
# Parent  af41e20949932285bbcf5829bbff884c7c02dc1e
imported patch maybe_delete_fix.diff

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1771,17 +1771,17 @@ template <class T>
 void
 Array<T>::maybe_delete_elements (idx_vector&, idx_vector&, idx_vector&)
 {
   assert (0);
 }
 
 template <class T>
 void
-Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv)
+Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx)
 {
   octave_idx_type n_idx = ra_idx.length ();
 
   // Special case matrices
   if (ndims () == 2)
     {
       if (n_idx == 1)
         {
@@ -1799,17 +1799,17 @@ Array<T>::maybe_delete_elements (Array<i
 
   int n_lhs_dims = lhs_dims.length ();
 
   if (lhs_dims.all_zero ())
     return;
 
   if (n_idx == 1 && ra_idx(0).is_colon ())
     {
-      resize (dim_vector (0, 0), rfv);
+      resize (dim_vector (0, 0));
       return;
     }
 
   if (n_idx > n_lhs_dims)
     {
       for (int i = n_idx; i < n_lhs_dims; i++)
 	{
 	  // Ensure that extra indices are either colon or 1.
@@ -1894,17 +1894,17 @@ Array<T>::maybe_delete_elements (Array<i
 	  && (all_ones (idx_is_colon)))
 	{
 	  // A(:,:,:) -- we are deleting elements in all dimensions, so
 	  // the result is [](0x0x0).
 
 	  dim_vector newdim = dims ();
           newdim(0) = 0;
 
-	  resize (newdim, rfv);
+	  resize (newdim);
 	}
 
       else if (n_idx > 1
 	       && num_ones (idx_is_colon) == n_idx - 1
 	       && num_ones (idx_is_colon_equiv) == n_idx)
 	{
 	  // A(:,:,j) -- we are deleting elements in one dimension by
 	  // enumerating them.
@@ -1974,17 +1974,17 @@ Array<T>::maybe_delete_elements (Array<i
 
 	      if (temp == n_idx - 1 && num_to_delete == non_col_dim)
 		{
 		  // We have A with (1x1x4), where A(1,:,1:4)
 		  // Delete all (0x0x0)
 
 		  dim_vector zero_dims (n_idx, 0);
 
-		  resize (zero_dims, rfv);
+		  resize (zero_dims);
 		}
 	      else
 		{
 		  // New length of non-colon dimension
 		  // (calculated in the next for loop)
 
 		  octave_idx_type new_dim = non_col_dim;
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -495,17 +495,17 @@ public:
   void maybe_delete_elements_1 (idx_vector& i);
 
   void maybe_delete_elements_2 (idx_vector& i);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j, idx_vector& k);
 
-  void maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv);
+  void maybe_delete_elements (Array<idx_vector>& ra_idx);
 
   Array<T> value (void) const;
 
   Array<T> index (idx_vector& i, int resize_ok = 0,
 		  const T& rfv = resize_fill_value (T ())) const;
 
   Array<T> index1 (idx_vector& i, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array<T>::maybe_delete_elements): Remove rfv argument from
+	declaration.
+	* Array.cc (Array<T>::maybe_delete_elements): Remove all usages of
+	rfv.
+
 2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (assignN): Do not call maybe_delete_elements when
 	for empty matrix.
 
 2008-09-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h: Mostly rewrite. 
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -175,17 +175,17 @@ Cell::assign (const octave_value_list& i
 Cell&
 Cell::delete_elements (const octave_value_list& idx_arg)
 
 {
   Array<idx_vector> ra_idx (idx_arg.length ());
   for (octave_idx_type i = 0; i < idx_arg.length (); i++)
     ra_idx.xelem (i) = idx_arg(i).index_vector ();
 
-  maybe_delete_elements (ra_idx, octave_value ());
+  maybe_delete_elements (ra_idx);
 
   return *this;
 }
 
 octave_idx_type
 Cell::nnz (void) const
 {
   gripe_wrong_type_arg ("nnz", "cell array");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Cell.cc (Cell::delete_elements): Don't pass second arg to
+	Array<T>::maybe_delete_elements.
+	* ov-base-mat.cc (octave_base_matrix<MT>::delete_elements): Dtto.
+
 2008-10-02  Jaroslav Hajek <highegg@gmail.com>
 
 	* Cell.h (Cell::delete_elements): Declare new member function.
 	* Cell.h (Cell::delete_elements): Define it.
 	* oct-map.cc (Octave_map::maybe_delete_elements): Call delete_elements
 	instead of assign with empty Cell.
 
 2008-10-02  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -211,17 +211,17 @@ octave_base_matrix<MT>::delete_elements 
 {
   octave_idx_type len = idx.length ();
 
   Array<idx_vector> ra_idx (len);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx(i) = idx(i).index_vector ();
 
-  matrix.maybe_delete_elements (ra_idx, MT::resize_fill_value ());
+  matrix.maybe_delete_elements (ra_idx);
 
   // Invalidate the matrix type
   typ.invalidate_type ();
 }
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::resize (const dim_vector& dv, bool fill) const
