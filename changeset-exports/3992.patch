# HG changeset patch
# User jwe
# Date 1026848213 0
#      Tue Jul 16 19:36:53 2002 +0000
# Node ID 53b4eab68976aa6553c9aa787248d482ee8af243
# Parent  48d2bc4a3729ce094810ec0453b5a7f33e7782ff
[project @ 2002-07-16 19:36:52 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DASRT.h (DASRT::set_ng, DASRT::get_ng): Delete
+	* DASRT.cc (DASRT::DASRT): Set ng here.
+
 	* DAEFunc.h (DAEFunc): Jacobian function now follows format of DASSL.
 	* DASSL.cc (ddassl_j): Make it work.
 	* DASPK.cc (ddaspk_j): Likewise.
 
 	* DAE.cc: Delete.
 
 	* DAERT.h, DAERTFunc.h, DASRT.h, DASRT.cc: New files for DAE
 	solving with root finding.
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -158,42 +158,51 @@ DASRT::DASRT (void)
   stop_time_set = false;
   stop_time = 0.0;
 
   sanity_checked = false;
 
   info.resize (30, 0);
 
   npar = 0;
+  ng = 0;
 
   liw = 0;
   lrw = 0;
 }
 
-DASRT::DASRT (const int& ng, const ColumnVector& state, 
-	      const ColumnVector& deriv, double time, DAERTFunc& f)
+DASRT::DASRT (const ColumnVector& state, const ColumnVector& deriv,
+	      double time, DAERTFunc& f)
   : DAERT (state, deriv, time, f)
 {
   n = size ();
 
   initialized = false;
   restart = false;
 
   stop_time_set = false;
   stop_time = 0.0;
 
-  DAERTFunc::operator = (f);
-
   sanity_checked = false;
 
   info.resize (30, 0);
   jroot.resize (ng, 1);
 
   npar = 0;
 
+  DAERTFunc::DAERTConstrFunc tmp_csub = DAERTFunc::constraint_function ();
+  
+  if (tmp_csub)
+    {
+      ColumnVector tmp = tmp_csub (state, time);
+      ng = tmp.length ();
+    }
+  else
+    ng = 0;
+
   rpar.resize (npar+1);
   ipar.resize (npar+1);
 
   info(11) = npar;
 
   // Also store it here, for communication with user-supplied
   // subroutines.
   ipar(0) = npar;
@@ -221,49 +230,45 @@ DASRT::init_work_size (int info_zero)
   iwork.resize (n+20, 0);
 
   liw = n+20;
   lrw = 5000+9*n+n*n;
 
   double *prwork = rwork.fortran_vec ();
   int *piwork = iwork.fortran_vec ();
 
-
   F77_FUNC (ddasrt, DASRT) (ddasrt_f, n, t, py, pydot, t, pinfo,
 			    &rel_tol, &abs_tol, idid, prwork, lrw,
 			    piwork, liw, prpar, pipar, ddasrt_j,
 			    ddasrt_g, ng, pjroot);
 
   int iwadd = iwork(18);
 
-
   if (iwadd > 0)
     liw += iwadd;
 
   info(0) = 0;
 
   iwork.resize (liw, 0);
 
   piwork = iwork.fortran_vec ();
 
   F77_FUNC (ddasrt, DASRT) (ddasrt_f, n, t, py, pydot, t, pinfo,
 			    &rel_tol, &abs_tol, idid, prwork, lrw,
 			    piwork, liw, prpar, pipar, ddasrt_j,
 			    ddasrt_g, ng, pjroot);
 
   int rwadd = iwork(19);
 
-
   if (rwadd > 0)
     lrw += rwadd;
 
   rwork.resize (lrw, 0.0);
 
   info(0) = info_zero;
-
 }
 
 void
 DASRT::force_restart (void)
 {
   restart = true;
   integration_error = false;
 }
@@ -271,46 +276,35 @@ DASRT::force_restart (void)
 void
 DASRT::set_stop_time (double t)
 {
   stop_time_set = true;
   stop_time = t;
 }
 
 void
-DASRT::set_ng (int the_ng)
-{
-  ng = the_ng;
-}
-
-int DASRT::get_ng (void)
-{
-  return ng;
-}
-
-void
 DASRT::clear_stop_time (void)
 {
   stop_time_set = false;
 }
 
 void
 DASRT::integrate (double tout)
 {
   DASRT_result retval;
 
   if (! initialized)
     {
       info(0) = 0;
 
       for (int i = 0; i < n; i++)
-       {
-	y(i,0) = x(i);
-        ydot(i,0) = xdot(i);
-       }
+	{
+	  y(i,0) = x(i);
+	  ydot(i,0) = xdot(i);
+	}
 
       integration_error = false;
 
       user_fsub = DAEFunc::function ();
       user_jsub = DAEFunc::jacobian_function ();
       user_csub = DAERTFunc::constraint_function ();
 
       if (user_jsub)
@@ -330,33 +324,28 @@ DASRT::integrate (double tout)
 		("dassl: inconsistent sizes for state and residual vectors");
 
 	      integration_error = true;
 	      return;
 	    }
 
 	  sanity_checked = true;
 	}
-
   
       init_work_size (info(0));
 
-
-
-
       if (iwork.length () != liw)
 	iwork.resize (liw);
 
       if (rwork.length () != lrw)
 	rwork.resize (lrw);
 
       abs_tol = absolute_tolerance ();
       rel_tol = relative_tolerance ();
 
-
       if (initial_step_size () >= 0.0)
 	{
 	  rwork(2) = initial_step_size ();
 	  info(7) = 1;
 	}
       else
 	info(7) = 0;
 
@@ -371,17 +360,16 @@ DASRT::integrate (double tout)
       if (maximum_step_size () >= 0.0)
 	{
 	  rwork(1) = maximum_step_size ();
 	  info(6) = 1;
 	}
       else
 	info(6) = 0;
 
-
       py = y.fortran_vec ();
       pydot = ydot.fortran_vec ();
       pinfo = info.fortran_vec ();
       piwork = iwork.fortran_vec ();
       prwork = rwork.fortran_vec ();
       prpar = rpar.fortran_vec ();
       pipar = ipar.fortran_vec ();
       pjroot = jroot.fortran_vec ();
@@ -399,19 +387,16 @@ DASRT::integrate (double tout)
 	{
 	  info(3) = 1;
 	  rwork(0) = stop_time;
 	}
       else
 	info(3) = 0;
     }
 
-
-
-
   F77_XFCN (ddasrt, DASRT, (ddasrt_f, n, t, py, pydot, tout, pinfo,
 			    &rel_tol, &abs_tol, idid, prwork, lrw,
 			    piwork, liw, prpar, pipar, ddasrt_j,
 			    ddasrt_g, ng, pjroot));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
@@ -481,50 +466,50 @@ DASRT::integrate (const ColumnVector& to
   Matrix x_out;
   Matrix xdot_out;
   ColumnVector t_out;
 
   int oldj = 0;
 
   int n_out = tout.capacity ();
 
-
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
       t_out.resize (n_out);
 
       for (int j = 0; j < n_out; j++)
 	{
 	  integrate (tout(j));
 	  if (integration_error)
 	    {
 	      retval = DASRT_result (x_out, xdot_out, t_out);
 	      return retval;
 	    }
+
           if (idid == 4)
             t_out(j) = t;
           else
             t_out(j) = tout(j);
 
-
 	  for (int i = 0; i < n; i++)
 	    {
 	      x_out(j,i) = y(i,0);
 	      xdot_out(j,i) = ydot(i,0);
 	    }
-          if (idid ==4)
-           {
-            oldj = j;
-            j = n_out;
-            x_out.resize (oldj+1, n);
-            xdot_out.resize (oldj+1, n);
-            t_out.resize (oldj+1);
-           }
+
+          if (idid == 4)
+	    {
+	      oldj = j;
+	      j = n_out;
+	      x_out.resize (oldj+1, n);
+	      xdot_out.resize (oldj+1, n);
+	      t_out.resize (oldj+1);
+	    }
 	}
     }
 
   retval = DASRT_result (x_out, xdot_out, t_out);
 
   return retval;
 }
 
@@ -601,16 +586,17 @@ DASRT::integrate (const ColumnVector& to
 
 	      integrate (t_out);
 
 	      if (integration_error)
 		{
 		  retval = DASRT_result (x_out, xdot_out, t_outs);
 		  return retval;
 		}
+
               if (idid == 4)
                 t_out = t;
 
 	      if (save_output)
 		{
 		  for (int i = 0; i < n; i++)
 		    {
 		      x_out(i_out-1,i) = y(i,0);
@@ -619,17 +605,16 @@ DASRT::integrate (const ColumnVector& to
                   t_outs(i_out-1) = t_out;
                   if (idid ==4)
                     {
                       x_out.resize (i_out, n);
                       xdot_out.resize (i_out, n);
                       t_outs.resize (i_out);
                       i_out = n_out;
                     }
-
 		}
 
 	      if (do_restart)
 		force_restart ();
 	    }
 
 	  retval = DASRT_result (x_out, xdot_out, t_outs);
 	}
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -153,27 +153,25 @@ private:
 
 class
 DASRT : public DAERT, public DASRT_options
 {
 public:
 
   DASRT (void);
 
-  DASRT (const int& ng, const ColumnVector& x, const ColumnVector& xdot, 
+  DASRT (const ColumnVector& state, const ColumnVector& deriv,
 	 double time, DAERTFunc& f);
 
   ~DASRT (void) { }
 
   void force_restart (void);
 
   void set_stop_time (double t);
   void clear_stop_time (void);
-  void set_ng (int the_ng);
-  int get_ng (void);
 
   DASRT_result integrate (const ColumnVector& tout);
 
   DASRT_result integrate (const ColumnVector& tout,
 			  const ColumnVector& tcrit); 
 
 private:
 
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -108,19 +108,19 @@ private:
 
 class
 DASSL : public DAE, public DASSL_options
 {
 public:
 
   DASSL (void);
 
-  DASSL (const ColumnVector& x, double time, DAEFunc& f);
+  DASSL (const ColumnVector& state, double time, DAEFunc& f);
 
-  DASSL (const ColumnVector& x, const ColumnVector& xdot,
+  DASSL (const ColumnVector& state, const ColumnVector& xdot,
 	 double time, DAEFunc& f);
 
   ~DASSL (void) { }
 
   void force_restart (void);
 
   void set_stop_time (double t);
   void clear_stop_time (void);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2002-07-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DLD-FUNCTIONS/dasrt.cc (Fdasrt): No need to find ng here.
+
 	* DLD-FUNCTIONS/dassl.cc (dassl_user_jacobian): New function.
 	(Fdassl): Handle Jacobian function.
 
 	* DLD-FUNCTIONS/dasrt.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2002-07-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -322,17 +322,16 @@ parameters for @code{dasrt}.\n\
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASRT_ABORT1 ("invalid recursive call");
 
   int argp = 0;
-  int ng = 0;
 
   int nargin = args.length ();
 
   if (nargin < 4 || nargin > 6)
     {
       print_usage ("dasrt");
       unwind_protect::run_frame ("Fdasrt");
       return retval;
@@ -388,106 +387,54 @@ parameters for @code{dasrt}.\n\
     }
   
   if (error_state || (! dasrt_f))
     DASRT_ABORT;
   
   DAERTFunc func (dasrt_user_f);
   
   argp++;
-  double t0;
-  ColumnVector x0;
   
   if (args(1).is_string ())
     {
       dasrt_cf = is_valid_function (args(1), "dasrt", true);
 
       if (! dasrt_cf)
-	  DASRT_ABORT1 ("expecting function name as argument 2");
-      else
-        {
-	  octave_value_list blah;
-	  octave_value_list inputs;
-	  ColumnVector the_ts;
-	  x0 = ColumnVector (args(2).vector_value ());
-
-	  if (error_state)
-	    DASRT_ABORT1 ("bad x0");
-
-	  the_ts = ColumnVector (args(4).vector_value ());
-
-	  if (error_state)
-	    DASRT_ABORT1 ("bad tout");
-
-	  t0 = the_ts(0);
+	DASRT_ABORT1 ("expecting function name as argument 2");
 
-	  inputs(0) = x0;
-	  inputs(1) = t0;
-
-	  string g_name = args(1).string_value();
-
-	  if (error_state)
-	    DASRT_ABORT1 ("bad function name of stopping condition");
-
-	  blah = feval (g_name, inputs, 2);
-	  ColumnVector gout = ColumnVector (blah(0).vector_value ());
-
-	  ng = gout.length();
-	  int testg;
-	  for (testg = 0; testg < ng; testg++)
-	    {
-	      if (gout(testg) == 0)
-		DASRT_ABORT1 ("stopping condition satisfied at initial point");
-	    }
-        }
       argp++;
 
       func.set_constraint_function (dasrt_user_cf);
     }
-  else
-    {
-      // Now this second argument is not a string.  It has to be x0.
-      // we call the dummy g function and set ng = 1;
-
-      x0 = ColumnVector (args(1).vector_value ());
-
-      if (error_state)
-	DASRT_ABORT1 ("bad x0");
-
-      func.set_constraint_function (dasrt_dumb_cf);
-
-      ng = 1;
-    }
 
   ColumnVector state (args(argp++).vector_value ());
 
   if (error_state)
     DASRT_ABORT2 ("expecting state vector as argument %d", argp);
 
-  ColumnVector stateprime (args(argp++).vector_value());
+  ColumnVector stateprime (args(argp++).vector_value ());
 
   if (error_state)
     DASRT_ABORT2 
        ("expecting time derivative of state vector as argument %d", argp);
 
   ColumnVector old_out_times (args(argp++).vector_value ());
 
   if (error_state)
     DASRT_ABORT2
 	("expecting output time vector as %s argument %d", argp);
 
   double tzero = old_out_times (0);
 
   int ol = old_out_times.length ();
-  int ijk;
 
   ColumnVector out_times (ol-1, 0.0);
 
-  for (ijk = 1; ijk < ol; ijk++)
-    out_times(ijk-1) = old_out_times(ijk);
+  for (int i = 1; i < ol; i++)
+    out_times(i-1) = old_out_times(i);
 
   ColumnVector crit_times;
 
   bool crit_times_set = false;
 
   if (argp < nargin)
     {
       crit_times = ColumnVector (args(argp++).vector_value ());
@@ -501,20 +448,19 @@ parameters for @code{dasrt}.\n\
 
 #if 0
   if (dasrt_j)
     func.set_jacobian_function (dasrt_user_j);
 #endif
 
   DASRT_result output;
 
-  DASRT dae = DASRT (ng, state, stateprime, tzero, func);
+  DASRT dae = DASRT (state, stateprime, tzero, func);
 
   dae.copy (dasrt_opts);
-  dae.set_ng (ng);
 
   if (error_state)
     DASRT_ABORT1 ("something is wrong");
 
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
@@ -522,39 +468,39 @@ parameters for @code{dasrt}.\n\
   if (! error_state)
     {
       ColumnVector old_output_times = output.times ();
 
       Matrix old_output_deriv = output.deriv ();
       Matrix old_output_state = output.state ();
 
       int lstuff = old_output_times.length ();
-      int lstate = x0.length ();
+      int lstate = state.length ();
 
       ColumnVector output_times (lstuff+1, 0.0);
 
       Matrix output_deriv (lstuff+1, lstate, 0.0);
       Matrix output_state (lstuff+1, lstate, 0.0);
 
       output_times(0) = tzero;
 
-      for (ijk = 0; ijk < lstate; ijk++)
+      for (int i = 0; i < lstate; i++)
 	{
-	  output_deriv(0,ijk) = stateprime(ijk);
-	  output_state(0,ijk) = state(ijk);
+	  output_deriv(0,i) = stateprime(i);
+	  output_state(0,i) = state(i);
 	}
 
-      for (ijk = 0; ijk < lstuff; ijk++)
+      for (int i = 0; i < lstuff; i++)
 	{
-	  output_times(ijk+1) = old_output_times(ijk);
+	  output_times(i+1) = old_output_times(i);
 
-	  for (int lmnop=0; lmnop < lstate; lmnop++)
+	  for (int j = 0; j < lstate; j++)
 	    {
-	      output_deriv(ijk+1,lmnop) = old_output_deriv(ijk,lmnop);
-	      output_state(ijk+1,lmnop) = old_output_state(ijk,lmnop);
+	      output_deriv(i+1,j) = old_output_deriv(i,j);
+	      output_state(i+1,j) = old_output_state(i,j);
 	    }
 	}
 
       retval(2) = output_times;
       retval(1) = output_deriv;
       retval(0) = output_state;
     }
   else
