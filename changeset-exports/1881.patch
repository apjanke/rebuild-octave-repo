# HG changeset patch
# User jwe
# Date 823543641 0
#      Mon Feb 05 18:07:21 1996 +0000
# Node ID 950825cea083ebf5a5ef79451fedc9d496de00ce
# Parent  cbdbec67ad609928744812c1e7d0584b4dedd449
[project @ 1996-02-05 18:07:21 by jwe]

diff --git a/liboctave/CmplxAEPBAL.h b/liboctave/CmplxAEPBAL.h
--- a/liboctave/CmplxAEPBAL.h
+++ b/liboctave/CmplxAEPBAL.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,55 +29,53 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include <string>
 
 #include "CMatrix.h"
 
-class ComplexAEPBALANCE
+class
+ComplexAEPBALANCE
 {
-friend class ComplexMatrix;
-
 public:
 
-  ComplexAEPBALANCE (void) { }
+  ComplexAEPBALANCE (void) : balanced_mat (), balancing_mat () { }
 
   ComplexAEPBALANCE (const ComplexMatrix& a, const string& balance_job)
     {
       init (a, balance_job); 
     }
 
   ComplexAEPBALANCE (const ComplexAEPBALANCE& a)
-    {
-      balanced_mat = a.balanced_mat;
-      balancing_mat = a.balancing_mat;
-    }
+    : balanced_mat (a.balanced_mat), balancing_mat (a.balancing_mat) { }
 
   ComplexAEPBALANCE& operator = (const ComplexAEPBALANCE& a)
     {
-      balanced_mat = a.balanced_mat;
-      balancing_mat = a.balancing_mat;
-
+      if (this != &a)
+	{
+	  balanced_mat = a.balanced_mat;
+	  balancing_mat = a.balancing_mat;
+	}
       return *this;
     }
 
   ComplexMatrix balanced_matrix (void) const { return balanced_mat; }
 
   ComplexMatrix balancing_matrix (void) const { return balancing_mat; }
 
   friend ostream& operator << (ostream& os, const ComplexAEPBALANCE& a);
 
 private:
 
-  int init (const ComplexMatrix& a, const string& balance_job);
-
   ComplexMatrix balanced_mat;
   ComplexMatrix balancing_mat;
+
+  int init (const ComplexMatrix& a, const string& balance_job);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/CmplxCHOL.h b/liboctave/CmplxCHOL.h
--- a/liboctave/CmplxCHOL.h
+++ b/liboctave/CmplxCHOL.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,55 +27,53 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "CMatrix.h"
 
-class ComplexCHOL
+class
+ComplexCHOL
 {
-friend class ComplexMatrix;
-
 public:
 
-  ComplexCHOL (void) { }
+  ComplexCHOL (void) : chol_mat () { }
 
   ComplexCHOL::ComplexCHOL (const ComplexMatrix& a) { init (a); }
 
   ComplexCHOL::ComplexCHOL (const ComplexMatrix& a, int& info)
     {
       info = init (a);
     }
 
   ComplexCHOL::ComplexCHOL (const ComplexCHOL& a)
-    {
-      chol_mat = a.chol_mat;
-    }
+    : chol_mat (a.chol_mat) { }
 
   ComplexCHOL& ComplexCHOL::operator = (const ComplexCHOL& a)
     {
-      chol_mat = a.chol_mat;
+      if (this != &a)
+	chol_mat = a.chol_mat;
 
       return *this;
     }
 
   ComplexMatrix ComplexCHOL::chol_matrix (void) const
     {
       return chol_mat;
     }
 
   friend ostream& operator << (ostream& os, const ComplexCHOL& a);
 
 private:
 
-  int init (const ComplexMatrix& a);
+  ComplexMatrix chol_mat;
 
-  ComplexMatrix chol_mat;
+  int init (const ComplexMatrix& a);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/CmplxDET.h b/liboctave/CmplxDET.h
--- a/liboctave/CmplxDET.h
+++ b/liboctave/CmplxDET.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,35 +27,38 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "oct-cmplx.h"
 
-class ComplexDET
+class
+ComplexDET
 {
-  friend class ComplexMatrix;
+friend class ComplexMatrix;
 
 public:
 
   ComplexDET (void) { }
 
   ComplexDET (const ComplexDET& a)
     {
       det[0] = a.det[0];
       det[1] = a.det[1];
     }
 
   ComplexDET& operator = (const ComplexDET& a)
     {
-      det[0] = a.det[0];
-      det[1] = a.det[1];
-
+      if (this != &a)
+	{
+	  det[0] = a.det[0];
+	  det[1] = a.det[1];
+	}
       return *this;
     }
 
   int value_will_overflow (void) const;
   int value_will_underflow (void) const;
 
   Complex coefficient (void) const;
 
diff --git a/liboctave/CmplxHESS.h b/liboctave/CmplxHESS.h
--- a/liboctave/CmplxHESS.h
+++ b/liboctave/CmplxHESS.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,57 +27,55 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "CMatrix.h"
 
-class ComplexHESS
+class
+ComplexHESS
 {
-friend class ComplexMatrix;
-
 public:
 
-  ComplexHESS (void) { }
+  ComplexHESS (void) : hess_mat (), unitary_hess_mat () { }
 
   ComplexHESS (const ComplexMatrix& a) { init (a); }
 
   ComplexHESS (const ComplexMatrix& a, int& info) { info = init (a); }
 
   ComplexHESS (const ComplexHESS& a)
-    {
-      hess_mat = a.hess_mat;
-      unitary_hess_mat = a.unitary_hess_mat;
-    }
+    : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   ComplexHESS& operator = (const ComplexHESS& a)
     {
-      hess_mat = a.hess_mat;
-      unitary_hess_mat = a.unitary_hess_mat;
-
+      if (this != &a)
+	{
+	  hess_mat = a.hess_mat;
+	  unitary_hess_mat = a.unitary_hess_mat;
+	}
       return *this;
     }
 
   ComplexMatrix hess_matrix (void) const { return hess_mat; }
 
   ComplexMatrix unitary_hess_matrix (void) const
     {
       return unitary_hess_mat;
     }
 
   friend ostream& operator << (ostream& os, const ComplexHESS& a);
 
 private:
 
-  int init (const ComplexMatrix& a);
-
   ComplexMatrix hess_mat;
   ComplexMatrix unitary_hess_mat;
+
+  int init (const ComplexMatrix& a);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -28,39 +28,35 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 
-class ComplexLU
+class
+ComplexLU
 {
-friend class ComplexMatrix;
-
 public:
 
-  ComplexLU (void) { }
+  ComplexLU (void) : l (), u (), p () { }
 
   ComplexLU (const ComplexMatrix& a);
 
-  ComplexLU (const ComplexLU& a)
-    {
-      l = a.l;
-      u = a.u;
-      p = a.p;
-    }
+  ComplexLU (const ComplexLU& a) : l (a.l), u (a.u), p (a.p) { }
 
   ComplexLU& operator = (const ComplexLU& a)
     {
-      l = a.l;
-      u = a.u;
-      p = a.p;
-
+      if (this != &a)
+	{
+	  l = a.l;
+	  u = a.u;
+	  p = a.p;
+	}
       return *this;
     }
 
   ComplexMatrix L (void) const { return l; }
   ComplexMatrix U (void) const { return u; }
 
   Matrix P (void) const { return p; }
 
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -28,35 +28,34 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class ostream;
 
 #include "CMatrix.h"
 #include "dbleQR.h"
 
-class ComplexQR
+class
+ComplexQR
 {
 public:
 
-  ComplexQR (void) { }
+  ComplexQR (void) : q (), r () { }
 
   ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
-  ComplexQR (const ComplexQR& a)
-    {
-      q = a.q;
-      r = a.r;
-    }
+  ComplexQR (const ComplexQR& a) : q (a.q), r (a.r) { }
 
   ComplexQR& operator = (const ComplexQR& a)
     {
-      q = a.q;
-      r = a.r;
-
+      if (this != &a)
+	{
+	  q = a.q;
+	  r = a.r;
+	}
       return *this;
     }
 
   ComplexMatrix Q (void) const { return q; }
   ComplexMatrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const ComplexQR& a);
 
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,31 +27,34 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "CmplxQR.h"
 
-class ComplexQRP : public ComplexQR
+class
+ComplexQRP : public ComplexQR
 {
 public:
 
-  ComplexQRP (void) { }
+  ComplexQRP (void) : ComplexQR (), p () { }
 
   ComplexQRP (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
-  ComplexQRP (const ComplexQRP& a) : ComplexQR (a) { p = a.p; }
+  ComplexQRP (const ComplexQRP& a) : ComplexQR (a), p (a.p) { }
 
   ComplexQRP& operator = (const ComplexQRP& a)
     {
-      ComplexQR::operator = (a);
-      p = a.p;
-
+      if (this != &a)
+	{
+	  ComplexQR::operator = (a);
+	  p = a.p;
+	}
       return *this;
     }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const ComplexQRP& a);
 
 private:
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,66 +29,58 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include <string>
 
 #include "CMatrix.h"
 
-class ComplexSCHUR
+class
+ComplexSCHUR
 {
-friend class ComplexMatrix;
-
 public:
 
-  ComplexSCHUR (void) { }
+  ComplexSCHUR (void) : schur_mat (), unitary_mat () { }
 
   ComplexSCHUR (const ComplexMatrix& a, const string& ord)
     {
       init (a,ord);
     }
 
   ComplexSCHUR (const ComplexMatrix& a, const string& ord, int& info)
     {
       info = init (a,ord);
     }
 
   ComplexSCHUR (const ComplexSCHUR& a)
-    {
-      schur_mat = a.schur_mat;
-      unitary_mat = a.unitary_mat;
-    }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
 
   ComplexSCHUR& operator = (const ComplexSCHUR& a)
     {
-      schur_mat = a.schur_mat;
-      unitary_mat = a.unitary_mat;
-
+      if (this != &a)
+	{
+	  schur_mat = a.schur_mat;
+	  unitary_mat = a.unitary_mat;
+	}
       return *this;
     }
 
-  ComplexMatrix schur_matrix (void) const
-    {
-      return schur_mat;
-    }
+  ComplexMatrix schur_matrix (void) const { return schur_mat; }
 
-  ComplexMatrix unitary_matrix (void) const
-    {
-      return unitary_mat;
-    }
+  ComplexMatrix unitary_matrix (void) const { return unitary_mat; }
 
   friend ostream& operator << (ostream& os, const ComplexSCHUR& a);
 
 private:
 
-  int init (const ComplexMatrix& a, const string& ord);
-
   ComplexMatrix schur_mat;
   ComplexMatrix unitary_mat;
+
+  int init (const ComplexMatrix& a, const string& ord);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,69 +29,65 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include "dDiagMatrix.h"
 #include "CMatrix.h"
 #include "dbleSVD.h"
 
-class ComplexSVD
+class
+ComplexSVD
 {
-friend class ComplexMatrix;
-
 public:
 
   ComplexSVD (void) { }
 
-
   ComplexSVD (const ComplexMatrix& a, SVD::type svd_type = SVD::std)
     {
       init (a, svd_type);
     }
 
   ComplexSVD (const ComplexMatrix& a, int& info,
 	      SVD::type svd_type = SVD::std)
     {
       info = init (a, svd_type);
     }
 
   ComplexSVD (const ComplexSVD& a)
-    {
-      sigma = a.sigma;
-      left_sm = a.left_sm;
-      right_sm = a.right_sm;
-    }
+    : sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   ComplexSVD& operator = (const ComplexSVD& a)
     {
-      sigma = a.sigma;
-      left_sm = a.left_sm;
-      right_sm = a.right_sm;
-
+      if (this != &a)
+	{
+	  sigma = a.sigma;
+	  left_sm = a.left_sm;
+	  right_sm = a.right_sm;
+	}
       return *this;
     }
 
   DiagMatrix singular_values (void) const { return sigma; }
 
   ComplexMatrix left_singular_matrix (void) const;
 
   ComplexMatrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const ComplexSVD& a);
 
 private:
 
-  int init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
-
   SVD::type type_computed;
 
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
+
+  int init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleAEPBAL.h b/liboctave/dbleAEPBAL.h
--- a/liboctave/dbleAEPBAL.h
+++ b/liboctave/dbleAEPBAL.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,55 +29,53 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include <string>
 
 #include "dMatrix.h"
 
-class AEPBALANCE
+class
+AEPBALANCE
 {
-friend class Matrix;
-
 public:
 
-  AEPBALANCE (void) { }
+  AEPBALANCE (void) : balanced_mat (), balancing_mat () { }
 
   AEPBALANCE (const Matrix& a,const string& balance_job)
     {
       init (a, balance_job); 
     }
 
   AEPBALANCE (const AEPBALANCE& a)
-    {
-      balanced_mat = a.balanced_mat;
-      balancing_mat = a.balancing_mat;
-    }
+    : balanced_mat (a.balanced_mat), balancing_mat (a.balancing_mat) { }
 
   AEPBALANCE& operator = (const AEPBALANCE& a)
     {
-      balanced_mat = a.balanced_mat;
-      balancing_mat = a.balancing_mat;
-
+      if (this != &a)
+	{
+	  balanced_mat = a.balanced_mat;
+	  balancing_mat = a.balancing_mat;
+	}
       return *this;
     }
 
   Matrix balanced_matrix (void) const { return balanced_mat; }
 
   Matrix balancing_matrix (void) const { return balancing_mat; }
 
   friend ostream& operator << (ostream& os, const AEPBALANCE& a);
 
 private:
 
-  int init (const Matrix& a, const string& balance_job);
-
   Matrix balanced_mat;
   Matrix balancing_mat;
+
+  int init (const Matrix& a, const string& balance_job);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleCHOL.h b/liboctave/dbleCHOL.h
--- a/liboctave/dbleCHOL.h
+++ b/liboctave/dbleCHOL.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,46 +27,46 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 
-class CHOL
+class
+CHOL
 {
-friend class Matrix;
-
 public:
 
-  CHOL (void) { }
+  CHOL (void) : chol_mat () { }
 
   CHOL (const Matrix& a) { init (a); }
 
   CHOL (const Matrix& a, int& info) { info = init (a); }
 
-  CHOL (const CHOL& a) { chol_mat = a.chol_mat; }
+  CHOL (const CHOL& a) : chol_mat (a.chol_mat) { }
 
   CHOL& operator = (const CHOL& a)
     {
-      chol_mat = a.chol_mat;
+      if (this != &a)
+	chol_mat = a.chol_mat;
 
       return *this;
     }
 
   Matrix chol_matrix (void) const { return chol_mat; }
 
   friend ostream& operator << (ostream& os, const CHOL& a);
 
 private:
 
-  int init (const Matrix& a);
+  Matrix chol_mat;
 
-  Matrix chol_mat;
+  int init (const Matrix& a);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleDET.h b/liboctave/dbleDET.h
--- a/liboctave/dbleDET.h
+++ b/liboctave/dbleDET.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -25,35 +25,38 @@ Software Foundation, 59 Temple Place - S
 #define octave_DET_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
-class DET
+class
+DET
 {
 friend class Matrix;
 
 public:
 
   DET (void) { }
 
   DET (const DET& a)
     {
       det[0] = a.det[0];
       det[1] = a.det[1];
     }
 
   DET& operator = (const DET& a)
     {
-      det[0] = a.det[0];
-      det[1] = a.det[1];
-
+      if (this != &a)
+	{
+	  det[0] = a.det[0];
+	  det[1] = a.det[1];
+	}
       return *this;
     }
 
   int value_will_overflow (void) const;
   int value_will_underflow (void) const;
 
   double coefficient (void) const;
 
diff --git a/liboctave/dbleGEPBAL.h b/liboctave/dbleGEPBAL.h
--- a/liboctave/dbleGEPBAL.h
+++ b/liboctave/dbleGEPBAL.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,63 +29,64 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include <string>
 
 #include "dMatrix.h"
 
-class GEPBALANCE
+class
+GEPBALANCE
 {
-friend class Matrix;
-
 public:
 
-  GEPBALANCE (void) { }
+  GEPBALANCE (void)
+    : balanced_a_mat (), balanced_b_mat (), left_balancing_mat (),
+      right_balancing_mat () { }
 
   GEPBALANCE (const Matrix& a, const Matrix& b, const string& balance_job)
     {
       init (a, b, balance_job); 
     }
 
   GEPBALANCE (const GEPBALANCE& a)
-    {
-      balanced_a_mat = a.balanced_a_mat;
-      balanced_b_mat = a.balanced_b_mat;
-      left_balancing_mat = a.left_balancing_mat;
-      right_balancing_mat = a.right_balancing_mat;
-    }
+    : balanced_a_mat (a.balanced_a_mat),
+      balanced_b_mat (a.balanced_b_mat),
+      left_balancing_mat (a.left_balancing_mat),
+      right_balancing_mat (a.right_balancing_mat) { }
 
   GEPBALANCE& operator = (const GEPBALANCE& a)
     {
-      balanced_a_mat = a.balanced_a_mat;
-      balanced_b_mat = a.balanced_b_mat;
-      left_balancing_mat = a.left_balancing_mat;
-      right_balancing_mat = a.right_balancing_mat;
-
+      if (this != &a)
+	{
+	  balanced_a_mat = a.balanced_a_mat;
+	  balanced_b_mat = a.balanced_b_mat;
+	  left_balancing_mat = a.left_balancing_mat;
+	  right_balancing_mat = a.right_balancing_mat;
+	}
       return *this;
     }
 
   Matrix balanced_a_matrix (void) const { return balanced_a_mat; }
   Matrix balanced_b_matrix (void) const { return balanced_b_mat; }
 
   Matrix left_balancing_matrix (void) const { return left_balancing_mat; }
   Matrix right_balancing_matrix (void) const { return right_balancing_mat; }
 
   friend ostream& operator << (ostream& os, const GEPBALANCE& a);
 
 private:
 
-  int init (const Matrix& a, const Matrix& b, const string& balance_job);
-
   Matrix balanced_a_mat;
   Matrix balanced_b_mat;
   Matrix left_balancing_mat;
   Matrix right_balancing_mat;
+
+  int init (const Matrix& a, const Matrix& b, const string& balance_job);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleHESS.h b/liboctave/dbleHESS.h
--- a/liboctave/dbleHESS.h
+++ b/liboctave/dbleHESS.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,54 +27,52 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 
-class HESS
+class
+HESS
 {
-friend class Matrix;
-
 public:
 
-  HESS (void) { }
+  HESS (void) : hess_mat (), unitary_hess_mat () { }
 
   HESS (const Matrix& a) { init (a); }
 
   HESS (const Matrix& a, int& info) { info = init (a); }
 
   HESS (const HESS& a)
-    {
-      hess_mat = a.hess_mat;
-      unitary_hess_mat = a.unitary_hess_mat;
-    }
+    : hess_mat (a.hess_mat), unitary_hess_mat (a.unitary_hess_mat) { }
 
   HESS& operator = (const HESS& a)
     {
-      hess_mat = a.hess_mat;
-      unitary_hess_mat = a.unitary_hess_mat;
-
+      if (this != &a)
+	{
+	  hess_mat = a.hess_mat;
+	  unitary_hess_mat = a.unitary_hess_mat;
+	}
       return *this;
     }
 
   Matrix hess_matrix (void) const { return hess_mat; }
 
   Matrix unitary_hess_matrix (void) const { return unitary_hess_mat; }
 
   friend ostream& operator << (ostream& os, const HESS& a);
 
 private:
 
-  int init (const Matrix& a);
-
   Matrix hess_mat;
   Matrix unitary_hess_mat;
+
+  int init (const Matrix& a);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,37 +29,32 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 
 class LU
 {
-friend class Matrix;
-
 public:
 
-  LU (void) { }
+  LU (void) : l (), u (), p () { }
 
   LU (const Matrix& a);
 
-  LU (const LU& a)
-    {
-      l = a.l;
-      u = a.u;
-      p = a.p;
-    }
+  LU (const LU& a) : l (a.l), u (a.u), p (a.p) { }
 
   LU& operator = (const LU& a)
     {
-      l = a.l;
-      u = a.u;
-      p = a.p;
-
+      if (this != &a)
+	{
+	  l = a.l;
+	  u = a.u;
+	  p = a.p;
+	}
       return *this;
     }
 
   Matrix L (void) const { return l; }
 
   Matrix U (void) const { return u; }
 
   Matrix P (void) const { return p; }
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,42 +27,41 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dMatrix.h"
 
-class QR
+class
+QR
 {
 public:
 
   enum type
     {
       std,
       raw,
       economy,
     };
 
-  QR (void) { }
+  QR (void) : q (), r () { }
 
   QR (const Matrix& A, type qr_type = QR::std);
 
-  QR (const QR& a)
-    {
-      q = a.q;
-      r = a.r;
-    }
+  QR (const QR& a) : q (a.q), r (a.r) { }
 
   QR& operator = (const QR& a)
     {
-      q = a.q;
-      r = a.r;
-
+      if (this != &a)
+	{
+	  q = a.q;
+	  r = a.r;
+	}
       return *this;
     }
 
   Matrix Q (void) const { return q; }
 
   Matrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const QR& a);
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,30 +27,34 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dbleQR.h"
 
-class QRP : public QR
+class
+QRP : public QR
 {
 public:
 
-  QRP (void) { }
+  QRP (void) : QR (), p () { }
 
   QRP (const Matrix& A, QR::type qr_type = QR::std);
 
-  QRP (const QRP& a) : QR (a) { p = a.p; }
+  QRP (const QRP& a) : QR (a), p (a.p) { }
 
   QRP& operator = (const QRP& a)
     {
-      QR::operator = (a);
-      p = a.p;
+      if (this != &a)
+	{
+	  QR::operator = (a);
+	  p = a.p;
+	}
 
       return *this;
     }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const QRP& a);
 
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -29,57 +29,55 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class ostream;
 
 #include <string>
 
 #include "dMatrix.h"
 
-class SCHUR
+class
+SCHUR
 {
-friend class Matrix;
-
 public:
 
-  SCHUR (void) { }
+  SCHUR (void) : schur_mat (), unitary_mat () { }
 
   SCHUR (const Matrix& a, const string& ord) { init (a, ord); }
 
   SCHUR (const Matrix& a, const string& ord, int& info)
     {
       info = init (a, ord);
     }
 
   SCHUR (const SCHUR& a)
-    {
-      schur_mat = a.schur_mat;
-      unitary_mat = a.unitary_mat;
-    }
+    : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
 
   SCHUR& operator = (const SCHUR& a)
     {
-      schur_mat = a.schur_mat;
-      unitary_mat = a.unitary_mat;
-
+      if (this != &a)
+	{
+	  schur_mat = a.schur_mat;
+	  unitary_mat = a.unitary_mat;
+	}
       return *this;
     }
 
   Matrix schur_matrix (void) const { return schur_mat; }
 
   Matrix unitary_matrix (void) const { return unitary_mat; }
 
   friend ostream& operator << (ostream& os, const SCHUR& a);
 
 private:
 
-  int init (const Matrix& a, const string& ord);
-
   Matrix schur_mat;
   Matrix unitary_mat;
+
+  int init (const Matrix& a, const string& ord);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -1,12 +1,12 @@
 //                                  -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -40,31 +40,27 @@ public:
 
   enum type
     {
       std,
       economy,
       sigma_only,
     };
 
-  SVD (void) { }
+  SVD (void) : sigma (), left_sm (), right_sm () { }
 
   SVD (const Matrix& a, type svd_type = SVD::std) { init (a, svd_type); }
 
   SVD (const Matrix& a, int& info, type svd_type = SVD::std)
     {
       info = init (a, svd_type);
     }
 
   SVD (const SVD& a)
-    {
-      sigma = a.sigma;
-      left_sm = a.left_sm;
-      right_sm = a.right_sm;
-    }
+    : sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   SVD& operator = (const SVD& a)
     {
       if (this != &a)
 	{
 	  sigma = a.sigma;
 	  left_sm = a.left_sm;
 	  right_sm = a.right_sm;
