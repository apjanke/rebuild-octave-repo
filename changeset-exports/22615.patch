# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476220484 25200
#      Tue Oct 11 14:14:44 2016 -0700
# Node ID 68e9bdb7cde34d4c148dcad9373d6efed039ca58
# Parent  edd04ce998912946514f716a4fdcf410ca31c59e
Accept second input '0' to svd (bug #49309).

* svd.cc (Fsvd): Add 3rd calling form to docstring.  Document behavior
of "econ" and '0' inputs.  Add BIST test for bug #49309.  Change all
calls to svd_type to match new prototype.
* svd.cc (svd_type): Change function to have two additional inputs, the
octave_value_list args and the matrix A.  Change code to use if/else tree
to calculate the svd type.

diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -33,39 +33,49 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
 static std::string Vsvd_driver = "gesvd";
 
 template <typename T>
 static typename octave::math::svd<T>::Type
-svd_type (int nargin, int nargout)
+svd_type (int nargin, int nargout, const octave_value_list & args, const T & A)
 {
-  return ((nargout == 0 || nargout == 1)
-          ? octave::math::svd<T>::Type::sigma_only
-          : ((nargin == 2)
-             ? octave::math::svd<T>::Type::economy
-             : octave::math::svd<T>::Type::std));
+  if (nargout == 0 || nargout == 1)
+    return octave::math::svd<T>::Type::sigma_only;
+  else if (nargin == 1)
+    return octave::math::svd<T>::Type::std;
+  else
+    if (! args(1).is_real_scalar ())
+      return octave::math::svd<T>::Type::economy;
+    else
+      {
+        if (A.rows () > A.columns ())
+          return octave::math::svd<T>::Type::economy;
+        else
+          return octave::math::svd<T>::Type::std;
+      }
 }
 
 template <typename T>
 static typename octave::math::svd<T>::Driver
 svd_driver (void)
 {
   return (Vsvd_driver == "gesvd"
           ? octave::math::svd<T>::Driver::GESVD
           : octave::math::svd<T>::Driver::GESDD);
 }
 
 DEFUN (svd, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{s} =} svd (@var{A})
 @deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A})
-@deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A}, @var{econ})
+@deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A}, "econ")
+@deftypefnx {} {[@var{U}, @var{S}, @var{V}] =} svd (@var{A}, 0)
 @cindex singular value decomposition
 Compute the singular value decomposition of @var{A}
 @tex
 $$
  A = U S V^{\dagger}
 $$
 @end tex
 @ifnottex
@@ -130,19 +140,24 @@ s =
 v =
 
   -0.82704   0.54745   0.12766
   -0.45986  -0.52829  -0.71375
   -0.32330  -0.64901   0.68867
 @end group
 @end example
 
-If given a second argument, @code{svd} returns an economy-sized
+When given a second argument that is not 0, @code{svd} returns an economy-sized
 decomposition, eliminating the unnecessary rows or columns of @var{U} or
 @var{V}.
+
+If the second argument is exactly 0, then the choice of decomposition is based
+on the matrix @var{A}.  If @var{A} has more rows than columns then an
+economy-sized decomposition is returned, otherwise a regular decomposition 
+is calculated.
 @seealso{svd_driver, svds, eig, lu, chol, hess, qr, qz}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     print_usage ();
 
@@ -160,17 +175,18 @@ decomposition, eliminating the unnecessa
       if (arg.is_real_type ())
         {
           FloatMatrix tmp = arg.float_matrix_value ();
 
           if (tmp.any_element_is_inf_or_nan ())
             error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
           octave::math::svd<FloatMatrix> result
-            (tmp, svd_type<FloatMatrix> (nargin, nargout),
+            (tmp,
+             svd_type<FloatMatrix> (nargin, nargout, args, tmp),
              svd_driver<FloatMatrix> ());
 
           FloatDiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
           else
             retval = ovl (result.left_singular_matrix (),
@@ -180,17 +196,18 @@ decomposition, eliminating the unnecessa
       else if (arg.is_complex_type ())
         {
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
           if (ctmp.any_element_is_inf_or_nan ())
             error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
           octave::math::svd<FloatComplexMatrix> result
-            (ctmp, svd_type<FloatComplexMatrix> (nargin, nargout),
+            (ctmp,
+             svd_type<FloatComplexMatrix> (nargin, nargout, args, ctmp),
              svd_driver<FloatComplexMatrix> ());
 
           FloatDiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
           else
             retval = ovl (result.left_singular_matrix (),
@@ -203,17 +220,18 @@ decomposition, eliminating the unnecessa
       if (arg.is_real_type ())
         {
           Matrix tmp = arg.matrix_value ();
 
           if (tmp.any_element_is_inf_or_nan ())
             error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
           octave::math::svd<Matrix> result
-            (tmp, svd_type<Matrix> (nargin, nargout),
+            (tmp,
+             svd_type<Matrix> (nargin, nargout, args, tmp),
              svd_driver<Matrix> ());
 
           DiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
           else
             retval = ovl (result.left_singular_matrix (),
@@ -223,17 +241,18 @@ decomposition, eliminating the unnecessa
       else if (arg.is_complex_type ())
         {
           ComplexMatrix ctmp = arg.complex_matrix_value ();
 
           if (ctmp.any_element_is_inf_or_nan ())
             error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
           octave::math::svd<ComplexMatrix> result
-            (ctmp, svd_type<ComplexMatrix> (nargin, nargout),
+            (ctmp,
+             svd_type<ComplexMatrix> (nargin, nargout, args, ctmp),
              svd_driver<ComplexMatrix> ());
 
           DiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
           else
             retval = ovl (result.left_singular_matrix (),
@@ -250,17 +269,16 @@ decomposition, eliminating the unnecessa
 /*
 %!assert (svd ([1, 2; 2, 1]), [3; 1], sqrt (eps))
 
 %!test
 a = [1, 2; 3, 4] + [5, 6; 7, 8]*i;
 [u,s,v] = svd (a);
 assert (a, u * s * v', 128 * eps);
 
-
 %!test
 %! [u, s, v] = svd ([1, 2; 2, 1]);
 %! x = 1 / sqrt (2);
 %! assert (u, [-x, -x; -x, x], sqrt (eps));
 %! assert (s, [3, 0; 0, 1], sqrt (eps));
 %! assert (v, [-x, x; -x, -x], sqrt (eps));
 
 %!test
@@ -321,16 +339,22 @@ assert (a, u * s * v', 128 * eps);
 
 %!test
 %! a = zeros (5, 0);
 %! [u, s, v] = svd (a, 1);
 %! assert (size (u), [5, 0]);
 %! assert (size (s), [0, 0]);
 %! assert (size (v), [0, 0]);
 
+%!test <49309>
+%! [~,~,v] = svd ([1, 1, 1], 0);
+%! assert (size (v), [3 3]);
+%! [~,~,v] = svd ([1, 1, 1], "econ");
+%! assert (size (v), [3 1]);
+
 %!error svd ()
 %!error svd ([1, 2; 4, 5], 2, 3)
 %!error [u, v] = svd ([1, 2; 3, 4])
 */
 
 DEFUN (svd_driver, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} svd_driver ()
