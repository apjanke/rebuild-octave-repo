# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1443803139 14400
#      Fri Oct 02 12:25:39 2015 -0400
# Node ID e3c0fee87493caaf70eadc049a41e67686f7872b
# Parent  72cd24aa5f7abeb98d4de9abef51488190f7996b
style fixes for tex lexer and parser

* oct-tex-lexer.in.ll, oct-tex-parser.in.yy:
Eliminate tabs and reindent.

diff --git a/libinterp/corefcn/oct-tex-lexer.in.ll b/libinterp/corefcn/oct-tex-lexer.in.ll
--- a/libinterp/corefcn/oct-tex-lexer.in.ll
+++ b/libinterp/corefcn/oct-tex-lexer.in.ll
@@ -31,124 +31,150 @@ along with Octave; see the file COPYING.
 
 %top {
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 }
 
-%x	NUM_MODE
-%x	MAYBE_NUM_MODE
+%x NUM_MODE
+%x MAYBE_NUM_MODE
 
 %{
 
 // The generated code may include unistd.h.  We need that to happen
 // before defining isatty to be prefixed with the gnulib namespace
 // identifier.
 
 #include <sys/types.h>
 #include <unistd.h>
 
 #include "txt-eng.h"
 #include "oct-tex-parser.h"
 
 // FIXME: with bison 3.x, OCTAVE_TEX_STYPE appears in the generated
 // oct-parse.h file, but there is no definition for YYSTYPE, which is
-// needed by the code that is generated by flex.  I can't seem to find a
-// way to tell flex to use OCTAVE_TEX_STYPE instead of YYSTYPE in the code
-// it generates, or to tell bison to provide the definition of YYSTYPE
-// in the generated oct-parse.h file.
+// needed by the code that is generated by flex.  I can't seem to find
+// a way to tell flex to use OCTAVE_TEX_STYPE instead of YYSTYPE in
+// the code it generates, or to tell bison to provide the definition
+// of YYSTYPE in the generated oct-parse.h file.
 
 #if defined (OCTAVE_TEX_STYPE_IS_DECLARED) && ! defined YYSTYPE
 #define YYSTYPE OCTAVE_TEX_STYPE
 #endif
 
 #if defined (GNULIB_NAMESPACE)
-// Calls to the following functions appear in the generated output from
-// flex without the namespace tag.  Redefine them so we will use them
-// via the gnulib namespace.
+// Calls to the following functions appear in the generated output
+// from flex without the namespace tag.  Redefine them so we will use
+// them via the gnulib namespace.
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define fread GNULIB_NAMESPACE::fread
 #define fwrite GNULIB_NAMESPACE::fwrite
 #define getc GNULIB_NAMESPACE::getc
 #define isatty GNULIB_NAMESPACE::isatty
 #define malloc GNULIB_NAMESPACE::malloc
 #define realloc GNULIB_NAMESPACE::realloc
 #endif
 
 %}
 
-D       [0-9]
-NUM	(({D}+\.?{D}*)|(\.{D}+))
+D   [0-9]
+NUM (({D}+\.?{D}*)|(\.{D}+))
 
 %%
 
 %{
-// Numeric values
+// Numeric values.
 %}
 
-<NUM_MODE>{NUM}		{
-    int nread;
+<NUM_MODE>{NUM} {
+    int nread = sscanf (yytext, "%lf", &(yylval->num));
 
-    nread = sscanf (yytext, "%lf", &(yylval->num));
     if (nread == 1)
       return NUM;
   }
-<NUM_MODE>[ \t]+	{ }
-<NUM_MODE>"\n"|.	{ yyless (0); BEGIN (INITIAL); }
+
+<NUM_MODE>[ \t]+ { }
+
+<NUM_MODE>"\n"|. {
+    yyless (0);
+    BEGIN (INITIAL);
+  }
 
-<MAYBE_NUM_MODE>"{"	{ BEGIN (NUM_MODE); return START; }
-<MAYBE_NUM_MODE>"\n"|.	{ yyless (0); BEGIN (INITIAL); }
+<MAYBE_NUM_MODE>"{" {
+    BEGIN (NUM_MODE);
+    return START;
+  }
+
+<MAYBE_NUM_MODE>"\n"|. {
+    yyless (0);
+    BEGIN (INITIAL);
+  }
 
 %{
-// Simple commands
+// Simple commands.
 %}
 
-"\\bf"		{ return BF; }
-"\\it"		{ return IT; }
-"\\sl"		{ return SL; }
-"\\rm"		{ return RM; }
+"\\bf" { return BF; }
+"\\it" { return IT; }
+"\\sl" { return SL; }
+"\\rm" { return RM; }
 
 %{
-// Generic font commands
+// Generic font commands.
 %}
 
-"\\fontname"	{ return FONTNAME; }
-"\\fontsize"	{ BEGIN (MAYBE_NUM_MODE); return FONTSIZE; }
-"\\color[rgb]"	{ BEGIN (MAYBE_NUM_MODE); return COLOR_RGB; }
-"\\color"	{ return COLOR; }
+"\\fontname" { return FONTNAME; }
+
+"\\fontsize" {
+    BEGIN (MAYBE_NUM_MODE);
+    return FONTSIZE;
+  }
+
+"\\color[rgb]" {
+    BEGIN (MAYBE_NUM_MODE);
+    return COLOR_RGB;
+  }
+
+"\\color" { return COLOR; }
 
 %{
-// Special characters
+// Special characters.
 %}
 
-"{"	{ return START; }
-"}"	{ return END; }
-"^"	{ return SUPER; }
-"_"	{ return SUB; }
+"{" { return START; }
+"}" { return END; }
+"^" { return SUPER; }
+"_" { return SUB; }
 
-"\\{"	|
-"\\}"	|
-"\\^"	|
-"\\_"	|
-"\\\\"	{ yylval->ch = yytext[1]; return CH; }
+"\\{"  |
+"\\}"  |
+"\\^"  |
+"\\_"  |
+"\\\\" {
+    yylval->ch = yytext[1];
+    return CH;
+  }
 
 %{
-// Symbols
+// Symbols.
 %}
 
 @SYMBOL_RULES@
 
 %{
-// Generic character
+// Generic character.
 %}
 
-"\n"	|
-.	{ yylval->ch = yytext[0]; return CH; }
+"\n" |
+.    {
+    yylval->ch = yytext[0];
+    return CH;
+  }
 
 %%
 
 void *
 octave_tex_alloc (yy_size_t size, yyscan_t)
 {
   return malloc (size);
 }
diff --git a/libinterp/corefcn/oct-tex-parser.in.yy b/libinterp/corefcn/oct-tex-parser.in.yy
--- a/libinterp/corefcn/oct-tex-parser.in.yy
+++ b/libinterp/corefcn/oct-tex-parser.in.yy
@@ -16,189 +16,192 @@ for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 %{
+
 #define YYDEBUG 1
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "txt-eng.h"
 #include "oct-tex-parser.h"
 
 extern int octave_tex_lex (YYSTYPE *, void *);
 static void yyerror (text_parser_tex& parser, const char *s);
 
 #if defined (GNULIB_NAMESPACE)
-// Calls to the following functions appear in the generated output from
-// Bison without the namespace tag.  Redefine them so we will use them
-// via the gnulib namespace.
+// Calls to the following functions appear in the generated output
+// from Bison without the namespace tag.  Redefine them so we will use
+// them via the gnulib namespace.
 #define fclose GNULIB_NAMESPACE::fclose
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define malloc GNULIB_NAMESPACE::malloc
 #endif
 
 #define scanner parser.get_scanner ()
+
 %}
 
 %API_PREFIX_DECL%
 
 %define api.pure
 %parse-param { text_parser_tex& parser }
 %lex-param { void *scanner }
 
 %code requires {#include <string>}
 
-%union {
-  /* Leaf symbols produced by the scanner */
+%union
+{
+  // Leaf symbols produced by the scanner.
   char                       ch;
   double                     num;
   int                        sym;
 
-  /* Used for string buffering */
+  // Used for string buffering.
   std::string*               str;
 
-  /* Objects produced by the parser */
+  // Objects produced by the parser.
   text_element*              e_base;
   text_element_list*         e_list;
 }
 
 %token BF IT SL RM
 %token FONTNAME FONTSIZE
 %token COLOR COLOR_RGB
 %token START END SUPER SUB
 %token<ch> CH
 %token<num> NUM
 %token<sym> SYM
 
 %type<str> simple_string
 %type<e_base> string_element symbol_element
 %type<e_base> superscript_element subscript_element combined_script_element
-%type<e_base> font_modifier_element fontname_element fontsize_element color_element
+%type<e_base> font_modifier_element fontname_element fontsize_element
+%type<e_base> color_element
 %type<e_list> string_element_list scoped_string_element_list
 
-/* Make sure there's no memory leak on parse error. */
+// Make sure there's no memory leak on parse error.
 %destructor { } <ch> <num> <sym>
 %destructor { delete $$; } <*>
 
 %nonassoc SCRIPT
 %nonassoc SUB SUPER
 
 %nonassoc STR
 %nonassoc CH
 
 %start string
 
 %%
 
-simple_string			: CH
-				  { $$ = new std::string (1, $1); }
-				| simple_string CH
-				  { $1->append (1, $2); $$ = $1; }
-				;
+simple_string                   : CH
+                                  { $$ = new std::string (1, $1); }
+                                | simple_string CH
+                                  { $1->append (1, $2); $$ = $1; }
+                                ;
 
-symbol_element			: SYM
-				  { $$ = new text_element_symbol ($1); }
-				;
+symbol_element                  : SYM
+                                  { $$ = new text_element_symbol ($1); }
+                                ;
 
-font_modifier_element		: BF
-				  { $$ = new text_element_fontstyle (text_element_fontstyle::bold); }
-				| IT
-				  { $$ = new text_element_fontstyle (text_element_fontstyle::italic); }
-				| SL
-				  { $$ = new text_element_fontstyle (text_element_fontstyle::oblique); }
-				| RM
-				  { $$ = new text_element_fontstyle (text_element_fontstyle::normal); }
-				;
+font_modifier_element           : BF
+                                  { $$ = new text_element_fontstyle (text_element_fontstyle::bold); }
+                                | IT
+                                  { $$ = new text_element_fontstyle (text_element_fontstyle::italic); }
+                                | SL
+                                  { $$ = new text_element_fontstyle (text_element_fontstyle::oblique); }
+                                | RM
+                                  { $$ = new text_element_fontstyle (text_element_fontstyle::normal); }
+                                ;
 
-fontsize_element		: FONTSIZE START NUM END
-				  { $$ = new text_element_fontsize ($3); }
-				;
+fontsize_element                : FONTSIZE START NUM END
+                                  { $$ = new text_element_fontsize ($3); }
+                                ;
 
-fontname_element		: FONTNAME START simple_string END
-				  {
-				    $$ = new text_element_fontname (*$3);
-				    delete $3;
-				  }
-				;
+fontname_element                : FONTNAME START simple_string END
+                                  {
+                                    $$ = new text_element_fontname (*$3);
+                                    delete $3;
+                                  }
+                                ;
 
-color_element			: COLOR START simple_string END
-				  {
-				    $$ = new text_element_color (*$3);
-				    delete $3;
-				  }
-				| COLOR_RGB START NUM NUM NUM END
-				  {
-				    $$ = new text_element_color ($3, $4, $5);
-				  }
-				;
+color_element                   : COLOR START simple_string END
+                                  {
+                                    $$ = new text_element_color (*$3);
+                                    delete $3;
+                                  }
+                                | COLOR_RGB START NUM NUM NUM END
+                                  {
+                                    $$ = new text_element_color ($3, $4, $5);
+                                  }
+                                ;
 
-string_element			: simple_string %prec STR
-				  {
-				    $$ = new text_element_string (*$1);
-				    delete $1;
-				  }
-				| scoped_string_element_list
-				  /* This is just to avoid a warning in bison. */
-				  { $$ = $1; }
-				| symbol_element
-				| font_modifier_element
-				| fontsize_element
-				| fontname_element
-				| color_element
-				| superscript_element %prec SCRIPT
-				| subscript_element %prec SCRIPT
-				| combined_script_element
-				;
+string_element                  : simple_string %prec STR
+                                  {
+                                    $$ = new text_element_string (*$1);
+                                    delete $1;
+                                  }
+                                | scoped_string_element_list
+                                  { $$ = $1; }
+                                | symbol_element
+                                | font_modifier_element
+                                | fontsize_element
+                                | fontname_element
+                                | color_element
+                                | superscript_element %prec SCRIPT
+                                | subscript_element %prec SCRIPT
+                                | combined_script_element
+                                ;
 
-superscript_element		: SUPER CH
-				  { $$ = new text_element_superscript ($2); }
-				| SUPER scoped_string_element_list
-				  { $$ = new text_element_superscript ($2); }
-				| SUPER symbol_element
-				  { $$ = new text_element_superscript ($2); }
-				;
+superscript_element             : SUPER CH
+                                  { $$ = new text_element_superscript ($2); }
+                                | SUPER scoped_string_element_list
+                                  { $$ = new text_element_superscript ($2); }
+                                | SUPER symbol_element
+                                  { $$ = new text_element_superscript ($2); }
+                                ;
 
-subscript_element		: SUB CH
-				  { $$ = new text_element_subscript ($2); }
-				| SUB scoped_string_element_list
-				  { $$ = new text_element_subscript ($2); }
-				| SUB symbol_element
-				  { $$ = new text_element_subscript ($2); }
-				;
+subscript_element               : SUB CH
+                                  { $$ = new text_element_subscript ($2); }
+                                | SUB scoped_string_element_list
+                                  { $$ = new text_element_subscript ($2); }
+                                | SUB symbol_element
+                                  { $$ = new text_element_subscript ($2); }
+                                ;
 
-combined_script_element		: subscript_element superscript_element
-				  { $$ = new text_element_combined ($1, $2); }
-				| superscript_element subscript_element
-				  { $$ = new text_element_combined ($1, $2); }
-				;
+combined_script_element         : subscript_element superscript_element
+                                  { $$ = new text_element_combined ($1, $2); }
+                                | superscript_element subscript_element
+                                  { $$ = new text_element_combined ($1, $2); }
+                                ;
 
-string_element_list		: string_element
-				  { $$ = new text_element_list ($1); }
-				| string_element_list string_element
-				  { $1->push_back ($2); $$ = $1; }
-				;
+string_element_list             : string_element
+                                  { $$ = new text_element_list ($1); }
+                                | string_element_list string_element
+                                  { $1->push_back ($2); $$ = $1; }
+                                ;
 
-scoped_string_element_list	: START string_element_list END
-				  { $$ = $2; }
-				| START END
-				  { $$ = new text_element_list (); }
-				;
+scoped_string_element_list      : START string_element_list END
+                                  { $$ = $2; }
+                                | START END
+                                  { $$ = new text_element_list (); }
+                                ;
 
-string				: /* empty */
-				  { parser.set_parse_result (new text_element_string ("")); }
-				| string_element_list
-				  { parser.set_parse_result ($1); }
-				;
+string                          : // empty
+                                  { parser.set_parse_result (new text_element_string ("")); }
+                                | string_element_list
+                                  { parser.set_parse_result ($1); }
+                                ;
 
 %%
 
 text_element*
 text_parser_tex::parse (const std::string& s)
 {
   octave_tex_debug = 0;
 
