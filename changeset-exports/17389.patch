# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1378657004 14400
#      Sun Sep 08 12:16:44 2013 -0400
# Node ID dbdff94bf9777ec588fadba4fd340dc7ce15538c
# Parent  e04847bbcfdfe6cf98301f06021b2310afded3eb
Use std::numeric_limits for floating point bit widths

* bitfcns.cc (max_mantissa_value<T>): New utility function.
(Fbitshift): Use max_mantissa_value, std::numeric_limits, and sizeof.
(Fbitmax): Use max_mantissa_value. Cast output properly for class single.

diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -339,16 +339,23 @@ DEFUN (bitxor, args, ,
 Return the bitwise XOR of non-negative integers.\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitxor", args);
 }
 
+template <typename T>
+static int64_t
+max_mantissa_value ()
+{
+  return (static_cast<int64_t> (1) << std::numeric_limits<T>::digits) - 1;
+}
+
 static int64_t
 bitshift (double a, int n, int64_t mask)
 {
   // In the name of bug-for-bug compatibility.
   if (a < 0)
     return -bitshift (-a, n, mask);
 
   if (n > 0)
@@ -538,23 +545,24 @@ bitshift (10, [-2, -1, 0, 1, 2])\n\
       else if (cname == "int16")
         DO_SBITSHIFT (int16, nbits < 16 ? nbits : 16);
       else if (cname == "int32")
         DO_SBITSHIFT (int32, nbits < 32 ? nbits : 32);
       else if (cname == "int64")
         DO_SBITSHIFT (int64, nbits < 64 ? nbits : 64);
       else if (cname == "double")
         {
-          nbits = (nbits < 53 ? nbits : 53);
-          int64_t mask = 0x1FFFFFFFFFFFFFLL;
-          if (nbits < 53)
-            mask = mask >> (53 - nbits);
+          static const int bits_in_mantissa = std::numeric_limits<double>::digits;
+          nbits = (nbits < bits_in_mantissa ? nbits : bits_in_mantissa);
+          int64_t mask = max_mantissa_value<double> ();
+          if (nbits < bits_in_mantissa)
+            mask = mask >> (bits_in_mantissa - nbits);
           else if (nbits < 1)
             mask = 0;
-          int bits_in_type = 64;
+          int bits_in_type = sizeof (double) * CHAR_BIT;
           NDArray m = m_arg.array_value ();
           DO_BITSHIFT ( );
         }
       else
         error ("bitshift: not defined for %s objects", cname.c_str ());
     }
   else
     print_usage ();
@@ -587,19 +595,19 @@ valid option.  On IEEE-754 compatible sy
     cname = args(0).string_value ();
   else if (nargin != 0)
     {
       print_usage ();
       return retval;
     }
 
   if (cname == "double")
-    retval = (static_cast<double> (0x1FFFFFFFFFFFFFLL));
+    retval = (static_cast<double> (max_mantissa_value<double> ()));
   else if (cname == "single")
-    retval = (static_cast<double> (0xFFFFFFL));
+    retval = (static_cast<float> (max_mantissa_value<float> ()));
   else
     error ("bitmax: not defined for class '%s'", cname.c_str ());
 
   return retval;
 }
 
 DEFALIAS(flintmax, bitmax)
 
