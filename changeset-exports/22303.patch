# HG changeset patch
# User Ernst Reissner <rei3ner@arcor.de>
# Date 1470258074 -7200
#      Wed Aug 03 23:01:14 2016 +0200
# Node ID 0448bf26fe98a30ab83f68b07c53458b593b61f0
# Parent  1c4cd12987f54456dbb3e10b1776e5d2df738f65
style fixes (patch #9059)

* ov-java.cc: Style fixes.  Attempt to keep lines less than 80
characters wide.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -813,106 +813,135 @@ find_octave_class (JNIEnv *jni_env, cons
       jni_env->ExceptionClear ();
 
       if (! uiClass)
         {
           if (class_loader.empty ())
             {
               jclass_ref syscls (jni_env,
                                  jni_env->FindClass ("java/lang/System"));
-              jmethodID mID = jni_env->GetStaticMethodID (syscls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
-              jstring_ref js (jni_env, jni_env->NewStringUTF ("octave.class.loader"));
-              js = reinterpret_cast<jstring> (jni_env->CallStaticObjectMethod (syscls, mID, jstring (js)));
+              jmethodID mID = jni_env->GetStaticMethodID
+                (syscls,
+                 "getProperty",
+                 "(Ljava/lang/String;)Ljava/lang/String;");
+              jstring_ref js (jni_env,
+                              jni_env->NewStringUTF ("octave.class.loader"));
+              js = reinterpret_cast<jstring> (jni_env->CallStaticObjectMethod
+                                              (syscls, mID, jstring (js)));
               class_loader = jstring_to_string (jni_env, jstring (js));
               std::replace (class_loader.begin (), class_loader.end (),
                             '.', '/');
             }
 
-          jclass_ref uicls (jni_env, jni_env->FindClass (class_loader.c_str ()));
+          jclass_ref uicls (jni_env,
+                            jni_env->FindClass (class_loader.c_str ()));
 
           if (! uicls)
             {
               jni_env->ExceptionClear ();
 
               // Try the netbeans way
               std::replace (class_loader.begin (), class_loader.end (),
                             '/', '.');
-              jclass_ref jcls2 (jni_env, jni_env->FindClass ("org/openide/util/Lookup"));
-              jmethodID mID = jni_env->GetStaticMethodID (jcls2, "getDefault", "()Lorg/openide/util/Lookup;");
-              jobject_ref lObj (jni_env, jni_env->CallStaticObjectMethod (jcls2, mID));
+              jclass_ref jcls2 (jni_env,
+                                jni_env->FindClass ("org/openide/util/Lookup"));
+              jmethodID mID = jni_env->GetStaticMethodID
+                (jcls2, "getDefault", "()Lorg/openide/util/Lookup;");
+              jobject_ref lObj (jni_env,
+                                jni_env->CallStaticObjectMethod (jcls2, mID));
               mID = jni_env->GetMethodID (jcls2, "lookup",
                                           "(Ljava/lang/Class;)Ljava/lang/Object;");
-              jclass_ref cLoaderCls (jni_env, jni_env->FindClass ("java/lang/ClassLoader"));
-              jobject_ref cLoader (jni_env, jni_env->CallObjectMethod (lObj, mID, jclass (cLoaderCls)));
-              mID = jni_env->GetMethodID (cLoaderCls, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
-              jstring_ref js (jni_env, jni_env->NewStringUTF (class_loader.c_str ()));
-              uicls = reinterpret_cast<jclass> (jni_env->CallObjectMethod (cLoader, mID, jstring (js)));
+              jclass_ref cLoaderCls (jni_env,
+                                     jni_env->FindClass ("java/lang/ClassLoader"));
+              jobject_ref cLoader (jni_env,
+                                   jni_env->CallObjectMethod
+                                   (lObj, mID, jclass (cLoaderCls)));
+              mID = jni_env->GetMethodID (cLoaderCls, "loadClass",
+                                          "(Ljava/lang/String;)Ljava/lang/Class;");
+              jstring_ref js (jni_env,
+                              jni_env->NewStringUTF (class_loader.c_str ()));
+              uicls = reinterpret_cast<jclass>
+                (jni_env->CallObjectMethod (cLoader, mID, jstring (js)));
             }
 
           if (uicls)
-            uiClass = reinterpret_cast<jclass> (jni_env->NewGlobalRef (jclass (uicls)));
+            uiClass = reinterpret_cast<jclass>
+              (jni_env->NewGlobalRef (jclass (uicls)));
         }
 
       if (uiClass)
         {
-          jmethodID mID = jni_env->GetStaticMethodID (uiClass, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
+          jmethodID mID = jni_env->GetStaticMethodID
+            (uiClass, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
           jstring_ref js (jni_env, jni_env->NewStringUTF (name));
-          jcls = reinterpret_cast<jclass> (jni_env->CallStaticObjectMethod (uiClass, mID, jstring (js)));
+          jcls = reinterpret_cast<jclass>
+            (jni_env->CallStaticObjectMethod (uiClass, mID, jstring (js)));
         }
     }
 
   return jcls;
 }
 
 static dim_vector
 compute_array_dimensions (JNIEnv *jni_env, jobject obj)
 {
   jobjectArray_ref jobj (jni_env, reinterpret_cast<jobjectArray> (obj));
   jclass_ref jcls (jni_env, jni_env->GetObjectClass (obj));
   jclass_ref ccls (jni_env, jni_env->GetObjectClass (jcls));
   jmethodID isArray_ID = jni_env->GetMethodID (ccls, "isArray", "()Z");
-  jmethodID getComponentType_ID = jni_env->GetMethodID (ccls, "getComponentType", "()Ljava/lang/Class;");
+  jmethodID getComponentType_ID = jni_env->GetMethodID (ccls,
+                                                        "getComponentType",
+                                                        "()Ljava/lang/Class;");
 
   dim_vector dv (1, 1);
   int idx = 0;
 
   jobj.detach ();
   while (jcls && jni_env->CallBooleanMethod (jcls, isArray_ID))
     {
       int len = (jobj ? jni_env->GetArrayLength (jobj) : 0);
       if (idx >= dv.ndims ())
         dv.resize (idx+1);
       dv(idx) = len;
-      jcls = reinterpret_cast<jclass> (jni_env->CallObjectMethod (jcls, getComponentType_ID));
-      jobj = (len > 0 ? reinterpret_cast<jobjectArray> (jni_env->GetObjectArrayElement (jobj, 0)) : 0);
+      jcls = reinterpret_cast<jclass>
+        (jni_env->CallObjectMethod (jcls, getComponentType_ID));
+      jobj = len > 0
+        ? reinterpret_cast<jobjectArray> (jni_env->GetObjectArrayElement (jobj,
+                                                                          0))
+        : 0;
       idx++;
     }
 
   octave_set_default_fpucw ();
 
   return dv;
 }
 
 static jobject
 make_java_index (JNIEnv *jni_env, const octave_value_list& idx)
 {
   jclass_ref ocls (jni_env, jni_env->FindClass ("[I"));
   jobjectArray retval = jni_env->NewObjectArray (idx.length (), ocls, 0);
-
+ // Here retval has the same length as idx
+
+  // Fill in entries of idx into retval
   for (int i = 0; i < idx.length (); i++)
     try
       {
         idx_vector v = idx(i).index_vector ();
 
         jintArray_ref i_array (jni_env, jni_env->NewIntArray (v.length ()));
         jint *buf = jni_env->GetIntArrayElements (i_array, 0);
-
+        // Here, buf points to the beginning of i_array
+
+        // Copy v to buf
         for (int k = 0; k < v.length (); k++)
           buf[k] = v(k);
 
+        // set retval[i]=i_array
         jni_env->ReleaseIntArrayElements (i_array, buf, 0);
         jni_env->SetObjectArrayElement (retval, i, i_array);
 
         check_exception (jni_env);
       }
     catch (index_exception& e)
       {
         // Rethrow to allow more info to be reported later.
@@ -926,19 +955,24 @@ make_java_index (JNIEnv *jni_env, const 
 static octave_value
 get_array_elements (JNIEnv *jni_env, jobject jobj,
                     const octave_value_list& idx)
 {
   octave_value retval;
   jobject_ref resObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
 
-  jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
-  jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsref", "(Ljava/lang/Object;[[I)Ljava/lang/Object;");
-  resObj = jni_env->CallStaticObjectMethod (helperClass, mID, jobj, jobject (java_idx));
+  jclass_ref helperClass (jni_env,
+                          find_octave_class (jni_env,
+                                             "org/octave/ClassHelper"));
+  jmethodID mID = jni_env
+    ->GetStaticMethodID (helperClass, "arraySubsref",
+                         "(Ljava/lang/Object;[[I)Ljava/lang/Object;");
+  resObj = jni_env->CallStaticObjectMethod
+    (helperClass, mID, jobj, jobject (java_idx));
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
   octave_set_default_fpucw ();
 
@@ -953,21 +987,23 @@ set_array_elements (JNIEnv *jni_env, job
 
   jclass_ref rhsCls (jni_env);
   jobject_ref resObj (jni_env);
   jobject_ref rhsObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
 
   if (unbox (jni_env, rhs, rhsObj, rhsCls))
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env,
+                              find_octave_class (jni_env,
+                                                 "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsasgn",
-          "(Ljava/lang/Object;[[ILjava/lang/Object;)Ljava/lang/Object;");
-      resObj = jni_env->CallStaticObjectMethod (helperClass, mID,
-          jobj, jobject (java_idx), jobject (rhsObj));
+          "(Ljava/lang/Object;[[ILjava/lang/Object;)" "Ljava/lang/Object;");
+      resObj = jni_env->CallStaticObjectMethod
+        (helperClass, mID, jobj, jobject (java_idx), jobject (rhsObj));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
   octave_set_default_fpucw ();
@@ -981,38 +1017,53 @@ get_invoke_list (JNIEnv *jni_env, void *
   jobject jobj = TO_JOBJECT (jobj_arg);
 
   std::list<std::string> name_list;
 
   if (jni_env)
     {
       jclass_ref cls (jni_env, jni_env->GetObjectClass (jobj));
       jclass_ref ccls (jni_env, jni_env->GetObjectClass (cls));
-      jmethodID getMethods_ID = jni_env->GetMethodID (ccls, "getMethods", "()[Ljava/lang/reflect/Method;");
-      jmethodID getFields_ID = jni_env->GetMethodID (ccls, "getFields", "()[Ljava/lang/reflect/Field;");
-      jobjectArray_ref mList (jni_env, reinterpret_cast<jobjectArray> (jni_env->CallObjectMethod (cls, getMethods_ID)));
-      jobjectArray_ref fList (jni_env, reinterpret_cast<jobjectArray> (jni_env->CallObjectMethod (cls, getFields_ID)));
+      jmethodID getMethods_ID = jni_env->GetMethodID
+        (ccls, "getMethods", "()[Ljava/lang/reflect/Method;");
+      jmethodID getFields_ID = jni_env->GetMethodID
+        (ccls, "getFields", "()[Ljava/lang/reflect/Field;");
+      jobjectArray_ref mList (jni_env,
+                              reinterpret_cast<jobjectArray>
+                              (jni_env->CallObjectMethod (cls, getMethods_ID)));
+      jobjectArray_ref fList (jni_env,
+                              reinterpret_cast<jobjectArray>
+                              (jni_env->CallObjectMethod (cls, getFields_ID)));
       int mLen = jni_env->GetArrayLength (mList);
       int fLen = jni_env->GetArrayLength (fList);
-      jclass_ref mCls (jni_env, jni_env->FindClass ("java/lang/reflect/Method"));
-      jclass_ref fCls (jni_env, jni_env->FindClass ("java/lang/reflect/Field"));
-      jmethodID m_getName_ID = jni_env->GetMethodID (mCls, "getName", "()Ljava/lang/String;");
-      jmethodID f_getName_ID = jni_env->GetMethodID (fCls, "getName", "()Ljava/lang/String;");
+      jclass_ref mCls (jni_env,
+                       jni_env->FindClass ("java/lang/reflect/Method"));
+      jclass_ref fCls (jni_env,
+                       jni_env->FindClass ("java/lang/reflect/Field"));
+      jmethodID m_getName_ID = jni_env->GetMethodID (mCls, "getName",
+                                                     "()Ljava/lang/String;");
+      jmethodID f_getName_ID = jni_env->GetMethodID (fCls, "getName",
+                                                     "()Ljava/lang/String;");
 
       for (int i = 0; i < mLen; i++)
         {
           jobject_ref meth (jni_env, jni_env->GetObjectArrayElement (mList, i));
-          jstring_ref methName (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (meth, m_getName_ID)));
+          jstring_ref methName (jni_env, reinterpret_cast<jstring>
+                                (jni_env->CallObjectMethod (meth, m_getName_ID)));
           name_list.push_back (jstring_to_string (jni_env, methName));
         }
 
       for (int i = 0; i < fLen; i++)
         {
-          jobject_ref field (jni_env, jni_env->GetObjectArrayElement (fList, i));
-          jstring_ref fieldName (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (field, f_getName_ID)));
+          jobject_ref field (jni_env,
+                             jni_env->GetObjectArrayElement (fList, i));
+          jstring_ref fieldName (jni_env,
+                                 reinterpret_cast<jstring>
+                                 (jni_env->CallObjectMethod
+                                  (field, f_getName_ID)));
           name_list.push_back (jstring_to_string (jni_env, fieldName));
         }
 
       octave_set_default_fpucw ();
     }
 
   string_vector v (name_list);
 
@@ -1037,31 +1088,36 @@ convert_to_string (JNIEnv *jni_env, jobj
           if (jni_env->IsInstanceOf (java_object, cls))
             {
               jobjectArray array = reinterpret_cast<jobjectArray> (java_object);
               int len = jni_env->GetArrayLength (array);
               Cell c (len, 1);
 
               for (int i = 0; i < len; i++)
                 {
-                  jstring_ref js (jni_env, reinterpret_cast<jstring> (jni_env->GetObjectArrayElement (array, i)));
+                  jstring_ref js (jni_env,
+                                  reinterpret_cast<jstring>
+                                  (jni_env->GetObjectArrayElement (array, i)));
 
                   if (js)
                     c(i) = octave_value (jstring_to_string (jni_env, js), type);
                   else
                     c(i) = check_exception (jni_env);
                 }
 
               retval = octave_value (c);
             }
           else
             {
               cls = jni_env->FindClass ("java/lang/Object");
-              jmethodID mID = jni_env->GetMethodID (cls, "toString", "()Ljava/lang/String;");
-              jstring_ref js (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (java_object, mID)));
+              jmethodID mID = jni_env->GetMethodID (cls, "toString",
+                                                    "()Ljava/lang/String;");
+              jstring_ref js (jni_env,
+                              reinterpret_cast<jstring>
+                              (jni_env->CallObjectMethod (java_object, mID)));
 
               if (js)
                 retval = octave_value (jstring_to_string (jni_env, js), type);
               else
                 retval = check_exception (jni_env);
             }
         }
       else
@@ -1205,56 +1261,75 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
 
       if (Vjava_matrix_autoconversion)
         {
           cls = find_octave_class (jni_env, "org/octave/Matrix");
 
           if (jni_env->IsInstanceOf (jobj, cls))
             {
               jmethodID mID = jni_env->GetMethodID (cls, "getDims", "()[I");
-              jintArray_ref iv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
+              jintArray_ref iv (jni_env,
+                                reinterpret_cast<jintArray>
+                                (jni_env->CallObjectMethod (jobj, mID)));
               jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv), 0);
               dim_vector dims;
               dims.resize (jni_env->GetArrayLength (jintArray (iv)));
 
               for (int i = 0; i < dims.ndims (); i++)
                 dims(i) = iv_data[i];
 
               jni_env->ReleaseIntArrayElements (jintArray (iv), iv_data, 0);
-              mID = jni_env->GetMethodID (cls, "getClassName", "()Ljava/lang/String;");
-              jstring_ref js (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (jobj, mID)));
+              mID = jni_env->GetMethodID (cls, "getClassName",
+                                          "()Ljava/lang/String;");
+              jstring_ref js (jni_env,
+                              reinterpret_cast<jstring>
+                              (jni_env->CallObjectMethod (jobj, mID)));
 
               std::string s = jstring_to_string (jni_env, js);
 
               if (s == "double")
                 {
                   NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toDouble", "()[D");
-                  jdoubleArray_ref dv (jni_env, reinterpret_cast<jdoubleArray> (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetDoubleArrayRegion (dv, 0, m.numel (), m.fortran_vec ());
+                  jdoubleArray_ref dv (jni_env,
+                                       reinterpret_cast<jdoubleArray>
+                                       (jni_env->CallObjectMethod (jobj, mID)));
+                  jni_env->GetDoubleArrayRegion (dv, 0,
+                                                 m.numel (),
+                                                 m.fortran_vec ());
                   retval = m;
                   break;
                 }
               else if (s == "byte")
                 {
                   if (Vjava_unsigned_autoconversion)
                     {
                       uint8NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toByte", "()[B");
-                      jbyteArray_ref dv (jni_env, reinterpret_cast<jbyteArray> (jni_env->CallObjectMethod (jobj, mID)));
-                      jni_env->GetByteArrayRegion (dv, 0, m.numel (), reinterpret_cast<jbyte *> (m.fortran_vec ()));
+                      jbyteArray_ref dv (jni_env,
+                                         reinterpret_cast<jbyteArray>
+                                         (jni_env->CallObjectMethod (jobj,
+                                                                     mID)));
+                      jni_env->GetByteArrayRegion (dv, 0, m.numel (),
+                                                   reinterpret_cast<jbyte *>
+                                                   (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                   else
                     {
                       int8NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toByte", "()[B");
-                      jbyteArray_ref dv (jni_env, reinterpret_cast<jbyteArray> (jni_env->CallObjectMethod (jobj, mID)));
-                      jni_env->GetByteArrayRegion (dv, 0, m.numel (), reinterpret_cast<jbyte *> (m.fortran_vec ()));
+                      jbyteArray_ref dv (jni_env,
+                                         reinterpret_cast<jbyteArray>
+                                         (jni_env->CallObjectMethod (jobj,
+                                                                     mID)));
+                      jni_env->GetByteArrayRegion (dv, 0, m.numel (),
+                                                   reinterpret_cast<jbyte *>
+                                                   (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                 }
               else if (s == "integer")
                 {
                   if (Vjava_unsigned_autoconversion)
                     {
@@ -1264,35 +1339,39 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
                       jni_env->GetIntArrayRegion (dv, 0, m.numel (), reinterpret_cast<jint *> (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                   else
                     {
                       int32NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toInt", "()[I");
-                      jintArray_ref dv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
-                      jni_env->GetIntArrayRegion (dv, 0, m.numel (), reinterpret_cast<jint *> (m.fortran_vec ()));
+                      jintArray_ref dv (jni_env,
+                                        reinterpret_cast<jintArray>
+                                        (jni_env->CallObjectMethod (jobj,
+                                                                    mID)));
+                      jni_env->GetIntArrayRegion (dv, 0, m.numel (),
+                                                  reinterpret_cast<jint *>
+                                                  (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                 }
             }
         }
 
       cls = find_octave_class (jni_env, "org/octave/OctaveReference");
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           jmethodID mID = jni_env->GetMethodID (cls, "getID", "()I");
           int ID = jni_env->CallIntMethod (jobj, mID);
           std::map<int,octave_value>::iterator it = octave_ref_map.find (ID);
 
           if (it != octave_ref_map.end ())
             retval = it->second;
-
           break;
         }
 
       // No suitable class found.  Return a generic octave_java object
       retval = octave_value (new octave_java (jobj, jcls));
       break;
     }
 
@@ -1345,24 +1424,27 @@ box_more (JNIEnv *jni_env, void *jobj_ar
 
               if (rows > 0)
                 {
                   Matrix m;
 
                   for (int r = 0; r < rows; r++)
                     {
                       jdoubleArray_ref row (jni_env,
-                                            reinterpret_cast<jdoubleArray> (jni_env->GetObjectArrayElement (jarr, r)));
+                                            reinterpret_cast<jdoubleArray>
+                                            (jni_env->GetObjectArrayElement
+                                             (jarr, r)));
 
                       if (m.is_empty ())
                         {
                           cols = jni_env->GetArrayLength (row);
                           m.resize (cols, rows);
                         }
-                      jni_env->GetDoubleArrayRegion (row, 0, cols, m.fortran_vec () + r * cols);
+                      jni_env->GetDoubleArrayRegion
+                        (row, 0, cols, m.fortran_vec () + r * cols);
                     }
                   retval = m.transpose ();
                 }
               else
                 retval = Matrix ();
             }
         }
 
@@ -1374,17 +1456,18 @@ box_more (JNIEnv *jni_env, void *jobj_ar
             {
               jobjectArray jarr = reinterpret_cast<jobjectArray> (jobj);
               int len = jni_env->GetArrayLength (jarr);
               Cell m (len, 1);
 
               for (int i = 0; i < len; i++)
                 {
                   jstring_ref js (jni_env,
-                                  reinterpret_cast<jstring> (jni_env->GetObjectArrayElement (jarr, i)));
+                                  reinterpret_cast<jstring>
+                                  (jni_env->GetObjectArrayElement (jarr, i)));
                   m(i) = jstring_to_string (jni_env, js);
                 }
 
               retval = m;
             }
         }
     }
 
@@ -1421,17 +1504,18 @@ unbox (JNIEnv *jni_env, const octave_val
       const Array<std::string> str_arr = val.cellstr_value ();
       const octave_idx_type n = str_arr.numel ();
 
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
       jobjectArray array = jni_env->NewObjectArray (n, scls, NULL);
 
       for (octave_idx_type i = 0; i < n; i++)
         {
-          jstring_ref jstr (jni_env, jni_env->NewStringUTF (str_arr(i).c_str ()));
+          jstring_ref jstr (jni_env, jni_env->NewStringUTF
+                            (str_arr(i).c_str ()));
           jni_env->SetObjectArrayElement (array, i, jstr);
         }
 
       jobj = array;
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.numel () > 1 && val.dims ().is_vector ())
     {
@@ -1533,19 +1617,21 @@ unbox (JNIEnv *jni_env, const octave_val
     {
       Matrix m = val.matrix_value ();
       jdoubleArray dv = jni_env->NewDoubleArray (m.numel ());
       jni_env->SetDoubleArrayRegion (dv, 0, m.numel (), m.fortran_vec ());
       jobj = dv;
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (Vjava_matrix_autoconversion
-           && (val.is_matrix_type () || val.is_range ()) && val.is_real_type ())
+           && (val.is_matrix_type () || val.is_range ())
+           && val.is_real_type ())
     {
-      jclass_ref mcls (jni_env, find_octave_class (jni_env, "org/octave/Matrix"));
+      jclass_ref mcls (jni_env, find_octave_class (jni_env,
+                                                   "org/octave/Matrix"));
       dim_vector dims = val.dims ();
       jintArray_ref iv (jni_env, jni_env->NewIntArray (dims.ndims ()));
       jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv), 0);
 
       for (int i = 0; i < dims.ndims (); i++)
         iv_data[i] = dims(i);
 
       jni_env->ReleaseIntArrayElements (jintArray (iv), iv_data, 0);
@@ -1561,45 +1647,52 @@ unbox (JNIEnv *jni_env, const octave_val
                                      jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_int8_type ())
         {
           int8NDArray m = val.int8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.numel ()));
           jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.numel (),
-                                       reinterpret_cast<jbyte *> (m.fortran_vec ()));
+                                       reinterpret_cast<jbyte *>
+                                       (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([B[I)V");
-          jobj = jni_env->NewObject (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
+          jobj = jni_env->NewObject
+            (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_uint8_type ())
         {
           uint8NDArray m = val.uint8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.numel ()));
           jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.numel (),
-                                       reinterpret_cast<jbyte *> (m.fortran_vec ()));
+                                       reinterpret_cast<jbyte *>
+                                       (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([B[I)V");
-          jobj = jni_env->NewObject (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
+          jobj = jni_env->NewObject
+            (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_int32_type ())
         {
           int32NDArray m = val.int32_array_value ();
           jintArray_ref v (jni_env, jni_env->NewIntArray (m.numel ()));
           jni_env->SetIntArrayRegion (jintArray (v), 0, m.numel (),
-                                      reinterpret_cast<jint *> (m.fortran_vec ()));
+                                      reinterpret_cast<jint *>
+                                      (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([I[I)V");
-          jobj = jni_env->NewObject (jclass (mcls), mID, jintArray (v), jintArray (iv));
+          jobj = jni_env->NewObject
+            (jclass (mcls), mID, jintArray (v), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
           found = false;
-          error ("cannot convert matrix of type '%s'", val.class_name ().c_str ());
+          error ("cannot convert matrix of type '%s'",
+                 val.class_name ().c_str ());
         }
     }
   else
     {
       jclass rcls = find_octave_class (jni_env, "org/octave/OctaveReference");
       jmethodID mID = jni_env->GetMethodID (rcls, "<init>", "(I)V");
       int ID = octave_java_refcount++;
 
@@ -1643,17 +1736,18 @@ unbox (JNIEnv *jni_env, const octave_val
 }
 
 static long
 get_current_thread_ID (JNIEnv *jni_env)
 {
   if (jni_env)
     {
       jclass_ref cls (jni_env, jni_env->FindClass ("java/lang/Thread"));
-      jmethodID mID = jni_env->GetStaticMethodID (cls, "currentThread", "()Ljava/lang/Thread;");
+      jmethodID mID = jni_env->GetStaticMethodID (cls, "currentThread",
+                                                  "()Ljava/lang/Thread;");
       jobject_ref jthread (jni_env, jni_env->CallStaticObjectMethod (cls, mID));
 
       if (jthread)
         {
           jclass_ref jth_cls (jni_env, jni_env->GetObjectClass (jthread));
           mID = jni_env->GetMethodID (jth_cls, "getId", "()J");
           long result = jni_env->CallLongMethod (jthread, mID);
           //printf ("current java thread ID = %ld\n", result);
@@ -1666,18 +1760,20 @@ get_current_thread_ID (JNIEnv *jni_env)
 
 static int
 java_event_hook (void)
 {
   JNIEnv *current_env = thread_jni_env ();
 
   if (current_env)
     {
-      jclass_ref cls (current_env, find_octave_class (current_env, "org/octave/Octave"));
-      jmethodID mID = current_env->GetStaticMethodID (cls, "checkPendingAction", "()V");
+      jclass_ref cls (current_env, find_octave_class (current_env,
+                                                      "org/octave/Octave"));
+      jmethodID mID = current_env->GetStaticMethodID
+        (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);
 
       octave_set_default_fpucw ();
     }
 
   return 0;
 }
 
@@ -1891,17 +1987,18 @@ octave_java::subsref (const std::string&
           ovl(0) = octave_value (this);
           ovl(1) = (idx.front ())(0);
           retval = feval (std::string ("__java_get__"), ovl, 1);
         }
       break;
 
     case '(':
       if (current_env)
-        retval = get_array_elements (current_env, TO_JOBJECT (to_java ()), idx.front ());
+        retval = get_array_elements
+          (current_env, TO_JOBJECT (to_java ()), idx.front ());
       break;
 
     default:
       error ("subsref: Java object cannot be indexed with %c", type[0]);
       break;
     }
 
   if (idx.size () > 1 && type.length () > 1)
@@ -1979,17 +2076,18 @@ octave_java::subsasgn (const std::string
         }
       else
         error ("invalid indexing/assignment on Java object");
       break;
 
     case '(':
       if (current_env)
         {
-          set_array_elements (current_env, TO_JOBJECT (to_java ()), idx.front (), rhs);
+          set_array_elements (current_env, TO_JOBJECT (to_java ()),
+                              idx.front (), rhs);
 
           count++;
           retval = octave_value (this);
         }
       break;
 
     default:
       error ("Java object cannot be indexed with %c", type[0]);
