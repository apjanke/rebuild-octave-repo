# HG changeset patch
# User jwe
# Date 819789329 0
#      Sun Dec 24 07:15:29 1995 +0000
# Node ID f2f93a3cd42f2633fc51a5845600897ceb35984b
# Parent  913a157f1e02256a478fd0e7212690e6a8b902cd
[project @ 1995-12-24 07:15:10 by jwe]

diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -84,85 +84,80 @@ mangle_octave_oct_file_name (const char 
 
 #endif
 
 #if defined (WITH_DL)
 
 static void *
 dl_resolve_octave_reference (const char *name, const char *file)
 {
+  void *retval = 0;
+
   // Dynamic linking with dlopen/dlsym doesn't require specification
   // of the libraries at runtime.  Instead, they are specified when
   // the .oct file is created.
 
   void *handle = dlopen (file, RTLD_LAZY);
 
   if (handle)
     {
-      void *func = dlsym (handle, name);
+      retval = dlsym (handle, name);
 
-      if (func)
-	return func;
-      else
+      if (! retval)
 	{
 	  const char *errmsg = dlerror ();
 
 	  if (errmsg)
 	    error("%s: `%s'", name, errmsg);
 	  else
 	    error("unable to link function `%s'", name);
 
 	  dlclose (handle);
-	  return 0;
 	}
     }
   else
-    {
-      error ("%s: %s `%s'", dlerror (), file, name);
-      return 0;
-    }
+    error ("%s: %s `%s'", dlerror (), file, name);
+
+  return retval;
 }
 
 #elif defined (WITH_SHL)
 
 static void *
 shl_resolve_octave_reference (const char *name, const char *file)
 {
+  void *retval = 0;
+
   // Dynamic linking with shl_load/shl_findsym doesn't require
   // specification of the libraries at runtime.  Instead, they are
   // specified when the .oct file is created.
 
   void *handle = shl_load (file, BIND_DEFERRED, 0L);
 
   if (handle)
     {
-      void *func = 0;
-
       int status = shl_findsym ((shl_t *) &handle, name,
-				TYPE_UNDEFINED, func);
+				TYPE_UNDEFINED, retval);
 
       if (status < 0)
 	{
 	  const char *errmsg = strerror (errno);
 
 	  if (errmsg)
 	    error("%s: `%s'", name, errmsg);
 	  else
 	    error("unable to link function `%s'", name);
 
-	  return 0;
+	  retval = 0;
 	}
-      else
-	return func;
     }
   else
-    {
-      error ("%s: %s `%s'", strerror (errno), file, name);
-      return 0;
-    }
+    error ("%s: %s `%s'", strerror (errno), file, name);
+
+  return retval;
 }
 
 #elif defined (WITH_DLD)
 
 // Now that we have the code above to do dynamic linking with the
 // dlopen/dlsym interface and Linux uses elf, I doubt that this code
 // will be used very much.  Maybe it will be able to go away
 // eventually.  Consider it unsupported...
@@ -296,25 +291,25 @@ dld_resolve_octave_reference (const char
 
 #endif
 
 static void *
 resolve_octave_reference (const char *name, const char *file = 0)
 {
 #if defined (WITH_DL)
 
-  dl_resolve_octave_reference (name, file);
+  return dl_resolve_octave_reference (name, file);
 
 #elif defined (WITH_SHL)
 
-  shl_resolve_octave_reference (name, file);
+  return shl_resolve_octave_reference (name, file);
 
 #elif defined (WITH_DLD)
 
-  dld_resolve_octave_reference (name, file);
+  return dld_resolve_octave_reference (name, file);
 
 #endif
 }
 
 Octave_builtin_fcn
 load_octave_builtin (const char *name)
 {
   Octave_builtin_fcn retval = 0;
