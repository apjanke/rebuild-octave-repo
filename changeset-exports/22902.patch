# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1477978889 -3600
#      Tue Nov 01 06:41:29 2016 +0100
# Node ID 284bbb0328f2edf58a2425e13daee49151d17c57
# Parent  4c56f3ffec040c9682f718d8fa98d596d8ebd602
Update odei5{i,s} code for Octave 4.3.0+ and Sundials 2.7.0.

* libinterp/dldfunctions/__ode15__.cc : Specify CSC format for sparse matrices,
  use new API function name for clearing sparse matrix.

* scripts/ode/ode15{i,s}.m : use correct calling sequence for odemergeoptions.

diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -318,17 +318,17 @@ namespace octave
   }
 
   void
   IDA::set_up (void)
   {
     if (havejacsparse)
       {
         int flag =
-          IDAKLU (mem, num, num*num);
+          IDAKLU (mem, num, num*num, CSC_MAT);
         if (flag != 0)
           {
             error ("IDAKLU solver not initialized");
           }
         flag = IDASlsSetSparseJacFn (mem, IDA::jacsparse);
       }
     else
       {
@@ -391,25 +391,25 @@ namespace octave
 
     SparseMatrix jac;
 
     if (havejacfun)
       jac = (*jacspfun) (y, yp, t, cj, ida_jac);
     else
       jac = (*jacspcell) (spdfdy, spdfdyp, cj);
 
-    SlsSetToZero (Jac);
+    SparseSetMatToZero (Jac);
 
     for (int i = 0; i < num + 1; i++)
-      Jac -> colptrs [i] = jac.cidx (i);
+      *(Jac -> colptrs)[i] = jac.cidx(i);
 
     for (int i = 0; i < jac.nnz (); i++)
       {
-        Jac -> rowvals [i] = jac.ridx (i);
-        Jac -> data [i] = jac.data (i);
+        *(Jac -> rowvals)[i] = jac.ridx (i);
+        Jac -> data[i] = jac.data (i);
       }    
 
     END_INTERRUPT_WITH_EXCEPTIONS;
   }
 
   ColumnVector
   IDA::NVecToCol (N_Vector& v, long int n)
   {
diff --git a/scripts/ode/ode15i.m b/scripts/ode/ode15i.m
--- a/scripts/ode/ode15i.m
+++ b/scripts/ode/ode15i.m
@@ -146,37 +146,34 @@ function varargout = ode15i (fun, trange
       end_try_catch
       if (! isa (options.Events, "function_handle") && ! ismatrix (options.Events))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field '%s'"], "Events");
       endif
     endif
   endif
 
-  persistent defaults   = [];
-  persistent classes    = [];
-  persistent attributes = [];
-
-  [defaults, classes, attributes] = odedefaults (n, trange(1),
-                                                 trange(end));
+  [defaults, classes, attributes] = ...
+  odedefaults (n, trange(1), trange(end));
 
-  defaults   = rmfield (defaults,   {"NonNegative", "Mass", ...
-                                     "MStateDependence", "MvPattern", ...
-                                     "MassSingular", "InitialSlope", "BDF"});
-  classes    = rmfield (classes,    {"NonNegative", "Mass", ...
-                                     "MStateDependence", "MvPattern", ...
-                                     "MassSingular", "InitialSlope", "BDF"});
-  attributes = rmfield (attributes, {"NonNegative", "Mass", ...
-                                     "MStateDependence", "MvPattern", ...
-                                     "MassSingular", "InitialSlope", "BDF"});
+  persistent ignorefields = {"NonNegative", "Mass", ...
+                             "MStateDependence", "MvPattern", ...
+                             "MassSingular", "InitialSlope", "BDF"};
+  
+  defaults   = rmfield (defaults, ignorefields);
+  classes    = rmfield (classes, ignorefields);
+  attributes = rmfield (attributes, ignorefields);
 
   classes        = odeset (classes, 'Vectorized', {});
-  attributes     = odeset (attributes, 'Jacobian', {}, 'Vectorized', {});
+  attributes     = ...
+  odeset (attributes, 'Jacobian', {}, 'Vectorized', {});
 
-  options = odemergeopts (options, defaults, classes, attributes, solver);
+  options = ...
+  odemergeopts ("ode15i", options, defaults,
+                classes, attributes, solver);
 
   ## Jacobian
   options.havejac       = false;
   options.havejacsparse = false;
   options.havejacfun    = false;
 
   if (! isempty (options.Jacobian))
     options.havejac = true;
diff --git a/scripts/ode/ode15s.m b/scripts/ode/ode15s.m
--- a/scripts/ode/ode15s.m
+++ b/scripts/ode/ode15s.m
@@ -153,27 +153,26 @@ function varargout = ode15s (fun, trange
       end_try_catch
       if (! isa (options.Events, "function_handle"))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field '%s'"], "Events");
       endif
     endif
   endif
 
-  persistent defaults   = [];
-  persistent classes    = [];
-  persistent attributes = [];
 
-  [defaults, classes, attributes] = odedefaults (n, trange(1),
-                                                 trange(end));
+  [defaults, classes, attributes] = ...
+  odedefaults (n, trange(1), trange(end));
 
   classes    = odeset (classes, 'Vectorized', {});
   attributes = odeset (attributes, 'Jacobian', {}, 'Vectorized', {});
 
-  options = odemergeopts (options, defaults, classes, attributes, solver);
+  options = ...
+  odemergeopts ("ode15s", options, defaults,
+                classes, attributes, solver);
 
   ## Mass
 
   options.havemassfun    = false;
   options.havestatedep   = false;
   options.havetimedep    = false;
   options.havemasssparse = false;
 
