# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546403154 28800
#      Tue Jan 01 20:25:54 2019 -0800
# Branch stable
# Node ID 86b7dec68d09dfe0da7a76584283cdad70c0f773
# Parent  6ec8b2eab98746c385ee3bff4073ae799b0d0195
error.cc: Fix static analyzer detected issues (bug #55347).

* error.cc (handle_message): Check arg.isempty () first to avoid having to
check C string for validity.  Add comments about why temporary variable is
required during conversion of std::string to *char.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -967,46 +967,44 @@ typedef void (*error_fun)(const char *, 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
 
 static std::string
 handle_message (error_fun f, const char *id, const char *msg,
                 const octave_value_list& args, bool have_fmt)
 {
   std::string retval;
 
-  std::string tstr;
+  std::string tmpstr;
 
   if (args.length () > 0)
     {
       octave_value arg;
 
       if (have_fmt)
         {
           octave_value_list tmp = Fsprintf (args, 1);
           arg = tmp(0);
         }
       else
         arg = args(0);
 
       if (arg.is_defined ())
         {
-          if (arg.is_string ())
+          if (arg.isempty ())
+            return retval;
+          else if (arg.is_string ())
             {
-              tstr = arg.string_value ();
-              msg = tstr.c_str ();
-
-              if (! msg)
-                return retval;
+              tmpstr = arg.string_value ();  // 2-stage assignment required
+              msg = tmpstr.c_str ();         // in order to generate pointer  
+                                             // to valid memory.
             }
-          else if (arg.isempty ())
-            return retval;
         }
     }
 
-// Ugh.
+  // Ugh.
 
   size_t len = strlen (msg);
 
   if (len > 0)
     {
       if (msg[len - 1] == '\n')
         {
           if (len > 1)
