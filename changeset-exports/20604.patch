# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1444597741 -7200
#      Sun Oct 11 23:09:01 2015 +0200
# Node ID a260a6acb70f12a95a0f7e575ce724caa16cd14f
# Parent  d30fc2c11455090af938df4a0cee044e58bf2752
fix test failures introduced by a22d8a2eb0e5

* scripts/ode/private/integrate_adaptive.m: fix stepping backwards, fix
  invocation of OutputFcn, fix text of some error messages
* scripts/ode/private/integrate_const.m: remove use of option OutputSave
* scripts/ode/private/integrate_n_steps.m: remove use of option OutputSave

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -116,35 +116,34 @@ function solution = integrate_adaptive (
     ## Compute integration step from t_old to t_new = t_old + dt
     [t_new, options.comp] = kahan (t_old, options.comp, dt);
     [t_new, x_new, x_est, new_k_vals] = ...
     stepper (func, t_old, x_old, dt, options, k_vals, t_new);
 
     solution.vcntcycles++;
 
     if (options.vhavenonnegative)
-      x(nn,end) = abs (x(nn,end));
-      y(nn,end) = abs (y(nn,end));
-      y_est(nn,end) = abs (y_est(nn,end));
+      x_new(nn, end) = abs (x_new(nn, end)); 
+      x_est(nn, end) = abs (x_est(nn, end));
     endif
 
     err = AbsRel_Norm (x_new, x_old, options.AbsTol, options.RelTol,
                        options.vnormcontrol, x_est);
 
     ## Accepted solution only if err <= 1.0
     if (err <= 1)
 
       solution.vcntloop++;
       ireject = 0;
 
       ## if output time steps are fixed
       if (fixed_times)
 
-        t_caught = find ((tspan(iout:end) > t_old)
-                         & (tspan(iout:end) <= t_new));
+        t_caught = find ((dir * tspan(iout:end) > dir * t_old)
+                         & (dir * tspan(iout:end) <= dir * t_new));
         t_caught = t_caught + iout - 1;
 
         if (! isempty (t_caught))
           t(t_caught) = tspan(t_caught);
           iout = max (t_caught);
           x(:, t_caught) = ...
           ode_rk_interpolate (order, [t_old t_new], [x_old x_new],
                               tspan(t_caught), new_k_vals, dt,
@@ -179,23 +178,26 @@ function solution = integrate_adaptive (
           endif
 
           ## Call plot.  Stop integration if plot function
           ## returns true.
           if (options.vhaveoutputfunction)
             vcnt = options.Refine + 1;
             vapproxtime = linspace (t_old, t_new, vcnt);
             vapproxvals = interp1 ([t_old, t(t_caught), t_new],
-                                   [x_old, x(:, t_caught), x_new],
-                                   vapproxtime, 'linear');
+                                   [x_old, x(:, t_caught), x_new] .',
+                                   vapproxtime, 'linear') .';
             if (options.vhaveoutputselection)
-              vapproxvals = vapproxvals(options.OutputSel);
+              vapproxvals = vapproxvals(options.OutputSel, :);
             endif
-            vpltret = feval (options.OutputFcn, vapproxtime,
-                             vapproxvals, [], options.vfunarguments{:});
+            for ii = 1:numel (vapproxtime)
+              vpltret = feval (options.OutputFcn, vapproxtime(ii),
+                               vapproxvals(:, ii), [],
+                               options.vfunarguments{:});
+            endfor
             if (vpltret)  # Leave main loop
               solution.vunhandledtermination = false;
               break;
             endif
           endif
 
         endif
 
@@ -221,23 +223,25 @@ function solution = integrate_adaptive (
         endif
 
         ## Call plot.  Stop integration if plot function
         ## returns true.
         if (options.vhaveoutputfunction)
           vcnt = options.Refine + 1;
           vapproxtime = linspace (t_old, t_new, vcnt);
           vapproxvals = interp1 ([t_old, t_new],
-                                 [x_old, x_new],
-                                 vapproxtime, 'linear');
+                                 [x_old, x_new] .',
+                                 vapproxtime, 'linear') .';
           if (options.vhaveoutputselection)
-            vapproxvals = vapproxvals(options.OutputSel);
+            vapproxvals = vapproxvals(options.OutputSel, :);
           endif
-          vpltret = feval (options.OutputFcn, vapproxtime,
-                           vapproxvals, [], options.vfunarguments{:});
+          for ii = 1:numel (vapproxtime)
+            vpltret = feval (options.OutputFcn, vapproxtime(ii),
+                             vapproxvals(:, ii), [], options.vfunarguments{:});
+          endfor
           if (vpltret)  # Leave main loop
             solution.vunhandledtermination = false;
             break;
           endif
         endif
 
       endif
 
@@ -278,29 +282,30 @@ function solution = integrate_adaptive (
 
   endwhile
 
 
   ## Check if integration of the ode has been successful
   if (dir * t(end) < dir * tspan(end))
     if (solution.vunhandledtermination == true)
       error ("integrate_adaptive:unexpected_termination",
-             [" Solving has not been successful.  The iterative",
-              " integration loop exited at time t = %f",
-              " before endpoint at tend = %f was reached.  This may",
-              " happen if the stepsize grows too small. ",
-              " Try to reduce the value of 'InitialStep'",
+             [" Solving has not been successful.  The iterative", ...
+              " integration loop exited at time t = %f ", ...
+              " before endpoint at tend = %f was reached.  This may", ...
+              " happen if the stepsize grows too small. ", ...
+              " Try to reduce the value of 'InitialStep'", ...
               " and/or 'MaxStep' with the command 'odeset'.\n"],
              t(end), tspan(end));
     else
       warning ("integrate_adaptive:unexpected_termination",
-               ["Solver has been stopped by a call of 'break' in the main",
-                " iteration loop at time t = %f before endpoint at tend = %f ",
-                " was reached.  This may happen because the @odeplot function",
-                " returned 'true' or the @event function returned",
+               ["Solver has been stopped by a call of 'break' ", ...
+                " in the main iteration loop at time t = %f before", ...
+                " endpoint at tend = %f was reached.  This may", ...
+                " happen because the @odeplot function", ...
+                " returned 'true' or the @event function returned", ...
                 " 'true'.\n"],
                t(end), tspan(end));
     endif
   endif
 
   ## Set up return structure
   solution.t = t(:);
   solution.x = x.';
diff --git a/scripts/ode/private/integrate_const.m b/scripts/ode/private/integrate_const.m
--- a/scripts/ode/private/integrate_const.m
+++ b/scripts/ode/private/integrate_const.m
@@ -175,21 +175,20 @@ function solution = integrate_const (ste
         else
           ## else, stop the cycle and go on with the next iteration
           i = length (z)+1;
         endif
 
       endwhile
     endif
 
-    if (mod (solution.vcntloop-1, options.OutputSave) == 0)
-      x = [x,u(:,2:end)];
-      t = [t;z(2:end)];
-      solution.vcntsave = solution.vcntsave + 1;    
-    endif
+
+    x = [x,u(:,2:end)];
+    t = [t;z(2:end)];
+    solution.vcntsave = solution.vcntsave + 1;
     solution.vcntloop = solution.vcntloop + 1;
     vcntiter = 0;
       
     ## Call plot only if a valid result has been found, therefore this
     ## code fragment has moved here.  Stop integration if plot function
     ## returns false
     if (options.vhaveoutputfunction)
       for vcnt = 0:options.Refine  # Approximation between told and t
diff --git a/scripts/ode/private/integrate_n_steps.m b/scripts/ode/private/integrate_n_steps.m
--- a/scripts/ode/private/integrate_n_steps.m
+++ b/scripts/ode/private/integrate_n_steps.m
@@ -124,21 +124,19 @@ function solution = integrate_n_steps (s
     if (options.vhaveoutputfunction && options.vhaverefine)
       vSaveVUForRefine = u(:,end);
     endif
 
     ## values on this interval for time and solution
     z = [t(end);s];
     u = [x(:,end),y];
 
-    if (mod (solution.vcntloop-1, options.OutputSave) == 0)
-      x = [x,u(:,2:end)];
-      t = [t;z(2:end)];
-      solution.vcntsave = solution.vcntsave + 1;    
-    endif
+    x = [x,u(:,2:end)];
+    t = [t;z(2:end)];
+    solution.vcntsave = solution.vcntsave + 1;    
     solution.vcntloop = solution.vcntloop + 1;
     vcntiter = 0;
       
     ## Call plot only if a valid result has been found, therefore this code
     ## fragment has moved here.  Stop integration if plot function returns false
     if (options.vhaveoutputfunction)
       for vcnt = 0:options.Refine  # Approximation between told and t
         if (options.vhaverefine)  # Do interpolation
