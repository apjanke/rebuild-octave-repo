# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1413121789 -7200
#      Sun Oct 12 15:49:49 2014 +0200
# Branch gui-release
# Node ID d10c711a08d83ebd2647485c852fe2ae6d501a3a
# Parent  54943eb0ce3751b330ba5ad1b281a515c31e12d4
add a drop down menu with the eol mode in the save-file-as-dialog

* file-editor-tab.cc (save_file_as): add a combo box with the eol modes to
  the file dialog;
  (handle_combo_eol_current_index): new slot for changes in the combo box
  saving the current index in a class variable;
  (handle_save_file_as_answer, handle_save_file_as_answer_close): convert
  into the desired eol mode when it differs from the current one before saving
* file-editor-tab.h: new slot for changes of the current index in the combo
  box, new class variable for saving the current index

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1538,16 +1538,51 @@ file_editor_tab::save_file_as (bool remo
   else
     fileDialog = new QFileDialog (this);
 
   // Giving trouble under KDE (problem is related to Qt signal handling on unix,
   // see https://bugs.kde.org/show_bug.cgi?id=260719 ,
   // it had/has no effect on Windows, though)
   fileDialog->setOption(QFileDialog::DontUseNativeDialog, true);
 
+  // get the dialog's layout for adding extra elements
+  QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (fileDialog->layout ());
+  int rows = dialog_layout->rowCount ();
+
+  // define a new grid layout with the extra elements
+  QGridLayout *extra = new QGridLayout (fileDialog);
+  QSpacerItem *spacer = new QSpacerItem (1,1,QSizePolicy::Expanding,
+                                             QSizePolicy::Fixed);
+  QFrame *separator = new QFrame (fileDialog);
+  separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
+  separator->setFrameStyle (QFrame::Sunken);
+
+  // combo box for choosing new line ending chars
+  QLabel *label_eol = new QLabel (tr ("Line Endings:"));
+  QComboBox *combo_eol = new QComboBox ();
+  combo_eol->addItem ("Windows (CRLF)");  // ensure the same order as in
+  combo_eol->addItem ("Mac (CR)");        // the settings dialog
+  combo_eol->addItem ("Unix (LF)");
+  _save_as_desired_eol = _edit_area->eolMode ();      // init with current eol
+  combo_eol->setCurrentIndex (_save_as_desired_eol);
+
+  // track changes in the combo box
+  connect (combo_eol, SIGNAL (currentIndexChanged (int)),
+           this, SLOT (handle_combo_eol_current_index (int)));
+
+  // build the extra grid layout
+  extra->addWidget (separator,0,0,1,3);
+  extra->addWidget (label_eol,1,0);
+  extra->addWidget (combo_eol,1,1);
+  extra->addItem   (spacer,   1,2);
+
+  // and add the extra grid layout to the dialog's layout
+  dialog_layout->addLayout (extra,rows,0,1,dialog_layout->columnCount ());
+
+
   if (valid_file_name ())
     {
       fileDialog->selectFile (_file_name);
     }
   else
     {
       fileDialog->selectFile ("");
 
@@ -1583,16 +1618,22 @@ file_editor_tab::save_file_as (bool remo
     {
       connect (fileDialog, SIGNAL (fileSelected (const QString&)),
                this, SLOT (handle_save_file_as_answer (const QString&)));
     }
 
   show_dialog (fileDialog);
 }
 
+void
+file_editor_tab::handle_combo_eol_current_index (int index)
+{
+  _save_as_desired_eol = static_cast<QsciScintilla::EolMode> (index);
+}
+
 bool
 file_editor_tab::check_valid_identifier (QString file_name)
 {
   QFileInfo file = QFileInfo (file_name);
   QString base_name = file.baseName ();
 
   if ((file.suffix () == "m")
       && (! valid_identifier (base_name.toStdString ())))
@@ -1610,16 +1651,19 @@ file_editor_tab::check_valid_identifier 
     }
 
   return false;
 }
 
 void
 file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
 {
+  if (_save_as_desired_eol != _edit_area->eolMode ())
+    convert_eol (this,_save_as_desired_eol);
+
   if (saveFileName == _file_name)
     {
       // same name as actual file, save it as "save" would do
       save_file (saveFileName);
     }
   else
     {
       // Have editor check for conflict, do not delete tab after save.
@@ -1628,16 +1672,23 @@ file_editor_tab::handle_save_file_as_ans
       else
         emit editor_check_conflict_save (saveFileName, false);
     }
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_close (const QString& saveFileName)
 {
+  if (_save_as_desired_eol != _edit_area->eolMode ())
+    {
+      _edit_area->setReadOnly (false);  // was set to read-only in save_file_as
+      convert_eol (this,_save_as_desired_eol);
+      _edit_area->setReadOnly (true);   // restore read-only mode
+    }
+
   // saveFileName == _file_name can not happen, because we only can get here
   // when we close a tab and _file_name is not a valid file name yet
 
   // Have editor check for conflict, delete tab after save.
   if (check_valid_identifier (saveFileName))
     save_file_as (true);
   else
     emit editor_check_conflict_save (saveFileName, true);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #include <QWidget>
 #include <QCloseEvent>
 #include <QFileSystemWatcher>
 #include <QSettings>
 #include <QFileInfo>
 #include <Qsci/qsciapis.h>
 #include <QStatusBar>
 #include <QLabel>
+#include <QComboBox>
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
 #include "builtin-defun-decls.h"
 
 class file_editor;
 
 class file_editor_tab : public QWidget
@@ -156,16 +157,17 @@ private slots:
 
   // When user closes find_dialog box.
   void handle_find_dialog_finished (int decision);
 
   // When user closes QFileDialog box.
   void handle_save_file_as_answer (const QString& fileName);
   void handle_save_file_as_answer_close (const QString& fileName);
   void handle_save_file_as_answer_cancel ();
+  void handle_combo_eol_current_index (int index);
 
   // When apis preparation has finished and is ready to save
   void save_apis_info ();
 
   // When the numer of lines changes -> adapt width of margin
   void auto_margin_width ();
 
   void handle_cursor_moved (int line, int col);
@@ -217,16 +219,18 @@ private:
 
   octave_qscintilla *_edit_area;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
   QLabel *_eol_indicator;
 
+  QsciScintilla::EolMode _save_as_desired_eol;
+
   QString _file_name;
   QString _file_name_short;
 
   bool _long_title;
   bool _copy_available;
   bool _app_closing;
   bool _is_octave_file;
   bool _modal_dialog;
