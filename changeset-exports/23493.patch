# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1494860337 -3600
#      Mon May 15 15:58:57 2017 +0100
# Node ID bf063fafeca506428d904e2a3213717e20d188c2
# Parent  cc5e92e3182be4a65200b00582a5ef27755b214e
accumarray.m: check if func is a function handle

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -149,16 +149,22 @@ function A = accumarray (subs, vals, sz 
 
   else
     ndims = columns (subs);
     if (lenvals > 1 && lenvals != rows (subs))
       error ("accumarray: dimension mismatch");
     endif
   endif
 
+  if (isempty (func))
+    func = @sum;
+  elseif (! is_function_handle (func))
+    error ("accumarray: FUNC must be a function handle");
+  endif
+
   if (isempty (fillval))
     fillval = 0;
   endif
 
   if (isempty (issparse))
     issparse = false;
   endif
 
@@ -184,17 +190,17 @@ function A = accumarray (subs, vals, sz 
     endif
 
     if (isnumeric (vals) || islogical (vals))
       vals = double (vals);
     else
       error ("accumarray: in the sparse case, values must be numeric or logical");
     endif
 
-    if (! (isempty (func) || func == @sum))
+    if (func != @sum)
 
       ## Reduce values.  This is not needed if we're about to sum them,
       ## because "sparse" can do that.
 
       ## Sort indices.
       [subs, idx] = sortrows (subs);
       n = rows (subs);
       ## Identify runs.
@@ -247,17 +253,17 @@ function A = accumarray (subs, vals, sz 
       error ("accumarray: needs at least 2 dimensions");
     elseif (! isindex (subs)) # creates index cache
       error ("accumarray: indices must be positive integers");
     endif
 
 
     ## Some built-in reductions handled efficiently.
 
-    if (isempty (func) || func == @sum)
+    if (func == @sum)
       ## Fast summation.
       if (isempty (sz))
         A = __accumarray_sum__ (subs, vals);
       else
         A = __accumarray_sum__ (subs, vals, prod (sz));
         ## set proper shape.
         A = reshape (A, sz);
       endif
@@ -441,8 +447,11 @@ endfunction
 %!   assert (accumarray (zeros (0, 1), [], [0 1] , funcs{idx}), zeros (0, 1));
 %!   assert (accumarray (zeros (0, 1), [], [1 0] , funcs{idx}), zeros (1, 0));
 %!   assert (accumarray (zeros (0, 1), [], [] , funcs{idx}), zeros (0, 1));
 %! endfor
 
 ## Matlab returns an array of doubles even though FUNC returns cells.  In
 ## Octave, we do not have that bug, at least for this case.
 %!assert (accumarray (zeros (0, 1), [], [0 1] , @(x) {x}), cell (0, 1))
+
+%!error <FUNC must be a function handle>
+%! accumarray ([1; 2; 3], [1; 2; 3], [3 1], '@(x) {x}')
diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -38,18 +38,18 @@
 ## Adapted-By: jwe
 
 function [I, map] = gray2ind (I, n = 64)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (! isreal (I) || issparse (I) || ! ismatrix(I))
     error ("gray2ind: I must be a grayscale or binary image");
-  elseif (! isscalar (n) || n < 1 || n > 65536)
-    error ("gray2ind: N must be a positive integer in the range [1, 65536]");
+  elseif (! isscalar (n) || n < 1 )
+    error ("gray2ind: N must be a positive integer");
   endif
 
   ## default n is different if image is logical
   if (nargin == 1 && islogical (I))
     n = 2;
   endif
 
   cls = class (I);
@@ -71,18 +71,24 @@ function [I, map] = gray2ind (I, n = 64)
     scale = 1;
   endif
   I *= (n-1)/scale;
 
   ## Note: no separate call to round () necessary because
   ##       type conversion does that automatically.
   if (n <= 256)
     I = uint8 (I);
+  elseif (n <= 65536)
+    I = uint16 (I);
+  elseif (n <= 4294967296)
+    I = uint32 (I);
+  elseif (n <= intmax ("uint64"))
+    I = uint64 (I);
   else
-    I = uint16 (I);
+    error ("gray2ind: N is larger than uint64 max value");
   endif
 
 endfunction
 
 
 %!assert (gray2ind ([0 0.25 0.5 1]), uint8 ([0 16 32 63]))
 %!assert (gray2ind ([0 0.25 0.5 1], 400), uint16 ([0 100 200 399]))
 %!assert (gray2ind (logical ([1 0 0 1])), uint8 ([1 0 0 1]))
@@ -96,16 +102,17 @@ endfunction
 %!assert (gray2ind ([0 0.25 0.5 1], 256), uint8 ([0 64 128 255]))
 %!assert (gray2ind ([0 (1/511) (1/510) 1-(1/509) 1-(1/510) 1], 256),
 %!        uint8 ([0 0 1 254 255 255]))
 
 %!test
 %! assert (class (gray2ind ([0.0 0.5 1.0], 255)), "uint8");
 %! assert (class (gray2ind ([0.0 0.5 1.0], 256)), "uint8");
 %! assert (class (gray2ind ([0.0 0.5 1.0], 257)), "uint16");
+%! assert (class (gray2ind ([0.0 0.5 1.0], 655537)), "uint32")
 
 ## Test input validation
 %!error gray2ind ()
 %!error gray2ind (1,2,3)
 %!error <I must be a grayscale or binary image> gray2ind ({1})
 %!error <I must be a grayscale or binary image> gray2ind ([1+i])
 %!error <I must be a grayscale or binary image> gray2ind (sparse ([1]))
 %!error <I must be a grayscale or binary image> gray2ind (ones (2,2,3))
