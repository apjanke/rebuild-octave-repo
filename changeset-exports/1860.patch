# HG changeset patch
# User jwe
# Date 823428390 0
#      Sun Feb 04 10:06:30 1996 +0000
# Node ID 821870c30840022f7edb01afde4c19ebae4d6e40
# Parent  43248236fcd90f6d2cb0d07c7475309a049e3728
[project @ 1996-02-04 10:04:58 by jwe]

diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -29,19 +29,20 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifndef QPSOL_MISSING
 
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "QP.h"
 
-class QPSOL_options
+class
+QPSOL_options
 {
- public:
+public:
 
   QPSOL_options (void);
   QPSOL_options (const QPSOL_options& opt);
 
   QPSOL_options& operator = (const QPSOL_options& opt);
 
   ~QPSOL_options (void);
 
@@ -55,27 +56,28 @@ class QPSOL_options
   void set_iteration_limit (int);
   void set_print_level (int);
 
   double feasibility_tolerance (void);
   double infinite_bound (void);
   int iteration_limit (void);
   int print_level (void);
 
- private:
+private:
 
   double x_feasibility_tolerance;
   double x_infinite_bound;
   int x_iteration_limit;
   int x_print_level;
 };
 
-class QPSOL : public QP, public QPSOL_options
+class
+QPSOL : public QP, public QPSOL_options
 {
- public:
+public:
 
   QPSOL (void)
     : QP (), QPSOL_options () { }
 
   QPSOL (const ColumnVector& x, const Matrix& H)
     : QP (x, H), QPSOL_options () { }
 
   QPSOL (const ColumnVector& x, const Matrix& H, const ColumnVector& c)
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -1,12 +1,12 @@
 // Range.h                                               -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -27,50 +27,35 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class istream;
 class ostream;
 class Matrix;
 
-class Range
+class
+Range
 {
  public:
+
   Range (void)
-    {
-      rng_base = -1;
-      rng_limit = -1;
-      rng_inc = -1;
-      rng_nelem = -1;
-    }
+    : rng_base (-1), rng_limit (-1), rng_inc (-1), rng_nelem (-1) { }
 
   Range (const Range& r)
-    {
-      rng_base = r.rng_base;
-      rng_limit = r.rng_limit;
-      rng_inc = r.rng_inc;
-      rng_nelem = r.rng_nelem;
-    }
+    : rng_base (r.rng_base), rng_limit (r.rng_limit), rng_inc (r.rng_inc),
+      rng_nelem (r.rng_nelem) { }
 
   Range (double b, double l)
-    {
-      rng_base = b;
-      rng_limit = l;
-      rng_inc = 1;
-      rng_nelem = nelem_internal ();
-    }
+    : rng_base (b), rng_limit (l), rng_inc (1),
+      rng_nelem (nelem_internal ()) { }
 
   Range (double b, double l, double i)
-    {
-      rng_base = b;
-      rng_limit = l;
-      rng_inc = i;
-      rng_nelem = nelem_internal ();
-    }
+    : rng_base (b), rng_limit (l), rng_inc (i),
+      rng_nelem (nelem_internal ()) { }
 
   double base (void) const { return rng_base;  }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc;   }
   int nelem (void) const { return rng_nelem; }
 
   Matrix matrix_value (void) const;
 
@@ -85,19 +70,21 @@ class Range
 
 
   friend ostream& operator << (ostream& os, const Range& r);
   friend istream& operator >> (istream& is, Range& r);
 
   void print_range (void);
 
  private:
+
   double rng_base;
   double rng_limit;
   double rng_inc;
+
   int rng_nelem;
 
   int nelem_internal (void) const;
 };
 
 #endif
 
 /*
