# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355522299 28800
#      Fri Dec 14 13:58:19 2012 -0800
# Node ID 12394261da0fbd81a404c684644f419c8ba8f470
# Parent  49f5962fa20d1aaca4f936395daa0bc2ac330e72
doc: tweak docstrings for javaObject and javaArray.

* libinterp/octave-value/ov-java.cc: Improve docstring.  Add seealso to javaArray.

* scripts/java/javaArray.m: Improve docstring.  Add seealso to javaObject.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1870,32 +1870,32 @@ octave_java::do_java_set (JNIEnv* jni_en
 #endif
 // endif on HAVE_JAVA
 //
 // DEFUN blocks below must be outside of HAVE_JAVA block so that
 // documentation strings are always available, even when functions are not.
 
 DEFUN (javaObject, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{obj} =} javaObject (@var{classname})\n\
-@deftypefnx {Built-in Function} {@var{obj} =} javaObject (@var{classname}, @var{arg1}, @dots{})\n\
+@deftypefn  {Built-in Function} {@var{jobj} =} javaObject (@var{classname})\n\
+@deftypefnx {Built-in Function} {@var{jobj} =} javaObject (@var{classname}, @var{arg1}, @dots{})\n\
 Create a Java object of class @var{classsname}, by calling the class\n\
 constructor with the arguments @var{arg1}, @dots{}\n\
 \n\
-The first example creates an uninitialized object, \\n\
-while the second example supplies an initializer argument.\n\
+The first example creates an uninitialized object,\n\
+while the second example supplies an initial argument to the constructor.\n\
 \n\
 @example\n\
 @group\n\
-  x = javaObject (\"java.lang.StringBuffer\")\n\
-  x = javaObject (\"java.lang.StringBuffer\", \"Initial string\")\n\
+x = javaObject (\"java.lang.StringBuffer\")\n\
+x = javaObject (\"java.lang.StringBuffer\", \"Initial string\")\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{javaMethod}\n\
+@seealso{javaMethod, javaArray}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
   initialize_java ();
 
   if (! error_state)
@@ -1908,17 +1908,17 @@ while the second example supplies an ini
           if (! error_state)
             {
               octave_value_list tmp;
               for (int i=1; i<args.length (); i++)
                 tmp(i-1) = args(i);
               retval = octave_java::do_javaObject (current_env, classname, tmp);
             }
           else
-            error ("javaObject: CLASSNAME argument must be a string");
+            error ("javaObject: CLASSNAME must be a string");
         }
       else
         print_usage ();
     }
 
   return retval;
 #else
   error ("javaObject: Octave was not compiled with Java interface");
diff --git a/scripts/java/javaArray.m b/scripts/java/javaArray.m
--- a/scripts/java/javaArray.m
+++ b/scripts/java/javaArray.m
@@ -12,35 +12,36 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{a} =} javaArray (@var{classname}, @var{sz})
-## @deftypefnx {Function File} {@var{a} =} javaArray (@var{classname}, @var{m}, @var{n}, @dots{})
+## @deftypefn  {Function File} {@var{jary} =} javaArray (@var{classname}, @var{sz})
+## @deftypefnx {Function File} {@var{jary} =} javaArray (@var{classname}, @var{m}, @var{n}, @dots{})
 ##
 ## Create a Java array of size @var{sz} with elements of class
 ## @var{classname}.  @var{classname} may be a Java object representing a class
 ## or a string containing the fully qualified class name.  The size of
 ## the object may also be specified with individual integer arguments
 ## @var{m}, @var{n}, etc.
 ##
 ## The generated array is uninitialized.  All elements are set to null
 ## if @var{classname} is a reference type, or to a default value (usually 0)
 ## if @var{classname} is a primitive type.
 ##
 ## @example
 ## @group
-## a = javaArray ("java.lang.String", 2, 2);
-## a(1,1) = "Hello";
+## jary = javaArray ("java.lang.String", 2, 2);
+## jary(1,1) = "Hello";
 ## @end group
 ## @end example
+## @seealso{javaObject}
 ## @end deftypefn
 
 function retval = javaArray (classname, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
