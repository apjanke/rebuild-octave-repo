# HG changeset patch
# User jwe
# Date 1074794368 0
#      Thu Jan 22 17:59:28 2004 +0000
# Node ID e5639a6586c41814fdc64191044cbc2a83209e7a
# Parent  8d4bb887f381c965a918ee9d1717290efcad3cd3
[project @ 2004-01-22 17:59:28 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -843,16 +843,24 @@ Array<T>::resize_and_fill (const dim_vec
   int old_len = length ();
 
   int len = get_size (dv);
   
   rep = new typename Array<T>::ArrayRep (len);
 
   dim_vector dv_old = dimensions;
   
+  if (n > dv_old.length ())
+    {
+      dv_old.resize (n);
+  
+      for (int i = dv_old.length (); i < n; i++)
+	dv_old.elem (i) = 1;
+    }
+
   dimensions = dv;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
   // XXX FIXME XXX -- it is much simpler to fill the whole array
   // first, but probably slower for large arrays, or if the assignment
   // operator for the type T is expensive.  OTOH, the logic for
   // deciding whether an element needs the copied value or the filled
@@ -2234,32 +2242,32 @@ assign2 (Array<LT>& lhs, const Array<RT>
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.cols ();
   
   if (rhs.length () > 2)
     {
       dim_vector dv_tmp = rhs.squeeze().dims ();
   
-      if (dv_tmp.length () > 2)
+      switch (dv_tmp.length ())
 	{
-	  (*current_liboctave_error_handler)
-	    ("Dimension mismatch");
-
-	  return 0;
-	}
-      
-      if (dv_tmp.length () == 1)
-	if (rhs_nr == 1)
-	  rhs_nc = dv_tmp.elem (0);
-
-      else if (dv_tmp.length () == 2)
-	{
+	case 1:
+	  if (rhs_nr == 1)
+	    rhs_nc = dv_tmp.elem (0);
+	  break;
+	  
+	case 2:
 	  rhs_nr = dv_tmp.elem (0);
 	  rhs_nc = dv_tmp.elem (1);
+	  break;
+
+	default:
+	  (*current_liboctave_error_handler)
+	    ("Array<T>::assign2: Dimension mismatch");
+	  return 0;	  
 	}
     }
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx_i;
   idx_vector idx_j;
 
