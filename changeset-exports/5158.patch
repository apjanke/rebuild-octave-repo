# HG changeset patch
# User jwe
# Date 1109119257 0
#      Wed Feb 23 00:40:57 2005 +0000
# Node ID 955ed0dcdc5fc4c0150159b7436245ed85838c81
# Parent  8ca032643f554541dbe9d1bd2efed1f18b6e3961
[project @ 2005-02-23 00:40:57 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2005-02-22  John W. Eaton  <jwe@octave.org>
+
+	* polynomial/residue.m: Force prepad to always create row vectors.
+
+	* polynomial/poly.m: Quick return if m is 0.
+	From Carmen Navarrete <carmen.navarrete@uam.es>.
+
 2005-02-21  David Bateman  <dbateman@free.fr>
 
 	* statistics/distributions/poisson_rnd.m: fix for lambda of zero.
 	From Mark van Rossum <mvanross@inf.ed.ac.uk>.
 	Fix for row vectors with at least one element of lambda not in
 	(0, Inf).
 
 2005-02-21  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -35,16 +35,17 @@ function y = poly (x)
   if (nargin != 1)
     usage ("poly (x)");
   endif
 
   m = min (size (x));
   n = max (size (x));
   if (m == 0)
     y = 1;
+    return;
   elseif (m == 1)
     v = x;
   elseif (m == n)
     v = eig (x);
   else
     usage ("poly (x), where x is a vector or a square matrix");
   endif
 
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -289,29 +289,29 @@ function [r, p, k, e] = residue (b, a, t
     for ind = 1:M(dpi)
       if (mpi > 1 && (mpi+ind) <= lp)
         cp = [p(1:mpi-1); p(mpi+ind:lp)];
       elseif (mpi == 1)
         cp = p (mpi+ind:lp);
       else
         cp = p (1:mpi-1);
       endif
-      rhs (1, rhi:rhi+lp-1) = prepad (poly (cp), lp);
+      rhs (1, rhi:rhi+lp-1) = prepad (poly (cp), lp, 0, 2);
       rhi = rhi + lp;
     endfor
     mpi = mpi + M (dpi);
     dpi++;
   endwhile
   if (MM > 1)
     for index = 2:MM
-      lhs (index, :) = prepad (polyderiv (lhs (index-1, :)), lb);
+      lhs (index, :) = prepad (polyderiv (lhs (index-1, :)), lb, 0, 2);
       ind = 1;
       for rhi = 1:lp
         cp = rhs (index-1, ind:ind+lp-1);
-        rhs (index, ind:ind+lp-1) = prepad (polyderiv (cp), lp);
+        rhs (index, ind:ind+lp-1) = prepad (polyderiv (cp), lp, 0, 2);
         ind = ind + lp;
       endfor
     endfor
   endif
 
   ## Now lhs contains the numerator polynomial and as many derivatives as
   ## are required.  rhs is a matrix of polynomials, the first row
   ## contains the corresponding polynomial for each residue and
