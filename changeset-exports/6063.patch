# HG changeset patch
# User jwe
# Date 1161221255 0
#      Thu Oct 19 01:27:35 2006 +0000
# Node ID 8010902404b9715417f686e6be3781e28b096368
# Parent  a813714cb04b9f0c9c4beb96e7bdbf2f93d67e1f
[project @ 2006-10-19 01:27:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-10-18  John W. Eaton  <jwe@octave.org>
 
+	* dynamic-ld.cc (octave_shlib_list::remove,
+	octave_shlib_list::do_remove, octave_mex_file_list::remove,
+	octave_mex_file_list::do_remove): New arg, cl_hook.
+	(octave_shlib_list::do_remove): Pass cl_hook to octave_shlib close
+	function.
+	(octave_dynamic_loader::do_load_oct): Don't call close on shl
+	directly.  Pass do_clear_function to octave_shlib_list::remove.  
+
 	* mex.cc (mexUnlock): Don't warn if unlocking a function that is
 	not locked.
 
 	* pt-fcn-handle.cc (tree_anon_fcn_handle::dup):
 	Correctly duplicate symbol table info.
 
 2006-10-17  Michael Goffioul  <michael.goffioul@swing.be>
 
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -44,30 +44,30 @@ 02110-1301, USA.
 
 class
 octave_shlib_list
 {
 public:
 
   static void append (const octave_shlib& shl);
 
-  static void remove (octave_shlib& shl);
+  static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   static void *search (const std::string& fcn_name, octave_shlib& shl,
 		       octave_shlib::name_mangler mangler = 0);
 
 private:
 
   octave_shlib_list (void) { }
 
   ~octave_shlib_list (void) { }
 
   void do_append (const octave_shlib& shl);
 
-  void do_remove (octave_shlib& shl);
+  void do_remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   void *do_search (const std::string& fcn_name, octave_shlib& shl,
 		   octave_shlib::name_mangler mangler = 0);
 
   static octave_shlib_list *instance;
 
   static bool instance_ok (void);
 
@@ -85,26 +85,26 @@ octave_shlib_list *octave_shlib_list::in
 
 void
 octave_shlib_list::do_append (const octave_shlib& shl)
 {
   lib_list.push_back (shl);
 }
 
 void
-octave_shlib_list::do_remove (octave_shlib& shl)
+octave_shlib_list::do_remove (octave_shlib& shl,
+			      octave_shlib::close_hook cl_hook)
 {
-  
   for (std::list<octave_shlib>::iterator p = lib_list.begin ();
        p != lib_list.end ();
        p++)
     {
       if (*p == shl)
 	{
-	  shl.close ();
+	  shl.close (cl_hook);
 
 	  lib_list.erase (p);
 
 	  break;
 	}
     }
 }
 
@@ -154,47 +154,48 @@ octave_shlib_list::instance_ok (void)
 void
 octave_shlib_list::append (const octave_shlib& shl)
 {
   if (instance_ok ())
     instance->do_append (shl);
 }
 
 void
-octave_shlib_list::remove (octave_shlib& shl)
+octave_shlib_list::remove (octave_shlib& shl,
+			   octave_shlib::close_hook cl_hook)
 {
   if (instance_ok ())
-    instance->do_remove (shl);
+    instance->do_remove (shl, cl_hook);
 }
 
 void *
 octave_shlib_list::search (const std::string& fcn_name, octave_shlib& shl,
 			   octave_shlib::name_mangler mangler)
 {
   return (instance_ok ()) ? instance->do_search (fcn_name, shl, mangler) : 0;
 }
 
 class
 octave_mex_file_list
 {
 public:
 
   static void append (const octave_shlib& shl);
 
-  static void remove (octave_shlib& shl);
+  static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
 private:
 
   octave_mex_file_list (void) { }
 
   ~octave_mex_file_list (void) { }
 
   void do_append (const octave_shlib& shl);
 
-  void do_remove (octave_shlib& shl);
+  void do_remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   static octave_mex_file_list *instance;
 
   static bool instance_ok (void);
 
   // List of libraries we have loaded.
   std::list<octave_shlib> file_list;
 
@@ -209,26 +210,27 @@ octave_mex_file_list *octave_mex_file_li
 
 void
 octave_mex_file_list::do_append (const octave_shlib& shl)
 {
   file_list.push_back (shl);
 }
 
 void
-octave_mex_file_list::do_remove (octave_shlib& shl)
+octave_mex_file_list::do_remove (octave_shlib& shl,
+				 octave_shlib::close_hook cl_hook)
 {
   
   for (std::list<octave_shlib>::iterator p = file_list.begin ();
        p != file_list.end ();
        p++)
     {
       if (*p == shl)
 	{
-	  shl.close ();
+	  shl.close (cl_hook);
 
 	  file_list.erase (p);
 
 	  break;
 	}
     }
 }
 
@@ -253,20 +255,21 @@ octave_mex_file_list::instance_ok (void)
 void
 octave_mex_file_list::append (const octave_shlib& shl)
 {
   if (instance_ok ())
     instance->do_append (shl);
 }
 
 void
-octave_mex_file_list::remove (octave_shlib& shl)
+octave_mex_file_list::remove (octave_shlib& shl,
+			      octave_shlib::close_hook cl_hook)
 {
   if (instance_ok ())
-    instance->do_remove (shl);
+    instance->do_remove (shl, cl_hook);
 }
 
 octave_dynamic_loader *octave_dynamic_loader::instance = 0;
 
 bool octave_dynamic_loader::doing_load = false;
 
 bool
 octave_dynamic_loader::instance_ok (void)
@@ -322,17 +325,17 @@ octave_dynamic_loader::do_load_oct (cons
 	{
 	  int n = oct_file.number_of_functions_loaded ();
 
 	  if (n > 0)
 	    warning_with_id ("Octave:reload-forces-clear",
 			     "reloading %s clears the following functions:",
 			     oct_file.file_name().c_str ());
 
-	  oct_file.close (do_clear_function);
+	  octave_shlib_list::remove (oct_file, do_clear_function);
 
 	  function = 0;
 	}
 
       if (! function)
 	{
 	  std::string oct_file_name
 	    = file_name.empty () ? oct_file_in_path (fcn_name) : file_name;
