# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237289924 -3600
#      Tue Mar 17 12:38:44 2009 +0100
# Node ID 315828058e0d605ff2ea77af477db000039c8a55
# Parent  542015fada9e87c149d9d3e7a8a6dcc5719f48fc
minor doc fixes in fsolve

diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -84,16 +84,17 @@
 ## not always. If the savings by reusing intermediate results from residual
 ## calculation in jacobian calculation are significant, the best strategy is to
 ## employ OutputFcn: After a vector is evaluated for residuals, if OutputFcn is
 ## called with that vector, then the intermediate results should be saved for
 ## future jacobian evaluation, and should be kept until a jacobian evaluation
 ## is requested or until outputfcn is called with a different vector, in which
 ## case they should be dropped in favor of this most recent vector. A short
 ## example how this can be achieved follows:
+##
 ## @example
 ## function [fvec, fjac] = my_optim_func (x, optimvalues, state)
 ## persistent sav = [], sav0 = [];
 ## if (nargin == 1)
 ##   ## evaluation call
 ##   if (nargout == 1)
 ##     sav0.x = x; # mark saved vector
 ##     ## calculate fvec, save results to sav0.
@@ -106,17 +107,17 @@
 ##     sav = sav0;
 ##   endif
 ##   ## maybe output iteration status etc.
 ## endif
 ## endfunction
 ##
 ## ## ....
 ## 
-## fsolve (@my_optim_func, x0, optimset ("OutputFcn", @my_optim_func, @dots{}))
+## fsolve (@@my_optim_func, x0, optimset ("OutputFcn", @@my_optim_func, @dots{}))
 ## @end example
 ###
 ## @end deftypefn
 
 ## PKG_ADD: __all_opts__ ("fsolve");
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
