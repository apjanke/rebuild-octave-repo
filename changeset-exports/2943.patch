# HG changeset patch
# User jwe
# Date 863059041 0
#      Thu May 08 02:37:21 1997 +0000
# Node ID e6dfc3ea62990374242d228a74c2143a9ec9c75c
# Parent  026f342c2019a267327a93d2ebbc4e5748c8195e
[project @ 1997-05-08 02:31:59 by jwe]

diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -22,21 +22,20 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-class string_vector;
-
 #include <string>
 
 #include "Array.h"
+#include "str-vec.h"
 
 #include "ov.h"
 
 class
 octave_value_list
 {
 public:
 
@@ -124,20 +123,28 @@ public:
   octave_value_list& append (const octave_value_list& lst);
 
   octave_value_list& reverse (void);
 
   bool all_strings_p (void) const;
 
   string_vector make_argv (const string&) const;
 
+  void stash_name_tags (const string_vector& nm) { names = nm; }
+
+  string_vector name_tags (void) const { return names; }
+
 private:
 
   Array<octave_value> data;
 
+  // This list of strings can be used to tag each element of data with
+  // a name.  By default, it is empty.
+  string_vector names;
+
   // This constructor is private with no definition to keep statements
   // like
   //
   //   octave_value_list foo = 5;
   //   octave_value_list foo = 5.0;
   //
   // from doing different things.  Instead, you have to use the
   // constructor
diff --git a/src/oct-usr-fcn.cc b/src/oct-usr-fcn.cc
--- a/src/oct-usr-fcn.cc
+++ b/src/oct-usr-fcn.cc
@@ -23,16 +23,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "str-vec.h"
+
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-usr-fcn.h"
 #include "ov.h"
@@ -68,19 +70,20 @@ extern int returning;
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
   : octave_function (string (), string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     sym_tab (st), file_name (), fcn_name (), t_parsed (0),
     system_fcn_file (false), call_depth (0), num_named_args (0),
     args_passed (), num_args_passed (0), curr_va_arg_number (0),
-    vr_list (0), symtab_entry (0), nargin_sr (0), nargout_sr (0)
+    vr_list (0), symtab_entry (0), argn_sr (0), nargin_sr (0),
+    nargout_sr (0)
 {
-  install_nargin_and_nargout ();
+  install_automatic_vars ();
 
   if (param_list)
     {
       num_named_args = param_list->length ();
       curr_va_arg_number = num_named_args;
     }
 }
 
@@ -297,16 +300,18 @@ octave_user_function::eval (int nargout,
   unwind_protect_ptr (curr_function);
   curr_function = this;
 
   // XXX FIXME XXX -- ???
   // unwind_protect_ptr (args_passed);
 
   args_passed = args;
 
+  string_vector arg_names = args.name_tags ();
+
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
   unwind_protect_int (num_named_args);
   unwind_protect_int (curr_va_arg_number);
 
   if (param_list && ! param_list->varargs_only ())
     {
@@ -323,17 +328,17 @@ octave_user_function::eval (int nargout,
 	ret_list->initialize_undefined_elements (tmp);
     }
 
   // The following code is in a separate scope to avoid warnings from
   // G++ about `goto abort' crossing the initialization of some
   // variables.
 
   {
-    bind_nargin_and_nargout (nargin, nargout);
+    bind_automatic_vars (arg_names, nargin, nargout);
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
@@ -409,25 +414,30 @@ void
 octave_user_function::print_code_function_trailer (void)
 {
   tree_print_code tpc (octave_stdout, Vps4);
 
   tpc.visit_octave_user_function_trailer (*this);
 }
 
 void
-octave_user_function::install_nargin_and_nargout (void)
+octave_user_function::install_automatic_vars (void)
 {
+  argn_sr = sym_tab->lookup ("argn", true);
   nargin_sr = sym_tab->lookup ("nargin", true);
   nargout_sr = sym_tab->lookup ("nargout", true);
 }
 
 void
-octave_user_function::bind_nargin_and_nargout (int nargin, int nargout)
+octave_user_function::bind_automatic_vars
+  (const string_vector& arg_names, int nargin, int nargout)
 {
+  if (! arg_names.empty ())
+    argn_sr->define (arg_names);
+
   nargin_sr->define (static_cast<double> (nargin));
   nargout_sr->define (static_cast<double> (nargout));
 }
 
 DEFUN (va_arg, args, ,
   "va_arg (): return next argument in a function that takes a\n\
 variable number of parameters")
 {
diff --git a/src/oct-usr-fcn.h b/src/oct-usr-fcn.h
--- a/src/oct-usr-fcn.h
+++ b/src/oct-usr-fcn.h
@@ -29,16 +29,18 @@ Software Foundation, 59 Temple Place - S
 
 #include <ctime>
 
 #include <string>
 
 #include "oct-fcn.h"
 #include "oct-obj.h"
 
+class string_vector;
+
 class octave_value;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 class tree_walker;
 class symbol_table;
 class symbol_record;
 
@@ -106,17 +108,16 @@ public:
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
 
   void accept (tree_walker& tw);
 
-
 private:
 
   octave_user_function (void);
 
   octave_user_function (const octave_user_function& m);
 
   // List of arguments for this function.  These are local variables.
   tree_parameter_list *param_list;
@@ -162,29 +163,33 @@ private:
 
   // The list of return values when an unspecified number can be
   // returned.
   tree_va_return_list *vr_list;
 
   // The symbol record for this function.
   symbol_record *symtab_entry;
 
+  // The symbol record for argn in the local symbol table.
+  symbol_record *argn_sr;
+
   // The symbol record for nargin in the local symbol table.
   symbol_record *nargin_sr;
 
   // The symbol record for nargout in the local symbol table.
   symbol_record *nargout_sr;
 
   void print_code_function_header (void);
 
   void print_code_function_trailer (void);
 
-  void install_nargin_and_nargout (void);
+  void install_automatic_vars (void);
 
-  void bind_nargin_and_nargout (int nargin, int nargout);
+  void bind_automatic_vars (const string_vector& arg_names, int nargin,
+			    int nargout);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include <string>
 
+class octave_value;
+class octave_value_list;
 class octave_symbol;
 class octave_function;
 class symbol_record;
 
 class tree_walker;
 
 #include "pt-mvr-base.h"
 
@@ -91,18 +93,18 @@ public:
 
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void)
     { maybe_do_ans_assign = true; }
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout,
-			  const octave_value_list& args); 
+  octave_value_list
+  eval (bool print, int nargout, const octave_value_list& args);
 
   void eval_undefined_error (void);
 
   void accept (tree_walker& tw);
 
   octave_value value (void) const;
 
   octave_value& reference (void);
