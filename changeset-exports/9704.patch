# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254940493 14400
#      Wed Oct 07 14:34:53 2009 -0400
# Node ID bb413c0d0d6d0f8e072a6a3ddeb276d75a31ff3c
# Parent  9a5598cf899deafe90bd804e01cfc8eb7efbadfe
whos: kluge fix to get size right for objects

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-10-07  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (get_dims_str): New function.
+	(symbol_info_list::display_line,
+	symbol_info_list::parse_whos_line_format): Use it to get dims string.
+
 2009-10-07  John W. Eaton  <jwe@octave.org>
 
 	* ov.h (octave_value::get_count): Return octave_idx_type, not int.
 
 2009-10-07  John W. Eaton  <jwe@octave.org>
 
 	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector):
 	Avoid uninitialized variable warning.
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -878,16 +878,36 @@ print_descriptor (std::ostream& os, std:
 	  param_buf << param.line;
 	  i++;
 	}
     }
 
   os << param_buf.str ();
 }
 
+// FIXME -- This is a bit of a kluge.  We'd like to just use val.dims()
+// and if val is an object, expect that dims will call size if it is
+// overloaded by a user-defined method.  But there are currently some
+// unresolved const issues that prevent that solution from working.
+
+std::string
+get_dims_str (const octave_value& val)
+{
+  octave_value tmp = val;
+
+  Matrix sz = tmp.size ();
+
+  dim_vector dv (sz.numel ());
+
+  for (octave_idx_type i = 0; i < dv.length (); i++)
+    dv(i) = sz(i);
+
+  return dv.str ();
+}
+
 class
 symbol_info_list
 {
 private:
   struct symbol_info
   {
     symbol_info (const symbol_table::symbol_record& sr,
 		 const std::string& expr_str = std::string (),
@@ -898,18 +918,17 @@ private:
 	is_global (sr.is_global ()),
 	is_persistent (sr.is_persistent ()),
 	varval (expr_val.is_undefined () ? sr.varval () : expr_val)
     { }
 
     void display_line (std::ostream& os,
 		       const std::list<whos_parameter>& params) const
     {
-      dim_vector dims = varval.dims ();
-      std::string dims_str = dims.str ();
+      std::string dims_str = get_dims_str (varval);
 
       std::list<whos_parameter>::const_iterator i = params.begin ();
 
       while (i != params.end ())
 	{
 	  whos_parameter param = *i;
 
 	  if (param.command != '\0')
@@ -1295,18 +1314,17 @@ public:
 		int rest = 0;
 		int first = param.first_parameter_length;
 		int total = param.parameter_length;
 
 		for (std::list<symbol_info>::const_iterator p = lst.begin ();
 		     p != lst.end (); p++)
 		  {
 		    octave_value val = p->varval;
-		    dim_vector dims = val.dims ();
-		    std::string dims_str = dims.str ();
+		    std::string dims_str = get_dims_str (val);
 		    int first1 = dims_str.find ('x');
 		    int total1 = dims_str.length ();
 		    int rest1 = total1 - first1;
 		    rest = (rest1 > rest ? rest1 : rest);
 		    first = (first1 > first ? first1 : first);
 		    total = (total1 > total ? total1 : total);
 		  }
 
