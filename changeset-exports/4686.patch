# HG changeset patch
# User jwe
# Date 1073417517 0
#      Tue Jan 06 19:31:57 2004 +0000
# Node ID c7ae43dfdea4d0d5996f2c81bf0fc98ce6d791ce
# Parent  14a1c9f42f67f836e1a0847d04cd2827c60a9c42
[project @ 2004-01-06 19:29:23 by jwe]

diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -50,16 +50,17 @@ are also used or changed automatically b
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
 @menu
 * Global Variables::            
+* Persistent Variables::        
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 @end menu
 
 @node Global Variables
 @section Global Variables
 @cindex global variables
@@ -149,16 +150,57 @@ f (x)
 
 @noindent
 will display the value of @code{x} from inside the function as 0,
 but the value of @code{x} at the top level remains unchanged, because
 the function works with a @emph{copy} of its argument.
 
 @DOCSTRING(isglobal)
 
+@node Persistent Variables
+@section Persistent Variables
+@cindex persistent variables
+@cindex @code{persistent} statement
+@cindex variables, persistent
+
+A variable that has been declared @dfn{persistent} within a function
+will retain its contents in memory between subsequent calls to the
+same function. The difference between persistent variables and global
+variables is that persistent variables are local in scope to a
+particular function and are not visible elsewhere.
+
+A variable may be declared persistent using a @code{persistent}
+declaration statement.  The following statements are all persistent
+declarations.
+
+@example
+@group
+persistent a
+persistent a b
+persistent c = 2
+persistent d = 3 e f = 5
+@end group
+@end example
+
+The behavior of persistent variables is equivalent to the behavior of
+static variables in C. The command @code{static} in octave is also
+recognized and is equivalent to @code{persistent}. Unlike global
+variables, every initialization statement will re-initialize the
+variable. For example, after executing the following code
+
+@example
+@group
+persistent pvar = 1
+persistent pvar = 2
+@end group
+@end example
+
+@noindent
+the value of the persistent variable @code{pvar} is 2.
+
 @node Status of Variables
 @section Status of Variables
 
 @DOCSTRING(clear)
 
 @DOCSTRING(who)
 
 @DOCSTRING(exist)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2003-12-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cx-mat.cc (octave_complex_matrix::assign): RHS arg is N-d.
+	* ov-cx-mat.h: Fix decl.
+
+	* ops.h (DEFNDASSIGNOP_FN): New macro.
+	* OPERATORS/op-bm-b.cc, OPERATORS/op-bm-bm.cc,
+	OPERATORS/op-cm-cm.cc, OPERATORS/op-cm-cs.cc,
+	OPERATORS/op-cm-m.cc, OPERATORS/op-cm-s.cc, OPERATORS/op-m-m.cc,
+	OPERATORS/op-m-s.cc: Use it instead of DEFASSIGNOP_FN.
+
 2003-12-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* xpow.cc (xpow (double, double)): Avoid apparent GNU libm bug.
 
 2003-12-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* symtab.cc (symbol_record::print_symbol_info_line):
 	Also check is_static to see if a symbol can be cleared.
diff --git a/src/OPERATORS/op-bm-b.cc b/src/OPERATORS/op-bm-b.cc
--- a/src/OPERATORS/op-bm-b.cc
+++ b/src/OPERATORS/op-bm-b.cc
@@ -38,17 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool matrix by bool ops.
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool, bool_array, bool, mx_el_and)
 DEFNDBINOP_FN (el_or, bool_matrix, bool, bool_array, bool, mx_el_or)
 
-DEFASSIGNOP_FN (assign, bool_matrix, bool, assign)
+DEFNDASSIGNOP_FN (assign, bool_matrix, bool, bool_array, assign)
 
 void
 install_bm_b_ops (void)
 {
   INSTALL_BINOP (op_el_and, octave_bool_matrix, octave_bool, el_and);
   INSTALL_BINOP (op_el_or, octave_bool_matrix, octave_bool, el_or);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_bool, assign);
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -60,17 +60,17 @@ DEFNDBINOP_FN (eq, bool_matrix, bool_mat
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool_matrix, bool_array, bool_array,
 	       mx_el_and)
 
 DEFNDBINOP_FN (el_or,  bool_matrix, bool_matrix, bool_array, bool_array,
 	       mx_el_or)
 
-DEFASSIGNOP_FN (assign, bool_matrix, bool_matrix, assign)
+DEFNDASSIGNOP_FN (assign, bool_matrix, bool_matrix, bool_array, assign)
 
 void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -103,17 +103,17 @@ DEFBINOP (el_ldiv, complex_matrix, compl
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
 
   return octave_value (quotient (v2.complex_array_value (), v1.complex_array_value ()));
 }
 
 DEFNDBINOP_FN (el_and, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_and)
 DEFNDBINOP_FN (el_or,  complex_matrix, complex_matrix, complex_array, complex_array, mx_el_or)
 
-DEFASSIGNOP_FN (assign, complex_matrix, complex_matrix, assign)
+DEFNDASSIGNOP_FN (assign, complex_matrix, complex_matrix, complex_array, assign)
 
 void
 install_cm_cm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex_matrix, not);
   INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex_matrix, hermitian);
diff --git a/src/OPERATORS/op-cm-cs.cc b/src/OPERATORS/op-cm-cs.cc
--- a/src/OPERATORS/op-cm-cs.cc
+++ b/src/OPERATORS/op-cm-cs.cc
@@ -96,17 +96,17 @@ DEFBINOP (el_ldiv, complex_matrix, compl
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
   return x_el_div (v2.complex_value (), v1.complex_array_value ());
 }
 
 DEFNDBINOP_FN (el_and, complex_matrix, complex, complex_array, complex, mx_el_and)
 DEFNDBINOP_FN (el_or,  complex_matrix, complex, complex_array, complex, mx_el_or)
 
-DEFASSIGNOP_FN (assign, complex_matrix, complex, assign)
+DEFNDASSIGNOP_FN (assign, complex_matrix, complex, complex_array, assign)
 
 void
 install_cm_cs_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_complex, sub);
   INSTALL_BINOP (op_mul, octave_complex_matrix, octave_complex, mul);
   INSTALL_BINOP (op_div, octave_complex_matrix, octave_complex, div);
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -75,17 +75,17 @@ DEFBINOP (el_ldiv, complex_matrix, matri
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
 
   return quotient (v2.array_value (), v1.complex_array_value ());
 }
 
 DEFNDBINOP_FN (el_and, complex_matrix, matrix, complex_array, array, mx_el_and)
 DEFNDBINOP_FN (el_or,  complex_matrix, matrix, complex_array, array, mx_el_or)
 
-DEFASSIGNOP_FN (assign, complex_matrix, matrix, assign)
+DEFNDASSIGNOP_FN (assign, complex_matrix, matrix, complex_array, assign)
 
 void
 install_cm_m_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_matrix, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_matrix, sub);
   INSTALL_BINOP (op_mul, octave_complex_matrix, octave_matrix, mul);
   INSTALL_BINOP (op_div, octave_complex_matrix, octave_matrix, div);
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -100,17 +100,17 @@ DEFBINOP (el_ldiv, complex_matrix, scala
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   return x_el_div (v2.double_value (), v1.complex_array_value ());
 }
 
 DEFNDBINOP_FN (el_and, complex_matrix, scalar, complex_array, scalar, mx_el_and)
 DEFNDBINOP_FN (el_or,  complex_matrix, scalar, complex_array, scalar, mx_el_or)
 
-DEFASSIGNOP_FN (assign, complex_matrix, scalar, assign)
+DEFNDASSIGNOP_FN (assign, complex_matrix, scalar, complex_array, assign)
 
 void
 install_cm_s_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_scalar, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_scalar, sub);
   INSTALL_BINOP (op_mul, octave_complex_matrix, octave_scalar, mul);
   INSTALL_BINOP (op_div, octave_complex_matrix, octave_scalar, div);
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -90,17 +90,17 @@ DEFBINOP (el_ldiv, matrix, matrix)
   CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
 
   return octave_value (quotient (v2.array_value (), v1.array_value ()));
 }
 
 DEFNDBINOP_FN (el_and, matrix, matrix, array, array, mx_el_and)
 DEFNDBINOP_FN (el_or,  matrix, matrix, array, array, mx_el_or)
 
-DEFASSIGNOP_FN (assign, matrix, matrix, assign)
+DEFNDASSIGNOP_FN (assign, matrix, matrix, array, assign)
 
 void
 install_m_m_ops (void)
 {
   INSTALL_UNOP (op_not, octave_matrix, not);
   INSTALL_UNOP (op_uminus, octave_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_matrix, transpose);
diff --git a/src/OPERATORS/op-m-s.cc b/src/OPERATORS/op-m-s.cc
--- a/src/OPERATORS/op-m-s.cc
+++ b/src/OPERATORS/op-m-s.cc
@@ -96,17 +96,17 @@ DEFBINOP (el_ldiv, matrix, scalar)
   CAST_BINOP_ARGS (const octave_matrix&, const octave_scalar&);
 
   return x_el_div (v2.double_value (), v1.array_value ());
 }
 
 DEFNDBINOP_FN (el_and, matrix, scalar, array, scalar, mx_el_and)
 DEFNDBINOP_FN (el_or, matrix, scalar, array, scalar, mx_el_or)
 
-DEFASSIGNOP_FN (assign, matrix, scalar, assign)
+DEFNDASSIGNOP_FN (assign, matrix, scalar, array, assign)
 
 void
 install_m_s_ops (void)
 {
   INSTALL_BINOP (op_add, octave_matrix, octave_scalar, add);
   INSTALL_BINOP (op_sub, octave_matrix, octave_scalar, sub);
   INSTALL_BINOP (op_mul, octave_matrix, octave_scalar, mul);
   INSTALL_BINOP (op_div, octave_matrix, octave_scalar, div);
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -274,16 +274,19 @@ static help_list keywords[] =
     "Produce 2-D plots using gnuplot-like command syntax.", },
 
   { "gsplot",
     "Produce 3-D plots using gnuplot-like command syntax.", },
 
   { "if",
     "Begin an if block.", },
 
+  { "persistent",
+    "Declare variables as persistent.", },
+
   { "return",
     "Return from a function.", },
 
   { "try",
     "Begin a try-catch block.", }, 
 
   { "unwind_protect",
     "Begin an unwind_protect block.", }, 
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -150,16 +150,25 @@ extern void install_ops (void);
   ASSIGNOPDECL (name) \
   { \
     CAST_BINOP_ARGS (octave_ ## t1&, const octave_ ## t2&); \
  \
     v1.f (idx, v2.t1 ## _value ()); \
     return octave_value (); \
   }
 
+#define DEFNDASSIGNOP_FN(name, t1, t2, e, f) \
+  ASSIGNOPDECL (name) \
+  { \
+    CAST_BINOP_ARGS (octave_ ## t1&, const octave_ ## t2&); \
+ \
+    v1.f (idx, v2.e ## _value ()); \
+    return octave_value (); \
+  }
+
 #define DEFASSIGNANYOP_FN(name, t1, f) \
   ASSIGNOPDECL (name) \
   { \
     octave_ ## t1& v1 = DYNAMIC_CAST (octave_ ## t1&, a1); \
  \
     v1.f (idx, a2); \
     return octave_value (); \
   }
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -79,24 +79,24 @@ octave_complex_matrix::try_narrowing_con
 	retval = new octave_matrix (::real (cm));
     }
 
   return retval;
 }
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
-			       const ComplexMatrix& rhs)
+			       const ComplexNDArray& rhs)
 {
   octave_base_matrix<ComplexNDArray>::assign (idx, rhs);
 }
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
-			       const Matrix& rhs)
+			       const NDArray& rhs)
 {
   int len = idx.length ();
 
   for (int i = 0; i < len; i++)
     matrix.set_index (idx(i).index_vector ());
 
   ::assign (matrix, rhs);
 }
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -76,19 +76,19 @@ public:
 
   ~octave_complex_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_complex_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_complex_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
+  void assign (const octave_value_list& idx, const ComplexNDArray& rhs);
 
-  void assign (const octave_value_list& idx, const Matrix& rhs);
+  void assign (const octave_value_list& idx, const NDArray& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
