# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1240220594 -7200
#      Mon Apr 20 11:43:14 2009 +0200
# Node ID eebc7f8e739865ceb9134251b5653c40a2584588
# Parent  537a73861cb7a1927e22222efa3fb511f023f20f
extend vander to allow specified number of columns

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* special-matrix/vander.m: Allow second argument.
+
 2009-04-17  Rik  <rdrider0-list@yahoo.com>
 
 	* plot/__marching_cube__.m: Correct help Texinfo so manual will compile
 
 2009-04-16  Marco Caliari <marco.caliari@univr.it>
 
 	* toeplitz.m: Treat separately the sparse case.
 
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -14,18 +14,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} vander (@var{c})
+## @deftypefn {Function File} {} vander (@var{c}, @var{n})
 ## Return the Vandermonde matrix whose next to last column is @var{c}.
+## If @var{n} is specified, it determines the number of columns;
+## otherwise, @var{n} is taken to be equal to the length of @var{c}.
 ##
 ## A Vandermonde matrix has the form:
 ## @iftex
 ## @tex
 ## $$
 ## \left[\matrix{c_1^{n-1}  & \cdots & c_1^2  & c_1    & 1      \cr
 ##               c_2^{n-1}  & \cdots & c_2^2  & c_2    & 1      \cr
 ##               \vdots     & \ddots & \vdots & \vdots & \vdots \cr
@@ -46,25 +48,26 @@
 ## @end group
 ## @end example
 ## @end ifnottex
 ## @seealso{hankel, sylvester_matrix, hilb, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = vander (c)
+function retval = vander (c, n)
 
-  if (nargin != 1)
+  if (nargin == 1)
+    n = length (c);
+  elseif (nargin != 2)
     print_usage ();
   endif
 
   if (isvector (c))
-    n = length (c);
-    retval = zeros (n, n, class (c));
+    retval = zeros (length (c), n, class (c));
     ## avoiding many ^s appears to be faster for n >= 100.
     d = 1;
     c = c(:);
     for i = n:-1:1
       retval(:,i) = d;
       d = c .* d;
     endfor
   else
