# HG changeset patch
# User jwe
# Date 1114119086 0
#      Thu Apr 21 21:31:26 2005 +0000
# Node ID 234abf4c74ddf98b0e004e8d6984c13c7ad1dc5e
# Parent  4e753a157ed2072a18f6c7b445adabc827786ace
[project @ 2005-04-21 21:29:46 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,11 +1,12 @@
 2005-04-21  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (AC_CONFIG_FILES): Remove install-octave from the list.
+	(AH_BOTTOM): Define SIZEOF_OCTAVE_IDX_TYPE.
 
 2005-04-14  John W. Eaton  <jwe@octave.org>
 
 	* mkoctfile.in: Only perform link step if we have some object files.
 	If only -v or --version is supplied, print version info and exit.
 
 2005-04-08  John W. Eaton  <jwe@octave.org>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.472 $)
+AC_REVISION($Revision: 1.473 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1566,16 +1566,22 @@ typedef int sig_atomic_t;
 #if defined (_UNICOS)
 #define F77_USES_CRAY_CALLING_CONVENTION
 #endif
 
 #if 0
 #define F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION
 #endif
 
+#ifdef USE_64_BIT_IDX_T
+#define SIZEOF_OCTAVE_IDX_TYPE 8
+#else
+#define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
+#endif
+
 #include "oct-types.h"
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,15 @@
-2005-04-21  John W. Eaton  <jwe@octave.org>
+2005-04-21  John W Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (read_mat5_binary_element): Only read sparse matrix
+	values if sizeof (int) == sizeof (octave_idx_type).
+
+	* DLD-FUNCTIONS/colamd.cc: These functions only work if
+	sizeof (int) == sizeof (octave_idx_type).
 
 	* version.h (OCTAVE_VERSION): Now 2.9.2.
 	(OCTAVE_API_VERSION): Now api-v15.
 
 	* Makefile.in (parse.cc): Expect 14 shift/reduce conflicts.
 
 	* parse.y (USING TITLE WITH AXES COLON OPEN_BRACE CLEAR):
 	Delete unused tokens.
diff --git a/src/DLD-FUNCTIONS/colamd.cc b/src/DLD-FUNCTIONS/colamd.cc
--- a/src/DLD-FUNCTIONS/colamd.cc
+++ b/src/DLD-FUNCTIONS/colamd.cc
@@ -34,16 +34,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov.h"
 #include "defun-dld.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
+#if SIZEOF_INT == SIZEOF_OCTAVE_IDX_TYPE
+
 // External COLAMD functions in C
 extern "C" {
 #include "COLAMD/colamd.h"
 }
 
 // The symmetric column elimination tree code take from the Davis LDL code. 
 // Copyright given elsewhere in this file.
 static 
@@ -183,16 +185,18 @@ void coletree (const int *ridx, const in
 	      parent[rroot] = col;
 	      cset = link (cset, rset, pp);
 	      root[cset] = col;
 	    }
 	}
     }
 }
 
+#endif
+
 DEFUN_DLD (colamd, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} colamd (@var{s})\n\
 @deftypefnx {Loadable Function} {@var{p} =} colamd (@var{s}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} colamd (@var{s})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} colamd (@var{s}, @var{knobs})\n\
 \n\
 Column approximate minimum degree permutation. @code{@var{p} = colamd\n\
@@ -251,16 +255,19 @@ The authors of the code itself are Stefa
 Davis (davis@@cise.ufl.edu), University of Florida.  The algorithm was\n\
 developed in collaboration with John Gilbert, Xerox PARC, and Esmond\n\
 Ng, Oak Ridge National Laboratory. (see\n\
 @url{http://www.cise.ufl.edu/research/sparse/colamd})\n\
 @end deftypefn\n\
 @seealso{colperm, symamd}")
 {
   octave_value_list retval;
+
+#if SIZEOF_INT == SIZEOF_OCTAVE_IDX_TYPE
+
   int nargin = args.length ();
   int spumoni = 0;
  
   if (nargout < 0 || nargout > 2 || nargin < 0 || nargin > 2)
     usage ("colamd: incorrect number of input and/or output arguments");
   else
     {
       // Get knobs
@@ -388,16 +395,22 @@ Ng, Oak Ridge National Laboratory. (see\
 	  // fix stats (5) and (6), for 1-based information on 
 	  // jumbled matrix.  note that this correction doesn't 
 	  // occur if symamd returns FALSE
 	  out_stats (COLAMD_INFO1) ++ ; 
 	  out_stats (COLAMD_INFO2) ++ ; 
 	}
     }
 
+#else
+
+  error ("colamd: not available in this version of Octave");
+
+#endif
+
   return retval;
 }
 
 DEFUN_DLD (symamd, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} symamd (@var{s})\n\
 @deftypefnx {Loadable Function} {@var{p} =} symamd (@var{s}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} symamd (@var{s})\n\
@@ -456,16 +469,19 @@ The authors of the code itself are Stefa
 Davis (davis@@cise.ufl.edu), University of Florida.  The algorithm was\n\
 developed in collaboration with John Gilbert, Xerox PARC, and Esmond\n\
 Ng, Oak Ridge National Laboratory. (see\n\
 @url{http://www.cise.ufl.edu/research/sparse/colamd})\n\
 @end deftypefn\n\
 @seealso{colperm, colamd}")
 {
   octave_value_list retval;
+
+#if SIZEOF_INT == SIZEOF_OCTAVE_IDX_TYPE
+
   int nargin = args.length ();
   int spumoni = 0;
  
   if (nargout < 0 || nargout > 2 || nargin < 0 || nargin > 2)
     usage ("symamd: incorrect number of input and/or output arguments");
   else
     {
       // Get knobs
@@ -575,16 +591,22 @@ Ng, Oak Ridge National Laboratory. (see\
 	  // fix stats (5) and (6), for 1-based information on 
 	  // jumbled matrix.  note that this correction doesn't 
 	  // occur if symamd returns FALSE
 	  out_stats (COLAMD_INFO1) ++ ; 
 	  out_stats (COLAMD_INFO2) ++ ; 
 	}
     }
 
+#else
+
+  error ("symamd: not available in this version of Octave");
+
+#endif
+
   return retval;
 }
 
 DEFUN_DLD (etree, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} etree (@var{s})\n\
 @deftypefnx {Loadable Function} {@var{p} =} etree (@var{s}, @var{typ})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{q}] =} etree (@var{s}, @var{typ})\n\
@@ -595,16 +617,19 @@ returned. The argument @var{typ} control
 column elimination tree is returned. Valid values of @var{typ} are\n\
 'sym' or 'col', for symmetric or column elimination tree respectively\n\
 \n\
 Called with a second argument, @dfn{etree} also returns the postorder\n\
 permutations on the tree.\n\
 @end deftypefn")
 {
   octave_value_list retval;
+
+#if SIZEOF_INT == SIZEOF_OCTAVE_IDX_TYPE
+
   int nargin = args.length ();
 
   if (nargout < 0 || nargout > 2 || nargin < 0 || nargin > 2)
     usage ("etree: incorrect number of input and/or output arguments");
   else
     {
       int n_row, n_col, nnz;
       int *ridx, *cidx;
@@ -700,16 +725,22 @@ permutations on the tree.\n\
 	  NDArray postorder (dim_vector (1, n_col));
 	  for (int i = 0; i < n_col; i++)
 	    postorder (i) = post[i] + 1;
 
 	  retval (1) = postorder;
 	}
     }
 
+#else
+
+  error ("etree: not available in this version of Octave");
+
+#endif
+
   return retval;
 }
 
 DEFUN_DLD (symbfact, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{count}, @var{h}, @var{parent}, @var{post}, @var{r}]} = symbfact (@var{s}, @var{typ})\n\
 \n\
 Performs a symbolic factorization analysis on the sparse matrix @var{s}.\n\
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -568,16 +568,20 @@ read_mat5_binary_element (std::istream& 
       }
       break;
 
     case mxOBJECT_CLASS:
       warning ("load: objects are not implemented");
       goto skip_ahead;
 
     case mxSPARSE_CLASS:
+#if SIZEOF_INT != SIZEOF_OCTAVE_IDX_TYPE
+      warning ("load: sparse objects are not implemented");
+      goto skip_ahead;
+#else
       {
 	int nr = dims(0);
 	int nc = dims(1);
 	SparseMatrix sm;
 	SparseComplexMatrix scm;
 	NDArray re;
 	int *ridx;
 	int *cidx;
@@ -690,16 +694,17 @@ read_mat5_binary_element (std::istream& 
 	      scm.xdata (i) = Complex (re (i), im (i));
 
 	    tc = scm;
 	  }
 	else
 	  tc = sm;
       }
       break;
+#endif
 
     case mxFUNCTION_CLASS:
       warning ("load: function handles are not implemented");
       goto skip_ahead;
 
     case mxSTRUCT_CLASS:
       {
 	Octave_map m;
