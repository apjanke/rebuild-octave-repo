# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1266214392 -3600
#      Mon Feb 15 07:13:12 2010 +0100
# Node ID 21551cc88061c0c8dd1c7d4054e17cebcf5ce4bc
# Parent  97b4bd6f09255e1ab6879200eafd7c7214e51d7d
improve function handles comparison

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-fcn-handle.cc (octave_fcn_handle::is_equal_to): New method.
+	* ov-fcn-handle.h: Declare it.
+	* OPERATORS/op-fcn.cc (eq, ne): Call it here. Register new handler.
+
 2010-02-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-path.cc (load_path::do_any_class_method): Rename to
 	do_overloads. Return a list of classes.
 	* load-path.h (load_path::any_class_method): Likewise.
 	* symtab.cc (get_dispatch_type): Rewrite.
 	* symtab.h (get_dispatch_type): Update decl.
 	* ov-fcn-handle.h (octave_fcn_handle): Partially rewrite.
diff --git a/src/OPERATORS/op-fcn.cc b/src/OPERATORS/op-fcn.cc
--- a/src/OPERATORS/op-fcn.cc
+++ b/src/OPERATORS/op-fcn.cc
@@ -31,24 +31,24 @@ along with Octave; see the file COPYING.
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 
 DEFBINOP (eq, fcn_handle, fcn_handle)
 {
   CAST_BINOP_ARGS (const octave_fcn_handle&, const octave_fcn_handle&);
 
-  // FIXME: this may not be entirely correct in case the handles were created
-  // in different directories. Needs checking what recent Matlab does, and also
-  // discussion whether we want to copy its behavior. Or to what extent.
-  // Meanwhile, this catches all the "normal" usages, i.e.
-  //   h == @sin
-  // should yield true only if h is a handle to the global "sin", not a local one.
+  return v1.is_equal_to (v2);
+}
 
-  return (v1.fcn_name () == v2.fcn_name () 
-          && v1.fcn_val ().is_copy_of (v2.fcn_val ()));
+DEFBINOP (ne, fcn_handle, fcn_handle)
+{
+  CAST_BINOP_ARGS (const octave_fcn_handle&, const octave_fcn_handle&);
+
+  return ! v1.is_equal_to (v2);
 }
 
 void
 install_fcn_ops (void)
 {
   INSTALL_BINOP (op_eq, octave_fcn_handle, octave_fcn_handle, eq);
+  INSTALL_BINOP (op_ne, octave_fcn_handle, octave_fcn_handle, ne);
 }
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -166,16 +166,35 @@ octave_fcn_handle::do_multi_index_op (in
         retval = fcn.do_multi_index_op (nargout, args);
       else
         error ("%s: no longer valid function handle", nm.c_str ());
     }
 
   return retval;
 }
 
+bool 
+octave_fcn_handle::is_equal_to (const octave_fcn_handle& h) const
+{
+  bool retval = fcn.is_copy_of (h.fcn) && (has_overloads == h.has_overloads);
+  retval = retval && (overloads.size () == h.overloads.size ());
+
+  if (retval && has_overloads)
+    {
+      for (int i = 0; i < btyp_num_types && retval; i++)
+        retval = builtin_overloads[i].is_copy_of (h.builtin_overloads[i]);
+
+      str_ov_map::const_iterator iter = overloads.begin (), hiter = h.overloads.begin ();
+      for (; iter != overloads.end () && retval; iter++, hiter++)
+        retval = (iter->first == hiter->first) && (iter->second.is_copy_of (hiter->second));
+    }
+
+  return retval;
+}
+
 bool
 octave_fcn_handle::set_fcn (const std::string &octaveroot, 
                             const std::string& fpath)
 {
   bool success = true;
 
   if (octaveroot.length () != 0
       && fpath.length () >= octaveroot.length ()
@@ -1448,17 +1467,16 @@ make_fcn_handle (const std::string& nm, 
           break;
 
         case '|':
           tnm = "or";
           break;
         }
     }
 
-  bool handle_ok = false;
   octave_value f = symbol_table::find_function (tnm, octave_value_list (),
                                                 local_funcs);
   octave_function *fptr = f.function_value (true);
 
   if (local_funcs && fptr 
       && (fptr->is_nested_function () || fptr->is_private_function ()
           || fptr->is_class_constructor ()))
     {
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -118,16 +118,18 @@ public:
     }
 
   void set_overload (const std::string& dispatch_type, const octave_value& ov_fcn)
     {
       has_overloads = true;
       overloads[dispatch_type] = ov_fcn;
     }
 
+  bool is_equal_to (const octave_fcn_handle&) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
                     oct_mach_info::float_format fmt);
