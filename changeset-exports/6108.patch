# HG changeset patch
# User jwe
# Date 1161913556 0
#      Fri Oct 27 01:45:56 2006 +0000
# Node ID 143b556ce725021ec3ea042f26fbb438470c631c
# Parent  6465ca8e4f0c366330b8ae81f8d5a383836216da
[project @ 2006-10-27 01:45:54 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -36,27 +36,27 @@ INSTANTIATE_ARRAY_AND_ASSIGN (Complex);
 
 INSTANTIATE_ARRAY_ASSIGN (Complex, double);
 INSTANTIATE_ARRAY_ASSIGN (Complex, int);
 INSTANTIATE_ARRAY_ASSIGN (Complex, short);
 INSTANTIATE_ARRAY_ASSIGN (Complex, char);
 
 #include "Array2.h"
 
-template class Array2<Complex>;
+template class OCTAVE_API Array2<Complex>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
-template class ArrayN<Complex>;
+template class OCTAVE_API ArrayN<Complex>;
 
-template std::ostream& operator << (std::ostream&, const ArrayN<Complex>&);
+template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<Complex>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
-template class DiagArray2<Complex>;
+template class OCTAVE_API DiagArray2<Complex>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -29,27 +29,27 @@ 02110-1301, USA.
 
 #include "Array.h"
 #include "Array.cc"
 
 INSTANTIATE_ARRAY_AND_ASSIGN (bool);
 
 #include "Array2.h"
 
-template class Array2<bool>;
+template class OCTAVE_API Array2<bool>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
-template class ArrayN<bool>;
+template class OCTAVE_API ArrayN<bool>;
 
-template std::ostream& operator << (std::ostream&, const ArrayN<bool>&);
+template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<bool>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
-template class DiagArray2<bool>;
+template class OCTAVE_API DiagArray2<bool>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -29,27 +29,27 @@ 02110-1301, USA.
 
 #include "Array.h"
 #include "Array.cc"
 
 INSTANTIATE_ARRAY_AND_ASSIGN (char);
 
 #include "Array2.h"
 
-template class Array2<char>;
+template class OCTAVE_API Array2<char>;
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
-template class ArrayN<char>;
+template class OCTAVE_API ArrayN<char>;
 
-template std::ostream& operator << (std::ostream&, const ArrayN<char>&);
+template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
-template class DiagArray2<char>;
+template class OCTAVE_API DiagArray2<char>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -45,20 +45,20 @@ INSTANTIATE_ARRAY_AND_ASSIGN (octave_int
 
 INSTANTIATE_ARRAY_AND_ASSIGN (octave_uint8);
 INSTANTIATE_ARRAY_AND_ASSIGN (octave_uint16);
 INSTANTIATE_ARRAY_AND_ASSIGN (octave_uint32);
 INSTANTIATE_ARRAY_AND_ASSIGN (octave_uint64);
 
 #include "Array2.h"
 
-template class Array2<int>;
+template class OCTAVE_API Array2<int>;
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
-template class DiagArray2<int>;
+template class OCTAVE_API DiagArray2<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -26,71 +26,71 @@ 02110-1301, USA.
 
 #include <cassert>
 
 #include "Array.h"
 #include "dim-vector.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 
-extern bool index_in_bounds (const Array<octave_idx_type>& ra_idx,
+extern OCTAVE_API bool index_in_bounds (const Array<octave_idx_type>& ra_idx,
 			     const dim_vector& dimensions);
 
-extern void increment_index (Array<octave_idx_type>& ra_idx,
+extern OCTAVE_API void increment_index (Array<octave_idx_type>& ra_idx,
 			     const dim_vector& dimensions,
 			     int start_dimension = 0);
 
-extern octave_idx_type get_scalar_idx (Array<octave_idx_type>& idx, dim_vector& dims);
+extern OCTAVE_API octave_idx_type get_scalar_idx (Array<octave_idx_type>& idx, dim_vector& dims);
 
-extern octave_idx_type num_ones (const Array<octave_idx_type>& ra_idx);
+extern OCTAVE_API octave_idx_type num_ones (const Array<octave_idx_type>& ra_idx);
 
-extern bool is_scalar (const dim_vector& dim);
+extern OCTAVE_API bool is_scalar (const dim_vector& dim);
 
-extern bool any_ones (const Array<octave_idx_type>& arr);
+extern OCTAVE_API bool any_ones (const Array<octave_idx_type>& arr);
 
-extern octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx, const dim_vector& dims);
+extern OCTAVE_API octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx, const dim_vector& dims);
 
-extern Array<octave_idx_type> conv_to_int_array (const Array<idx_vector>& a);
+extern OCTAVE_API Array<octave_idx_type> conv_to_int_array (const Array<idx_vector>& a);
 
-extern Array<idx_vector> conv_to_array (const idx_vector *tmp, const octave_idx_type len);
+extern OCTAVE_API Array<idx_vector> conv_to_array (const idx_vector *tmp, const octave_idx_type len);
 
-extern dim_vector freeze (Array<idx_vector>& ra_idx,
+extern OCTAVE_API dim_vector freeze (Array<idx_vector>& ra_idx,
 			  const dim_vector& dimensions, int resize_ok);
 
-extern bool vector_equivalent (const dim_vector& dv);
+extern OCTAVE_API bool vector_equivalent (const dim_vector& dv);
 
-extern bool all_ok (const Array<idx_vector>& ra_idx);
+extern OCTAVE_API bool all_ok (const Array<idx_vector>& ra_idx);
 
-extern bool any_orig_empty (const Array<idx_vector>& ra_idx);
+extern OCTAVE_API bool any_orig_empty (const Array<idx_vector>& ra_idx);
 
-extern bool all_colon_equiv (const Array<idx_vector>& ra_idx,
+extern OCTAVE_API bool all_colon_equiv (const Array<idx_vector>& ra_idx,
 			     const dim_vector& frozen_lengths);
 
-extern bool is_in (octave_idx_type num, const idx_vector& idx);
+extern OCTAVE_API bool is_in (octave_idx_type num, const idx_vector& idx);
 
-extern octave_idx_type how_many_lgt (const octave_idx_type num, idx_vector& idxv);
+extern OCTAVE_API octave_idx_type how_many_lgt (const octave_idx_type num, idx_vector& idxv);
 
-extern bool all_ones (const Array<octave_idx_type>& arr);
+extern OCTAVE_API bool all_ones (const Array<octave_idx_type>& arr);
 
-extern Array<octave_idx_type> get_elt_idx (const Array<idx_vector>& ra_idx,
+extern OCTAVE_API Array<octave_idx_type> get_elt_idx (const Array<idx_vector>& ra_idx,
 			       const Array<octave_idx_type>& result_idx);
 
-extern Array<octave_idx_type> get_ra_idx (octave_idx_type idx, const dim_vector& dims);
+extern OCTAVE_API Array<octave_idx_type> get_ra_idx (octave_idx_type idx, const dim_vector& dims);
 
-extern dim_vector short_freeze (Array<idx_vector>& ra_idx,
+extern OCTAVE_API dim_vector short_freeze (Array<idx_vector>& ra_idx,
 				const dim_vector& dimensions,
 				int resize_ok);
 
-extern void gripe_nonconformant (const char *op, int op1_len, int op2_len);
+extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
-extern void gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
+extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
 				 int op2_nr, int op2_nc);
 
 
-extern void gripe_nonconformant (const char *op, dim_vector& op1_dims,
+extern void OCTAVE_API gripe_nonconformant (const char *op, dim_vector& op1_dims,
 				 dim_vector& op2_dims);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -565,26 +565,26 @@ assignN (Array<LT>& lhs, const Array<RT>
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
   return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
 #define INSTANTIATE_ARRAY_ASSIGN(LT, RT) \
-  template int assign (Array<LT>&, const Array<RT>&, const LT&); \
-  template int assign1 (Array<LT>&, const Array<RT>&, const LT&); \
-  template int assign2 (Array<LT>&, const Array<RT>&, const LT&); \
-  template int assignN (Array<LT>&, const Array<RT>&, const LT&); \
-  template int assign (Array<LT>&, const Array<RT>&)
+  template OCTAVE_API int assign (Array<LT>&, const Array<RT>&, const LT&); \
+  template OCTAVE_API int assign1 (Array<LT>&, const Array<RT>&, const LT&); \
+  template OCTAVE_API int assign2 (Array<LT>&, const Array<RT>&, const LT&); \
+  template OCTAVE_API int assignN (Array<LT>&, const Array<RT>&, const LT&); \
+  template OCTAVE_API int assign (Array<LT>&, const Array<RT>&)
 
 
 #define INSTANTIATE_ARRAY(T) \
-  template class Array<T>; \
-  template T resize_fill_value (const T&); \
+  template class OCTAVE_API Array<T>; \
+  template OCTAVE_API T resize_fill_value (const T&); \
 
 #define INSTANTIATE_ARRAY_AND_ASSIGN(T) \
   INSTANTIATE_ARRAY (T); \
   INSTANTIATE_ARRAY_ASSIGN (T, T)
 
 #endif
 
 /*
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexColumnVector_h)
 #define octave_ComplexColumnVector_h 1
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 ComplexColumnVector : public MArray<Complex>
 {
 friend class ComplexMatrix;
 friend class ComplexRowVector;
 
 public:
 
   ComplexColumnVector (void) : MArray<Complex> () { }
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 #include "MDiagArray2.h"
 #include "MatrixType.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
 
 class
+OCTAVE_API
 ComplexMatrix : public MArray2<Complex>
 {
 public:
  
   typedef void (*solve_singularity_handler) (double rcond);
 
   ComplexMatrix (void) : MArray2<Complex> () { }
 
@@ -314,54 +315,54 @@ public:
   ComplexRowVector column_min (void) const;
   ComplexRowVector column_max (void) const;
 
   ComplexRowVector column_min (Array<octave_idx_type>& index) const;
   ComplexRowVector column_max (Array<octave_idx_type>& index) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const ComplexMatrix& a);
-  friend std::istream& operator >> (std::istream& is, ComplexMatrix& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ComplexMatrix& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, ComplexMatrix& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
 private:
 
   ComplexMatrix (Complex *d, octave_idx_type r, octave_idx_type c) : MArray2<Complex> (d, r, c) { }
 };
 
 // column vector by row vector -> matrix operations
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 operator * (const ColumnVector& a, const ComplexRowVector& b);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 operator * (const ComplexColumnVector& a, const RowVector& b);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 operator * (const ComplexColumnVector& a, const ComplexRowVector& b);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 Givens (const Complex&, const Complex&);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 Sylvester (const ComplexMatrix&, const ComplexMatrix&, const ComplexMatrix&);
 
-extern ComplexMatrix operator * (const Matrix&,        const ComplexMatrix&);
-extern ComplexMatrix operator * (const ComplexMatrix&, const Matrix&);
-extern ComplexMatrix operator * (const ComplexMatrix&, const ComplexMatrix&);
+extern OCTAVE_API ComplexMatrix operator * (const Matrix&,        const ComplexMatrix&);
+extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, const Matrix&);
+extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, const ComplexMatrix&);
 
-extern ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
-extern ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
-extern ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
+extern OCTAVE_API ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
+extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
+extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
 
-extern ComplexMatrix max (const Complex& c, const ComplexMatrix& m);
-extern ComplexMatrix max (const ComplexMatrix& m, const Complex& c);
-extern ComplexMatrix max (const ComplexMatrix& a, const ComplexMatrix& b);
+extern OCTAVE_API ComplexMatrix max (const Complex& c, const ComplexMatrix& m);
+extern OCTAVE_API ComplexMatrix max (const ComplexMatrix& m, const Complex& c);
+extern OCTAVE_API ComplexMatrix max (const ComplexMatrix& a, const ComplexMatrix& b);
 
 MS_CMP_OP_DECLS (ComplexMatrix, Complex)
 MS_BOOL_OP_DECLS (ComplexMatrix, Complex)
 
 SM_CMP_OP_DECLS (Complex, ComplexMatrix)
 SM_BOOL_OP_DECLS (Complex, ComplexMatrix)
 
 MM_CMP_OP_DECLS (ComplexMatrix, ComplexMatrix)
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include "MArrayN.h"
 #include "CMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 class
+OCTAVE_API
 ComplexNDArray : public MArrayN<Complex>
 {
 public:
 
   ComplexNDArray (void) : MArrayN<Complex> () { }
 
   ComplexNDArray (const dim_vector& dv) : MArrayN<Complex> (dv) { }
 
@@ -103,37 +104,37 @@ public:
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
   static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
 			    const dim_vector& dimensions);
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const ComplexNDArray& a);
-  friend std::istream& operator >> (std::istream& is, ComplexNDArray& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ComplexNDArray& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, ComplexNDArray& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
 private:
 
   ComplexNDArray (Complex *d, const dim_vector& dv)
     : MArrayN<Complex> (d, dv) { }
 };
 
-extern ComplexNDArray min (const Complex& c, const ComplexNDArray& m);
-extern ComplexNDArray min (const ComplexNDArray& m, const Complex& c);
-extern ComplexNDArray min (const ComplexNDArray& a, const ComplexNDArray& b);
+extern OCTAVE_API ComplexNDArray min (const Complex& c, const ComplexNDArray& m);
+extern OCTAVE_API ComplexNDArray min (const ComplexNDArray& m, const Complex& c);
+extern OCTAVE_API ComplexNDArray min (const ComplexNDArray& a, const ComplexNDArray& b);
 
-extern ComplexNDArray max (const Complex& c, const ComplexNDArray& m);
-extern ComplexNDArray max (const ComplexNDArray& m, const Complex& c);
-extern ComplexNDArray max (const ComplexNDArray& a, const ComplexNDArray& b);
+extern OCTAVE_API ComplexNDArray max (const Complex& c, const ComplexNDArray& m);
+extern OCTAVE_API ComplexNDArray max (const ComplexNDArray& m, const Complex& c);
+extern OCTAVE_API ComplexNDArray max (const ComplexNDArray& a, const ComplexNDArray& b);
 
 NDS_CMP_OP_DECLS (ComplexNDArray, Complex)
 NDS_BOOL_OP_DECLS (ComplexNDArray, Complex)
 
 SND_CMP_OP_DECLS (Complex, ComplexNDArray)
 SND_BOOL_OP_DECLS (Complex, ComplexNDArray)
 
 NDND_CMP_OP_DECLS (ComplexNDArray, ComplexNDArray)
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexRowVector_h)
 #define octave_ComplexRowVector_h 1
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 ComplexRowVector : public MArray<Complex>
 {
 friend class ComplexColumnVector;
 
 public:
 
   ComplexRowVector (void) : MArray<Complex> () { }
 
@@ -116,17 +117,17 @@ private:
 // row vector by column vector -> scalar
 
 Complex operator * (const ComplexRowVector& a, const ColumnVector& b);
 
 Complex operator * (const ComplexRowVector& a, const ComplexColumnVector& b);
 
 // other operations
 
-ComplexRowVector linspace (const Complex& x1, const Complex& x2, octave_idx_type n);
+OCTAVE_API ComplexRowVector linspace (const Complex& x1, const Complex& x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, ComplexRowVector, Complex)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -35,16 +35,17 @@ Boston, MA 02110-1301, USA.
 #include "MSparse-defs.h"
 #include "Sparse-op-defs.h"
 #include "MatrixType.h"
 
 class SparseMatrix;
 class SparseBoolMatrix;
 
 class
+OCTAVE_API
 SparseComplexMatrix : public MSparse<Complex>
 {
 public:
   
   typedef void (*solve_singularity_handler) (double rcond);
 
   SparseComplexMatrix (void) : MSparse<Complex> () { }
 
@@ -416,55 +417,55 @@ public:
   SparseComplexMatrix prod (int dim = -1) const;
   SparseComplexMatrix sum (int dim = -1) const;
   SparseComplexMatrix sumsq (int dim = -1) const;
   SparseMatrix abs (void) const;
 
   SparseComplexMatrix diag (octave_idx_type k = 0) const;
 
   // i/o
-  friend std::ostream& operator << (std::ostream& os, 
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, 
 				    const SparseComplexMatrix& a);
-  friend std::istream& operator >> (std::istream& is, 
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, 
 				    SparseComplexMatrix& a);
 };
 
-extern SparseComplexMatrix operator * (const SparseMatrix&,        
+extern OCTAVE_API SparseComplexMatrix operator * (const SparseMatrix&,        
 				       const SparseComplexMatrix&);
-extern SparseComplexMatrix operator * (const SparseComplexMatrix&, 
+extern OCTAVE_API SparseComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const SparseMatrix&);
-extern SparseComplexMatrix operator * (const SparseComplexMatrix&, 
+extern OCTAVE_API SparseComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const SparseComplexMatrix&);
 
-extern ComplexMatrix operator * (const Matrix&,        
+extern OCTAVE_API ComplexMatrix operator * (const Matrix&,        
 				       const SparseComplexMatrix&);
-extern ComplexMatrix operator * (const ComplexMatrix&, 
+extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, 
 				       const SparseMatrix&);
-extern ComplexMatrix operator * (const ComplexMatrix&, 
+extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, 
 				       const SparseComplexMatrix&);
 
-extern ComplexMatrix operator * (const SparseMatrix&,        
+extern OCTAVE_API ComplexMatrix operator * (const SparseMatrix&,        
 				       const ComplexMatrix&);
-extern ComplexMatrix operator * (const SparseComplexMatrix&, 
+extern OCTAVE_API ComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const Matrix&);
-extern ComplexMatrix operator * (const SparseComplexMatrix&, 
+extern OCTAVE_API ComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const ComplexMatrix&);
 
-extern SparseComplexMatrix min (const Complex& c, 
+extern OCTAVE_API SparseComplexMatrix min (const Complex& c, 
 				const SparseComplexMatrix& m);
-extern SparseComplexMatrix min (const SparseComplexMatrix& m, 
+extern OCTAVE_API SparseComplexMatrix min (const SparseComplexMatrix& m, 
 				const Complex& c);
-extern SparseComplexMatrix min (const SparseComplexMatrix& a, 
+extern OCTAVE_API SparseComplexMatrix min (const SparseComplexMatrix& a, 
 				const SparseComplexMatrix& b);
 
-extern SparseComplexMatrix max (const Complex& c, 
+extern OCTAVE_API SparseComplexMatrix max (const Complex& c, 
 				const SparseComplexMatrix& m);
-extern SparseComplexMatrix max (const SparseComplexMatrix& m, 
+extern OCTAVE_API SparseComplexMatrix max (const SparseComplexMatrix& m, 
 				const Complex& c);
-extern SparseComplexMatrix max (const SparseComplexMatrix& a, 
+extern OCTAVE_API SparseComplexMatrix max (const SparseComplexMatrix& a, 
 				const SparseComplexMatrix& b);
 
 SPARSE_SMS_CMP_OP_DECLS (SparseComplexMatrix, Complex)
 SPARSE_SMS_BOOL_OP_DECLS (SparseComplexMatrix, Complex)
 
 SPARSE_SSM_CMP_OP_DECLS (Complex, SparseComplexMatrix)
 SPARSE_SSM_BOOL_OP_DECLS (Complex, SparseComplexMatrix)
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,58 @@
 2006-10-26  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* kpse.cc [! MSVC]: Don't include win32lib.h.
 
+	* liboctave/Array-C.cc, liboctave/Array-b.cc,
+	liboctave/Array-ch.cc, liboctave/Array-i.cc,
+	liboctave/Array-util.h, liboctave/Array.h, liboctave/CColVector.h,
+	liboctave/CMatrix.h, liboctave/CNDArray.h, liboctave/CRowVector.h,
+	liboctave/CSparse.h, liboctave/CmplxAEPBAL.h,
+	liboctave/CmplxCHOL.h, liboctave/CmplxDET.h,
+	liboctave/CmplxHESS.h, liboctave/CmplxLU.h, liboctave/CmplxQR.h,
+	liboctave/CmplxQRP.h, liboctave/CmplxSCHUR.h,
+	liboctave/CmplxSVD.h, liboctave/CollocWt.h, liboctave/DAE.h,
+	liboctave/DASPK.h, liboctave/DASRT.h, liboctave/DASSL.h,
+	liboctave/EIG.h, liboctave/LSODE.h, liboctave/MArray-C.cc,
+	liboctave/MArray-defs.h, liboctave/MSparse-C.cc,
+	liboctave/MSparse-d.cc, liboctave/MSparse-defs.h,
+	liboctave/MatrixType.h, liboctave/NLEqn.h, liboctave/Quad.h,
+	liboctave/Range.h, liboctave/Sparse-op-defs.h, liboctave/Sparse.h,
+	liboctave/SparseCmplxCHOL.h, liboctave/SparseCmplxLU.h,
+	liboctave/SparseCmplxQR.h, liboctave/SparseQR.h,
+	liboctave/SparsedbleCHOL.h, liboctave/SparsedbleLU.h,
+	liboctave/boolMatrix.h, liboctave/boolNDArray.h,
+	liboctave/boolSparse.h, liboctave/chMatrix.h,
+	liboctave/chNDArray.h, liboctave/cmd-edit.h, liboctave/cmd-hist.h,
+	liboctave/dColVector.h, liboctave/dDiagMatrix.h,
+	liboctave/dMatrix.h, liboctave/dNDArray.h, liboctave/dRowVector.h,
+	liboctave/dSparse.h, liboctave/data-conv.h,
+	liboctave/dbleAEPBAL.h, liboctave/dbleCHOL.h, liboctave/dbleDET.h,
+	liboctave/dbleHESS.h, liboctave/dbleLU.h, liboctave/dbleQR.h,
+	liboctave/dbleQRP.h, liboctave/dbleSCHUR.h, liboctave/dbleSVD.h,
+	liboctave/dir-ops.h, liboctave/file-ops.h, liboctave/file-stat.h,
+	liboctave/glob-match.h, liboctave/idx-vector.h,
+	liboctave/int16NDArray.cc, liboctave/int32NDArray.cc,
+	liboctave/int64NDArray.cc, liboctave/int8NDArray.cc,
+	liboctave/lo-cutils.c, liboctave/lo-ieee.h,
+	liboctave/lo-mappers.h, liboctave/lo-specfun.h,
+	liboctave/lo-utils.h, liboctave/mach-info.h,
+	liboctave/mx-op-defs.h, liboctave/oct-alloc.h,
+	liboctave/oct-env.h, liboctave/oct-group.h,
+	liboctave/oct-inttypes.cc, liboctave/oct-inttypes.h,
+	liboctave/oct-passwd.h, liboctave/oct-rand.h,
+	liboctave/oct-shlib.h, liboctave/oct-spparms.h,
+	liboctave/oct-syscalls.h, liboctave/oct-time.h,
+	liboctave/oct-uname.h, liboctave/pathsearch.h,
+	liboctave/prog-args.h, liboctave/so-array.h, liboctave/str-vec.h,
+	liboctave/uint16NDArray.cc, liboctave/uint32NDArray.cc,
+	liboctave/uint64NDArray.cc, liboctave/uint8NDArray.cc:
+	Sprinkle with OCTAVE_API as needed.
+
 2006-10-26  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.cc (INSTANTIATE_INTTYPE_BIN_OP): Provide explicit
 	type qualification for OP.
 
 2006-10-26  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (Sparse<T>::resize_no_fill (octave_idx_type,
diff --git a/liboctave/CmplxAEPBAL.h b/liboctave/CmplxAEPBAL.h
--- a/liboctave/CmplxAEPBAL.h
+++ b/liboctave/CmplxAEPBAL.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_ComplexAEPBALANCE_h 1
 
 #include <iostream>
 #include <string>
 
 #include "CMatrix.h"
 
 class
+OCTAVE_API
 ComplexAEPBALANCE
 {
 public:
 
   ComplexAEPBALANCE (void) : balanced_mat (), balancing_mat () { }
 
   ComplexAEPBALANCE (const ComplexMatrix& a, const std::string& balance_job)
     {
diff --git a/liboctave/CmplxCHOL.h b/liboctave/CmplxCHOL.h
--- a/liboctave/CmplxCHOL.h
+++ b/liboctave/CmplxCHOL.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexCHOL_h)
 #define octave_ComplexCHOL_h 1
 
 #include <iostream>
 
 #include "CMatrix.h"
 
 class
+OCTAVE_API
 ComplexCHOL
 {
 public:
 
   ComplexCHOL (void) : chol_mat () { }
 
   ComplexCHOL (const ComplexMatrix& a) { init (a); }
 
@@ -52,26 +53,26 @@ public:
 
       return *this;
     }
 
   ComplexMatrix chol_matrix (void) const { return chol_mat; }
 
   ComplexMatrix inverse (void) const;
 
-  friend std::ostream& operator << (std::ostream& os, const ComplexCHOL& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ComplexCHOL& a);
 
 private:
 
   ComplexMatrix chol_mat;
 
   octave_idx_type init (const ComplexMatrix& a);
 };
 
-ComplexMatrix chol2inv (const ComplexMatrix& r);
+ComplexMatrix OCTAVE_API chol2inv (const ComplexMatrix& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxDET.h b/liboctave/CmplxDET.h
--- a/liboctave/CmplxDET.h
+++ b/liboctave/CmplxDET.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <iostream>
 
 #include "oct-cmplx.h"
 
 // FIXME -- we could use templates here; compare with dbleDET.h
 
 class
+OCTAVE_API
 ComplexDET
 {
 friend class ComplexMatrix;
 friend class SparseComplexMatrix;
 
 public:
 
   ComplexDET (void) : c2 (0), c10 (0), e2 (0), e10 (0), base2 (false) { }
diff --git a/liboctave/CmplxHESS.h b/liboctave/CmplxHESS.h
--- a/liboctave/CmplxHESS.h
+++ b/liboctave/CmplxHESS.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexHESS_h)
 #define octave_ComplexHESS_h 1
 
 #include <iostream>
 
 #include "CMatrix.h"
 
 class
+OCTAVE_API
 ComplexHESS
 {
 public:
 
   ComplexHESS (void) : hess_mat (), unitary_hess_mat () { }
 
   ComplexHESS (const ComplexMatrix& a) { init (a); }
 
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexLU_h)
 #define octave_Complex_LU_h 1
 
 #include "base-lu.h"
 #include "dMatrix.h"
 #include "CMatrix.h"
 
 class
+OCTAVE_API
 ComplexLU : public base_lu <ComplexMatrix, Complex, Matrix, double>
 {
 public:
 
   ComplexLU (void)
     : base_lu <ComplexMatrix, Complex, Matrix, double> () { }
 
   ComplexLU (const ComplexMatrix& a);
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_ComplexQR_h 1
 
 #include <iostream>
 
 #include "CMatrix.h"
 #include "dbleQR.h"
 
 class
+OCTAVE_API
 ComplexQR
 {
 public:
 
   ComplexQR (void) : q (), r () { }
 
   ComplexQR (const ComplexMatrix&, QR::type = QR::std);
 
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ComplexQRP_h)
 #define octave_ComplexQRP_h 1
 
 #include <iostream>
 
 #include "CmplxQR.h"
 
 class
+OCTAVE_API
 ComplexQRP : public ComplexQR
 {
 public:
 
   ComplexQRP (void) : ComplexQR (), p () { }
 
   ComplexQRP (const ComplexMatrix&, QR::type = QR::std);
 
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_ComplexSCHUR_h 1
 
 #include <iostream>
 #include <string>
 
 #include "CMatrix.h"
 
 class
+OCTAVE_API
 ComplexSCHUR
 {
 public:
 
   ComplexSCHUR (void)
     : schur_mat (), unitary_mat () { }
 
   ComplexSCHUR (const ComplexMatrix& a, const std::string& ord,
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <iostream>
 
 #include "dDiagMatrix.h"
 #include "CMatrix.h"
 #include "dbleSVD.h"
 
 class
+OCTAVE_API
 ComplexSVD
 {
 public:
 
   ComplexSVD (void) { }
 
   ComplexSVD (const ComplexMatrix& a, SVD::type svd_type = SVD::std)
     {
diff --git a/liboctave/CollocWt.h b/liboctave/CollocWt.h
--- a/liboctave/CollocWt.h
+++ b/liboctave/CollocWt.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_CollocWt_h 1
 
 #include <iostream>
 
 #include "dMatrix.h"
 #include "dColVector.h"
 
 class
+OCTAVE_API
 CollocWt
 {
 public:
 
   CollocWt (void)
     : n (0), inc_left (0), inc_right (0), lb (0.0), rb (1.0),
       Alpha (0.0), Beta (0.0), r (), q (), A (), B (), initialized (0) { }
 
diff --git a/liboctave/DAE.h b/liboctave/DAE.h
--- a/liboctave/DAE.h
+++ b/liboctave/DAE.h
@@ -23,16 +23,17 @@ 02110-1301, USA.
 
 #if !defined (octave_DAE_h)
 #define octave_DAE_h 1
 
 #include "DAEFunc.h"
 #include "base-dae.h"
 
 class
+OCTAVE_API
 DAE : public base_diff_alg_eqn, public DAEFunc
 {
 public:
 
   DAE (void)
     : base_diff_alg_eqn (), DAEFunc () { }
 
   DAE (const ColumnVector& xx, double tt, DAEFunc& f)
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_DASPK_h 1
 
 #include <cfloat>
 #include <cmath>
 
 #include "DASPK-opts.h"
 
 class
+OCTAVE_API
 DASPK : public DAE, public DASPK_options
 {
 public:
 
   DASPK (void) : DAE (), DASPK_options (), initialized (false) { }
 
   DASPK (const ColumnVector& s, double tm, DAEFunc& f)
     : DAE (s, tm, f), DASPK_options (), initialized (false) { }
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -62,16 +62,17 @@ public:
 private:
 
   Matrix x;
   Matrix xdot;
   ColumnVector t;
 };
 
 class
+OCTAVE_API
 DASRT : public DAERT, public DASRT_options
 {
 public:
 
   DASRT (void) : DAERT (), DASRT_options (), initialized (false) { }
 
   DASRT (const ColumnVector& s, double tm, DAERTFunc& f)
     : DAERT (s, tm, f), DASRT_options (), initialized (false) { }
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_DASSL_h 1
 
 #include <cfloat>
 #include <cmath>
 
 #include "DASSL-opts.h"
 
 class
+OCTAVE_API
 DASSL : public DAE, public DASSL_options
 {
 public:
 
   DASSL (void) : DAE (), DASSL_options (), initialized (false) { }
 
   DASSL (const ColumnVector& s, double tm, DAEFunc& f)
     : DAE (s, tm, f), DASSL_options (), initialized (false) { }
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <iostream>
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "CColVector.h"
 
 class
+OCTAVE_API
 EIG
 {
 friend class Matrix;
 friend class ComplexMatrix;
 
 public:
 
   EIG (void)
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_LSODE_h 1
 
 #include <cfloat>
 #include <cmath>
 
 #include "LSODE-opts.h"
 
 class
+OCTAVE_API
 LSODE : public ODE, public LSODE_options
 {
 public:
 
   LSODE (void) : ODE (), LSODE_options (), initialized (false) { }
 
   LSODE (const ColumnVector& s, double tm, const ODEFunc& f)
     : ODE (s, tm, f), LSODE_options (), initialized (false) { }
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -27,38 +27,38 @@ 02110-1301, USA.
 
 // Instantiate MArrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "MArray.h"
 #include "MArray.cc"
 
-template class MArray<Complex>;
+template class OCTAVE_API MArray<Complex>;
 
 INSTANTIATE_MARRAY_FRIENDS (Complex)
 
 #include "MArray2.h"
 #include "MArray2.cc"
 
-template class MArray2<Complex>;
+template class OCTAVE_API MArray2<Complex>;
 
 INSTANTIATE_MARRAY2_FRIENDS (Complex)
 
 #include "MArrayN.h"
 #include "MArrayN.cc"
 
-template class MArrayN<Complex>;
+template class OCTAVE_API MArrayN<Complex>;
 
 INSTANTIATE_MARRAYN_FRIENDS (Complex)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
-template class MDiagArray2<Complex>;
+template class OCTAVE_API MDiagArray2<Complex>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (Complex)
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray-defs.h b/liboctave/MArray-defs.h
--- a/liboctave/MArray-defs.h
+++ b/liboctave/MArray-defs.h
@@ -57,25 +57,25 @@
 
 // All the OP= operators that we care about.
 #define MARRAY_OP_ASSIGN_DECLS(A_T, E_T, PFX, LTGT, RHS_T) \
   MARRAY_OP_ASSIGN_DECL (A_T, E_T, +=, PFX, LTGT, RHS_T); \
   MARRAY_OP_ASSIGN_DECL (A_T, E_T, -=, PFX, LTGT, RHS_T);
 
 // Generate forward declarations for OP= operators.
 #define MARRAY_OP_ASSIGN_FWD_DECLS(A_T, RHS_T) \
-  MARRAY_OP_ASSIGN_DECLS (A_T, T, template <typename T>, , RHS_T)
+  MARRAY_OP_ASSIGN_DECLS (A_T, T, template <typename T> OCTAVE_API, , RHS_T)
 
 // Generate friend declarations for the OP= operators.
 #define MARRAY_OP_ASSIGN_FRIENDS(A_T, RHS_T) \
   MARRAY_OP_ASSIGN_DECLS (A_T, T, friend, <>, RHS_T)
 
 // Instantiate the OP= operators.
 #define MARRAY_OP_ASSIGN_DEFS(A_T, E_T, RHS_T) \
-  MARRAY_OP_ASSIGN_DECLS (A_T, E_T, template, , RHS_T)
+  MARRAY_OP_ASSIGN_DECLS (A_T, E_T, template OCTAVE_API, , RHS_T)
 
 // A function that can be used to forward OP= operations from derived
 // classes back to us.
 #define MARRAY_OP_ASSIGN_FWD_FCN(R, F, T, C_X, X_T, C_Y, Y_T) \
   inline R \
   F (X_T& x, const Y_T& y) \
   { \
     return R (F (C_X (x), C_Y (y))); \
@@ -93,25 +93,25 @@
 
 // All the unary operators that we care about.
 #define MARRAY_UNOP_DECLS(A_T, E_T, PFX, LTGT) \
   MARRAY_UNOP (A_T, E_T, operator +, PFX, LTGT); \
   MARRAY_UNOP (A_T, E_T, operator -, PFX, LTGT);
 
 // Generate forward declarations for unary operators.
 #define MARRAY_UNOP_FWD_DECLS(A_T) \
-  MARRAY_UNOP_DECLS (A_T, T, template <typename T>, )
+  MARRAY_UNOP_DECLS (A_T, T, template <typename T> OCTAVE_API, )
 
 // Generate friend declarations for the unary operators.
 #define MARRAY_UNOP_FRIENDS(A_T) \
   MARRAY_UNOP_DECLS (A_T, T, friend, <>)
 
 // Instantiate the unary operators.
 #define MARRAY_UNOP_DEFS(A_T, E_T) \
-  MARRAY_UNOP_DECLS (A_T, E_T, template, )
+  MARRAY_UNOP_DECLS (A_T, E_T, template OCTAVE_API, )
 
 // A function that can be used to forward unary operations from derived
 // classes back to us.
 #define MARRAY_UNOP_FWD_FCN(R, F, T, C_X, X_T) \
   inline R \
   F (const X_T& x) \
   { \
     return R (F (C_X (x))); \
@@ -151,19 +151,19 @@
 
 #define MDIAGARRAY2_DADA_BINOP_DECLS(A_T, E_T, PFX, LTGT) \
   MARRAY_BINOP_DECL (A_T, E_T, operator +, PFX, LTGT, A_T<E_T>, A_T<E_T>); \
   MARRAY_BINOP_DECL (A_T, E_T, operator -, PFX, LTGT, A_T<E_T>, A_T<E_T>); \
   MARRAY_BINOP_DECL (A_T, E_T, product,    PFX, LTGT, A_T<E_T>, A_T<E_T>);
 
 // Generate forward declarations for binary operators.
 #define MARRAY_BINOP_FWD_DECLS(A_T) \
-  MARRAY_BINOP_DECLS (A_T, T, template <typename T>, , A_T<T>, T) \
-  MARRAY_BINOP_DECLS (A_T, T, template <typename T>, , T, A_T<T>) \
-  MARRAY_AA_BINOP_DECLS (A_T, T, template <typename T>, )
+  MARRAY_BINOP_DECLS (A_T, T, template <typename T> OCTAVE_API, , A_T<T>, T) \
+  MARRAY_BINOP_DECLS (A_T, T, template <typename T> OCTAVE_API, , T, A_T<T>) \
+  MARRAY_AA_BINOP_DECLS (A_T, T, template <typename T> OCTAVE_API, )
 
 #define MDIAGARRAY2_BINOP_FWD_DECLS(A_T) \
   MDIAGARRAY2_DAS_BINOP_DECLS (A_T, T, template <typename T>, , A_T<T>, T) \
   MDIAGARRAY2_SDA_BINOP_DECLS (A_T, T, template <typename T>, , T, A_T<T>) \
   MDIAGARRAY2_DADA_BINOP_DECLS (A_T, T, template <typename T>, )
 
 // Generate friend declarations for the binary operators.
 #define MARRAY_BINOP_FRIENDS(A_T) \
@@ -173,24 +173,24 @@
 
 #define MDIAGARRAY2_BINOP_FRIENDS(A_T) \
   MDIAGARRAY2_DAS_BINOP_DECLS (A_T, T, friend, <>, A_T<T>, T) \
   MDIAGARRAY2_SDA_BINOP_DECLS (A_T, T, friend, <>, T, A_T<T>) \
   MDIAGARRAY2_DADA_BINOP_DECLS (A_T, T, friend, <>)
 
 // Instantiate the binary operators.
 #define MARRAY_BINOP_DEFS(A_T, E_T) \
-  MARRAY_BINOP_DECLS (A_T, E_T, template, , A_T<E_T>, E_T) \
-  MARRAY_BINOP_DECLS (A_T, E_T, template, , E_T, A_T<E_T>) \
-  MARRAY_AA_BINOP_DECLS (A_T, E_T, template, )
+  MARRAY_BINOP_DECLS (A_T, E_T, template OCTAVE_API, , A_T<E_T>, E_T) \
+  MARRAY_BINOP_DECLS (A_T, E_T, template OCTAVE_API, , E_T, A_T<E_T>) \
+  MARRAY_AA_BINOP_DECLS (A_T, E_T, template OCTAVE_API, )
 
 #define MDIAGARRAY2_BINOP_DEFS(A_T, E_T) \
-  MDIAGARRAY2_DAS_BINOP_DECLS (A_T, E_T, template, , A_T<E_T>, E_T) \
-  MDIAGARRAY2_SDA_BINOP_DECLS (A_T, E_T, template, , E_T, A_T<E_T>) \
-  MDIAGARRAY2_DADA_BINOP_DECLS (A_T, E_T, template, )
+  MDIAGARRAY2_DAS_BINOP_DECLS (A_T, E_T, template OCTAVE_API, , A_T<E_T>, E_T) \
+  MDIAGARRAY2_SDA_BINOP_DECLS (A_T, E_T, template OCTAVE_API, , E_T, A_T<E_T>) \
+  MDIAGARRAY2_DADA_BINOP_DECLS (A_T, E_T, template OCTAVE_API, )
 
 // A function that can be used to forward binary operations from derived
 // classes back to us.
 #define MARRAY_BINOP_FWD_FCN(R, F, T, C_X, X_T, C_Y, Y_T) \
   inline R \
   F (const X_T& x, const Y_T& y) \
   { \
     return R (F (C_X (x), C_Y (y))); \
diff --git a/liboctave/MSparse-C.cc b/liboctave/MSparse-C.cc
--- a/liboctave/MSparse-C.cc
+++ b/liboctave/MSparse-C.cc
@@ -24,17 +24,17 @@ Boston, MA 02110-1301, USA.
 #include <config.h>
 #endif
 
 #include "oct-cmplx.h"
 
 #include "MSparse.h"
 #include "MSparse.cc"
 
-template class MSparse<Complex>;
+template class OCTAVE_API MSparse<Complex>;
 
 INSTANTIATE_SPARSE_FRIENDS (Complex);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MSparse-d.cc b/liboctave/MSparse-d.cc
--- a/liboctave/MSparse-d.cc
+++ b/liboctave/MSparse-d.cc
@@ -22,17 +22,17 @@ Boston, MA 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "MSparse.h"
 #include "MSparse.cc"
 
-template class MSparse<double>;
+template class OCTAVE_API MSparse<double>;
 
 INSTANTIATE_SPARSE_FRIENDS (double);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/MSparse-defs.h b/liboctave/MSparse-defs.h
--- a/liboctave/MSparse-defs.h
+++ b/liboctave/MSparse-defs.h
@@ -40,17 +40,17 @@ Boston, MA 02110-1301, USA.
   SPARSE_OP_ASSIGN_DECLS (A_T, T, template <typename T>, , RHS_T)
 
 // Generate friend declarations for the OP= operators.
 #define SPARSE_OP_ASSIGN_FRIENDS(A_T, RHS_T) \
   SPARSE_OP_ASSIGN_DECLS (A_T, T, friend, <>, RHS_T)
 
 // Instantiate the OP= operators.
 #define SPARSE_OP_ASSIGN_DEFS(A_T, E_T, RHS_T) \
-  SPARSE_OP_ASSIGN_DECLS (A_T, E_T, template, , RHS_T)
+  SPARSE_OP_ASSIGN_DECLS (A_T, E_T, template OCTAVE_API, , RHS_T)
 
 // A function that can be used to forward OP= operations from derived
 // classes back to us.
 #define SPARSE_OP_ASSIGN_FWD_FCN(R, F, T, C_X, X_T, C_Y, Y_T) \
   inline R \
   F (X_T& x, const Y_T& y) \
   { \
     return R (F (C_X (x), C_Y (y))); \
@@ -76,17 +76,17 @@ Boston, MA 02110-1301, USA.
   SPARSE_UNOP_DECLS (A_T, T, template <typename T>, )
 
 // Generate friend declarations for the unary operators.
 #define SPARSE_UNOP_FRIENDS(A_T) \
   SPARSE_UNOP_DECLS (A_T, T, friend, <>)
 
 // Instantiate the unary operators.
 #define SPARSE_UNOP_DEFS(A_T, E_T) \
-  SPARSE_UNOP_DECLS (A_T, E_T, template, )
+  SPARSE_UNOP_DECLS (A_T, E_T, template OCTAVE_API, )
 
 // A function that can be used to forward unary operations from derived
 // classes back to us.
 #define SPARSE_UNOP_FWD_FCN(R, F, T, C_X, X_T) \
   inline R \
   F (const X_T& x) \
   { \
     return R (F (C_X (x))); \
@@ -126,19 +126,19 @@ Boston, MA 02110-1301, USA.
 // Generate friend declarations for the binary operators.
 #define SPARSE_BINOP_FRIENDS(A_T, F_T)		     \
   SPARSE_BINOP_DECLS (A_T, F_T, T, friend, <>, A_T<T>, T)	\
   SPARSE_BINOP_DECLS (A_T, F_T, T, friend, <>, T, A_T<T>)	\
   SPARSE_AA_BINOP_DECLS (A_T, T, friend, <>)
 
 // Instantiate the binary operators.
 #define SPARSE_BINOP_DEFS(A_T, F_T, E_T) \
-  SPARSE_BINOP_DECLS (A_T, F_T, E_T, template, , A_T<E_T>, E_T)	\
-  SPARSE_BINOP_DECLS (A_T, F_T, E_T, template, , E_T, A_T<E_T>)	\
-  SPARSE_AA_BINOP_DECLS (A_T, E_T, template, )
+  SPARSE_BINOP_DECLS (A_T, F_T, E_T, template OCTAVE_API, , A_T<E_T>, E_T)	\
+  SPARSE_BINOP_DECLS (A_T, F_T, E_T, template OCTAVE_API, , E_T, A_T<E_T>)	\
+  SPARSE_AA_BINOP_DECLS (A_T, E_T, template OCTAVE_API, )
 
 // A function that can be used to forward binary operations from derived
 // classes back to us.
 #define SPARSE_BINOP_FWD_FCN(R, F, T, C_X, X_T, C_Y, Y_T) \
   inline R \
   F (const X_T& x, const Y_T& y) \
   { \
     return R (F (C_X (x), C_Y (y))); \
diff --git a/liboctave/MatrixType.h b/liboctave/MatrixType.h
--- a/liboctave/MatrixType.h
+++ b/liboctave/MatrixType.h
@@ -24,16 +24,17 @@ Boston, MA 02110-1301, USA.
 #define octave_MatrixType_h
 
 class Matrix;
 class ComplexMatrix;
 class SparseMatrix;
 class SparseComplexMatrix;
 
 class
+OCTAVE_API
 MatrixType
 {
 public:
   enum matrix_type {
     Unknown = 0,
     Full,
     Diagonal,
     Permuted_Diagonal,
diff --git a/liboctave/NLEqn.h b/liboctave/NLEqn.h
--- a/liboctave/NLEqn.h
+++ b/liboctave/NLEqn.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_NLEqn_h 1
 
 #include <cfloat>
 #include <cmath>
 
 #include "NLEqn-opts.h"
 
 class
+OCTAVE_API
 NLEqn : public NLFunc, public NLEqn_options
 {
 public:
 
   NLEqn (void)
     : NLFunc (), NLEqn_options (), x (), solution_status (0) { }
 
   NLEqn (const ColumnVector& xx, const NLFunc f) 
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -35,21 +35,22 @@ 02110-1301, USA.
 typedef double (*integrand_fcn) (double x);
 
 #endif
 
 // FIXME -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
-extern int quad_integration_error;
+extern OCTAVE_API int quad_integration_error;
 
 #include "Quad-opts.h"
 
 class
+OCTAVE_API
 Quad : public Quad_options
 {
  public:
 
   Quad (integrand_fcn fcn)
     : Quad_options (), f (fcn) { }
 
   virtual ~Quad (void) { }
@@ -82,16 +83,17 @@ Quad : public Quad_options
   virtual double do_integrate (octave_idx_type& ier, octave_idx_type& neval, double& abserr) = 0;
 
  protected:
 
   integrand_fcn f;
 };
 
 class
+OCTAVE_API
 DefQuad : public Quad
 {
  public:
 
   DefQuad (integrand_fcn fcn)
     : Quad (fcn), lower_limit (0.0), upper_limit (1.0), singularities () { }
 
   DefQuad (integrand_fcn fcn, double ll, double ul)
@@ -114,16 +116,17 @@ DefQuad : public Quad
 
   double lower_limit;
   double upper_limit;
 
   ColumnVector singularities;
 };
 
 class
+OCTAVE_API
 IndefQuad : public Quad
 {
  public:
 
   enum IntegralType { bound_to_inf, neg_inf_to_bound, doubly_infinite };
 
   IndefQuad (integrand_fcn fcn)
     : Quad (fcn), bound (0.0), type (bound_to_inf) { }
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -23,16 +23,17 @@ 02110-1301, USA.
 
 #if !defined (octave_Range_h)
 #define octave_Range_h 1
 
 #include <iostream>
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 Range
 {
  public:
 
   Range (void)
     : rng_base (0), rng_limit (0), rng_inc (0), rng_nelem (0), cache (1, 0) { }
 
   Range (const Range& r)
@@ -83,18 +84,18 @@ Range
   {
     if (rng_inc != i)
       {
 	rng_inc = i;
 	clear_cache ();
       }
   }
 
-  friend std::ostream& operator << (std::ostream& os, const Range& r);
-  friend std::istream& operator >> (std::istream& is, Range& r);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const Range& r);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, Range& r);
 
   void print_range (void);
 
  private:
 
   double rng_base;
   double rng_limit;
   double rng_inc;
@@ -103,17 +104,17 @@ Range
 
   mutable Matrix cache;
 
   octave_idx_type nelem_internal (void) const;
 
   void clear_cache (void) const { cache.resize (0, 0); }
 };
 
-extern Range operator - (const Range& r);
+extern OCTAVE_API Range operator - (const Range& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -21,23 +21,23 @@ Boston, MA 02110-1301, USA.
 */
 
 #if !defined (octave_sparse_op_defs_h)
 #define octave_sparse_op_defs_h 1
 
 #include "Array-util.h"
 
 #define SPARSE_BIN_OP_DECL(R, OP, X, Y) \
-  extern R OP (const X&, const Y&)
+  extern OCTAVE_API R OP (const X&, const Y&)
 
 #define SPARSE_CMP_OP_DECL(OP, X, Y) \
-  extern SparseBoolMatrix OP (const X&, const Y&)
+  extern OCTAVE_API SparseBoolMatrix OP (const X&, const Y&)
 
 #define SPARSE_BOOL_OP_DECL(OP, X, Y) \
-  extern SparseBoolMatrix OP (const X&, const Y&)
+  extern OCTAVE_API SparseBoolMatrix OP (const X&, const Y&)
 
 // matrix by scalar operations.
 
 #define SPARSE_SMS_BIN_OP_DECLS(R1, R2, M, S)  \
   SPARSE_BIN_OP_DECL (R1, operator +, M, S); \
   SPARSE_BIN_OP_DECL (R1, operator -, M, S); \
   SPARSE_BIN_OP_DECL (R2, operator *, M, S); \
   SPARSE_BIN_OP_DECL (R2, operator /, M, S);
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -43,17 +43,17 @@ template <class T>
 class
 Sparse
 {
 protected:
   //--------------------------------------------------------------------
   // The real representation of all Sparse arrays.
   //--------------------------------------------------------------------
 
-  class SparseRep
+  class OCTAVE_API SparseRep
   {
   public:
 
     T *d;
     octave_idx_type *r;
     octave_idx_type *c;
     octave_idx_type nzmx;
     octave_idx_type nrows;
@@ -524,21 +524,21 @@ template <class LT, class RT>
 /* friend */ int
 assign (Sparse<LT>& lhs, const Sparse<RT>& rhs);
 
 template <class LT, class RT>
 /* friend */ int
 assign1 (Sparse<LT>& lhs, const Sparse<RT>& rhs);
 
 #define INSTANTIATE_SPARSE_ASSIGN(LT, RT) \
-  template int assign (Sparse<LT>&, const Sparse<RT>&); \
-  template int assign1 (Sparse<LT>&, const Sparse<RT>&);
+  template OCTAVE_API int assign (Sparse<LT>&, const Sparse<RT>&); \
+  template OCTAVE_API int assign1 (Sparse<LT>&, const Sparse<RT>&);
 
 #define INSTANTIATE_SPARSE(T) \
-  template class Sparse<T>;
+  template class OCTAVE_API Sparse<T>;
 
 #define INSTANTIATE_SPARSE_AND_ASSIGN(T) \
   INSTANTIATE_SPARSE (T); \
   INSTANTIATE_SPARSE_ASSIGN (T, T)
 
 #endif
 
 /*
diff --git a/liboctave/SparseCmplxCHOL.h b/liboctave/SparseCmplxCHOL.h
--- a/liboctave/SparseCmplxCHOL.h
+++ b/liboctave/SparseCmplxCHOL.h
@@ -23,16 +23,17 @@ Boston, MA 02110-1301, USA.
 #if !defined (octave_sparse_complex_CHOL_h)
 #define octave_sparse_complex_CHOL_h 1
 
 #include "sparse-base-chol.h"
 #include "dSparse.h"
 #include "CSparse.h"
 
 class
+OCTAVE_API
 SparseComplexCHOL : 
   public sparse_base_chol <SparseComplexMatrix, Complex, SparseMatrix>
 {
 public:
 
   SparseComplexCHOL (void) : 
     sparse_base_chol<SparseComplexMatrix, Complex, SparseMatrix> () { }
 
@@ -86,17 +87,17 @@ public:
 	SparseMatrix>:: rcond (); }
 
   // Compute the inverse of a matrix using the Cholesky factorization.
   SparseComplexMatrix inverse (void) const
     { return sparse_base_chol<SparseComplexMatrix, Complex, 
 	SparseMatrix>:: inverse (); }
 };
 
-SparseComplexMatrix chol2inv (const SparseComplexMatrix& r);
+SparseComplexMatrix OCTAVE_API chol2inv (const SparseComplexMatrix& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/SparseCmplxLU.h b/liboctave/SparseCmplxLU.h
--- a/liboctave/SparseCmplxLU.h
+++ b/liboctave/SparseCmplxLU.h
@@ -23,16 +23,17 @@ Boston, MA 02110-1301, USA.
 #if !defined (octave_sparse_complex_LU_h)
 #define octave_sparse_complex_LU_h 1
 
 #include "sparse-base-lu.h"
 #include "dSparse.h"
 #include "CSparse.h"
 
 class
+OCTAVE_API
 SparseComplexLU 
   : public sparse_base_lu <SparseComplexMatrix, Complex, SparseMatrix, double>
 {
 public:
 
   SparseComplexLU (void) 
     : sparse_base_lu <SparseComplexMatrix, Complex, SparseMatrix, double> () { }
 
diff --git a/liboctave/SparseCmplxQR.h b/liboctave/SparseCmplxQR.h
--- a/liboctave/SparseCmplxQR.h
+++ b/liboctave/SparseCmplxQR.h
@@ -32,16 +32,17 @@ Boston, MA 02110-1301, USA.
 
 #ifdef IDX_TYPE_LONG
 #define CXSPARSE_ZNAME(name) cs_cl ## name
 #else
 #define CXSPARSE_ZNAME(name) cs_ci ## name
 #endif
 
 class
+OCTAVE_API
 SparseComplexQR
 {
 protected:
   class SparseComplexQR_rep
   {
   public:
     SparseComplexQR_rep (const SparseComplexMatrix& a, int order);
 
diff --git a/liboctave/SparseQR.h b/liboctave/SparseQR.h
--- a/liboctave/SparseQR.h
+++ b/liboctave/SparseQR.h
@@ -32,16 +32,17 @@ Boston, MA 02110-1301, USA.
 
 #ifdef IDX_TYPE_LONG
 #define CXSPARSE_DNAME(name) cs_dl ## name
 #else
 #define CXSPARSE_DNAME(name) cs_di ## name
 #endif
 
 class
+OCTAVE_API
 SparseQR
 {
 protected:
   class SparseQR_rep
   {
   public:
     SparseQR_rep (const SparseMatrix& a, int order);
 
diff --git a/liboctave/SparsedbleCHOL.h b/liboctave/SparsedbleCHOL.h
--- a/liboctave/SparsedbleCHOL.h
+++ b/liboctave/SparsedbleCHOL.h
@@ -22,16 +22,17 @@ Boston, MA 02110-1301, USA.
 
 #if !defined (octave_sparse_CHOL_h)
 #define octave_sparse_CHOL_h 1
 
 #include "sparse-base-chol.h"
 #include "dSparse.h"
 
 class
+OCTAVE_API
 SparseCHOL : public sparse_base_chol <SparseMatrix, double, SparseMatrix>
 {
 public:
 
   SparseCHOL (void) : sparse_base_chol<SparseMatrix, double, SparseMatrix> () { }
 
   SparseCHOL (const SparseMatrix& a, bool natural = true) : 
     sparse_base_chol<SparseMatrix, double, SparseMatrix> (a, natural) { }
@@ -74,17 +75,17 @@ public:
     { return sparse_base_chol<SparseMatrix, double, SparseMatrix>:: rcond (); }
 
   // Compute the inverse of a matrix using the Cholesky factorization.
   SparseMatrix inverse (void) const
    { return sparse_base_chol<SparseMatrix, double, SparseMatrix>:: 
        inverse (); }
 };
 
-SparseMatrix chol2inv (const SparseMatrix& r);
+SparseMatrix OCTAVE_API chol2inv (const SparseMatrix& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/SparsedbleLU.h b/liboctave/SparsedbleLU.h
--- a/liboctave/SparsedbleLU.h
+++ b/liboctave/SparsedbleLU.h
@@ -22,16 +22,17 @@ Boston, MA 02110-1301, USA.
 
 #if !defined (octave_sparse_LU_h)
 #define octave_sparse_LU_h 1
 
 #include "sparse-base-lu.h"
 #include "dSparse.h"
 
 class
+OCTAVE_API
 SparseLU : public sparse_base_lu <SparseMatrix, double, SparseMatrix, double>
 {
 public:
 
   SparseLU (void) 
     : sparse_base_lu <SparseMatrix, double, SparseMatrix, double> () { }
 
   SparseLU (const SparseMatrix& a, double piv_thres = -1.0);
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_boolMatrix_int_h 1
 
 #include "Array2.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 class
+OCTAVE_API
 boolMatrix : public Array2<bool>
 {
 public:
 
   boolMatrix (void) : Array2<bool> () { }
   boolMatrix (octave_idx_type r, octave_idx_type c) : Array2<bool> (r, c) { }
   boolMatrix (octave_idx_type r, octave_idx_type c, bool val) : Array2<bool> (r, c, val) { }
   boolMatrix (const Array2<bool>& a) : Array2<bool> (a) { }
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 #include "CMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 #include "boolMatrix.h"
 
 class
+OCTAVE_API
 boolNDArray : public ArrayN<bool>
 {
 public:
 
   boolNDArray (void) : ArrayN<bool> () { }
 
   boolNDArray (const dim_vector& dv) : ArrayN<bool> (dv) { }
 
diff --git a/liboctave/boolSparse.h b/liboctave/boolSparse.h
--- a/liboctave/boolSparse.h
+++ b/liboctave/boolSparse.h
@@ -23,16 +23,17 @@ Boston, MA 02110-1301, USA.
 #if !defined (octave_boolSparse_h)
 #define octave_boolSparse_h 1
 
 #include "Sparse.h"
 #include "MSparse-defs.h"
 #include "Sparse-op-defs.h"
 
 class
+OCTAVE_API
 SparseBoolMatrix : public Sparse<bool>
 {
 public:
 
   SparseBoolMatrix (void) : Sparse<bool> () { }
 
   SparseBoolMatrix (octave_idx_type r, octave_idx_type c) : Sparse<bool> (r, c) { }
 
@@ -103,18 +104,18 @@ public:
 
   // other operations
 
   SparseBoolMatrix all (int dim = -1) const;
   SparseBoolMatrix any (int dim = -1) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const SparseBoolMatrix& a);
-  friend std::istream& operator >> (std::istream& is, SparseBoolMatrix& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const SparseBoolMatrix& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, SparseBoolMatrix& a);
 };
 
 SPARSE_SMS_EQNE_OP_DECLS (SparseBoolMatrix, bool)
 SPARSE_SMS_BOOL_OP_DECLS (SparseBoolMatrix, bool)
 
 SPARSE_SSM_EQNE_OP_DECLS (bool, SparseBoolMatrix)
 SPARSE_SSM_BOOL_OP_DECLS (bool, SparseBoolMatrix)
 
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -27,16 +27,17 @@ 02110-1301, USA.
 #include <string>
 
 #include "MArray2.h"
 
 #include "mx-defs.h"
 #include "str-vec.h"
 
 class
+OCTAVE_API
 charMatrix : public MArray2<char>
 {
 friend class ComplexMatrix;
 
 public:
 
   charMatrix (void) : MArray2<char> () { }
   charMatrix (octave_idx_type r, octave_idx_type c) : MArray2<char> (r, c) { }
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include "MArrayN.h"
 #include "chMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 class
+OCTAVE_API
 charNDArray : public MArrayN<char>
 {
 public:
 
   charNDArray (void) : MArrayN<char> () { }
 
   charNDArray (dim_vector& dv) : MArrayN<char> (dv) { }
 
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <cstdio>
 
 #include <string>
 
 #include "str-vec.h"
 
 class
+OCTAVE_API
 command_editor
 {
 protected:
 
   command_editor (void)
     : command_number (0) { }
 
 public:
diff --git a/liboctave/cmd-hist.h b/liboctave/cmd-hist.h
--- a/liboctave/cmd-hist.h
+++ b/liboctave/cmd-hist.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_cmd_hist_h)
 #define octave_cmd_hist_h 1
 
 #include <string>
 
 #include "str-vec.h"
 
 class
+OCTAVE_API
 command_history
 {
 protected:
 
   command_history (void)
     : ignoring_additions (false), lines_in_file (0),
       lines_this_session (0), xfile (), xsize (-1) { }
 
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_ColumnVector_h)
 #define octave_ColumnVector_h 1
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 ColumnVector : public MArray<double>
 {
 public:
 
   ColumnVector (void) : MArray<double> () { }
 
   explicit ColumnVector (octave_idx_type n) : MArray<double> (n) { }
 
@@ -58,56 +59,56 @@ public:
 
   ColumnVector& fill (double val);
   ColumnVector& fill (double val, octave_idx_type r1, octave_idx_type r2);
 
   ColumnVector stack (const ColumnVector& a) const;
 
   RowVector transpose (void) const;
 
-  friend ColumnVector real (const ComplexColumnVector& a);
-  friend ColumnVector imag (const ComplexColumnVector& a);
+  friend OCTAVE_API ColumnVector real (const ComplexColumnVector& a);
+  friend OCTAVE_API ColumnVector imag (const ComplexColumnVector& a);
 
   // resize is the destructive equivalent for this one
 
   ColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;
 
   ColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;
 
   // matrix by column vector -> column vector operations
 
-  friend ColumnVector operator * (const Matrix& a, const ColumnVector& b);
+  friend OCTAVE_API ColumnVector operator * (const Matrix& a, const ColumnVector& b);
 
   // diagonal matrix by column vector -> column vector operations
 
-  friend ColumnVector operator * (const DiagMatrix& a, const ColumnVector& b);
+  friend OCTAVE_API ColumnVector operator * (const DiagMatrix& a, const ColumnVector& b);
 
   // other operations
 
   ColumnVector map (d_d_Mapper f) const;
 
   ColumnVector& apply (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const ColumnVector& a);
-  friend std::istream& operator >> (std::istream& is, ColumnVector& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ColumnVector& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, ColumnVector& a);
 
 private:
 
   ColumnVector (double *d, octave_idx_type l) : MArray<double> (d, l) { }
 };
 
 // Publish externally used friend functions.
 
-extern ColumnVector real (const ComplexColumnVector& a);
-extern ColumnVector imag (const ComplexColumnVector& a);
+extern OCTAVE_API ColumnVector real (const ComplexColumnVector& a);
+extern OCTAVE_API ColumnVector imag (const ComplexColumnVector& a);
 
 MARRAY_FORWARD_DEFS (MArray, ColumnVector, double)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -27,16 +27,17 @@ 02110-1301, USA.
 #include "MDiagArray2.h"
 
 #include "dRowVector.h"
 #include "dColVector.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 DiagMatrix : public MDiagArray2<double>
 {
 friend class SVD;
 friend class ComplexSVD;
 
 public:
 
   DiagMatrix (void) : MDiagArray2<double> () { }
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -27,16 +27,17 @@ 02110-1301, USA.
 #include "MArray2.h"
 #include "MDiagArray2.h"
 #include "MatrixType.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 class
+OCTAVE_API
 Matrix : public MArray2<double>
 {
 public:
 
   typedef void (*solve_singularity_handler) (double rcond);
 
   Matrix (void) : MArray2<double> () { }
 
@@ -84,18 +85,18 @@ public:
   Matrix append (const ColumnVector& a) const;
   Matrix append (const DiagMatrix& a) const;
 
   Matrix stack (const Matrix& a) const;
   Matrix stack (const RowVector& a) const;
   Matrix stack (const ColumnVector& a) const;
   Matrix stack (const DiagMatrix& a) const;
 
-  friend Matrix real (const ComplexMatrix& a);
-  friend Matrix imag (const ComplexMatrix& a);
+  friend OCTAVE_API Matrix real (const ComplexMatrix& a);
+  friend OCTAVE_API Matrix imag (const ComplexMatrix& a);
 
   Matrix transpose (void) const { return MArray2<double>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   Matrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   Matrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
@@ -269,50 +270,50 @@ public:
   RowVector column_min (void) const;
   RowVector column_max (void) const;
 
   RowVector column_min (Array<octave_idx_type>& index) const;
   RowVector column_max (Array<octave_idx_type>& index) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const Matrix& a);
-  friend std::istream& operator >> (std::istream& is, Matrix& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const Matrix& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, Matrix& a);
 
   static double resize_fill_value (void) { return 0; }
 
 private:
 
   Matrix (double *d, octave_idx_type r, octave_idx_type c) : MArray2<double> (d, r, c) { }
 };
 
 // Publish externally used friend functions.
 
-extern Matrix real (const ComplexMatrix& a);
-extern Matrix imag (const ComplexMatrix& a);
+extern OCTAVE_API Matrix real (const ComplexMatrix& a);
+extern OCTAVE_API Matrix imag (const ComplexMatrix& a);
 
 // column vector by row vector -> matrix operations
 
-extern Matrix operator * (const ColumnVector& a, const RowVector& b);
+extern OCTAVE_API Matrix operator * (const ColumnVector& a, const RowVector& b);
 
 // Other functions.
 
-extern Matrix Givens (double, double);
+extern OCTAVE_API Matrix Givens (double, double);
 
-extern Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
+extern OCTAVE_API Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
 
-extern Matrix operator * (const Matrix& a, const Matrix& b);
+extern OCTAVE_API Matrix operator * (const Matrix& a, const Matrix& b);
 
-extern Matrix min (double d, const Matrix& m);
-extern Matrix min (const Matrix& m, double d);
-extern Matrix min (const Matrix& a, const Matrix& b);
+extern OCTAVE_API Matrix min (double d, const Matrix& m);
+extern OCTAVE_API Matrix min (const Matrix& m, double d);
+extern OCTAVE_API Matrix min (const Matrix& a, const Matrix& b);
 
-extern Matrix max (double d, const Matrix& m);
-extern Matrix max (const Matrix& m, double d);
-extern Matrix max (const Matrix& a, const Matrix& b);
+extern OCTAVE_API Matrix max (double d, const Matrix& m);
+extern OCTAVE_API Matrix max (const Matrix& m, double d);
+extern OCTAVE_API Matrix max (const Matrix& a, const Matrix& b);
 
 MS_CMP_OP_DECLS (Matrix, double)
 MS_BOOL_OP_DECLS (Matrix, double)
 
 SM_CMP_OP_DECLS (double, Matrix)
 SM_BOOL_OP_DECLS (double, Matrix)
 
 MM_CMP_OP_DECLS (Matrix, Matrix)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -27,16 +27,17 @@ 02110-1301, USA.
 #include "MArrayN.h"
 #include "dMatrix.h"
 #include "intNDArray.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 class
+OCTAVE_API
 NDArray : public MArrayN<double>
 {
 public:
 
   NDArray (void) : MArrayN<double> () { }
 
   NDArray (const dim_vector& dv) : MArrayN<double> (dv) { }
 
@@ -97,54 +98,54 @@ public:
   ComplexNDArray ifourier (int dim = 1) const;
 
   ComplexNDArray fourier2d (void) const;
   ComplexNDArray ifourier2d (void) const;
 
   ComplexNDArray fourierNd (void) const;
   ComplexNDArray ifourierNd (void) const;
 
-  friend NDArray real (const ComplexNDArray& a);
-  friend NDArray imag (const ComplexNDArray& a);
+  friend OCTAVE_API NDArray real (const ComplexNDArray& a);
+  friend OCTAVE_API NDArray imag (const ComplexNDArray& a);
 
   Matrix matrix_value (void) const;
 
   NDArray squeeze (void) const { return MArrayN<double>::squeeze (); }
 
   static void increment_index (Array<octave_idx_type>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
   static octave_idx_type compute_index (Array<octave_idx_type>& ra_idx,
 			    const dim_vector& dimensions);
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const NDArray& a);
-  friend std::istream& operator >> (std::istream& is, NDArray& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const NDArray& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, NDArray& a);
 
   static double resize_fill_value (void) { return 0; }
 
 private:
 
   NDArray (double *d, const dim_vector& dv) : MArrayN<double> (d, dv) { }
 };
 
 // Publish externally used friend functions.
 
-extern NDArray real (const ComplexNDArray& a);
-extern NDArray imag (const ComplexNDArray& a);
+extern OCTAVE_API NDArray real (const ComplexNDArray& a);
+extern OCTAVE_API NDArray imag (const ComplexNDArray& a);
 
-extern NDArray min (double d, const NDArray& m);
-extern NDArray min (const NDArray& m, double d);
-extern NDArray min (const NDArray& a, const NDArray& b);
+extern OCTAVE_API NDArray min (double d, const NDArray& m);
+extern OCTAVE_API NDArray min (const NDArray& m, double d);
+extern OCTAVE_API NDArray min (const NDArray& a, const NDArray& b);
 
-extern NDArray max (double d, const NDArray& m);
-extern NDArray max (const NDArray& m, double d);
-extern NDArray max (const NDArray& a, const NDArray& b);
+extern OCTAVE_API NDArray max (double d, const NDArray& m);
+extern OCTAVE_API NDArray max (const NDArray& m, double d);
+extern OCTAVE_API NDArray max (const NDArray& a, const NDArray& b);
 
 NDS_CMP_OP_DECLS (NDArray, double)
 NDS_BOOL_OP_DECLS (NDArray, double)
 
 SND_CMP_OP_DECLS (double, NDArray)
 SND_BOOL_OP_DECLS (double, NDArray)
 
 NDND_CMP_OP_DECLS (NDArray, NDArray)
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_RowVector_h)
 #define octave_RowVector_h 1
 
 #include "MArray.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 RowVector : public MArray<double>
 {
 public:
 
   RowVector (void) : MArray<double> () { }
 
   explicit RowVector (octave_idx_type n) : MArray<double> (n) { }
 
@@ -58,57 +59,57 @@ public:
 
   RowVector& fill (double val);
   RowVector& fill (double val, octave_idx_type c1, octave_idx_type c2);
 
   RowVector append (const RowVector& a) const;
 
   ColumnVector transpose (void) const;
 
-  friend RowVector real (const ComplexRowVector& a);
-  friend RowVector imag (const ComplexRowVector& a);
+  friend OCTAVE_API RowVector real (const ComplexRowVector& a);
+  friend OCTAVE_API RowVector imag (const ComplexRowVector& a);
 
   // resize is the destructive equivalent for this one
 
   RowVector extract (octave_idx_type c1, octave_idx_type c2) const;
 
   RowVector extract_n (octave_idx_type c1, octave_idx_type n) const;
 
   // row vector by matrix -> row vector
 
-  friend RowVector operator * (const RowVector& a, const Matrix& b);
+  friend OCTAVE_API RowVector operator * (const RowVector& a, const Matrix& b);
 
   // other operations
 
   RowVector map (d_d_Mapper f) const;
 
   RowVector& apply (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const RowVector& a);
-  friend std::istream& operator >> (std::istream& is, RowVector& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const RowVector& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, RowVector& a);
 
 private:
 
   RowVector (double *d, octave_idx_type l) : MArray<double> (d, l) { }
 };
 
 // row vector by column vector -> scalar
 
-double operator * (const RowVector& a, const ColumnVector& b);
+double OCTAVE_API operator * (const RowVector& a, const ColumnVector& b);
 
-Complex operator * (const RowVector& a, const ComplexColumnVector& b);
+Complex OCTAVE_API operator * (const RowVector& a, const ComplexColumnVector& b);
 
 // other operations
 
-RowVector linspace (double x1, double x2, octave_idx_type n);
+OCTAVE_API RowVector linspace (double x1, double x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, RowVector, double)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -34,16 +34,17 @@ Boston, MA 02110-1301, USA.
 #include "MSparse-defs.h"
 #include "Sparse-op-defs.h"
 #include "MatrixType.h"
 
 class SparseComplexMatrix;
 class SparseBoolMatrix;
 
 class
+OCTAVE_API
 SparseMatrix : public MSparse<double>
 {
  public:
 
   typedef void (*solve_singularity_handler) (double rcond);
 
   SparseMatrix (void) : MSparse<double> () { }
 
@@ -96,22 +97,22 @@ SparseMatrix : public MSparse<double>
   // destructive insert/delete/reorder operations
 
   SparseMatrix& insert (const SparseMatrix& a, octave_idx_type r, octave_idx_type c);
 
   SparseMatrix concat (const SparseMatrix& rb, const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
 			      const Array<octave_idx_type>& ra_idx);
 
-  friend SparseMatrix real (const SparseComplexMatrix& a);
-  friend SparseMatrix imag (const SparseComplexMatrix& a);
+  friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
+  friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  friend SparseMatrix atan2 (const double& x, const SparseMatrix& y);
-  friend SparseMatrix atan2 (const SparseMatrix& x, const double& y);
-  friend SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
+  friend OCTAVE_API SparseMatrix atan2 (const double& x, const SparseMatrix& y);
+  friend OCTAVE_API SparseMatrix atan2 (const SparseMatrix& x, const double& y);
+  friend OCTAVE_API SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const 
     { 
       return MSparse<double>::transpose (); 
     }
   SparseMatrix hermitian (void) const { return transpose (); }
 
 private:
@@ -401,41 +402,41 @@ public:
   SparseMatrix reshape (const dim_vector& new_dims) const;
 
   SparseMatrix permute (const Array<octave_idx_type>& vec, bool inv = false) const;
 
   SparseMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const SparseMatrix& a);
-  friend std::istream& operator >> (std::istream& is, SparseMatrix& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const SparseMatrix& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, SparseMatrix& a);
 };
 
 // Publish externally used friend functions.
 
-extern SparseMatrix real (const SparseComplexMatrix& a);
-extern SparseMatrix imag (const SparseComplexMatrix& a);
+extern OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
+extern OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
 // Other operators.
 
-extern SparseMatrix operator * (const SparseMatrix& a, 
+extern OCTAVE_API SparseMatrix operator * (const SparseMatrix& a, 
 				const SparseMatrix& b);
-extern Matrix operator * (const Matrix& a, 
+extern OCTAVE_API Matrix operator * (const Matrix& a, 
 				const SparseMatrix& b);
-extern Matrix operator * (const SparseMatrix& a, 
+extern OCTAVE_API Matrix operator * (const SparseMatrix& a, 
 				const Matrix& b);
 
-extern SparseMatrix min (double d, const SparseMatrix& m);
-extern SparseMatrix min (const SparseMatrix& m, double d);
-extern SparseMatrix min (const SparseMatrix& a, const SparseMatrix& b);
+extern OCTAVE_API SparseMatrix min (double d, const SparseMatrix& m);
+extern OCTAVE_API SparseMatrix min (const SparseMatrix& m, double d);
+extern OCTAVE_API SparseMatrix min (const SparseMatrix& a, const SparseMatrix& b);
 
-extern SparseMatrix max (double d, const SparseMatrix& m);
-extern SparseMatrix max (const SparseMatrix& m, double d);
-extern SparseMatrix max (const SparseMatrix& a, const SparseMatrix& b);
+extern OCTAVE_API SparseMatrix max (double d, const SparseMatrix& m);
+extern OCTAVE_API SparseMatrix max (const SparseMatrix& m, double d);
+extern OCTAVE_API SparseMatrix max (const SparseMatrix& a, const SparseMatrix& b);
 
 SPARSE_SMS_CMP_OP_DECLS (SparseMatrix, double)
 SPARSE_SMS_BOOL_OP_DECLS (SparseMatrix, double)
 
 SPARSE_SSM_CMP_OP_DECLS (double, SparseMatrix)
 SPARSE_SSM_BOOL_OP_DECLS (double, SparseMatrix)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseMatrix, SparseMatrix)
diff --git a/liboctave/data-conv.h b/liboctave/data-conv.h
--- a/liboctave/data-conv.h
+++ b/liboctave/data-conv.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_data_conv_h)
 #define octave_data_conv_h 1
 
 #include <climits>
 
 #include "mach-info.h"
 
 class
+OCTAVE_API
 oct_data_conv
 {
 public:
 
   enum data_type
     {
       dt_int8      =  0,
       dt_uint8     =  1,
@@ -86,38 +87,38 @@ enum save_type
     LS_SHORT   = 4,
     LS_INT     = 5,
     LS_FLOAT   = 6,
     LS_DOUBLE  = 7,
     LS_U_LONG  = 8,
     LS_LONG    = 9
   };
 
-extern void
+extern OCTAVE_API void
 do_double_format_conversion (void *data, int len,
 			     oct_mach_info::float_format from_fmt,
 			     oct_mach_info::float_format to_fmt
 			       = oct_mach_info::native_float_format ());
 
-extern void
+extern OCTAVE_API void
 do_float_format_conversion (void *data, int len,
 			    oct_mach_info::float_format from_fmt,
 			    oct_mach_info::float_format to_fmt
 			      = oct_mach_info::native_float_format ());
 
-extern void
+extern OCTAVE_API void
 do_float_format_conversion (void *data, size_t sz, int len,
 			    oct_mach_info::float_format from_fmt,
 			    oct_mach_info::float_format to_fmt
 			      = oct_mach_info::native_float_format ());
 
-extern void
+extern OCTAVE_API void
 read_doubles (std::istream& is, double *data, save_type type, int len,
 	      bool swap, oct_mach_info::float_format fmt);
-extern void
+extern OCTAVE_API void
 write_doubles (std::ostream& os, const double *data, save_type type, int len);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/dbleAEPBAL.h b/liboctave/dbleAEPBAL.h
--- a/liboctave/dbleAEPBAL.h
+++ b/liboctave/dbleAEPBAL.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_AEPBALANCE_h 1
 
 #include <iostream>
 #include <string>
 
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 AEPBALANCE
 {
 public:
 
   AEPBALANCE (void) : balanced_mat (), balancing_mat () { }
 
   AEPBALANCE (const Matrix& a,const std::string& balance_job)
     {
diff --git a/liboctave/dbleCHOL.h b/liboctave/dbleCHOL.h
--- a/liboctave/dbleCHOL.h
+++ b/liboctave/dbleCHOL.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_CHOL_h)
 #define octave_CHOL_h 1
 
 #include <iostream>
 
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 CHOL
 {
 public:
 
   CHOL (void) : chol_mat () { }
 
   CHOL (const Matrix& a) { init (a); }
 
@@ -49,26 +50,26 @@ public:
       return *this;
     }
 
   Matrix chol_matrix (void) const { return chol_mat; }
 
   // Compute the inverse of a matrix using the Cholesky factorization.
   Matrix inverse (void) const;
 
-  friend std::ostream& operator << (std::ostream& os, const CHOL& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const CHOL& a);
 
 private:
 
   Matrix chol_mat;
 
   octave_idx_type init (const Matrix& a);
 };
 
-Matrix chol2inv (const Matrix& r);
+Matrix OCTAVE_API chol2inv (const Matrix& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleDET.h b/liboctave/dbleDET.h
--- a/liboctave/dbleDET.h
+++ b/liboctave/dbleDET.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_DET_h)
 #define octave_DET_h 1
 
 #include <iostream>
 
 // FIXME -- we could use templates here; compare with CmplxDET.h
 
 class
+OCTAVE_API
 DET
 {
 friend class Matrix;
 friend class SparseMatrix;
 
 public:
 
   DET (void) : c2 (0), c10 (0), e2 (0), e10 (0), base2 (false) { }
diff --git a/liboctave/dbleHESS.h b/liboctave/dbleHESS.h
--- a/liboctave/dbleHESS.h
+++ b/liboctave/dbleHESS.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_HESS_h)
 #define octave_HESS_h 1
 
 #include <iostream>
 
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 HESS
 {
 public:
 
   HESS (void) : hess_mat (), unitary_hess_mat () { }
 
   HESS (const Matrix& a) { init (a); }
 
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -23,16 +23,17 @@ 02110-1301, USA.
 
 #if !defined (octave_LU_h)
 #define octave_LU_h 1
 
 #include "base-lu.h"
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 LU : public base_lu <Matrix, double, Matrix, double>
 {
 public:
 
   LU (void) : base_lu <Matrix, double, Matrix, double> () { }
 
   LU (const Matrix& a);
 
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_QR_h)
 #define octave_QR_h 1
 
 #include <iostream>
 
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 QR
 {
 public:
 
   enum type
     {
       std,
       raw,
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_QRP_h)
 #define octave_QRP_h 1
 
 #include <iostream>
 
 #include "dbleQR.h"
 
 class
+OCTAVE_API
 QRP : public QR
 {
 public:
 
   QRP (void) : QR (), p () { }
 
   QRP (const Matrix&, QR::type = QR::std);
 
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_SCHUR_h 1
 
 #include <iostream>
 #include <string>
 
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 SCHUR
 {
 public:
 
   SCHUR (void)
     : schur_mat (), unitary_mat () { }
 
   SCHUR (const Matrix& a, const std::string& ord, bool calc_unitary = true)
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_SVD_h 1
 
 #include <iostream>
 
 #include "dDiagMatrix.h"
 #include "dMatrix.h"
 
 class
+OCTAVE_API
 SVD
 {
 public:
 
   enum type
     {
       std,
       economy,
diff --git a/liboctave/dir-ops.h b/liboctave/dir-ops.h
--- a/liboctave/dir-ops.h
+++ b/liboctave/dir-ops.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_dir_ops_h)
 #define octave_dir_ops_h 1
 
 #include <string>
 
 #include "str-vec.h"
 
 class
+OCTAVE_API
 dir_entry
 {
 public:
 
   dir_entry (const std::string& n = std::string ()) : name (n), dir (0)
     {
       if (! name.empty ())
         open ();
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #include "str-vec.h"
 
 struct
+OCTAVE_API
 file_ops
 {
   static int mkdir (const std::string&, mode_t);
   static int mkdir (const std::string&, mode_t, std::string&);
 
   static int mkfifo (const std::string&, mode_t);
   static int mkfifo (const std::string&, mode_t, std::string&);
 
diff --git a/liboctave/file-stat.h b/liboctave/file-stat.h
--- a/liboctave/file-stat.h
+++ b/liboctave/file-stat.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 
 #include "oct-time.h"
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 class
+OCTAVE_API
 file_stat
 {
 public:
 
   file_stat (const std::string& n = std::string (), bool fl = true)
     : file_name (n), follow_links (fl), initialized (false)
       {
 	if (! file_name.empty ())
diff --git a/liboctave/glob-match.h b/liboctave/glob-match.h
--- a/liboctave/glob-match.h
+++ b/liboctave/glob-match.h
@@ -25,16 +25,17 @@ 02110-1301, USA.
 #define octave_glob_match_h 1
 
 #include <string>
 
 #include "Array.h"
 #include "str-vec.h"
 
 class
+OCTAVE_API
 glob_match
 {
 public:
 
   enum opts
     {
       pathname = 1,  // No wildcard can ever match `/'.
       noescape = 2,  // Backslashes don't quote special chars.
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -31,21 +31,23 @@ 02110-1301, USA.
 #include "intNDArray.h"
 
 class ColumnVector;
 class boolNDArray;
 class NDArray;
 class Range;
 
 class
+OCTAVE_API
 idx_vector
 {
 private:
 
   class
+  OCTAVE_API
   idx_vector_rep
   {
   public:
 
     idx_vector_rep (void)
       : data (0), len (0), num_zeros (0), num_ones (0), max_val (0),
 	min_val (0), count (1), frozen_at_z_len (0), frozen_len (0),
 	colon (0), one_zero (0), initialized (0), frozen (0),
diff --git a/liboctave/int16NDArray.cc b/liboctave/int16NDArray.cc
--- a/liboctave/int16NDArray.cc
+++ b/liboctave/int16NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "int16NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_int16>;
+template class OCTAVE_API intNDArray<octave_int16>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int16>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int16>& a);
 
 NDS_CMP_OPS (int16NDArray, , octave_int16, )
 NDS_BOOL_OPS (int16NDArray, octave_int16, octave_int16 (0))
 
 SND_CMP_OPS (octave_int16, , int16NDArray, )
 SND_BOOL_OPS (octave_int16, int16NDArray, octave_int16 (0))
diff --git a/liboctave/int32NDArray.cc b/liboctave/int32NDArray.cc
--- a/liboctave/int32NDArray.cc
+++ b/liboctave/int32NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "int32NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_int32>;
+template class OCTAVE_API intNDArray<octave_int32>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int32>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int32>& a);
 
 NDS_CMP_OPS (int32NDArray, , octave_int32, )
 NDS_BOOL_OPS (int32NDArray, octave_int32, octave_int32 (0))
 
 SND_CMP_OPS (octave_int32, , int32NDArray, )
 SND_BOOL_OPS (octave_int32, int32NDArray, octave_int32 (0))
diff --git a/liboctave/int64NDArray.cc b/liboctave/int64NDArray.cc
--- a/liboctave/int64NDArray.cc
+++ b/liboctave/int64NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "int64NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_int64>;
+template class OCTAVE_API intNDArray<octave_int64>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int64>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int64>& a);
 
 NDS_CMP_OPS (int64NDArray, , octave_int64, )
 NDS_BOOL_OPS (int64NDArray, octave_int64, octave_int64 (0))
 
 SND_CMP_OPS (octave_int64, , int64NDArray, )
 SND_BOOL_OPS (octave_int64, int64NDArray, octave_int64 (0))
diff --git a/liboctave/int8NDArray.cc b/liboctave/int8NDArray.cc
--- a/liboctave/int8NDArray.cc
+++ b/liboctave/int8NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "int8NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_int8>;
+template class OCTAVE_API intNDArray<octave_int8>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int8>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int8>& a);
 
 NDS_CMP_OPS (int8NDArray, , octave_int8, )
 NDS_BOOL_OPS (int8NDArray, octave_int8, octave_int8 (0))
 
 SND_CMP_OPS (octave_int8, , int8NDArray, )
 SND_BOOL_OPS (octave_int8, int8NDArray, octave_int8 (0))
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -48,24 +48,24 @@ Software Foundation, Inc.
 #endif
 
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
 
 #include "syswait.h"
 
-void
+OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
 	      int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
-char *
+OCTAVE_API char *
 oct_strptime (const char *buf, const char *format, struct tm *tm)
 {
   return (char *) strptime (buf, format, tm);
 }
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #include <winsock.h>
@@ -87,34 +87,34 @@ gethostname (char *name, int namelen)
   strncpy (name, ut.nodename, i < namelen ? i : namelen);
   name[namelen] = '\0';
 
   return 0;
 }
 
 #endif
 
-int
+OCTAVE_API int
 octave_gethostname (char *name, int namelen)
 {
   return gethostname (name, namelen);
 }
 
 #ifdef HAVE_LOADLIBRARY_API
 #include <windows.h>
 
 /* Need this since in C++ can't cast from int(*)() to void* */
-void *
+OCTAVE_API void *
 octave_w32_library_search (HINSTANCE handle, const char * name)
 {
   return (GetProcAddress (handle, name));
 }
 #endif
 
-pid_t
+OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options)
 {
   return WAITPID (pid, status, options);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -24,58 +24,58 @@ 02110-1301, USA.
 #if !defined (octave_liboctave_ieee_h)
 #define octave_liboctave_ieee_h 1
 
 #ifdef	__cplusplus
 extern "C" {
 #endif
 
 /*  Octave's idea of infinity.  */
-extern double octave_Inf;
+extern OCTAVE_API double octave_Inf;
 
 /* Octave's idea of a missing value.  */
-extern double octave_NA;
+extern OCTAVE_API double octave_NA;
 
 /* Octave's idea of not a number.  */
-extern double octave_NaN;
+extern OCTAVE_API double octave_NaN;
 
 /* FIXME -- this code assumes that a double has twice the
    number of bits as an int */
 
-extern int lo_ieee_hw;
-extern int lo_ieee_lw;
+extern OCTAVE_API int lo_ieee_hw;
+extern OCTAVE_API int lo_ieee_lw;
 
 typedef union
 {
   double value;
   unsigned int word[2];
 } lo_ieee_double;
 
 #define LO_IEEE_NA_HW 0x7ff00000
 #define LO_IEEE_NA_LW 1954
 
-extern void octave_ieee_init (void);
+extern OCTAVE_API void octave_ieee_init (void);
 
 #if defined (SCO)
 extern int isnan (double);
 extern int isinf (double);
 #endif
 
-extern int lo_ieee_isnan (double x);
-extern int lo_ieee_finite (double x);
-extern int lo_ieee_isinf (double x);
+extern OCTAVE_API int lo_ieee_isnan (double x);
+extern OCTAVE_API int lo_ieee_finite (double x);
+extern OCTAVE_API int lo_ieee_isinf (double x);
 
-extern int lo_ieee_is_NA (double);
-extern int lo_ieee_is_NaN_or_NA (double) GCC_ATTR_DEPRECATED;
+extern OCTAVE_API int lo_ieee_is_NA (double);
+extern OCTAVE_API int lo_ieee_is_NaN_or_NA (double) GCC_ATTR_DEPRECATED;
 
-extern double lo_ieee_inf_value (void);
-extern double lo_ieee_na_value (void);
-extern double lo_ieee_nan_value (void);
+extern OCTAVE_API double lo_ieee_inf_value (void);
+extern OCTAVE_API double lo_ieee_na_value (void);
+extern OCTAVE_API double lo_ieee_nan_value (void);
 
-extern int lo_ieee_signbit (double);
+extern OCTAVE_API int lo_ieee_signbit (double);
 
 #ifdef	__cplusplus
 }
 #endif
 
 #endif
 
 /*
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -21,58 +21,58 @@ 02110-1301, USA.
 
 */
 
 #if !defined (octave_liboctave_mappers_h)
 #define octave_liboctave_mappers_h 1
 
 #include "oct-cmplx.h"
 
-extern double arg (double x);
-extern double conj (double x);
-extern double fix (double x);
-extern double imag (double x);
-extern double real (double x);
-extern double xround (double x);
-extern double signum (double x);
-extern double xlog2 (double x); 
-extern double xexp2 (double x);
+extern OCTAVE_API double arg (double x);
+extern OCTAVE_API double conj (double x);
+extern OCTAVE_API double fix (double x);
+extern OCTAVE_API double imag (double x);
+extern OCTAVE_API double real (double x);
+extern OCTAVE_API double xround (double x);
+extern OCTAVE_API double signum (double x);
+extern OCTAVE_API double xlog2 (double x); 
+extern OCTAVE_API double xexp2 (double x);
 
-extern bool xisnan (double x);
-extern bool xfinite (double x);
-extern bool xisinf (double x);
+extern OCTAVE_API bool xisnan (double x);
+extern OCTAVE_API bool xfinite (double x);
+extern OCTAVE_API bool xisinf (double x);
 
-extern bool octave_is_NA (double x);
-extern bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
+extern OCTAVE_API bool octave_is_NA (double x);
+extern OCTAVE_API bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
 
-extern double xmin (double x, double y);
-extern double xmax (double x, double y);
+extern OCTAVE_API double xmin (double x, double y);
+extern OCTAVE_API double xmax (double x, double y);
 
-extern Complex acos (const Complex& x);
-extern Complex acosh (const Complex& x);
-extern Complex asin (const Complex& x);
-extern Complex asinh (const Complex& x);
-extern Complex atan (const Complex& x);
-extern Complex atanh (const Complex& x);
+extern OCTAVE_API Complex acos (const Complex& x);
+extern OCTAVE_API Complex acosh (const Complex& x);
+extern OCTAVE_API Complex asin (const Complex& x);
+extern OCTAVE_API Complex asinh (const Complex& x);
+extern OCTAVE_API Complex atan (const Complex& x);
+extern OCTAVE_API Complex atanh (const Complex& x);
 
-extern Complex ceil (const Complex& x);
-extern Complex fix (const Complex& x);
-extern Complex floor (const Complex& x);
-extern Complex xround (const Complex& x);
-extern Complex signum (const Complex& x);
+extern OCTAVE_API Complex ceil (const Complex& x);
+extern OCTAVE_API Complex fix (const Complex& x);
+extern OCTAVE_API Complex floor (const Complex& x);
+extern OCTAVE_API Complex xround (const Complex& x);
+extern OCTAVE_API Complex signum (const Complex& x);
 
-extern bool xisnan (const Complex& x);
-extern bool xfinite (const Complex& x);
-extern bool xisinf (const Complex& x);
+extern OCTAVE_API bool xisnan (const Complex& x);
+extern OCTAVE_API bool xfinite (const Complex& x);
+extern OCTAVE_API bool xisinf (const Complex& x);
 
-extern bool octave_is_NA (const Complex& x);
-extern bool octave_is_NaN_or_NA (const Complex& x);
+extern OCTAVE_API bool octave_is_NA (const Complex& x);
+extern OCTAVE_API bool octave_is_NaN_or_NA (const Complex& x);
 
-extern Complex xmin (const Complex& x, const Complex& y);
-extern Complex xmax (const Complex& x, const Complex& y);
+extern OCTAVE_API Complex xmin (const Complex& x, const Complex& y);
+extern OCTAVE_API Complex xmax (const Complex& x, const Complex& y);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -33,266 +33,266 @@ class Matrix;
 class ComplexMatrix;
 class NDArray;
 class ComplexNDArray;
 class RowVector;
 class ComplexColumnVector;
 class Range;
 
 #if !defined (HAVE_ACOSH)
-extern double acosh (double);
+extern OCTAVE_API double acosh (double);
 #endif
 
 #if !defined (HAVE_ASINH)
-extern double asinh (double);
+extern OCTAVE_API double asinh (double);
 #endif
 
 #if !defined (HAVE_ATANH)
-extern double atanh (double);
+extern OCTAVE_API double atanh (double);
 #endif
 
 #if !defined (HAVE_ERF)
-extern double erf (double);
+extern OCTAVE_API double erf (double);
 #endif
 
 #if !defined (HAVE_ERFC)
-extern double erfc (double);
+extern OCTAVE_API double erfc (double);
 #endif
 
-extern double xgamma (double x);
-extern double xlgamma (double x);
+extern OCTAVE_API double xgamma (double x);
+extern OCTAVE_API double xlgamma (double x);
 
-extern Complex
+extern OCTAVE_API Complex
 besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern Complex
+extern OCTAVE_API Complex
 bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern Complex
+extern OCTAVE_API Complex
 besseli (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern Complex
+extern OCTAVE_API Complex
 besselk (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern Complex
+extern OCTAVE_API Complex
 besselh1 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern Complex
+extern OCTAVE_API Complex
 besselh2 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselj (double alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 bessely (double alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besseli (double alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselk (double alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh1 (double alpha, const ComplexMatrix& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh2 (double alpha, const ComplexMatrix& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselj (const Matrix& alpha, const Complex& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 bessely (const Matrix& alpha, const Complex& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besseli (const Matrix& alpha, const Complex& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselk (const Matrix& alpha, const Complex& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh1 (const Matrix& alpha, const Complex& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh2 (const Matrix& alpha, const Complex& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselj (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 bessely (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besseli (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselk (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh1 (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh2 (const Matrix& alpha, const ComplexMatrix& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselj (double alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 bessely (double alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besseli (double alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselk (double alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh1 (double alpha, const ComplexNDArray& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh2 (double alpha, const ComplexNDArray& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselj (const NDArray& alpha, const Complex& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 bessely (const NDArray& alpha, const Complex& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besseli (const NDArray& alpha, const Complex& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselk (const NDArray& alpha, const Complex& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh1 (const NDArray& alpha, const Complex& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh2 (const NDArray& alpha, const Complex& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselj (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 bessely (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besseli (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselk (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	 ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh1 (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 besselh2 (const NDArray& alpha, const ComplexNDArray& x, bool scaled,
 	  ArrayN<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselj (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 bessely (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besseli (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselk (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	 Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh1 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 besselh2 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled,
 	  Array2<octave_idx_type>& ierr);
 
-extern Complex airy (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr);
-extern Complex biry (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr);
+extern OCTAVE_API Complex airy (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr);
+extern OCTAVE_API Complex biry (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 airy (const ComplexMatrix& z, bool deriv, bool scaled, Array2<octave_idx_type>& ierr);
 
-extern ComplexMatrix
+extern OCTAVE_API ComplexMatrix
 biry (const ComplexMatrix& z, bool deriv, bool scaled, Array2<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 airy (const ComplexNDArray& z, bool deriv, bool scaled, ArrayN<octave_idx_type>& ierr);
 
-extern ComplexNDArray
+extern OCTAVE_API ComplexNDArray
 biry (const ComplexNDArray& z, bool deriv, bool scaled, ArrayN<octave_idx_type>& ierr);
 
-extern double betainc (double x, double a, double b);
-extern Matrix betainc (double x, double a, const Matrix& b);
-extern Matrix betainc (double x, const Matrix& a, double b);
-extern Matrix betainc (double x, const Matrix& a, const Matrix& b);
+extern OCTAVE_API double betainc (double x, double a, double b);
+extern OCTAVE_API Matrix betainc (double x, double a, const Matrix& b);
+extern OCTAVE_API Matrix betainc (double x, const Matrix& a, double b);
+extern OCTAVE_API Matrix betainc (double x, const Matrix& a, const Matrix& b);
 
-extern NDArray betainc (double x, double a, const NDArray& b);
-extern NDArray betainc (double x, const NDArray& a, double b);
-extern NDArray betainc (double x, const NDArray& a, const NDArray& b);
+extern OCTAVE_API NDArray betainc (double x, double a, const NDArray& b);
+extern OCTAVE_API NDArray betainc (double x, const NDArray& a, double b);
+extern OCTAVE_API NDArray betainc (double x, const NDArray& a, const NDArray& b);
 
-extern Matrix betainc (const Matrix& x, double a, double b);
-extern Matrix betainc (const Matrix& x, double a, const Matrix& b);
-extern Matrix betainc (const Matrix& x, const Matrix& a, double b);
-extern Matrix betainc (const Matrix& x, const Matrix& a, const Matrix& b);
+extern OCTAVE_API Matrix betainc (const Matrix& x, double a, double b);
+extern OCTAVE_API Matrix betainc (const Matrix& x, double a, const Matrix& b);
+extern OCTAVE_API Matrix betainc (const Matrix& x, const Matrix& a, double b);
+extern OCTAVE_API Matrix betainc (const Matrix& x, const Matrix& a, const Matrix& b);
 
-extern NDArray betainc (const NDArray& x, double a, double b);
-extern NDArray betainc (const NDArray& x, double a, const NDArray& b);
-extern NDArray betainc (const NDArray& x, const NDArray& a, double b);
-extern NDArray betainc (const NDArray& x, const NDArray& a, const NDArray& b);
+extern OCTAVE_API NDArray betainc (const NDArray& x, double a, double b);
+extern OCTAVE_API NDArray betainc (const NDArray& x, double a, const NDArray& b);
+extern OCTAVE_API NDArray betainc (const NDArray& x, const NDArray& a, double b);
+extern OCTAVE_API NDArray betainc (const NDArray& x, const NDArray& a, const NDArray& b);
 
-extern double gammainc (double x, double a, bool& err);
-extern Matrix gammainc (double x, const Matrix& a);
-extern Matrix gammainc (const Matrix& x, double a);
-extern Matrix gammainc (const Matrix& x, const Matrix& a);
+extern OCTAVE_API double gammainc (double x, double a, bool& err);
+extern OCTAVE_API Matrix gammainc (double x, const Matrix& a);
+extern OCTAVE_API Matrix gammainc (const Matrix& x, double a);
+extern OCTAVE_API Matrix gammainc (const Matrix& x, const Matrix& a);
 
-extern NDArray gammainc (double x, const NDArray& a);
-extern NDArray gammainc (const NDArray& x, double a);
-extern NDArray gammainc (const NDArray& x, const NDArray& a);
+extern OCTAVE_API NDArray gammainc (double x, const NDArray& a);
+extern OCTAVE_API NDArray gammainc (const NDArray& x, double a);
+extern OCTAVE_API NDArray gammainc (const NDArray& x, const NDArray& a);
 
 inline double gammainc (double x, double a)
 {
   bool err;
   return gammainc (x, a, err);
 }
 
 #endif
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -28,49 +28,51 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <string>
 
 #include "oct-cmplx.h"
 #include "oct-types.h"
 #include "syswait.h"
 
-extern octave_idx_type NINTbig (double x);
-extern int NINT (double x);
-extern double D_NINT (double x);
+extern OCTAVE_API octave_idx_type NINTbig (double x);
+extern OCTAVE_API int NINT (double x);
+extern OCTAVE_API double D_NINT (double x);
 
-extern char *strsave (const char *);
+extern OCTAVE_API char *strsave (const char *);
 
-extern void octave_putenv (const std::string&, const std::string&);
+extern OCTAVE_API void octave_putenv (const std::string&, const std::string&);
 
-extern std::string octave_fgets (std::FILE *);
-extern std::string octave_fgetl (std::FILE *);
+extern OCTAVE_API std::string octave_fgets (std::FILE *);
+extern OCTAVE_API std::string octave_fgetl (std::FILE *);
 
-extern std::string octave_fgets (std::FILE *, bool& eof);
-extern std::string octave_fgetl (std::FILE *, bool& eof);
+extern OCTAVE_API std::string octave_fgets (std::FILE *, bool& eof);
+extern OCTAVE_API std::string octave_fgetl (std::FILE *, bool& eof);
 
-extern "C" int octave_gethostname (char *, int);
+extern "C" OCTAVE_API int octave_gethostname (char *, int);
 
-extern "C" void octave_qsort (void *base, size_t n, size_t size,
+extern "C" OCTAVE_API void octave_qsort (void *base, size_t n, size_t size,
 			      int (*cmp) (const void *, const void *));
 
-extern "C" char *oct_strptime (const char *buf, const char *format,
+extern "C" OCTAVE_API char *oct_strptime (const char *buf, const char *format,
 			       struct tm *tm);
 
-extern double octave_read_double (std::istream& is);
-extern Complex octave_read_complex (std::istream& is);
+extern OCTAVE_API double octave_read_double (std::istream& is);
+extern OCTAVE_API Complex octave_read_complex (std::istream& is);
 
-extern void octave_write_double (std::ostream& os, double dval);
-extern void octave_write_complex (std::ostream& os, const Complex& cval);
+extern OCTAVE_API void octave_write_double (std::ostream& os, double dval);
+extern OCTAVE_API void octave_write_complex (std::ostream& os, const Complex& cval);
 
 #ifdef HAVE_LOADLIBRARY_API
 #include <windows.h>
-extern "C" void * octave_w32_library_search (HINSTANCE handle, const char *name);
+extern "C" OCTAVE_API void * octave_w32_library_search (HINSTANCE handle, const char *name);
+#undef min
+#undef max
 #endif
 #endif
 
-extern "C" pid_t octave_waitpid (pid_t pid, int *status, int options);
+extern "C" OCTAVE_API pid_t octave_waitpid (pid_t pid, int *status, int options);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/mach-info.h b/liboctave/mach-info.h
--- a/liboctave/mach-info.h
+++ b/liboctave/mach-info.h
@@ -22,16 +22,17 @@ 02110-1301, USA.
 */
 
 #if !defined (octave_mach_info_h)
 #define octave_mach_info_h 1
 
 #include <string>
 
 class
+OCTAVE_API
 oct_mach_info
 {
 protected:
 
   oct_mach_info (void);
 
 public:
 
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -22,32 +22,32 @@ 02110-1301, USA.
 */
 
 #if !defined (octave_mx_op_defs_h)
 #define octave_mx_op_defs_h 1
 
 #include "mx-inlines.cc"
 
 #define BIN_OP_DECL(R, OP, X, Y) \
-  extern R OP (const X&, const Y&)
+  extern OCTAVE_API R OP (const X&, const Y&)
 
 class boolMatrix;
 class boolNDArray;
 
 #define CMP_OP_DECL(OP, X, Y) \
-  extern boolMatrix OP (const X&, const Y&)
+  extern OCTAVE_API boolMatrix OP (const X&, const Y&)
 
 #define NDCMP_OP_DECL(OP, X, Y) \
-  extern boolNDArray OP (const X&, const Y&)
+  extern OCTAVE_API boolNDArray OP (const X&, const Y&)
 
 #define BOOL_OP_DECL(OP, X, Y) \
-  extern boolMatrix OP (const X&, const Y&)
+  extern OCTAVE_API boolMatrix OP (const X&, const Y&)
 
 #define NDBOOL_OP_DECL(OP, X, Y) \
-  extern boolNDArray OP (const X&, const Y&)
+  extern OCTAVE_API boolNDArray OP (const X&, const Y&)
 
 // vector by scalar operations.
 
 #define VS_BIN_OP_DECLS(R, V, S) \
   BIN_OP_DECL (R, operator +, V, S); \
   BIN_OP_DECL (R, operator -, V, S); \
   BIN_OP_DECL (R, operator *, V, S); \
   BIN_OP_DECL (R, operator /, V, S);
diff --git a/liboctave/oct-alloc.h b/liboctave/oct-alloc.h
--- a/liboctave/oct-alloc.h
+++ b/liboctave/oct-alloc.h
@@ -20,16 +20,17 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #if !defined (octave_oct_alloc_h)
 #define octave_oct_alloc_h 1
 
 class
+OCTAVE_API
 octave_allocator
 {
 public:
 
   octave_allocator (size_t item_sz, int grow_sz = 256)
     : head (0), grow_size (grow_sz),
       item_size (item_sz > sizeof (link *) ? item_sz : sizeof (link *))
   { }
diff --git a/liboctave/oct-env.h b/liboctave/oct-env.h
--- a/liboctave/oct-env.h
+++ b/liboctave/oct-env.h
@@ -22,16 +22,17 @@ 02110-1301, USA.
 */
 
 #if !defined (octave_env_h)
 #define octave_env_h 1
 
 #include <string>
 
 class
+OCTAVE_API
 octave_env
 {
 protected:
 
   octave_env (void);
 
 public:
 
diff --git a/liboctave/oct-group.h b/liboctave/oct-group.h
--- a/liboctave/oct-group.h
+++ b/liboctave/oct-group.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #include "str-vec.h"
 
 class
+OCTAVE_API
 octave_group
 {
 public:
 
   octave_group (void)
     : gr_name (), gr_passwd (), gr_gid (0), gr_mem (), valid (false)
   { }
 
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -23,72 +23,72 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "oct-inttypes.h"
 
 #define INSTANTIATE_INT_DOUBLE_BIN_OP(T, OP) \
-  template octave_int<T> operator OP (const octave_int<T>&, double)
+  template OCTAVE_API octave_int<T> operator OP (const octave_int<T>&, double)
 
 #define INSTANTIATE_INT_DOUBLE_BIN_OPS(T) \
   INSTANTIATE_INT_DOUBLE_BIN_OP (T, +); \
   INSTANTIATE_INT_DOUBLE_BIN_OP (T, -); \
   INSTANTIATE_INT_DOUBLE_BIN_OP (T, *); \
   INSTANTIATE_INT_DOUBLE_BIN_OP (T, /)
 
 #define INSTANTIATE_DOUBLE_INT_BIN_OP(T, OP) \
-  template octave_int<T> operator OP (double, const octave_int<T>&)
+  template OCTAVE_API octave_int<T> operator OP (double, const octave_int<T>&)
 
 #define INSTANTIATE_DOUBLE_INT_BIN_OPS(T) \
   INSTANTIATE_DOUBLE_INT_BIN_OP (T, +); \
   INSTANTIATE_DOUBLE_INT_BIN_OP (T, -); \
   INSTANTIATE_DOUBLE_INT_BIN_OP (T, *); \
   INSTANTIATE_DOUBLE_INT_BIN_OP (T, /)
 
 #define INSTANTIATE_INT_DOUBLE_CMP_OP(T, OP) \
-  template bool operator OP (const octave_int<T>&, const double&)
+  template OCTAVE_API bool operator OP (const octave_int<T>&, const double&)
 
 #define INSTANTIATE_INT_DOUBLE_CMP_OPS(T) \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, <); \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, <=); \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, >=); \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, >); \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, ==); \
   INSTANTIATE_INT_DOUBLE_CMP_OP (T, !=)
 
 #define INSTANTIATE_DOUBLE_INT_CMP_OP(T, OP) \
-  template bool operator OP (const double&, const octave_int<T>&)
+  template OCTAVE_API bool operator OP (const double&, const octave_int<T>&)
 
 #define INSTANTIATE_DOUBLE_INT_CMP_OPS(T) \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, <); \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, <=); \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, >=); \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, >); \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, ==); \
   INSTANTIATE_DOUBLE_INT_CMP_OP (T, !=)
 
 #define INSTANTIATE_INT_BITCMP_OP(T, OP) \
-  template octave_int<T> \
+  template OCTAVE_API octave_int<T> \
   operator OP (const octave_int<T>&, const octave_int<T>&)
 
 #define INSTANTIATE_INT_BITCMP_OPS(T) \
   INSTANTIATE_INT_BITCMP_OP (T, &); \
   INSTANTIATE_INT_BITCMP_OP (T, |); \
   INSTANTIATE_INT_BITCMP_OP (T, ^)
 
 #define INSTANTIATE_INTTYPE(T) \
-  template class octave_int<T>; \
-  template octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
-  template octave_int<T> pow (double, const octave_int<T>&); \
-  template octave_int<T> pow (const octave_int<T>&, double b); \
-  template std::ostream& operator << (std::ostream&, const octave_int<T>&); \
-  template std::istream& operator >> (std::istream&, octave_int<T>&); \
-  template octave_int<T> \
+  template class OCTAVE_API octave_int<T>; \
+  template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
+  template OCTAVE_API octave_int<T> pow (double, const octave_int<T>&); \
+  template OCTAVE_API octave_int<T> pow (const octave_int<T>&, double b); \
+  template OCTAVE_API std::ostream& operator << (std::ostream&, const octave_int<T>&); \
+  template OCTAVE_API std::istream& operator >> (std::istream&, octave_int<T>&); \
+  template OCTAVE_API octave_int<T> \
   bitshift (const octave_int<T>&, int, const octave_int<T>&); \
   INSTANTIATE_INT_DOUBLE_BIN_OPS (T); \
   INSTANTIATE_DOUBLE_INT_BIN_OPS (T); \
   INSTANTIATE_INT_DOUBLE_CMP_OPS (T); \
   INSTANTIATE_DOUBLE_INT_CMP_OPS (T); \
   INSTANTIATE_INT_BITCMP_OPS (T)
 
 INSTANTIATE_INTTYPE (int8_t);
@@ -179,33 +179,33 @@ INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, i
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, int32_t);
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, int64_t);
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, uint8_t);
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, uint16_t);
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, uint32_t);
 INSTANTIATE_INTTYPE_BIN_OPS (uint64_t, uint64_t);
 
 #define INSTANTIATE_INTTYPE_SHIFT_OP(T, OP) \
-  template octave_int<T> operator OP (const octave_int<T>&, const int&)
+  template OCTAVE_API octave_int<T> operator OP (const octave_int<T>&, const int&)
 
 #define INSTANTIATE_INTTYPE_SHIFT_OPS(T) \
   INSTANTIATE_INTTYPE_SHIFT_OP (T, <<); \
   INSTANTIATE_INTTYPE_SHIFT_OP (T, >>)
 
 INSTANTIATE_INTTYPE_SHIFT_OPS (int8_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (int16_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (int32_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (int64_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (uint8_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (uint16_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (uint32_t);
 INSTANTIATE_INTTYPE_SHIFT_OPS (uint64_t);
 
 #define INSTANTIATE_OCTAVE_INT_CMP_OP(OP, T1, T2) \
-  template bool operator OP (const octave_int<T1>&, const octave_int<T2>&)
+  template OCTAVE_API bool operator OP (const octave_int<T1>&, const octave_int<T2>&)
 
 #define INSTANTIATE_OCTAVE_INT_CMP_OPS(T1, T2) \
   INSTANTIATE_OCTAVE_INT_CMP_OP (<, T1, T2); \
   INSTANTIATE_OCTAVE_INT_CMP_OP (<=, T1, T2); \
   INSTANTIATE_OCTAVE_INT_CMP_OP (>=, T1, T2); \
   INSTANTIATE_OCTAVE_INT_CMP_OP (>, T1, T2); \
   INSTANTIATE_OCTAVE_INT_CMP_OP (==, T1, T2); \
   INSTANTIATE_OCTAVE_INT_CMP_OP (!=, T1, T2)
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -548,28 +548,28 @@ OCTAVE_INT_CMP_OP (>)
 OCTAVE_INT_CMP_OP (==)
 OCTAVE_INT_CMP_OP (!=)
 
 // The following apply if the unsigned type is at least as wide as the
 // signed type (then we can cast postive signed values to the unsigned
 // type and compare).
 
 #define OCTAVE_US_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
-  bool operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+  bool OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
 
 #define OCTAVE_US_TYPE1_CMP_OP_DECLS(UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (<, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (<=, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (>=, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (>, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (==, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (!=, true, UT, ST)
 
 #define OCTAVE_SU_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
-  bool operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+  bool OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
 
 #define OCTAVE_SU_TYPE1_CMP_OP_DECLS(ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (<, true, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (<=, true, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (>=, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (>, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (!=, true, ST, UT)
@@ -587,28 +587,28 @@ OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int
 OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int32_t)
 OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int64_t)
 
 // The following apply if the signed type is wider than the unsigned
 // type (then we can cast unsigned values to the signed type and
 // compare if the signed value is positive).
 
 #define OCTAVE_US_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
-  bool operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+  bool OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
 
 #define OCTAVE_US_TYPE2_CMP_OP_DECLS(ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (<, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (<=, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (>=, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (>, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
 
 #define OCTAVE_SU_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
-  bool operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+  bool OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
 
 #define OCTAVE_SU_TYPE2_CMP_OP_DECLS(ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (<, true, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (<=, true, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (>=, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (>, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
diff --git a/liboctave/oct-passwd.h b/liboctave/oct-passwd.h
--- a/liboctave/oct-passwd.h
+++ b/liboctave/oct-passwd.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <string>
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 class
+OCTAVE_API
 octave_passwd
 {
 public:
 
   octave_passwd (void)
     : pw_name (), pw_passwd (), pw_uid (0), pw_gid (0), pw_gecos (),
       pw_dir (), pw_shell (), valid (false)
   { }
diff --git a/liboctave/oct-rand.h b/liboctave/oct-rand.h
--- a/liboctave/oct-rand.h
+++ b/liboctave/oct-rand.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <string>
 
 #include "dColVector.h"
 #include "dMatrix.h"
 #include "dNDArray.h"
 
 struct
+OCTAVE_API
 octave_rand
 {
   // Return the current seed.
   static double seed (void);
 
   // Set the seed.
   static void seed (double s);
 
diff --git a/liboctave/oct-shlib.h b/liboctave/oct-shlib.h
--- a/liboctave/oct-shlib.h
+++ b/liboctave/oct-shlib.h
@@ -27,24 +27,26 @@ 02110-1301, USA.
 #include <string>
 
 #include "oct-time.h"
 
 // This just provides a way to avoid infinite recursion when building
 // octave_shlib objects.
 
 class
+OCTAVE_API
 octave_xshlib
 {
 public:
 
   octave_xshlib (void) { }
 };
 
 class
+OCTAVE_API
 octave_shlib
 {
 public:
 
   typedef std::string (*name_mangler) (const std::string&);
 
   typedef void (*close_hook) (const std::string&);
 
diff --git a/liboctave/oct-spparms.h b/liboctave/oct-spparms.h
--- a/liboctave/oct-spparms.h
+++ b/liboctave/oct-spparms.h
@@ -30,16 +30,17 @@ Boston, MA 02110-1301, USA.
 
 #include "str-vec.h"
 #include "dColVector.h"
 #include "dNDArray.h"
 
 #define OCTAVE_SPARSE_CONTROLS_SIZE 12
 
 class
+OCTAVE_API
 octave_sparse_params
 {
 protected:
 
   octave_sparse_params (void)
     : params (OCTAVE_SPARSE_CONTROLS_SIZE),
       keys (OCTAVE_SPARSE_CONTROLS_SIZE) 
   {
diff --git a/liboctave/oct-syscalls.h b/liboctave/oct-syscalls.h
--- a/liboctave/oct-syscalls.h
+++ b/liboctave/oct-syscalls.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 
 class string_vector;
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 struct
+OCTAVE_API
 octave_syscalls
 {
   static int dup2 (int, int);
   static int dup2 (int, int, std::string&);
 
   static int execvp (const std::string&, const string_vector&);
   static int execvp (const std::string&, const string_vector&, std::string&);
 
diff --git a/liboctave/oct-time.h b/liboctave/oct-time.h
--- a/liboctave/oct-time.h
+++ b/liboctave/oct-time.h
@@ -28,16 +28,17 @@ 02110-1301, USA.
 
 #include <string>
 
 #include "systime.h"
 
 class octave_base_tm;
 
 class
+OCTAVE_API
 octave_time
 {
 public:
 
   octave_time (void)
     : ot_unix_time (0), ot_usec (0) { stamp (); }
 
   octave_time (time_t t)
@@ -135,16 +136,17 @@ operator > (const octave_time& t1, const
 
 inline bool
 operator >= (const octave_time& t1, const octave_time& t2)
 {
   return (t1 > t2 || t1 == t2);
 }
 
 class
+OCTAVE_API
 octave_base_tm
 {
 public:
 
   octave_base_tm (void)
     : tm_usec (0), tm_sec (0), tm_min (0), tm_hour (0),
       tm_mday (0), tm_mon (0), tm_year (0), tm_wday (0),
       tm_yday (0), tm_isdst (0), tm_zone ("unknown")
@@ -242,16 +244,17 @@ protected:
 
   // Time zone.
   std::string tm_zone;
 
   void init (void *p);
 };
 
 class
+OCTAVE_API
 octave_localtime : public octave_base_tm
 {
 public:
 
   octave_localtime (void)
     : octave_base_tm () { init (octave_time ()); }
 
   octave_localtime (const octave_time& ot)
@@ -269,16 +272,17 @@ public:
   ~octave_localtime (void) { }
 
 private:
 
   void init (const octave_time& ot);
 };
 
 class
+OCTAVE_API
 octave_gmtime : public octave_base_tm
 {
 public:
 
   octave_gmtime (void)
     : octave_base_tm () { init (octave_time ()); }
 
   octave_gmtime (const octave_time& ot)
@@ -293,16 +297,17 @@ public:
   ~octave_gmtime (void) { }
 
 private:
 
   void init (const octave_time& ot);
 };
 
 class
+OCTAVE_API
 octave_strptime : public octave_base_tm
 {
 public:
 
   octave_strptime (const std::string& str, const std::string& fmt)
     : octave_base_tm () { init (str, fmt); }
 
   octave_strptime (const octave_strptime& s)
diff --git a/liboctave/oct-uname.h b/liboctave/oct-uname.h
--- a/liboctave/oct-uname.h
+++ b/liboctave/oct-uname.h
@@ -22,16 +22,17 @@ 02110-1301, USA.
 */
 
 #if !defined (octave_uame_h)
 #define octave_uname_h 1
 
 #include <string>
 
 class
+OCTAVE_API
 octave_uname
 {
 public:
 
   octave_uname (void)
     : utsname_sysname ("unknown"), utsname_nodename ("unknown"),
       utsname_release ("unknown"), utsname_version ("unknown"),
       utsname_machine ("unknown"),
diff --git a/liboctave/pathsearch.h b/liboctave/pathsearch.h
--- a/liboctave/pathsearch.h
+++ b/liboctave/pathsearch.h
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #if !defined (octave_pathsearch_h)
 #define octave_pathsearch_h 1
 
 #include <string>
 
 #include "str-vec.h"
 
 class
+OCTAVE_API
 dir_path
 {
 public:
 
   dir_path (const std::string& s = std::string (),
 	    const std::string& d = std::string ())
     : p_orig (s), p_default (d), initialized (false)
     {
diff --git a/liboctave/prog-args.h b/liboctave/prog-args.h
--- a/liboctave/prog-args.h
+++ b/liboctave/prog-args.h
@@ -29,16 +29,17 @@ long_options
 {
   const char *name;
   int has_arg;
   int *flag;
   int val;
 };
 
 class
+OCTAVE_API
 prog_args
 {
 public:
 
   // These values must match the corresponding defines in getopt.h.
   enum option_argument
     {
       no_arg = 0,
diff --git a/liboctave/so-array.h b/liboctave/so-array.h
--- a/liboctave/so-array.h
+++ b/liboctave/so-array.h
@@ -28,17 +28,17 @@ 02110-1301, USA.
 
 #include "ArrayN.h"
 #include "mx-op-defs.h"
 
 class boolNDArray;
 
 // Stream offsets.
 
-class streamoff_array : public ArrayN<std::streamoff>
+class OCTAVE_API streamoff_array : public ArrayN<std::streamoff>
 {
 public:
 
   streamoff_array (void) : ArrayN<std::streamoff> () { }
 
   streamoff_array (const dim_vector& dv,
 		   const std::streamoff& val = resize_fill_value ())
     : ArrayN<std::streamoff> (dv, val) { }
@@ -83,21 +83,21 @@ public:
   boolNDArray any (int dim = -1) const;
 
   static octave_idx_type compute_index (Array<int>& ra_idx,
 			    const dim_vector& dimensions);
 
   static std::streamoff resize_fill_value (void) { return 0; }
 };
 
-streamoff_array& operator += (streamoff_array& l, const std::streamoff& r);
-streamoff_array& operator -= (streamoff_array& l, const std::streamoff& r);
+OCTAVE_API streamoff_array& operator += (streamoff_array& l, const std::streamoff& r);
+OCTAVE_API streamoff_array& operator -= (streamoff_array& l, const std::streamoff& r);
 
-streamoff_array& operator += (streamoff_array& l, const streamoff_array& r);
-streamoff_array& operator -= (streamoff_array& l, const streamoff_array& r);
+OCTAVE_API streamoff_array& operator += (streamoff_array& l, const streamoff_array& r);
+OCTAVE_API streamoff_array& operator -= (streamoff_array& l, const streamoff_array& r);
 
 NDCMP_OP_DECL (mx_el_eq, std::streamoff, streamoff_array);
 NDCMP_OP_DECL (mx_el_ne, std::streamoff, streamoff_array);
 
 NDCMP_OP_DECL (mx_el_eq, streamoff_array, std::streamoff);
 NDCMP_OP_DECL (mx_el_ne, streamoff_array, std::streamoff);
 
 NDCMP_OP_DECL (mx_el_eq, streamoff_array, streamoff_array);
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -26,16 +26,17 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <list>
 #include <string>
 
 #include "Array.h"
 
 class
+OCTAVE_API
 string_vector : public Array<std::string>
 {
 public:
 
   string_vector (void) : Array<std::string> () { }
 
   explicit string_vector (octave_idx_type n) : Array<std::string> (n) { }
 
diff --git a/liboctave/uint16NDArray.cc b/liboctave/uint16NDArray.cc
--- a/liboctave/uint16NDArray.cc
+++ b/liboctave/uint16NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "uint16NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_uint16>;
+template class OCTAVE_API intNDArray<octave_uint16>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint16>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint16>& a);
 
 NDS_CMP_OPS (uint16NDArray, , octave_uint16, )
 NDS_BOOL_OPS (uint16NDArray, octave_uint16, octave_uint16 (0))
 
 SND_CMP_OPS (octave_uint16, , uint16NDArray, )
 SND_BOOL_OPS (octave_uint16, uint16NDArray, octave_uint16 (0))
diff --git a/liboctave/uint32NDArray.cc b/liboctave/uint32NDArray.cc
--- a/liboctave/uint32NDArray.cc
+++ b/liboctave/uint32NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "uint32NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_uint32>;
+template class OCTAVE_API intNDArray<octave_uint32>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint32>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint32>& a);
 
 NDS_CMP_OPS (uint32NDArray, , octave_uint32, )
 NDS_BOOL_OPS (uint32NDArray, octave_uint32, octave_uint32 (0))
 
 SND_CMP_OPS (octave_uint32, , uint32NDArray, )
 SND_BOOL_OPS (octave_uint32, uint32NDArray, octave_uint32 (0))
diff --git a/liboctave/uint64NDArray.cc b/liboctave/uint64NDArray.cc
--- a/liboctave/uint64NDArray.cc
+++ b/liboctave/uint64NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "uint64NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_uint64>;
+template class OCTAVE_API intNDArray<octave_uint64>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint64>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint64>& a);
 
 NDS_CMP_OPS (uint64NDArray, , octave_uint64, )
 NDS_BOOL_OPS (uint64NDArray, octave_uint64, octave_uint64 (0))
 
 SND_CMP_OPS (octave_uint64, , uint64NDArray, )
 SND_BOOL_OPS (octave_uint64, uint64NDArray, octave_uint64 (0))
diff --git a/liboctave/uint8NDArray.cc b/liboctave/uint8NDArray.cc
--- a/liboctave/uint8NDArray.cc
+++ b/liboctave/uint8NDArray.cc
@@ -25,23 +25,23 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "uint8NDArray.h"
 
 #include "intNDArray.cc"
 
-template class intNDArray<octave_uint8>;
+template class OCTAVE_API intNDArray<octave_uint8>;
 
-template
+template OCTAVE_API
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint8>& a);
 
-template
+template OCTAVE_API
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint8>& a);
 
 NDS_CMP_OPS (uint8NDArray, , octave_uint8, )
 NDS_BOOL_OPS (uint8NDArray, octave_uint8, octave_uint8 (0))
 
 SND_CMP_OPS (octave_uint8, , uint8NDArray, )
 SND_BOOL_OPS (octave_uint8, uint8NDArray, octave_uint8 (0))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,18 @@
+2006-10-26  John W. Eaton  <jwe@octave.org>
+
+	* bitfcns.cc (bitshift): If A < 0, return -bitshift (-A, N, MASK).
+
 2006-10-26  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* help.cc (display_help_text): Quote sed patterns with ".
 
+	* file-io.cc: Include file-io.h.
+
 2006-10-26  John W. Eaton  <jwe@octave.org>
 
 	* ov-bool.h (octave_bool::sparse_matrix_value,
 	octave_bool::sparse_complex_matrix_value
 	octave_bool::sparse_bool_matrix_value): New functions.
 
 2006-10-25  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -286,16 +286,20 @@ Return the bitwise XOR of nonnegative in
 @end deftypefn")
 {
   BITOP (^, "bitxor");
 }
 
 static int64_t
 bitshift (double a, int n, int64_t mask)
 {
+  // In the name of bug-for-bug compatibility.
+  if (a < 0)
+    return -bitshift (-a, n, mask);
+
   if (n > 0)
     return (static_cast<int64_t> (a) << n) & mask;
   else if (n < 0)
     return (static_cast<int64_t> (a) >> -n) & mask;
   else
     return static_cast<int64_t> (a) & mask;
 }
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -57,16 +57,17 @@ 02110-1301, USA.
 #include <zlib.h>
 #endif
 
 #include "error.h"
 #include "file-ops.h"
 #include "lo-ieee.h"
 
 #include "defun.h"
+#include "file-io.h"
 #include "oct-fstrm.h"
 #include "oct-iostrm.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-prcstrm.h"
 #include "oct-stream.h"
 #include "oct-strstrm.h"
 #include "pager.h"
