# HG changeset patch
# User jwe
# Date 812870539 0
#      Thu Oct 05 05:22:19 1995 +0000
# Node ID db1a54941d529ddb69e090a5504552a16f86e33a
# Parent  479ee97c85c651a850a8d03e772c86b4baeb7968
[project @ 1995-10-05 05:22:01 by jwe]

diff --git a/liboctave/NLEqn.h b/liboctave/NLEqn.h
--- a/liboctave/NLEqn.h
+++ b/liboctave/NLEqn.h
@@ -23,77 +23,127 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_NLEqn_h)
 #define octave_NLEqn_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+#include <cfloat>
+#include <cmath>
+
 #include "dColVector.h"
 #include "NLFunc.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class NLEqn_options
 {
  public:
 
-  NLEqn_options (void);
-  NLEqn_options (const NLEqn_options& opt);
+  NLEqn_options (void) { init (); }
+
+  NLEqn_options (const NLEqn_options& opt) { copy (opt); }
 
-  NLEqn_options& operator = (const NLEqn_options& opt);
+  NLEqn_options& operator = (const NLEqn_options& opt)
+    {
+      if (this != &opt)
+	copy (opt);
 
-  ~NLEqn_options (void);
+      return *this;
+    }
+
+  ~NLEqn_options (void) { }
 
-  void init (void);
-  void copy (const NLEqn_options& opt);
+  void init (void)
+    {
+      double sqrt_eps = sqrt (DBL_EPSILON);
+      x_tolerance = sqrt_eps;
+    }
 
-  void set_default_options (void);
+  void copy (const NLEqn_options& opt)
+    {
+      x_tolerance = opt.x_tolerance;
+    }
+
+  void set_default_options (void) { init (); }
 
-  void set_tolerance (double);
+  void set_tolerance (double val)
+    {
+      x_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
+    }
 
-  double tolerance (void);
+  double tolerance (void) { return x_tolerance; }
 
  private:
 
   double x_tolerance;
 };
 
 class NLEqn : public NLFunc, public NLEqn_options
 {
  public:
 
-  NLEqn (void);
-  NLEqn (const Vector&, const NLFunc);
+// Constructors
+
+  NLEqn (void) : NLFunc (), n (0), x () { }
+
+  NLEqn (const ColumnVector& xvec, const NLFunc f) 
+    : NLFunc (f), n (xvec.capacity ()), x (xvec) { }
+
+  NLEqn (const NLEqn& a) : NLFunc (a.fun, a.jac), n (a.n), x (a.x) { }
 
-  NLEqn (const NLEqn &);
+  NLEqn& operator = (const NLEqn& a)
+    {
+      fun = a.fun;
+      jac = a.jac;
+      x = a.n;
+
+      return *this;
+    }
 
-  NLEqn& operator = (const NLEqn& a);
-
-  void resize (int);
+  void resize (int nn)
+    {
+      if (n != nn)
+	{
+	  n = nn;
+	  x.resize (n);
+	}
+    }
 
-  void set_states (const Vector&);
+  void set_states (const ColumnVector&);
+
+  ColumnVector states (void) const { return x; }
+
+  int size (void) const { return n; }
 
-  Vector states (void) const;
-
-  int size (void) const;
+  ColumnVector solve (void)
+    {
+      int info;
+      return solve (info);
+    }
 
-  Vector solve (void);
-  Vector solve (const Vector&);
+  ColumnVector solve (const ColumnVector& xvec)
+    {
+      set_states (xvec);
+      int info;
+      return solve (info);
+    }
 
-  Vector solve (int& info);
-  Vector solve (const Vector&, int& info);
+  ColumnVector solve (const ColumnVector& xvec, int& info)
+    {
+      set_states (xvec);
+      return solve (info);
+    }
+
+  ColumnVector solve (int& info);
 
  private:
 
   int n;
-  Vector x;
+  ColumnVector x;
 
   void error (const char* msg);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/QLD.cc b/liboctave/QLD.cc
--- a/liboctave/QLD.cc
+++ b/liboctave/QLD.cc
@@ -42,26 +42,26 @@ Software Foundation, 59 Temple Place - S
 extern "C"
 {
   int F77_FCN (qld, QLD) (int&, int&, int&, int&, int&, double*,
 			  double*, double*, double*, double*, double*,
 			  double*, double*, int&, int&, int&, double*,
 			  int&, int*, int&);
 }
 
-Vector
+ColumnVector
 QLD::minimize (double& objf, int& inform)
 {
   int n = x.capacity ();
 
   Matrix A1 = lc.eq_constraint_matrix ();
-  Vector b1 = lc.eq_constraint_vector ();
+  ColumnVector b1 = lc.eq_constraint_vector ();
 
   Matrix A2 = lc.ineq_constraint_matrix ();
-  Vector b2 = lc.ineq_constraint_vector ();
+  ColumnVector b2 = lc.ineq_constraint_vector ();
 
   int me = A1.rows ();
   int m = me + A2.rows ();
 
   cout << "n:  " << n << "\n";
   cout << "m:  " << m << "\n";
   cout << "me: " << me << "\n";
 
@@ -94,18 +94,18 @@ QLD::minimize (double& objf, int& inform
   double *pa = 0;
   if (A1.rows () > 0 && A1.columns () > 0)
     pa = A1.fortran_vec ();
 
   double *pb = 0;
   if (b1.capacity () > 0)
     pb = b1.fortran_vec ();
 
-  Vector xlb = bnds.lower_bounds ();
-  Vector xub = bnds.upper_bounds ();
+  ColumnVector xlb = bnds.lower_bounds ();
+  ColumnVector xub = bnds.upper_bounds ();
   if (xlb.capacity () <= 0)
     {
       xlb.resize (n, -1.0e30);
       xub.resize (n, 1.0e30);
     }
   double *pxl = xlb.fortran_vec ();
   double *pxu = xub.fortran_vec ();
 
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -156,18 +156,18 @@ integrand is singular.")
     }
 
   int ier = 0;
   int nfun = 0;
   double abserr = 0.0;
   double val = 0.0;
   double abstol = 1e-6;
   double reltol = 1e-6;
-  Vector tol (2);
-  Vector sing;
+  ColumnVector tol (2);
+  ColumnVector sing;
   int have_sing = 0;
   switch (nargin)
     {
     case 5:
       if (indefinite)
 	{
 	  error("quad: singularities not allowed on infinite intervals");
 	  return retval;
