# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1266576467 -3600
#      Fri Feb 19 11:47:47 2010 +0100
# Node ID de2d43bcb0838a943433ac03d2a9de366ca01f63
# Parent  21dd58bd683ca94a81391b0614cf1ab081128e81
optimize some lazy index operations

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-02-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::as_array,
+	idx_vector::idx_range_rep::as_array,
+	idx_vector::idx_scalar_rep::as_array,
+	idx_vector::idx_vector_rep::as_array): New methods.
+	* idx-vector.h: Declare them.
+
 2010-02-17  John W. Eaton  <jwe@octave.org>
 
 	* oct-rand.cc: Include <sdint.h>.  Change declarations of ranlib
 	functions to take int32_t instead of octave_idx_type values.
 	Change all uses.
 	(octave_rand::do_seed): Use int32_t in union, not octave_idx_type.
 	(force_to_fit_range): Args are now int32_t, not octave_idx_type.
 	(octave_rand::initialize_ranlib_generators): Use int32_t in seed
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -57,16 +57,25 @@ gripe_invalid_range (void)
 
 static void
 gripe_index_out_of_range (void)
 {
   (*current_liboctave_error_handler)
     ("internal error: idx_vector index out of range.");
 }
 
+Array<octave_idx_type>
+idx_vector::idx_base_rep::as_array (void)
+{
+  (*current_liboctave_error_handler)
+    ("internal error: as_array not allowed for this index class.");
+
+  return Array<octave_idx_type> ();
+}
+
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_colon_rep);
 
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
         ("internal error: invalid character converted to idx_vector. Must be ':'.");
@@ -202,16 +211,26 @@ idx_vector::idx_range_rep::print (std::o
 
 Range
 idx_vector::idx_range_rep::unconvert (void) const
 {
   return Range (static_cast<double> (start+1), 
                 static_cast<double> (step), len);
 }
 
+Array<octave_idx_type>
+idx_vector::idx_range_rep::as_array (void)
+{
+  Array<octave_idx_type> retval (dim_vector (1, len));
+  for (octave_idx_type i = 0; i < len; i++)
+    retval.xelem (i) = start + len*step;
+
+  return retval;
+}
+
 inline octave_idx_type
 convert_index (octave_idx_type i, bool& conv_error, 
                octave_idx_type& ext)
 {
   if (i <= 0) 
     conv_error = true;
   if (ext < i) ext = i;
   return i - 1;
@@ -284,16 +303,22 @@ std::ostream& idx_vector::idx_scalar_rep
 }
 
 double
 idx_vector::idx_scalar_rep::unconvert (void) const
 {
   return data + 1;
 }
 
+Array<octave_idx_type>
+idx_vector::idx_scalar_rep::as_array (void)
+{
+  return Array<octave_idx_type> (dim_vector (1, 1), data);
+}
+
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_vector_rep);
 
 template <class T>
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>& nda)
   : data (0), len (nda.numel ()), ext (0), aowner (0), orig_dims (nda.dims ())
 {
   if (len != 0)
     {
@@ -587,16 +612,33 @@ Array<double>
 idx_vector::idx_vector_rep::unconvert (void) const
 {
   Array<double> retval (orig_dims);
   for (octave_idx_type i = 0; i < len; i++)
     retval.xelem (i) = data[i] + 1;
   return retval;
 }
 
+Array<octave_idx_type>
+idx_vector::idx_vector_rep::as_array (void)
+{
+  if (aowner)
+    return *aowner;
+  else
+    {
+      Array<octave_idx_type> retval (orig_dims);
+      std::memcpy (retval.fortran_vec (), data, len*sizeof (octave_idx_type));
+      // Delete the old copy and share the data instead to save memory.
+      delete [] data;
+      data = retval.fortran_vec ();
+      aowner = new Array<octave_idx_type> (retval);
+      return retval;
+    }
+}
+
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_mask_rep);
 
 idx_vector::idx_mask_rep::idx_mask_rep (bool b)
   : data (0), len (b ? 1 : 0), ext (0), lsti (-1), lste (-1),
     aowner (0), orig_dims (len, len)
 {
   if (len != 0)
     {
@@ -1090,16 +1132,22 @@ void idx_vector::unconvert (idx_class_ty
         }
       break;
     default:
       assert (false);
       break;
     }
 }
 
+Array<octave_idx_type> 
+idx_vector::as_array (void) const
+{
+  return rep->as_array ();
+}
+    
 octave_idx_type 
 idx_vector::freeze (octave_idx_type z_len, const char *, bool resize_ok)
 {
   if (! resize_ok && extent (z_len) > z_len)
     {
       (*current_liboctave_error_handler)
         ("invalid matrix index = %d", extent (z_len));
       rep->err = true;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -98,16 +98,18 @@ private:
 
     // The original dimensions of this object (used when subscribing by matrices).
     virtual dim_vector orig_dimensions (void) const
       { return dim_vector (); }
 
     // i/o
     virtual std::ostream& print (std::ostream& os) const = 0;
 
+    virtual Array<octave_idx_type> as_array (void);
+
     int count;
 
     bool err;
 
   private:
 
     // No copying!
     idx_base_rep (const idx_base_rep&);
@@ -198,16 +200,18 @@ private:
     octave_idx_type get_start (void) const { return start; }
 
     octave_idx_type get_step (void) const { return step; }
 
     std::ostream& print (std::ostream& os) const;
 
     Range unconvert (void) const;
 
+    Array<octave_idx_type> as_array (void);
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
@@ -255,16 +259,18 @@ private:
       { return dim_vector (1, 1); }
 
     octave_idx_type get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
     double unconvert (void) const;
 
+    Array<octave_idx_type> as_array (void);
+
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
 
     octave_idx_type data;
@@ -322,16 +328,18 @@ private:
       { return orig_dims; }
 
     const octave_idx_type *get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
     Array<double> unconvert (void) const;
 
+    Array<octave_idx_type> as_array (void);
+    
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_vector_rep (const idx_vector_rep& idx);
 
     const octave_idx_type *data;
@@ -965,16 +973,18 @@ public:
 
   // If the index is a mask, convert it to index vector.
   idx_vector unmask (void) const;
 
   // Unconverts the index to a scalar, Range, double array or a mask.
   void unconvert (idx_class_type& iclass,
                   double& scalar, Range& range, 
                   Array<double>& array, Array<bool>& mask) const;
+
+  Array<octave_idx_type> as_array (void) const;
     
   // FIXME -- these are here for compatibility.  They should be removed
   // when no longer in use.
 
   octave_idx_type elem (octave_idx_type n) const 
     { return (*this) (n); }
 
   bool is_colon_equiv (octave_idx_type n, int) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2010-02-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-lazy-idx.cc (octave_lazy_index::reshape,
+	octave_lazy_index::squeeze, octave_lazy_index::permute,
+	octave_lazy_index::sort, octave_lazy_index::is_sorted,
+	octave_lazy_index::sort_rows_idx, octave_lazy_index::is_sorted_rows):
+	New method overrides.
+	* ov-lazy-idx.h: Declare them.
+	* ov-re-mat.cc (octave_matrix::reshape, octave_matrix::squeeze,
+	octave_matrix::sort, octave_matrix::is_sorted,
+	octave_matrix::sort_rows_idx, octave_matrix::is_sorted_rows): New
+	method overrides.
+	* ov-re-mat.h: Declare them.
+
 2010-02-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc (Ffind): Avoid unsafe conversion from Inf to
 	integer.
 
 2010-02-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* syscalls.cc (mk_stat_result): New helper function.
diff --git a/src/ov-lazy-idx.cc b/src/ov-lazy-idx.cc
--- a/src/ov-lazy-idx.cc
+++ b/src/ov-lazy-idx.cc
@@ -65,16 +65,98 @@ octave_lazy_index::try_narrowing_convers
 
     default:
       break;
     }
 
   return retval;
 }
 
+octave_value 
+octave_lazy_index::reshape (const dim_vector& new_dims) const
+{
+  return idx_vector (index.as_array ().reshape (new_dims),
+                     index.extent (0));
+}
+
+octave_value 
+octave_lazy_index::permute (const Array<int>& vec, bool inv) const
+{
+  // If the conversion has already been made, forward the operation.
+  if (value.is_defined ())
+    return value.permute (vec, inv);
+  else
+    return idx_vector (index.as_array ().permute (vec, inv),
+                       index.extent (0));
+}
+
+octave_value 
+octave_lazy_index::squeeze (void) const
+{
+  return idx_vector (index.as_array ().squeeze (),
+                     index.extent (0));
+}
+
+octave_value 
+octave_lazy_index::sort (octave_idx_type dim, sortmode mode) const
+{
+  const dim_vector odims = index.orig_dimensions ();
+  // index_vector can employ a more efficient sorting algorithm.
+  if (mode == ASCENDING && odims.length () == 2 
+      && (dim >= 0 && dim <= 1) && odims (1-dim) == 1)
+    return index_vector ().sorted ();
+  else
+    return idx_vector (index.as_array ().sort (dim, mode), 
+                       index.extent (0));
+}
+
+octave_value 
+octave_lazy_index::sort (Array<octave_idx_type> &sidx, octave_idx_type dim,
+                         sortmode mode) const
+{
+  const dim_vector odims = index.orig_dimensions ();
+  // index_vector can employ a more efficient sorting algorithm.
+  if (mode == ASCENDING && odims.length () == 2 
+      && (dim >= 0 && dim <= 1) && odims (1-dim) == 1)
+    return index_vector ().sorted (sidx);
+  else
+    return idx_vector (index.as_array ().sort (sidx, dim, mode), 
+                       index.extent (0));
+}
+
+sortmode 
+octave_lazy_index::is_sorted (sortmode mode) const
+{
+  if (index.is_range ())
+    {
+      // Avoid the array conversion.
+      octave_idx_type inc = index.increment ();
+      if (inc == 0)
+        return (mode == UNSORTED ? ASCENDING : mode);
+      else if (inc > 0)
+        return (mode == DESCENDING ? UNSORTED : ASCENDING);
+      else
+        return (mode == ASCENDING ? UNSORTED : DESCENDING);
+    }
+  else
+    return index.as_array ().is_sorted (mode);
+}
+
+Array<octave_idx_type> 
+octave_lazy_index::sort_rows_idx (sortmode mode) const
+{
+  return index.as_array ().sort_rows_idx (mode);
+}
+
+sortmode 
+octave_lazy_index::is_sorted_rows (sortmode mode) const
+{
+  return index.as_array ().is_sorted_rows (mode);
+}
+
 static const std::string value_save_tag ("index_value");
 
 bool octave_lazy_index::save_ascii (std::ostream& os)
 {
   return save_ascii_data (os, make_value (), value_save_tag, false, 0);
 }
 
 bool octave_lazy_index::load_ascii (std::istream& is)
diff --git a/src/ov-lazy-idx.h b/src/ov-lazy-idx.h
--- a/src/ov-lazy-idx.h
+++ b/src/ov-lazy-idx.h
@@ -49,18 +49,17 @@ public:
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   size_t byte_size (void) const { return numel () * sizeof (octave_idx_type); }
 
-  // FIXME: should avoid conversion.
-  octave_value squeeze (void) const { return make_value ().squeeze (); }
+  octave_value squeeze (void) const;
 
   octave_value full_value (void) const { return make_value (); }
 
   idx_vector index_vector (void) const
     { return index; }
 
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
@@ -90,42 +89,40 @@ public:
     { return make_value ().do_index_op (idx, resize_ok); }
 
   dim_vector dims (void) const { return index.orig_dimensions (); }
 
   octave_idx_type numel (void) const { return index.length (0); }
 
   octave_idx_type nnz (void) const { return numel (); }
 
-  // FIXME: should avoid conversion.
-  octave_value reshape (const dim_vector& new_dims) const
-    { return make_value ().reshape (new_dims); }
+  octave_value reshape (const dim_vector& new_dims) const;
 
-  octave_value permute (const Array<int>& vec, bool inv = false) const
-    { return make_value ().permute (vec, inv); }
+  octave_value permute (const Array<int>& vec, bool inv = false) const;
 
   octave_value resize (const dim_vector& dv, bool fill = false) const
     { return make_value ().resize (dv, fill); }
 
   octave_value all (int dim = 0) const { return make_value ().all (dim); }
   octave_value any (int dim = 0) const { return make_value ().any (dim); }
 
   MatrixType matrix_type (void) const { return make_value ().matrix_type (); }
   MatrixType matrix_type (const MatrixType& _typ) const
     { return make_value ().matrix_type (_typ); }
 
-  // FIXME: should avoid conversion.
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-    { return make_value ().is_sorted (mode); }
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
+
+  octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
+                     sortmode mode = ASCENDING) const;
 
-  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
-    { return make_value ().sort_rows_idx (mode); }
+  sortmode is_sorted (sortmode mode = UNSORTED) const;
 
-  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
-    { return make_value ().is_sorted_rows (mode); }
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
+
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
@@ -191,23 +188,16 @@ public:
 
   FORWARD_VALUE_QUERY1 (SparseMatrix, sparse_matrix_value)
 
   FORWARD_VALUE_QUERY1 (SparseComplexMatrix, sparse_complex_matrix_value)
 
   octave_value diag (octave_idx_type k = 0) const
     { return make_value ().diag (k); }
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
-    { return make_value ().sort (dim, mode); }
-
-  octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-                     sortmode mode = ASCENDING) const
-    { return make_value ().sort (sidx, dim, mode); }
-
   octave_value convert_to_str_internal (bool pad, bool force, char type) const
     { return make_value ().convert_to_str_internal (pad, force, type); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const
     { return make_value ().print_raw (os, pr_as_read_syntax); }
 
   bool save_ascii (std::ostream& os);
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -52,16 +52,17 @@ along with Octave; see the file COPYING.
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
+#include "ov-lazy-idx.h"
 #include "ov-perm.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
@@ -266,44 +267,109 @@ octave_matrix::diag (octave_idx_type k) 
       && (matrix.rows () == 1 || matrix.columns () == 1))
     retval = DiagMatrix (DiagArray2<double> (matrix));
   else
     retval = octave_base_matrix<NDArray>::diag (k);
 
   return retval;
 }
 
+// We override these two functions to allow reshaping both
+// the matrix and the index cache.
+octave_value 
+octave_matrix::reshape (const dim_vector& new_dims) const
+{
+  if (idx_cache)
+    {
+      return new octave_matrix (matrix.reshape (new_dims),
+                                idx_vector (idx_cache->as_array ().reshape (new_dims),
+                                            idx_cache->extent (0)));
+    }
+  else
+    return octave_base_matrix<NDArray>::reshape (new_dims);
+}
+
+octave_value 
+octave_matrix::squeeze (void) const
+{
+  if (idx_cache)
+    {
+      return new octave_matrix (matrix.squeeze (),
+                                idx_vector (idx_cache->as_array ().squeeze (),
+                                            idx_cache->extent (0)));
+    }
+  else
+    return octave_base_matrix<NDArray>::squeeze ();
+}
+
 octave_value 
 octave_matrix::sort (octave_idx_type dim, sortmode mode) const
 {
-  // If this matrix is known to be a valid index, and we're doing a vector sort,
-  // sort via idx_vector which may be more efficient occassionally.
-  if (idx_cache && mode == ASCENDING && ndims () == 2
-      && ((dim == 0 && matrix.columns () == 1) || (dim == 1 && matrix.rows () == 1)))
+  if (idx_cache)
     {
-      return index_vector ().sorted ();
+      // This is a valid index matrix, so sort via integers because it's
+      // generally more efficient.
+      return octave_lazy_index (*idx_cache).sort (dim, mode);
     }
   else
     return octave_base_matrix<NDArray>::sort (dim, mode);
 }
 
 octave_value 
 octave_matrix::sort (Array<octave_idx_type> &sidx, octave_idx_type dim,
                      sortmode mode) const
 {
-  // If this matrix is known to be a valid index, and we're doing a vector sort,
-  // sort via idx_vector which may be more efficient occassionally.
-  if (idx_cache && mode == ASCENDING && ndims () == 2
-      && ((dim == 0 && matrix.columns () == 1) || (dim == 1 && matrix.rows () == 1)))
+  if (idx_cache)
     {
-      return index_vector ().sorted (sidx);
+      // This is a valid index matrix, so sort via integers because it's
+      // generally more efficient.
+      return octave_lazy_index (*idx_cache).sort (sidx, dim, mode);
     }
   else
     return octave_base_matrix<NDArray>::sort (sidx, dim, mode);
 }
+
+sortmode 
+octave_matrix::is_sorted (sortmode mode) const
+{
+  if (idx_cache)
+    {
+      // This is a valid index matrix, so check via integers because it's
+      // generally more efficient.
+      return idx_cache->as_array ().is_sorted (mode);
+    }
+  else
+    return octave_base_matrix<NDArray>::is_sorted (mode);
+}
+Array<octave_idx_type> 
+octave_matrix::sort_rows_idx (sortmode mode) const
+{
+  if (idx_cache)
+    {
+      // This is a valid index matrix, so sort via integers because it's
+      // generally more efficient.
+      return octave_lazy_index (*idx_cache).sort_rows_idx (mode);
+    }
+  else
+    return octave_base_matrix<NDArray>::sort_rows_idx (mode);
+}
+
+sortmode 
+octave_matrix::is_sorted_rows (sortmode mode) const
+{
+  if (idx_cache)
+    {
+      // This is a valid index matrix, so check via integers because it's
+      // generally more efficient.
+      return idx_cache->as_array ().is_sorted_rows (mode);
+    }
+  else
+    return octave_base_matrix<NDArray>::is_sorted_rows (mode);
+}
+
 octave_value
 octave_matrix::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
   dim_vector dv = dims ();
   octave_idx_type nel = dv.numel ();
 
   charNDArray chm (dv);
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -174,20 +174,30 @@ public:
   FloatNDArray float_array_value (bool = false) const { return matrix; }
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   octave_value diag (octave_idx_type k = 0) const;
 
+  octave_value reshape (const dim_vector& new_dims) const;
+
+  octave_value squeeze (void) const;
+
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const;
 
+  sortmode is_sorted (sortmode mode = UNSORTED) const;
+
+  Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
+
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
+
   // Use matrix_ref here to clear index cache.
   void increment (void) { matrix_ref () += 1.0; }
 
   void decrement (void) { matrix_ref () -= 1.0; }
 
   void changesign (void) { matrix_ref ().changesign (); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
