# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1244658686 14400
#      Wed Jun 10 14:31:26 2009 -0400
# Node ID 29563379fa9bdc3af9bb6045c3e4791e4afcb9cb
# Parent  8a3afa8ebb061ff2e79a736d34731664a935a412
don't look for object index after keyword

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-06-10  John W. Eaton  <jwe@octave.org>
+
+	* lex.l	(handle_identifier): Set lexer_flags.looking_for_object_index
+	false if identifier is a keyword.
+	({IDENT}{S}*): Don't set lexer_flags.looking_for_object_index here.
+
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* octave.cc (octave_main): Call initialize_command_input
 	conditionally. Move line_editing update in front of it.
 	Call command_editor::force_default_editor if not line_editing.
 
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -718,21 +718,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %}
 
 {IDENT}{S}* {
     LEXER_DEBUG ("{IDENT}{S}*");
 
     int id_tok = handle_identifier ();
 
     if (id_tok >= 0)
-      {
-        lexer_flags.looking_for_object_index = true;
-
-        COUNT_TOK_AND_RETURN (id_tok);
-      }
+      COUNT_TOK_AND_RETURN (id_tok);
   }
 
 %{
 // Function handles.
 %}
 
 "@" {
     LEXER_DEBUG ("@");
@@ -3099,16 +3095,17 @@ handle_identifier (void)
 
       yylval.tok_val = new token (tok, input_line_number,
 				  current_input_column);
 
       token_stack.push (yylval.tok_val);
 
       lexer_flags.quote_is_transpose = true;
       lexer_flags.convert_spaces_to_comma = true;
+      lexer_flags.looking_for_object_index = true;
 
       current_input_column += yyleng;
 
       return STRUCT_ELT;
     }
 
   lexer_flags.at_beginning_of_statement = false;
 
@@ -3136,31 +3133,33 @@ handle_identifier (void)
 	  yylval.tok_val = new token (tok, input_line_number,
 				      current_input_column);
 
 	  token_stack.push (yylval.tok_val);
 
 	  current_input_column += yyleng;
 	  lexer_flags.quote_is_transpose = false;
 	  lexer_flags.convert_spaces_to_comma = true;
+	  lexer_flags.looking_for_object_index = true;
 
 	  return FCN_HANDLE;
 	}
     }
 
   // If we have a regular keyword, return it.
   // Keywords can be followed by identifiers.
 
   if (kw_token)
     {
       if (kw_token >= 0)
 	{
 	  current_input_column += yyleng;
 	  lexer_flags.quote_is_transpose = false;
 	  lexer_flags.convert_spaces_to_comma = true;
+	  lexer_flags.looking_for_object_index = false;
 	}
 
       return kw_token;
     }
 
   // See if we have a plot keyword (title, using, with, or clear).
 
   int c1 = text_yyinput ();
@@ -3229,16 +3228,19 @@ handle_identifier (void)
 
       do_comma_insert_check ();
 
       maybe_unput_comma (spc_gobbled);
     }
 
   current_input_column += yyleng;
 
+  if (tok != "__end__")
+    lexer_flags.looking_for_object_index = true;
+
   return NAME;
 }
 
 void
 lexical_feedback::init (void)
 {
   // Not initially defining a matrix list.
   bracketflag = 0;
