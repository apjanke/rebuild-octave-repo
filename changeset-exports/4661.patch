# HG changeset patch
# User jwe
# Date 1069738896 0
#      Tue Nov 25 05:41:36 2003 +0000
# Node ID 12b6fbd574367e255ced201e22ea643f630edabc
# Parent  5df5c9c5c16684e812055d039bdb454a168b6914
[project @ 2003-11-25 05:41:35 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include "Array.h"
 #include "Array-flags.h"
 #include "Array-util.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
+#include "lo-sstream.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::~Array (void)
 {
   if (--rep->count <= 0)
@@ -314,30 +315,62 @@ Array<T>::range_error (const char *fcn, 
   static T foo;
   return foo;
 }
 
 template <class T>
 T
 Array<T>::range_error (const char *fcn, const Array<int>& ra_idx) const
 {
-  // XXX FIXME XXX -- report index values too!
-
-  (*current_liboctave_error_handler) ("range error in Array");
+  OSSTREAM buf;
+
+  buf << fcn << " (";
+
+  int n = ra_idx.length ();
+
+  if (n > 0)
+    buf << ra_idx(0);
+
+  for (int i = 1; i < n; i++)
+    buf << ", " << ra_idx(i);
+
+  buf << "): range error";
+
+  buf << OSSTREAM_ENDS;
+
+  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
+
+  OSSTREAM_FREEZE (buf);
 
   return T ();
 }
 
 template <class T>
 T&
 Array<T>::range_error (const char *fcn, const Array<int>& ra_idx)
 {
-  // XXX FIXME XXX -- report index values too!
-
-  (*current_liboctave_error_handler) ("range error in Array");
+  OSSTREAM buf;
+
+  buf << fcn << " (";
+
+  int n = ra_idx.length ();
+
+  if (n > 0)
+    buf << ra_idx(0);
+
+  for (int i = 1; i < n; i++)
+    buf << ", " << ra_idx(i);
+
+  buf << "): range error";
+
+  buf << OSSTREAM_ENDS;
+
+  (*current_liboctave_error_handler) (OSSTREAM_C_STR (buf));
+
+  OSSTREAM_FREEZE (buf);
 
   static T foo;
   return foo;
 }
 
 template <class T>
 Array<T>
 Array<T>::reshape (const dim_vector& new_dims) const
@@ -1961,17 +1994,17 @@ Array<T>::index (idx_vector& idx_i, idx_
 
   // idx_vector::freeze() printed an error message for us.
 
   return retval;
 }
 
 template <class T>
 Array<T>
-Array<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T& rfv) const
+Array<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T&) const
 {
   // This function handles all calls with more than one idx.
   // For (3x3x3), the call can be A(2,5), A(2,:,:), A(3,2,3) etc.
 
   Array<T> retval;
 
   int n_dims = dimensions.length ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,15 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (assignN): Allow single indexing to work.
+	(Array<T>::range_error (const char*, const Array<int>&)):
+	Report index values.
+
+	* Array.cc (Array<T>::index): Delete unused arg names.
 
 	* dim-vector.h (dim_vector::all_ones): New function.
 
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
 	zeros, not orig_rows or orig_columns.
 	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,55 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.52.
 	(OCTAVE_API_VERSION): Now api-v3.
 
+	* ov.h (octave_value::all_strings): Pass second arg to rep function.
+
+	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_f): Delete unused arg names.
+	* load-save.cc (do_load): Likewise.
+	* ls-utils.cc (get_save_type): Likewise.
+	* parse.y (Fassignin): Likewise.
+	* utils.cc (empty_arg): Likewise.
+	* ov-usr-fcn.h (octave_user_function::subsref): Likewise.
+	* ov-base-mat.h (octave_base_matrix::subsref): Likewise.
+	* ov-mapper.h (octave_mapper::subsref): Likewise.
+	* ov-builtin.h (octave_builtin::subsref): Likewise.
+	* ov-cell.h (octave_cell::subsref): Likewise.
+	* ov-base-scalar.h (octave_base_scalar::subsref): Likewise.
+	* ov-struct.h (octave_struct::subsref): Likewise.
+	* ov-range.h (octave_range::subsref): Likewise.
+	* ov-list.h (octave_list::subsref): Likewise.
+	* ov-base.cc (octave_base_value::print_info): Likewise.
+	* pt-check.cc (tree_checker::visit_subplot_axes): Likewise.
+	* pr-output.cc (octave_print_internal (std::ostream&, double, bool),
+	octave_print_internal (std::ostream&, const Complex&, bool),
+	octave_print_internal (std::ostream& const charNDArray&, bool,
+	int, bool): Likewise.
+	* oct-stream.cc (octave_scan<> (std::istream&, const
+	scanf_format_elt&, char*): Likewise
+	* TEMPLATE-INST/Array-tc.cc (resize_fill_value<octave_value>):
+	Likewise.
+	* pt-bp.cc (tree_breakpoint::visit_octave_user_function,
+	tree_breakpoint::visit_octave_user_function_header,
+	tree_breakpoint::visit_octave_user_function_trailer,
+	tree_breakpoint::visit_plot_limits,
+	tree_breakpoint::visit_plot_range,
+	tree_breakpoint::visit_subplot,
+	tree_breakpoint::visit_subplot_axes,
+	tree_breakpoint::visit_subplot_list,
+	tree_breakpoint::visit_subplot_style,
+	tree_breakpoint::visit_subplot_using): Likewise.
+	* ov.cc (octave_value::column_vector_value,
+	(octave_value::complex_column_vector_value,
+	(octave_value::row_vector_value,
+	octave_value::complex_row_vector_value,
+	octave_value::do_non_const_unary_op): Likewise.
+
 	* load-save.cc: Only include ls-hdf5.h if HAVE_HDF5 is defined.
 	From Melqart <melqart@free.fr>.
 
 	* pr-output.h (octave_fcn_handle::print_as_scalar): Delete.
 
 	* pr-output.cc (octave_print_internal): New version for
 	ArrayN<std::string> objects.
 	* pr-output.h: Provide decl.
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -53,17 +53,17 @@ static bool warned_fcn_imaginary = false
 static bool warned_jac_imaginary = false;
 static bool warned_cf_imaginary = false;
 
 // Is this a recursive call?
 static int call_depth = 0;
 
 static ColumnVector
 dasrt_user_f (const ColumnVector& x, const ColumnVector& xdot,
-	      double t, int& ires)
+	      double t, int&)
 {
   ColumnVector retval;
 
   assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
 
   args(2) = t;
diff --git a/src/DLD-FUNCTIONS/eig.cc b/src/DLD-FUNCTIONS/eig.cc
--- a/src/DLD-FUNCTIONS/eig.cc
+++ b/src/DLD-FUNCTIONS/eig.cc
@@ -95,17 +95,17 @@ Schur decomposition.\n\
   else
     {
       gripe_wrong_type_arg ("eig", tmp);
       return retval;
     }
 
   if (nargout == 0 || nargout == 1)
     {
-      retval(0) = result.eigenvalues (), 1;
+      retval(0) = result.eigenvalues ();
     }
   else
     {
       // Blame it on Matlab.
 
       ComplexDiagMatrix d (result.eigenvalues ());
 
       retval(1) = d;
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -36,17 +36,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "oct-obj.h"
 
 template<>
 octave_value
-resize_fill_value<octave_value> (const octave_value& x)
+resize_fill_value<octave_value> (const octave_value&)
 {
   static octave_value retval = octave_value (Matrix ());
   return retval;
 }
 
 template class Array<octave_value>;
 
 INSTANTIATE_ARRAY_ASSIGN (octave_value, octave_value);
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -370,17 +370,17 @@ get_file_format (const std::string& fnam
 	   orig_fname.c_str ());
 
   return retval;
 }
 
 octave_value
 do_load (std::istream& stream, const std::string& orig_fname, bool force,
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
-	 bool list_only, bool swap, bool verbose, bool import,
+	 bool list_only, bool swap, bool verbose, bool /* import */,
 	 const string_vector& argv, int argv_idx, int argc, int nargout)
 {
   octave_value retval;
 
   Octave_map retstruct;
 
   OSSTREAM output_buf;
 
diff --git a/src/ls-utils.cc b/src/ls-utils.cc
--- a/src/ls-utils.cc
+++ b/src/ls-utils.cc
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 #include "data-conv.h"
 
 #include "ls-utils.h"
 
 // MAX_VAL and MIN_VAL are assumed to have integral values even though
 // they are stored in doubles.
 
 save_type
-get_save_type (double max_val, double min_val)
+get_save_type (double /* max_val */, double /* min_val */)
 {
   save_type st = LS_DOUBLE;
 
   // Matlab doesn't seem to load the UINT32 type correctly, so let's
   // avoid it (and the other unsigned types, even though they may not
   // have the same problem.  And apparently, there are problems with
   // other smaller types as well.  If we avoid them all, then maybe we
   // will avoid problems.  Unfortunately, we won't be able to save
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1096,17 +1096,18 @@ octave_scan (std::istream& is, const sca
   return is;
 }
 
 // Note that this specialization is only used for reading characters, not 
 // character strings. See BEGIN_S_CONVERSION for details.
 
 template<>
 std::istream&
-octave_scan<> (std::istream& is, const scanf_format_elt& fmt, char* valptr)
+octave_scan<> (std::istream& is, const scanf_format_elt& /* fmt */,
+	       char* valptr)
 {
   return is >> valptr;
 }
 
 template std::istream&
 octave_scan (std::istream&, const scanf_format_elt&, int*);
 
 template std::istream&
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -66,19 +66,18 @@ public:
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
 
   octave_value squeeze (void) const { return matrix.squeeze (); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -57,19 +57,18 @@ public:
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -234,17 +234,17 @@ octave_base_value::print_name_tag (std::
       retval = true;
     }
 
   return retval;
 }
 
 void
 octave_base_value::print_info (std::ostream& os,
-			       const std::string& prefix) const
+			       const std::string& /* prefix */) const
 {
   os << "no info for type: " << type_name () << "\n";
 }
 
 #define INT_CONV_METHOD(T, F, MIN_LIMIT, MAX_LIMIT) \
   T \
   octave_base_value::F ## _value (bool require_int, bool frc_str_conv) const \
   { \
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -47,18 +47,18 @@ public:
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
 		  const std::string& ds = std::string ())
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -71,19 +71,18 @@ public:
 
 #if 0
   octave_value *try_narrowing_conversion (void);
 #endif
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -64,19 +64,18 @@ public:
   ~octave_list (void) { }
 
   octave_value *clone (void) const { return new octave_list (*this); }
   octave_value *empty_clone (void) const { return new octave_list (); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value subsasgn (const std::string& type,
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -63,18 +63,18 @@ public:
       d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), ch_map_flag (cmf),
       can_ret_cmplx_for_real (crcfr) { }
 
   ~octave_mapper (void) { }
 
   octave_function *function_value (bool = false) { return this; }
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -83,19 +83,18 @@ public:
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -67,19 +67,18 @@ public:
   octave_value *clone (void) const { return new octave_struct (*this); }
   octave_value *empty_clone (void) const { return new octave_struct (); }
 
   Cell dotref (const octave_value_list& idx);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string& type,
-			     const std::list<octave_value_list>& idx,
-    			     int nargout)
+  octave_value_list subsref (const std::string&,
+			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -131,18 +131,18 @@ public:
 	args_passed = octave_value_list ();
       else
 	{
 	  args_passed = saved_args.top ();
 	  saved_args.pop ();
 	}
     }
 
-  octave_value subsref (const std::string& type,
-			const std::list<octave_value_list>& idx)
+  octave_value subsref (const std::string&,
+			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -964,17 +964,17 @@ octave_value::fcn_handle_value (bool sil
 octave_value_list
 octave_value::list_value (void) const
 {
   return rep->list_value ();
 }
 
 ColumnVector
 octave_value::column_vector_value (bool force_string_conv,
-				   bool force_vector_conversion) const
+				   bool /* frc_vec_conv */) const
 {
   ColumnVector retval;
 
   Matrix m = matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
@@ -993,17 +993,17 @@ octave_value::column_vector_value (bool 
       gripe_invalid_conversion (tn.c_str (), "real column vector");
     }
 
   return retval;
 }
 
 ComplexColumnVector
 octave_value::complex_column_vector_value (bool force_string_conv,
-					   bool force_vector_conversion) const
+					   bool /* frc_vec_conv */) const
 {
   ComplexColumnVector retval;
 
   ComplexMatrix m = complex_matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
@@ -1022,17 +1022,17 @@ octave_value::complex_column_vector_valu
       gripe_invalid_conversion (tn.c_str (), "complex column vector");
     }
 
   return retval;
 }
 
 RowVector
 octave_value::row_vector_value (bool force_string_conv,
-				bool force_vector_conversion) const
+				bool /* frc_vec_conv */) const
 {
   RowVector retval;
 
   Matrix m = matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
@@ -1051,17 +1051,17 @@ octave_value::row_vector_value (bool for
       gripe_invalid_conversion (tn.c_str (), "real row vector");
     }
 
   return retval;
 }
 
 ComplexRowVector
 octave_value::complex_row_vector_value (bool force_string_conv,
-					bool force_vector_conversion) const
+					bool /* frc_vec_conv */) const
 {
   ComplexRowVector retval;
 
   ComplexMatrix m = complex_matrix_value (force_string_conv);
 
   if (error_state)
     return retval;
 
@@ -1666,17 +1666,17 @@ gripe_unary_op_failed_or_no_method (cons
 				    const std::string& tn) 
 {
   error ("operator %s: no method, or unable to evaluate for %s operand",
 	 on.c_str (), tn.c_str ());
 }
 #endif
 
 void
-octave_value::do_non_const_unary_op (unary_op op, const octave_value_list& idx)
+octave_value::do_non_const_unary_op (unary_op, const octave_value_list&)
 {
   abort ();
 }
 
 octave_value
 octave_value::do_non_const_unary_op (unary_op op, const std::string& type,
 				     const std::list<octave_value_list>& idx)
 {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -531,17 +531,17 @@ public:
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
   virtual charNDArray char_array_value (bool frc_str_conv = false) const
     { return rep->char_array_value (frc_str_conv); }
 
   virtual string_vector all_strings (bool pad = false,
 				     bool force = false) const
-    { return rep->all_strings (pad); }
+    { return rep->all_strings (pad, force); }
 
   virtual std::string string_value (bool force = false) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3806,17 +3806,17 @@ so any results remain available after @c
       unwind_protect::run_frame ("Feval");
     }
   else
     print_usage ("eval");
 
   return retval;
 }
 
-DEFUN (assignin, args, nargout,
+DEFUN (assignin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} assignin (@var{context}, @var{varname}, @var{value})\n\
 Assign @var{value} to @var{varname} in context @var{context}, which\n\
 may be either @code{\"base\"} or @code{\"caller\"}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1349,17 +1349,18 @@ pr_plus_format (std::ostream& os, double
     os << plus_format_chars[0];
   else if (d < 0.0)
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
 void
-octave_print_internal (std::ostream& os, double d, bool pr_as_read_syntax)
+octave_print_internal (std::ostream& os, double d,
+		       bool /* pr_as_read_syntax */)
 {
   if (plus_format)
     {
       pr_plus_format (os, d);
     }
   else
     {
       set_format (d);
@@ -1609,17 +1610,17 @@ pr_plus_format (std::ostream& os, const 
   else if (ip == 0.0)
     pr_plus_format (os, rp);
   else
     os << "c";
 }
 
 void
 octave_print_internal (std::ostream& os, const Complex& c,
-		       bool pr_as_read_syntax)
+		       bool /* pr_as_read_syntax */)
 {
   if (plus_format)
     {
       pr_plus_format (os, c);
     }
   else
     {
       set_format (c);
@@ -1959,17 +1960,17 @@ octave_print_internal (std::ostream& os,
   else
     {
       os << "sorry, printing char matrices not implemented yet\n";
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const charNDArray& nda,
-		       bool pr_as_read_syntax, int extra_indent,
+		       bool pr_as_read_syntax, int /* extra_indent */,
 		       bool pr_as_string)
 {
   switch (nda.ndims ())
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent, pr_as_string);
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -266,32 +266,33 @@ tree_breakpoint::visit_complex_for_comma
   tree_statement_list *lst = cmd.body ();
 
   if (lst)
     lst->accept (*this);
 
 }
 
 void 
-tree_breakpoint::visit_octave_user_function (octave_user_function& cmd)
+tree_breakpoint::visit_octave_user_function (octave_user_function&)
 {
-  // we should not visit octave user functions because the function we are currently 
-  // in is the function where the breakpoint was requested
+  // We should not visit octave user functions because the function we
+  // are currently in is the function where the breakpoint was
+  // requested.
 }
 
 void 
-tree_breakpoint::visit_octave_user_function_header (octave_user_function& cmd)
+tree_breakpoint::visit_octave_user_function_header (octave_user_function&)
 {
-  // Do nothing
+  // Do nothing.
 }
 
 void 
-tree_breakpoint::visit_octave_user_function_trailer (octave_user_function& cmd)
+tree_breakpoint::visit_octave_user_function_trailer (octave_user_function&)
 {
-  // Do nothing
+  // Do nothing.
 }
 
 void 
 tree_breakpoint::visit_identifier (tree_identifier& id)
 {
   if (found)
     return;
 
@@ -477,23 +478,23 @@ tree_breakpoint::visit_plot_command (tre
   // Don't bother looking at the range plot list since they must be
   // on the same line.
 
   if (cmd.line () >= line)
     take_action (cmd);
 }
 
 void
-tree_breakpoint::visit_plot_limits (plot_limits& cmd)
+tree_breakpoint::visit_plot_limits (plot_limits&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void 
-tree_breakpoint::visit_plot_range (plot_range& cmd)
+tree_breakpoint::visit_plot_range (plot_range&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void
 tree_breakpoint::visit_postfix_expression (tree_postfix_expression& expr)
 {
   if (found)
@@ -591,41 +592,41 @@ tree_breakpoint::visit_statement_list (t
       tree_statement *elt = *p;
 
       if (elt)
 	elt->accept (*this);
     }
 }
 
 void 
-tree_breakpoint::visit_subplot (subplot& cmd)
+tree_breakpoint::visit_subplot (subplot&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void
-tree_breakpoint::visit_subplot_axes (subplot_axes& cmd)
+tree_breakpoint::visit_subplot_axes (subplot_axes&)
 {
   // Do nothing.  This caser will be handled in visit_tree_plot_command.
 }
 
 void
-tree_breakpoint::visit_subplot_list (subplot_list& cmd)
+tree_breakpoint::visit_subplot_list (subplot_list&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void 
-tree_breakpoint::visit_subplot_style (subplot_style& cmd)
+tree_breakpoint::visit_subplot_style (subplot_style&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void
-tree_breakpoint::visit_subplot_using (subplot_using& cmd)
+tree_breakpoint::visit_subplot_using (subplot_using&)
 {
   // Do nothing.  This case will be handled in visit_tree_plot_command.
 }
 
 void
 tree_breakpoint::visit_switch_case (tree_switch_case& cmd)
 {
   if (found)
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -481,17 +481,17 @@ tree_checker::visit_subplot (subplot& cm
 
   subplot_style *sp_style_clause = cmd.style_clause ();
 
   if (sp_style_clause)
     sp_style_clause->accept (*this);
 }
 
 void
-tree_checker::visit_subplot_axes (subplot_axes& cmd)
+tree_checker::visit_subplot_axes (subplot_axes&)
 {
 }
 
 void
 tree_checker::visit_subplot_list (subplot_list& lst)
 {
   subplot_list::iterator p = lst.begin ();
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -222,17 +222,17 @@ keyword_almost_match (const char * const
 
   return status;
 }
 
 // Return non-zero if either NR or NC is zero.  Return -1 if this
 // should be considered fatal; return 1 if this is ok.
 
 int
-empty_arg (const char *name, int nr, int nc)
+empty_arg (const char * /* name */, int nr, int nc)
 {
   return (nr == 0 || nc == 0);
 }
 
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
