# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1516636019 -3600
#      Mon Jan 22 16:46:59 2018 +0100
# Node ID 9d01ce02d5cb7d16efbaf0a585de5d2e3596990c
# Parent  b708857d634e9632a646c63f655e156174f828d9
Make selection and "HitTest" compatible with Matlab (bug #52795).

* GLCanvas.cc (GLCanvas::selectFromAxes): Don't take "HitTest" into account
  during selection.

* Canvas.cc (Canvas::canvasMousePressEvent): If the selected object has
  "HitTest"->"off" then replace it with the first ancestor with "HitTest"->"on"
  or fallback to empty matrix.

* NEWS: Announce that HitTest property is now fully implemented.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -69,17 +69,20 @@ Summary of important user-visible change
     While no longer prioritized, the FLTK toolkit is not deprecated and
     there is no schedule for its removal.
 
  ** The graphic object property "PickableParts" has been implemented
     which controls whether an object can accept mouse clicks.
 
  ** The graphic object property "Interruptible" has been fully
     implemented which controls whether a running callback function can
-    be interrupted by another callback function. 
+    be interrupted by another callback function.
+
+ ** The graphic object property "HitTest" has been updated to be fully
+    compatible with Matlab.
 
  ** Text objects now implement the properties "BackgroundColor",
     "EdgeColor", "LineStyle", "LineWidth", and "Margin".
 
  ** An initial implementation of alpha transparency has been made for
     patch and surface objects.  Printing to svg and pdf is supported.
 
  ** ishandle now returns true for both graphics handle objects and
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -631,16 +631,30 @@ namespace QtHandles
         select_object (obj, event, currentObj, axesObj);
 
         // currentObj may be invalid if, e.g., all objects under the mouse
         // click had "hittest" -> "off" or "pickableparts" -> "none".  In that
         // case, replace with underlying figObj which always accepts mouse
         // clicks.
         if (! currentObj.valid_object ())
           currentObj = figObj;
+        else if (! currentObj.get_properties ().is_hittest ())
+          {
+            // Objects with "hittest"->"off" pass the mouse event to their 
+            // parent and so on.
+            graphics_object tmpgo;
+            tmpgo = gh_manager::get_object (currentObj.get_parent ());
+            while (tmpgo && ! tmpgo.get_properties ().is_hittest ())
+              tmpgo = gh_manager::get_object (tmpgo.get_parent ());
+
+            if (tmpgo && tmpgo.get_handle () != 0.0)
+              currentObj = tmpgo;
+            else
+              currentObj = graphics_object ();
+          }
 
         if (axesObj)
           {
             if (axesObj.get_properties ().handlevisibility_is ("on")
                 && axesObj.get_properties ().get_tag () != "legend"
                 && axesObj.get_properties ().get_tag () != "colorbar")
               Utils::properties<figure> (figObj)
               .set_currentaxes (axesObj.get_handle ().as_octave_value ());
@@ -655,17 +669,18 @@ namespace QtHandles
 
         switch (newMouseMode)
           {
           case NoMode:
             {
               // Update the figure "currentobject"
               auto& fprop = Utils::properties<figure> (figObj);
 
-              if (currentObj.get_properties ().handlevisibility_is ("on"))
+              if (currentObj 
+                  && currentObj.get_properties ().handlevisibility_is ("on"))
                 fprop.set_currentobject (currentObj.get_handle ()
                                          .as_octave_value ());
               else
                 fprop.set_currentobject (Matrix ());
 
               // Update figure "selectiontype" and "currentpoint"
               gh_manager::post_set (
                                     figObj.get_handle (), "selectiontype",
@@ -673,23 +688,23 @@ namespace QtHandles
 
               updateCurrentPoint (figObj, obj, event);
 
               gh_manager::post_callback (figObj.get_handle (),
                                          "windowbuttondownfcn",
                                          button_number (event));
 
               // Execute the "buttondownfcn" of the selected object
-              if (! currentObj.get ("buttondownfcn").isempty ())
+              if (currentObj && ! currentObj.get ("buttondownfcn").isempty ())
                 gh_manager::post_callback (currentObj.get_handle (),
                                            "buttondownfcn",
                                            button_number (event));
 
               // Show context menu of the selected object
-              if (event->button () == Qt::RightButton)
+              if (currentObj && event->button () == Qt::RightButton)
                 ContextMenu::executeAt (currentObj.get_properties (),
                                         event->globalPos ());
             }
             break;
 
           case TextMode:
             {
               if (event->modifiers () == Qt::NoModifier)
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -112,17 +112,18 @@ namespace QtHandles
   {
     makeCurrent ();
 
     if (ax)
       {
         octave::opengl_selector s;
 
         s.set_viewport (width (), height ());
-        return s.select (ax, pt.x (), height () - pt.y ());
+        return s.select (ax, pt.x (), height () - pt.y (), 
+                         octave::select_ignore_hittest);
       }
 
     return graphics_object ();
   }
 
   inline void
   glDrawZoomBox (const QPoint& p1, const QPoint& p2)
   {
