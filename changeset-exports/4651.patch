# HG changeset patch
# User jwe
# Date 1069637056 0
#      Mon Nov 24 01:24:16 2003 +0000
# Node ID b868b39534b0d102566d0d2bb0d3004f4672e51c
# Parent  623f6262a8e9d89c84fd261c466c0f1c67825fb7
[project @ 2003-11-24 01:24:16 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1798,19 +1798,19 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
   idx_orig_dims.resize (idx_orig_dimsXXX.length ());
 
   for (int i = 0; i < idx_orig_dimsXXX.length (); i++)
     idx_orig_dims(i) = idx_orig_dimsXXX(i);
 
   if (ra_idx.is_colon ())
     {
-      dim_vector iidx (orig_len);
-
-      retval = Array<T> (*this, iidx);
+      // Fast magic colon processing.
+
+      retval = Array<T> (*this, dim_vector (orig_len, 1));
     }
   else if (length () == 1)
     {
       // Only one element in array.
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       if (tmp.length () != 0)
@@ -1863,39 +1863,37 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	    }
 	  else
 	    retval = Array<T> (tmp, idx_orig_dims);
 
 	  (*current_liboctave_error_handler)
 	    ("I do not know what to do here yet!");
 	}
     }
-  else if (liboctave_wfi_flag || 
-	   (ra_idx.one_zero_only () && equal_arrays (idx_orig_dims, dims ())))
+  else
     {
-      // This code is only for indexing nd-arrays.  The vector
-      // cases are handled above.
+      if (liboctave_wfi_flag
+	  && ! (ra_idx.is_colon ()
+		|| (ra_idx.one_zero_only ()
+		    && equal_arrays (idx_orig_dims, dims ()))))
+	(*current_liboctave_warning_handler)
+	  ("single index used for N-d array");
 
       ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
 	{ 
 	  dim_vector result_dims (idx_orig_dims);
 
 	  if (ra_idx.one_zero_only ())
 	    {
-	      for (int i = 0; i < result_dims.length(); i++)
-	        {
-		  if (i == 0)
-		    result_dims(i) = ra_idx.ones_count ();
-		  else if (result_dims(0) > 0)
-		    result_dims(i) = 1;
-		  else
-		    result_dims(i) = 0;
-		}
+	      result_dims.resize (2);
+	      int ntot = ra_idx.ones_count ();
+	      result_dims(0) = ntot;
+	      result_dims(1) = (ntot > 0 ? 1 : 0);
 	    }
 
 	  retval.resize (result_dims);
 
 	  int n = number_of_elements (result_dims);
 
 	  int r_dims = result_dims.length ();
 
@@ -1915,46 +1913,16 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
 		  retval.elem (iidx) = elem (temp);
 		}
 	      if (i != n - 1)
 		increment_index (iidx, result_dims);
 	    }
 	}
     }
-  else if (ra_idx.capacity () == 1)
-    {
-      // i.e. A(8) for A(3x3x3)
-
-      ra_idx.freeze (orig_len, "nd-array", resize_ok);
-
-      if (ra_idx)
-        {
-	  int r_idx = ra_idx(0);
-
-          Array<int> iidx = get_ra_idx (r_idx, dims ());
-
-          dim_vector new_dims (1);
-
-	  // This shouldn't be needed.
-
-	  Array<int> e (iidx.length ());
-
-	  for (int i = 0; i < iidx.length();i++)
-	    e(i) = iidx(i);
-
-	  // Should be able to call elem (iidx).
-
-          retval = Array<T> (new_dims, elem (e));
-	}
-    }
-  else
-    (*current_liboctave_error_handler)
-      ("single index only valid for row or column vector. ra_idx.cap () = &d",
-       ra_idx.capacity ());
 
   return retval;
 }
 
 template <class T>
 Array<T>
 Array<T>::index (idx_vector& idx_i, idx_vector& idx_j, int resize_ok,
 		 const T& rfv) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array.cc (Array<T>::indexN): Correctly handle single colon index.
+	Omit special case for ra_idx.capacity () == 1.
+	Always allow single index for matrix args with optional warning.
+
 	* idx-vector.h, idx-vector.cc: Convert boolMatrix functions to use
 	boolNDArray.  Likewise, convert Matrix functions to use	NDArray.
 
 	* Array-so.cc: New file.  Move instantiations here from so-array.h.
 	* Makefile.in (TI_SRC): Add it to the list.
 
 	* MArray-defs.h (DO_VS_OP2, DO_VV_OP2): Accept args for element
 	type and the names of the left and right operands.  Change all uses.
