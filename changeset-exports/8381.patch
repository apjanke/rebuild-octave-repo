# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228735917 -3600
#      Mon Dec 08 12:31:57 2008 +0100
# Node ID ad896677a2e2e72038a598ce5ccb422766820e64
# Parent  dbe67764e628c6a211bdef4410a69898b8b69723
implement binary saving of diag & perm matrices

diff --git a/liboctave/byte-swap.h b/liboctave/byte-swap.h
--- a/liboctave/byte-swap.h
+++ b/liboctave/byte-swap.h
@@ -35,17 +35,17 @@ swap_bytes (volatile void *ptr, unsigned
   t[i] = t[j];
   t[j] = tmp;
 }
 
 template <int n>
 void
 swap_bytes (volatile void *ptr)
 {
-  for (size_t i = 0; i < n/2; i++)
+  for (int i = 0; i < n/2; i++)
     swap_bytes (ptr, i, n-1-i);
 }
 
 template <>
 inline void
 swap_bytes <1> (volatile void *)
 {
 }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2008-12-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-re-diag.cc (octave_diag_matrix::save_binary,
+	octave_diag_matrix::load_binary): New methods.
+	* ov-re-diag.h: Declare them.
+	* ov-flt-re-diag.cc (octave_float_diag_matrix::save_binary,
+	octave_float_diag_matrix::load_binary): New methods.
+	* ov-flt-re-diag.h: Declare them.
+	* ov-cx-diag.cc (octave_complex_diag_matrix::save_binary,
+	octave_complex_diag_matrix::load_binary): New methods.
+	* ov-cx-diag.h: Declare them.
+	* ov-flt-cx-diag.cc (octave_float_complex_diag_matrix::save_binary,
+	octave_float_complex_diag_matrix::load_binary): New methods.
+	* ov-flt-cx-diag.h: Declare them.
+	* ov-perm.cc (octave_perm_matrix::save_binary,
+	octave_perm_matrix::load_binary): New methods.
+	* ov-perm.h: Declare them.
+
 2008-12-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-fcn-handle.cc (octave_fcn_handle::load_binary): Call istream::get
 	rather than istream::read to supply null terminating character.
 
 2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
 	* file-io.cc, gl-render.cc, load-save.cc, ls-hdf5.cc, ls-mat4.cc,
 	ls-mat5.cc, ls-oct-binary.cc, mex.cc, oct.h, ov-base-int.cc,
diff --git a/src/ov-cx-diag.cc b/src/ov-cx-diag.cc
--- a/src/ov-cx-diag.cc
+++ b/src/ov-cx-diag.cc
@@ -19,22 +19,25 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "byte-swap.h"
+
 #include "ov-cx-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
+#include "ls-utils.h"
 
 template class octave_base_diag<ComplexDiagMatrix, ComplexMatrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_complex_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_diag_matrix, 
                                      "complex diagonal matrix", "double");
 
@@ -151,8 +154,69 @@ octave_complex_diag_matrix::conj (void) 
 }
 
 octave_value
 octave_complex_diag_matrix::imag (void) const
 {
   return ::imag (matrix);
 }
 
+bool 
+octave_complex_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
+{
+
+  int32_t r = matrix.rows (), c = matrix.cols ();
+  os.write (reinterpret_cast<char *> (&r), 4);
+  os.write (reinterpret_cast<char *> (&c), 4);
+
+  ComplexMatrix m = ComplexMatrix (matrix.diag ());
+  save_type st = LS_DOUBLE;
+  if (save_as_floats)
+    {
+      if (m.too_large_for_float ())
+	{
+	  warning ("save: some values too large to save as floats --");
+	  warning ("save: saving as doubles instead");
+	}
+      else
+	st = LS_FLOAT;
+    }
+  else if (matrix.length () > 4096) // FIXME -- make this configurable.
+    {
+      double max_val, min_val;
+      if (m.all_integers (max_val, min_val))
+	st = get_save_type (max_val, min_val);
+    }
+
+  const Complex *mtmp = m.data ();
+  write_doubles (os, reinterpret_cast<const double *> (mtmp), st, 2 * m.numel ());
+
+  return true;
+}
+
+bool 
+octave_complex_diag_matrix::load_binary (std::istream& is, bool swap,
+				 oct_mach_info::float_format fmt)
+{
+  int32_t r, c;
+  char tmp;
+  if (! (is.read (reinterpret_cast<char *> (&r), 4)
+         && is.read (reinterpret_cast<char *> (&c), 4)
+         && is.read (reinterpret_cast<char *> (&tmp), 1)))
+    return false;
+  if (swap)
+    {
+      swap_bytes<4> (&r);
+      swap_bytes<4> (&c);
+    }
+
+  ComplexDiagMatrix m (r, c);
+  Complex *im = m.fortran_vec ();
+  octave_idx_type len = m.length ();
+  read_doubles (is, reinterpret_cast<double *> (im),
+                static_cast<save_type> (tmp), 2 * len, swap, fmt);
+  if (error_state || ! is)
+    return false;
+  matrix = m;
+
+  return true;
+}
+
diff --git a/src/ov-cx-diag.h b/src/ov-cx-diag.h
--- a/src/ov-cx-diag.h
+++ b/src/ov-cx-diag.h
@@ -68,16 +68,21 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  bool save_binary (std::ostream& os, bool& save_as_floats);
+
+  bool load_binary (std::istream& is, bool swap, 
+		    oct_mach_info::float_format fmt);
+
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-flt-cx-diag.cc b/src/ov-flt-cx-diag.cc
--- a/src/ov-flt-cx-diag.cc
+++ b/src/ov-flt-cx-diag.cc
@@ -19,21 +19,24 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "byte-swap.h"
+
 #include "ov-flt-cx-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-complex.h"
 #include "ov-flt-cx-mat.h"
+#include "ls-utils.h"
 
 template class octave_base_diag<FloatComplexDiagMatrix, FloatComplexMatrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_float_complex_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex_diag_matrix, 
                                      "float complex diagonal matrix", "single");
 
@@ -134,8 +137,60 @@ octave_float_complex_diag_matrix::conj (
   return ::conj (matrix);
 }
 
 octave_value
 octave_float_complex_diag_matrix::imag (void) const
 {
   return ::imag (matrix);
 }
+
+bool 
+octave_float_complex_diag_matrix::save_binary (std::ostream& os, 
+                                               bool& save_as_floats)
+{
+
+  int32_t r = matrix.rows (), c = matrix.cols ();
+  os.write (reinterpret_cast<char *> (&r), 4);
+  os.write (reinterpret_cast<char *> (&c), 4);
+
+  FloatComplexMatrix m = FloatComplexMatrix (matrix.diag ());
+  save_type st = LS_FLOAT;
+  if (matrix.length () > 4096) // FIXME -- make this configurable.
+    {
+      float max_val, min_val;
+      if (m.all_integers (max_val, min_val))
+	st = get_save_type (max_val, min_val);
+    }
+
+  const FloatComplex *mtmp = m.data ();
+  write_floats (os, reinterpret_cast<const float *> (mtmp), st, 2 * m.numel ());
+
+  return true;
+}
+
+bool 
+octave_float_complex_diag_matrix::load_binary (std::istream& is, bool swap,
+				 oct_mach_info::float_format fmt)
+{
+  int32_t r, c;
+  char tmp;
+  if (! (is.read (reinterpret_cast<char *> (&r), 4)
+         && is.read (reinterpret_cast<char *> (&c), 4)
+         && is.read (reinterpret_cast<char *> (&tmp), 1)))
+    return false;
+  if (swap)
+    {
+      swap_bytes<4> (&r);
+      swap_bytes<4> (&c);
+    }
+
+  FloatComplexDiagMatrix m (r, c);
+  FloatComplex *re = m.fortran_vec ();
+  octave_idx_type len = m.length ();
+  read_floats (is, reinterpret_cast<float *> (re), 
+               static_cast<save_type> (tmp), 2 * len, swap, fmt);
+  if (error_state || ! is)
+    return false;
+  matrix = m;
+
+  return true;
+}
diff --git a/src/ov-flt-cx-diag.h b/src/ov-flt-cx-diag.h
--- a/src/ov-flt-cx-diag.h
+++ b/src/ov-flt-cx-diag.h
@@ -66,16 +66,21 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  bool save_binary (std::ostream& os, bool& save_as_floats);
+
+  bool load_binary (std::istream& is, bool swap, 
+		    oct_mach_info::float_format fmt);
+
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-flt-re-diag.cc b/src/ov-flt-re-diag.cc
--- a/src/ov-flt-re-diag.cc
+++ b/src/ov-flt-re-diag.cc
@@ -19,20 +19,23 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "byte-swap.h"
+
 #include "ov-flt-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-float.h"
 #include "ov-flt-re-mat.h"
+#include "ls-utils.h"
 
 template class octave_base_diag<FloatDiagMatrix, FloatMatrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_float_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_diag_matrix, 
                                      "float diagonal matrix", "single");
 
@@ -105,8 +108,58 @@ octave_float_diag_matrix::conj (void) co
   return matrix;
 }
 
 octave_value
 octave_float_diag_matrix::imag (void) const
 {
   return DiagMatrix (matrix.rows (), matrix.cols ());
 }
+
+bool 
+octave_float_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
+{
+
+  int32_t r = matrix.rows (), c = matrix.cols ();
+  os.write (reinterpret_cast<char *> (&r), 4);
+  os.write (reinterpret_cast<char *> (&c), 4);
+
+  FloatMatrix m = FloatMatrix (matrix.diag ());
+  save_type st = LS_FLOAT;
+  if (matrix.length () > 8192) // FIXME -- make this configurable.
+    {
+      float max_val, min_val;
+      if (m.all_integers (max_val, min_val))
+	st = get_save_type (max_val, min_val);
+    }
+
+  const float *mtmp = m.data ();
+  write_floats (os, mtmp, st, m.numel ());
+
+  return true;
+}
+
+bool 
+octave_float_diag_matrix::load_binary (std::istream& is, bool swap,
+				 oct_mach_info::float_format fmt)
+{
+  int32_t r, c;
+  char tmp;
+  if (! (is.read (reinterpret_cast<char *> (&r), 4)
+         && is.read (reinterpret_cast<char *> (&c), 4)
+         && is.read (reinterpret_cast<char *> (&tmp), 1)))
+    return false;
+  if (swap)
+    {
+      swap_bytes<4> (&r);
+      swap_bytes<4> (&c);
+    }
+
+  FloatDiagMatrix m (r, c);
+  float *re = m.fortran_vec ();
+  octave_idx_type len = m.length ();
+  read_floats (is, re, static_cast<save_type> (tmp), len, swap, fmt);
+  if (error_state || ! is)
+    return false;
+  matrix = m;
+
+  return true;
+}
diff --git a/src/ov-flt-re-diag.h b/src/ov-flt-re-diag.h
--- a/src/ov-flt-re-diag.h
+++ b/src/ov-flt-re-diag.h
@@ -66,16 +66,21 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  bool save_binary (std::ostream& os, bool& save_as_floats);
+
+  bool load_binary (std::istream& is, bool swap, 
+		    oct_mach_info::float_format fmt);
+
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "byte-swap.h"
+
 #include "ov-perm.h"
 #include "ov-flt-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "error.h"
 #include "gripes.h"
 #include "ops.h"
 
@@ -289,19 +291,72 @@ octave_perm_matrix::load_ascii (std::ist
     {
       error ("load: failed to extract size & orientation");
       success = false;
     }
 
   return success;
 }
 
+bool 
+octave_perm_matrix::save_binary (std::ostream& os, bool&)
+{
+
+  int32_t size = matrix.rows ();
+  bool colp = matrix.is_col_perm ();
+  os.write (reinterpret_cast<char *> (&size), 4);
+  os.write (reinterpret_cast<char *> (&colp), 1);
+  os.write (reinterpret_cast<const char *> (matrix.data ()), matrix.byte_size());
+
+  return true;
+}
+
+bool
+octave_perm_matrix::load_binary (std::istream& is, bool swap,
+                                 oct_mach_info::float_format )
+{
+  int32_t size;
+  bool colp;
+  if (! (is.read (reinterpret_cast<char *> (&size), 4)
+         && is.read (reinterpret_cast<char *> (&colp), 1)))
+    return false;
+
+  MArray<octave_idx_type> m (size);
+
+  if (! is.read (reinterpret_cast<char *> (m.fortran_vec ()), m.byte_size ()))
+    return false;
+
+  if (swap)
+    {
+      int nel = m.numel ();
+      for (int i = 0; i < nel; i++) 
+	switch (sizeof (octave_idx_type))
+	  {
+	  case 8:
+	    swap_bytes<8> (&m(i));
+	    break;
+	  case 4:
+	    swap_bytes<4> (&m(i));
+	    break;
+	  case 2:
+	    swap_bytes<2> (&m(i));
+	    break;
+	  case 1:
+	  default:
+	    break;
+	  }
+    }
+
+  matrix = PermMatrix (m, colp);
+  return true;
+}
+
 void
 octave_perm_matrix::print_raw (std::ostream& os,
-			  bool pr_as_read_syntax) const
+                               bool pr_as_read_syntax) const
 {
   return to_dense ().print_raw (os, pr_as_read_syntax);
 }
 
 mxArray *
 octave_perm_matrix::as_mxArray (void) const
 {
   return to_dense ().as_mxArray ();
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -180,16 +180,21 @@ public:
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
+  bool save_binary (std::ostream& os, bool& save_as_floats);
+
+  bool load_binary (std::istream& is, bool swap, 
+		    oct_mach_info::float_format fmt);
+
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const;
 
   mxArray *as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
 
diff --git a/src/ov-re-diag.cc b/src/ov-re-diag.cc
--- a/src/ov-re-diag.cc
+++ b/src/ov-re-diag.cc
@@ -19,21 +19,24 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "byte-swap.h"
+
 #include "ov-re-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
+#include "ls-utils.h"
 
 template class octave_base_diag<DiagMatrix, Matrix>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_diag_matrix, "diagonal matrix", "double");
 
 static octave_base_value *
@@ -120,8 +123,69 @@ octave_diag_matrix::conj (void) const
   return matrix;
 }
 
 octave_value
 octave_diag_matrix::imag (void) const
 {
   return DiagMatrix (matrix.rows (), matrix.cols ());
 }
+
+bool 
+octave_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
+{
+
+  int32_t r = matrix.rows (), c = matrix.cols ();
+  os.write (reinterpret_cast<char *> (&r), 4);
+  os.write (reinterpret_cast<char *> (&c), 4);
+
+  Matrix m = Matrix (matrix.diag ());
+  save_type st = LS_DOUBLE;
+  if (save_as_floats)
+    {
+      if (m.too_large_for_float ())
+	{
+	  warning ("save: some values too large to save as floats --");
+	  warning ("save: saving as doubles instead");
+	}
+      else
+	st = LS_FLOAT;
+    }
+  else if (matrix.length () > 8192) // FIXME -- make this configurable.
+    {
+      double max_val, min_val;
+      if (m.all_integers (max_val, min_val))
+	st = get_save_type (max_val, min_val);
+    }
+
+  const double *mtmp = m.data ();
+  write_doubles (os, mtmp, st, m.numel ());
+
+  return true;
+}
+
+bool 
+octave_diag_matrix::load_binary (std::istream& is, bool swap,
+				 oct_mach_info::float_format fmt)
+{
+  int32_t r, c;
+  char tmp;
+  if (! (is.read (reinterpret_cast<char *> (&r), 4)
+         && is.read (reinterpret_cast<char *> (&c), 4)
+         && is.read (reinterpret_cast<char *> (&tmp), 1)))
+    return false;
+  if (swap)
+    {
+      swap_bytes<4> (&r);
+      swap_bytes<4> (&c);
+    }
+
+  DiagMatrix m (r, c);
+  double *re = m.fortran_vec ();
+  octave_idx_type len = m.length ();
+  read_doubles (is, re, static_cast<save_type> (tmp), len, swap, fmt);
+  if (error_state || ! is)
+    return false;
+  matrix = m;
+
+  return true;
+}
+
diff --git a/src/ov-re-diag.h b/src/ov-re-diag.h
--- a/src/ov-re-diag.h
+++ b/src/ov-re-diag.h
@@ -68,16 +68,21 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  bool save_binary (std::ostream& os, bool& save_as_floats);
+
+  bool load_binary (std::istream& is, bool swap, 
+		    oct_mach_info::float_format fmt);
+
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
