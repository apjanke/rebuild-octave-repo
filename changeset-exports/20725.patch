# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1447966000 18000
#      Thu Nov 19 15:46:40 2015 -0500
# Node ID 7164a69472dd3e9c9a8b20c5a85a2874ae0c34a5
# Parent  0338dc274ec53824102019176c341209ef832a42
eliminate more uses of error state

* daspk.cc, dasrt.cc, dassl.cc, lsode.cc, quad.cc: Eliminate uses of
error_state.  Handle user-supplied functions consistently.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -91,16 +91,20 @@ Summary of important user-visible change
 
  ** The global error_state variable in Octave's C++ API has been
     deprecated and will be removed in a future version.  Now the error
     and print_usage functions throw an exception
     (octave_execution_error) after displaying the error message.  This
     makes the error and print_usage functions in C++ work more like the
     corresponding functions in the scripting language.
 
+ ** New configure option, --enable-address-sanitizer-flags, to build
+    Octave with memory allocator checks (similar to those provided by
+    valgrind) built in.
+
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
  ** A graphical user interface is now the default when running Octave
     interactively.  The start-up option --no-gui will run the familiar
     command line interface, and still allows use of the GUI dialogs and
     qt plotting toolkit.  The option --no-gui-libs runs a minimalist
     command line interface that does not link with the Qt libraries and
diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -68,17 +68,27 @@ daspk_user_function (const ColumnVector&
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (daspk_fcn)
     {
-      octave_value_list tmp = daspk_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = daspk_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("daspk");
+          throw;
+        }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("daspk: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
@@ -111,17 +121,27 @@ daspk_user_jacobian (const ColumnVector&
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (daspk_jac)
     {
-      octave_value_list tmp = daspk_jac->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = daspk_jac->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("daspk");
+          throw;
+        }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("daspk: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -68,17 +68,27 @@ dasrt_user_f (const ColumnVector& x, con
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dasrt_f)
     {
-      octave_value_list tmp = dasrt_f->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = dasrt_f->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("dasrt");
+          throw;
+        }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
             }
@@ -102,17 +112,27 @@ dasrt_user_cf (const ColumnVector& x, do
 
   octave_value_list args;
 
   args(1) = t;
   args(0) = x;
 
   if (dasrt_cf)
     {
-      octave_value_list tmp = dasrt_cf->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = dasrt_cf->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("dasrt");
+          throw;
+        }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_cf_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied constraint function");
               warned_cf_imaginary = true;
             }
@@ -141,17 +161,27 @@ dasrt_user_j (const ColumnVector& x, con
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dasrt_j)
     {
-      octave_value_list tmp = dasrt_j->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = dasrt_j->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("dasrt");
+          throw;
+        }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -68,17 +68,27 @@ dassl_user_function (const ColumnVector&
   octave_value_list args;
 
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dassl_fcn)
     {
-      octave_value_list tmp = dassl_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = dassl_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("dassl");
+          throw;
+        }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dassl: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
@@ -111,17 +121,27 @@ dassl_user_jacobian (const ColumnVector&
 
   args(3) = cj;
   args(2) = t;
   args(1) = xdot;
   args(0) = x;
 
   if (dassl_jac)
     {
-      octave_value_list tmp = dassl_jac->do_multi_index_op (1, args);
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = dassl_jac->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
+          gripe_user_supplied_eval ("dassl");
+          throw;
+        }
 
       int tlen = tmp.length ();
       if (tlen > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dassl: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -65,35 +65,39 @@ lsode_user_function (const ColumnVector&
   ColumnVector retval;
 
   octave_value_list args;
   args(1) = t;
   args(0) = x;
 
   if (lsode_fcn)
     {
-      octave_value_list tmp = lsode_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
+        {
+          tmp = lsode_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
         {
           gripe_user_supplied_eval ("lsode");
-          return retval;
+          throw;
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("lsode: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
             }
 
-          retval = ColumnVector (tmp(0).vector_value ());
+          retval = tmp(0).xvector_value ("lsode: expecting user supplied function to return numeric vector");
 
-          if (error_state || retval.numel () == 0)
+          if (retval.numel () == 0)
             gripe_user_supplied_eval ("lsode");
         }
       else
         gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
@@ -104,35 +108,39 @@ lsode_user_jacobian (const ColumnVector&
   Matrix retval;
 
   octave_value_list args;
   args(1) = t;
   args(0) = x;
 
   if (lsode_jac)
     {
-      octave_value_list tmp = lsode_jac->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
+        {
+          tmp = lsode_jac->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
         {
           gripe_user_supplied_eval ("lsode");
-          return retval;
+          throw;
         }
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
         {
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("lsode: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
             }
 
-          retval = tmp(0).matrix_value ();
+          retval = tmp(0).xmatrix_value ("lsode: expecting user supplied jacobian function to return numeric array");
 
-          if (error_state || retval.numel () == 0)
+          if (retval.numel () == 0)
             gripe_user_supplied_eval ("lsode");
         }
       else
         gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -62,91 +62,80 @@ quad_user_function (double x)
 {
   double retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
   if (quad_fcn)
     {
-      octave_value_list tmp = quad_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
         {
-          quad_integration_error = 1;  // FIXME
+          tmp = quad_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
           gripe_user_supplied_eval ("quad");
-          return retval;
+          throw;
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
               warning ("quad: ignoring imaginary part returned from user-supplied function");
               warned_imaginary = true;
             }
 
-          retval = tmp(0).double_value ();
-
-          if (error_state)
-            {
-              quad_integration_error = 1;  // FIXME
-              gripe_user_supplied_eval ("quad");
-            }
+          retval = tmp(0).xdouble_value ("quad: expecting user supplied function to return numeric value");
         }
       else
-        {
-          quad_integration_error = 1;  // FIXME
-          gripe_user_supplied_eval ("quad");
-        }
+        gripe_user_supplied_eval ("quad");
     }
 
   return retval;
 }
 
 float
 quad_float_user_function (float x)
 {
   float retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
   if (quad_fcn)
     {
-      octave_value_list tmp = quad_fcn->do_multi_index_op (1, args);
+      octave_value_list tmp;
 
-      if (error_state)
+      try
         {
-          quad_integration_error = 1;  // FIXME
+          tmp = quad_fcn->do_multi_index_op (1, args);
+        }
+      catch (const octave_execution_exception&)
+        {
           gripe_user_supplied_eval ("quad");
-          return retval;
+          throw;
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
           if (! warned_imaginary && tmp(0).is_complex_type ())
             {
               warning ("quad: ignoring imaginary part returned from user-supplied function");
               warned_imaginary = true;
             }
 
-          retval = tmp(0).float_value ();
+          retval = tmp(0).xfloat_value ("quad: expecting user supplied function to return numeric value");
 
-          if (error_state)
-            {
-              quad_integration_error = 1;  // FIXME
-              gripe_user_supplied_eval ("quad");
-            }
         }
       else
-        {
-          quad_integration_error = 1;  // FIXME
-          gripe_user_supplied_eval ("quad");
-        }
+        gripe_user_supplied_eval ("quad");
     }
 
   return retval;
 }
 
 DEFUN (quad, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b})\n\
