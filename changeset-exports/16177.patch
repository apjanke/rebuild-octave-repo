# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362270686 18000
#      Sat Mar 02 19:31:26 2013 -0500
# Node ID a7669b4d27f6bae27af2545c46e32b15b82f0e11
# Parent  74ba79f79fccaa26f42ceb83413f712f5fa3e9a6
eliminate global global_command variable

* toplev.h, toplev.cc (global_command): Delete.
* parse.h, oct-parse.in.yy (octave_parser::stmt_list):
New member variable.
(octave_parser::octave_parser): Initialize it to zero.
(octave_parser:~octave_parser): Delete it.
(octave_parser::reset): Delete it and set it to zero.
* toplev.cc (main_loop): Use curr_parser->stmt_list instead of
global_command.
* input.cc (get_debug_input): Likewise.
* oct-parse.in.yy (eval_string, parse_fcn_file): Likewise.
(ABORT_PARSE): Don't set global_command to zero.
(input): Set curr_parser->stmt_list instead of global_command.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -677,39 +677,26 @@ get_debug_input (const std::string& prom
   while (Vdebugging)
     {
       unwind_protect middle_frame;
 
       reset_error_handler ();
 
       curr_parser->reset ();
 
-      // Save current value of global_command.
-      middle_frame.protect_var (global_command);
-
-      global_command = 0;
-
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       middle_frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
       int retval = curr_parser->run ();
 
-      if (retval == 0 && global_command)
+      if (retval == 0 && curr_parser->stmt_list)
         {
-          unwind_protect inner_frame;
-
-          // Use an unwind-protect cleanup function so that the
-          // global_command list will be deleted in the event of an
-          // interrupt.
-
-          inner_frame.add_fcn (cleanup_statement_list, &global_command);
-
-          global_command->accept (*current_evaluator);
+          curr_parser->stmt_list->accept (*current_evaluator);
 
           if (octave_completion_matches_called)
             octave_completion_matches_called = false;
         }
 
       octave_quit ();
     }
 }
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -94,19 +94,16 @@ int exit_status = 0;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
-// Current command to execute.
-tree_statement_list *global_command = 0;
-
 octave_call_stack *octave_call_stack::instance = 0;
 
 void
 octave_call_stack::create_instance (void)
 {
   instance = new octave_call_stack ();
 
   if (instance)
@@ -583,33 +580,23 @@ main_loop (void)
             tree_evaluator::reset_debug_state ();
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           inner_frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-          inner_frame.protect_var (global_command);
-
-          global_command = 0;
-
           retval = curr_parser->run ();
 
           if (retval == 0)
             {
-              if (global_command)
+              if (curr_parser->stmt_list)
                 {
-                  // Use an unwind-protect cleanup function so that the
-                  // global_command list will be deleted in the event of
-                  // an interrupt.
-
-                  frame.add_fcn (cleanup_statement_list, &global_command);
-
-                  global_command->accept (*current_evaluator);
+                  curr_parser->stmt_list->accept (*current_evaluator);
 
                   octave_quit ();
 
                   if (! (interactive || forced_interactive))
                     {
                       bool quit = (tree_return_command::returning
                                    || tree_break_command::breaking);
 
diff --git a/libinterp/interpfcn/toplev.h b/libinterp/interpfcn/toplev.h
--- a/libinterp/interpfcn/toplev.h
+++ b/libinterp/interpfcn/toplev.h
@@ -62,19 +62,16 @@ extern OCTINTERP_API void
 do_octave_atexit (void);
 
 extern OCTINTERP_API void
 octave_add_atexit_function (const std::string& fname);
 
 extern OCTINTERP_API bool
 octave_remove_atexit_function (const std::string& fname);
 
-// Current command to execute.
-extern OCTINTERP_API tree_statement_list *global_command;
-
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 class
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -127,17 +127,16 @@ make_statement (T *arg)
   octave_comment_list *comment = octave_comment_buffer::get_comment ();
 
   return new tree_statement (arg, comment);
 }
 
 #define ABORT_PARSE \
   do \
     { \
-      global_command = 0; \
       yyerrok; \
       if (! parser_symtab_context.empty ()) \
         parser_symtab_context.pop (); \
       if ((interactive || forced_interactive)   \
           && ! get_input_from_eval_string)      \
         YYACCEPT; \
       else \
         YYABORT; \
@@ -321,17 +320,17 @@ make_statement (T *arg)
 %%
 
 // ==============================
 // Statements and statement lists
 // ==============================
 
 input           : input1
                   {
-                    global_command = $1;
+                    curr_parser->stmt_list = $1;
                     promptflag = 1;
                     YYACCEPT;
                   }
                 | function_file
                   { YYACCEPT; }
                 | simple_list parse_error
                   { ABORT_PARSE; }
                 | parse_error
@@ -1481,27 +1480,39 @@ yyerror (octave_parser *curr_parser, con
 }
 
 octave_parser::~octave_parser (void)
 {
 #if defined (OCTAVE_USE_PUSH_PARSER)
   yypstate_delete (static_cast<yypstate *> (parser_state));
 #endif
 
-delete curr_lexer;
+  delete stmt_list;
+
+  delete curr_lexer;
 }
 void octave_parser::init (void)
 {
 #if defined (OCTAVE_USE_PUSH_PARSER)
   parser_state = yypstate_new ();
 #endif
 
   CURR_LEXER = curr_lexer;
 }
 
+void
+octave_parser::reset (void)
+{
+  delete stmt_list;
+
+  stmt_list = 0;
+
+  curr_lexer->reset ();
+}
+
 int
 octave_parser::run (void)
 {
   int status = 0;
 
 #if defined (OCTAVE_USE_PUSH_PARSER)
 
   do
@@ -3462,28 +3473,18 @@ parse_fcn_file (const std::string& ff, c
 
           if (reading_script_file)
             curr_parser->curr_lexer->prep_for_script_file ();
           else
             curr_parser->curr_lexer->prep_for_function_file ();
 
           curr_parser->curr_lexer->parsing_class_method = ! dispatch_type.empty ();
 
-          frame.protect_var (global_command);
-
-          global_command = 0;
-
           int status = curr_parser->run ();
 
-          // Use an unwind-protect cleanup function so that the
-          // global_command list will be deleted in the event of an
-          // interrupt.
-
-          frame.add_fcn (cleanup_statement_list, &global_command);
-
           fcn_ptr = curr_parser->primary_fcn_ptr;
 
           if (status != 0)
             error ("parse error while reading %s file %s",
                    file_type.c_str (), ff.c_str ());
         }
       else
         {
@@ -4207,50 +4208,35 @@ eval_string (const std::string& s, bool 
   reading_classdef_file = false;
 
   current_eval_string = s;
 
   do
     {
       curr_parser->reset ();
 
-      frame.protect_var (global_command);
-
-      global_command = 0;
-
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
       parse_status = curr_parser->run ();
 
-      tree_statement_list *command_list = global_command;
-
       // Unmark forced variables.
-      // Restore previous value of global_command.
-      frame.run (2);
+      frame.run (1);
 
       if (parse_status == 0)
         {
-          if (command_list)
+          if (curr_parser->stmt_list)
             {
-              unwind_protect inner_frame;
-
-              // Use an unwind-protect cleanup function so that the
-              // global_command list will be deleted in the event of an
-              // interrupt.
-
-              inner_frame.add_fcn (cleanup_statement_list, &command_list);
-
               tree_statement *stmt = 0;
 
-              if (command_list->length () == 1
-                  && (stmt = command_list->front ())
+              if (curr_parser->stmt_list->length () == 1
+                  && (stmt = curr_parser->stmt_list->front ())
                   && stmt->is_expression ())
                 {
                   tree_expression *expr = stmt->expression ();
 
                   if (silent)
                     expr->set_print_flag (false);
 
                   bool do_bind_ans = false;
@@ -4269,17 +4255,17 @@ eval_string (const std::string& s, bool 
 
                   if (do_bind_ans && ! (error_state || retval.empty ()))
                     bind_ans (retval(0), expr->print_result ());
 
                   if (nargout == 0)
                     retval = octave_value_list ();
                 }
               else if (nargout == 0)
-                command_list->accept (*current_evaluator);
+                curr_parser->stmt_list->accept (*current_evaluator);
               else
                 error ("eval: invalid use of statement list");
 
               if (error_state
                   || tree_return_command::returning
                   || tree_break_command::breaking
                   || tree_continue_command::continuing)
                 break;
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -139,29 +139,27 @@ octave_parser
 public:
 
   octave_parser (void)
     : endfunction_found (false),
       autoloading (false), fcn_file_from_relative_lookup (false),
       parsing_subfunctions (false), max_fcn_depth (0),
       curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), function_scopes (), primary_fcn_ptr (0),
+      stmt_list (0),
       curr_lexer (new octave_lexer ()), parser_state (0)
   {
     init ();
   }
 
   ~octave_parser (void);
 
   void init (void);
 
-  void reset (void)
-  {
-    curr_lexer->reset ();
-  }
+  void reset (void);
 
   int run (void);
 
   // Error mesages for mismatched end tokens.
   void end_error (const char *type, token::end_tok_type ettype, int l, int c);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
@@ -377,16 +375,19 @@ public:
   // A stack holding the nested function scopes being parsed.
   // We don't use std::stack, because we want the clear method. Also, we
   // must access one from the top
   std::vector<symbol_table::scope_id> function_scopes;
 
   // Pointer to the primary user function or user script function.
   octave_function *primary_fcn_ptr;
 
+  // Result of parsing input.
+  tree_statement_list *stmt_list;
+
   // State of the lexer.
   octave_lexer *curr_lexer;
 
   // Internal state of the parser.  Only used if USE_PUSH_PARSER is
   // defined.
   void *parser_state;
 
   // For unwind protect.
