# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493182506 14400
#      Wed Apr 26 00:55:06 2017 -0400
# Node ID f15f0d8b78c831c9fc0d90d6c67729337fa4507b
# Parent  054605b58513b09ea0285914c8d29f7e37e7fad6
pass dim_vector as const reference, not by value

* ls-hdf5.cc, ls-hdf5.h, oct-fftw.cc, oct-fftw.h: Pass dim_vector as
  const reference, not by value.

diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -889,17 +889,17 @@ hdf5_add_scalar_attr (octave_hdf5_id loc
 #endif
 }
 
 // Save an empty matrix, if needed.  Returns
 //    > 0  Saved empty matrix
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
-save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d)
+save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector& d)
 {
 #if defined (HAVE_HDF5)
 
   hsize_t sz = d.length ();
   OCTAVE_LOCAL_BUFFER (octave_idx_type, dims, sz);
   bool empty = false;
   hid_t space_hid = -1;
   hid_t data_hid = -1;
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -127,17 +127,17 @@ hdf5_h5g_iterate (octave_hdf5_id loc_id,
                   void *operator_data);
 
 extern OCTINTERP_API bool
 add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
                bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API int
-save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d);
+save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector& d);
 
 extern OCTINTERP_API int
 load_hdf5_empty (octave_hdf5_id loc_id, const char *name, dim_vector& d);
 
 extern OCTINTERP_API std::string
 read_hdf5_data (std::istream& is,  const std::string& filename, bool& global,
                 octave_value& tc, std::string& doc,
                 const string_vector& argv, int argv_idx, int argc);
diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -145,17 +145,17 @@ namespace octave
 #endif
   }
 
 #define CHECK_SIMD_ALIGNMENT(x)                         \
   (((reinterpret_cast<ptrdiff_t> (x)) & 0xF) == 0)
 
   void *
   fftw_planner::do_create_plan (int dir, const int rank,
-                                const dim_vector dims,
+                                const dim_vector& dims,
                                 octave_idx_type howmany,
                                 octave_idx_type stride,
                                 octave_idx_type dist,
                                 const Complex *in, Complex *out)
   {
     int which = (dir == FFTW_FORWARD) ? 0 : 1;
     fftw_plan *cur_plan_p = reinterpret_cast<fftw_plan *> (&plan[which]);
     bool create_new_plan = false;
@@ -269,17 +269,17 @@ namespace octave
         if (*cur_plan_p == 0)
           (*current_liboctave_error_handler) ("Error creating fftw plan");
       }
 
     return *cur_plan_p;
   }
 
   void *
-  fftw_planner::do_create_plan (const int rank, const dim_vector dims,
+  fftw_planner::do_create_plan (const int rank, const dim_vector& dims,
                                 octave_idx_type howmany,
                                 octave_idx_type stride,
                                 octave_idx_type dist,
                                 const double *in, Complex *out)
   {
     fftw_plan *cur_plan_p = reinterpret_cast<fftw_plan *> (&rplan);
     bool create_new_plan = false;
     bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
@@ -500,17 +500,17 @@ namespace octave
 #else
     (*current_liboctave_warning_handler)
       ("unable to change number of threads without FFTW thread support");
 #endif
   }
 
   void *
   float_fftw_planner::do_create_plan (int dir, const int rank,
-                                      const dim_vector dims,
+                                      const dim_vector& dims,
                                       octave_idx_type howmany,
                                       octave_idx_type stride,
                                       octave_idx_type dist,
                                       const FloatComplex *in,
                                       FloatComplex *out)
   {
     int which = (dir == FFTW_FORWARD) ? 0 : 1;
     fftwf_plan *cur_plan_p = reinterpret_cast<fftwf_plan *> (&plan[which]);
@@ -625,17 +625,17 @@ namespace octave
         if (*cur_plan_p == 0)
           (*current_liboctave_error_handler) ("Error creating fftw plan");
       }
 
     return *cur_plan_p;
   }
 
   void *
-  float_fftw_planner::do_create_plan (const int rank, const dim_vector dims,
+  float_fftw_planner::do_create_plan (const int rank, const dim_vector& dims,
                                       octave_idx_type howmany,
                                       octave_idx_type stride,
                                       octave_idx_type dist,
                                       const float *in, FloatComplex *out)
   {
     fftwf_plan *cur_plan_p = reinterpret_cast<fftwf_plan *> (&rplan);
     bool create_new_plan = false;
     bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
diff --git a/liboctave/numeric/oct-fftw.h b/liboctave/numeric/oct-fftw.h
--- a/liboctave/numeric/oct-fftw.h
+++ b/liboctave/numeric/oct-fftw.h
@@ -58,29 +58,29 @@ namespace octave
       PATIENT,
       EXHAUSTIVE,
       HYBRID
     };
 
     static bool instance_ok (void);
 
     static void *
-      create_plan (int dir, const int rank, const dim_vector dims,
+      create_plan (int dir, const int rank, const dim_vector& dims,
                    octave_idx_type howmany, octave_idx_type stride,
                    octave_idx_type dist, const Complex *in,
                    Complex *out)
     {
       return instance_ok ()
         ? instance->do_create_plan (dir, rank, dims, howmany, stride,
                                     dist, in, out)
         : 0;
     }
 
     static void *
-      create_plan (const int rank, const dim_vector dims,
+      create_plan (const int rank, const dim_vector& dims,
                    octave_idx_type howmany, octave_idx_type stride,
                    octave_idx_type dist, const double *in, Complex *out)
     {
       return instance_ok ()
         ? instance->do_create_plan (rank, dims, howmany, stride, dist,
                                     in, out)
         : 0;
     }
@@ -108,23 +108,23 @@ namespace octave
 
   private:
 
     static fftw_planner *instance;
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
     void *
-    do_create_plan (int dir, const int rank, const dim_vector dims,
+    do_create_plan (int dir, const int rank, const dim_vector& dims,
                     octave_idx_type howmany, octave_idx_type stride,
                     octave_idx_type dist, const Complex *in,
                     Complex *out);
 
     void *
-    do_create_plan (const int rank, const dim_vector dims,
+    do_create_plan (const int rank, const dim_vector& dims,
                     octave_idx_type howmany, octave_idx_type stride,
                     octave_idx_type dist, const double *in, Complex *out);
 
     FftwMethod do_method (void);
 
     FftwMethod do_method (FftwMethod _meth);
 
     FftwMethod meth;
@@ -204,29 +204,29 @@ namespace octave
       PATIENT,
       EXHAUSTIVE,
       HYBRID
     };
 
     static bool instance_ok (void);
 
     static void *
-      create_plan (int dir, const int rank, const dim_vector dims,
+      create_plan (int dir, const int rank, const dim_vector& dims,
                    octave_idx_type howmany, octave_idx_type stride,
                    octave_idx_type dist, const FloatComplex *in,
                    FloatComplex *out)
     {
       return instance_ok ()
         ? instance->do_create_plan (dir, rank, dims, howmany, stride,
                                     dist, in, out)
         : 0;
     }
 
     static void *
-      create_plan (const int rank, const dim_vector dims,
+      create_plan (const int rank, const dim_vector& dims,
                    octave_idx_type howmany, octave_idx_type stride,
                    octave_idx_type dist, const float *in, FloatComplex *out)
     {
       return instance_ok ()
         ? instance->do_create_plan (rank, dims, howmany, stride, dist,
                                     in, out)
         : 0;
     }
@@ -254,23 +254,23 @@ namespace octave
 
   private:
 
     static float_fftw_planner *instance;
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
     void *
-    do_create_plan (int dir, const int rank, const dim_vector dims,
+    do_create_plan (int dir, const int rank, const dim_vector& dims,
                     octave_idx_type howmany, octave_idx_type stride,
                     octave_idx_type dist, const FloatComplex *in,
                     FloatComplex *out);
 
     void *
-    do_create_plan (const int rank, const dim_vector dims,
+    do_create_plan (const int rank, const dim_vector& dims,
                     octave_idx_type howmany, octave_idx_type stride,
                     octave_idx_type dist, const float *in, FloatComplex *out);
 
     FftwMethod do_method (void);
 
     FftwMethod do_method (FftwMethod _meth);
 
     FftwMethod meth;
@@ -342,37 +342,37 @@ namespace octave
                     octave_idx_type dist = -1);
     static int fft (const Complex *in, Complex *out, size_t npts,
                     size_t nsamples = 1, octave_idx_type stride = 1,
                     octave_idx_type dist = -1);
     static int ifft (const Complex *in, Complex *out, size_t npts,
                      size_t nsamples = 1, octave_idx_type stride = 1,
                      octave_idx_type dist = -1);
 
-    static int fftNd (const double*, Complex*, const int, const dim_vector &);
+    static int fftNd (const double*, Complex*, const int, const dim_vector&);
     static int fftNd (const Complex*, Complex*, const int,
-                      const dim_vector &);
+                      const dim_vector&);
     static int ifftNd (const Complex*, Complex*, const int,
-                       const dim_vector &);
+                       const dim_vector&);
 
     static int fft (const float *in, FloatComplex *out, size_t npts,
                     size_t nsamples = 1, octave_idx_type stride = 1,
                     octave_idx_type dist = -1);
     static int fft (const FloatComplex *in, FloatComplex *out, size_t npts,
                     size_t nsamples = 1, octave_idx_type stride = 1,
                     octave_idx_type dist = -1);
     static int ifft (const FloatComplex *in, FloatComplex *out, size_t npts,
                      size_t nsamples = 1, octave_idx_type stride = 1,
                      octave_idx_type dist = -1);
 
-    static int fftNd (const float*, FloatComplex*, const int, const dim_vector &);
+    static int fftNd (const float*, FloatComplex*, const int, const dim_vector&);
     static int fftNd (const FloatComplex*, FloatComplex*, const int,
-                      const dim_vector &);
+                      const dim_vector&);
     static int ifftNd (const FloatComplex*, FloatComplex*, const int,
-                       const dim_vector &);
+                       const dim_vector&);
   };
 
   extern OCTAVE_API std::string fftw_version (void);
   extern OCTAVE_API std::string fftwf_version (void);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
