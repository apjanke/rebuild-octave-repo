# HG changeset patch
# User jwe
# Date 1026401822 0
#      Thu Jul 11 15:37:02 2002 +0000
# Node ID 7cb85d5c7aad8b54d86a8e3a96f0345349f6ef33
# Parent  fa0ae9105656d7c97eaf4294ba56b0302a2502ce
[project @ 2002-07-11 15:37:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2002-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* defun.cc (check_version): Improve error message.
+	* error.cc (warning): Only print backtrace once per warning series.
+	Print backtrace before warning messages.
+
 2002-07-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lex.l (maybe_unput_comma): Also handle '{' as an indexing op.
 
 	* DLD-FUNCTIONS/odessa.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2002-07-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -64,18 +64,23 @@ print_usage (const std::string& nm, bool
   else
     warning ("no usage message found for `%s'", nm.c_str ());
 }
 
 void
 check_version (const std::string& version, const std::string& fcn)
 {
   if (version != OCTAVE_VERSION)
-    warning ("incompatible version %s found in function `%s'",
-	     version.c_str (), fcn.c_str ());
+    {
+      warning ("incompatible version %s found in function `%s'",
+	       version.c_str (), fcn.c_str ());
+      warning ("this can lead to incorrect results or other failures");
+      warning ("you can fix this problem by recmpiling this .oct file");
+
+    }
 }
 
 // Install variables and functions in the symbol tables.
 
 void
 install_builtin_mapper (octave_mapper *mf)
 {
   symbol_record *sym_rec = global_sym_tab->lookup (mf->name (), true);
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -347,26 +347,26 @@ pr_where (const char *name)
     }
 }
 
 void
 warning (const char *fmt, ...)
 {
   if (Vwarning_option != "off")
     {
+      if (Vwarning_option == "backtrace" && ! warning_state)
+	pr_where ("warning");
+
       va_list args;
       va_start (args, fmt);
       vwarning ("warning", fmt, args);
       va_end (args);
 
       warning_state = 1;
 
-      if (Vwarning_option == "backtrace")
-	pr_where ("warning");
-
       if ((interactive || forced_interactive)
 	  && Vdebug_on_warning && curr_function)
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
 	  Vdebug_on_warning = false;
 
 	  do_keyboard (octave_value_list ());
 
