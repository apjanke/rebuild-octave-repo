# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498158657 14400
#      Thu Jun 22 15:10:57 2017 -0400
# Node ID dcba4178849594a6aaddf229f3e42fa07cefde30
# Parent  66c4d224f7cb46b97c315df952580949d201edc0
new struct/map constructors

* oct-map.h, oct-map.cc (octave_scalar_map::octave_scalar_map
  (const std::map<std::string, octave_value>&)): New constructor.

* ov-struct.h (octave_scalar_struct::octave_scalar_struct
  (const std::map<std::string, octave_value>&)): New constructor.

* ov.h, ov.cc (octave_value::octave_value
  (const std::map<std::string, octave_value>&)): New constructor.

diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -162,16 +162,29 @@ octave_fields::fieldnames (void) const
   string_vector retval(n);
 
   for (auto& fld_idx : *this)
     retval.xelem (fld_idx.second) = fld_idx.first;
 
   return retval;
 }
 
+octave_scalar_map::octave_scalar_map
+  (const std::map<std::string, octave_value>& m)
+{
+  size_t sz = m.size ();
+  xvals.resize (sz);
+  size_t i = 0;
+  for (const auto& k_v : m)
+    {
+      xkeys.getfield (k_v.first);
+      xvals[i++] = k_v.second;
+    }
+}
+
 octave_value
 octave_scalar_map::getfield (const std::string& k) const
 {
   octave_idx_type idx = xkeys.getfield (k);
   return (idx >= 0) ? xvals[idx] : octave_value ();
 }
 
 void
diff --git a/libinterp/corefcn/oct-map.h b/libinterp/corefcn/oct-map.h
--- a/libinterp/corefcn/oct-map.h
+++ b/libinterp/corefcn/oct-map.h
@@ -156,17 +156,19 @@ public:
     : xkeys (k), xvals (k.nfields ()) { }
 
   octave_scalar_map (void) : xkeys (), xvals () { }
 
   octave_scalar_map (const string_vector& k)
     : xkeys (k), xvals (k.numel ()) { }
 
   octave_scalar_map (const octave_scalar_map& m)
-    : xkeys (m.xkeys), xvals(m.xvals) { }
+    : xkeys (m.xkeys), xvals (m.xvals) { }
+
+  octave_scalar_map (const std::map<std::string, octave_value>& m);
 
   octave_scalar_map& operator = (const octave_scalar_map& m)
   {
     xkeys = m.xkeys;
     xvals = m.xvals;
 
     return *this;
   }
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -168,16 +168,19 @@ octave_scalar_struct : public octave_bas
 public:
 
   octave_scalar_struct (void)
     : octave_base_value (), map () { }
 
   octave_scalar_struct (const octave_scalar_map& m)
     : octave_base_value (), map (m) { }
 
+  octave_scalar_struct (const std::map<std::string, octave_value>& m)
+    : octave_base_value (), map (m) { }
+
   octave_scalar_struct (const octave_scalar_struct& s)
     : octave_base_value (), map (s.map) { }
 
   ~octave_scalar_struct (void) = default;
 
   octave_base_value * clone (void) const
   { return new octave_scalar_struct (*this); }
   octave_base_value * empty_clone (void) const
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1084,16 +1084,20 @@ octave_value::octave_value (const octave
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const octave_scalar_map& m)
   : rep (new octave_scalar_struct (m))
 { }
 
+octave_value::octave_value (const std::map<std::string, octave_value>& m)
+  : rep (new octave_scalar_struct (m))
+{ }
+
 octave_value::octave_value (const octave_map& m, const std::string& id,
                             const std::list<std::string>& plist)
   : rep (new octave_class (m, id, plist))
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const octave_scalar_map& m, const std::string& id,
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 #include <list>
+#include <map>
 
 #include "Range.h"
 #include "data-conv.h"
 #include "idx-vector.h"
 #include "mach-info.h"
 #include "mx-base.h"
 #include "oct-sort.h"
 #include "oct-time.h"
@@ -274,16 +275,17 @@ public:
   octave_value (const Array<octave_idx_type>& inda,
                 bool zero_based = false, bool cache_index = false);
   octave_value (const Array<std::string>& cellstr);
   octave_value (const idx_vector& idx, bool lazy = true);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r, bool force_range = false);
   octave_value (const octave_map& m);
   octave_value (const octave_scalar_map& m);
+  octave_value (const std::map<std::string, octave_value>&);
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
 
   OCTAVE_DEPRECATED (4.4, "note: second argument is always ignored; use octave_value (const octave_value_list&) instead")
   octave_value (const octave_value_list& m, bool);
 
