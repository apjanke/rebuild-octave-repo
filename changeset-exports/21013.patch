# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451418525 28800
#      Tue Dec 29 11:48:45 2015 -0800
# Node ID 7f4c6d594e3db696a721a98c20873afd27a96ed5
# Parent  91a45293b61864f04948dc01ebabf0721eb480b8
Finish renaming mapper function finite to isfinite.

* mappers.cc (Fisfinite): Call isfinite() rather than finite().

* ov-base.cc (get_umap_name): Change C string representation of
enum umap_isfinite to "isfinite".

* ov-base.h (enum unary_mapper_t): Change umap_finite to umap_isfinite.

* ov-complex.cc, ov-cx-mat.cc, ov-cx-sparse.cc, ov-float.cc, ov-flt-complex.cc,
ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-intx.h, ov-re-mat.cc, ov-re-sparse.cc,
ov-scalar.cc: Replace instances of umap_finite to umap_isfinite in macros.

* ov.h: Replace instance of umap_finite to umap_isfinite in macro.
Adjust code comments for better readability.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -912,17 +912,17 @@ isfinite ([13, Inf, NA, NaN])\n\
 @end group\n\
 @end example\n\
 @seealso{isinf, isnan, isna}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).finite ());
+  return ovl (args(0).isfinite ());
 }
 
 /*
 %!assert (! isfinite (Inf))
 %!assert (! isfinite (NaN))
 %!assert (isfinite (rand (1,10)))
 
 %!assert (! isfinite (single (Inf)))
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1196,17 +1196,17 @@ octave_base_value::get_umap_name (unary_
     "erfinv",
     "erfcinv",
     "erfc",
     "erfcx",
     "erfi",
     "dawson",
     "exp",
     "expm1",
-    "finite",
+    "isfinite",
     "fix",
     "floor",
     "gamma",
     "imag",
     "isinf",
     "isna",
     "isnan",
     "lgamma",
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -707,17 +707,17 @@ public:
     umap_erfinv,
     umap_erfcinv,
     umap_erfc,
     umap_erfcx,
     umap_erfi,
     umap_dawson,
     umap_exp,
     umap_expm1,
-    umap_finite,
+    umap_isfinite,
     umap_fix,
     umap_floor,
     umap_gamma,
     umap_imag,
     umap_isinf,
     umap_isna,
     umap_isnan,
     umap_lgamma,
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -506,17 +506,17 @@ octave_complex::map (unary_mapper_t umap
       SCALAR_MAPPER (round, xround);
       SCALAR_MAPPER (roundb, xroundb);
       SCALAR_MAPPER (signum, ::signum);
       SCALAR_MAPPER (sin, std::sin);
       SCALAR_MAPPER (sinh, std::sinh);
       SCALAR_MAPPER (sqrt, std::sqrt);
       SCALAR_MAPPER (tan, std::tan);
       SCALAR_MAPPER (tanh, std::tanh);
-      SCALAR_MAPPER (finite, xfinite);
+      SCALAR_MAPPER (isfinite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -756,17 +756,17 @@ octave_complex_matrix::map (unary_mapper
 
 #define ARRAY_METHOD_MAPPER(UMAP, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.FCN ())
 
       ARRAY_METHOD_MAPPER (abs, abs);
       ARRAY_METHOD_MAPPER (isnan, isnan);
       ARRAY_METHOD_MAPPER (isinf, isinf);
-      ARRAY_METHOD_MAPPER (finite, isfinite);
+      ARRAY_METHOD_MAPPER (isfinite, isfinite);
 
 #define ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.map<TYPE> (FCN))
 
       ARRAY_MAPPER (acos, Complex, ::acos);
       ARRAY_MAPPER (acosh, Complex, ::acosh);
       ARRAY_MAPPER (angle, double, std::arg);
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -946,14 +946,14 @@ octave_sparse_complex_matrix::map (unary
       ARRAY_MAPPER (sin, Complex, std::sin);
       ARRAY_MAPPER (sinh, Complex, std::sinh);
       ARRAY_MAPPER (sqrt, Complex, std::sqrt);
       ARRAY_MAPPER (tan, Complex, std::tan);
       ARRAY_MAPPER (tanh, Complex, std::tanh);
       ARRAY_MAPPER (isnan, bool, xisnan);
       ARRAY_MAPPER (isna, bool, octave_is_NA);
       ARRAY_MAPPER (isinf, bool, xisinf);
-      ARRAY_MAPPER (finite, bool, xfinite);
+      ARRAY_MAPPER (isfinite, bool, xfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseComplexMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -324,17 +324,17 @@ octave_float_scalar::map (unary_mapper_t
       SCALAR_MAPPER (round, xround);
       SCALAR_MAPPER (roundb, xroundb);
       SCALAR_MAPPER (signum, ::signum);
       SCALAR_MAPPER (sin, ::sinf);
       SCALAR_MAPPER (sinh, ::sinhf);
       SCALAR_MAPPER (sqrt, rc_sqrt);
       SCALAR_MAPPER (tan, ::tanf);
       SCALAR_MAPPER (tanh, ::tanhf);
-      SCALAR_MAPPER (finite, xfinite);
+      SCALAR_MAPPER (isfinite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
       SCALAR_MAPPER (xsignbit, xsignbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -450,17 +450,17 @@ octave_float_complex::map (unary_mapper_
       SCALAR_MAPPER (round, xround);
       SCALAR_MAPPER (roundb, xroundb);
       SCALAR_MAPPER (signum, ::signum);
       SCALAR_MAPPER (sin, std::sin);
       SCALAR_MAPPER (sinh, std::sinh);
       SCALAR_MAPPER (sqrt, std::sqrt);
       SCALAR_MAPPER (tan, std::tan);
       SCALAR_MAPPER (tanh, std::tanh);
-      SCALAR_MAPPER (finite, xfinite);
+      SCALAR_MAPPER (isfinite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -707,17 +707,17 @@ octave_float_complex_matrix::map (unary_
 
 #define ARRAY_METHOD_MAPPER(UMAP, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.FCN ())
 
       ARRAY_METHOD_MAPPER (abs, abs);
       ARRAY_METHOD_MAPPER (isnan, isnan);
       ARRAY_METHOD_MAPPER (isinf, isinf);
-      ARRAY_METHOD_MAPPER (finite, isfinite);
+      ARRAY_METHOD_MAPPER (isfinite, isfinite);
 
 #define ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.map<TYPE> (FCN))
 
       ARRAY_MAPPER (acos, FloatComplex, ::acos);
       ARRAY_MAPPER (acosh, FloatComplex, ::acosh);
       ARRAY_MAPPER (angle, float, std::arg);
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -738,17 +738,17 @@ octave_float_matrix::map (unary_mapper_t
     // Mappers handled specially.
 #define ARRAY_METHOD_MAPPER(UMAP, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.FCN ())
 
       ARRAY_METHOD_MAPPER (abs, abs);
       ARRAY_METHOD_MAPPER (isnan, isnan);
       ARRAY_METHOD_MAPPER (isinf, isinf);
-      ARRAY_METHOD_MAPPER (finite, isfinite);
+      ARRAY_METHOD_MAPPER (isfinite, isfinite);
 
 #define ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.map<TYPE> (FCN))
 
 #define RC_ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return do_rc_map (matrix, FCN)
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -349,17 +349,17 @@ public:
       case umap_round:
         return matrix;
       case umap_imag:
         return intNDArray<OCTAVE_INT_T> (matrix.dims (), OCTAVE_INT_T ());
       case umap_isnan:
       case umap_isna:
       case umap_isinf:
         return boolNDArray (matrix.dims (), false);
-      case umap_finite:
+      case umap_isfinite:
         return boolNDArray (matrix.dims (), true);
 
       // Special cases for Matlab compatibility.
       case umap_xtolower:
       case umap_xtoupper:
         return matrix;
 
       default:
@@ -655,17 +655,17 @@ public:
       case umap_round:
         return scalar;
       case umap_imag:
         return OCTAVE_INT_T ();
       case umap_isnan:
       case umap_isna:
       case umap_isinf:
         return false;
-      case umap_finite:
+      case umap_isfinite:
         return true;
 
       // Special cases for Matlab compatibility.
       case umap_xtolower:
       case umap_xtoupper:
         return scalar;
 
       default:
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -861,17 +861,17 @@ octave_matrix::map (unary_mapper_t umap)
     // Mappers handled specially.
 #define ARRAY_METHOD_MAPPER(UMAP, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.FCN ())
 
       ARRAY_METHOD_MAPPER (abs, abs);
       ARRAY_METHOD_MAPPER (isnan, isnan);
       ARRAY_METHOD_MAPPER (isinf, isinf);
-      ARRAY_METHOD_MAPPER (finite, isfinite);
+      ARRAY_METHOD_MAPPER (isfinite, isfinite);
 
 #define ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return octave_value (matrix.map<TYPE> (FCN))
 
 #define RC_ARRAY_MAPPER(UMAP, TYPE, FCN) \
     case umap_ ## UMAP: \
       return do_rc_map (matrix, FCN)
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -947,14 +947,14 @@ octave_sparse_matrix::map (unary_mapper_
       ARRAY_MAPPER (sin, double, ::sin);
       ARRAY_MAPPER (sinh, double, ::sinh);
       ARRAY_MAPPER (sqrt, Complex, rc_sqrt);
       ARRAY_MAPPER (tan, double, ::tan);
       ARRAY_MAPPER (tanh, double, ::tanh);
       ARRAY_MAPPER (isnan, bool, xisnan);
       ARRAY_MAPPER (isna, bool, octave_is_NA);
       ARRAY_MAPPER (isinf, bool, xisinf);
-      ARRAY_MAPPER (finite, bool, xfinite);
+      ARRAY_MAPPER (isfinite, bool, xfinite);
 
     default: // Attempt to go via dense matrix.
       return octave_base_sparse<SparseMatrix>::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -341,17 +341,17 @@ octave_scalar::map (unary_mapper_t umap)
       SCALAR_MAPPER (round, xround);
       SCALAR_MAPPER (roundb, xroundb);
       SCALAR_MAPPER (signum, ::signum);
       SCALAR_MAPPER (sin, ::sin);
       SCALAR_MAPPER (sinh, ::sinh);
       SCALAR_MAPPER (sqrt, rc_sqrt);
       SCALAR_MAPPER (tan, ::tan);
       SCALAR_MAPPER (tanh, ::tanh);
-      SCALAR_MAPPER (finite, xfinite);
+      SCALAR_MAPPER (isfinite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
       SCALAR_MAPPER (xsignbit, xsignbit);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -177,21 +177,20 @@ public:
 
   octave_value (short int i);
   octave_value (unsigned short int i);
   octave_value (int i);
   octave_value (unsigned int i);
   octave_value (long int i);
   octave_value (unsigned long int i);
 
-  // FIXME: these are kluges.  They turn into doubles
-  // internally, which will break for very large values.  We just use
-  // them to store things like 64-bit ino_t, etc, and hope that those
-  // values are never actually larger than can be represented exactly
-  // in a double.
+  // FIXME: These are kluges.  They turn into doubles internally, which will
+  // break for very large values.  We just use them to store things like
+  // 64-bit ino_t, etc, and hope that those values are never actually larger
+  // than can be represented exactly in a double.
 
 #if defined (HAVE_LONG_LONG_INT)
   octave_value (long long int i);
 #endif
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
@@ -309,18 +308,17 @@ public:
 
   // This should only be called for derived types.
 
   octave_base_value *clone (void) const;
 
   octave_base_value *empty_clone (void) const
   { return rep->empty_clone (); }
 
-  // Delete the representation of this constant if the count drops to
-  // zero.
+  // Delete the representation of this constant if the count drops to zero.
 
   ~octave_value (void)
   {
     if (--rep->count == 0)
       delete rep;
   }
 
   void make_unique (void)
@@ -332,17 +330,17 @@ public:
         if (--rep->count == 0)
           delete rep;
 
         rep = r;
       }
   }
 
   // This uniquifies the value if it is referenced by more than a certain
-  // number of shallow copies. This is useful for optimizations where we
+  // number of shallow copies.  This is useful for optimizations where we
   // know a certain copy, typically within a cell array, to be obsolete.
   void make_unique (int obsolete_copies)
   {
     if (rep->count > obsolete_copies + 1)
       {
         octave_base_value *r = rep->unique_clone ();
 
         if (--rep->count == 0)
@@ -508,19 +506,18 @@ public:
   { return rep->resize (dv, fill);}
 
   MatrixType matrix_type (void) const
   { return rep->matrix_type (); }
 
   MatrixType matrix_type (const MatrixType& typ) const
   { return rep->matrix_type (typ); }
 
-  // Does this constant have a type?  Both of these are provided since
-  // it is sometimes more natural to write is_undefined() instead of
-  // ! is_defined().
+  // Does this constant have a type?  Both of these are provided since it is
+  // sometimes more natural to write is_undefined() instead of ! is_defined().
 
   bool is_defined (void) const
   { return rep->is_defined (); }
 
   bool is_undefined (void) const
   { return ! is_defined (); }
 
   bool is_empty (void) const
@@ -992,24 +989,23 @@ public:
 
   Array<float> float_vector_value (bool frc_str_conv = false,
                                    bool frc_vec_conv = false) const;
 
   Array<FloatComplex>
   float_complex_vector_value (bool frc_str_conv = false,
                               bool frc_vec_conv = false) const;
 
-  // Extract values of specific types without any implicit type
-  // conversions.  Throw an error if an object is the wrong type for
-  // the requested value extraction.
+  // Extract values of specific types without any implicit type conversions.
+  // Throw an error if an object is the wrong type for the requested value
+  // extraction.
   //
-  // These functions are intended to provide a simple way to extract
-  // values of specific types and display error messages that are more
-  // meaningful than the generic "error: wrong type argument 'cell'"
-  // message.
+  // These functions are intended to provide a simple way to extract values of
+  // specific types and display error messages that are more meaningful than
+  // the generic "error: wrong type argument 'cell'" message.
 
   short int xshort_value (const char *fmt, ...) const;
 
   unsigned short int xushort_value (const char *fmt, ...) const;
 
   int xint_value (const char *fmt, ...) const;
 
   unsigned int xuint_value (const char *fmt, ...) const;
@@ -1178,19 +1174,19 @@ public:
 
   octave_value storable_value (void) const;
 
   // Ditto, but in place, i.e. equivalent to *this = this->storable_value (),
   // but possibly more efficient.
 
   void make_storable_value (void);
 
-  // Conversions.  These should probably be private.  If a user of this
-  // class wants a certain kind of constant, he should simply ask for
-  // it, and we should convert it if possible.
+  // FIXME: These should probably be private.  
+  // Conversions.  If a user of this class wants a certain kind of constant,
+  // he should simply ask for it, and we should convert it if possible.
 
   octave_value convert_to_str (bool pad = false, bool force = false,
                                char type = '\'') const
   { return rep->convert_to_str (pad, force, type); }
 
   octave_value
   convert_to_str_internal (bool pad, bool force, char type) const
   { return rep->convert_to_str_internal (pad, force, type); }
@@ -1346,17 +1342,17 @@ public:
   MAPPER_FORWARD (erfinv)
   MAPPER_FORWARD (erfcinv)
   MAPPER_FORWARD (erfc)
   MAPPER_FORWARD (erfcx)
   MAPPER_FORWARD (erfi)
   MAPPER_FORWARD (dawson)
   MAPPER_FORWARD (exp)
   MAPPER_FORWARD (expm1)
-  MAPPER_FORWARD (finite)
+  MAPPER_FORWARD (isfinite)
   MAPPER_FORWARD (fix)
   MAPPER_FORWARD (floor)
   MAPPER_FORWARD (gamma)
   MAPPER_FORWARD (imag)
   MAPPER_FORWARD (isinf)
   MAPPER_FORWARD (isna)
   MAPPER_FORWARD (isnan)
   MAPPER_FORWARD (lgamma)
@@ -1369,18 +1365,17 @@ public:
   MAPPER_FORWARD (roundb)
   MAPPER_FORWARD (signum)
   MAPPER_FORWARD (sin)
   MAPPER_FORWARD (sinh)
   MAPPER_FORWARD (sqrt)
   MAPPER_FORWARD (tan)
   MAPPER_FORWARD (tanh)
 
-  // These functions are prefixed with X to avoid potential macro
-  // conflicts.
+  // These functions are prefixed with X to avoid potential macro conflicts.
 
   MAPPER_FORWARD (xisalnum)
   MAPPER_FORWARD (xisalpha)
   MAPPER_FORWARD (xisascii)
   MAPPER_FORWARD (xiscntrl)
   MAPPER_FORWARD (xisdigit)
   MAPPER_FORWARD (xisgraph)
   MAPPER_FORWARD (xislower)
@@ -1394,24 +1389,26 @@ public:
   MAPPER_FORWARD (xtolower)
   MAPPER_FORWARD (xtoupper)
 
 #undef MAPPER_FORWARD
 
   octave_value map (octave_base_value::unary_mapper_t umap) const
   { return rep->map (umap); }
 
-  // Extract the n-th element, aka val(n). Result is undefined if val is not an
-  // array type or n is out of range. Never error.
+  // Extract the n-th element, aka val(n).
+  // Result is undefined if val is not an array type or n is out of range.
+  // Never error.
   octave_value
   fast_elem_extract (octave_idx_type n) const
   { return rep->fast_elem_extract (n); }
 
-  // Assign the n-th element, aka val(n) = x. Returns false if val is not an
-  // array type, x is not a matching scalar type, or n is out of range.
+  // Assign the n-th element, aka val(n) = x.
+  // Return false if val is not an array type, x is not a matching scalar type,
+  // or n is out of range.
   // Never error.
   virtual bool
   fast_elem_insert (octave_idx_type n, const octave_value& x)
   {
     make_unique ();
     return rep->fast_elem_insert (n, x);
   }
 
