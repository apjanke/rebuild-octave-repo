# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1262693776 -3600
#      Tue Jan 05 13:16:16 2010 +0100
# Node ID 64a06079cae44481dff6f3503eae51c06e7c921a
# Parent  17ce2a700a97108b09f1fe6a164c03325d8e65f0
improve cellstr cache implementation

diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -104,28 +104,43 @@ Cell::Cell (const dim_vector& dv, const 
     }
 }
 
 bool
 Cell::is_cellstr (void) const
 {
   bool retval = true;
 
-  for (int i = 0; i < numel (); i++)
+  octave_idx_type n = numel ();
+
+  for (octave_idx_type i = 0; i < n; i++)
     {
       if (! elem(i).is_string ())
 	{
 	  retval = false;
 	  break;
 	}
     }
 
   return retval;
 }
 
+Array<std::string>
+Cell::cellstr_value (void) const
+{
+  Array<std::string> retval (dims ());
+
+  octave_idx_type n = numel ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    retval.xelem (i) = elem (i).string_value ();
+
+  return retval;
+}
+
 Cell
 Cell::index (const octave_value_list& idx_arg, bool resize_ok) const
 {
   Cell retval;
 
   octave_idx_type n = idx_arg.length ();
 
   switch (n)
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -66,16 +66,18 @@ public:
 
   Cell (const dim_vector& dv, const string_vector& sv, bool trim = false);
 
   Cell (const Cell& c)
     : Array<octave_value> (c) { }
 
   bool is_cellstr (void) const;
 
+  Array<std::string> cellstr_value (void) const;
+
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
 
   Cell& delete_elements (const octave_value_list& idx);
 
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = resize_fill_value ());
 
   Cell reshape (const dim_vector& new_dims) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-01-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Cell.cc (Cell::cellstr_value): New method.
+	* Cell.h (Cell::cellstr_value): Declare it.
+
+	* ov-cell.h (octave_cell::cellstr_cache): Declare as autopointer.
+	(octave_cell::clear_cellstr_cache): Move here.
+	* ov-cell.cc (octave_cell::is_cellstr): Only allocate the pointer, but
+	don't actually create strings.
+	(octave_cell::cellstr_value): Use cached test, call
+	Cell::cellstr_value.
+	(octave_cell::make_cellstr_cache): Remove.
+
 2010-01-05  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (AM_CPPFLAGS): Include -I../libgnu in the list.
 
 2010-01-04  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* graphics.cc (graphics_object::set (const Octave_map&)): New function.
 	(graphics_object::set (const Array<std::string>&, const Cell&,
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -381,48 +381,28 @@ octave_cell::subsasgn (const std::string
 	default:
 	  panic_impossible ();
 	}
     }
 
   return retval;
 }
 
-void 
-octave_cell::clear_cellstr_cache (void) const
-{
-  cellstr_cache = Array<std::string> ();
-}
-
-void 
-octave_cell::make_cellstr_cache (void) const
-{
-  cellstr_cache = Array<std::string> (matrix.dims ());
-
-  octave_idx_type n = numel ();
-
-  std::string *dst = cellstr_cache.fortran_vec ();
-  const octave_value *src = matrix.data ();
-
-  for (octave_idx_type i = 0; i < n; i++)
-    dst[i] = src[i].string_value ();
-}
-
 bool 
 octave_cell::is_cellstr (void) const
 {
   bool retval;
-  if (! cellstr_cache.is_empty ())
+  if (cellstr_cache.get ())
     retval = true;
   else
     {
       retval = matrix.is_cellstr ();
-      // force cache to be created here
+      // Allocate empty cache to mark that this is indeed a cellstr.
       if (retval)
-        make_cellstr_cache ();
+        cellstr_cache.reset (new Array<std::string> ());
     }
 
   return retval;
 }
 
 void 
 octave_cell::assign (const octave_value_list& idx, const Cell& rhs)
 {
@@ -629,17 +609,20 @@ octave_cell::all_strings (bool pad) cons
 
 Array<std::string>
 octave_cell::cellstr_value (void) const
 {
   Array<std::string> retval;
 
   if (is_cellstr ())
     {
-      retval = cellstr_cache;
+      if (cellstr_cache->is_empty ())
+        *cellstr_cache = matrix.cellstr_value ();
+
+      return *cellstr_cache;
     }
   else
     error ("invalid conversion from cell array to array of strings");
 
   return retval;
 }
 
 bool
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_cell_h)
 #define octave_cell_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
+#include <memory>
 
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "error.h"
 #include "ov-base-mat.h"
@@ -52,17 +53,17 @@ public:
 
   octave_cell (void)
     : octave_base_matrix<Cell> () { }
 
   octave_cell (const Cell& c)
     : octave_base_matrix<Cell> (c) { }
 
   octave_cell (const Array<std::string>& str)
-    : octave_base_matrix<Cell> (Cell (str)), cellstr_cache (str) { }
+    : octave_base_matrix<Cell> (Cell (str)), cellstr_cache (new Array<std::string> (str)) { }
 
   octave_cell (const octave_cell& c)
     : octave_base_matrix<Cell> (c) { }
 
   ~octave_cell (void) { }
 
   octave_base_value *clone (void) const { return new octave_cell (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cell (); }
@@ -160,21 +161,20 @@ public:
   mxArray *as_mxArray (void) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const; 
 
 private:
 
-  void clear_cellstr_cache (void) const;
+  void clear_cellstr_cache (void) const
+    { cellstr_cache.reset (); }
 
-  mutable Array<std::string> cellstr_cache;
-
-  void make_cellstr_cache (void) const;
+  mutable std::auto_ptr<Array<std::string> > cellstr_cache;
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
