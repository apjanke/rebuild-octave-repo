# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1468246407 -3600
#      Mon Jul 11 15:13:27 2016 +0100
# Node ID f8212eb6da0054afc698968a4097df6a3d8033d2
# Parent  3459c25b679a6b776d0f9a18bbecdd574e281b56
Array: add constructor from std sequence containers (patch 9047)

* liboctave/array/Array.h: declare and define new template constructor
that supports any standard library sequence container.  Heavily based
on the reshape constructor code in Array.cc
* liboctave/array/Array.cc: just a comment to the source.
* libinterp/octave-value/ovl.h: simplify code by making use of the new
Array constructor for initializer_list.

diff --git a/libinterp/octave-value/ovl.h b/libinterp/octave-value/ovl.h
--- a/libinterp/octave-value/ovl.h
+++ b/libinterp/octave-value/ovl.h
@@ -51,24 +51,18 @@ public:
   octave_value_list (octave_idx_type n, const octave_value& val)
     : data (dim_vector (1, n), val), names () { }
 
   octave_value_list (const octave_value& tc)
     : data (dim_vector (1, 1), tc), names () { }
 
   template<template <typename...> class OV_Container>
   octave_value_list (const OV_Container<octave_value>& args)
-    : data (dim_vector (1, args.size ())), names ()
-  {
-    octave_idx_type i = 0;
-    for (const octave_value& x : args)
-      data(i++) = x;
-  }
+    : data (args, dim_vector (1, args.size ())), names () { }
 
-  // Shold probably be handled as a specialization of the Container template.
   octave_value_list (const Array<octave_value>& d)
     : data (d.as_row ()), names () { }
 
   octave_value_list (const Cell& tc)
     : data (tc.as_row ()), names () { }
 
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -48,16 +48,18 @@ along with Octave; see the file COPYING.
 template <typename T>
 typename Array<T>::ArrayRep *
 Array<T>::nil_rep (void)
 {
   static ArrayRep nr;
   return &nr;
 }
 
+// This is similar to the template for containers but specialized for Array.
+// Note we can't specialize a member without also specializing the class.
 template <typename T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : dimensions (dv), rep (a.rep),
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
   if (dimensions.safe_numel () != a.numel ())
     {
       std::string dimensions_str = a.dimensions.str ();
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <cassert>
 #include <cstddef>
 
 #include <algorithm>
 #include <iosfwd>
 
 #include "dim-vector.h"
 #include "idx-vector.h"
+#include "lo-error.h"
 #include "lo-traits.h"
 #include "lo-utils.h"
 #include "oct-sort.h"
 #include "quit.h"
 #include "oct-refcount.h"
 
 //! Handles the reference counting for all the derived classes.
 template <typename T>
@@ -188,16 +189,20 @@ public:
   {
     fill (val);
     dimensions.chop_trailing_singletons ();
   }
 
   //! Reshape constructor.
   Array (const Array<T>& a, const dim_vector& dv);
 
+  //! Constructor from standard library sequence containers.
+  template<template <typename...> class Container>
+  Array (const Container<T>& a, const dim_vector& dv);
+
   //! Type conversion case.
   template <typename U>
   Array (const Array<U>& a)
     : dimensions (a.dims ()),
       rep (new typename Array<T>::ArrayRep (a.data (), a.numel ())),
       slice_data (rep->data), slice_len (rep->len)
   { }
 
@@ -746,16 +751,41 @@ public:
 
   void *jit_array_rep (void) const { return rep; }
   //@}
 
 private:
   static void instantiation_guard ();
 };
 
+// We use a variadic template for template template parameter so that
+// we don't have to specify all the template parameters and limit this
+// to Container<T>. http://stackoverflow.com/a/20499809/1609556
+template<typename T>
+template<template <typename...> class Container>
+Array<T>::Array (const Container<T>& a, const dim_vector& dv)
+  : dimensions (dv), rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
+    slice_data (rep->data), slice_len (rep->len)
+{
+  if (dimensions.safe_numel () != octave_idx_type (a.size ()))
+    {
+      std::string new_dims_str = dimensions.str ();
+
+      (*current_liboctave_error_handler)
+        ("reshape: can't reshape %i elements into %s array",
+         a.size (), new_dims_str.c_str ());
+    }
+
+  octave_idx_type i = 0;
+  for (const T& x : a)
+    slice_data[i++] = x;
+
+  dimensions.chop_trailing_singletons ();
+}
+
 //! This is a simple wrapper template that will subclass an Array<T>
 //! type or any later type derived from it and override the default
 //! non-const operator() to not check for the array's uniqueness.  It
 //! is, however, the user's responsibility to ensure the array is
 //! actually unaliased whenever elements are accessed.
 template <typename ArrayClass>
 class NoAlias : public ArrayClass
 {
