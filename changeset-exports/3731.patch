# HG changeset patch
# User jwe
# Date 973022601 0
#      Tue Oct 31 20:03:21 2000 +0000
# Node ID c06bae7229cf1c5f0f9d12d6b5cf817a134cf277
# Parent  3c6989370d00e0b602c90e8a8f1634b299452e55
[project @ 2000-10-31 20:03:19 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2000-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* aclocal.m4 (OCTAVE_PROG_GPERF): Check that gperf supports flags
+	we use.
+
 	* missing: New file, modified from the missing script provided by
 	automake (never create files, just exit with failure status).
 	* aclocal.m4 (OCTAVE_PROG_BISON, OCTAVE_PROG_FLEX, OCTAVE_PROG_GPERF): 
 	Use $(top_srcdir)/missing as replacement script.
 
 	* aclocal.m4 (OCTAVE_PROG_FLEX, OCTAVE_PROG_BISON): New macros.
 	* configure.in: Use them.
 
diff --git a/Makefile.in b/Makefile.in
--- a/Makefile.in
+++ b/Makefile.in
@@ -41,24 +41,24 @@ header-msg: FORCE
 	@echo ""
 	@echo "***********************************************************"
 	@echo "*"
 	@echo "*  To compile Octave, you will need a recent versions of"
 	@echo "*  the following software:"
 	@echo "*"
 	@echo "*    g++ (2.95.x or a more recent version)"
 	@echo "*"
-	@echo "*    flex (2.5.4 or later) -- required if you need to"
-	@echo "*    recreate lex.cc from lex.l"
+	@echo "*    flex (2.5.4 or a more recent version) -- required if"
+	@echo "*    you need to recreate lex.cc from lex.l"
 	@echo "*"
-	@echo "*    bison (1.28 or later) -- required if you need to"
-	@echo "*    recreate parse.cc from parse.y"
+	@echo "*    bison (1.28 or a more recent version) -- required if"
+	@echo "*    you need to recreate parse.cc from parse.y"
 	@echo "*"
-	@echo "*    gperf (2.7.1 or later) -- required if you need to"
-	@echo "*    recreate oct-gperf.h from octave.gperf"
+	@echo "*    gperf (2.7.1 or a more recent version) -- required if"
+	@echo "*    you need to recreate oct-gperf.h from octave.gperf"
 	@echo "*"
 	@echo "*  Now would be a good time to read INSTALL.OCTAVE if"
 	@echo "*  you have not done so already."
 	@echo "*"
 	@echo "***********************************************************"
 	@echo ""
 
 help: header-msg
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -864,24 +864,35 @@ else
   fi
   AC_SUBST(RUNTEST)
 fi
 ])
 dnl
 dnl Is gperf installed?
 dnl
 dnl OCTAVE_PROG_GPERF
-AC_DEFUN(OCTAVE_PROG_GPERF,
-[AC_CHECK_PROG(GPERF, gperf, gperf, [])
-if test -z "$GPERF"; then
-  GPERF='$(top_srcdir)/missing gperf'
-  warn_gperf="I didn't find gperf, but it's only a problem if you need to reconstruct oct-gperf.h"
-  AC_MSG_WARN($warn_gperf)
-fi
-AC_SUBST(GPERF)
+AC_DEFUN(OCTAVE_PROG_GPERF, [
+  AC_CHECK_PROG(GPERF, gperf, gperf, [])
+  if test -n "$GPERF"; then
+    if echo "%{
+%}
+%%
+" | $GPERF -t -C -D -E -G -L ANSI-C -H octave_kw_hash -N octave_kw_lookup > /dev/null 2>&1; then
+      true
+    else
+      GPERF=""
+      warn_gperf="I found gperf, but it does not support all of the following options: -t -C -D -E -G -L ANSI-C -H -N; you need gperf 2.7 or a more recent version"
+      AC_MSG_WARN($warn_gperf)
+    fi
+  else
+    GPERF='$(top_srcdir)/missing gperf'
+    warn_gperf="I didn't find gperf, but it's only a problem if you need to reconstruct oct-gperf.h"
+    AC_MSG_WARN($warn_gperf)
+  fi
+  AC_SUBST(GPERF)
 ])
 dnl
 dnl Find nm.
 dnl
 dnl OCTAVE_PROG_NM
 AC_DEFUN(OCTAVE_PROG_NM,
 [if test "$cross_compiling" = yes; then
   NM=nm
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -215,23 +215,30 @@ Array2<T>::insert (const Array2<T>& a, i
 
   return *this;
 }
 
 template <class T>
 Array2<T>
 Array2<T>::transpose (void) const
 {
-  Array2<T> result (d2, d1);
+  if (d1 > 1 && d2 > 1)
+    {
+      Array2<T> result (d2, d1);
+
+      for (int j = 0; j < d2; j++)
+	for (int i = 0; i < d1; i++)
+	  result.xelem (j, i) = xelem (i, j);
 
-  if (d1 > 0 && d2 > 0)
-    for (int j = 0; j < d2; j++)
-      for (int i = 0; i < d1; i++)
-	result.elem (j, i) = elem (i, j);
-
-  return result;
+      return result;
+    }
+  else
+    {
+      // Fast transpose for vectors and empty matrices
+      return Array2<T> (*this, d2, d1);
+    }
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-10-31  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
+
+	* Array2.cc (Array2<T>::transpose): Avoid copy for empty matrices
+	and vectors.
+
 2000-10-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc (ComplexMatrix::cumsum, ComplexMatrix::cumprod):
 	Correct indexing for operation across rows.
 	* dMatrix.cc (Matrix::cumsum, Matrix::cumprod): Likewise.
 
 2000-10-12  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2000-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (skip_comments): Allow % as comment character too.
+	(extract_keyword): Likewise.
+
+	* Makefile.in (oct-gperf.h): Remove -a, -g, and -p flags for gperf.
+
 2000-10-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (do_load): Allow result to be returned instead of
 	inserting variables in the symbol table.  Change patterned after
 	patch by Kian Ming Adam Chai <caijianming@yahoo.co.uk>.
 
 2000-10-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -461,17 +461,17 @@ lex.cc : lex.l
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
 
 oct-conf.h: oct-conf.h.in ../Makeconf Makefile
 	@$(do-subst-config-vals)
 
 oct-gperf.h: octave.gperf
 	@echo "making $@ from $<"
-	@$(GPERF) -a -g -p -t -C -D -E -G -L ANSI-C \
+	@$(GPERF) -t -C -D -E -G -L ANSI-C \
                -H octave_kw_hash -N octave_kw_lookup \
 	  $< | sed 's,lookup\[,gperf_lookup[,' > $@.t
 	@$(top_srcdir)/move-if-change $@.t $@
 
 check: all
 .PHONY: check
 
 # If missing, GNU make attempts to create them in the reverse of the
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -328,44 +328,44 @@ skip_comments (std::istream& is)
       if (c == ' ' || c == '\t' || c == '\n')
 	; // Skip whitespace on way to beginning of next line.
       else
 	break;
     }
 
   for (;;)
     {
-      if (is && c == '#')
+      if (is && (c == '%' || c == '#'))
 	while (is.get (c) && c != '\n')
 	  ; // Skip to beginning of next line, ignoring everything.
       else
 	break;
     }
 }
 
 // Extract a KEYWORD and its value from stream IS, returning the
 // associated value in a new string.
 //
 // Input should look something like:
 //
-//  #[ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
+//  [%#][ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
 static char *
 extract_keyword (std::istream& is, const char *keyword)
 {
   char *retval = 0;
 
   char c;
   while (is.get (c))
     {
-      if (c == '#')
+      if (c == '%' || c == '#')
 	{
 	  std::ostrstream buf;
 	
-	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
+	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
@@ -408,32 +408,32 @@ extract_keyword (std::istream& is, const
   return retval;
 }
 
 // Match KEYWORD on stream IS, placing the associated value in VALUE,
 // returning TRUE if successful and FALSE otherwise.
 //
 // Input should look something like:
 //
-//  [ \t]*keyword[ \t]*int-value.*\n
+//  [%#][ \t]*keyword[ \t]*int-value.*\n
 
 static bool
 extract_keyword (std::istream& is, const char *keyword, int& value)
 {
   bool status = false;
   value = 0;
 
   char c;
   while (is.get (c))
     {
-      if (c == '#')
+      if (c == '%' || c == '#')
 	{
 	  std::ostrstream buf;
 
-	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
+	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
 
