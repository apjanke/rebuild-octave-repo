# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204021739 18000
#      Tue Feb 26 05:28:59 2008 -0500
# Node ID ff52243af934e339f4bef0d04e68779731be66d2
# Parent  493bb0de319977ab89626f0752e7c63ea7b24da1
save state separately for each MT random number generator

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,29 @@
 2008-02-26  John W. Eaton  <jwe@octave.org>
 
+	* oct-rand.cc (rand_states): New static variable.
+	(initialize_rand_states, get_dist_id, get_internal_state,
+	set_internal_state, switch_to_generator, save_state): New functions.
+	(octave_rand::state): New arg to specify distribution.
+	Save state in rand_states instead of setting internal state.
+	Return named state.  Use set_internal_state to generate proper
+	state vector from user supplied state.  Save and restore current
+	state if specified and current distributions are different.
+	(octave_rand::distribution (void)): Use switch rather than if/else.
+	(octave_rand::distribution (const std::string&)): Likewise.
+	(octave_rand::uniform_distribution,
+	octave_rand::normal_distribution,
+	octave_rand::exponential_distribution,
+	octave_rand::poisson_distribution,
+	octave_rand::gamma_distribution): Call switch_to_generator.
+	(octave_rand::state, maybe_initialize): For new_generators, just
+	call initialize_rand_states if not already initialized.
+	(octave_rand::scalar, fill_rand): Save state after generating value.
+
 	* dMatrix.cc (Matrix::lssolve): Avoid another dgelsd lwork query bug.
 	* CMatrix.cc (ComplexMatrix::lssolve): Likewise, for zgelsd
 
 2008-02-24  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int_helper): New class.  Provide
 	specializations for signed and unsigned types.
 	(octave_int<T>::operator >>=, octave_int<T>::abs,
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
+
+#include <map>
 #include <vector>
 
 #include "f77-fcn.h"
 #include "lo-ieee.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-rand.h"
 #include "oct-time.h"
@@ -48,16 +50,18 @@ along with Octave; see the file COPYING.
 // Current distribution of random numbers.
 static int current_distribution = uniform_dist;
 
 // Has the seed/state been set yet?
 static bool old_initialized = false;
 static bool new_initialized = false;
 static bool use_old_generators = false;
 
+std::map<int, ColumnVector> rand_states;
+
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgennor, DGENNOR) (const double&, const double&, double&);
 
   F77_RET_T
   F77_FUNC (dgenunf, DGENUNF) (const double&, const double&, double&);
 
@@ -121,31 +125,117 @@ do_old_initialization (void)
   s1 = force_to_fit_range (s1, 1, 2147483399);
 
   F77_FUNC (setall, SETALL) (s0, s1);
   F77_FUNC (setcgn, SETCGN) (stored_distribution);
 
   old_initialized = true;
 }
 
+static ColumnVector
+get_internal_state (void)
+{
+  ColumnVector s (MT_N + 1);
+
+  OCTAVE_LOCAL_BUFFER (uint32_t, tmp, MT_N + 1);
+
+  oct_get_state (tmp);
+
+  for (octave_idx_type i = 0; i <= MT_N; i++)
+    s.elem (i) = static_cast<double> (tmp [i]);
+
+  return s;
+}
+
+static inline void
+save_state (void)
+{
+  rand_states[current_distribution] = get_internal_state ();;
+}
+
+static void
+initialize_rand_states (void)
+{
+  if (! new_initialized)
+    {
+      oct_init_by_entropy ();
+
+      ColumnVector s = get_internal_state ();
+
+      rand_states[uniform_dist] = s;
+      rand_states[normal_dist] = s;
+      rand_states[expon_dist] = s;
+      rand_states[poisson_dist] = s;
+      rand_states[gamma_dist] = s;
+
+      new_initialized = true;
+    }
+}
+
 static inline void
 maybe_initialize (void)
 {
   if (use_old_generators)
     {
       if (! old_initialized)
 	do_old_initialization ();
     }
   else
     {
       if (! new_initialized)
-	{
-	  oct_init_by_entropy ();
-	  new_initialized = true;
-	}
+	initialize_rand_states ();
+    }
+}
+
+static int
+get_dist_id (const std::string& d)
+{
+  int retval;
+
+  if (d == "uniform" || d == "rand")
+    retval = uniform_dist;
+  else if (d == "normal" || d == "randn")
+    retval = normal_dist;
+  else if (d == "exponential" || d == "rande")
+    retval = expon_dist;
+  else if (d == "poisson" || d == "randp")
+    retval = poisson_dist;
+  else if (d == "gamma" || d == "rangd")
+    retval = gamma_dist;
+  else
+    (*current_liboctave_error_handler) ("rand: invalid distribution");
+
+  return retval;
+}
+
+static void
+set_internal_state (const ColumnVector& s)
+{
+  octave_idx_type len = s.length ();
+  octave_idx_type n = len < MT_N + 1 ? len : MT_N + 1;
+
+  OCTAVE_LOCAL_BUFFER (uint32_t, tmp, MT_N + 1);
+
+  for (octave_idx_type i = 0; i < n; i++)
+    tmp[i] = static_cast<uint32_t> (s.elem(i));
+
+  if (len == MT_N + 1 && tmp[MT_N] <= MT_N && tmp[MT_N] > 0)
+    oct_set_state (tmp);
+  else
+    oct_init_by_array (tmp, len);
+}
+
+static inline void
+switch_to_generator (int dist)
+{
+  if (dist != current_distribution)
+    {
+      current_distribution = dist;
+
+      set_internal_state (rand_states[dist]);
     }
 }
 
 double
 octave_rand::seed (void)
 {
   if (! old_initialized)
     do_old_initialization ();
@@ -167,16 +257,17 @@ octave_rand::seed (void)
 
   return u.d;
 }
 
 void
 octave_rand::seed (double s)
 {
   use_old_generators = true;
+
   maybe_initialize ();
 
   int i0, i1;
   union d2i { double d; octave_idx_type i[2]; };
   union d2i u;
   u.d = s;
 
   oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
@@ -192,135 +283,162 @@ octave_rand::seed (double s)
       i1 = force_to_fit_range (u.i[1], 1, 2147483399);
       break;
     }
 
   F77_FUNC (setsd, SETSD) (i0, i1);
 }
 
 ColumnVector
-octave_rand::state (void)
+octave_rand::state (const std::string& d)
 {
-  ColumnVector s (MT_N + 1);
   if (! new_initialized)
-    {
-      oct_init_by_entropy ();
-      new_initialized = true;
-    }
+    initialize_rand_states ();
 
-  OCTAVE_LOCAL_BUFFER (uint32_t, tmp, MT_N + 1);
-  oct_get_state (tmp);
-  for (octave_idx_type i = 0; i <= MT_N; i++)
-    s.elem (i) = static_cast<double>(tmp [i]);
-  return s;
+  return rand_states[d.empty () ? current_distribution : get_dist_id (d)];
 }
 
 void
-octave_rand::state (const ColumnVector &s)
+octave_rand::state (const ColumnVector& s, const std::string& d)
 {
   use_old_generators = false;
+
   maybe_initialize ();
 
-  octave_idx_type len = s.length();
-  octave_idx_type n = len < MT_N + 1 ? len : MT_N + 1;
-  OCTAVE_LOCAL_BUFFER (uint32_t, tmp, MT_N + 1);
-  for (octave_idx_type i = 0; i < n; i++)
-    tmp[i] = static_cast<uint32_t> (s.elem(i));
+  int old_dist = current_distribution;
+
+  int new_dist = d.empty () ? current_distribution : get_dist_id (d);
+
+  ColumnVector saved_state;
 
-  if (len == MT_N + 1 && tmp[MT_N] <= MT_N && tmp[MT_N] > 0)
-    oct_set_state (tmp);
-  else
-    oct_init_by_array (tmp, len);
+  if (old_dist != new_dist)
+    saved_state = get_internal_state ();
+
+  set_internal_state (s);
+
+  rand_states[new_dist] = get_internal_state ();
+
+  if (old_dist != new_dist)
+    rand_states[old_dist] = saved_state;
 }
 
 std::string
 octave_rand::distribution (void)
 {
+  std::string retval;
+
   maybe_initialize ();
 
-  if (current_distribution == uniform_dist)
-    return "uniform";
-  else if (current_distribution == normal_dist)
-    return "normal";
-  else if (current_distribution == expon_dist)
-    return "exponential";
-  else if (current_distribution == poisson_dist)
-    return "poisson";
-  else if (current_distribution == gamma_dist)
-    return "gamma";
-  else
+  switch (current_distribution)
     {
-      abort ();
-      return "";
+    case uniform_dist:
+      retval = "uniform";
+      break;
+
+    case normal_dist:
+      retval = "normal";
+      break;
+
+    case expon_dist:
+      retval = "exponential";
+      break;
+
+    case poisson_dist:
+      retval = "poisson";
+      break;
+
+    case gamma_dist:
+      retval = "gamma";
+      break;
+
+    default:
+      (*current_liboctave_error_handler) ("rand: invalid distribution");
+      break;
     }
+
+  return retval;
 }
 
 void
 octave_rand::distribution (const std::string& d)
 {
-  if (d == "uniform")
-    octave_rand::uniform_distribution ();
-  else if (d == "normal")
-    octave_rand::normal_distribution ();
-  else if (d == "exponential")
-    octave_rand::exponential_distribution ();
-  else if (d == "poisson")
-    octave_rand::poisson_distribution ();
-  else if (d == "gamma")
-    octave_rand::gamma_distribution ();
-  else
-    (*current_liboctave_error_handler) ("rand: invalid distribution");
+  switch (get_dist_id (d))
+    {
+    case uniform_dist:
+      octave_rand::uniform_distribution ();
+      break;
+
+    case normal_dist:
+      octave_rand::normal_distribution ();
+      break;
+
+    case expon_dist:
+      octave_rand::exponential_distribution ();
+      break;
+
+    case poisson_dist:
+      octave_rand::poisson_distribution ();
+      break;
+
+    case gamma_dist:
+      octave_rand::gamma_distribution ();
+      break;
+
+    default:
+      (*current_liboctave_error_handler) ("rand: invalid distribution");
+      break;
+    }
 }
 
 void
 octave_rand::uniform_distribution (void)
 {
   maybe_initialize ();
 
-  current_distribution = uniform_dist;
+  switch_to_generator (uniform_dist);
 
   F77_FUNC (setcgn, SETCGN) (uniform_dist);
 }
 
 void
 octave_rand::normal_distribution (void)
 {
   maybe_initialize ();
 
-  current_distribution = normal_dist;
+  switch_to_generator (normal_dist);
 
   F77_FUNC (setcgn, SETCGN) (normal_dist);
 }
 
 void
 octave_rand::exponential_distribution (void)
 {
   maybe_initialize ();
 
-  current_distribution = expon_dist;
+  switch_to_generator (expon_dist);
 
   F77_FUNC (setcgn, SETCGN) (expon_dist);
 }
 
 void
 octave_rand::poisson_distribution (void)
 {
   maybe_initialize ();
 
-  current_distribution = poisson_dist;
+  switch_to_generator (poisson_dist);
 
   F77_FUNC (setcgn, SETCGN) (poisson_dist);
 }
 
 void
 octave_rand::gamma_distribution (void)
 {
   maybe_initialize ();
 
-  current_distribution = gamma_dist;
+  switch_to_generator (gamma_dist);
 
   F77_FUNC (setcgn, SETCGN) (gamma_dist);
 }
 
 
 double
 octave_rand::scalar (double a)
 {
@@ -358,48 +476,50 @@ octave_rand::scalar (double a)
 	case gamma_dist:
 	  if (a <= 0.0 || xisnan(a) || xisinf(a))
 	    retval = octave_NaN;
 	  else
 	    F77_FUNC (dgengam, DGENGAM) (1.0, a, retval);
 	  break;
 
 	default:
-	  abort ();
+	  (*current_liboctave_error_handler) ("rand: invalid distribution");
 	  break;
 	}
     }
   else
     {
       switch (current_distribution)
 	{
 	case uniform_dist:
-	  retval = oct_randu();
+	  retval = oct_randu ();
 	  break;
 
 	case normal_dist:
-	  retval = oct_randn();
+	  retval = oct_randn ();
 	  break;
 
 	case expon_dist:
-	  retval = oct_rande();
+	  retval = oct_rande ();
 	  break;
 
 	case poisson_dist:
-	  retval = oct_randp(a);
+	  retval = oct_randp (a);
 	  break;
 
 	case gamma_dist:
-	  retval = oct_randg(a);
+	  retval = oct_randg (a);
 	  break;
 
 	default:
-	  abort ();
+	  (*current_liboctave_error_handler) ("rand: invalid distribution");
 	  break;
 	}
+
+      save_state ();
     }
 
   return retval;
 }
 
 #define MAKE_RAND(len) \
   do \
     { \
@@ -489,20 +609,22 @@ fill_rand (octave_idx_type len, double *
 	    MAKE_RAND (len);
 #undef RAND_FUNC
 	}
       else
 	oct_fill_randg (a, len, v);
       break;
 
     default:
-      abort ();
+      (*current_liboctave_error_handler) ("rand: invalid distribution");
       break;
     }
 
+  save_state ();
+
   return;
 }
 
 Matrix
 octave_rand::matrix (octave_idx_type n, octave_idx_type m, double a)
 {
   Matrix retval;
 
diff --git a/liboctave/oct-rand.h b/liboctave/oct-rand.h
--- a/liboctave/oct-rand.h
+++ b/liboctave/oct-rand.h
@@ -35,26 +35,27 @@ octave_rand
 {
   // Return the current seed.
   static double seed (void);
 
   // Set the seed.
   static void seed (double s);
 
   // Return the current state.
-  static ColumnVector state (void);
+  static ColumnVector state (const std::string& d = std::string ());
 
   // Set the current state/
-  static void state (const ColumnVector &s);
+  static void state (const ColumnVector &s,
+		     const std::string& d = std::string ());
   
   // Return the current distribution.
   static std::string distribution (void);
 
   // Set the current distribution.  May be either "uniform" (the
-  // default) or "normal".
+  // default), "normal", "exponential", "poisson", or "gamma".
   static void distribution (const std::string& d);
 
   static void uniform_distribution (void);
 
   static void normal_distribution (void);
 
   static void exponential_distribution (void);
 
diff --git a/liboctave/randmtzig.c b/liboctave/randmtzig.c
--- a/liboctave/randmtzig.c
+++ b/liboctave/randmtzig.c
@@ -198,17 +198,17 @@ oct_init_by_int (uint32_t s)
     left = 1; 
     initf = 1;
 }
 
 /* initialize by an array with array-length */
 /* init_key is the array for initializing keys */
 /* key_length is its length */
 void 
-oct_init_by_array (uint32_t init_key[], int key_length)
+oct_init_by_array (uint32_t *init_key, int key_length)
 {
   int i, j, k;
   oct_init_by_int (19650218UL);
   i = 1;
   j = 0;
   k = (MT_N > key_length ? MT_N : key_length);
   for (; k; k--)
     {
@@ -276,27 +276,27 @@ oct_init_by_entropy (void)
 	  entropy[n++] = tv.tv_usec;   /* Fractional part of current time */
       }
 #endif
     /* Send all the entropy into the initial state vector */
     oct_init_by_array(entropy,n);
 }
 
 void 
-oct_set_state (uint32_t save[])
+oct_set_state (uint32_t *save)
 {
   int i;
-  for (i=0; i < MT_N; i++) 
+  for (i = 0; i < MT_N; i++) 
     state[i] = save[i];
   left = save[MT_N];
   next = state + (MT_N - left + 1);
 }
 
 void 
-oct_get_state (uint32_t save[])
+oct_get_state (uint32_t *save)
 {
   int i;
   for (i = 0; i < MT_N; i++) 
     save[i] = state[i];
   save[MT_N] = left;
 }
 
 static void 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-02-26  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/rand.cc (do_rand): Pass name of calling function
+	to octave_rand::state.
+
 	* variables.cc (bind_ans): Handle cs-lists recursively.
 
 	* ov-cs-list.h, ov-cs-list.cc (octave_cs_list::print,
 	octave_cs_list::print_raw): Delete.
 
 2008-02-25  John W. Eaton  <jwe@octave.org>
 
 	* Cell.cc (Cell::map): New function.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -108,17 +108,17 @@ do_rand (const octave_value_list& args, 
 		retval = octave_rand::distribution ();
 	      }
 	    else if (s_arg == "seed")
 	      {
 		retval = octave_rand::seed ();
 	      }
 	    else if (s_arg == "state" || s_arg == "twister")
 	      {
-		retval = octave_rand::state ();
+		retval = octave_rand::state (fcn);
 	      }
 	    else if (s_arg == "uniform")
 	      {
 		octave_rand::uniform_distribution ();
 	      }
 	    else if (s_arg == "normal")
 	      {
 		octave_rand::normal_distribution ();
@@ -245,17 +245,17 @@ do_rand (const octave_value_list& args, 
 		  error ("%s: seed must be a real scalar", fcn);
 	      }
 	    else if (ts == "state" || ts == "twister")
 	      {
 		ColumnVector s = 
 		  ColumnVector (args(idx+1).vector_value(false, true));
 
 		if (! error_state)
-		  octave_rand::state (s);
+		  octave_rand::state (s, fcn);
 	      }
 	    else
 	      error ("%s: unrecognized string argument", fcn);
 	  }
 	else
 	  {
 	    dims.resize (nargin);
 
