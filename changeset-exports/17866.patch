# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383783479 18000
#      Wed Nov 06 19:17:59 2013 -0500
# Node ID ea0ecbe2eaf543441f79be098c25b2b23550b799
# Parent  dde06c2ac6c6f7db418540706eaa74797647f725
display matrix values in GUI workspace viewer (bug #40499)

* pr-output.h, pr-output.cc (octave_print_internal): Provide dummy
versions for char and octave_value objects.
(octave_print_internal (ostream&, double, bool),
octave_print_internal (ostream&, const Complex&, bool)):
Handle print_as_read_syntax.
* ov-base-mat.h, ov-base-mat.cc (octave_base_mat<MT>::short_disp):
New function.
* ov-cell.h, ov-cell.cc (octave_cell::short_disp): New function.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1694,23 +1694,29 @@ pr_plus_format (std::ostream& os, const 
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
 void
-octave_print_internal (std::ostream& os, double d,
-                       bool /* pr_as_read_syntax */)
+octave_print_internal (std::ostream&, char, bool)
 {
-  if (plus_format)
-    {
-      pr_plus_format (os, d);
-    }
+  panic_impossible ();
+}
+
+void
+octave_print_internal (std::ostream& os, double d,
+                       bool pr_as_read_syntax)
+{
+  if (pr_as_read_syntax)
+    os << d;
+  else if (plus_format)
+    pr_plus_format (os, d);
   else
     {
       set_format (d);
       if (free_format)
         os << d;
       else
         pr_float (os, d);
     }
@@ -3375,16 +3381,23 @@ PRINT_INT_ARRAY_INTERNAL (octave_int64)
 PRINT_INT_ARRAY_INTERNAL (octave_uint64)
 
 void
 octave_print_internal (std::ostream&, const Cell&, bool, int, bool)
 {
   panic_impossible ();
 }
 
+void
+octave_print_internal (std::ostream&, const octave_value&,
+                       bool pr_as_read_syntax)
+{
+  panic_impossible ();
+}
+
 DEFUN (rats, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rats (@var{x}, @var{len})\n\
 Convert @var{x} into a rational approximation represented as a string.\n\
 You can convert the string back into a matrix as follows:\n\
 \n\
 @example\n\
 @group\n\
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -42,26 +42,31 @@ class NDArray;
 class FloatNDArray;
 class Range;
 class boolMatrix;
 class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
+class octave_value;
 
 #include "intNDArray.h"
 #include "oct-inttypes.h"
 
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, bool d,
                        bool pr_as_read_syntax = false);
 
 extern OCTINTERP_API void
+octave_print_internal (std::ostream& os, char c,
+                       bool pr_as_read_syntax = false);
+
+extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, double d,
                        bool pr_as_read_syntax = false);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, float d,
                        bool pr_as_read_syntax = false);
 
 extern OCTINTERP_API void
@@ -247,16 +252,20 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax = false);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Cell& cell,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
+extern OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_value& ov,
+                       bool pr_as_read_syntax = false);
+
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 extern bool Vprint_empty_dimensions;
 
 // TRUE means don't put empty lines in output
 extern bool Vcompact_format;
 
 #endif
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -445,16 +445,63 @@ template <class MT>
 void
 octave_base_matrix<MT>::print_info (std::ostream& os,
                                     const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 template <class MT>
+std::string
+octave_base_matrix<MT>::short_disp (void) const
+{
+  std::ostringstream buf;
+
+  if (matrix.is_empty ())
+    buf << "[]";
+  else if (matrix.ndims () == 2)
+    {
+      // FIXME: should this be configurable?
+      octave_idx_type max_elts = 10;
+      octave_idx_type elts = 0;
+
+      octave_idx_type nel = matrix.numel ();
+
+      octave_idx_type nr = matrix.rows ();
+      octave_idx_type nc = matrix.columns ();
+
+      buf << "[";
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        {
+          for (octave_idx_type j = 0; j < nc; j++)
+            {
+              octave_print_internal (buf, matrix(j*nr+i), true);
+
+              if (++elts >= max_elts)
+                goto done;
+
+              if (j < nc - 1)
+                buf << ", ";
+            }
+
+          if (i < nr - 1 && elts < max_elts)
+            buf << "; ";
+        }
+
+    done:
+
+      if (nel <= max_elts)
+        buf << "]";
+    }
+
+  return buf.str ();
+}
+
+template <class MT>
 octave_value
 octave_base_matrix<MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     return matrix(n);
   else
     return octave_value ();
 }
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -152,16 +152,18 @@ public:
   bool is_true (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
+  std::string short_disp (void) const;
+
   MT& matrix_ref (void)
   {
     clear_cached_info ();
     return matrix;
   }
 
   const MT& matrix_ref (void) const
   {
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -745,16 +745,22 @@ octave_cell::print_raw (std::ostream& os
     {
       indent (os);
       dim_vector dv = matrix.dims ();
       os << "{" << dv.str () << " Cell Array}";
       newline (os);
     }
 }
 
+std::string
+octave_cell::short_disp (void) const
+{
+  return matrix.is_empty () ? "{}" : "";
+}
+
 #define CELL_ELT_TAG "<cell-element>"
 
 bool
 octave_cell::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -146,16 +146,17 @@ public:
   Array<std::string> cellstr_value (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  std::string short_disp (void) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
