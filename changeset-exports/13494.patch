# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1304029200 -7200
#      Fri Apr 29 00:20:00 2011 +0200
# Node ID 7e203a75d5ccaf3ee9e0f506bb461bbd939be94c
# Parent  4eb90890962c4e228e3c640f02cdf336cd7a43b0
Switching between tabs is now possible.

diff --git a/gui//src/FileEditorMdiSubWindow.cpp b/gui//src/FileEditorMdiSubWindow.cpp
--- a/gui//src/FileEditorMdiSubWindow.cpp
+++ b/gui//src/FileEditorMdiSubWindow.cpp
@@ -30,16 +30,22 @@ FileEditorMdiSubWindow::FileEditorMdiSub
 }
 
 void FileEditorMdiSubWindow::loadFile(QString fileName) {
     m_fileName = fileName;
     setWindowTitle(fileName);
     m_simpleEditor->load(fileName);
 }
 
+void FileEditorMdiSubWindow::installEventFilter(QObject *object) {
+    QMdiSubWindow::installEventFilter(object);
+    m_numberedTextView->installEventFilter(object);
+    m_simpleEditor->installEventFilter(object);
+}
+
 void FileEditorMdiSubWindow::newFile() {
     if(m_modified) {
         int decision
                 = QMessageBox::question(this,
                                         "Open New File",
                                         "Do you want to save the current file?",
                                         QMessageBox::Yes, QMessageBox::No);
 
diff --git a/gui//src/FileEditorMdiSubWindow.h b/gui//src/FileEditorMdiSubWindow.h
--- a/gui//src/FileEditorMdiSubWindow.h
+++ b/gui//src/FileEditorMdiSubWindow.h
@@ -26,16 +26,18 @@
 #include "NumberedCodeEdit.h"
 
 class FileEditorMdiSubWindow : public QMdiSubWindow {
     Q_OBJECT
 public:
     FileEditorMdiSubWindow(QWidget *parent = 0);
     void loadFile(QString fileName);
 
+    void installEventFilter(QObject *object);
+
 public slots:
     void newFile();
     void saveFile();
 
     void showToolTipNew();
     void showToolTipSave();
     void showToolTipUndo();
     void showToolTipRedo();
diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -26,36 +26,38 @@
 #include "FileEditorMdiSubWindow.h"
 #include "ImageViewerMdiSubWindow.h"
 
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent),
       m_isRunning(true) {
     QDesktopServices desktopServices;
     m_settingsFile = desktopServices.storageLocation(QDesktopServices::HomeLocation) + "/.quint/settings.ini";
-    constructWindow();
+    construct();
     establishOctaveLink();
 }
 
 MainWindow::~MainWindow() {
 }
 
 void MainWindow::handleOpenFileRequest(QString fileName) {
     reportStatusMessage(tr("Opening file."));
     QPixmap pixmap;
     if(pixmap.load(fileName)) {
         ImageViewerMdiSubWindow *subWindow = new ImageViewerMdiSubWindow(pixmap, this);
         m_openedFiles->addSubWindow(subWindow);
         subWindow->setWindowTitle(fileName);
         subWindow->showMaximized();
+        subWindow->installEventFilter(m_centralTabWidget);
     } else {
         FileEditorMdiSubWindow *subWindow = new FileEditorMdiSubWindow(m_openedFiles);
         m_openedFiles->addSubWindow(subWindow);
         subWindow->loadFile(fileName);
         subWindow->showMaximized();
+        subWindow->installEventFilter(m_centralTabWidget);
     }
     m_centralTabWidget->setCurrentWidget(m_openedFiles);
 }
 
 void MainWindow::reportStatusMessage(QString statusMessage) {
     m_statusBar->showMessage(statusMessage, 1000);
 }
 
@@ -109,35 +111,42 @@ void MainWindow::readSettings() {
 }
 
 void MainWindow::writeSettings() {
     QSettings settings(m_settingsFile, QSettings::IniFormat);
     settings.setValue("MainWindow/geometry", saveGeometry());
     settings.setValue("MainWindow/windowState", saveState());
 }
 
-void MainWindow::constructWindow() {
+void MainWindow::construct() {
     setWindowIcon(QIcon("../media/quint_icon_small.png"));
 
     QStyle *style = QApplication::style();
+    m_centralTabWidget = new TabWidgetWithShortcuts(this);
     m_octaveTerminal = new OctaveTerminal(this);
     m_generalPurposeToolbar = new QToolBar(tr("Octave Toolbar"), this);
     m_variablesDockWidget = new VariablesDockWidget(this);
     m_historyDockWidget = new HistoryDockWidget(this);
     m_filesDockWidget = new FilesDockWidget(this);
     m_openedFiles = new QMdiArea(this);
     m_statusBar = new QStatusBar(this);
     m_browserWidget = new BrowserWidget(this);
     m_serviceWidget = new BrowserWidget(this);
-    m_centralTabWidget = new QTabWidget(this);
+
     m_centralTabWidget->addTab(m_octaveTerminal, tr("Command Window"));
     m_centralTabWidget->addTab(m_openedFiles, tr("File Editor"));
     m_centralTabWidget->addTab(m_browserWidget, tr("Documentation"));
     m_centralTabWidget->addTab(m_serviceWidget, tr("Service"));
 
+    m_octaveTerminal->installEventFilter(m_centralTabWidget);
+    m_octaveTerminal->installEventFilterOnDisplay(m_centralTabWidget);
+    m_openedFiles->installEventFilter(m_centralTabWidget);
+    m_browserWidget->installEventFilter(m_centralTabWidget);
+    m_serviceWidget->installEventFilter(m_centralTabWidget);
+
     // TODO: Add meaningfull toolbar items.
     QAction *commandAction = new QAction(style->standardIcon(QStyle::SP_CommandLink),
         "", m_generalPurposeToolbar);
     QAction *computerAction = new QAction(style->standardIcon(QStyle::SP_ComputerIcon),
         "", m_generalPurposeToolbar);
     m_generalPurposeToolbar->addAction(commandAction);
     m_generalPurposeToolbar->addAction(computerAction);
 
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -20,16 +20,17 @@
 #define MAINWINDOW_H
 
 #include <QtGui/QMainWindow>
 #include <QThread>
 #include <QTabWidget>
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
+#include <QQueue>
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "SimpleEditor.h"
 #include "BrowserWidget.h"
 
@@ -74,16 +75,75 @@ extern OCTINTERP_API FILE *get_input_fro
 #include <sys/wait.h>
 #include <iostream>
 #include <vector>
 #include "pty.h"
 
 class OctaveMainThread;
 class OctaveCallbackThread;
 
+class TabWidgetWithShortcuts : public QTabWidget {
+public:
+    TabWidgetWithShortcuts(QWidget *parent = 0)
+        : QTabWidget(parent),
+          m_showingShortcuts(false) {
+        setFocusPolicy(Qt::NoFocus);
+    }
+
+protected:
+    bool eventFilter(QObject *object, QEvent *event) {
+        if(event->type() == QEvent::KeyPress) {
+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
+            if(keyEvent->modifiers() == Qt::ControlModifier) {
+                showShortcuts();
+                switch(keyEvent->key()) {
+                case Qt::Key_1: setCurrentIndex(0); return true;
+                case Qt::Key_2: setCurrentIndex(1); return true;
+                case Qt::Key_3: setCurrentIndex(2); return true;
+                case Qt::Key_4: setCurrentIndex(3); return true;
+                };
+            }
+        } else if(event->type() == QEvent::KeyRelease) {
+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
+            if(keyEvent->modifiers() != Qt::ControlModifier) {
+                hideShortcuts();
+            }
+        }
+        return QTabWidget::eventFilter(object, event);
+    }
+
+private:
+    void showShortcuts() {
+        if(m_showingShortcuts)
+            return;
+
+        int tabCount = count();
+        for(int tabIndex = 0; tabIndex < tabCount; tabIndex++) {
+            m_backuppedTabTitles.push_back(tabText(tabIndex));
+            setTabText(tabIndex, QString("%1 [%2]").arg(tabText(tabIndex)).arg(tabIndex + 1));
+        }
+
+        m_showingShortcuts = true;
+    }
+
+    void hideShortcuts() {
+        if(!m_showingShortcuts)
+            return;
+        int tabCount = count();
+        for(int tabIndex = 0; tabIndex < tabCount; tabIndex++) {
+            setTabText(tabIndex, m_backuppedTabTitles.front());
+            m_backuppedTabTitles.pop_front();
+        }
+        m_showingShortcuts = false;
+    }
+
+    bool m_showingShortcuts;
+    QQueue<QString> m_backuppedTabTitles;
+};
+
 /**
   * \class MainWindow
   *
   * Represents the main window.
   */
 class MainWindow : public QMainWindow {
     Q_OBJECT
 public:
@@ -106,24 +166,24 @@ public slots:
     void handleCommandDoubleClicked(QString command);
 
 protected:
     void closeEvent(QCloseEvent *closeEvent);
     void readSettings();
     void writeSettings();
 
 private:
-    void constructWindow();
+    void construct();
     void establishOctaveLink();
     OctaveTerminal *m_octaveTerminal;
     VariablesDockWidget *m_variablesDockWidget;
     HistoryDockWidget *m_historyDockWidget;
     FilesDockWidget *m_filesDockWidget;
     QMdiArea *m_openedFiles;
-    QTabWidget *m_centralTabWidget;
+    TabWidgetWithShortcuts *m_centralTabWidget;
     QStatusBar *m_statusBar;
     QToolBar *m_generalPurposeToolbar;
     BrowserWidget *m_browserWidget;
     BrowserWidget *m_serviceWidget;
     QString m_settingsFile;
 
     // Threads for running octave and managing the data interaction.
     OctaveMainThread *m_octaveMainThread;
diff --git a/gui//src/NumberedCodeEdit.cpp b/gui//src/NumberedCodeEdit.cpp
--- a/gui//src/NumberedCodeEdit.cpp
+++ b/gui//src/NumberedCodeEdit.cpp
@@ -208,17 +208,17 @@ QList<int> *NumberBar::getBreakpoints()
 
 NumberedCodeEdit::NumberedCodeEdit( QWidget *parent, SimpleEditor *textEdit )
     : QFrame( parent )
 {
 	setFrameStyle( QFrame::StyledPanel | QFrame::Sunken );
 	setLineWidth( 2 );
 	
 	view=textEdit;
-	view->installEventFilter( this );
+        view->installEventFilter( this );
 	
 	connect( view->document(), SIGNAL(contentsChange(int,int,int)), this, SLOT(textChanged(int,int,int)) );
 	
 	connect( view, SIGNAL(cursorPositionChanged()), this, SLOT(cursor_moved_cb()) );
 	
 	// Setup the line number pane
 	
 	numbers = new NumberBar( this );
diff --git a/gui//src/QTerminalWidget.cpp b/gui//src/QTerminalWidget.cpp
--- a/gui//src/QTerminalWidget.cpp
+++ b/gui//src/QTerminalWidget.cpp
@@ -70,21 +70,20 @@ QTerminalWidget::QTerminalWidget(int sta
 {
     m_impl = new TermWidgetImpl(this);
     
     initialize();
 
     if(startnow && m_impl->m_session) {
 	m_impl->m_session->run();
     }
-    
-    this->setFocus(Qt::OtherFocusReason);
+
+    setFocus(Qt::OtherFocusReason);
     m_impl->m_terminalDisplay->resize(this->size());
-    
-    this->setFocusProxy(m_impl->m_terminalDisplay);
+    setFocusProxy(m_impl->m_terminalDisplay);
 }
 
 void QTerminalWidget::startShellProgram()
 {
     if(m_impl->m_session->isRunning())
 	return;
 	
     m_impl->m_session->run();
@@ -169,16 +168,20 @@ void QTerminalWidget::setScrollBarPositi
     m_impl->m_terminalDisplay->setScrollBarPosition((TerminalDisplay::ScrollBarPosition)pos);
 }
 
 void QTerminalWidget::sendText(const QString &text)
 {
     m_impl->m_session->sendText(text); 
 }
 
+void QTerminalWidget::installEventFilterOnDisplay(QObject *object) {
+    m_impl->m_terminalDisplay->installEventFilter(object);
+}
+
 void QTerminalWidget::resizeEvent(QResizeEvent*)
 {
     m_impl->m_terminalDisplay->resize(this->size());
     m_impl->m_terminalDisplay->update();
 }
 
 void QTerminalWidget::sessionFinished()
 {
diff --git a/gui//src/QTerminalWidget.h b/gui//src/QTerminalWidget.h
--- a/gui//src/QTerminalWidget.h
+++ b/gui//src/QTerminalWidget.h
@@ -65,16 +65,19 @@ public:
     /** History size for scrolling, values below zero mean infinite. */
     void setHistorySize(int lines);
 
     /** Presence of scrollbar. By default, there is no scrollbar present. */
     void setScrollBarPosition(ScrollBarPosition);
     
     /** Send some text to the terminal. */
     void sendText(const QString &text);
+
+    /** Installs an event filter onto the display. */
+    void installEventFilterOnDisplay(QObject *object);
             
 signals:
     /** Emitted, when the current program has finished. */
     void finished();
         
 protected: 
     virtual void resizeEvent(QResizeEvent *);
     
diff --git a/gui//src/TerminalDisplay.cpp b/gui//src/TerminalDisplay.cpp
--- a/gui//src/TerminalDisplay.cpp
+++ b/gui//src/TerminalDisplay.cpp
@@ -2915,17 +2915,17 @@ void TerminalDisplay::setLineSpacing(uin
   _lineSpacing = i;
   setVTFont(font()); // Trigger an update.
 }
 
 AutoScrollHandler::AutoScrollHandler(QWidget* parent)
 : QObject(parent)
 , _timerId(0)
 {
-    parent->installEventFilter(this);
+    //parent->installEventFilter(this);
 }
 void AutoScrollHandler::timerEvent(QTimerEvent* event)
 {
     if (event->timerId() != _timerId)
         return;
 
     QMouseEvent mouseEvent(    QEvent::MouseMove,
                               widget()->mapFromGlobal(QCursor::pos()),
