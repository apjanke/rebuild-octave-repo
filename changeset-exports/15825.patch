# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1356124191 -3600
#      Fri Dec 21 22:09:51 2012 +0100
# Node ID 9854666df787bca33dacabd759d49313817aaecf
# Parent  abc9e5f3c6613fbd1017fb131f463efa01e39cd8
ov-java.cc: tests added for javaObject and javaMethod

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1973,16 +1973,24 @@ x = javaObject (\"java.lang.StringBuffer
 
   return retval;
 #else
   error ("javaObject: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
+/*
+%!testif HAVE_JAVA
+%% The tests below merely check if javaObject works at all. Whether it works
+%% properly, i.e. creates the right values, is a matter of Java itself
+%% Create a Short and check if it really is a short, i.e. whether it overflows
+%! assert (javaObject ("java.lang.Short", 40000).doubleValue < 0);
+*/
+
 DEFUN (javaMethod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})\n\
 @deftypefnx {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
 Invoke the method @var{methodname} on the Java object @var{obj} with the\n\
 arguments @var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
 representing the fully qualified name of the corresponding class.  The\n\
 function returns the result of the method invocation.\n\
@@ -2041,16 +2049,23 @@ equivalent\n\
 
   return retval;
 #else
   error ("javaMethod: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
+/*
+%!testif HAVE_JAVA
+%% Check for valid first two Java version numbers
+%! jver = strsplit (javaMethod ('getProperty', 'java.lang.System', 'java.version'), '.');
+%! assert (isfinite (str2double (jver{1})) && isfinite (str2double (jver{2})));
+*/
+
 DEFUN (__java_get__, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} __java_get__ (@var{obj}, @var{name})\n\
 Get the value of the field @var{name} of the Java object @var{obj}.  For\n\
 static fields, @var{obj} can be a string representing the fully qualified\n\
 name of the corresponding class.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be\n\
