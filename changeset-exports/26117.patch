# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542414939 18000
#      Fri Nov 16 19:35:39 2018 -0500
# Node ID a6df420457ac7973ea3a4074bd830e42647e9613
# Parent  e67016aee0306436f0f8e8f2684ca49f7bfec8ba
use symbol_info_list instead of symbol_scope to pass workspace info to gui

* syminfo.h (symbol_info_list::varval): New function.

* octave-link.h, octave-link.cc (octave_link::set_workspace,
octave_link::do_set_workspace): Pass symbol_info object instead of
symbol_scope.
* octave-qt-link.h, octave-qt-link.cc (octave_link::do_set_workspace):
Likewise.  Change all uses.  Register symbol_info_list instead of
symbol_scope as a Qt meta type.

* workspace-model.h, workspace-model.cc: Store symbol_info_list object
instead of symbol_scope.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -60,23 +60,25 @@ along with Octave; see the file COPYING.
 #include "welcome-wizard.h"
 
 #include "Array.h"
 #include "cmd-edit.h"
 #include "oct-env.h"
 #include "url-transfer.h"
 
 #include "builtin-defun-decls.h"
+#include "call-stack.h"
 #include "defaults.h"
 #include "defun.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave.h"
 #include "parse.h"
+#include "syminfo.h"
 #include "symscope.h"
 #include "utils.h"
 #include "version.h"
 
 static octave::file_editor_interface *
 create_default_editor (QWidget *p)
 {
 #if defined (HAVE_QSCINTILLA)
@@ -412,33 +414,33 @@ namespace octave
 
     if (file.isEmpty ())
       file = QFileDialog::getOpenFileName (this, tr ("Load Workspace"), ".",
                                            nullptr, nullptr, QFileDialog::Option (opts));
 
     if (! file.isEmpty ())
       {
         octave_cmd_builtin *cmd
-            = new octave_cmd_builtin (&Fload, ovl (file.toStdString ()),
-                                      octave_cmd_builtin::CMD_UPD_WORKSPACE);
+          = new octave_cmd_builtin (&Fload, ovl (file.toStdString ()),
+                                    octave_cmd_builtin::CMD_UPD_WORKSPACE);
         queue_cmd (cmd);
       }
   }
 
   void main_window::handle_open_any_request (const QString& file_arg)
   {
     if (! file_arg.isEmpty ())
       octave_link::post_event (this, &main_window::open_any_callback,
                                file_arg.toStdString ());
   }
 
   void main_window::handle_clear_workspace_request (void)
   {
-    octave_cmd_builtin *cmd
-          = new octave_cmd_builtin (&Fclear, ovl ());
+    octave_cmd_builtin *cmd = new octave_cmd_builtin (&Fclear, ovl ());
+
     queue_cmd (cmd);
   }
 
   void main_window::handle_clear_command_window_request (void)
   {
     octave_link::post_event (this, &main_window::clear_command_window_callback);
   }
 
@@ -1816,20 +1818,19 @@ namespace octave
                              &main_window::resize_command_window_callback);
 
     configure_shortcuts ();
   }
 
   void main_window::construct_octave_qt_link (void)
   {
     connect (m_octave_qt_link,
-             SIGNAL (set_workspace_signal (bool, bool,
-                                           const symbol_scope&)),
+             SIGNAL (set_workspace_signal (bool, bool, const symbol_info_list&)),
              m_workspace_model,
-             SLOT (set_workspace (bool, bool, const symbol_scope&)));
+             SLOT (set_workspace (bool, bool, const symbol_info_list&)));
 
     connect (m_octave_qt_link, SIGNAL (clear_workspace_signal (void)),
              m_workspace_model, SLOT (clear_workspace (void)));
 
     connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
              this, SLOT (change_directory (QString)));
 
     connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
@@ -2434,17 +2435,20 @@ namespace octave
 
     symbol_scope scope
       = __get_current_scope__ ("main_window::rename_variable_callback");
 
     if (scope)
       {
         scope.rename (names.first, names.second);
 
-        octave_link::set_workspace (true, scope);
+        call_stack& cs
+          = __get_call_stack__ ("main_window::rename_variable_callback");
+
+        octave_link::set_workspace (true, cs.get_symbol_info ());
       }
 
     // FIXME: if this action fails, do we need a way to display that info
     // in the GUI?
   }
 
   void main_window::command_window_undo_callback (void)
   {
@@ -2478,42 +2482,40 @@ namespace octave
 
   void main_window::open_any_callback (const std::string& file)
   {
     // INTERPRETER THREAD
 
     octave::feval ("open", ovl (file));
 
     // Update the workspace since open.m may have loaded new variables.
-    symbol_scope scope
-      = __get_current_scope__ ("main_window::open_any_callback");
-
-    if (scope)
-          octave_link::set_workspace (true, scope);
+    call_stack& cs
+      = __get_call_stack__ ("main_window::open_any_callback");
+
+    octave_link::set_workspace (true, cs.get_symbol_info ());
   }
 
   void main_window::clear_history_callback (void)
   {
     // INTERPRETER THREAD
 
     history_system& history_sys
       = __get_history_system__ ("main_window::clear_history_callback");
 
     history_sys.do_history (ovl ("-c"));
   }
 
   void main_window::refresh_workspace_callback (void)
   {
     // INTERPRETER THREAD
 
-    symbol_scope scope
-      = __get_current_scope__ ("main_window::force_refresh_workspace");
-
-    if (scope)
-      octave_link::set_workspace (true, scope, false);
+    call_stack& cs
+      = __get_call_stack__ ("main_window::force_refresh_workspace");
+
+    octave_link::set_workspace (true, cs.get_symbol_info (), false);
   }
 
   bool main_window::focus_console_after_command (void)
   {
     QSettings *settings = resource_manager::get_settings ();
     return settings->value ("terminal/focus_after_command",false).toBool ();
   }
 
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include "octave-cmd.h"
 
 #include "builtin-defun-decls.h"
 #include "cmd-edit.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "octave-qt-link.h"
+#include "syminfo.h"
 #include "utils.h"
 
 namespace octave
 {
   void octave_cmd_exec::execute (interpreter&)
   {
     std::string pending_input = command_editor::get_current_line ();
 
@@ -82,22 +83,22 @@ namespace octave
       argout = m_callback_fi (interp, m_argin, m_nargout);
     else if (m_callback_f)
       argout = m_callback_f (m_argin, m_nargout);
 
     switch (m_update)
       {
         case CMD_UPD_WORKSPACE:
           {
-            symbol_scope scope
-                = __get_current_scope__ ("octave_cmd_builtin::execute");
-            if (scope)
-              octave_link::set_workspace (true, scope);
-            break;
+            call_stack& cs
+              = __get_call_stack__ ("octave_cmd_builtin::execute");
+
+            octave_link::set_workspace (true, cs.get_symbol_info ());
           }
+          break;
 
         default:
           break;
       }
 
     if (m_nargout)    // Return value expected: connect the related value
       emit argout_signal (argout);
   }
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -38,33 +38,33 @@ along with Octave; see the file COPYING.
 #include "builtin-defun-decls.h"
 #include "dialog.h"
 #include "error.h"
 #include "interpreter-private.h"
 #include "load-path.h"
 #include "ov.h"
 #include "octave.h"
 #include "oct-map.h"
-#include "symscope.h"
+#include "syminfo.h"
 #include "utils.h"
 
 #include "octave-gui.h"
 #include "octave-qt-link.h"
 #include "resource-manager.h"
 
 Q_DECLARE_METATYPE (octave_value)
-Q_DECLARE_METATYPE (octave::symbol_scope)
+Q_DECLARE_METATYPE (octave::symbol_info_list)
 
 namespace octave
 {
   octave_qt_link::octave_qt_link (void)
     : octave_link ()
   {
     qRegisterMetaType<octave_value> ("octave_value");
-    qRegisterMetaType<symbol_scope> ("symbol_scope");
+    qRegisterMetaType<symbol_info_list> ("symbol_info_list");
   }
 
   bool octave_qt_link::do_confirm_shutdown (void)
   {
     // Lock the mutex before emitting signal.
     lock ();
 
     emit confirm_shutdown_signal ();
@@ -428,23 +428,23 @@ namespace octave
 
   void octave_qt_link::do_execute_command_in_terminal
     (const std::string& command)
   {
     emit execute_command_in_terminal_signal (QString::fromStdString (command));
   }
 
   void octave_qt_link::do_set_workspace (bool top_level, bool debug,
-                                         const symbol_scope& scope,
+                                         const symbol_info_list& syminfo,
                                          bool update_variable_editor)
   {
     if (! top_level && ! debug)
       return;
 
-    emit set_workspace_signal (top_level, debug, scope);
+    emit set_workspace_signal (top_level, debug, syminfo);
 
     if (update_variable_editor)
       emit refresh_variable_editor_signal ();
   }
 
   void octave_qt_link::do_clear_workspace (void)
   {
     emit clear_workspace_signal ();
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -39,17 +39,16 @@ along with Octave; see the file COPYING.
 
 // Defined for purposes of sending QList<int> as part of signal.
 typedef QList<int> QIntList;
 
 class octave_value;
 
 namespace octave
 {
-
   //! Provides threadsafe access to octave.
   //! @author Jacob Dawid
   //!
   //! This class is a wrapper around octave and provides thread safety by
   //! buffering access operations to octave and executing them in the
   //! readline event hook, which lives in the octave thread.
 
   class octave_qt_link : public QObject, public octave_link
@@ -113,17 +112,17 @@ namespace octave
                          const std::string& new_name);
     void do_file_renamed (bool load_new = true);
 
     void do_execute_command_in_terminal (const std::string& command);
 
     uint8NDArray do_get_named_icon (const std::string& icon_name);
 
     void do_set_workspace (bool top_level, bool debug,
-                           const symbol_scope& scope,
+                           const symbol_info_list& syminfo,
                            bool update_variable_editor);
 
     void do_clear_workspace (void);
 
     void do_set_history (const string_vector& hist);
     void do_append_history (const std::string& hist_entry);
     void do_clear_history (void);
 
@@ -175,17 +174,17 @@ namespace octave
     void change_directory_signal (const QString& dir);
 
     void file_remove_signal (const QString& old_name, const QString& new_name);
     void file_renamed_signal (bool load_new);
 
     void execute_command_in_terminal_signal (const QString& command);
 
     void set_workspace_signal (bool top_level, bool debug,
-                               const symbol_scope& scope);
+                               const symbol_info_list& syminfo);
 
     void clear_workspace_signal (void);
 
     void set_history_signal (const QStringList& hist);
     void append_history_signal (const QString& hist_entry);
     void clear_history_signal (void);
 
     void enter_debugger_signal (void);
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -20,20 +20,22 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <iostream>
+
 #include <QTreeWidget>
 #include <QSettings>
 
-#include "symscope.h"
+#include "syminfo.h"
 #include "utils.h"
 
 #include "resource-manager.h"
 #include "gui-preferences.h"
 #include "workspace-model.h"
 
 namespace octave
 {
@@ -226,22 +228,22 @@ namespace octave
           }
       }
 
     return retval;
   }
 
   void
   workspace_model::set_workspace (bool top_level, bool /* debug */,
-                                  const symbol_scope& scope)
+                                  const symbol_info_list& syminfo)
   {
     clear_data ();
 
     m_top_level = top_level;
-    m_scope = scope;
+    m_syminfo_list = syminfo;
 
     update_table ();
   }
 
   void
   workspace_model::clear_workspace (void)
   {
     clear_data ();
@@ -267,61 +269,51 @@ namespace octave
         m_storage_class_colors.replace (i,setting_color);
       }
   }
 
   void
   workspace_model::clear_data (void)
   {
     m_top_level = false;
-    m_scope = symbol_scope ();
+    m_syminfo_list = symbol_info_list ();
     m_scopes = QString ();
     m_symbols = QStringList ();
     m_class_names = QStringList ();
     m_dimensions = QStringList ();
     m_values = QStringList ();
     m_complex_flags = QIntList ();
   }
 
   void
   workspace_model::update_table (void)
   {
     beginResetModel ();
 
-    std::list<symbol_record> sr_list = m_scope.all_variables ();
-
-    symbol_record::context_id context = m_scope.current_context ();
-
-    for (const auto& sr : sr_list)
+    for (const auto& syminfo : m_syminfo_list)
       {
-        std::string nm = sr.name ();
-
-        octave_value val = sr.varval (context);
+        std::string nm = syminfo.name ();
 
-        // FIXME: fix size for objects, see kluge in variables.cc
-        //dim_vector dv = val.dims ();
-        octave_value tmp = val;
-        Matrix sz = tmp.size ();
+        octave_value val = syminfo.value ();
+
+        // FIXME: fix size for objects, see kluge in ov.cc
+        Matrix sz = val.size ();
         dim_vector dv = dim_vector::alloc (sz.numel ());
         for (octave_idx_type i = 0; i < dv.ndims (); i++)
           dv(i) = sz(i);
 
         char storage = ' ';
-        if (sr.is_global ())
+        if (syminfo.is_global ())
           storage = 'g';
-        else if (sr.is_persistent ())
+        else if (syminfo.is_persistent ())
           storage = 'p';
-        else if (sr.is_automatic ())
+        else if (syminfo.is_automatic ())
           storage = 'a';
-        else if (sr.is_formal ())
+        else if (syminfo.is_formal ())
           storage = 'f';
-        else if (sr.is_hidden ())
-          storage = 'h';
-        else if (sr.is_inherited ())
-          storage = 'i';
 
         std::ostringstream buf;
         val.short_disp (buf);
         std::string short_disp_str = buf.str ();
 
         m_scopes.append (storage);
         m_symbols.append (QString::fromStdString (nm));
         m_class_names.append (QString::fromStdString (val.class_name ()));
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include <QVector>
 #include <QSemaphore>
 #include <QStringList>
 #include <QChar>
 #include <QList>
 #include <QColor>
 #include <QSettings>
 
-#include "symscope.h"
+#include "syminfo.h"
 
 // Defined for purposes of sending QList<int> as part of signal.
 typedef QList<int> QIntList;
 
 namespace octave
 {
   class workspace_model
     : public QAbstractTableModel
@@ -71,22 +71,22 @@ namespace octave
 
     bool is_top_level (void) const { return m_top_level; }
 
     QColor storage_class_color (int s_class)
     {
       return m_storage_class_colors.at (s_class);
     }
 
-    symbol_scope scope (void) const { return m_scope; }
+    symbol_info_list get_symbol_info (void) const { return m_syminfo_list; }
 
   public slots:
 
     void set_workspace (bool top_level, bool debug,
-                        const symbol_scope& scope);
+                        const symbol_info_list& syminfo);
 
     void clear_workspace (void);
 
     void notice_settings (const QSettings *);
 
   signals:
 
     void model_changed (void);
@@ -95,17 +95,17 @@ namespace octave
     void rename_variable (const QString& old_name, const QString& new_name);
 
   private:
 
     void clear_data (void);
     void update_table (void);
 
     bool m_top_level;
-    symbol_scope m_scope;
+    symbol_info_list m_syminfo_list;
     QString m_scopes;
     QStringList m_symbols;
     QStringList m_class_names;
     QStringList m_dimensions;
     QStringList m_values;
     QIntList m_complex_flags;
 
     QStringList m_columnNames;
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -39,17 +39,17 @@ along with Octave; see the file COPYING.
 #include <QCompleter>
 #include <QSignalMapper>
 
 #include "gui-preferences.h"
 #include "workspace-view.h"
 #include "resource-manager.h"
 
 #include "interpreter-private.h"
-#include "symscope.h"
+#include "syminfo.h"
 
 namespace octave
 {
   workspace_view::workspace_view (QWidget *p)
     : octave_dock_widget ("WorkspaceView", p), m_view (new QTableView (this))
   {
     setWindowIcon (QIcon (":/actions/icons/logo.png"));
     set_title (tr ("Workspace"));
@@ -458,21 +458,19 @@ namespace octave
   workspace_view::handle_contextmenu_edit (void)
   {
     QModelIndex index = m_view->currentIndex ();
 
     if (index.isValid ())
       {
         QString var_name = get_var_name (index);
 
-        symbol_scope scope = m_model->scope ();
+        symbol_info_list syminfo = m_model->get_symbol_info ();
 
-        octave_value val;
-        if (scope)
-          val = scope.varval (var_name.toStdString ());
+        octave_value val = syminfo.varval (var_name.toStdString ());
 
         emit edit_variable_signal (var_name, val);
       }
   }
 
   void
   workspace_view::handle_contextmenu_clear (void)
   {
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -31,17 +31,18 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "interpreter.h"
 #include "interpreter-private.h"
 #include "octave-link.h"
 #include "oct-env.h"
 #include "oct-mutex.h"
 #include "ovl.h"
 #include "pager.h"
-#include "symscope.h"
+#include "syminfo.h"
+#include "symtab.h"
 
 static int
 octave_readline_hook (void)
 {
   octave_link::entered_readline_hook ();
   octave_link::generate_events ();
   octave_link::process_events ();
   octave_link::finished_readline_hook ();
@@ -64,22 +65,24 @@ octave_link::~octave_link (void)
 }
 
 void
 octave_link::set_workspace (void)
 {
   if (enabled ())
     {
       octave::symbol_table& symtab
-        = octave::__get_symbol_table__ ("octave_link::set_workspace");
+         = octave::__get_symbol_table__ ("octave_link::set_workspace");
 
-      octave::symbol_scope scope = symtab.current_scope ();
+      octave::call_stack& cs
+        = octave::__get_call_stack__ ("octave_link::set_workspace");
 
       instance->do_set_workspace (symtab.at_top_level (),
-                                  instance->debugging, scope, true);
+                                  instance->debugging,
+                                  cs.get_symbol_info (), true);
     }
 }
 
 // OBJ should be an object of a class that is derived from the base
 // class octave_link, or 0 to disconnect the link.  It is the
 // responsibility of the caller to delete obj.
 
 void
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 #include "event-queue.h"
 #include "uint8NDArray.h"
 
 class octave_value;
 class string_vector;
 
 namespace octave
 {
-  class symbol_scope;
+  class symbol_info_list;
 }
 
 //! Provides threadsafe access to octave.
 //! @author Jacob Dawid
 //!
 //! This class is a wrapper around octave and provides thread safety by
 //! buffering access operations to octave and executing them in the
 //! readline event hook, which lives in the octave thread.
@@ -241,21 +241,21 @@ public:
   {
     return (enabled () ?
             instance->do_get_named_icon (icon_name) : uint8NDArray ());
   }
 
   static void set_workspace (void);
 
   static void set_workspace (bool top_level,
-                             const octave::symbol_scope& scope,
+                             const octave::symbol_info_list& syminfo,
                              bool update_variable_editor = true)
   {
     if (enabled ())
-      instance->do_set_workspace (top_level, instance->debugging, scope,
+      instance->do_set_workspace (top_level, instance->debugging, syminfo,
                                   update_variable_editor);
   }
 
   static void clear_workspace (void)
   {
     if (enabled ())
       instance->do_clear_workspace ();
   }
@@ -532,17 +532,17 @@ protected:
 
   virtual void do_execute_command_in_terminal (const std::string& command) = 0;
 
   virtual uint8NDArray
   do_get_named_icon (const std::string& icon_name) = 0;
 
   virtual void
   do_set_workspace (bool top_level, bool debug,
-                    const octave::symbol_scope& scope,
+                    const octave::symbol_info_list& syminfo,
                     bool update_variable_editor) = 0;
 
   virtual void do_clear_workspace (void) = 0;
 
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
   virtual void do_clear_history (void) = 0;
 
diff --git a/libinterp/corefcn/syminfo.cc b/libinterp/corefcn/syminfo.cc
--- a/libinterp/corefcn/syminfo.cc
+++ b/libinterp/corefcn/syminfo.cc
@@ -158,16 +158,29 @@ namespace octave
         else
           {
             os << param.text;
             i++;
           }
       }
   }
 
+  // FIXME: should we be using std::map<symbol_info> instead of a list?
+
+  octave_value symbol_info_list::varval (const std::string& name) const
+  {
+    for (const auto& syminfo : m_lst)
+      {
+        if (name == syminfo.name ())
+          return syminfo.value ();
+      }
+
+    return octave_value ();
+  }
+
   octave_map
   symbol_info_list::map_value (const std::string& caller_function_name,
                                int nesting_level) const
   {
     size_t len = m_lst.size ();
 
     Cell name_info (len, 1);
     Cell size_info (len, 1);
diff --git a/libinterp/corefcn/syminfo.h b/libinterp/corefcn/syminfo.h
--- a/libinterp/corefcn/syminfo.h
+++ b/libinterp/corefcn/syminfo.h
@@ -93,16 +93,18 @@ namespace octave
     symbol_info_list (void) = default;
 
     symbol_info_list (const symbol_info_list&) = default;
 
     symbol_info_list& operator = (const symbol_info_list&) = default;
 
     ~symbol_info_list (void) = default;
 
+    octave_value varval (const std::string& name) const;
+
     octave_map map_value (const std::string& caller_function_name,
                           int nesting_level) const;
 
     // Print a line of information for a given symbol.
     void print_descriptor (std::ostream& os,
                            const std::list<whos_parameter> params) const;
 
     void display (std::ostream& os, const std::string& format);
