# HG changeset patch
# User jwe
# Date 825145978 0
#      Sat Feb 24 07:12:58 1996 +0000
# Node ID 58ac5f889c6437d6bdf865d6963bab0a533ed757
# Parent  ac6030c1f23960aacd61f98eff4a8bb7b2a8d367
[project @ 1996-02-24 07:12:58 by jwe]

diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1085,17 +1085,17 @@ pr_complex (ostream& os, const Complex& 
 
 	  pr_imag_float (os, i, i_fw);
 	}
       os << "i";
     }
 }
 
 static void
-print_empty_matrix (ostream& os, int nr, int nc, int pr_as_read_syntax)
+print_empty_matrix (ostream& os, int nr, int nc, bool pr_as_read_syntax)
 {
   assert (nr == 0 || nc == 0);
 
   if (pr_as_read_syntax)
     {
       if (nr == 0 && nc == 0)
 	os << "[]";
       else
@@ -1107,39 +1107,41 @@ print_empty_matrix (ostream& os, int nr,
       if (user_pref.print_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
       os << "\n";
     }
 }
 
 static void
 pr_col_num_header (ostream& os, int total_width, int max_width,
-		   int lim, int col)
+		   int lim, int col, int extra_indent)
 {
   if (total_width > max_width && user_pref.split_long_rows)
     {
       if (col != 0 && ! compact_format)
 	os << "\n";
 
       int num_cols = lim - col;
 
+      os.form ("%*s", extra_indent, "");
+
       if (num_cols == 1)
 	os << " Column " << col + 1 << ":\n";
       else if (num_cols == 2)
 	os << " Columns " << col + 1 << " and " << lim << ":\n";
       else
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
 void
-octave_print_internal (ostream& os, double d, int pr_as_read_syntax)
+octave_print_internal (ostream& os, double d, bool pr_as_read_syntax)
 {
   if (plus_format)
     {
       if (d == 0.0)
 	os << " ";
       else
 	os << "+";
     }
@@ -1152,17 +1154,18 @@ octave_print_internal (ostream& os, doub
 	pr_float (os, d);
     }
 
   if (! pr_as_read_syntax)
     os << "\n";
 }
 
 void
-octave_print_internal (ostream& os, const Matrix& m, int pr_as_read_syntax)
+octave_print_internal (ostream& os, const Matrix& m, bool pr_as_read_syntax,
+		       int extra_indent)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
@@ -1186,16 +1189,21 @@ octave_print_internal (ostream& os, cons
       int fw;
       set_format (m, fw);
       int column_width = fw + 2;
       int total_width = nc * column_width;
       int max_width = terminal_columns ();
 
       if (pr_as_read_syntax)
 	max_width -= 4;
+      else
+	max_width -= extra_indent;
+
+      if (max_width < 0)
+	max_width = 0;
 
       if (free_format)
 	{
 	  if (pr_as_read_syntax)
 	    os << "[\n";
 
 	  os << m;
 
@@ -1252,37 +1260,40 @@ octave_print_internal (ostream& os, cons
 	    }
 	}
       else
 	{
 	  for (int col = 0; col < nc; col += inc)
 	    {
 	      int lim = col + inc < nc ? col + inc : nc;
 
-	      pr_col_num_header (os, total_width, max_width, lim, col);
+	      pr_col_num_header (os, total_width, max_width, lim, col,
+				 extra_indent);
 
 	      for (int i = 0; i < nr; i++)
 		{
+		  os.form ("%*s", extra_indent, "");
+
 		  for (int j = col; j < lim; j++)
 		    {
 		      os << "  ";
 
 		      pr_float (os, m.elem (i, j), fw);
 		    }
 
 		  os << "\n";
 		}
 	    }
 	}
     }
 }
 
 void
 octave_print_internal (ostream& os, const Complex& c,
-		       int pr_as_read_syntax)
+		       bool pr_as_read_syntax)
 {
   if (plus_format)
     {
       if (c == 0.0)
 	os << " ";
       else
 	os << "+";
     }
@@ -1296,17 +1307,17 @@ octave_print_internal (ostream& os, cons
     }
 
   if (! pr_as_read_syntax)
     os << "\n";
 }
 
 void
 octave_print_internal (ostream& os, const ComplexMatrix& cm,
-		       int pr_as_read_syntax)
+		       bool pr_as_read_syntax, int extra_indent)
 {
   int nr = cm.rows ();
   int nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
@@ -1331,16 +1342,21 @@ octave_print_internal (ostream& os, cons
       set_format (cm, r_fw, i_fw);
       int column_width = i_fw + r_fw;
       column_width += (bank_format || hex_format|| bit_format) ? 2 : 7;
       int total_width = nc * column_width;
       int max_width = terminal_columns ();
 
       if (pr_as_read_syntax)
 	max_width -= 4;
+      else
+	max_width -= extra_indent;
+
+      if (max_width < 0)
+	max_width = 0;
 
       if (free_format)
 	{
 	  if (pr_as_read_syntax)
 	    os << "[\n";
 
 	  os << cm;
 
@@ -1397,36 +1413,39 @@ octave_print_internal (ostream& os, cons
 	    }
 	}
       else
 	{
 	  for (int col = 0; col < nc; col += inc)
 	    {
 	      int lim = col + inc < nc ? col + inc : nc;
 
-	      pr_col_num_header (os, total_width, max_width, lim, col);
+	      pr_col_num_header (os, total_width, max_width, lim, col,
+				 extra_indent);
 
 	      for (int i = 0; i < nr; i++)
 		{
+		  os.form ("%*s", extra_indent, "");
+
 		  for (int j = col; j < lim; j++)
 		    {
 		      os << "  ";
 
 		      pr_complex (os, cm.elem (i, j));
 		    }
 		  os << "\n";
 		}
 	    }
 	}
     }
 }
 
 void
 octave_print_internal (ostream& os, const Range& r,
-		       int pr_as_read_syntax)
+		       bool pr_as_read_syntax, int extra_indent)
 {
   double base = r.base ();
   double increment = r.inc ();
   double limit = r.limit ();
   int num_elem = r.nelem ();
 
   if (plus_format && ! pr_as_read_syntax)
     {
@@ -1481,22 +1500,30 @@ octave_print_internal (ostream& os, cons
 	  int inc = num_elem;
 	  if (total_width > max_width && user_pref.split_long_rows)
 	    {
 	      inc = max_width / column_width;
 	      if (inc == 0)
 		inc++;
 	    }
 
+	  max_width -= extra_indent;
+
+	  if (max_width < 0)
+	    max_width = 0;
+
 	  int col = 0;
 	  while (col < num_elem)
 	    {
 	      int lim = col + inc < num_elem ? col + inc : num_elem;
 
-	      pr_col_num_header (os, total_width, max_width, lim, col);
+	      pr_col_num_header (os, total_width, max_width, lim, col,
+				 extra_indent);
+
+	      os.form ("%*s", extra_indent, "");
 
 	      for (int i = col; i < lim; i++)
 		{
 		  double val = base + i * increment;
 		  os << "  ";
 		  pr_float (os, val, fw);
 		}
 
@@ -1505,17 +1532,18 @@ octave_print_internal (ostream& os, cons
 	      col += inc;
 	    }
 	}
     }
 }
 
 void
 octave_print_internal (ostream& os, const charMatrix& chm,
-		       int pr_as_read_syntax, int pr_as_string)
+		       bool pr_as_read_syntax, bool pr_as_string,
+		       int extra_indent)
 {
   if (pr_as_string)
     {
       int nstr = chm.rows ();
 
       if (pr_as_read_syntax && nstr > 1)
 	os << "[ ";
 
