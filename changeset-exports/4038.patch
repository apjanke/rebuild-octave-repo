# HG changeset patch
# User jwe
# Date 1029353479 0
#      Wed Aug 14 19:31:19 2002 +0000
# Node ID 243f50d6f3d5ef6140dbd127ab94899cc4d7b6ef
# Parent  7e0c73f17a5dd1c7707c452e3fe78f8680c49dbf
[project @ 2002-08-14 19:31:19 by jwe]

diff --git a/libcruft/dasrt/ddasrt.f b/libcruft/dasrt/ddasrt.f
--- a/libcruft/dasrt/ddasrt.f
+++ b/libcruft/dasrt/ddasrt.f
@@ -978,21 +978,21 @@ C
 100   CONTINUE
       IF(INFO(1).EQ.1)GO TO 110
       IF(INFO(1).NE.-1)GO TO 701
 C     IF WE ARE HERE, THE LAST STEP WAS INTERRUPTED
 C     BY AN ERROR CONDITION FROM DDASTP,AND
 C     APPROPRIATE ACTION WAS NOT TAKEN. THIS
 C     IS A FATAL ERROR.
       MSG = 'DASRT--  THE LAST STEP TERMINATED WITH A NEGATIVE'
-      CALL XERRWV(MSG,49,201,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,49,201,0,0,0,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  VALUE (=I1) OF IDID AND NO APPROPRIATE'
-      CALL XERRWV(MSG,47,202,0,1,IDID,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,47,202,0,1,IDID,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  ACTION WAS TAKEN. RUN TERMINATED'
-      CALL XERRWV(MSG,41,203,1,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,41,203,1,0,0,0,0,0.0D0,0.0D0)
       RETURN
 110   CONTINUE
       IWORK(LNSTL)=IWORK(LNST)
 C
 C-----------------------------------------------------------------------
 C     THIS BLOCK IS EXECUTED ON ALL CALLS.
 C     THE ERROR TOLERANCE PARAMETERS ARE
 C     CHECKED, AND THE WORK ARRAY POINTERS
@@ -1388,172 +1388,172 @@ C
 600   CONTINUE
       ITEMP=-IDID
       GO TO (610,620,630,690,690,640,650,660,670,675,
      *  680,685), ITEMP
 C
 C     THE MAXIMUM NUMBER OF STEPS WAS TAKEN BEFORE
 C     REACHING TOUT
 610   MSG = 'DASRT--  AT CURRENT T (=R1)  500 STEPS'
-      CALL XERRWV(MSG,38,610,0,0,0,0,1,TN,0.0D0)
+      CALL DASRT_XERRWV(MSG,38,610,0,0,0,0,1,TN,0.0D0)
       MSG = 'DASRT--  TAKEN ON THIS CALL BEFORE REACHING TOUT'
-      CALL XERRWV(MSG,48,611,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,48,611,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     TOO MUCH ACCURACY FOR MACHINE PRECISION
 620   MSG = 'DASRT--  AT T (=R1) TOO MUCH ACCURACY REQUESTED'
-      CALL XERRWV(MSG,47,620,0,0,0,0,1,TN,0.0D0)
+      CALL DASRT_XERRWV(MSG,47,620,0,0,0,0,1,TN,0.0D0)
       MSG = 'DASRT--  FOR PRECISION OF MACHINE. RTOL AND ATOL'
-      CALL XERRWV(MSG,48,621,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,48,621,0,0,0,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  WERE INCREASED TO APPROPRIATE VALUES'
-      CALL XERRWV(MSG,45,622,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,45,622,0,0,0,0,0,0.0D0,0.0D0)
 C
       GO TO 690
 C     WT(I) .LE. 0.0D0 FOR SOME I (NOT AT START OF PROBLEM)
 630   MSG = 'DASRT--  AT T (=R1) SOME ELEMENT OF WT'
-      CALL XERRWV(MSG,38,630,0,0,0,0,1,TN,0.0D0)
+      CALL DASRT_XERRWV(MSG,38,630,0,0,0,0,1,TN,0.0D0)
       MSG = 'DASRT--  HAS BECOME .LE. 0.0'
-      CALL XERRWV(MSG,28,631,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,28,631,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     ERROR TEST FAILED REPEATEDLY OR WITH H=HMIN
 640   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,640,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,44,640,0,0,0,0,2,TN,H)
       MSG='DASRT--  ERROR TEST FAILED REPEATEDLY OR WITH ABS(H)=HMIN'
-      CALL XERRWV(MSG,57,641,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,57,641,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     CORRECTOR CONVERGENCE FAILED REPEATEDLY OR WITH H=HMIN
 650   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,650,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,44,650,0,0,0,0,2,TN,H)
       MSG = 'DASRT--  CORRECTOR FAILED TO CONVERGE REPEATEDLY'
-      CALL XERRWV(MSG,48,651,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,48,651,0,0,0,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  OR WITH ABS(H)=HMIN'
-      CALL XERRWV(MSG,28,652,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,28,652,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     THE ITERATION MATRIX IS SINGULAR
 660   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,660,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,44,660,0,0,0,0,2,TN,H)
       MSG = 'DASRT--  ITERATION MATRIX IS SINGULAR'
-      CALL XERRWV(MSG,37,661,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,37,661,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     CORRECTOR FAILURE PRECEEDED BY ERROR TEST FAILURES.
 670   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,670,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,44,670,0,0,0,0,2,TN,H)
       MSG = 'DASRT--  CORRECTOR COULD NOT CONVERGE.  ALSO, THE'
-      CALL XERRWV(MSG,49,671,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,49,671,0,0,0,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  ERROR TEST FAILED REPEATEDLY.'
-      CALL XERRWV(MSG,38,672,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,38,672,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     CORRECTOR FAILURE BECAUSE IRES = -1
 675   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,675,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,44,675,0,0,0,0,2,TN,H)
       MSG = 'DASRT--  CORRECTOR COULD NOT CONVERGE BECAUSE'
-      CALL XERRWV(MSG,45,676,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,45,676,0,0,0,0,0,0.0D0,0.0D0)
       MSG = 'DASRT--  IRES WAS EQUAL TO MINUS ONE'
-      CALL XERRWV(MSG,36,677,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,36,677,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     FAILURE BECAUSE IRES = -2
 680   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2)'
-      CALL XERRWV(MSG,40,680,0,0,0,0,2,TN,H)
+      CALL DASRT_XERRWV(MSG,40,680,0,0,0,0,2,TN,H)
       MSG = 'DASRT--  IRES WAS EQUAL TO MINUS TWO'
-      CALL XERRWV(MSG,36,681,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,36,681,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 C
 C     FAILED TO COMPUTE INITIAL YPRIME
 685   MSG = 'DASRT--  AT T (=R1) AND STEPSIZE H (=R2) THE'
-      CALL XERRWV(MSG,44,685,0,0,0,0,2,TN,HO)
+      CALL DASRT_XERRWV(MSG,44,685,0,0,0,0,2,TN,HO)
       MSG = 'DASRT--  INITIAL YPRIME COULD NOT BE COMPUTED'
-      CALL XERRWV(MSG,45,686,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,45,686,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 690
 690   CONTINUE
       INFO(1)=-1
       T=TN
       RWORK(LTN)=TN
       RWORK(LH)=H
       RETURN
 C-----------------------------------------------------------------------
 C     THIS BLOCK HANDLES ALL ERROR RETURNS DUE
 C     TO ILLEGAL INPUT, AS DETECTED BEFORE CALLING
 C     DDASTP. FIRST THE ERROR MESSAGE ROUTINE IS
 C     CALLED. IF THIS HAPPENS TWICE IN
 C     SUCCESSION, EXECUTION IS TERMINATED
 C
 C-----------------------------------------------------------------------
 701   MSG = 'DASRT--  SOME ELEMENT OF INFO VECTOR IS NOT ZERO OR ONE'
-      CALL XERRWV(MSG,55,1,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,55,1,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 702   MSG = 'DASRT--  NEQ (=I1) .LE. 0'
-      CALL XERRWV(MSG,25,2,0,1,NEQ,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,25,2,0,1,NEQ,0,0,0.0D0,0.0D0)
       GO TO 750
 703   MSG = 'DASRT--  MAXORD (=I1) NOT IN RANGE'
-      CALL XERRWV(MSG,34,3,0,1,MXORD,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,34,3,0,1,MXORD,0,0,0.0D0,0.0D0)
       GO TO 750
 704   MSG='DASRT--  RWORK LENGTH NEEDED, LENRW (=I1), EXCEEDS LRW (=I2)'
-      CALL XERRWV(MSG,60,4,0,2,LENRW,LRW,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,60,4,0,2,LENRW,LRW,0,0.0D0,0.0D0)
       GO TO 750
 705   MSG='DASRT--  IWORK LENGTH NEEDED, LENIW (=I1), EXCEEDS LIW (=I2)'
-      CALL XERRWV(MSG,60,5,0,2,LENIW,LIW,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,60,5,0,2,LENIW,LIW,0,0.0D0,0.0D0)
       GO TO 750
 706   MSG = 'DASRT--  SOME ELEMENT OF RTOL IS .LT. 0'
-      CALL XERRWV(MSG,39,6,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,39,6,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 707   MSG = 'DASRT--  SOME ELEMENT OF ATOL IS .LT. 0'
-      CALL XERRWV(MSG,39,7,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,39,7,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 708   MSG = 'DASRT--  ALL ELEMENTS OF RTOL AND ATOL ARE ZERO'
-      CALL XERRWV(MSG,47,8,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,47,8,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 709   MSG='DASRT--  INFO(4) = 1 AND TSTOP (=R1) BEHIND TOUT (=R2)'
-      CALL XERRWV(MSG,54,9,0,0,0,0,2,TSTOP,TOUT)
+      CALL DASRT_XERRWV(MSG,54,9,0,0,0,0,2,TSTOP,TOUT)
       GO TO 750
 710   MSG = 'DASRT--  HMAX (=R1) .LT. 0.0'
-      CALL XERRWV(MSG,28,10,0,0,0,0,1,HMAX,0.0D0)
+      CALL DASRT_XERRWV(MSG,28,10,0,0,0,0,1,HMAX,0.0D0)
       GO TO 750
 711   MSG = 'DASRT--  TOUT (=R1) BEHIND T (=R2)'
-      CALL XERRWV(MSG,34,11,0,0,0,0,2,TOUT,T)
+      CALL DASRT_XERRWV(MSG,34,11,0,0,0,0,2,TOUT,T)
       GO TO 750
 712   MSG = 'DASRT--  INFO(8)=1 AND H0=0.0'
-      CALL XERRWV(MSG,29,12,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,29,12,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 713   MSG = 'DASRT--  SOME ELEMENT OF WT IS .LE. 0.0'
-      CALL XERRWV(MSG,39,13,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,39,13,0,0,0,0,0,0.0D0,0.0D0)
       GO TO 750
 714   MSG='DASRT-- TOUT (=R1) TOO CLOSE TO T (=R2) TO START INTEGRATION'
-      CALL XERRWV(MSG,60,14,0,0,0,0,2,TOUT,T)
+      CALL DASRT_XERRWV(MSG,60,14,0,0,0,0,2,TOUT,T)
       GO TO 750
 715   MSG = 'DASRT--  INFO(4)=1 AND TSTOP (=R1) BEHIND T (=R2)'
-      CALL XERRWV(MSG,49,15,0,0,0,0,2,TSTOP,T)
+      CALL DASRT_XERRWV(MSG,49,15,0,0,0,0,2,TSTOP,T)
       GO TO 750
 716   MSG = 'DASRT--  INFO(12)=1 AND MXSTP (=I1) .LT. 0'
-      CALL XERRWV(MSG,42,16,0,1,IWORK(LMXSTP),0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,42,16,0,1,IWORK(LMXSTP),0,0,0.0D0,0.0D0)
       GO TO 750
 717   MSG = 'DASRT--  ML (=I1) ILLEGAL. EITHER .LT. 0 OR .GT. NEQ'
-      CALL XERRWV(MSG,52,17,0,1,IWORK(LML),0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,52,17,0,1,IWORK(LML),0,0,0.0D0,0.0D0)
       GO TO 750
 718   MSG = 'DASRT--  MU (=I1) ILLEGAL. EITHER .LT. 0 OR .GT. NEQ'
-      CALL XERRWV(MSG,52,18,0,1,IWORK(LMU),0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,52,18,0,1,IWORK(LMU),0,0,0.0D0,0.0D0)
       GO TO 750
 719   MSG = 'DASRT--  TOUT (=R1) IS EQUAL TO T (=R2)'
-      CALL XERRWV(MSG,39,19,0,0,0,0,2,TOUT,T)
+      CALL DASRT_XERRWV(MSG,39,19,0,0,0,0,2,TOUT,T)
       GO TO 750
 730   MSG = 'DASRT--  NG (=I1) .LT. 0'
-      CALL XERRWV(MSG,24,30,1,1,NG,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,24,30,1,1,NG,0,0,0.0D0,0.0D0)
       GO TO 750
 732   MSG = 'DASRT--  ONE OR MORE COMPONENTS OF G HAS A ROOT'
-      CALL XERRWV(MSG,47,32,1,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,47,32,1,0,0,0,0,0.0D0,0.0D0)
       MSG = '         TOO NEAR TO THE INITIAL POINT'
-      CALL XERRWV(MSG,38,32,1,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,38,32,1,0,0,0,0,0.0D0,0.0D0)
 750   IF(INFO(1).EQ.-1) GO TO 760
       INFO(1)=-1
       IDID=-33
       RETURN
 760   MSG = 'DASRT--  REPEATED OCCURRENCES OF ILLEGAL INPUT'
-      CALL XERRWV(MSG,46,801,0,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,46,801,0,0,0,0,0,0.0D0,0.0D0)
 770   MSG = 'DASRT--  RUN TERMINATED. APPARENT INFINITE LOOP'
-      CALL XERRWV(MSG,47,802,1,0,0,0,0,0.0D0,0.0D0)
+      CALL DASRT_XERRWV(MSG,47,802,1,0,0,0,0,0.0D0,0.0D0)
       RETURN
 C-----------END OF SUBROUTINE DDASRT------------------------------------
       END
diff --git a/libcruft/dasrt/xerrwv.f b/libcruft/dasrt/xerrwv.f
--- a/libcruft/dasrt/xerrwv.f
+++ b/libcruft/dasrt/xerrwv.f
@@ -1,9 +1,10 @@
-      SUBROUTINE XERRWV (MSG, NMES, NERR, LEVEL, NI, I1, I2, NR, R1, R2)
+      SUBROUTINE DASRT_XERRWV (MSG, NMES, NERR, LEVEL, NI, I1, I2,
+     $     NR, R1, R2)
       INTEGER NMES, NERR, LEVEL, NI, I1, I2, NR
       DOUBLE PRECISION R1, R2
       CHARACTER*1 MSG(NMES)
 C-----------------------------------------------------------------------
 C Subroutine XERRWV, as given here, constitutes a simplified version of
 C the SLATEC error handling package.
 C Written by A. C. Hindmarsh and P. N. Brown at LLNL.
 C Modified 1/8/90 by Clement Ulrich at LLNL.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (liboct-pathsearch.$(SHLEXT_VER)): Link to
+	$(LIBKPATHSEA) here.
+
 2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-ieee.cc (lo_ieee_is_NA): New function.
 	(lo_ieee_is_NaN_or_NA): New function.
 	(octave_NA): New global value.
 	(octave_ieee_init): Initialize it.
 	* lo-mappers.cc (octave_is_NA): New function.
 	(octave_is_NaN_or_NA): New function.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -257,17 +257,17 @@ liboct-pathsearch.$(LIBEXT): $(LIBOCT_PA
 	$(RANLIB) $@
 
 liboct-pathsearch.$(SHLEXT): liboct-pathsearch.$(SHLEXT_VER)
 	rm -f $@
 	$(LN_S) $< $@
 
 liboct-pathsearch.$(SHLEXT_VER): $(LIBOCT_PATHSEARCH_PICOBJ)
 	rm -f $@
-	$(SH_LD) $(SH_LDFLAGS) $(SONAME_FLAGS) -o $@ $^
+	$(SH_LD) $(SH_LDFLAGS) $(SONAME_FLAGS) -o $@ $^ $(LIBKPATHSEA)
 
 $(LIBOCT_PATHSEARCH_PICOBJ): stmp-pic
 
 check: all
 .PHONY: check
 
 install: install-lib install-inc
 .PHONY: install
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (OCTAVE_LIBS): Only include $(LIBKPATHSEA) if not
+	using shared libraries.
+
+	* ov.cc (octave_value::octave_value (const octave_value_list&, bool)):
+	Don't forget to assign rep.
+
 2002-08-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lex.l: Warn for various Matlab-incompatibilities.
 	No longer accept <> for NOTEQ.
 	(gripe_matlab_incompatible): New function.
 	(maybe_gripe_matlab_incompatible_comment): Likewise.
 	(gripe_matlab_incompatible_continuation): Likewise.
 	(gripe_matlab_incompatible_operator): Likewise.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -190,17 +190,21 @@ VAR_FILES := $(patsubst %.cc, %, $(VAR_1
 
 DOC_FILES := $(sort $(DEF_FILES) $(patsubst %, %.df, $(VAR_FILES)))
 
 OCTAVE_LFLAGS = -L$(TOPDIR)/liboctave -L$(TOPDIR)/libcruft \
   -L$(TOPDIR)/src $(RLD_FLAG)
 
 OCTAVE_LIBS = $(LIBOCTINTERP) $(LIBOCTAVE) $(LIBOCT_READLINE) \
   $(LIBOCT_PATHSEARCH) $(SPECIAL_MATH_LIB) $(LIBCRUFT) \
-  $(LIBPLPLOT) $(LIBKPATHSEA) $(LIBGLOB) $(LIBDLFCN)
+  $(LIBPLPLOT) $(LIBGLOB) $(LIBDLFCN)
+
+ifneq ($SHARED_LIBS), true)
+OCTAVE_LIBS += $(LIBKPATHSEA)
+endif
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
 	DOCSTRINGS mkbuiltins mk-oct-links \
 	defaults.h.in oct-conf.h.in octave.gperf oct-gperf.h \
 	octave.cc parse.cc lex.cc y.tab.h \
 	$(INCLUDES) $(DIST_SRC) $(OPT_HANDLERS)
 
 ifeq ($(SHARED_LIBS), true)
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -501,20 +501,17 @@ octave_value::octave_value (octave_funct
   : rep (f)
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (const octave_value_list& l, bool is_cs_list)
   : rep (0)
 {
-  if (is_cs_list)
-    rep = new octave_cs_list (l);
-  else
-    new octave_list (l);
+  rep = is_cs_list ? new octave_cs_list (l) : new octave_list (l);
 
   rep->count = 1;
 }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 {
   rep->count = 1;
