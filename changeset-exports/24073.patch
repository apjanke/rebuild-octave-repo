# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1506019198 25200
#      Thu Sep 21 11:39:58 2017 -0700
# Node ID 1c2f34a2c60dcaab341ccbc481a128ab613d2ff5
# Parent  dbbc7e5e229474bf01e4db73c7bd7d62c08705d5
* ov-classdef.h (make_meta_class): Document.

diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -880,16 +880,36 @@ public:
   { return get_rep ()->get_name (); }
 
   bool is_builtin (void) const
   { return get_directory ().empty (); }
 
   void delete_object (cdef_object obj)
   { get_rep ()->delete_object (obj); }
 
+  //! Analyze the tree_classdef tree and transform it to a cdef_class
+  //!
+  //! <b>All attribute validation should occur here.</b>
+  //!
+  //! Classdef attribute values can be given in the form of
+  //! expressions.  These expressions must be evaluated before
+  //! assigning them as attribute values.  Evaluating them as they are
+  //! parsed causes trouble with possible recusion in the parser so we
+  //! do it here.  For example
+  //!
+  //! @code
+  //! classdef recursion_class
+  //!   methods (Access = ?recursion_class)
+  //!   endmethods
+  //! endclassdef
+  //! @endcode
+  //!
+  //! will fail because each attempt to compute the metaclass of
+  //! recursion_class will cause recursion_class to be parsed again.
+
   static cdef_class
   make_meta_class (octave::interpreter& interp, octave::tree_classdef *t,
                    bool is_at_folder = false);
 
   octave_function * get_method_function (const std::string& nm);
 
   octave_function * get_constructor_function (void)
   { return get_method_function (get_name ()); }
