# HG changeset patch
# User Michael C. Grant <mcg@cvxr.com> and John W. Eaton <jwe@octave.org>
# Date 1394466397 18000
#      Mon Mar 10 10:46:37 2014 -0500
# Branch gui-release
# Node ID ca1648b2e67378bdf4203c4b215230b59e897894
# Parent  4daf647c86c351d75e8fec8d137a62e99e565080
set default toolkit when registering toolkits (bug #41665).

* graphics.in.h, graphics.cc (gtk_manager::gtk_manager):
Don't set default toolkit.
(gtk_manager::do_register_toolkit): Set default toolkit here.
(gtk_manager::do_unregister_toolkit): If removing default toolkit,
reset it using same rules as in do_register_toolkit.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9579,28 +9579,16 @@ Internal function: returns the pixel siz
   else
     print_usage ();
 
   return retval;
 }
 
 gtk_manager *gtk_manager::instance = 0;
 
-gtk_manager::gtk_manager (void)
-  : dtk (), available_toolkits (), loaded_toolkits ()
-{
-#if defined (HAVE_QT)
-  dtk = display_info::display_available () ? "qt" : "gnuplot";
-#elif defined (HAVE_FLTK)
-  dtk = display_info::display_available () ? "fltk" : "gnuplot";
-#else
-  dtk = "gnuplot";
-#endif
-}
-
 void
 gtk_manager::create_instance (void)
 {
   instance = new gtk_manager ();
 
   if (instance)
     singleton_cleanup_list::add (cleanup_instance);
 }
@@ -9635,16 +9623,55 @@ gtk_manager::do_get_toolkit (void) const
                dtk.c_str ());
     }
   else
     retval = pl->second;
 
   return retval;
 }
 
+void 
+gtk_manager::do_register_toolkit (const std::string& name)
+{
+  if (dtk.empty () || name == "qt"
+      || (name == "fltk"
+          && available_toolkits.find ("qt") == available_toolkits.end ()))
+    dtk = name;
+
+  available_toolkits.insert (name);
+}
+
+void 
+gtk_manager::do_unregister_toolkit (const std::string& name)
+{
+  available_toolkits.erase (name);
+
+  if (dtk == name)
+    {
+      if (available_toolkits.empty ())
+        dtk.clear ();
+      else
+        {
+          const_available_toolkits_iterator pa = available_toolkits.begin ();
+
+          dtk = *pa++;
+
+          while (pa != available_toolkits.end ())
+            {
+              std::string name = *pa++;
+
+              if (name == "qt"
+                  || (name == "fltk"
+                      && available_toolkits.find ("qt") == available_toolkits.end ()))
+                dtk = name;
+            }
+        }
+    }
+}
+
 DEFUN (available_graphics_toolkits, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} available_graphics_toolkits ()\n\
 Return a cell array of registered graphics toolkits.\n\
 @seealso{graphics_toolkit, register_graphics_toolkit}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2268,17 +2268,17 @@ public:
 
   static std::string default_toolkit (void)
   {
     return instance_ok () ? instance->do_default_toolkit () : std::string ();
   }
 
 private:
 
-  gtk_manager (void);
+  gtk_manager (void) { }
 
   ~gtk_manager (void) { }
 
   OCTINTERP_API static void create_instance (void);
 
   static bool instance_ok (void)
   {
     bool retval = true;
@@ -2317,25 +2317,19 @@ private:
   typedef std::map<std::string, graphics_toolkit>::iterator
     loaded_toolkits_iterator;
 
   typedef std::map<std::string, graphics_toolkit>::const_iterator
     const_loaded_toolkits_iterator;
 
   graphics_toolkit do_get_toolkit (void) const;
 
-  void do_register_toolkit (const std::string& name)
-  {
-    available_toolkits.insert (name);
-  }
-
-  void do_unregister_toolkit (const std::string& name)
-  {
-    available_toolkits.erase (name);
-  }
+  void do_register_toolkit (const std::string& name);
+
+  void do_unregister_toolkit (const std::string& name);
 
   void do_load_toolkit (const graphics_toolkit& tk)
   {
     loaded_toolkits[tk.get_name ()] = tk;
   }
 
   void do_unload_toolkit (const std::string& name)
   {
