# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473874817 25200
#      Wed Sep 14 10:40:17 2016 -0700
# Node ID 9263b2889003a90f0a5480053e0254d4d9ba2d51
# Parent  eb0146564805b8ce1d0a47a9473f008cda978113
Change mxGetScalar to return the first non-zero element of sparse array.

* mex.cc (mxArray_octave_value::get_scalar): Check is_sparse_type() and if
found, get a pointer to the actual data and cast to the correct type.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -373,18 +373,35 @@ public:
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
 
-  // FIXME: For sparse arrays, this should return the first non-zero value.
-  double get_scalar (void) const { return val.scalar_value (true); }
+  double get_scalar (void) const
+  {
+    if (val.is_sparse_type ())
+      {
+        // For sparse arrays, return the first non-zero value. 
+        void * data = val.mex_get_data (); 
+        if (data == NULL)
+          return 0.0;
+
+        if (val.is_bool_type ())
+          return *static_cast<bool *> (data);
+        else if (val.is_real_type ())
+          return *static_cast<double *> (data);
+        else  // Complex type, only return real part
+          return *static_cast<double *> (data);
+      }
+    else
+      return val.scalar_value (true);
+  }
 
   void *get_data (void) const
   {
     void *retval = val.mex_get_data ();
 
     if (retval)
       maybe_mark_foreign (retval);
     else
@@ -2829,18 +2846,16 @@ mxGetPr (const mxArray *ptr)
 }
 
 double *
 mxGetPi (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_imag_data ());
 }
 
-// FIXME: For sparse arrays, mxGetScalar should return the first non-zero
-// element, rather than just the first element.
 double
 mxGetScalar (const mxArray *ptr)
 {
   return ptr->get_scalar ();
 }
 
 mxChar *
 mxGetChars (const mxArray *ptr)
