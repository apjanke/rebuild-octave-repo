# HG changeset patch
# User jwe
# Date 1029430496 0
#      Thu Aug 15 16:54:56 2002 +0000
# Node ID 9678c5526190efed5adcbd56a2eb668767bf649f
# Parent  6fae69a1796e74fc8b36c00ce81e385d4b1a9f3e
[project @ 2002-08-15 16:54:55 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
+2002-08-15  Paul Kienzle <pkienzle@users.sf.net>
+
+	* mk-opts.pl: Add support for INCLUDE = "...".
+
+2002-08-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mk-opts.pl: Handle Array<int> too.
+
 2002-08-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mk-opts.pl (emit_options_function): Emit newline at EOF.
 
 2002-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in: Use $@-t instead of $@.tmp or $@.t.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2002-08-15  Paul Kienzle <pkienzle@users.sf.net>
+
+	* DASPK-opts.in, DASPK.h: Move include to .in file.
+	* DASRT-opts.in, DASRT.h: Likewise.
+        * DASSL-opts.in, DASSL.h: Likewise.
+	* LSODE-opts.in, LSODE.h: Likewise.
+	* NLEqn-opts.in, NLEqn.h: Likewise.
+	* ODESSA-opts.in, ODESSA.h: Likewise.
+
 2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (LSODE::error_message): Also return current T on
 	failures when that makes sense.
 	* DASSL.cc (DASSL::error_message): Likewise.
 	* DASRT.cc (DASRT::error_message): Likewise.
 	* DASPK.cc (DASPK::error_message): Likewise.
 	* ODESSA.cc (ODESSA:error_message): Likewise.
diff --git a/liboctave/DASPK-opts.in b/liboctave/DASPK-opts.in
--- a/liboctave/DASPK-opts.in
+++ b/liboctave/DASPK-opts.in
@@ -1,10 +1,12 @@
 CLASS = "DASPK"
 
+INCLUDE = "DAE.h"
+
 OPTION
   NAME = "absolute tolerance"
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
@@ -36,27 +38,125 @@ OPTION
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; }
   END_SET_CODE
 END_OPTION
 
 OPTION
+  NAME = "compute consistent initial condition"
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "enforce inequality constraints"
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "inequality constraint types"
+  TYPE = "Array<int>"
+  SET_ARG_TYPE = const $TYPE&
+  INIT_BODY
+    $OPTVAR.resize (1);
+    $OPTVAR(0) = 0;
+  END_INIT_BODY
+  SET_CODE
+    void set_$OPT (int val)
+      {
+        $OPTVAR.resize (1);
+        $OPTVAR(0) = (val > 0.0) ? val : 0;
+      }
+
+    void set_$OPT (const $TYPE& val)
+      { $OPTVAR = val; }
+  END_SET_CODE
+END_OPTION
+
+OPTION
+  NAME = "exclude algebraic variables in error test"
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "initial condition maximum step"
+  TYPE = "double"
+  INIT_VALUE = "-1.0"
+  SET_EXPR = "(val >= 0.0) ? val : -1.0"
+END_OPTION
+
+OPTION
+  NAME = "initial condition maximum jacobian evaluations"
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "(val >= 0) ? val : -1"
+END_OPTION
+
+OPTION
+  NAME = "initial condition maximum newton iterations"
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "(val >= 0) ? val : -1"
+END_OPTION
+
+OPTION
+  NAME = "initial condition minimum linesearch step"
+  TYPE = "double"
+  INIT_VALUE = "-1.0"
+  SET_EXPR = "(val >= 0.0) ? val : 0.0"
+END_OPTION
+
+OPTION
+  NAME = "initial condition omit linesearch"
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "initial condition swing factor"
+  TYPE = "double"
+  INIT_VALUE = "1.0"
+  SET_EXPR = "(val >= 0.0) ? val : -1.0"
+END_OPTION
+
+OPTION
   NAME = "initial step size"
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
+  NAME = "maximum order"
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
   NAME = "maximum step size"
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "minimum step size"
   TYPE = "double"
   INIT_VALUE = "0.0"
   SET_EXPR = "(val >= 0.0) ? val : 0.0"
 END_OPTION
+
+OPTION
+  NAME = "print initial condition info"
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -25,18 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "DAE.h"
-
 #include "DASPK-opts.h"
 
 class
 DASPK : public DAE, public DASPK_options
 {
 public:
 
   DASPK (void);
diff --git a/liboctave/DASRT-opts.in b/liboctave/DASRT-opts.in
--- a/liboctave/DASRT-opts.in
+++ b/liboctave/DASRT-opts.in
@@ -1,10 +1,12 @@
 CLASS = "DASRT"
 
+INCLUDE = "DAERT.h"
+
 OPTION
   NAME = "absolute tolerance"
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -25,18 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "DAERT.h"
-
 #include "DASRT-opts.h"
 
 class
 DASRT_result
 {
 public:
 
   DASRT_result (void) { }
diff --git a/liboctave/DASSL-opts.in b/liboctave/DASSL-opts.in
--- a/liboctave/DASSL-opts.in
+++ b/liboctave/DASSL-opts.in
@@ -1,10 +1,12 @@
 CLASS = "DASSL"
 
+INCLUDE = "DAE.h"
+
 OPTION
   NAME = "absolute tolerance"
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
@@ -43,16 +45,23 @@ END_OPTION
 OPTION
   NAME = "initial step size"
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
+  NAME = "maximum order"
+  TYPE = "int"
+  INIT_VALUE = "-1"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
   NAME = "maximum step size"
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "minimum step size"
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -25,18 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "DAE.h"
-
 #include "DASSL-opts.h"
 
 class
 DASSL : public DAE, public DASSL_options
 {
 public:
 
   DASSL (void);
diff --git a/liboctave/LSODE-opts.in b/liboctave/LSODE-opts.in
--- a/liboctave/LSODE-opts.in
+++ b/liboctave/LSODE-opts.in
@@ -1,10 +1,12 @@
 CLASS = "LSODE"
 
+INCLUDE = "ODE.h"
+
 OPTION
   NAME = "absolute tolerance"
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -25,18 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "ODE.h"
-
 #include "LSODE-opts.h"
 
 class
 LSODE : public ODE, public LSODE_options
 {
 public:
 
   LSODE (void);
diff --git a/liboctave/NLEqn-opts.in b/liboctave/NLEqn-opts.in
--- a/liboctave/NLEqn-opts.in
+++ b/liboctave/NLEqn-opts.in
@@ -1,12 +1,16 @@
 CLASS = "NLEqn"
 
 FCN_NAME = "fsolve"
 
+INCLUDE = "dColVector.h"
+INCLUDE = "NLFunc.h"
+
+
 DOC_STRING
 When called with two arguments, this function allows you set options
 parameters for the function @code{fsolve}.  Given one argument,
 @code{fsolve_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 END_DOC_STRING
 
diff --git a/liboctave/NLEqn.h b/liboctave/NLEqn.h
--- a/liboctave/NLEqn.h
+++ b/liboctave/NLEqn.h
@@ -25,19 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "dColVector.h"
-#include "NLFunc.h"
-
 #include "NLEqn-opts.h"
 
 class
 NLEqn : public NLFunc, public NLEqn_options
 {
 public:
 
   NLEqn (void)
diff --git a/liboctave/ODESSA-opts.in b/liboctave/ODESSA-opts.in
--- a/liboctave/ODESSA-opts.in
+++ b/liboctave/ODESSA-opts.in
@@ -1,10 +1,12 @@
 CLASS = "ODESSA"
 
+INCLUDE = "ODES.h"
+
 OPTION
   NAME = "absolute tolerance"
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
diff --git a/liboctave/ODESSA.h b/liboctave/ODESSA.h
--- a/liboctave/ODESSA.h
+++ b/liboctave/ODESSA.h
@@ -25,18 +25,16 @@ Software Foundation, 59 Temple Place - S
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include "ODES.h"
-
 #include "ODESSA-opts.h"
 
 class
 ODESSA_result
 {
 public:
 
   ODESSA_result (void) { }
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -11,16 +11,17 @@
 # * Fix print/show code to display/return something more informative
 #   for special values (for example, -1 ==> infinite in some cases).
 #   Probably need more information in the data files for this.
 
 # Input file format:
 #
 # CLASS = string
 # FCN_NAME = string
+# INCLUDE = file
 # DOC_STRING doc END_DOC_STRING
 # OPTION
 #   NAME = string
 #   TYPE = string
 #   SET_ARG_TYPE = string   (optional, defaults to TYPE)
 #   INIT_VALUE = string | INIT_BODY code END_INIT_BODY
 #   SET_EXPR = string | SET_BODY code END_SET_BODY | SET_CODE code END_SET_CODE
 # END_OPTION
@@ -82,22 +83,30 @@ sub parse_input
           $struct_name = "${class_name}_struct";
           $static_table_name = "${class_name}_table";
         }
       elsif (/^\s*FCN_NAME\s*=\s*"(\w+)"\s*$/)
         {
           die "duplicate FCN_NAME" if ($fcn_name ne "");
           $fcn_name = $1;
         }
+      elsif (/^\s*INCLUDE\s*=\s*"(\S+)"\s*$/)
+        {
+          $include = "${include}#include <$1>\n";
+	}
       elsif (/^\s*DOC_STRING\s*$/)
         {
           die "duplicate DOC_STRING" if ($have_doc_string);
           &parse_doc_string;
           $have_doc_string = 1;
         }
+      else
+        {
+	  die "mk-opts.pl: unknown command: $_\n"
+	}
     }
 }
 
 sub parse_option_block
 {
   local ($have_init_body, $have_set_body, $have_set_code);
 
   while (<INFILE>)
@@ -321,16 +330,18 @@ sub emit_opt_class_header
 // Generated automatically from $INFILE.
 
 #if !defined (octave_${class_name}_h)
 #define octave_${class_name}_h 1
 
 #include <cfloat>
 #include <cmath>
 
+${include}
+
 class
 ${class_name}
 {
 public:
 
   ${class_name} (void) { init (); }
 
   ${class_name} (const ${class_name}& opt) { copy (opt); }
@@ -425,29 +436,38 @@ sub emit_set_decl
 
   print "
   void set_$opt[$i] ($set_arg_type[$i] val)";
 }
 
 sub emit_opt_handler_fcns
 {
   local ($i);
+  my $header = $INFILE;
+  $header =~ s/[.]\w*$/.h/; # replace .in with .h
+  $header =~ s|^.*/([^/]*)$|$1|; # strip directory part
 
   print "// DO NOT EDIT!\n// Generated automatically from $INFILE.\n\n";
 
   print "#ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iomanip>
 #include <iostream>
 
+#include \"$header\"
+
 #include \"defun-dld.h\"
 #include \"pr-output.h\"
 
+#include \"oct-obj.h\"
+#include \"utils.h\"
+#include \"pager.h\"
+
 static ${class_name} ${static_object_name};\n\n";
 
   &emit_struct_decl;
 
   &emit_struct_def;
 
   &emit_print_function;
 
@@ -575,16 +595,34 @@ print_${class_name} (std::ostream& os)
         {
           print "    int val = $static_object_name.$opt[$i] ();\n\n";
           print "    os << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "std::string")
         {
           print "    os << $static_object_name.$opt[$i] () << \"\\n\";\n";
         }
+      elsif ($type[$i] eq "Array<int>")
+        {
+          print "    Array<int> val = $static_object_name.$opt[$i] ();\n\n";
+          print "    if (val.length () == 1)
+      {
+        os << val(0) << \"\\n\";
+      }
+    else
+      {
+        os << \"\\n\\n\";
+	int len = val.length ();
+	Matrix tmp (len, 1);
+	for (int i = 0; i < len; i++)
+	  tmp(i,0) = val(i);
+        octave_print_internal (os, tmp, false, 2);
+        os << \"\\n\\n\";
+      }\n";
+        }
       elsif ($type[$i] eq "Array<double>")
         {
           print "    Array<double> val = $static_object_name.$opt[$i] ();\n\n";
           print "    if (val.length () == 1)
       {
         os << val(0) << \"\\n\";
       }
     else
@@ -636,16 +674,22 @@ set_${class_name} (const std::string& ke
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
       elsif ($type[$i] eq "std::string")
         {
           print "      std::string tmp = val.string_value ();\n\n";
           print "      if (! error_state)
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
+      elsif ($type[$i] eq "Array<int>")
+        {
+          print "      Array<int> tmp = val.int_vector_value ();\n\n";
+          print "      if (! error_state)
+        $static_object_name.set_$opt[$i] (tmp);\n";
+        }
       elsif ($type[$i] eq "Array<double>")
         {
           print "      Array<double> tmp = val.vector_value ();\n\n";
           print "      if (! error_state)
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
       else
         {
@@ -692,16 +736,32 @@ show_${class_name} (const std::string& k
         {
           print "      int val = $static_object_name.$opt[$i] ();\n\n";
           print "      retval = static_cast<double> (val);\n";
         }
       elsif ($type[$i] eq "std::string")
         {
           print "      retval = $static_object_name.$opt[$i] ();\n";
         }
+      elsif ($type[$i] eq "Array<int>")
+        {
+          print "      Array<int> val = $static_object_name.$opt[$i] ();\n\n";
+          print "      if (val.length () == 1)
+        {
+          retval = static_cast<double> (val(0));
+        }
+      else
+        {
+	  int len = val.length ();
+	  ColumnVector tmp (len);
+	  for (int i = 0; i < len; i++)
+	    tmp(i) = val(i);
+          retval = tmp;
+        }\n";
+        }
       elsif ($type[$i] eq "Array<double>")
         {
           print "      Array<double> val = $static_object_name.$opt[$i] ();\n\n";
           print "      if (val.length () == 1)
         {
           retval = val(0);
         }
       else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2002-08-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (case_list): Allow it to be empty.
+
+	* ov.cc, ov.h (octave_value::int_vector_value): New function.
+
 2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (OCTAVE_LIBS): Only include $(LIBKPATHSEA) if not
 	using shared libraries.
 
 	* ov.cc (octave_value::octave_value (const octave_value_list&, bool)):
 	Don't forget to assign rep.
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -902,16 +902,92 @@ octave_value::vector_value (bool force_s
     {
       std::string tn = type_name ();
       gripe_invalid_conversion (tn.c_str (), "real vector");
     }
 
   return retval;
 }
 
+Array<int>
+octave_value::int_vector_value (bool force_string_conv, bool require_int,
+				bool force_vector_conversion) const
+{
+  Array<int> retval;
+
+  Matrix m = matrix_value (force_string_conv);
+
+  if (error_state)
+    return retval;
+
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  if (nr == 1)
+    {
+      retval.resize (nc);
+      for (int i = 0; i < nc; i++)
+	{
+	  double d = m (0, i);
+
+	  if (require_int && D_NINT (d) != d)
+	    {
+	      error ("conversion to integer value failed");
+	      return retval;
+	    }
+
+	  retval (i) = static_cast<int> (d);
+	}
+    }
+  else if (nc == 1)
+    {
+      retval.resize (nr);
+      for (int i = 0; i < nr; i++)
+	{
+	  double d = m (i, 0);
+
+	  if (require_int && D_NINT (d) != d)
+	    {
+	      error ("conversion to integer value failed");
+	      return retval;
+	    }
+
+	  retval (i) = static_cast<int> (d);
+	}
+    }
+  else if (nr > 0 && nc > 0
+	   && (Vdo_fortran_indexing || force_vector_conversion))
+    {
+      retval.resize (nr * nc);
+      int k = 0;
+      for (int j = 0; j < nc; j++)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      double d = m (i, j);
+
+	      if (require_int && D_NINT (d) != d)
+		{
+		  error ("conversion to integer value failed");
+		  return retval;
+		}
+
+	      retval (k++) = static_cast<int> (d);
+	    }
+	}
+    }
+  else
+    {
+      std::string tn = type_name ();
+      gripe_invalid_conversion (tn.c_str (), "real vector");
+    }
+
+  return retval;
+}
+
 Array<Complex>
 octave_value::complex_vector_value (bool force_string_conv,
 				    bool force_vector_conversion) const
 {
   Array<Complex> retval;
 
   ComplexMatrix m = complex_matrix_value (force_string_conv);
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -478,16 +478,20 @@ public:
 
   RowVector row_vector_value (bool frc_str_conv = false,
 			      bool frc_vec_conv = false) const;
 
   ComplexRowVector
   complex_row_vector_value (bool frc_str_conv = false,
 			    bool frc_vec_conv = false) const;
 
+  Array<int> int_vector_value (bool req_int = false,
+			       bool frc_str_conv = false,
+			       bool frc_vec_conv = false) const;
+
   Array<double> vector_value (bool frc_str_conv = false,
 			      bool frc_vec_conv = false) const;
 
   Array<Complex> complex_vector_value (bool frc_str_conv = false,
 				       bool frc_vec_conv = false) const;
 
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -975,17 +975,19 @@ else_clause	: ELSE stash_comment opt_sep
 
 switch_command	: SWITCH stash_comment expression opt_sep case_list END
 		  {
 		    if (! ($$ = finish_switch_command ($1, $3, $5, $6, $2)))
 		      ABORT_PARSE;
 		  }
 		;
 
-case_list	: case_list1
+case_list	: // empty
+		  { $$ = new tree_switch_case_list (); }
+		| case_list1
 		  { $$ = $1; }
 		| case_list1 default_case
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }		
 		;
 
