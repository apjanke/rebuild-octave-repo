# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512061987 28800
#      Thu Nov 30 09:13:07 2017 -0800
# Branch stable
# Node ID 1212ffc13d24d4a881ee2a70759c18b227b181e6
# Parent  0771ce2d30ef3f9076321926188c9a223edc3b55
Fix concatenation of empty char matrices with other strings (bug #52542).

* pt-mat.cc (tm_const::init): When executing special case of appending a
2-D char matrix, verify that the existing element is not empty before
appending.  If it is empty, just replace the existing element's dimension
vector with the to-be-appended element's dimension vector.

* parser.tst: Add concatenation tests for bug #52542 to other parser tests.

diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -633,21 +633,30 @@ tm_const::init (const tree_matrix& tm)
         {
           first_elem = false;
 
           dv = this_elt_dv;
         }
       else if (all_str && dv.ndims () == 2
                && this_elt_dv.ndims () == 2)
         {
-          // FIXME: this is Octave's specialty.
-          // Character matrices allow rows of unequal length.
-          if (this_elt_nc > cols ())
-            dv(1) = this_elt_nc;
-          dv(0) += this_elt_nr;
+          // This is Octave's specialty.
+          // Character matrices support rows of unequal length.
+          if (dv.any_zero ())
+            {
+              // Empty existing element (bug #52542).
+              // Replace empty element with non-empty one.
+              dv = this_elt_dv;
+            }
+          else
+            {
+              if (this_elt_nc > cols ())
+                dv(1) = this_elt_nc;
+              dv(0) += this_elt_nr;
+            }
         }
       else if ((! any_class) && (! dv.hvcat (this_elt_dv, 0)))
         eval_error ("vertical dimensions mismatch", dv, this_elt_dv);
     }
 
   ok = true;
 }
 
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -321,8 +321,15 @@
 %!test
 %! a = {1, @sin, 2, @cos};
 %! b = {1 @sin 2 @cos};
 %! assert (a, b);
 
 ## Maybe unnecessary, but check that further changes to parser don't
 ## invalidate error handling (bug #46534).
 #!error <vertical dimensions mismatch \(1x2 vs 1x1\)> z = [1, 2; 3]
+
+## FIXME: We need a sequence of concatenation tests since this seems
+##        to be a frequently reported source of incompatibilities w/Matlab
+## Check concatenation of empty char matrices (bug #52542)
+%!assert (double ([char(ones(0,3)); 'A']), 65)
+%!assert (double ([char(ones(0,3)); char(ones(2,0)); 'A']), 65)
+
