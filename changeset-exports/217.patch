# HG changeset patch
# User jwe
# Date 753183040 0
#      Sat Nov 13 09:30:40 1993 +0000
# Node ID cd2e49fb4f6b5cbccbc6776522558d0e808a83ac
# Parent  e83d64b26659b2cf42875bfda7af0c6bb72e69e6
[project @ 1993-11-13 09:16:01 by jwe]

diff --git a/src/det.cc b/src/det.cc
--- a/src/det.cc
+++ b/src/det.cc
@@ -70,18 +70,18 @@ determinant (const tree_constant& a)
       {
 	Matrix m = tmp.matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    DET det = m.determinant (info, rcond);
 	    if (info == -1)
-	      error ("det: matrix singular to machine precision, rcond = %g",
-		     rcond);
+	      warning ("det: matrix singular to machine precision, rcond = %g",
+		       rcond);
 	    else
 	      {
 		double d = det.value ();
 		retval = tree_constant (d);
 	      }
 	  }
 	else
 	  gripe_square_matrix_required ("det");
@@ -91,18 +91,18 @@ determinant (const tree_constant& a)
       {
 	ComplexMatrix m = tmp.complex_matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    ComplexDET det = m.determinant (info, rcond);
 	    if (info == -1)
-	      error ("det: matrix singular to machine precision, rcond = %g",
-		     rcond);
+	      warning ("det: matrix singular to machine precision, rcond = %g",
+		       rcond);
 	    else
 	      {
 		Complex c = det.value ();
 		retval = tree_constant (c);
 	      }
 	  }
 	else
 	  gripe_square_matrix_required ("det");
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -1207,17 +1207,17 @@ builtin_pwd (const tree_constant *args, 
 
   if (verbatim_pwd)
     {
       char *buffer = new char [MAXPATHLEN];
       directory = getcwd (buffer, MAXPATHLEN);
 
       if (!directory)
 	{
-	  message ("pwd", "can't find working directory!");
+	  warning ("pwd: can't find working directory!");
 	  delete buffer;
 	}
     }
   else
     {
       directory = get_working_directory ("pwd");
     }
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -262,17 +262,17 @@ FILE *
 get_input_from_file (char *name, int warn = 1)
 {
   FILE *instream = (FILE *) NULL;
 
   if (name && *name)
     instream = fopen (name, "r");
 
   if (instream == (FILE *) NULL && warn)
-    message (name, "no such file or directory");
+    warning ("%s: no such file or directory", name);
 
   if (reading_m_file || reading_script_file)
     mf_instream = instream;
   else
     rl_instream = instream;
 
   return instream;
 }
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -71,19 +71,18 @@ inverse (const tree_constant& a)
       {
 	Matrix m = tmp.matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    Matrix minv = m.inverse (info, rcond);
 	    if (info == -1)
-	      message ("inverse",
-		       "matrix singular to machine precision, rcond = %g",
-		       rcond);
+	      warning ("inverse: matrix singular to machine precision,\
+ rcond = %g", rcond);
 	    else
 	      retval = tree_constant (minv);
 	  }
 	else
 	  gripe_square_matrix_required ("inverse");
       }
       break;
     case tree_constant_rep::scalar_constant:
@@ -96,19 +95,18 @@ inverse (const tree_constant& a)
       {
 	ComplexMatrix m = tmp.complex_matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    ComplexMatrix minv = m.inverse (info, rcond);
 	    if (info == -1)
-	      message ("inverse",
-		       "matrix singular to machine precision, rcond = %g",
-		       rcond);
+	      warning ("inverse: matrix singular to machine precision,\
+ rcond = %g", rcond);
 	    else
 	      retval = tree_constant (minv);
 	  }
 	else
 	  gripe_square_matrix_required ("inverse");
       }
       break;
     case tree_constant_rep::complex_scalar_constant:
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -244,19 +244,19 @@ do_history (int argc, char **argv)
   int limit = 0;
 
   if (argc > 0)
     {
       limited = 1;
       if (sscanf (*argv, "%d", &limit) != 1)
         {
 	  if (*argv[0] == '-')
-	    message ("history", "unrecognized option `%s'", *argv);
+	    error ("history: unrecognized option `%s'", *argv);
 	  else
-	    message ("history", "bad non-numeric arg `%s'", *argv);
+	    error ("history: bad non-numeric arg `%s'", *argv);
 	  return;
         }
     }
 
   hlist = history_list ();
 
   if (hlist)
     {
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1172,18 +1172,17 @@ set_format_style (int argc, char **argv)
 		  else if (strcmp (*argv, "E") == 0)
 		    {
 		      init_format_state ();
 		      print_e = 1;
 		      print_big_e = 1;
 		    }
 		  else
 		    {
-		      message ("format",
-			       "unrecognized option `short %s'", *argv);
+		      error ("format: unrecognized option `short %s'", *argv);
 		      return;
 		    }
 		}
 	      else
 		init_format_state ();
 
 	      set_output_prec_and_fw (3, 8);
 	    }
@@ -1200,28 +1199,27 @@ set_format_style (int argc, char **argv)
 		  else if (strcmp (*argv, "E") == 0)
 		    {
 		      init_format_state ();
 		      print_e = 1;
 		      print_big_e = 1;
 		    }
 		  else
 		    {
-		      message ("format",
-			       "unrecognized option `long %s'", *argv);
+		      error ("format: unrecognized option `long %s'", *argv);
 		      return;
 		    }
 		}
 	      else
 		init_format_state ();
 
 	      set_output_prec_and_fw (15, 24);
 	    }
 	  else if (strcmp (*argv, "hex") == 0)
-	    message ("format", "format state `hex' not implemented");
+	    error ("format: format state `hex' not implemented yet");
 	  else if (strcmp (*argv, "+") == 0)
 	    {
 	      init_format_state ();
 	      plus_format = 1;
 	    }
 	  else if (strcmp (*argv, "bank") == 0)
 	    {
 	      init_format_state ();
@@ -1233,21 +1231,21 @@ set_format_style (int argc, char **argv)
 	      free_format = 1;
 	    }
 	  else if (strcmp (*argv, "none") == 0)
 	    {
 	      init_format_state ();
 	      free_format = 1;
 	    }
 	  else if (strcmp (*argv, "compact") == 0)
-	    message ("format", "format state `compact' not implemented");
+	    error ("format: format state `compact' not implemented yet");
 	  else if (strcmp (*argv, "loose") == 0)
-	    message ("format", "format state `loose' not implemented");
+	    error ("format: format state `loose' not implemented yet");
 	  else
-	    message ("format", "unrecognized format state `%s'", *argv);
+	    error ("format: unrecognized format state `%s'", *argv);
 	}
       else
 	usage ("format [format_state]");
     }
   else
     {
       init_format_state ();
       set_output_prec_and_fw (5, 10);
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -2258,17 +2258,17 @@ tree_constant_rep::diag (const tree_cons
 	    retval = make_diag (matrix_value (), k);
 	  else
 	    {
 	      ColumnVector d = matrix->diag (k);
 	      retval = tree_constant (d);
 	    }
 	}
       else
-	message ("diag", "invalid second argument");
+	error ("diag: invalid second argument");
 
       break;
     case complex_scalar_constant:
       if (a_type == scalar_constant)
 	{
 	  int k = NINT (tmp_a.double_value ());
 	  int n = ABS (k) + 1;
 	  if (k == 0)
@@ -2297,17 +2297,17 @@ tree_constant_rep::diag (const tree_cons
 	    retval = make_diag (complex_matrix_value (), k);
 	  else
 	    {
 	      ComplexColumnVector d = complex_matrix->diag (k);
 	      retval = tree_constant (d);
 	    }
 	}
       else
-	message ("diag", "invalid second argument");
+	error ("diag: invalid second argument");
 
       break;
     case string_constant:
     case range_constant:
     case magic_colon:
     default:
       panic_impossible ();
       break;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -888,17 +888,17 @@ symbol_table::lookup (const char *nm, in
   if (insert)
     {
       symbol_record *new_sym;
       new_sym = new symbol_record (nm, table[index].next ());
       table[index].chain (new_sym);
       return new_sym;
     }
   else if (warn)
-    message ("lookup", "symbol`%s' not found", nm);
+    warning ("lookup: symbol`%s' not found", nm);
 
   return (symbol_record *) NULL;
 }
 
 void
 symbol_table::clear (int clear_user_functions = 1)
 {
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -35,18 +35,17 @@ extern "C"
   typedef void (*_cplus_fcn_int) (int);
   extern void (*malloc_error (_cplus_fcn_int)) (int);
 }
 
 static void
 malloc_handler (int code)
 {
   if (code == 5)
-    message ("malloc_handler",
-	     "hopefully recoverable malloc error: freeing wild pointer");
+    warning ("hopefully recoverable malloc error: freeing wild pointer");
   else
     {
       panic ("probably irrecoverable malloc error: code %d", code);
     }
 }
 
 static void
 NeXT_init (void)
diff --git a/src/tc-extras.cc b/src/tc-extras.cc
--- a/src/tc-extras.cc
+++ b/src/tc-extras.cc
@@ -768,17 +768,17 @@ column_max (const tree_constant *args, i
 	      }
 	      break;
 	    default:
 	      panic_impossible ();
 	      break;
 	    }
 	}
       else
-	message ("max", "nonconformant matrices");
+	error ("max: nonconformant matrices");
     }
   else
     panic_impossible ();
 
   return retval;
 }
 
 tree_constant *
@@ -939,17 +939,17 @@ column_min (const tree_constant *args, i
 	      }
 	      break;
 	    default:
 	      panic_impossible ();
 	      break;
 	    }
 	}
       else
-	message ("min", "nonconformant matrices");
+	error ("min: nonconformant matrices");
     }
   else
     panic_impossible ();
 
   return retval;
 }
 
 static void
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1184,17 +1184,18 @@ send_to_plot_stream (const char *cmd)
 	  plot_stream.open (plot_prog);
 	  if (! plot_stream.is_open ())
 	    {
 	      warning ("plot: unable to open pipe to `%s'",
 		       plot_prog);
 
 	      if (strcmp (plot_prog, "gnuplot") != 0)
 		{
-		  message ("plot", "trying again with `gnuplot'");
+		  warning ("having trouble finding plotting program.");
+		  warning ("trying again with `gnuplot'");
 		  goto last_chance;
 		}
 	    }
 	}
       else
 	{
 	last_chance:
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -622,17 +622,17 @@ is_builtin_variable (const char *name)
 tree *
 is_valid_function (tree_constant& arg, char *warn_for, int warn = 0)
 {
   tree *ans = NULL_TREE;
 
   if (! arg.is_string_type ())
     {
       if (warn)
-	message (warn_for, "expecting function name as argument");
+	error ("%s: expecting function name as argument", warn_for);
       return ans;
     }
 
   char *fcn_name = arg.string_value ();
   symbol_record *sr = global_sym_tab->lookup (fcn_name, 0, 0);
 
   if (sr == (symbol_record *) NULL)
     {
@@ -645,18 +645,18 @@ is_valid_function (tree_constant& arg, c
       tree_identifier tmp (sr);
       tmp.parse_m_file (0);
     }
 
   ans = sr->def ();
   if (ans == NULL_TREE || ! sr->is_function ())
     {
       if (warn)
-	message (warn_for, "the symbol `%s' is not valid as a function",
-		 fcn_name);
+	error ("%s: the symbol `%s' is not valid as a function",
+	       warn_for, fcn_name);
       ans = NULL_TREE;
     }
 
   return ans;
 }
 
 /*
  * Does this function take the right number of arguments?
@@ -665,18 +665,18 @@ int
 takes_correct_nargs (tree *fcn, int expected_nargin, char *warn_for,
 		     int warn = 0) 
 {
   int nargs = fcn->max_expected_args () - 1;
   int e_nargs = expected_nargin - 1;
   if (nargs != e_nargs)
     {
       if (warn)
-	message (warn_for, "expecting function to take %d argument%c", 
-		 e_nargs, s_plural (e_nargs));
+	error ("%s: expecting function to take %d argument%c", 
+	       warn_for, e_nargs, s_plural (e_nargs));
       return 0;
     }
   return 1;
 }
 
 // It's not likely that this does the right thing now.  XXX FIXME XXX
 
 char **
