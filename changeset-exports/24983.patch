# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1521776517 14400
#      Thu Mar 22 23:41:57 2018 -0400
# Node ID 62c2902bcb231f179ee3746b2752205fbaef9b1c
# Parent  47f25e164ab14fc125dbf8d5db12f2a1e3d946a9
# Parent  c16ad80274c9abc702963f821047036cfb43cd48
maint: merge stable to default.

diff --git a/doc/interpreter/module.mk b/doc/interpreter/module.mk
--- a/doc/interpreter/module.mk
+++ b/doc/interpreter/module.mk
@@ -300,16 +300,17 @@ doc_EXTRA_DIST += \
 
 # Prevent packaging of distribution unless all libraries
 # necessary to create documentation are present
 doc-interpreter-dist-hook:
 	@$(GREP) '#define HAVE_COLAMD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing COLAMD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_CHOLMOD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing CHOLMOD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_UMFPACK 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing UMFPACK library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_QHULL 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing QHULL library.  Cannot package distribution!" ; exit 1; }
+	@$(GREP) '#define HAVE_QT_OFFSCREEN 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires Qt offscreen OpenGL rendering.  Cannot package distribution!" ; exit 1; }
 
 $(MUNGED_TEXI_SRC): $(DOCSTRING_FILES)
 
 ## These two texi files have an additional dependency through the
 ## @EXAMPLEFILE macro.
 %reldir%/oop.texi: $(examples_code_SRC)
 %reldir%/external.texi: $(examples_code_SRC)
 
diff --git a/etc/icons/org.octave.Octave.appdata.xml b/etc/icons/org.octave.Octave.appdata.xml
--- a/etc/icons/org.octave.Octave.appdata.xml
+++ b/etc/icons/org.octave.Octave.appdata.xml
@@ -13,17 +13,17 @@
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
 
   You should have received a copy of the GNU General Public License
   along with Octave; see the file COPYING.  If not, see
   <https://www.gnu.org/licenses/>.
 -->
-<component type="desktop">
+<component type="desktop-application">
   <id>org.octave.Octave.desktop</id>
   <metadata_license>FSFAP</metadata_license>
   <project_license>GPL-3.0+</project_license>
   <name>GNU Octave</name>
   <summary>Interactive programming environment for numerical computations</summary>
 
   <description>
     <p>
@@ -54,12 +54,20 @@
       a width that is no smaller than 620px. Screenshots should be in PNG
       or JPEG format. PNG is the preferred format.
     -->
     <screenshot type="default">
       <image>https://www.gnu.org/software/octave/img/screenshot.png</image>
     </screenshot>
   </screenshots>
 
-  <url type="homepage">http://www.octave.org</url>
+  <launchable type="desktop-id">org.octave.Octave.desktop</launchable>
+  <provides>
+    <binary>octave</binary>
+  </provides>
+
+  <url type="homepage">https://www.octave.org/</url>
+  <url type="bugtracker">https://bugs.octave.org/</url>
+  <url type="donation">https://www.octave.org/donate.html</url>
+  <url type="faq">https://wiki.octave.org/FAQ</url>
   <update_contact>maintainers@octave.org</update_contact>
   <project_group>GNU</project_group>
 </component>
diff --git a/etc/icons/org.octave.Octave.desktop.in b/etc/icons/org.octave.Octave.desktop.in
--- a/etc/icons/org.octave.Octave.desktop.in
+++ b/etc/icons/org.octave.Octave.desktop.in
@@ -1,12 +1,11 @@
 [Desktop Entry]
 Name=GNU Octave
-Comment=Scientific Computing
-Comment[de]=Wissenschaftliches Rechnen
+Comment=Interactive programming environment for numerical computations
 TryExec=%OCTAVE_PREFIX%/bin/octave
 Exec=%OCTAVE_PREFIX%/bin/octave --gui %f
 Icon=octave
 Terminal=false
 Type=Application
 Categories=Education;Science;Math;
 StartupNotify=false
 StartupWMClass=octave-gui
diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <QApplication>
 #include <QClipboard>
 #include <QVBoxLayout>
 #include <QMenu>
 #include <QScrollBar>
-#include <QDesktopWidget>
 #include <QCompleter>
 #include <QLabel>
 
 #include "error.h"
 #include "resource-manager.h"
 
 #include "cmd-hist.h"
 
@@ -336,17 +335,11 @@ namespace octave
     connect (m_filter_checkbox, SIGNAL (toggled (bool)),
              this, SLOT (filter_activate (bool)));
     connect (m_filter->lineEdit (), SIGNAL (editingFinished (void)),
              this, SLOT (updatem_filter_history (void)));
 
     connect (m_history_list_view, SIGNAL (doubleClicked (QModelIndex)),
              this, SLOT (handle_double_click (QModelIndex)));
 
-    // shrink max. displayed entry size to desktop width
-    QSize screen = QDesktopWidget ().screenGeometry ().size ();
-    int w = screen.width ();
-    QFontMetrics fm = m_history_list_view->fontMetrics ();
-    int h = fm.height ();
-    m_history_list_view->setGridSize (QSize (w,h));
     m_history_list_view->setTextElideMode (Qt::ElideRight);
   }
 }
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -1068,25 +1068,28 @@ namespace octave
       }
 
     QDockWidget *existing_qdw = m_main->findChild<QDockWidget *> (name);
     if (existing_qdw != NULL)
       {
         // Already open.
 
         // Put current focused variable out of focus
-        QFocusEvent event (QEvent::FocusOut, Qt::OtherFocusReason);
-        QApplication::sendEvent (m_main->focusWidget (), &event);
+        if (m_main->focusWidget () != nullptr)
+          {
+            QFocusEvent event (QEvent::FocusOut, Qt::OtherFocusReason);
+            QApplication::sendEvent (m_main->focusWidget (), &event);
+          }
 
         // Put existing variable in focus and raise
-        event = QFocusEvent (QEvent::FocusIn, Qt::OtherFocusReason);
+        QFocusEvent event (QEvent::FocusIn, Qt::OtherFocusReason);
         QApplication::sendEvent (existing_qdw, &event);
         existing_qdw->show ();
         existing_qdw->raise ();
-        existing_qdw->setFocus ();
+        existing_qdw->activateWindow ();
 
         return;
       }
 
     variable_dock_widget *page = new variable_dock_widget (this);
     page->setObjectName (name);
     page->setAllowedAreas(Qt::LeftDockWidgetArea |
                           Qt::RightDockWidgetArea);
@@ -1175,16 +1178,20 @@ namespace octave
              existing_ql, SLOT (setText (const QString&)));
     existing_ql->setMargin (2);
 
     model->update_data (val);
 
     QList<QTableView *> viewlist = findChildren<QTableView *> ();
     if (viewlist.size () == 1)
       m_tool_bar->setEnabled (true);
+
+    page->show ();
+    page->raise ();
+    page->activateWindow ();
   }
 
   void
   variable_editor::refresh (void)
   {
     emit refresh_signal ();
   }
 
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -194,41 +194,29 @@ namespace octave
             retval = m_value_stack.size ();
           }
 
         return retval;
       }
 
       void clear (context_id context)
       {
-        // There is no need to do anything with a fowarded
-        // symbol_record_rep here.
-        //
-        // For scripts, we are never executing in the script "scope".
-        //
-        // For globals, we are only interested in breaking the link to
-        // the global value and clearing the local value, not the
-        // global one.
-
-        // For persistent values, we clear the value then unmark so
-        // that we clear the first element of the value stack.
+        // For globals, break the link to the global value first, then
+        // clear the local value.
 
         if (is_global ())
-          {
-            unbind_fwd_rep ();
-            return;
-          }
-
-        if (auto t_fwd_rep = m_fwd_rep.lock ())
-          return;
+          unbind_fwd_rep ();
 
         if (! (is_hidden () || is_inherited ()))
           {
             assign (octave_value (), context);
 
+            // For persistent values, we clear the value then unmark so
+            // that we clear the first element of the value stack.
+
             if (is_persistent ())
               unmark_persistent ();
           }
       }
 
       bool is_defined (context_id context) const
       {
         return varval (context).is_defined ();
@@ -277,16 +265,21 @@ namespace octave
       bool is_inherited (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_inherited ();
 
         return m_storage_class & inherited;
       }
 
+      bool is_forwarded (void) const
+      {
+        return ! m_fwd_rep.expired ();
+      }
+
       bool is_global (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_global ();
 
         return m_storage_class & global;
       }
 
@@ -492,22 +485,48 @@ namespace octave
             t_fwd_rep->bind_fwd_rep (fwd_scope, fwd_rep);
             return;
           }
 
         m_fwd_scope = fwd_scope;
         m_fwd_rep = fwd_rep;
       }
 
-      void unbind_fwd_rep (void)
+      void unbind_fwd_rep (bool recurse = true)
       {
-        // When unbinding an object, only break the immediate link.
-        // By doing that, we ensure that any variables that are made
-        // global in a script remain linked as globals in the
-        // enclosing scope.
+        // When unbinding variables in a script scope, recurse will be
+        // false and we will only break the immediate link.  By doing
+        // that, we ensure that any variables that are made global in
+        // a script remain linked as globals in the enclosing scope.
+
+        // When unbinding variables in a (possibly nested) function
+        // scope, recurse will be true and we will break the link to
+        // the global scope, not just the immediate link to the parent
+        // scope of the nested function.
+
+        if (recurse)
+          {
+            if (auto t_fwd_rep = m_fwd_rep.lock ())
+              {
+                // Currently, it is only possible to have at most two
+                // levels of indirection here, either
+                //
+                //   nested function -> parent function -> global scope
+                //
+                // or
+                //
+                //   script -> top level scope -> global scope
+                //
+                // so we can break the recursion here by setting the
+                // argument to unbind_fwd_rep to false.
+
+                t_fwd_rep->unbind_fwd_rep (false);
+                return;
+              }
+          }
 
         m_fwd_scope = std::weak_ptr<symbol_scope_rep> ();
         m_fwd_rep.reset ();
       }
 
       std::shared_ptr<symbol_record_rep>
       dup (const std::shared_ptr<symbol_scope_rep>& new_scope) const;
 
@@ -624,16 +643,17 @@ namespace octave
     }
 
     bool is_local (void) const { return m_rep->is_local (); }
     bool is_automatic (void) const { return m_rep->is_automatic (); }
     bool is_formal (void) const { return m_rep->is_formal (); }
     bool is_global (void) const { return m_rep->is_global (); }
     bool is_hidden (void) const { return m_rep->is_hidden (); }
     bool is_inherited (void) const { return m_rep->is_inherited (); }
+    bool is_forwarded (void) const { return m_rep->is_forwarded (); }
     bool is_persistent (void) const { return m_rep->is_persistent (); }
     bool is_added_static (void) const { return m_rep->is_added_static (); }
 
     void mark_local (void) { m_rep->mark_local (); }
     void mark_automatic (void) { m_rep->mark_automatic (); }
     void mark_formal (void) { m_rep->mark_formal (); }
     void mark_hidden (void) { m_rep->mark_hidden (); }
     void mark_inherited (void) { m_rep->mark_inherited (); }
@@ -654,17 +674,17 @@ namespace octave
     unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
     void bind_fwd_rep (const std::shared_ptr<symbol_scope_rep>& fwd_scope,
                        const symbol_record& sr)
     {
       m_rep->bind_fwd_rep (fwd_scope, sr.m_rep);
     }
 
-    void unbind_fwd_rep (void) { m_rep->unbind_fwd_rep (); }
+    void unbind_fwd_rep (bool recurse = true) { m_rep->unbind_fwd_rep (recurse); }
 
     octave_value dump (context_id context) const
     {
       return m_rep->dump (context);
     }
 
   private:
 
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -232,11 +232,11 @@ namespace octave
       nm_sr.second.bind_fwd_rep (curr_scope,
                                  curr_scope->find_symbol (nm_sr.first));
   }
 
   void
   symbol_scope_rep::unbind_script_symbols (void)
   {
     for (auto& nm_sr : m_symbols)
-      nm_sr.second.unbind_fwd_rep ();
+      nm_sr.second.unbind_fwd_rep (false);
   }
 }
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -272,17 +272,17 @@ namespace octave
     }
 
     void refresh (void)
     {
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
-          if (! sr.is_persistent ())
+          if (! (sr.is_persistent () || sr.is_forwarded ()))
             sr.clear (m_context);
         }
     }
 
     void clear_variables (void)
     {
       for (auto& nm_sr : m_symbols)
         nm_sr.second.clear (m_context);
@@ -300,48 +300,71 @@ namespace octave
     }
 
     void clear_variable (const std::string& name)
     {
       table_iterator p = m_symbols.find (name);
 
       if (p != m_symbols.end ())
         p->second.clear (m_context);
+      else if (m_is_nested)
+        {
+          std::shared_ptr<symbol_scope_rep> psr = parent_scope_rep ();
+
+          if (psr)
+            psr->clear_variable (name);
+        }
     }
 
     void clear_variable_pattern (const std::string& pat)
     {
       glob_match pattern (pat);
 
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (sr.is_defined (m_context) || sr.is_global ())
             {
               if (pattern.match (sr.name ()))
                 sr.clear (m_context);
             }
         }
+
+      if (m_is_nested)
+        {
+          std::shared_ptr<symbol_scope_rep> psr = parent_scope_rep ();
+
+          if (psr)
+            psr->clear_variable_pattern (pat);
+        }
     }
 
     void clear_variable_regexp (const std::string& pat)
     {
       octave::regexp pattern (pat);
 
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (sr.is_defined (m_context) || sr.is_global ())
             {
               if (pattern.is_match (sr.name ()))
                 sr.clear (m_context);
             }
         }
+
+      if (m_is_nested)
+        {
+          std::shared_ptr<symbol_scope_rep> psr = parent_scope_rep ();
+
+          if (psr)
+            psr->clear_variable_regexp (pat);
+        }
     }
 
     void mark_automatic (const std::string& name)
     {
       insert (name).mark_automatic ();
     }
 
     void mark_hidden (const std::string& name)
diff --git a/test/bug-53027/bug-53027.tst b/test/bug-53027/bug-53027.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/bug-53027.tst
@@ -0,0 +1,50 @@
+%!function load53027 (fname)
+%!  global X
+%!  X = 2;
+%!  load (fname);
+%!  assert (X, 1);
+%!endfunction
+
+%!function save53027 (fname)
+%!  global X
+%!  X = 1;
+%!  save (fname, "X");
+%!endfunction
+
+%!test <*53027>
+%! global X
+%! X = 0;
+%! fname = tmpnam ();
+%! save53027 (fname);
+%! assert (X, 1);
+%! load53027 (fname);
+%! assert (X, 1);
+%! load53027 (fname);
+%! assert (X, 1);
+%! clear X
+%! assert (exist ("X"), 0);
+
+%!test <*53027>
+%! [a, b] = ntest53027a ();
+%! assert ([a, b], [0, 0])
+
+%!test <*53027>
+%! [a, b] = ntest53027b ();
+%! assert ([a, b], [0, 0])
+
+%!test <*53027>
+%! [a, b] = ntest53027c ();
+%! assert ([a, b], [0, 0])
+
+## Previous bugs have caused segfaults when executing script twice.
+%!test <*53027>
+%! gtest53027
+%! assert (isempty (a) && isempty (c))
+%! assert (isglobal ("a") && isglobal ("c"))
+%! assert (! exist ("b"))
+%! assert (isempty (xx) && ! isglobal ("xx"))
+%! gtest53027
+%! assert (isempty (a) && isempty (c))
+%! assert (isglobal ("a") && isglobal ("c"))
+%! assert (! exist ("b"))
+%! assert (isempty (xx) && ! isglobal ("xx"))
diff --git a/test/bug-53027/globals53027.m b/test/bug-53027/globals53027.m
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/globals53027.m
@@ -0,0 +1,1 @@
+global a b c
diff --git a/test/bug-53027/gtest53027.m b/test/bug-53027/gtest53027.m
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/gtest53027.m
@@ -0,0 +1,4 @@
+globals53027
+
+xx = a;
+clear b
diff --git a/test/bug-53027/module.mk b/test/bug-53027/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/module.mk
@@ -0,0 +1,9 @@
+bug_53027_TEST_FILES = \
+  %reldir%/bug-53027.tst \
+  %reldir%/globals53027.m \
+  %reldir%/gtest53027.m \
+  %reldir%/ntest53027a.m \
+  %reldir%/ntest53027b.m \
+  %reldir%/ntest53027c.m
+
+TEST_FILES += $(bug_53027_TEST_FILES)
diff --git a/test/bug-53027/ntest53027a.m b/test/bug-53027/ntest53027a.m
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/ntest53027a.m
@@ -0,0 +1,11 @@
+function [m_exist, n_exist] = ntest53027a ()
+  global x
+  x = 3;
+  n_exist = nest ();
+  m_exist = exist ("x", 'var');
+  function n_exist = nest ()
+    x = 1;
+    clear x
+    n_exist = exist ("x", "var");
+  endfunction
+endfunction
diff --git a/test/bug-53027/ntest53027b.m b/test/bug-53027/ntest53027b.m
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/ntest53027b.m
@@ -0,0 +1,15 @@
+function [m_exist, n_exist] = ntest53027b ()
+  global x
+  x = 3;
+  n_exist = nest ();
+  m_exist = exist ("x", 'var');
+  function n_exist = nest ()
+    ## The clear statement should operate on the variable in the
+    ## parent scope even though there is no explicit varabiable
+    ## reference in the code (the clear function just sees a string
+    ## containing the name of the variable and the parser (correctly)
+    ## does not treat this as a special case.
+    clear x
+    n_exist = exist ("x", "var");
+  endfunction
+endfunction
diff --git a/test/bug-53027/ntest53027c.m b/test/bug-53027/ntest53027c.m
new file mode 100644
--- /dev/null
+++ b/test/bug-53027/ntest53027c.m
@@ -0,0 +1,15 @@
+function [m_exist, n_exist] = ntest53027c ()
+  ## In this test, x is not global.
+  x = 3;
+  n_exist = nest ();
+  m_exist = exist ("x", 'var');
+  function n_exist = nest ()
+    ## The clear statement should operate on the variable in the
+    ## parent scope even though there is no explicit varabiable
+    ## reference in the code (the clear function just sees a string
+    ## containing the name of the variable and the parser (correctly)
+    ## does not treat this as a special case.
+    clear x
+    n_exist = exist ("x", "var");
+  endfunction
+endfunction
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -60,16 +60,17 @@ include %reldir%/bug-50014/module.mk
 include %reldir%/bug-50035/module.mk
 include %reldir%/bug-50716/module.mk
 include %reldir%/bug-51192/module.mk
 include %reldir%/bug-51532/module.mk
 include %reldir%/bug-51534/module.mk
 include %reldir%/bug-51599/module.mk
 include %reldir%/bug-52075/module.mk
 include %reldir%/bug-52722/module.mk
+include %reldir%/bug-53027/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/local-functions/module.mk
 include %reldir%/nest/module.mk
