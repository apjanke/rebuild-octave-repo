# HG changeset patch
# User jwe
# Date 1191612922 0
#      Fri Oct 05 19:35:22 2007 +0000
# Node ID b559b4bcf51f6d2fb142348e3aaa1cb7f3811818
# Parent  d5339f9f5f9c4338974e155108b2080e00edae40
[project @ 2007-10-05 19:35:21 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-05  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc (zlgamma): New function.
+
 2007-10-04  John W. Eaton  <jwe@octave.org>
 
 	* oct-sort.cc (octave_sort<T>::binarysort): Remove register
 	qualifiers on local variables.
 
 2007-10-04  Marco Caliari  <mcaliari@math.unipd.it>
 
 	* CMatrix.cc (ComplexMatrix::expm): Limit shift to values less
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -182,16 +182,35 @@ xlgamma (double x)
   else if (x <= 0 || xisinf (x))
     result = octave_Inf;
   else
     F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
 }
 
+Complex
+zlgamma (double x)
+{
+  Complex result;
+
+  if (xisnan (x))
+    result = x;
+  else if (x > 0)
+    result = xlgamma (x);
+  else
+    {
+      double tmp = xgamma (x);
+
+      result = tmp < 0 ? std::log (Complex (tmp)) : log (tmp);
+    }
+
+  return result;
+}
+
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesy (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
 zbesi (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -54,16 +54,17 @@ extern OCTAVE_API double erf (double);
 #endif
 
 #if !defined (HAVE_ERFC)
 extern OCTAVE_API double erfc (double);
 #endif
 
 extern OCTAVE_API double xgamma (double x);
 extern OCTAVE_API double xlgamma (double x);
+extern OCTAVE_API Complex zlgamma (double x);
 
 extern OCTAVE_API Complex
 besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
 bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr);
 
 extern OCTAVE_API Complex
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-10-05  John W. Eaton  <jwe@octave.org>
+
+	* mappers.cc (xzlgamma): New static function.
+	(install_mapper_functions): Pass xzlgamma for c_c_map for lgamma
+	mapper.  Pass 1 for can_ret_cmplx_for_real and set hi to
+	octave_Inf.
+
 2007-10-04  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/symrcm.cc: Move static functions to top of file to
 	avoid forward decls.
 	(Q_enq): Delete unused arg QH.  Change all uses.
 	(Q_deq): Delete unused arg QT.  Change all uses.
 	(find_starting_node): Delete unused local variable J.
 	(H_heapify_min, H_insert, find_starting_node, Fsymrcm):
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -82,18 +82,18 @@ 02110-1301, USA.
 //     arguments that are expected to create bool results.
 //
 //   c_b_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create bool results.
 //
 //   d_d_map is a pointer to a function that should be called for real
 //     arguments that are expected to create real results.
 //
-//   d_c_map is a pointer to a function that should be called for real
-//     arguments that are expected to create complex results.
+//   d_c_map is a pointer to a function that should be called for
+//     complex arguments that are expected to create real results.
 //
 //   c_c_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create complex results.
 //
 //   lo is the lower bound of the range for which real arguments
 //     return real results (e.g., lo == 0 for sqrt).
 //
 //   hi is the upper bound of the range for which real arguments
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -167,16 +167,31 @@ xreal (const Complex& x)
 }
 
 static int
 dummyp (int)
 {
   return 0;
 }
 
+// FIXME -- maybe our mapper function structure should alow for
+// functions that take real arguments and produce complex values.
+static Complex
+xzlgamma (const Complex& x)
+{
+  Complex retval;
+
+  if (x.imag () != 0)
+    error ("lgamma: expecting real arguments");
+  else
+    retval = zlgamma (x.real ());
+
+  return retval;
+}
+
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, xabs, 0, 0, fabs, xabs, 0, 0.0, 0.0, 1, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
 Compute the magnitude of @var{z}, defined as\n\
 @iftex\n\
@@ -522,17 +537,17 @@ Return 1 for upper case letters.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isxdigit, xisxdigit, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isxdigit (@var{s})\n\
 Return 1 for characters that are hexadecimal digits.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, xzlgamma, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} lgamma (@var{x})\n\
 @deftypefnx {Mapping Function} {} gammaln (@var{x})\n\
 Return the natural logarithm of the gamma function.\n\
 @seealso{gamma, gammai}\n\
 @end deftypefn");
 
   DEFUN_MAPPER (log, 0, 0, 0, log, 0, std::log, 0.0, octave_Inf, 0, 1,
