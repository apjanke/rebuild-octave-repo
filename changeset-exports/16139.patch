# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361988573 18000
#      Wed Feb 27 13:09:33 2013 -0500
# Node ID 2fd39ab122091adb1e824cb5f7ad2ff5632a5b39
# Parent  284e2ca86ef784016a59339b185787cfe5ddf762
move a function and data member from lexical_feedback to octave_parser

* parse.h: Include lex.h.
* parse.h, oct-parse.yy (octave_parser::reset): New function.
(octave_parser::end_of_input): New data member.
(octave_parser::octave_parser): Initialize it.
* lex.h, lex.ll (lexical_feedback::reset): Rename from reset_parser.
(lexical_feedback::parser_end_of_input): Delete.
* input.cc (get_debug_input): Call octave_parser::reset, not
lexical_feedback::reset_parser.
* toplev.cc (main_loop): Likewise.
* oct-parse.yy (eval_string, parse_fcn_file): Likewise.
* toplev.cc (main_loop): Set octave_parser::end_of_input, not
lexical_feedback::parser_end_of_input.
* oct-parse.yy: Use octave_parser::end_of_input, not
lexical_feedback::parser_end_of_input.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -687,17 +687,17 @@ get_debug_input (const std::string& prom
   frame.add_fcn (octave_parser::cleanup, curr_parser);
 
   while (Vdebugging)
     {
       unwind_protect middle_frame;
 
       reset_error_handler ();
 
-      curr_lexer->reset_parser ();
+      curr_parser->reset ();
 
       // Save current value of global_command.
       middle_frame.protect_var (global_command);
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -573,17 +573,17 @@ main_loop (void)
   do
     {
       try
         {
           unwind_protect inner_frame;
 
           reset_error_handler ();
 
-          curr_lexer->reset_parser ();
+          curr_parser->reset ();
 
           if (symbol_table::at_top_level ())
             tree_evaluator::reset_debug_state ();
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
@@ -636,17 +636,17 @@ main_loop (void)
                   else
                     {
                       if (octave_completion_matches_called)
                         octave_completion_matches_called = false;
                       else
                         command_editor::increment_current_command_number ();
                     }
                 }
-              else if (curr_lexer->parser_end_of_input)
+              else if (curr_parser->end_of_input)
                 break;
             }
         }
       catch (octave_interrupt_exception)
         {
           recover_from_exception ();
           octave_stdout << "\n";
           if (quitting_gracefully)
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -177,17 +177,17 @@ public:
       at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
-      quote_is_transpose (false), parser_end_of_input (false),
+      quote_is_transpose (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0),
       looking_at_object_index (), parsed_function_name (),
       pending_local_variables (), nesting_level ()
   {
     init ();
@@ -197,17 +197,17 @@ public:
 
   void init (void)
   {
     // The closest paren, brace, or bracket nesting is not an object
     // index.
     looking_at_object_index.push_front (false);
   }
 
-  void reset_parser (void);
+  void reset (void);
 
   void prep_for_script_file (void);
 
   void prep_for_function_file (void);
 
   int octave_read (char *buf, unsigned int max_size);
 
   char *flex_yytext (void);
@@ -345,19 +345,16 @@ public:
   bool maybe_classdef_get_set_method;
 
   // TRUE means we are parsing a classdef file
   bool parsing_classdef;
 
   // Return transpose or start a string?
   bool quote_is_transpose;
 
-  // TRUE means that we have encountered EOF on the input stream.
-  bool parser_end_of_input;
-
   // The current input line number.
   int input_line_number;
 
   // The column of the current token.
   int current_input_column;
 
   // Square bracket level count.
   int bracketflag;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1371,17 +1371,17 @@ lexical_feedback::~lexical_feedback (voi
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
       token_stack.pop ();
     }
 }
 
 void
-lexical_feedback::reset_parser (void)
+lexical_feedback::reset (void)
 {
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -360,17 +360,17 @@ input           : input1
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
 input1          : '\n'
                   { $$ = 0; }
                 | END_OF_INPUT
                   {
-                    curr_lexer->parser_end_of_input = 1;
+                    curr_parser->end_of_input = true;
                     $$ = 0;
                   }
                 | simple_list
                   { $$ = $1; }
                 | simple_list '\n'
                   { $$ = $1; }
                 | simple_list END_OF_INPUT
                   { $$ = $1; }
@@ -3340,17 +3340,17 @@ parse_fcn_file (const std::string& ff, c
       frame.protect_var (curr_lexer);
       curr_lexer = new lexical_feedback ();
       frame.add_fcn (lexical_feedback::cleanup, curr_lexer);
 
       frame.protect_var (curr_parser);
       curr_parser = new octave_parser ();
       frame.add_fcn (octave_parser::cleanup, curr_parser);
 
-      curr_lexer->reset_parser ();
+      curr_parser->reset ();
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
       if (! eof)
         {
@@ -4185,17 +4185,17 @@ eval_string (const std::string& s, bool 
 
   frame.add_fcn (switch_to_buffer, old_buf);
   frame.add_fcn (delete_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   do
     {
-      curr_lexer->reset_parser ();
+      curr_parser->reset ();
 
       frame.protect_var (global_command);
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
@@ -4259,17 +4259,17 @@ eval_string (const std::string& s, bool 
                 error ("eval: invalid use of statement list");
 
               if (error_state
                   || tree_return_command::returning
                   || tree_break_command::breaking
                   || tree_continue_command::continuing)
                 break;
             }
-          else if (curr_lexer->parser_end_of_input)
+          else if (curr_parser->end_of_input)
             break;
         }
     }
   while (parse_status == 0);
 
   return retval;
 }
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_parse_h 1
 
 #include <cstdio>
 
 #include <string>
 
 #include <stack>
 
+#include "lex.h"
 #include "token.h"
 
 extern int octave_lex (void);
 
 class octave_comment_list;
 class octave_function;
 class octave_user_function;
 class tree;
@@ -131,20 +132,25 @@ eval_string (const std::string&, bool si
 
 extern OCTINTERP_API void cleanup_statement_list (tree_statement_list **lst);
 
 class
 octave_parser
 {
 public:
 
-  octave_parser (void) { }
+  octave_parser (void) : end_of_input (false) { }
 
   ~octave_parser (void) { }
 
+  void reset (void)
+  {
+    curr_lexer->reset ();
+  }
+
   int run (void);
 
   // Error mesages for mismatched end tokens.
   void end_error (const char *type, token::end_tok_type ettype, int l, int c);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
 
@@ -315,16 +321,19 @@ public:
   // Create a statement list.
   tree_statement_list *make_statement_list (tree_statement *stmt);
 
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
+  // TRUE means that we have encountered EOF on the input stream.
+  bool end_of_input;
+
   // For unwind protect.
   static void cleanup (octave_parser *parser) { delete parser; }
 
 private:
 
   // No copying!
 
   octave_parser (const octave_parser&);
