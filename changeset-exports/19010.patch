# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1408112797 -7200
#      Fri Aug 15 16:26:37 2014 +0200
# Node ID c3af040956dfb85a695a25b83ef3ecd28f73d5c2
# Parent  d69358d7f9bb21097726f40b0d894da2f7aede48
fix FLTK position/outerposition properties, respect units

* __init_fltk__.cc: Handle figure properties position, outerposition,
  menubar with respect to units property.  Rename __fltk_redraw__ to
  __fltk_check__ because it doesn't trigger a redraw but calls
  Fl::check () instead.  Move the creation of plot_window to
  redraw_figure.

* __fltk_ginput__.m: Reflect rename from __fltk_redraw__ to __fltk_check__

* __fltk_print__.m: Remove redundant __fltk_redraw__

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -654,17 +654,17 @@ xerror_handler (Display *, XErrorEvent *
   return 0;
 }
 #endif
 
 class plot_window : public Fl_Window
 {
   friend class fltk_uimenu;
 public:
-  plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
+  plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp, bool internal)
     : Fl_Window (xx, yy, ww, hh + menu_h + status_h + 2, "octave"),
       window_label (), shift (0), fp (xfp), canvas (0),
       autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0),
       status (0), resize_dummy (0), ax_obj (), pos_x (0), pos_y (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     // The size of the resize_dummy box also determines the minimum window size
@@ -716,16 +716,23 @@ public:
     rotate->tooltip ("Mouse Rotate");
 
     help = new Fl_Button (4 * status_h, toolbar_y, status_h, status_h, "?");
     help->callback (button_callback, static_cast<void*> (this));
     help->tooltip ("Help");
 
     end ();
 
+    set_name ();
+    uimenu->add_to_menu (fp);
+    if (fp.menubar_is ("none") || !uimenu->items_to_show ())
+      hide_menubar ();
+
+    update_boundingbox (internal);
+
     if (fp.is_visible ())
       {
         // FIXME: This code should be removed when Octave drops support
         // for FLTK 1.1.  Search for default_xclass in this file to find
         // code that should be uncommented to take its place.
         //
         // Set WM_CLASS which allows window managers to properly group
         // related windows.  Otherwise, the class is just "FLTK"
@@ -742,22 +749,16 @@ public:
           XSetErrorHandler (xerror_handler);
 #endif
 
         if (fp.get_currentaxes ().ok ())
           show_canvas ();
         else
           hide_canvas ();
       }
-
-    set_name ();
-
-    uimenu->add_to_menu (fp);
-    if (!uimenu->items_to_show ())
-      hide_menubar ();
   }
 
   ~plot_window (void)
   {
     this->hide ();
   }
 
   double number (void) { return fp.get___myhandle__ ().value (); }
@@ -869,39 +870,61 @@ public:
 
   // Move the toolbar at the bottom of the plot_window.
   // The only reason for moving the toolbar is hiding and
   // showing the menubar. All other resizing is done by fltk.
 
   void update_toolbar_position ()
   {
     int old_canvas_h = canvas->h ();
-    size (w (), old_canvas_h + menu_dy () + status_h + 2);
+
+    // keep position fix, change outerposition accordingly
+    update_boundingbox (true);
     canvas->resize (0, menu_dy (), w (), old_canvas_h);
 
     int toolbar_y = canvas->h () + menu_dy () + 1;
     autoscale->position (0, toolbar_y);
     togglegrid->position (status_h, toolbar_y);
     panzoom->position (2 * status_h, toolbar_y);
     rotate->position (3 * status_h, toolbar_y);
     help->position (4 * status_h, toolbar_y);
     status->resize (5 * status_h + 1, toolbar_y,
                     w () - 5 * status_h - 1, status_h);
 
     init_sizes ();
     redraw ();
   }
 
-  // Called from figure::properties::ID_POSITION
-  // (someone has requested a position change with set (h, "position", [...]))
-  // ww and hh refers to the canvas size, not the plot_window size.
+  Matrix outerposition2position (const Matrix& outerpos)
+    {
+      Matrix pos = outerpos;
+      pos(1) += menu_dy ();
+      pos(3) -= menu_dy () + status_h + 2;
+      return pos;
+    }
 
-  void update_position (int xx, int yy, int ww, int hh)
+  Matrix position2outerposition (const Matrix& pos)
+    {
+      Matrix outerpos = pos;
+      outerpos(1) -= menu_dy ();
+      outerpos(3) += menu_dy () + status_h + 2;
+      return outerpos;
+    }
+
+  // Called from figure::properties::ID_POSITION if internal = true
+  // or ID_OUTERPOSITION if false.
+  // (someone has requested a position change with set (h, "position", [...])
+  // or set (h, "outerposition", [...])
+
+  void update_boundingbox (bool internal)
   {
-    Fl_Window::resize (xx, yy + menu_dy (), ww, hh + menu_dy () + status_h + 2);
+    Matrix bb = fp.get_boundingbox (internal);
+    if (internal)
+      bb = position2outerposition (bb);
+    resize (bb(0), bb(1), bb(2), bb(3));
   }
 
   void mark_modified (void)
   {
     canvas->redraw ();
   }
 
   void set_name (void)
@@ -1194,23 +1217,27 @@ private:
 
     return Cell (mod);
   }
 
   void resize (int xx, int yy, int ww, int hh)
   {
     Fl_Window::resize (xx, yy, ww, hh);
 
-    Matrix pos (1,4,0);
-    pos(0) = xx;
-    pos(1) = yy + menu_dy ();
-    pos(2) = canvas->w ();
-    pos(3) = canvas->h ();
+    Matrix bb (1, 4);
+    bb(0) = xx;
+    bb(1) = yy;
+    bb(2) = ww;
+    bb(3) = hh;
 
-    fp.set_position (pos, false);
+    // update outerposition
+    fp.set_boundingbox (bb, false, false);
+
+    // update position
+    fp.set_boundingbox (outerposition2position (bb), true, false);
   }
 
   int handle (int event)
   {
     if (event == FL_FOCUS)
       return 1;
 
     graphics_handle gh;
@@ -1615,21 +1642,21 @@ public:
 
   static void update_canvas (const graphics_handle& gh,
                              const graphics_handle& ca)
   {
     if (instance_ok ())
       instance->do_update_canvas (hnd2idx (gh), ca);
   }
 
-  static void update_position (const std::string& fig_idx_str,
-                               const Matrix pos)
+  static void update_boundingbox (const std::string& fig_idx_str,
+                                  bool internal)
   {
     if (instance_ok ())
-      instance->do_update_position (str2idx (fig_idx_str), pos);
+      instance->do_update_boundingbox (str2idx (fig_idx_str), internal);
   }
 
   static void toggle_menubar_visibility (const std::string& fig_idx_str,
                                          bool menubar_is_figure)
   {
     if (instance_ok ())
       instance->do_toggle_menubar_visibility (str2idx (fig_idx_str),
                                               menubar_is_figure);
@@ -1663,26 +1690,33 @@ private:
   }
 
   void do_new_window (figure::properties& fp)
   {
     int idx = figprops2idx (fp);
 
     if (idx >= 0 && windows.find (idx) == windows.end ())
       {
-        Matrix pos = fp.get_boundingbox (true);
-
-        int x = pos(0);
-        int y = pos(1);
-        int w = pos(2);
-        int h = pos(3);
+        Matrix pos = fp.get_outerposition ().matrix_value ();
+        bool internal = false;
+        // check if figure::properties::outerposition is default -1.0
+        if (pos(2) != -1.0 && pos(3) != -1.0)
+          {
+            pos = fp.get_boundingbox (internal);
+          }
+        else
+          {
+            // use position
+            internal = true;
+            pos = fp.get_boundingbox (internal);
+          }
 
         idx2figprops (curr_index, fp);
 
-        windows[curr_index++] = new plot_window (x, y, w, h, fp);
+        windows[curr_index++] = new plot_window (pos(0), pos(1), pos(2), pos(3), fp, internal);
       }
   }
 
   void do_delete_window (int idx)
   {
     wm_iterator win = windows.find (idx);
 
     if (win != windows.end ())
@@ -1787,22 +1821,22 @@ private:
       {
         if (ca.ok ())
           win->second->show_canvas ();
         else
           win->second->hide_canvas ();
       }
   }
 
-  void do_update_position (int idx, Matrix pos)
+  void do_update_boundingbox (int idx, bool internal)
   {
     wm_iterator win = windows.find (idx);
 
     if (win != windows.end ())
-      win->second->update_position (pos(0), pos(1), pos(2), pos(3));
+      win->second->update_boundingbox (internal);
   }
 
   static int str2idx (const caseless_str& clstr)
   {
     int ind;
     if (clstr.find (fltk_idx_header,0) == 0)
       {
         std::istringstream istr (clstr.substr (fltk_idx_header.size ()));
@@ -1855,47 +1889,16 @@ private:
 
 figure_manager *figure_manager::instance = 0;
 
 std::string figure_manager::fltk_idx_header="fltk index=";
 int figure_manager::curr_index = 1;
 
 static bool toolkit_loaded = false;
 
-static int
-__fltk_redraw__ (void)
-{
-  if (toolkit_loaded)
-    {
-      // We scan all figures and add those which use FLTK.
-      graphics_object obj = gh_manager::get_object (0);
-      if (obj && obj.isa ("root"))
-        {
-          base_properties& props = obj.get_properties ();
-          Matrix children = props.get_all_children ();
-
-          for (octave_idx_type n = 0; n < children.numel (); n++)
-            {
-              graphics_object fobj = gh_manager::get_object (children (n));
-              if (fobj && fobj.isa ("figure"))
-                {
-                  figure::properties& fp =
-                    dynamic_cast<figure::properties&> (fobj.get_properties ());
-                  if (fp.get___graphics_toolkit__ ()
-                      == FLTK_GRAPHICS_TOOLKIT_NAME)
-                    figure_manager::new_window (fp);
-                }
-            }
-        }
-      Fl::check ();
-    }
-
-  return 0;
-}
-
 class fltk_graphics_toolkit : public base_graphics_toolkit
 {
 public:
   fltk_graphics_toolkit (void)
     : base_graphics_toolkit (FLTK_GRAPHICS_TOOLKIT_NAME),
       input_event_hook_fcn_id ()
   { }
 
@@ -1988,38 +1991,60 @@ public:
                   std::string tmp = ov.string_value ();
                   graphics_handle gh = fp.get___myhandle__ ();
                   figure_manager::renumber_figure (tmp, gh.value ());
                   figure_manager::set_name (tmp);
                 }
                 break;
 
               case figure::properties::ID_POSITION:
-                {
-                  std::string tmp = ov.string_value ();
-                  Matrix pos = fp.get_position ().matrix_value ();
-                  figure_manager::update_position (tmp, pos);
-                }
+                figure_manager::update_boundingbox (ov.string_value (), true);
+                break;
+
+              case figure::properties::ID_OUTERPOSITION:
+                figure_manager::update_boundingbox (ov.string_value (), false);
                 break;
               }
           }
       }
     else if (go.isa ("uimenu"))
       {
         if (id == uimenu::properties::ID_LABEL)
           uimenu_set_fltk_label (go);
 
         graphics_object fig = go.get_ancestor ("figure");
         figure_manager::uimenu_update (fig.get_handle (), go.get_handle (), id);
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
+    // We scan all figures and add those which use FLTK.
+    graphics_object obj = gh_manager::get_object (0);
+    if (obj && obj.isa ("root"))
+      {
+        base_properties& props = obj.get_properties ();
+        Matrix children = props.get_all_children ();
+
+        for (octave_idx_type n = 0; n < children.numel (); n++)
+          {
+            graphics_object fobj = gh_manager::get_object (children (n));
+            if (fobj && fobj.isa ("figure"))
+              {
+                figure::properties& fp =
+                  dynamic_cast<figure::properties&> (fobj.get_properties ());
+                if (fp.get___graphics_toolkit__ ()
+                    == FLTK_GRAPHICS_TOOLKIT_NAME)
+                  figure_manager::new_window (fp);
+              }
+          }
+      }
+
     figure_manager::mark_modified (go.get_handle ());
+    Fl::check ();
   }
 
   void print_figure (const graphics_object& go,
                      const std::string& term,
                      const std::string& file_cmd, bool /*mono*/,
                      const std::string& /*debug_file*/) const
   {
     figure_manager::print (go.get_handle (), file_cmd, term);
@@ -2070,26 +2095,26 @@ public:
   }
 
 private:
   octave_value_list input_event_hook_fcn_id;
 };
 
 #endif
 
-DEFUN_DLD (__fltk_redraw__, , ,
+DEFUN_DLD (__fltk_check__, , ,
            "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} __fltk_redraw__ ()\n\
-Undocumented internal function.\n\
+@deftypefn {Loadable Function} {} __fltk_check__ ()\n\
+Undocumented internal function. Calls Fl::check ()\n\
 @end deftypefn")
 {
 #ifdef HAVE_FLTK
-  __fltk_redraw__ ();
+  Fl::check ();
 #else
-  error ("__fltk_redraw__: not available without OpenGL and FLTK libraries");
+  error ("__fltk_check__: not available without OpenGL and FLTK libraries");
 #endif
 
   return octave_value ();
 }
 
 // Initialize the fltk graphics toolkit.
 
 DEFUN_DLD (__init_fltk__, , ,
@@ -2105,18 +2130,18 @@ Undocumented internal function.\n\
     {
       mlock ();
 
       fltk_graphics_toolkit *fltk = new fltk_graphics_toolkit ();
       graphics_toolkit tk (fltk);
       gtk_manager::load_toolkit (tk);
       toolkit_loaded = true;
 
-      octave_value fcn (new octave_builtin (F__fltk_redraw__));
-      octave_value fcn_handle (new octave_fcn_handle (fcn, "@__fltk_redraw__"));
+      octave_value fcn (new octave_builtin (F__fltk_check__));
+      octave_value fcn_handle (new octave_fcn_handle (fcn, "@__fltk_check__"));
       octave_value_list id = Fadd_input_event_hook (fcn_handle, 1);
 
       fltk->set_input_event_hook_id (id);
     }
 #else
   error ("__init_fltk__: not available without OpenGL and FLTK libraries");
 #endif
 
diff --git a/scripts/plot/util/private/__fltk_ginput__.m b/scripts/plot/util/private/__fltk_ginput__.m
--- a/scripts/plot/util/private/__fltk_ginput__.m
+++ b/scripts/plot/util/private/__fltk_ginput__.m
@@ -36,17 +36,17 @@ function [x, y, button] = __fltk_ginput_
 
     orig_windowbuttondownfcn = get (f, "windowbuttondownfcn");
     set (f, "windowbuttondownfcn", @ginput_windowbuttondownfcn);
 
     orig_ginput_keypressfcn = get (f, "keypressfcn");
     set (f, "keypressfcn", @ginput_keypressfcn);
 
     do
-      __fltk_redraw__ ();
+      __fltk_check__ ();
 
       ## Release CPU.
       sleep (0.01);
 
       [x, y, n0, button] = ginput_accumulator (-1, 0, 0, 0);
     until (n0 == n || n0 < 0)
 
   unwind_protect_cleanup
diff --git a/scripts/plot/util/private/__fltk_print__.m b/scripts/plot/util/private/__fltk_print__.m
--- a/scripts/plot/util/private/__fltk_print__.m
+++ b/scripts/plot/util/private/__fltk_print__.m
@@ -22,17 +22,16 @@
 ## @end deftypefn
 
 function opts = __fltk_print__ (opts)
 
   dos_shell = (ispc () && ! isunix ());
 
   set (0, "currentfigure", opts.figure);
   drawnow ("expose");
-  __fltk_redraw__ ();
 
   if (! isempty (opts.fig2dev_binary))
     ## fig2dev is prefered for conversion to emf
     fig2dev_devices = {"pstex", "mf", "emf"};
   else
     fig2dev_devices = {"pstex", "mf"};
   endif
 
