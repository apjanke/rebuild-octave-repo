# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1462241389 -3600
#      Tue May 03 03:09:49 2016 +0100
# Node ID 09517e0a8aa02922649ba0d5d5b467ccc5310e51
# Parent  7b48be706e28fab265b369e62209e0c4252a23a6
inputParser.m: handle errors in Optional parameters (maybe is a param key).

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -349,17 +349,22 @@ classdef inputParser < handle
       vidx = nReq;  # current index in varargin
 
       ## Search for a list of Optional arguments
       idx  = 0;     # current index on the array of Optional
       nOpt = numel (this.Optional);
       while (vidx < pnargin && idx < nOpt)
         opt = this.Optional{++idx};
         in  = varargin{++vidx};
-        if (! opt.val (in))
+        try
+          valid_option = opt.val (in);
+        catch
+          valid_option = false;
+        end_try_catch
+        if (! valid_option)
           ## If it does not match there's two options:
           ##    1) input is actually wrong and we should error;
           ##    2) it's a ParamValue or Switch name and we should use the
           ##       the default for the rest.
           if (ischar (in))
             idx -= 1;
             vidx -= 1;
             break
@@ -584,16 +589,27 @@ endclassdef
 %! assert (p.Results.Dir, []);
 
 %!test
 %! p = inputParser;
 %! p.addParamValue ("positive", -1, @(x) x > 5);
 %! p.parse ();
 %! assert (p.Results.positive, -1);
 
+## Throw an error on validation of optional argument to check that it
+## is caught without preventing continuation into param/value pairs.
+%!test
+%! p = inputParser ();
+%! p.addOptional ("err", "foo", @error);
+%! p.addParamValue ("not_err", "bar", @ischar);
+%! p.parse ("not_err", "qux");
+%! assert (p.Results.err, "foo")
+%! assert (p.Results.not_err, "qux")
+
+
 %!function r = foobar (varargin)
 %!  p = inputParser ();
 %!  p.addParamValue ("foo", "bar", @ischar);
 %!  p.parse (varargin{2:end});
 %!  r = p.Results;
 %!endfunction
 
 %!xtest assert (foobar (), struct ("foo", "bar"))
