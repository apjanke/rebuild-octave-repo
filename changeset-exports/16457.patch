# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365327923 14400
#      Sun Apr 07 05:45:23 2013 -0400
# Node ID 10edb6f1ae9882bb753e6fb3c779d7657553d59c
# Parent  203efbbcea637fce2b70e48c4db5bf01d2eec69b
improve encapsulation of file editor window object

* file-editor-interface.h
(file_editor_interface::connect_visibility_changed): New function.
* file-editor.h, file-editor.cc (file_editor::handle_visibility,
file_editor::focus, file_editor::connect_visibility_changed):
New functions.
(file_editor::construct): Connect main_window::new_file_signal to
file_editor::new_file.
* main-window.cc (main_window::editor_window): Rename from
_file_editor.  Change all uses.
(create_default_editor): New static function.
(main_window::main_window): Use it to initialize editor_window.
(main_window::new_file_signal, main_window::open_file_signal):
New signals.
(main_window::new_file, main_window::open_file): Emit signals instead
of calling file_editor functions directly.
(main_window::focus_editor, main_window::handle_editor_visible):
Delete.
(main_window::connect_visibility_changed): Call
editor_window->connect_visibility_changed.
(main_window::construct): Don't create _file_editor.
(main_window::construct_file_menu): Connect _open_action::triggered to
editor_window::request_open_file instead of main_window::open_file.
 Connect _new_script_action::triggered to
editor_window::request_new_file instead of main_window::new_file.
(main_window::construct_new_menu): Connect editor_action::triggered to
editor_window::focus instead of main_window::focus_editor.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -56,16 +56,18 @@ class file_editor_interface : public oct
   virtual void
   handle_update_breakpoint_marker_request (bool insert, const QString& file,
                                            int line) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
+  virtual void connect_visibility_changed (void) = 0;
+
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -68,16 +68,36 @@ file_editor::~file_editor ()
 
   settings->setValue ("editor/savedSessionTabs", fetFileNames);
   settings->sync ();
 
   if (_mru_file_menu)
     delete _mru_file_menu;
 }
 
+void
+file_editor::focus (void)
+{
+  set_focus ();
+}
+
+void
+file_editor::handle_visibility (bool visible)
+{
+  if (visible && ! isFloating ())
+    focus ();
+}
+
+void
+file_editor::connect_visibility_changed (void)
+{
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility (bool)));
+}
+
 // set focus to editor and its current tab
 void
 file_editor::set_focus ()
 {
   if (!isVisible ())
     setVisible (true);
   setFocus ();
   activateWindow ();
@@ -799,16 +819,22 @@ file_editor::construct ()
   vbox_layout->addWidget (_tab_widget);
   vbox_layout->setMargin (0);
   editor_widget->setLayout (vbox_layout);
   setWidget (editor_widget);
 
   connect (parent (), SIGNAL (settings_changed (const QSettings *)),
            this, SLOT (notice_settings (const QSettings *)));
 
+  connect (parent (), SIGNAL (new_file_signal (const QString&)),
+           this, SLOT (request_new_file (const QString&)));
+
+  connect (parent (), SIGNAL (open_file_signal (const QString&)),
+           this, SLOT (request_open_file (const QString&)));
+
   connect (new_action,
            SIGNAL (triggered ()), this, SLOT (request_new_file ()));
   connect (open_action,
            SIGNAL (triggered ()), this, SLOT (request_open_file ()));
   connect (undo_action,
            SIGNAL (triggered ()), this, SLOT (request_undo ()));
   connect (redo_action,
            SIGNAL (triggered ()), this, SLOT (request_redo ()));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -42,19 +42,23 @@ enum editor_markers
     breakpoint,
     debugger_position
   };
 
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
-  public:
+public:
+
   file_editor (QWidget *p);
   ~file_editor ();
+
+  void connect_visibility_changed (void);
+
   void loadFile (const QString& fileName);
 
   QMenu *           get_mru_menu ( ) { return _mru_file_menu; }
   QMenu *           debug_menu ();
   QToolBar *        toolbar ();
 
   void set_focus ();
   void handle_enter_debug_mode (void);
@@ -91,16 +95,19 @@ signals:
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID, int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
+  void focus (void);
+  void handle_visibility (bool visible);
+
   void request_new_file (const QString& commands);
   void request_open_file ();
   void request_mru_open_file ();
   void request_print_file ();
 
   void request_undo ();
   void request_redo ();
   void request_copy ();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -50,84 +50,79 @@ along with Octave; see the file COPYING.
 #include "load-save.h"
 #include "toplev.h"
 #include "version.h"
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "oct-env.h"
 
+static file_editor_interface *
+create_default_editor (QWidget *p)
+{
+#ifdef HAVE_QSCINTILLA
+  return new file_editor (p);
+#else
+  return 0;
+#endif
+}
+
 main_window::main_window (QWidget *p)
   : QMainWindow (p),
     _workspace_model (new workspace_model ()),
     status_bar (new QStatusBar ()),
     command_window (new terminal_dock_widget (this)),
     history_window (new history_dock_widget (this)),
     file_browser_window (new files_dock_widget (this)),
-    doc_browser_window (new documentation_dock_widget (this))
+    doc_browser_window (new documentation_dock_widget (this)),
+    editor_window (create_default_editor (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window (void)
 {
   delete _workspace_model;
   delete status_bar;
   delete command_window;
   delete history_window;
   delete file_browser_window;
   delete doc_browser_window;
+  delete editor_window;
 
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
   // attached to a non-existent parent.
 
   if (_octave_qt_event_listener)
     delete _octave_qt_event_listener;
 
   octave_link::connect_link (0);
   delete _octave_qt_link;
 
-#ifdef HAVE_QSCINTILLA
-  if (_file_editor)
-    delete _file_editor;
-#endif
-
   delete _workspace_view;
 }
 
 void
 main_window::focus_command_window (void)
 {
   command_window->focus ();
 }
 
 void
 main_window::new_file (const QString& commands)
 {
-#ifdef HAVE_QSCINTILLA
-  _file_editor->request_new_file (commands);
-#endif
-}
-
-void
-main_window::open_file (void)
-{
-#ifdef HAVE_QSCINTILLA
-  _file_editor->request_open_file ();
-#endif
+  emit new_file_signal (commands);
 }
 
 void
 main_window::open_file (const QString& file_name)
 {
-#ifdef HAVE_QSCINTILLA
-  _file_editor->request_open_file (file_name);
-#endif
+  emit open_file_signal (file_name);
 }
 
 void
 main_window::report_status_message (const QString& statusMessage)
 {
   status_bar->showMessage (statusMessage, 1000);
 }
 
@@ -367,71 +362,52 @@ main_window::focus_workspace (void)
 
   _workspace_view->setFocus ();
   _workspace_view->activateWindow ();
   _workspace_view->raise ();
 }
 
 
 void
-main_window::focus_editor (void)
-{
-#ifdef HAVE_QSCINTILLA
-  // call own function of editor in order to set focus to the current editor tab
-  _file_editor->set_focus ();
-#endif
-}
-
-void
 main_window::handle_workspace_visible (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && !_workspace_view->isFloating ())
     focus_workspace ();
 }
 
 void
-main_window::handle_editor_visible (bool visible)
-{
-  // if changed to visible and widget is not floating
-#ifdef HAVE_QSCINTILLA
-  if (visible && !_file_editor->isFloating ())
-    focus_editor ();
-#endif
-}
-
-void
 main_window::handle_enter_debugger (void)
 {
   setWindowTitle ("Octave (Debugging)");
 
   _debug_continue->setEnabled (true);
   _debug_step_into->setEnabled (true);
   _debug_step_over->setEnabled (true);
   _debug_step_out->setEnabled (true);
   _debug_quit->setEnabled (true);
 
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_enter_debug_mode ();
+  editor_window->handle_enter_debug_mode ();
 #endif
 }
 
 void
 main_window::handle_exit_debugger (void)
 {
   setWindowTitle ("Octave");
 
   _debug_continue->setEnabled (false);
   _debug_step_into->setEnabled (false);
   _debug_step_over->setEnabled (false);
   _debug_step_out->setEnabled (false);
   _debug_quit->setEnabled (false);
 
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_exit_debug_mode ();
+  editor_window->handle_exit_debug_mode ();
 #endif
 }
 
 void
 main_window::debug_continue (void)
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
@@ -559,25 +535,22 @@ main_window::write_settings (void)
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed (void)
 {
   command_window->connect_visibility_changed ();
   history_window->connect_visibility_changed ();
   file_browser_window->connect_visibility_changed ();
   doc_browser_window->connect_visibility_changed ();
+#ifdef HAVE_QSCINTILLA
+  editor_window->connect_visibility_changed ();
+#endif
 
   connect (_workspace_view, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_workspace_visible (bool)));
-
-#ifdef HAVE_QSCINTILLA
-  connect (_file_editor, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_editor_visible (bool)));
-#endif
-
 }
 
 
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
@@ -598,20 +571,16 @@ main_window::construct (void)
 
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
   dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
   dummyWidget->hide ();
   setCentralWidget (dummyWidget);
 
-#ifdef HAVE_QSCINTILLA
-  _file_editor = new file_editor (this);
-#endif
-
   construct_menu_bar ();
 
   construct_tool_bar ();
 
   connect (qApp, SIGNAL (aboutToQuit ()),
            this, SLOT (prepare_for_quit ()));
 
   connect (this, SIGNAL (settings_changed (const QSettings *)),
@@ -623,18 +592,18 @@ main_window::construct (void)
                   | QMainWindow::AllowNestedDocks
                   | QMainWindow::AllowTabbedDocks);
 
   addDockWidget (Qt::RightDockWidgetArea, command_window);
   addDockWidget (Qt::RightDockWidgetArea, doc_browser_window);
   tabifyDockWidget (command_window, doc_browser_window);
 
 #ifdef HAVE_QSCINTILLA
-  addDockWidget (Qt::RightDockWidgetArea, _file_editor);
-  tabifyDockWidget (command_window, _file_editor);
+  addDockWidget (Qt::RightDockWidgetArea, editor_window);
+  tabifyDockWidget (command_window, editor_window);
 #endif
 
   addDockWidget (Qt::LeftDockWidgetArea, file_browser_window);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, history_window);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
@@ -685,32 +654,32 @@ main_window::construct_octave_qt_link (v
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
   connect (_octave_qt_link,
            SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
-           _file_editor,
+           editor_window,
            SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
-           _file_editor,
+           editor_window,
            SLOT (handle_edit_file_request (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
-           _file_editor,
+           editor_window,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
-           _file_editor,
+           editor_window,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   _octave_qt_link->execute_interpreter ();
 
   octave_link::connect_link (_octave_qt_link);
 
   octave_link::register_event_listener (_octave_qt_event_listener);
 }
@@ -742,17 +711,17 @@ main_window::construct_file_menu (QMenuB
 
   _open_action
     = file_menu->addAction (QIcon (":/actions/icons/fileopen.png"),
                             tr ("Open..."));
   _open_action->setShortcut (QKeySequence::Open);
   _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
 #ifdef HAVE_QSCINTILLA
-  file_menu->addMenu (_file_editor->get_mru_menu ());
+  file_menu->addMenu (editor_window->get_mru_menu ());
 #endif
 
   QAction *close_command_window_action
     = file_menu->addAction (tr ("Close Command Window"));
   close_command_window_action->setShortcut (QKeySequence::Close);
   close_command_window_action->setEnabled (false); // TODO: Make this work.
 
   file_menu->addSeparator ();
@@ -789,17 +758,17 @@ main_window::construct_file_menu (QMenuB
 
   QAction *exit_action = file_menu->addAction (tr ("Exit"));
   exit_action->setShortcut (QKeySequence::Quit);
 
   connect (preferences_action, SIGNAL (triggered ()),
            this, SLOT (process_settings_dialog_request ()));
 
   connect (_open_action, SIGNAL (triggered ()),
-           this, SLOT (open_file ()));
+           editor_window, SLOT (request_open_file ()));
 
   connect (save_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_save_workspace_request ()));
 
   connect (exit_action, SIGNAL (triggered ()),
            this, SLOT (close ()));
 }
 
@@ -830,17 +799,17 @@ main_window::construct_new_menu (QMenu *
 
   QAction *new_model_action = new_menu->addAction (tr ("Model"));
   new_model_action->setEnabled (false); // TODO: Make this work.
 
   QAction *new_gui_action = new_menu->addAction (tr ("GUI"));
   new_gui_action->setEnabled (false); // TODO: Make this work.
 
   connect (_new_script_action, SIGNAL (triggered ()),
-           this, SLOT (new_file ()));
+           editor_window, SLOT (request_new_file ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
   QMenu *edit_menu = p->addMenu (tr ("&Edit"));
 
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
@@ -924,18 +893,18 @@ main_window::construct_debug_menu_item (
                                         const QKeySequence& key)
 {
   QAction *action = _debug_menu->addAction (QIcon (icon_file), item);
 
   action->setEnabled (false);
   action->setShortcut (Qt::Key_F10);
 
 #ifdef HAVE_QSCINTILLA
-  _file_editor->debug_menu ()->addAction (action);
-  _file_editor->toolbar ()->addAction (action);
+  editor_window->debug_menu ()->addAction (action);
+  editor_window->toolbar ()->addAction (action);
 #endif
 
   return action;
 }
 
 void
 main_window::construct_debug_menu (QMenuBar *p)
 {
@@ -951,17 +920,17 @@ main_window::construct_debug_menu (QMenu
     (":/actions/icons/db_step_out.png", tr ("Step out"),
      Qt::ShiftModifier + Qt::Key_F11);
 
   _debug_continue = construct_debug_menu_item
     (":/actions/icons/db_cont.png", tr ("Continue"), Qt::Key_F5);
 
   _debug_menu->addSeparator ();
 #ifdef HAVE_QSCINTILLA
-  _file_editor->debug_menu ()->addSeparator ();
+  editor_window->debug_menu ()->addSeparator ();
 #endif
 
   _debug_quit = construct_debug_menu_item
     (":/actions/icons/db_stop.png", tr ("Exit Debug Mode"),
      Qt::ShiftModifier + Qt::Key_F5);
 
   connect (_debug_step_over, SIGNAL (triggered ()),
            this, SLOT (debug_step_over ()));
@@ -1078,19 +1047,19 @@ main_window::construct_window_menu (QMen
   connect (show_file_browser_action, SIGNAL (toggled (bool)),
            file_browser_window, SLOT (setVisible (bool)));
 
   connect (file_browser_window, SIGNAL (active_changed (bool)),
            show_file_browser_action, SLOT (setChecked (bool)));
 
 #ifdef HAVE_QSCINTILLA
   connect (show_editor_action, SIGNAL (toggled (bool)),
-           _file_editor, SLOT (setVisible (bool)));
+           editor_window, SLOT (setVisible (bool)));
 
-  connect (_file_editor, SIGNAL (active_changed (bool)),
+  connect (editor_window, SIGNAL (active_changed (bool)),
            show_editor_action, SLOT (setChecked (bool)));
 #endif
 
   connect (show_documentation_action, SIGNAL (toggled (bool)),
            doc_browser_window, SLOT (setVisible (bool)));
 
   connect (doc_browser_window, SIGNAL (active_changed (bool)),
            show_documentation_action, SLOT (setChecked (bool)));
@@ -1103,17 +1072,17 @@ main_window::construct_window_menu (QMen
 
   connect (history_action, SIGNAL (triggered ()),
            history_window, SLOT (focus ()));
 
   connect (file_browser_action, SIGNAL (triggered ()),
            file_browser_window, SLOT (focus ()));
 
   connect (editor_action, SIGNAL (triggered ()),
-           this, SLOT (focus_editor ()));
+           editor_window, SLOT (focus ()));
 
   connect (documentation_action, SIGNAL (triggered ()),
            doc_browser_window, SLOT (focus ()));
 
   connect (reset_windows_action, SIGNAL (triggered ()),
            this, SLOT (reset_windows ()));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -69,26 +69,27 @@ public:
 
   ~main_window (void);
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
   void relay_command_signal (const QString&);
+  void new_file_signal (const QString&);
+  void open_file_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void new_file (const QString& commands = QString ());
-  void open_file (void);
-  void open_file (const QString& file_name);
+  void open_file (const QString& file_name = QString ());
   void open_online_documentation_page (void);
   void open_bug_tracker_page (void);
   void open_octave_forge_page (void);
   void open_agora_page (void);
   void process_settings_dialog_request (void);
   void show_about_octave (void);
   void notice_settings (const QSettings *settings);
   void prepare_for_quit (void);
@@ -99,19 +100,17 @@ public slots:
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
   void focus_workspace (void);
-  void focus_editor (void);
   void handle_workspace_visible (bool);
-  void handle_editor_visible (bool);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
@@ -179,20 +178,17 @@ private:
   // Toolbars.
   QStatusBar *status_bar;
 
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
-
-#ifdef HAVE_QSCINTILLA
-  file_editor_interface *_file_editor;
-#endif
+  file_editor_interface *editor_window;
 
   QMenu *_debug_menu;
 
   QAction *_debug_continue;
   QAction *_debug_step_into;
   QAction *_debug_step_over;
   QAction *_debug_step_out;
   QAction *_debug_quit;
