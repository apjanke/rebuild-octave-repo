# HG changeset patch
# User jwe
# Date 1076961426 0
#      Mon Feb 16 19:57:06 2004 +0000
# Node ID 88b638195bd1d4ed1f3be0ea7a73e6d5a1407c3e
# Parent  0ff45249d3219889793285c19a854c00959e1aa3
[project @ 2004-02-16 19:57:06 by jwe]

diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -19,19 +19,21 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #if defined (HAVE_FFTW3)
 
+#include <iostream>
+#include <vector>
+
 #include "oct-fftw.h"
 #include "lo-error.h"
-#include <iostream>
 
 // Helper class to create and cache fftw plans for both 1d and 2d. This
 // implementation uses FFTW_ESTIMATE to create the plans, which in theory
 // is suboptimal, but provides quite reasonable performance.
 
 // Also note that if FFTW_ESTIMATE is not used the planner in FFTW3
 // destroys the input and output arrays. So with the form of the 
 // current code we definitely want FFTW_ESTIMATE!! However, we use
@@ -102,18 +104,18 @@ fftw_plan
 octave_fftw_planner::create_plan (int dir, const int rank,
 				  const dim_vector dims, int howmany,
 				  int stride, int dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
-  char in_align = (static_cast<int> (in)) & 0xF;
-  char out_align = (static_cast<int (out)) & 0xF;
+  char in_align = (X_CAST (int, in)) & 0xF;
+  char out_align = (X_CAST (int, out)) & 0xF;
 
   if (plan[which] == 0 || d[which] != dist || s[which] != stride ||
       r[which] != rank || h[which] != howmany ||
       ialign[which] != in_align || oalign[which] != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
@@ -156,18 +158,18 @@ octave_fftw_planner::create_plan (int di
  
 fftw_plan
 octave_fftw_planner::create_plan (const int rank, const dim_vector dims, 
 				  int howmany, int stride, int dist, 
 				  const double *in, Complex *out)
 {
   fftw_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
-  char in_align = (static_cast<int> (in)) & 0xF;
-  char out_align = (static_cast<int (out)) & 0xF;
+  char in_align = (X_CAST (int, in)) & 0xF;
+  char out_align = (X_CAST (int, out)) & 0xF;
 
   if (rplan == 0 || rd != dist || rs != stride ||
       rr != rank || rh != howmany ||
       rialign != in_align || roalign != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
@@ -205,27 +207,28 @@ octave_fftw_planner::create_plan (const 
 	(*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
 
 static octave_fftw_planner fftw_planner;
 
-static inline void convert_packcomplex_1d (Complex *out, size_t nr, 
-					   size_t nc, int stride, int dist)
+static inline void
+convert_packcomplex_1d (Complex *out, size_t nr, size_t nc,
+			int stride, int dist)
 {
   // Fill in the missing data
   for (size_t i = 0; i < nr; i++)
     for (size_t j = nc/2+1; j < nc; j++)
       out[j*stride + i*dist] = conj(out[(nc - j)*stride + i*dist]);
 }
 
-static inline void convert_packcomplex_Nd (Complex *out, 
-					   const dim_vector &dv)
+static inline void
+convert_packcomplex_Nd (Complex *out, const dim_vector &dv)
 {
   size_t nc = dv(0);
   size_t nr = dv(1);
   size_t np = (dv.length() > 2 ? dv.numel () / nc / nr : 1);
   size_t nrp = nr * np;
   Complex *ptr1, *ptr2;
 
   // Create space for the missing elements
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* version.h (OCTAVE_VERSION): Now 2.1.54.
+	(OCTAVE_API_VERSION): Now api-v5.
+
 2004-02-16 David Bateman <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/fft.cc: Adapt for Nd arrays, combine with ifft.cc.
 	* DLD-FUNCTIONS/ifft.cc: Delete.
 	* DLD-FUNCTIONS/fft2.cc: Adapt for Nd arrays, combine with ifft.cc.
 	* DLD-FUNCTIONS/ifft2.cc: Delete.
 	* DLD-FUNCTIONS/fftn.cc: New function for Nd FFT and inverse FFT.
 	* DLD-FUNCTIONS/fft_wisdom.cc: New function to manipulate FFTW 
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,19 +18,19 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.53"
+#define OCTAVE_VERSION "2.1.54"
 
-#define OCTAVE_API_VERSION "api-v4"
+#define OCTAVE_API_VERSION "api-v5"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 2004 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" OCTAVE_CANONICAL_HOST_TYPE ")"
 
 #define OCTAVE_COPYING_STATEMENT \
