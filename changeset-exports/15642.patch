# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327443520 -3600
#      Tue Jan 24 23:18:40 2012 +0100
# Node ID 1073b2efaa9309f18c12c8e0ed0a66bcfa16604a
# Parent  b8d787001038b7a3c6aa9917706367485fd3c6d0
Fixed K3Process as it does not fork a new process and sets up communication right as it should.

diff --git a/libqterminal/k3process.cpp b/libqterminal/k3process.cpp
--- a/libqterminal/k3process.cpp
+++ b/libqterminal/k3process.cpp
@@ -238,16 +238,17 @@ void K3Process::clearArguments()
 
 bool K3Process::start(RunMode runmode, Communication comm)
 {
 
   if (runs) {
     qDebug() << "Attempted to start an already running process" << endl;
     return false;
   }
+/*
 
   uint n = arguments.count();
   if (n == 0) {
     qDebug() << "Attempted to start a process without arguments" << endl;
     return false;
   }
   char **arglist;
   QByteArray shellCmd;
@@ -270,48 +271,51 @@ bool K3Process::start(RunMode runmode, C
       arglist[3] = 0;
   }
   else
   {
       arglist = static_cast<char **>(malloc( (n + 1) * sizeof(char *)));
       for (uint i = 0; i < n; i++)
          arglist[i] = arguments[i].data();
       arglist[n] = 0;
-  }
+  }*/
 
   run_mode = runmode;
 
   if (!setupCommunication(comm))
   {
       qDebug() << "Could not setup Communication!" << endl;
-      free(arglist);
+      //free(arglist);
       return false;
   }
 
   // We do this in the parent because if we do it in the child process
   // gdb gets confused when the application runs from gdb.
 #ifdef HAVE_INITGROUPS
   struct passwd *pw = geteuid() ? 0 : getpwuid(getuid());
 #endif
 
+/*
   int fd[2];
-  if (pipe(fd))
-     fd[0] = fd[1] = -1; // Pipe failed.. continue
 
-
+  if (pipe(fd)) {
+      qDebug("Pipe failed!");
+      fd[0] = fd[1] = -1; // Pipe failed.. continue
+  }
+*/
   // we don't use vfork() because
   // - it has unclear semantics and is not standardized
   // - we do way too much magic in the child
-  pid_ = fork();
-  if (pid_ == 0) {
+  //pid_ = fork();
+  //if (pid_ == 0) {
         // The child process
 
-        close(fd[0]);
+        //close(fd[0]);
         // Closing of fd[1] indicates that the execvp() succeeded!
-        fcntl(fd[1], F_SETFD, FD_CLOEXEC);
+        //fcntl(fd[1], F_SETFD, FD_CLOEXEC);
 
         if (!commSetupDoneC())
           qDebug() << "Could not finish comm setup in child!" << endl;
 
         // reset all signal handlers
         struct sigaction act;
         sigemptyset(&act.sa_mask);
         act.sa_handler = SIG_DFL;
@@ -334,52 +338,47 @@ bool K3Process::start(RunMode runmode, C
 	   if (geteuid() != getuid())
 	       _exit(1);
         }
 
         setupEnvironment();
 
         if (runmode == DontCare || runmode == OwnGroup)
           setsid();
-
+/*
         const char *executable = arglist[0];
         if (!d->executable.isEmpty())
            executable = d->executable.data();
-
-        for(;;) {
-            sleep(1);
-        }
-        // We don't want to execute anything.
+*/
         //execvp(executable, arglist);
 
-        char resultByte = 1;
-        ssize_t result = write(fd[1], &resultByte, 1);
-	if (result<0) {
-	    qDebug() << "Write failed with the error code " << result << endl;
-	}
-        _exit(-1);
-  } else if (pid_ == -1) {
+        //char resultByte = 1;
+        //ssize_t result = write(fd[1], &resultByte, 1);
+        //if (result<0) {
+        //    qDebug() << "Write failed with the error code " << result << endl;
+        //}
+        //_exit(-1);
+  /*} else if (pid_ == -1) {
         // forking failed
 
         // commAbort();
         pid_ = 0;
         free(arglist);
         return false;
-  }
+  }*/
   // the parent continues here
-  free(arglist);
+  //free(arglist);
 
   if (!commSetupDoneP())
     qDebug() << "Could not finish comm setup in parent!" << endl;
 
-  return true;
+  // Check whether client could be started.
+  //close(fd[1]);
+
   /*
-  // Check whether client could be started.
-  close(fd[1]);
-
   for(;;)
   {
      char resultByte;
      int n = ::read(fd[0], &resultByte, 1);
      if (n == 1)
      {
          // exec() failed
          close(fd[0]);
@@ -391,26 +390,24 @@ bool K3Process::start(RunMode runmode, C
      if (n == -1)
      {
         if (errno == EINTR)
            continue; // Ignore
      }
      break; // success
   }
   close(fd[0]);
-
+*/
   runs = true;
-  for(;;) { sleep(1); }
-
+  return true;
   switch (runmode)
   {
   case Block:
     for (;;)
     {
-
       commClose(); // drain only, unless obsolete reimplementation
       if (!runs)
       {
         // commClose detected data on the process exit notifification pipe
         K3ProcessController::instance()->unscheduleCheck();
         if (waitpid(pid_, &status, WNOHANG) != 0) // error finishes, too
         {
           commClose(); // this time for real (runs is false)
@@ -433,17 +430,17 @@ bool K3Process::start(RunMode runmode, C
     // after the process has successfully run _asynchronously_ --ossi
     emit processExited(this);
     break;
   default: // NotifyOnExit & OwnGroup
     input_data = 0; // Discard any data for stdin that might still be there
     break;
   }
 
-  return true;*/
+  return true;
 }
 
 
 
 bool K3Process::kill(int signo)
 {
   if (runs && pid_ > 0 && !::kill(run_mode == OwnGroup ? -pid_ : pid_, signo))
     return true;
@@ -924,16 +921,17 @@ int K3Process::commSetupDoneP()
   return 1;
 }
 
 
 
 int K3Process::commSetupDoneC()
 {
   int ok = 1;
+
   if (d->usePty & Stdin) {
     if (dup2(d->pty->slaveFd(), STDIN_FILENO) < 0) ok = 0;
   } else if (communication & Stdin) {
     if (dup2(in[0], STDIN_FILENO) < 0) ok = 0;
   } else {
     int null_fd = open( "/dev/null", O_RDONLY );
     if (dup2( null_fd, STDIN_FILENO ) < 0) ok = 0;
     close( null_fd );
