# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1449180168 -3600
#      Thu Dec 03 23:02:48 2015 +0100
# Node ID f7b0572fff6e5e555a3ecea2ee5c9bf8b6798910
# Parent  d0991cbd61416a141d59fe410ba74e459e767a0f
allow to select an encoding when opening a file

* file-editor-tab.cc (set_encoding): new slot for changing the encoding;

* file-editor-tab.h: new slot for changing the encoding;

* file-editor.cc (file_editor): initialize new class variable for the encoding;
  (request_open_file): add a combo box for the encoding to the open dialog;
  (handle_combo_enc_current_index): new slot for storing selected encoding;
  (request_open_files): reset class variable for encoding after loading files;
  (request_open_file (QString)): set encoding before loading the file;

* file-editor.h: new slot for storing selected encoding,
  new class variable for storing a selected encoding

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -207,16 +207,28 @@ file_editor_tab::~file_editor_tab (void)
       _find_dialog = 0;
     }
 
   // Destroy _edit_area.
   delete _edit_area;
 }
 
 void
+file_editor_tab::set_encoding (const QString& new_encoding)
+{
+  if (new_encoding.isEmpty ())
+    return;
+
+  _encoding = new_encoding;
+  _enc_indicator->setText (_encoding);
+  if (! _edit_area->text ().isEmpty ())
+    set_modified (true);
+}
+
+void
 file_editor_tab::closeEvent (QCloseEvent *e)
 {
   _cancelled = false;  // prevent unwanted interaction of previous
                        // exits of octave which were canceled by the user
 
   if (check_file_modified () == QMessageBox::Cancel)
     { // ignore close event if file is not saved and user cancels
       // closing this window
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -115,17 +115,20 @@ public slots:
 
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
   void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
 
+  void set_encoding (const QString& new_encoding);
+
   QString load_file (const QString& fileName);
+
   void new_file (const QString& commands = QString ());
 
   void file_has_changed (const QString& fileName);
 
   void handle_context_menu_edit (const QString&);
 
 signals:
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -52,18 +52,19 @@ file_editor::file_editor (QWidget *p)
 {
   // Set current editing directory before construct because loaded
   // files will change ced accordingly.
   ced = QDir::currentPath ();
 
   construct ();
 
   setVisible (false);
+  setAcceptDrops(true);
 
-  setAcceptDrops(true);
+  _file_encoding = QString ();  // for selecting an encoding in open dialog
 }
 
 file_editor::~file_editor (void)
 {
   if (_mru_file_menu)
     delete _mru_file_menu;
 }
 
@@ -225,29 +226,62 @@ file_editor::request_open_file (void)
   QFileDialog *fileDialog = new QFileDialog (this);
   fileDialog->setNameFilter (tr ("Octave Files (*.m);;All Files (*)"));
 
   // Giving trouble under KDE (problem is related to Qt signal handling on unix,
   // see https://bugs.kde.org/show_bug.cgi?id=260719 ,
   // it had/has no effect on Windows, though)
   fileDialog->setOption(QFileDialog::DontUseNativeDialog, true);
 
+  // define a new grid layout with the extra elements
+  QGridLayout *extra = new QGridLayout (fileDialog);
+  QFrame *separator = new QFrame (fileDialog);
+  separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
+  separator->setFrameStyle (QFrame::Sunken);
+
+  // combo box for encoding
+  QLabel *label_enc = new QLabel (tr ("File Encoding:"));
+  QComboBox *combo_enc = new QComboBox ();
+  resource_manager::combo_encoding (combo_enc);
+
+  // track changes in the combo boxes
+  connect (combo_enc, SIGNAL (currentIndexChanged (QString)),
+           this, SLOT (handle_combo_enc_current_index (QString)));
+
+  // build the extra grid layout
+  extra->addWidget (separator,0,0,1,3);
+  extra->addWidget (label_enc,1,0);
+  extra->addWidget (combo_enc,1,1);
+  extra->addItem   (new QSpacerItem (1,20,QSizePolicy::Expanding,
+                                          QSizePolicy::Fixed), 1,2);
+
+  // and add the extra grid layout to the dialog's layout
+  QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (fileDialog->layout ());
+  dialog_layout->addLayout (extra,dialog_layout->rowCount (),0,
+                                  1,dialog_layout->columnCount ());
+
   fileDialog->setAcceptMode (QFileDialog::AcceptOpen);
   fileDialog->setViewMode (QFileDialog::Detail);
   fileDialog->setFileMode (QFileDialog::ExistingFiles);
   fileDialog->setDirectory (ced);
 
   connect (fileDialog, SIGNAL (filesSelected (const QStringList&)),
            this, SLOT (request_open_files (const QStringList&)));
 
   fileDialog->setWindowModality (Qt::NonModal);
   fileDialog->setAttribute (Qt::WA_DeleteOnClose);
   fileDialog->show ();
 }
 
+void
+file_editor::handle_combo_enc_current_index (QString new_encoding)
+{
+  _file_encoding = new_encoding;
+}
+
 // Check whether this file is already open in the editor.
 QWidget *
 file_editor::find_tab_widget (const QString& file) const
 {
   QWidget *retval = 0;
 
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
@@ -316,21 +350,25 @@ file_editor::is_editor_console_tabbed ()
     {
       if (w_list.at (i) == console)
         return true;
     }
 
   return false;
 }
 
+// The following slot is called after files have been selected in the
+// open file dialog, possibly with a new selected encoding. After loading
+// all files, _file_encoding is reset.
 void
 file_editor::request_open_files (const QStringList& open_file_names)
 {
   for (int i = 0; i < open_file_names.count (); i++)
     request_open_file (open_file_names.at (i));
+  _file_encoding = QString ();  // reset: no special encoding
 }
 
 void
 file_editor::request_open_file (const QString& openFileName, int line,
                                 bool debug_pointer,
                                 bool breakpoint_marker, bool insert)
 {
   if (call_custom_editor (openFileName, line))
@@ -372,16 +410,17 @@ file_editor::request_open_file (const QS
               focus ();
             }
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
             {
+              fileEditorTab->set_encoding (_file_encoding);
               QString result = fileEditorTab->load_file (openFileName);
               if (result == "")
                 {
                   // Supply empty title then have the file_editor_tab update
                   // with full or short name.
                   add_file_editor_tab (fileEditorTab, "");
                   fileEditorTab->update_window_title (false);
                   // file already loaded, add file to mru list here
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -231,16 +231,18 @@ private slots:
   void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
   void request_styles_preferences (bool);
   void restore_create_file_setting ();
 
+  void handle_combo_enc_current_index (QString new_encoding);
+
   void show_line_numbers (bool);
   void show_white_space (bool);
   void show_eol_chars (bool);
   void show_indent_guides (bool);
   void show_long_line (bool);
   void zoom_in (bool);
   void zoom_out (bool);
   void zoom_normal (bool);
@@ -372,15 +374,17 @@ private:
   QMenu *_edit_nav_menu;
   QMenu *_fileMenu;
   QMenu *_view_editor_menu;
 
   tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
+  QString _file_encoding;
+
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
