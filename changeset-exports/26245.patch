# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1544955600 -3600
#      Sun Dec 16 11:20:00 2018 +0100
# Node ID af99ea9c325f0e281af70bd5a15d69496d4153a3
# Parent  58b3107a00bc82879c23e6ed568fed8ec4556213
Doc browser: go to search text when clicking a search result (bug #55228)

* documentation.cc (documentation): Initialize new class variable, connect
  requestShowLink signal from result widget to new slot
  handle_search_result_clicked;
  (global_search): save the search string of global search in class variable;
  (handle_search_result_clicked): new slot opening the search link, highlight
  all occurrences of the search text and go to the first occurrence;
  (select_all_occurrences): new private method for highlighting all occurrences
  of a specific string

* documentation.h: new slot handle_search_result_clicked
  new method select_all_occurrences,
  new class variable m_query_string

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -53,16 +53,17 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   // The documentation splitter, which is the main widget
   // of the doc dock widget
   documentation::documentation (QWidget *p)
     : QSplitter (Qt::Horizontal, p),
       m_doc_widget (p),
       m_tool_bar (new QToolBar (p)),
+      m_query_string (QString ()),
       m_prev_pages_menu (new QMenu (p)),
       m_next_pages_menu (new QMenu (p)),
       m_prev_pages_count (0),
       m_next_pages_count (0),
       m_findnext_shortcut (new QShortcut (p)),
       m_findprev_shortcut (new QShortcut (p))
   {
     // Get original collection
@@ -241,18 +242,18 @@ namespace octave
 
     connect (search_engine, SIGNAL (searchingStarted (void)),
              this, SLOT(global_search_started (void)));
     connect (search_engine, SIGNAL (searchingFinished (int)),
              this, SLOT(global_search_finished (int)));
 
     connect (search_engine->resultWidget (),
              SIGNAL (requestShowLink (const QUrl&)),
-             m_doc_browser,
-             SLOT(handle_index_clicked (const QUrl&)));
+             this,
+             SLOT(handle_search_result_clicked (const QUrl&)));
 
     // Fill the splitter
     insertWidget (0, navi);
     insertWidget (1, browser_find);
     setStretchFactor (1, 1);
 
     // Initial view: Contents
     m_doc_browser->setSource (QUrl (
@@ -385,21 +386,27 @@ namespace octave
                                    m_doc_browser, m_tool_bar);
   }
 
   void documentation::global_search (void)
   {
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
     QString queries
       = m_help_engine->searchEngine ()->queryWidget ()->searchInput ();
+    m_query_string = queries.split (" ").first ();
 #else
     QList<QHelpSearchQuery> queries
       = m_help_engine->searchEngine ()->queryWidget ()->query ();
+    if (queries.count ())
+      m_query_string = queries.first ().wordList ().first ();
+    else
+      m_query_string = "";
 #endif
 
+
     m_help_engine->searchEngine ()->search (queries);
   }
 
   void documentation::global_search_started (void)
   {
     qApp->setOverrideCursor(QCursor(Qt::WaitCursor));
   }
 
@@ -467,16 +474,59 @@ namespace octave
            }
 
         m_internal_search = QString ();
       }
 
     qApp->restoreOverrideCursor();
   }
 
+  void documentation::handle_search_result_clicked (const QUrl& url)
+  {
+    // Open url with matching text
+    m_doc_browser->handle_index_clicked (url);
+
+    // Select all occurrences of matching text
+    select_all_occurrences (m_query_string);
+
+    // Open search widget with matching text as search string
+    m_find_line_edit->setText (m_query_string);
+    m_find_line_edit->parentWidget ()->show ();
+
+    find_forward ();
+  }
+
+  void documentation::select_all_occurrences (const QString& text)
+  {
+    // Get highlight background and text color
+    QPalette pal = QApplication::palette ();
+    QTextCharFormat format;
+    QColor col = pal.color (QPalette::Highlight);
+    col.setAlphaF (0.25);
+    format.setBackground (QBrush (col));
+    format.setForeground (QBrush (pal.color (QPalette::Text)));
+
+    // Create list for extra selected items
+    QList<QTextEdit::ExtraSelection> selected;
+    m_doc_browser->moveCursor (QTextCursor::Start);
+
+    // Find all occurrences and add them to the selection
+    while ( m_doc_browser->find (text) )
+      {
+        QTextEdit::ExtraSelection selected_item;
+        selected_item.cursor = m_doc_browser->textCursor ();
+        selected_item.format = format;
+        selected.append (selected_item);
+      }
+
+      // Apply selection and move back to the beginning
+      m_doc_browser->setExtraSelections (selected);
+      m_doc_browser->moveCursor (QTextCursor::Start);
+  }
+
   void documentation::notice_settings (const QSettings *settings)
   {
     // Icon size in the toolbar.
     int size_idx = settings->value (global_icon_size.key,
                                     global_icon_size.def).toInt ();
     size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
 
     QStyle *st = style ();
diff --git a/libgui/src/documentation.h b/libgui/src/documentation.h
--- a/libgui/src/documentation.h
+++ b/libgui/src/documentation.h
@@ -115,43 +115,47 @@ namespace octave
     void global_search_finished (int hits);
     void filter_update (const QString& expression);
     void filter_update_history (void);
     void find_forward (void);
     void find_backward (void);
     void find_forward_from_anchor (const QString& text);
     void record_anchor_position (void);
     void handle_cursor_position_change (void);
+    void handle_search_result_clicked (const QUrl& url);
 
     void update_history_menus (void);
     void open_hist_url (QAction *a);
 
   signals:
 
     void show_single_result (const QUrl);
 
   private:
 
     void construct_tool_bar (void);
     QAction *add_action (const QIcon& icon, const QString& text,
                          const char *member, QWidget *receiver = nullptr,
                          QToolBar *tool_bar = nullptr);
     void update_history (int new_count, QAction **actions);
 
+    //! Select all occurrences of a string in the doc browser
+    void select_all_occurrences (const QString& text);
 
     QHelpEngine *m_help_engine;
     QString m_internal_search;
     documentation_browser *m_doc_browser;
     QLineEdit *m_find_line_edit;
     int m_search_anchor_position;
     QComboBox *m_filter;
     QString m_collection;
 
     QWidget *m_doc_widget;
     QToolBar *m_tool_bar;
+    QString m_query_string;
 
     QAction *m_action_go_home;
     QAction *m_action_go_prev;
     QAction *m_action_go_next;
     QMenu *m_prev_pages_menu;
     QMenu *m_next_pages_menu;
     int m_prev_pages_count;
     int m_next_pages_count;
