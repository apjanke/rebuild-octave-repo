# HG changeset patch
# User Rik <rik@octave.org>
# Date 1517448245 28800
#      Wed Jan 31 17:24:05 2018 -0800
# Node ID 276eca875721b5b4ae0079952c5ca24adde7ac22
# Parent  02989d7d68dc20d07c7cd5e5bf866af29c03dad1
Clear environment variables affecting tmpdir before running BIST tests (bug #52627)

* file-io.cc (Ftempname), unpack.m: Save, clear, and restore environment
variables TMPDIR and TMP when running BIST tests.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2810,29 +2810,27 @@ see @code{tmpfile}.
   if (nargin > 1)
     pfx = args(1).xstring_value ("tempname: PREFIX must be a string");
 
   return ovl (octave::sys::tempnam (dir, pfx));
 }
 
 /*
 %!test
-%! if (ispc ())
-%!   envname = "TMP";
-%! else
+%! envvar = {"TMPDIR", "TMP"};
+%! envdir = cellfun (@(x) getenv (x), envvar, "uniformoutput", false);
+%! unwind_protect
+%!   cellfun (@(x) unsetenv (x), envvar);
 %!   envname = "TMPDIR";
-%! endif
-%! envdir = getenv (envname);
-%! unsetenv (envname);
-%! ## Strip trailing file separators from P_tmpdir
-%! def_tmpdir = P_tmpdir;
-%! while (length (def_tmpdir) > 2 && strfind (filesep ("all"), def_tmpdir(end)))
-%!   def_tmpdir(end) = [];
-%! endwhile
-%! unwind_protect
+%!   def_tmpdir = P_tmpdir;
+%!   ## Strip trailing file separators from P_tmpdir
+%!   while (length (def_tmpdir) > 2 && any (def_tmpdir(end) == filesep ("all")))
+%!     def_tmpdir(end) = [];
+%!   endwhile
+%!
 %!   ## Test 0-argument form
 %!   fname = tempname ();
 %!   [tmpdir, tmpfname] = fileparts (fname);
 %!   assert (tmpdir, def_tmpdir);
 %!   assert (tmpfname (1:4), "oct-");
 %!   ## Test 1-argument form
 %!   tmp_tmpdir = [def_tmpdir filesep() substr(tmpfname, -5)];
 %!   mkdir (tmp_tmpdir) || error ("Unable to create tmp dir");
@@ -2853,21 +2851,23 @@ see @code{tmpfile}.
 %!   assert (tmpfname (1:4), "pfx-");
 %!   ## Test 2-argument form w/null prefix
 %!   fname = tempname (tmp_tmpdir, "");
 %!   [tmpdir, tmpfname] = fileparts (fname);
 %!   assert (tmpdir, tmp_tmpdir);
 %!   assert (tmpfname (1:4), "file");
 %! unwind_protect_cleanup
 %!   rmdir (tmp_tmpdir);
-%!   if (isempty (envdir))
-%!     unsetenv (envname);
-%!   else
-%!     setenv (envname, envdir);
-%!   endif
+%!   for i = 1:numel (envvar)
+%!     if (isempty (envdir{i}))
+%!       unsetenv (envvar{i});
+%!     else
+%!       setenv (envvar{i}, envdir{i});
+%!     endif
+%!   endfor
 %! end_unwind_protect
 */
 
 DEFMETHOD (tmpfile, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{fid}, @var{msg}] =} tmpfile ()
 Return the file ID corresponding to a new temporary file with a unique
 name.
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -306,47 +306,62 @@ function files = __parse_bzip2__ (output
   ## compressed (or decompressed).
 
   ## Strip leading blanks and .bz2 extension from filename
   files = regexprep (output, '^\s+(.*)\.bz2: .*', '$1');
 endfunction
 
 
 %!testif HAVE_ZLIB
-%! ## Create temporary directory and file for packing and unpacking
-%! dirname = tempname ();
-%! assert (mkdir (dirname));
-%! filename = tempname ();
-%! fid = fopen (filename, "wt");
-%! assert (fid >= 0);
-%! fprintf (fid, "Hello World\n");
-%! fprintf (fid, "123 456 789\n");
-%! fclose (fid);
+%! envvar = {"TMPDIR", "TMP"};
+%! envdir = cellfun (@(x) getenv (x), envvar, "uniformoutput", false);
 %! unwind_protect
-%!   copyfile (filename, [filename ".orig"]);
-%!   gzip (filename, dirname);
-%!   [~, f] = fileparts (filename);
-%!   filelist = unpack (fullfile (dirname, [f ".gz"]), tempdir);
-%!   assert (filelist{1}, filename);
-%!   fid = fopen ([filename ".orig"], "rb");
-%!   assert (fid >= 0);
-%!   orig_data = fread (fid);
-%!   fclose (fid);
-%!   fid = fopen (filename, "rb");
+%!   cellfun (@(x) unsetenv (x), envvar);
+%!   ## Create temporary directory and file for packing and unpacking
+%!   dirname = tempname ();
+%!   assert (mkdir (dirname));
+%!   filename = tempname ();
+%!   fid = fopen (filename, "wt");
 %!   assert (fid >= 0);
-%!   new_data = fread (fid);
+%!   fprintf (fid, "Hello World\n");
+%!   fprintf (fid, "123 456 789\n");
 %!   fclose (fid);
-%!   if (orig_data != new_data)
-%!     error ("unpack: Unpacked file does not equal original");
-%!   endif
+%!
+%!   unwind_protect
+%!     copyfile (filename, [filename ".orig"]);
+%!     gzip (filename, dirname);
+%!     [~, f] = fileparts (filename);
+%!     filelist = unpack (fullfile (dirname, [f ".gz"]), tempdir);
+%!     assert (filelist{1}, filename);
+%!     fid = fopen ([filename ".orig"], "rb");
+%!     assert (fid >= 0);
+%!     orig_data = fread (fid);
+%!     fclose (fid);
+%!     fid = fopen (filename, "rb");
+%!     assert (fid >= 0);
+%!     new_data = fread (fid);
+%!     fclose (fid);
+%!     if (orig_data != new_data)
+%!       error ("unpack: Unpacked file does not equal original");
+%!     endif
+%!   unwind_protect_cleanup
+%!     unlink (filename);
+%!     unlink ([filename ".orig"]);
+%!     confirm_recursive_rmdir (false, "local");
+%!     rmdir (dirname, "s");
+%!   end_unwind_protect
 %! unwind_protect_cleanup
-%!   unlink (filename);
-%!   unlink ([filename ".orig"]);
-%!   confirm_recursive_rmdir (false, "local");
-%!   rmdir (dirname, "s");
+%!   ## Restore environment variables TMPDIR, TMP
+%!   for i = 1:numel (envvar)
+%!     if (isempty (envdir{i}))
+%!       unsetenv (envvar{i});
+%!     else
+%!       setenv (envvar{i}, envdir{i});
+%!     endif
+%!   endfor
 %! end_unwind_protect
 
 ## Test input validation
 %!error unpack ()
 %!error unpack (1,2,3,4)
 %!error <FILE must be a string or cell array of strings> unpack (1)
 %!error <FILE "_%NOT_A_FILENAME%_" not found> unpack ("_%NOT_A_FILENAME%_")
 %!error <FILE "_%NOT_A_FILENAME%_" not found> unpack ({"_%NOT_A_FILENAME%_"})
