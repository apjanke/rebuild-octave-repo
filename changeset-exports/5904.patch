# HG changeset patch
# User jwe
# Date 1153934350 0
#      Wed Jul 26 17:19:10 2006 +0000
# Node ID 80d3933fb8b63aa4cd670e4cb95ecf0e96fc1032
# Parent  11bb9bf343a05658607fafdb763c375544519709
[project @ 2006-07-26 17:19:10 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2006-07-26  John W. Eaton  <jwe@octave.org>
+
+	* mkoctfile.in (Options): Accept -g.
+
+	* configure.in: Check for exp2 and log2.
+
 2006-07-25  David Bateman  <dbateman@free.fr>
 
 	* mysparse.c: New file.
 
 2006-06-27  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (maintainer-clean distclean): Remove
 	$(SHELL_SCRIPTS) instead of naming files individually.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.515 $)
+AC_REVISION($Revision: 1.516 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1407,17 +1407,17 @@ case "$canonical_host_type" in
   *)
     AC_CHECK_FUNCS(finite isnan isinf copysign signbit)
     AC_CHECK_DECLS(signbit, , , [#include <math.h>])
   ;;
 esac
 
 ### Check for nonstandard but common math functions that we need.
 
-AC_CHECK_FUNCS(acosh asinh atanh erf erfc)
+AC_CHECK_FUNCS(acosh asinh atanh erf erfc, exp2, log2)
 
 ### Checks for OS specific cruft.
 
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
 
 AC_STRUCT_TM
 AC_STRUCT_TIMEZONE
 AC_FUNC_CLOSEDIR_VOID
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2006-07-26  John W. Eaton  <jwe@octave.org>
+
+	* dbleDET.cc (DET::initialize10, DET::value_will_underflow,
+	DET::value_will_overflow): Use xlog2 instead of log2.
+	(DET::initialize2, DET::initialize10): Use xround instead of round.
+	(DET::initialize2, DET::value): Use xexp2 instead of exp2.
+	* CmplxDET.cc (ComplexDET::initialize10,
+	ComplexDET::value_will_underflow,
+	ComplexDET::value_will_overflow): Use xlog2 instead of log2.
+	(ComplexDET::initialize2, ComplexDET::initialize10):
+	Use xround instead of round.
+	(ComplexDET::initialize2, ComplexDET::value):
+	Use xexp2 instead of exp2.
+
+	* lo-mappers.cc (M_LOG10E): Delete unused macro.
+	(xlog2, xexp2): New functions.
+	* lo-mappers.h: Provide decls.
+
 2006-07-22  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.h (Sparse<T>::mex_get_data, Sparse<T>::mex_get_ir,
 	Sparse<T>::mex_get_jc): New functions.
 
 2006-07-21  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int<T>::mex_get_data): New function.
diff --git a/liboctave/CmplxDET.cc b/liboctave/CmplxDET.cc
--- a/liboctave/CmplxDET.cc
+++ b/liboctave/CmplxDET.cc
@@ -32,55 +32,55 @@ 02110-1301, USA.
 #include "CmplxDET.h"
 #include "lo-mappers.h"
 #include "oct-cmplx.h"
 
 bool
 ComplexDET::value_will_overflow (void) const
 {
   return base2
-    ? (e2 + 1 > log2 (DBL_MAX) ? 1 : 0)
+    ? (e2 + 1 > xlog2 (DBL_MAX) ? 1 : 0)
     : (e10 + 1 > log10 (DBL_MAX) ? 1 : 0);
 }
 
 bool
 ComplexDET::value_will_underflow (void) const
 {
   return base2
-    ? (e2 - 1 < log2 (DBL_MIN) ? 1 : 0)
+    ? (e2 - 1 < xlog2 (DBL_MIN) ? 1 : 0)
     : (e10 - 1 < log10 (DBL_MIN) ? 1 : 0);
 }
 
 void
 ComplexDET::initialize10 (void)
 {
   if (c2 != 0.0)
     {
-      double etmp = e2 / log2 (10);
-      e10 = static_cast<int> (round (etmp));
+      double etmp = e2 / xlog2 (10);
+      e10 = static_cast<int> (xround (etmp));
       etmp -= e10;
       c10 = c2 * pow (10.0, etmp);
     }
 }
 
 void
 ComplexDET::initialize2 (void)
 {
   if (c10 != 0.0)
     {
       double etmp = e10 / log10 (2);
-      e2 = static_cast<int> (round (etmp));
+      e2 = static_cast<int> (xround (etmp));
       etmp -= e2;
-      c2 = c10 * exp2 (etmp);
+      c2 = c10 * xexp2 (etmp);
     }
 }
 
 Complex
 ComplexDET::value (void) const
 {
-  return base2 ? c2 * exp2 (e2) : c10 * pow (10.0, e10);
+  return base2 ? c2 * xexp2 (e2) : c10 * pow (10.0, e10);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleDET.cc b/liboctave/dbleDET.cc
--- a/liboctave/dbleDET.cc
+++ b/liboctave/dbleDET.cc
@@ -24,60 +24,61 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
 #include "dbleDET.h"
+#include "lo-mappers.h"
 
 bool
 DET::value_will_overflow (void) const
 {
   return base2
-    ? (e2 + 1 > log2 (DBL_MAX) ? 1 : 0)
+    ? (e2 + 1 > xlog2 (DBL_MAX) ? 1 : 0)
     : (e10 + 1 > log10 (DBL_MAX) ? 1 : 0);
 }
 
 bool
 DET::value_will_underflow (void) const
 {
   return base2
-    ? (e2 - 1 < log2 (DBL_MIN) ? 1 : 0)
+    ? (e2 - 1 < xlog2 (DBL_MIN) ? 1 : 0)
     : (e10 - 1 < log10 (DBL_MIN) ? 1 : 0);
 }
 
 void
 DET::initialize10 (void)
 {
   if (c2 != 0.0)
     {
-      double etmp = e2 / log2 (10);
-      e10 = static_cast<int> (round (etmp));
+      double etmp = e2 / xlog2 (10);
+      e10 = static_cast<int> (xround (etmp));
       etmp -= e10;
       c10 = c2 * pow (10.0, etmp);
     }
 }
 
 void
 DET::initialize2 (void)
 {
   if (c10 != 0.0)
     {
       double etmp = e10 / log10 (2);
-      e2 = static_cast<int> (round (etmp));
+      e2 = static_cast<int> (xround (etmp));
       etmp -= e2;
-      c2 = c10 * exp2 (etmp);
+      c2 = c10 * xexp2 (etmp);
     }
 }
 
 double
 DET::value (void) const
 {
-  return base2 ? c2 * exp2 (e2) : c10 * pow (10.0, e10);
+  return base2 ? c2 * xexp2 (e2) : c10 * pow (10.0, e10);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -36,20 +36,16 @@ 02110-1301, USA.
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-specfun.h"
 #include "lo-utils.h"
 #include "oct-cmplx.h"
 
 #include "f77-fcn.h"
 
-#ifndef M_LOG10E
-#define M_LOG10E 0.43429448190325182765
-#endif
-
 // double -> double mappers.
 
 double
 arg (double x)
 {
   return atan2 (0.0, x);
 }
 
@@ -95,16 +91,48 @@ signum (double x)
   if (x < 0.0)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
   return xisnan (x) ? octave_NaN : tmp;
 }
 
+double
+xlog2 (double x)
+{
+#if defined (HAVE_LOG2)
+  return log2 (x);
+#else
+#if defined (M_LN2)
+  static double ln2 = M_LN2;
+#else
+  static double ln2 = log2 (2);
+#endif
+
+  return log (x) / ln2;
+#endif
+}
+
+double
+xexp2 (double x)
+{
+#if defined (HAVE_EXP2)
+  return exp2 (x);
+#else
+#if defined (M_LN2)
+  static double ln2 = M_LN2;
+#else
+  static double ln2 = log2 (2);
+#endif
+
+  return exp (x * ln2);
+#endif
+}
+
 // double -> bool mappers.
 
 bool
 xisnan (double x)
 {
   return lo_ieee_isnan (x);
 }
 
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -28,16 +28,18 @@ 02110-1301, USA.
 
 extern double arg (double x);
 extern double conj (double x);
 extern double fix (double x);
 extern double imag (double x);
 extern double real (double x);
 extern double xround (double x);
 extern double signum (double x);
+extern double xlog2 (double x); 
+extern double xexp2 (double x);
 
 extern bool xisnan (double x);
 extern bool xfinite (double x);
 extern bool xisinf (double x);
 
 extern bool octave_is_NA (double x);
 extern bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
 
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -149,16 +149,18 @@ Options:
   -W                      Pass flags though the compiler like -Wl,-rpath=...
 
   -c, --compile           Compile, but do not link.
 
   -o FILE, --output FILE  Output file name.  Default extension is .oct
                           (or .mex if --mex is specified) unless linking
                           a stand-alone executable.
 
+  -g                      Enable debugging options for compilers.
+
   -p VAR, --print VAR     Print configuration variable VAR.  Recognized
                           variables are:
 
 			    ALL_CFLAGS                FFTW_LIBS     
 			    ALL_CXXFLAGS              FLIBS       
 			    ALL_FFLAGS                FPICFLAG      
 			    ALL_LDFLAGS               INCFLAGS      
 			    BLAS_LIBS                 LDFLAGS             
@@ -244,16 +246,21 @@ EOF
         echo "mkoctfile: stripping disabled on this platform" 1>&2
       else
         strip=true
       fi
     ;;
     -c | --compile)
       link=false
     ;;
+    -g)
+      ALL_CFLAGS="$ALL_CFLAGS -g"
+      ALL_CXXFLAGS="$ALL_CXXFLAGS -g"
+      ALL_FFLAGS="$ALL_FFLAGS -g"
+    ;;
     --link-stand-alone)
       link_stand_alone=true
     ;;
     --mex)
       output_ext=".mex"
     ;;
     -W*)
       pass_on_options="$pass_on_options $1"
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-07-26  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/mex.m: New function.
+
 2006-07-22  John W. Eaton  <jwe@octave.org>
 
 	* special-matrix/hadamard.m: Coerce bool matrix to double.
 
 2006-07-07  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/orderfields.m: New file.
 
diff --git a/scripts/miscellaneous/mex.m b/scripts/miscellaneous/mex.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/mex.m
@@ -0,0 +1,32 @@
+## Copyright (C) 2006 David Bateman
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} mex [options] file ...
+## Compile source code written in C, C++, or Fortran, to a MEX file.
+## This is equivalent to @code {mkoctfile --mex [options] file}.
+## @seealso{mkoctfile}
+## @end deftypefn
+
+## PKG_ADD: mark_as_command mex
+
+function mex (varargin)
+  args = {"--mex", varargin{:}};
+  mkoctfile (args{:});
+endfunction
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -45,18 +45,23 @@
 ## Add the library directory DIR to the link command.
 ##
 ## @item -M|--depend 
 ## Generate dependency files (.d) for C and C++ source files.
 ##          
 ## @item -c
 ## Compile but do not link.
 ##
-## @item -o FILE|--output FILE
-## Output file name; by default extension is .oct.
+## @item -g
+## Enable debugging options for compilers.
+##
+## @item -o FILE|--output FILE  
+## Output file name.  Default extension is .oct
+## (or .mex if --mex is specified) unless linking
+## a stand-alone executable.
 ##
 ## @item -p VAR|--print VAR
 ## Print the configuration variable VAR.  Recognized variables are: 
 ##
 ## @example             
 ##    ALL_CFLAGS                FFTW_LIBS     
 ##    ALL_CXXFLAGS              FLIBS       
 ##    ALL_FFLAGS                FPICFLAG      
@@ -77,16 +82,20 @@
 ##    F2CFLAGS                  XTRA_CFLAGS   
 ##    F77                       XTRA_CXXFLAGS 
 ##    FFLAGS
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
+## @item --mex
+## Assume we are creating a MEX file.  Set the default output extension 
+## to ".mex".
+##
 ## @item -s|--strip
 ## Strip the output file.
 ##
 ## @item -v|--verbose
 ## Echo commands as they are executed.
 ##
 ## @item file
 ## The file to compile or link. Recognised file types are
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-07-26  John W. Eaton  <jwe@octave.org>
+
+	* octave.cc (maximum_braindamage): Use disable_warning instead of
+	bind_internal_variable to disable function-name-clash warning.
+	* error.cc (disable_warning): No longer static.
+	* error.h: Provide decl.
+
 2006-07-25  David Bateman  <dbateman@free.fr>
 
 	* mex.cc (mxArray_octave_value::get_class_id): Handle sparse.
 	(class mxArray_sparse): Derive from mxArray_matlab, not
 	mxArray_number.
 	(mxArray_sparse::as_octave_value): Implement function.
 	* ov-bool-sparse.cc (octave_sparse_bool_matrix::as_mxArray):
 	Implement function.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -1071,17 +1071,17 @@ warning named by @var{id} is handled as 
 
       if (nargout > 0)
 	retval = prev_msg;
     }
 
   return retval;
 }
 
-static void
+void
 disable_warning (const std::string& id)
 {
   octave_value_list args;
 
   args(1) = id;
   args(0) = "off";
 
   Fwarning (args, 0);
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -55,16 +55,17 @@ error_with_id (const char *id, const cha
 extern void
 parse_error_with_id (const char *id, const char *fmt, ...);
 
 extern void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Helper function for print_usage defined in defun.cc.
 extern void defun_usage_message (const std::string& msg);
 
+extern void disable_warning (const std::string& id);
 extern void initialize_default_warning_state (void);
 
 // Current error state.
 extern int error_state;
 
 // Current warning state.
 extern int warning_state;
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -487,17 +487,18 @@ maximum_braindamage (void)
   bind_internal_variable ("beep_on_error", true);
   bind_internal_variable ("crash_dumps_octave_core", false);
   bind_internal_variable ("default_save_options", "-mat-binary");
   bind_internal_variable ("fixed_point_format", true);
   bind_internal_variable ("history_timestamp_format_string",
 			 "%%-- %D %I:%M %p --%%");
   bind_internal_variable ("page_screen_output", false);
   bind_internal_variable ("print_empty_dimensions", false);
-  bind_internal_variable ("warn_function_name_clash", false);
+
+  disable_warning ("Octave:function-name-clash");
 }
 
 // You guessed it.
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_env::set_program_name (argv[0]);
