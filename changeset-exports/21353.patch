# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456434904 18000
#      Thu Feb 25 16:15:04 2016 -0500
# Node ID e4fc19d8c6c397b7bdbb86d29dcb51c1b4eb9ddc
# Parent  043ec02115b83d8c05b32a2c1b43007c7a3fdb51
remove HAVE_OPENGL from public header file

* gl-render.h: Don't check HAVE_OPENGL here.
* gl-render.cc (opengl_renderer::opengl_renderer): Throw error if
OpenGL is not available or if the GLsizei is not what we expect.
Surround OpenGL-specific code in individual functions with
preprocessor conditional.

* gl-render.h, gl-render.cc (opengel_renderer::draw_pixels):
Define individual functions for separate data types.
* gl2ps-print.cc (gl2ps_renderer::draw_pixels): Likewise.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -19,34 +19,34 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
 #endif
 
-#if defined (HAVE_OPENGL)
-
 #include <iostream>
 
 #ifdef HAVE_WINDOWS_H
 #  define WIN32_LEAN_AND_MEAN
 #  include <windows.h>
 #endif
 
 #include <lo-mappers.h>
 #include "oct-locbuf.h"
 #include "oct-refcount.h"
 
 #include "errwarn.h"
 #include "gl-render.h"
 #include "oct-opengl.h"
 #include "text-renderer.h"
 
+#if defined (HAVE_OPENGL)
+
 #define LIGHT_MODE GL_FRONT_AND_BACK
 
 // Use symbolic names for axes
 enum
 {
   X_AXIS,
   Y_AXIS,
   Z_AXIS
@@ -562,16 +562,52 @@ private:
   opengl_renderer *renderer;
   int color_mode;
   int light_mode;
   int index;
   bool first;
   std::list<vertex_data> tmp_vdata;
 };
 
+#else
+
+class
+opengl_renderer::patch_tesselator
+{
+  // Dummy class.
+};
+
+#endif
+
+opengl_renderer::opengl_renderer (void)
+  : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
+    zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
+    camera_pos (), camera_dir (), interpreter ("none"), txt_renderer ()
+{
+  // This constructor will fail if we don't have OpenGL or if the data
+  // types we assumed in our public interface aren't compatible with the
+  // OpenGL types.
+
+#if defined (HAVE_OPENGL)
+
+  // Ensure that we can't request an image larger than OpenGL can handle.
+  // FIXME: should we check signed vs. unsigned?
+
+  static bool ok = (sizeof (int) <= sizeof (GLsizei));
+
+  if (! ok)
+    error ("the size of GLsizei is smaller than the size of int");
+
+#else
+
+  err_disabled_feature ("opengl_renderer", "OpenGL");
+
+#endif
+}
+
 void
 opengl_renderer::draw (const graphics_object& go, bool toplevel)
 {
   if (! go.valid_object ())
     return;
 
   const base_properties& props = go.get_properties ();
 
@@ -638,16 +674,18 @@ opengl_renderer::draw_uipanel (const uip
   // Draw children
 
   draw (props.get_all_children (), false);
 }
 
 void
 opengl_renderer::init_gl_context (bool enhanced, const Matrix& c)
 {
+#if defined (HAVE_OPENGL)
+
   // Initialize OpenGL context
 
   glEnable (GL_DEPTH_TEST);
   glDepthFunc (GL_LEQUAL);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glAlphaFunc (GL_GREATER, 0.0f);
   glEnable (GL_NORMALIZE);
 
@@ -674,24 +712,33 @@ opengl_renderer::init_gl_context (bool e
 
   // Clear background
 
   if (c.numel () >= 3)
     {
       glClearColor (c(0), c(1), c(2), 1);
       glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::render_grid (const std::string& gridstyle,
                               const Matrix& ticks, double lim1, double lim2,
                               double p1, double p1N, double p2, double p2N,
                               int xyz, bool is_3D)
 {
+#if defined (HAVE_OPENGL)
+
   set_linestyle (gridstyle, true);
   glBegin (GL_LINES);
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
       if (lim1 <= val && val <= lim2)
         {
           if (xyz == X_AXIS)
@@ -720,26 +767,35 @@ opengl_renderer::render_grid (const std:
               glVertex3d (p1, p2, val);
               glVertex3d (p1, p2N, val);
               glVertex3d (p1, p2, val);
             }
         }
     }
   glEnd ();
   set_linestyle ("-", true);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::render_tickmarks (const Matrix& ticks,
                                    double lim1, double lim2,
                                    double p1, double p1N,
                                    double p2, double p2N,
                                    double dx, double dy, double dz,
                                    int xyz, bool mirror)
 {
+#if defined (HAVE_OPENGL)
+
   glBegin (GL_LINES);
 
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
 
       if (lim1 <= val && val <= lim2)
         {
@@ -772,26 +828,35 @@ opengl_renderer::render_tickmarks (const
                   glVertex3d (p1N, p2N, val);
                   glVertex3d (p1N-dx, p2N-dy, val);
                 }
             }
         }
     }
 
   glEnd ();
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::render_ticktexts (const Matrix& ticks,
                                    const string_vector& ticklabels,
                                    double lim1, double lim2,
                                    double p1, double p2,
                                    int xyz, int ha, int va,
                                    int& wmax, int& hmax)
 {
+#if defined (HAVE_OPENGL)
+
   int nticks  = ticks.numel ();
   int nlabels = ticklabels.numel ();
 
   if (nlabels == 0)
     return;
 
   for (int i = 0; i < nticks; i++)
     {
@@ -819,27 +884,45 @@ opengl_renderer::render_ticktexts (const
             {
               b = render_text (label, p1, p2, val, ha, va);
             }
 
           wmax = std::max (wmax, static_cast<int> (b(2)));
           hmax = std::max (hmax, static_cast<int> (b(3)));
         }
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::finish (void)
 {
+#if defined (HAVE_OPENGL)
+
   glFinish ();
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::setup_opengl_transformation (const axes::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   // setup OpenGL transformation
 
   Matrix x_zlim = props.get_transform_zlim ();
 
   xZ1 = x_zlim(0)-(x_zlim(1)-x_zlim(0))/2;
   xZ2 = x_zlim(1)+(x_zlim(1)-x_zlim(0))/2;
 
   Matrix x_mat1 = props.get_opengl_matrix_1 ();
@@ -863,21 +946,30 @@ opengl_renderer::setup_opengl_transforma
   glMultMatrixd (x_mat2.data ());
   glMatrixMode (GL_MODELVIEW);
 
   glClear (GL_DEPTH_BUFFER_BIT);
 
   // store axes transformation data
 
   xform = props.get_transform ();
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_axes_planes (const axes::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   Matrix axe_color = props.get_color_rgb ();
   if (axe_color.is_empty () || ! props.is_visible ())
     return;
 
   double xPlane = props.get_xPlane ();
   double yPlane = props.get_yPlane ();
   double zPlane = props.get_zPlane ();
   double xPlaneN = props.get_xPlaneN ();
@@ -910,21 +1002,30 @@ opengl_renderer::draw_axes_planes (const
   glVertex3d (xPlaneN, yPlaneN, zPlane);
   glVertex3d (xPlane, yPlaneN, zPlane);
   glVertex3d (xPlane, yPlane, zPlane);
   glVertex3d (xPlaneN, yPlane, zPlane);
 
   glEnd ();
 
   set_polygon_offset (false);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_axes_boxes (const axes::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   if (! props.is_visible ())
     return;
 
   bool xySym = props.get_xySym ();
   bool layer2Dtop = props.get_layer2Dtop ();
   bool is2d = props.get_is2D ();
   double xPlane = props.get_xPlane ();
   double yPlane = props.get_yPlane ();
@@ -1021,16 +1122,23 @@ opengl_renderer::draw_axes_boxes (const 
             }
 
           glVertex3d (xPlaneN, yPlaneN, zPlaneN);
           glVertex3d (xPlaneN, yPlaneN, zPlane);
         }
     }
 
   glEnd ();
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_axes_x_grid (const axes::properties& props)
 {
   int xstate = props.get_xstate ();
 
   if (props.is_visible () && xstate != AXE_DEPTH_DIR)
@@ -1386,16 +1494,18 @@ opengl_renderer::draw_axes_z_grid (const
     }
   else
     gh_manager::get_object (props.get_zlabel ()).set ("visible", "off");
 }
 
 void
 opengl_renderer::draw_axes_children (const axes::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   // Children
 
   Matrix children = props.get_all_children ();
   std::list<graphics_object> obj_list;
   std::list<graphics_object>::iterator it;
 
   // 1st pass: draw light objects
 
@@ -1448,21 +1558,30 @@ opengl_renderer::draw_axes_children (con
     }
 
   glEnable (GL_DEPTH_TEST);
 
   set_clipping (false);
 
   // FIXME: finalize rendering (transparency processing)
   // FIXME: draw zoom box, if needed
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_axes (const axes::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   static double floatmax = std::numeric_limits<float>::max ();
 
   double x_min = props.get_x_min ();
   double x_max = props.get_x_max ();
   double y_min = props.get_y_min ();
   double y_max = props.get_y_max ();
   double z_min = props.get_z_min ();
   double z_max = props.get_z_max ();
@@ -1498,21 +1617,30 @@ opengl_renderer::draw_axes (const axes::
 
   set_clipbox (x_min, x_max, y_min, y_max, z_min, z_max);
 
   // Re-enable line smoothing for children
   if (antialias == GL_TRUE)
     glEnable (GL_LINE_SMOOTH);
 
   draw_axes_children (props);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_line (const line::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
   Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
   bool has_z = (z.numel () > 0);
   int n = static_cast<int> (std::min (std::min (x.numel (), y.numel ()),
                                       (has_z ? z.numel ()
                                              : std::numeric_limits<int>::max ())));
@@ -1622,21 +1750,30 @@ opengl_renderer::draw_line (const line::
                          has_z ? z(i) : 0.0,
                          lc, fc);
         }
 
       end_marker ();
     }
 
   set_clipping (props.is_clipping ());
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_surface (const surface::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   const Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   const Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
   const Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
   int zr = z.rows ();
   int zc = z.columns ();
 
   NDArray c;
@@ -2219,23 +2356,32 @@ opengl_renderer::draw_surface (const sur
                                    : Matrix ());
 
               draw_marker (x(j1,i), y(j,i1), z(j,i), lc, fc);
             }
         }
 
       end_marker ();
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 // FIXME: global optimization (rendering, data structures...),
 // there is probably a smarter/faster/less-memory-consuming way to do this.
 void
 opengl_renderer::draw_patch (const patch::properties &props)
 {
+#if defined (HAVE_OPENGL)
+
   // Do not render if the patch has incoherent data
   std::string msg;
   if (props.has_bad_data (msg))
     {
       warning ("opengl_renderer: %s. Not rendering.", msg.c_str ());
       return;
     }
 
@@ -2653,27 +2799,36 @@ opengl_renderer::draw_patch (const patch
             Matrix fc = (do_face ? (mfcolor.is_empty () ? cc : mfcolor)
                                  : Matrix ());
 
             draw_marker (v(idx,0), v(idx,1), (has_z ? v(idx,2) : 0), lc, fc);
           }
 
       end_marker ();
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_hggroup (const hggroup::properties &props)
 {
   draw (props.get_children ());
 }
 
 void
 opengl_renderer::draw_text (const text::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   if (props.get_string ().is_empty ())
     return;
 
   set_font (props);
 
   Matrix pos = xform.scale (props.get_data_position ());
   const Matrix bbox = props.get_extent_matrix ();
 
@@ -2685,21 +2840,29 @@ opengl_renderer::draw_text (const text::
   glRasterPos3d (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0);
   glBitmap (0, 0, 0, 0, bbox(0), bbox(1), 0);
   glDrawPixels (bbox(2), bbox(3),
                 GL_RGBA, GL_UNSIGNED_BYTE, props.get_pixels ().data ());
   glDisable (GL_ALPHA_TEST);
   if (! blend)
     glDisable (GL_BLEND);
 
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_image (const image::properties& props)
 {
+#if defined (HAVE_OPENGL)
+
   octave_value cdata = props.get_color_data ();
   dim_vector dv (cdata.dims ());
   int h = dv(0);
   int w = dv(1);
 
   Matrix x = props.get_xdata ().matrix_value ();
   Matrix y = props.get_ydata ().matrix_value ();
 
@@ -2805,17 +2968,17 @@ opengl_renderer::draw_image (const image
               for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                 {
                   a[idx]   = xcdata(i,j,0);
                   a[idx+1] = xcdata(i,j,1);
                   a[idx+2] = xcdata(i,j,2);
                 }
             }
 
-          draw_pixels (j1-j0, i1-i0, GL_RGB, GL_FLOAT, a);
+          draw_pixels (j1-j0, i1-i0, a);
 
         }
       else if (cdata.is_single_type ())
         {
           const FloatNDArray xcdata = cdata.float_array_value ();
 
           OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*(j1-j0)*(i1-i0));
 
@@ -2824,17 +2987,17 @@ opengl_renderer::draw_image (const image
               for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                 {
                   a[idx]   = xcdata(i,j,0);
                   a[idx+1] = xcdata(i,j,1);
                   a[idx+2] = xcdata(i,j,2);
                 }
             }
 
-          draw_pixels (j1-j0, i1-i0, GL_RGB, GL_FLOAT, a);
+          draw_pixels (j1-j0, i1-i0, a);
 
         }
       else if (cdata.is_uint8_type ())
         {
           const uint8NDArray xcdata = cdata.uint8_array_value ();
 
           OCTAVE_LOCAL_BUFFER (GLubyte, a, 3*(j1-j0)*(i1-i0));
 
@@ -2843,17 +3006,17 @@ opengl_renderer::draw_image (const image
               for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                 {
                   a[idx]   = xcdata(i,j,0);
                   a[idx+1] = xcdata(i,j,1);
                   a[idx+2] = xcdata(i,j,2);
                 }
             }
 
-          draw_pixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_BYTE, a);
+          draw_pixels (j1-j0, i1-i0, a);
 
         }
       else if (cdata.is_uint16_type ())
         {
           const uint16NDArray xcdata = cdata.uint16_array_value ();
 
           OCTAVE_LOCAL_BUFFER (GLushort, a, 3*(j1-j0)*(i1-i0));
 
@@ -2862,83 +3025,166 @@ opengl_renderer::draw_image (const image
               for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                 {
                   a[idx]   = xcdata(i,j,0);
                   a[idx+1] = xcdata(i,j,1);
                   a[idx+2] = xcdata(i,j,2);
                 }
             }
 
-          draw_pixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_SHORT, a);
+          draw_pixels (j1-j0, i1-i0, a);
 
         }
       else
         warning ("opengl_renderer: invalid image data type (expected double, single, uint8, or uint16)");
     }
   else
     warning ("opengl_renderer: invalid image size (expected MxNx3 or MxN)");
 
   glPixelZoom (1, 1);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_viewport (int w, int h)
 {
+#if defined (HAVE_OPENGL)
+
   glViewport (0, 0, w, h);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
+}
+
+void
+opengl_renderer::draw_pixels (int width, int height, const float *data)
+{
+#if defined (HAVE_OPENGL)
+
+  glDrawPixels (width, height, GL_RGB, GL_FLOAT, data);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
-opengl_renderer::draw_pixels (GLsizei width, GLsizei height, GLenum format,
-                              GLenum type, const GLvoid *data)
+opengl_renderer::draw_pixels (int width, int height, const uint8_t *data)
 {
-  glDrawPixels (width, height, format, type, data);
+#if defined (HAVE_OPENGL)
+
+  glDrawPixels (width, height, GL_RGB, GL_UNSIGNED_BYTE, data);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
+}
+
+void
+opengl_renderer::draw_pixels (int width, int height, const uint16_t *data)
+{
+#if defined (HAVE_OPENGL)
+
+  glDrawPixels (width, height, GL_RGB, GL_UNSIGNED_SHORT, data);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_color (const Matrix& c)
 {
+#if defined (HAVE_OPENGL)
+
   glColor3dv (c.data ());
 
   txt_renderer.set_color (c);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_font (const base_properties& props)
 {
   txt_renderer.set_font (props.get ("fontname").string_value (),
                          props.get ("fontweight").string_value (),
                          props.get ("fontangle").string_value (),
                          props.get ("fontsize_points").double_value ());
 }
 
 void
 opengl_renderer::set_polygon_offset (bool on, float offset)
 {
+#if defined (HAVE_OPENGL)
+
   if (on)
     {
       glEnable (GL_POLYGON_OFFSET_FILL);
       glEnable (GL_POLYGON_OFFSET_LINE);
       glPolygonOffset (offset, offset);
     }
   else
     {
       glDisable (GL_POLYGON_OFFSET_FILL);
       glDisable (GL_POLYGON_OFFSET_LINE);
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_linewidth (float w)
 {
+#if defined (HAVE_OPENGL)
+
   glLineWidth (w);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_linestyle (const std::string& s, bool use_stipple)
 {
+#if defined (HAVE_OPENGL)
+
   bool solid = false;
 
   if (s == "-")
     {
       glLineStipple (1, static_cast<unsigned short> (0xFFFF));
       solid = true;
     }
   else if (s == ":")
@@ -2949,22 +3195,31 @@ opengl_renderer::set_linestyle (const st
     glLineStipple (1, static_cast<unsigned short> (0x020F));
   else
     glLineStipple (1, static_cast<unsigned short> (0x0000));
 
   if (solid && ! use_stipple)
     glDisable (GL_LINE_STIPPLE);
   else
     glEnable (GL_LINE_STIPPLE);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_clipbox (double x1, double x2, double y1, double y2,
                               double z1, double z2)
 {
+#if defined (HAVE_OPENGL)
+
   double dx = (x2-x1);
   double dy = (y2-y1);
   double dz = (z2-z1);
 
   x1 -= 0.001*dx; x2 += 0.001*dx;
   y1 -= 0.001*dy; y2 += 0.001*dy;
   z1 -= 0.001*dz; z2 += 0.001*dz;
 
@@ -2981,37 +3236,55 @@ opengl_renderer::set_clipbox (double x1,
   p(1) = 0; p(2) = -1; p(3) = z2;
   glClipPlane (GL_CLIP_PLANE4, p.data ());
   p(2) = 1; p(3) = -z1;
   glClipPlane (GL_CLIP_PLANE5, p.data ());
 
   xmin = x1; xmax = x2;
   ymin = y1; ymax = y2;
   zmin = z1; zmax = z2;
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::set_clipping (bool enable)
 {
+#if defined (HAVE_OPENGL)
+
   bool has_clipping = (glIsEnabled (GL_CLIP_PLANE0) == GL_TRUE);
 
   if (enable != has_clipping)
     {
       if (enable)
         for (int i = 0; i < 6; i++)
           glEnable (GL_CLIP_PLANE0+i);
       else
         for (int i = 0; i < 6; i++)
           glDisable (GL_CLIP_PLANE0+i);
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::init_marker (const std::string& m, double size, float width)
 {
+#if defined (HAVE_OPENGL)
+
 #if defined (HAVE_FRAMEWORK_OPENGL)
   GLint vw[4];
 #else
   int vw[4];
 #endif
 
   glGetIntegerv (GL_VIEWPORT, vw);
 
@@ -3022,35 +3295,53 @@ opengl_renderer::init_marker (const std:
   glMatrixMode (GL_MODELVIEW);
   glPushMatrix ();
 
   set_clipping (false);
   set_linewidth (width);
 
   marker_id = make_marker_list (m, size, false);
   filled_marker_id = make_marker_list (m, size, true);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::end_marker (void)
 {
+#if defined (HAVE_OPENGL)
+
   glDeleteLists (marker_id, 1);
   glDeleteLists (filled_marker_id, 1);
 
   glMatrixMode (GL_MODELVIEW);
   glPopMatrix ();
   glMatrixMode (GL_PROJECTION);
   glPopMatrix ();
   set_linewidth (0.5f);
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::draw_marker (double x, double y, double z,
                               const Matrix& lc, const Matrix& fc)
 {
+#if defined (HAVE_OPENGL)
+
   ColumnVector tmp = xform.transform (x, y, z, false);
 
   glLoadIdentity ();
   glTranslated (tmp(0), tmp(1), -tmp(2));
 
   if (filled_marker_id > 0 && fc.numel () > 0)
     {
       glColor3dv (fc.data ());
@@ -3067,22 +3358,31 @@ opengl_renderer::draw_marker (double x, 
         }
       set_polygon_offset (false);
     }
   else if (marker_id > 0 && lc.numel () > 0)
     {
       glColor3dv (lc.data ());
       glCallList (marker_id);
     }
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 unsigned int
 opengl_renderer::make_marker_list (const std::string& marker, double size,
                                    bool filled) const
 {
+#if defined (HAVE_OPENGL)
+
   char c = marker[0];
 
   if (filled && (c == '+' || c == 'x' || c == '*' || c == '.'))
     return 0;
 
   unsigned int ID = glGenLists (1);
   double sz = size * toolkit.get_screen_resolution () / 72.0;
 
@@ -3221,16 +3521,23 @@ opengl_renderer::make_marker_list (const
     default:
       warning ("opengl_renderer: unsupported marker '%s'", marker.c_str ());
       break;
     }
 
   glEndList ();
 
   return ID;
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 opengl_renderer::text_to_pixels (const std::string& txt,
                                  uint8NDArray& pixels,
                                  Matrix& bbox,
                                  int halign, int valign, double rotation)
 {
@@ -3248,16 +3555,18 @@ opengl_renderer::text_to_strlist (const 
                                 rotation, interpreter);
 }
 
 Matrix
 opengl_renderer::render_text (const std::string& txt,
                               double x, double y, double z,
                               int halign, int valign, double rotation)
 {
+#if defined (HAVE_OPENGL)
+
   Matrix bbox (1, 4, 0.0);
 
   if (txt.empty ())
     return bbox;
 
   if (txt_renderer.ok ())
     {
       uint8NDArray pixels;
@@ -3273,11 +3582,16 @@ opengl_renderer::render_text (const std:
                     GL_RGBA, GL_UNSIGNED_BYTE, pixels.data ());
       glDisable (GL_ALPHA_TEST);
 
       if (! blend)
         glDisable (GL_BLEND);
     }
 
   return bbox;
+
+#else
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+#endif
 }
-
-#endif
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -21,31 +21,25 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_gl_render_h)
 #define octave_gl_render_h 1
 
 #include "octave-config.h"
 
 #include "graphics.h"
-#include "oct-opengl.h"
 #include "text-renderer.h"
 
-#if defined (HAVE_OPENGL)
-
 class
 OCTINTERP_API
 opengl_renderer
 {
 public:
-  opengl_renderer (void)
-    : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
-    zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
-    camera_pos (), camera_dir (), interpreter ("none"), txt_renderer ()
-  { }
+
+  opengl_renderer (void);
 
   virtual ~opengl_renderer (void) { }
 
   virtual void draw (const graphics_object& go, bool toplevel = true);
 
   virtual void draw (const Matrix& hlist, bool toplevel = false)
   {
     int len = hlist.numel ();
@@ -108,18 +102,19 @@ protected:
                                 Matrix& bbox,
                                 int halign = 0, int valign = 0,
                                 double rotation = 0.0);
 
   virtual Matrix render_text (const std::string& txt,
                               double x, double y, double z,
                               int halign, int valign, double rotation = 0.0);
 
-  virtual void draw_pixels (GLsizei w, GLsizei h, GLenum format,
-                            GLenum type, const GLvoid *data);
+  virtual void draw_pixels (int w, int h, const float *data);
+  virtual void draw_pixels (int w, int h, const uint8_t *data);
+  virtual void draw_pixels (int w, int h, const uint16_t *data);
 
   virtual void render_grid (const std::string& gridstyle, const Matrix& ticks,
                             double lim1, double lim2,
                             double p1, double p1N, double p2, double p2N,
                             int xyz, bool is_3D);
 
   virtual void render_tickmarks (const Matrix& ticks, double lim1, double lim2,
                                  double p1, double p1N, double p2, double p2N,
@@ -196,10 +191,8 @@ private:
 
   text_renderer txt_renderer;
 
 private:
   class patch_tesselator;
 };
 
 #endif
-
-#endif
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -25,16 +25,19 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "errwarn.h"
 #include "gl2ps-print.h"
 
 #ifdef HAVE_GL2PS_H
 
 #include <cstdio>
+
+#include <limits>
+
 #include <unistd.h>
 
 #include <gl2ps.h>
 
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
 #include "unwind-prot.h"
 
@@ -91,18 +94,20 @@ protected:
       warning ("gl2ps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
     else if (state == GL2PS_ERROR)
       error ("gl2ps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
 
     buffer_overflow |= (state == GL2PS_OVERFLOW);
   }
 
   void draw_text (const text::properties& props);
-  void draw_pixels (GLsizei w, GLsizei h, GLenum format,
-                    GLenum type, const GLvoid *data);
+
+  void draw_pixels (int w, int h, const float *data);
+  void draw_pixels (int w, int h, const uint8_t *data);
+  void draw_pixels (int w, int h, const uint16_t *data);
 
   void set_linestyle (const std::string& s, bool use_stipple = false)
   {
     opengl_renderer::set_linestyle (s, use_stipple);
 
     if (s == "-" && ! use_stipple)
       gl2psDisable (GL2PS_LINE_STIPPLE);
     else
@@ -658,41 +663,50 @@ gl2ps_renderer::set_font (const base_pro
   bool isbold =
     (props.get ("fontweight").xtolower ().string_value () == "bold");
   bool isitalic =
     (props.get ("fontangle").xtolower ().string_value () == "italic");
 
   fontname = select_font (fn, isbold, isitalic);
 }
 
-template <typename T>
-static void
-draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data, float maxval)
+void
+gl2ps_renderer::draw_pixels (int w, int h, const float *data)
 {
-  OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*w*h);
-
-  // Convert to GL_FLOAT as it is the only type gl2ps accepts.
-  for (int i = 0; i < 3*w*h; i++)
-    a[i] = data[i] / maxval;
-
-  gl2psDrawPixels (w, h, 0, 0, format, GL_FLOAT, a);
+  gl2psDrawPixels (w, h, 0, 0, GL_RGB, GL_FLOAT, data);
 }
 
 void
-gl2ps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
-                            GLenum type, const GLvoid *data)
+gl2ps_renderer::draw_pixels (int w, int h, const uint8_t *data)
 {
   // gl2psDrawPixels only supports the GL_FLOAT type.
-  // Other formats, such as uint8, must be converted first.
-  if (type == GL_UNSIGNED_BYTE)
-    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data), 255.0f);
-  else if (type == GL_UNSIGNED_SHORT)
-    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data), 65535.0f);
-  else
-    gl2psDrawPixels (w, h, 0, 0, format, type, data);
+
+  OCTAVE_LOCAL_BUFFER (float, tmp_data, 3*w*h);
+
+  static const float maxval = std::numeric_limits<float>::max ();
+
+  for (int i = 0; i < 3*w*h; i++)
+    tmp_data[i] = data[i] / maxval;
+
+  draw_pixels (w, h, tmp_data);
+}
+
+void
+gl2ps_renderer::draw_pixels (int w, int h, const uint16_t *data)
+{
+  // gl2psDrawPixels only supports the GL_FLOAT type.
+
+  OCTAVE_LOCAL_BUFFER (float, tmp_data, 3*w*h);
+
+  static const float maxval = std::numeric_limits<float>::max ();
+
+  for (int i = 0; i < 3*w*h; i++)
+    tmp_data[i] = data[i] / maxval;
+
+  draw_pixels (w, h, tmp_data);
 }
 
 void
 gl2ps_renderer::draw_text (const text::properties& props)
 {
   if (props.get_string ().is_empty ())
     return;
 
