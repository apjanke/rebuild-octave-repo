# HG changeset patch
# User jwe
# Date 857183429 0
#      Sat Mar 01 02:30:29 1997 +0000
# Node ID 2c0f259cf83d690f85c21bcd456398bcd8791976
# Parent  d9d00d7e271e1346e7614764a6b2ea3894296501
[project @ 1997-03-01 02:30:26 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,39 @@
 Fri Feb 28 01:49:48 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	Implement switch statement:
+
+	* parse.y (Vwarn_variable_switch_label): New static variable.
+	(warn_variable_switch_label): New function.
+	(symbols_of_parse): Provide warn_variable_switch_label as Octave
+	variable here.
+	(make_switch_case, finish_switch_command): New functions.
+	(maybe_warn_variable_switch_label): New function.
+	(end_error): Handle endswitch.
+	(switch_command, case_list, case_list1, switch_case, default_case):
+	New nonterminals.
+	(command): Add switch_command here.
+	* lex.l	(is_keyword): Handle switch, case, otherwise, and endswitch.
+	* octave_gperf: Recognize switch, case, otherwise, and endswitch.
+	* token.h (end_tok_type): New item, switch_end.
+	* pt-cmd.cc (tree_switch_command): New class.
+	* pt-misc.cc (tree_switch_case, tree_switch_case_list): New classes.
+	* pt-pr-code.cc (tree_print_code::visit_switch_case,
+	tree_print_code::visit_switch_case_list,
+	tree_print_code::visit_switch_command): New functions.
+ 	* pt-walk.h (tree_walker::visit_switch_case,
+	tree_walker::visit_switch_case_list,
+	tree_walker::visit_switch_command): New pure virtual declarations.
+	Implement new switch statement.
+	* SLList-misc.cc: Instantiate lists of pointers to
+	tree_switch_case objects too.
+
+	* lex.h, lex.l, parse.y: Delete all references to lexer_flags::iffing.
+
 	* syswait.h: Include sys/wait.h on NeXT systems, but don't use the
 	WIFEXTED, WEXITSTATUS, and WIFSIGNALLED macros defined there.
 	Also define waitpid in terms of wait4.  From Rex A. Dieter
 	<rdieter@math.unl.edu>.
 
 Wed Feb 26 16:43:31 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (octave_base_stream::do_scanf): Don't report an
diff --git a/src/SLList-misc.cc b/src/SLList-misc.cc
--- a/src/SLList-misc.cc
+++ b/src/SLList-misc.cc
@@ -34,17 +34,19 @@ Software Foundation, 59 Temple Place - S
 #include "pt-misc.h"
 
 template class SLNode<tree_statement *>;
 template class SLList<tree_statement *>;
 
 template class SLNode<tree_if_clause *>;
 template class SLList<tree_if_clause *>;
 
+template class SLList<tree_switch_case *>;
+template class SLNode<tree_switch_case *>;
+
 template class SLList<tree_global *>;
 template class SLNode<tree_global *>;
 
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -144,20 +144,16 @@ public:
   int looking_at_parameter_list;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   int do_comma_insert;
 
   // Nonzero means we think we are looking at a set command.
   int doing_set;
 
-  // Nonzero means we're in the middle of defining a conditional
-  // expression.
-  int iffing;
-
   // Nonzero means we're looking at the range part of a plot command.
   int in_plot_range;
 
   // Nonzero means we're looking at the using part of a plot command.
   int in_plot_using;
 
   // Nonzero means we're looking at the style part of a plot command.
   int in_plot_style;
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -954,21 +954,23 @@ is_keyword (const string& s)
   if (kw)
     {
       yylval.tok_val = 0;
 
       switch (kw->kw_id)
 	{
 	case all_va_args_kw:
 	case break_kw:
+	case case_kw:
 	case catch_kw:
 	case continue_kw:
 	case else_kw:
 	case elseif_kw:
 	case global_kw:
+	case otherwise_kw:
 	case return_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
 	  yylval.tok_val = new token (token::simple_end, l, c);
 	  break;
 
@@ -987,32 +989,33 @@ is_keyword (const string& s)
 	case endfunction_kw:
 	  yylval.tok_val = new token (token::function_end, l, c);
 	  break;
 
 	case endif_kw:
 	  yylval.tok_val = new token (token::if_end, l, c);
 	  break;
 
+	case endswitch_kw:
+	  yylval.tok_val = new token (token::switch_end, l, c);
+	  break;
+
 	case endwhile_kw:
 	  yylval.tok_val = new token (token::while_end, l, c);
 	  break;
 
 	case for_kw:
 	case while_kw:
 	  promptflag--;
 	  lexer_flags.looping++;
 	  break;
 
 	case if_kw:
-	  promptflag--;
-	  lexer_flags.iffing++;
-	  break;
-
 	case try_kw:
+	case switch_kw:
 	case unwind_protect_kw:
 	  promptflag--;
 	  break;
 
 	case gplot_kw:
 	  lexer_flags.plotting = 1;
 	  yylval.tok_val = new token (token::two_dee, l, c);
 	  break;
@@ -1903,17 +1906,16 @@ lexical_feedback::init (void)
   doing_set = 0;
   in_plot_range = 0;
   in_plot_style = 0;
   in_plot_using = 0;
   past_plot_range = 0;
   plotting = 0;
 
   // Not initially inside a loop or if statement.
-  iffing = 0;
   looping = 0;
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = 0;
 
   // Not initially screwed by `function [...] = f (...)' syntax.
   maybe_screwed = 0;
   maybe_screwed_again = 0;
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -1,59 +1,67 @@
 %{
 
 enum octave_kw_id
 {
   all_va_args_kw,
   break_kw,
+  case_kw,
   catch_kw,
   continue_kw,
   else_kw,
   elseif_kw,
   end_kw,
   end_try_catch_kw,
   end_unwind_protect_kw,
   endfor_kw,
   endfunction_kw,
   endif_kw,
+  endswitch_kw,
   endwhile_kw,
   for_kw,
   function_kw,
   global_kw,
   gplot_kw,
   gsplot_kw,
   if_kw,
+  otherwise_kw,
   replot_kw,
   return_kw,
+  switch_kw,
   try_kw,
   unwind_protect_kw,
   unwind_protect_cleanup_kw,
   while_kw
 };
 
 %}
 struct octave_kw { char *name; int tok; octave_kw_id kw_id; };
 %%
 all_va_args, ALL_VA_ARGS, all_va_args_kw
 break, BREAK, break_kw
+case, CASE, case_kw
 catch, CATCH, catch_kw
 continue, CONTINUE, continue_kw
 else, ELSE, else_kw
 elseif, ELSEIF, elseif_kw
 end, END, end_kw
 end_try_catch, END, end_try_catch_kw
 end_unwind_protect, END, end_unwind_protect_kw
 endfor, END, endfor_kw
 endfunction, END, endfunction_kw
 endif, END, endif_kw
+endswitch, END, endswitch_kw
 endwhile, END, endwhile_kw
 for, FOR, for_kw
 function, FCN, function_kw
 global, GLOBAL, global_kw
 gplot, PLOT, gplot_kw
 gsplot, PLOT, gsplot_kw
 if, IF, if_kw
+otherwise, OTHERWISE, otherwise_kw
 replot, PLOT, replot_kw
 return, FUNC_RET, return_kw
+switch, SWITCH, switch_kw
 try, TRY, try_kw
 unwind_protect, UNWIND, unwind_protect_kw
 unwind_protect_cleanup, CLEANUP, unwind_protect_cleanup_kw
 while, WHILE, while_kw
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -67,16 +67,19 @@ Software Foundation, 59 Temple Place - S
 //   octave> if (a = 2 < n)
 //
 // but not
 //
 //   octave> if ((a = 2) < n)
 //
 static bool Vwarn_assign_as_truth_value;
 
+// If TRUE, generate a warning for variable swich labels.
+static bool Vwarn_variable_switch_label;
+
 // If TRUE, generate a warning for the comma in things like
 //
 //   octave> global a, b = 2
 //
 static bool Vwarn_comma_in_global_decl;
 
 // If TRUE, generate warning if declared function name disagrees with
 // the name of the file in which it is defined.
@@ -114,16 +117,19 @@ static int check_end (token *tok, token:
 // Try to figure out early if an expression should become an
 // assignment to the built-in variable ans.
 static tree_expression *maybe_convert_to_ans_assign (tree_expression *expr);
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 static void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
+// Maybe print a warning about switch labels that aren't constants.
+static void maybe_warn_variable_switch_label (tree_expression *expr);
+
 // Create a plot command.
 static tree_plot_command *make_plot_command
 	 (token *tok, plot_limits *range, subplot_list *list);
 
 // Finish building a range.
 static tree_expression *finish_colon_expression (tree_colon_expression *e);
 
 // Build a constant.
@@ -191,16 +197,25 @@ static tree_if_command_list *start_if_co
 // Finish an if command.
 static tree_if_command *finish_if_command
 	 (token *if_tok, tree_if_command_list *list, token *end_tok);
 
 // Build an elseif clause.
 static tree_if_clause *make_elseif_clause
 	 (tree_expression *expr, tree_statement_list *list);
 
+// Finish a switch command.
+static tree_switch_command *finish_switch_command
+	 (token *switch_tok, tree_expression *expr,
+	  tree_switch_case_list *list, token *end_tok);
+
+// Build a switch case.
+static tree_switch_case *make_switch_case
+	 (tree_expression *expr, tree_statement_list *list);
+
 // Build an assignment to a variable.
 static tree_expression *make_simple_assignment
 	 (tree_index_expression *var, token *eq_tok, tree_expression *expr);
 
 // Make an expression that handles assignment of multiple values.
 static tree_expression *make_multi_val_ret
 	 (tree_matrix_row *mr, tree_expression *rhs, token *eq_tok);
 
@@ -266,16 +281,19 @@ static void set_stmt_print_flag (tree_st
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
   tree_command *tree_command_type;
   tree_if_command *tree_if_command_type;
   tree_if_clause *tree_if_clause_type;
   tree_if_command_list *tree_if_command_list_type;
+  tree_switch_command *tree_switch_command_type;
+  tree_switch_case *tree_switch_case_type;
+  tree_switch_case_list *tree_switch_case_list_type;
   tree_global *tree_global_type;
   tree_global_init_list *tree_global_init_list_type;
   tree_global_command *tree_global_command_type;
   tree_statement *tree_statement_type;
   tree_statement_list *tree_statement_list_type;
   tree_plot_command *tree_plot_command_type;
   subplot *subplot_type;
   subplot_list *subplot_list_type;
@@ -295,16 +313,17 @@ static void set_stmt_print_flag (tree_st
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE
 %token <tok_val> IF ELSEIF ELSE
+%token <tok_val> SWITCH CASE OTHERWISE
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
@@ -328,16 +347,19 @@ static void set_stmt_print_flag (tree_st
 %type <tree_colon_expression_type> colon_expr
 %type <tree_argument_list_type> arg_list word_list
 %type <tree_parameter_list_type> param_list param_list1
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command func_def
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
+%type <tree_switch_command_type> switch_command
+%type <tree_switch_case_type> switch_case default_case
+%type <tree_switch_case_list_type> case_list1 case_list
 %type <tree_global_type> global_decl2
 %type <tree_global_init_list_type> global_decl1
 %type <tree_global_command_type> global_decl
 %type <tree_statement_type> statement
 %type <tree_statement_list_type> simple_list simple_list1 list list1
 %type <tree_statement_list_type> opt_list input1
 %type <tree_plot_command_type> plot_command 
 %type <subplot_type> plot_command2 plot_options
@@ -613,21 +635,20 @@ optcomma	: // empty
 		;
 
 command		: plot_command
 		  { $$ = $1; }
 		| func_def
 		  { $$ = $1; }
 		| global_decl
 		  { $$ = $1; }
+		| switch_command
+		  { $$ = $1; }
 		| if_command
-		  {
-		    lexer_flags.iffing--;
-		    $$ = $1;
-		  }
+		  { $$ = $1; }
 		| UNWIND opt_sep opt_list CLEANUP opt_sep opt_list END
 		  {
 		    if (! ($$ = make_unwind_command ($1, $3, $6, $7)))
 		      ABORT_PARSE;
 		  }
 		| TRY opt_sep opt_list CATCH opt_sep opt_list END
 		  {
 		    if (! ($$ = make_try_command ($1, $3, $6, $7)))
@@ -694,16 +715,49 @@ if_cmd_list1	: expression opt_sep opt_li
 elseif_clause	: ELSEIF opt_sep expression opt_sep opt_list
 		  { $$ = make_elseif_clause ($3, $5); }
 		;
 
 else_clause	: ELSE opt_sep opt_list
 		  { $$ = new tree_if_clause ($3); }
 		;
 
+switch_command	: SWITCH expression opt_sep case_list END
+		  {
+		    if (! ($$ = finish_switch_command ($1, $2, $4, $5)))
+		      ABORT_PARSE;
+		  }
+		;
+
+case_list	: case_list1
+		  { $$ = $1; }
+		| case_list1 default_case
+		  {
+		    $1->append ($2);
+		    $$ = $1;
+		  }		
+		;
+
+case_list1	: switch_case
+		  { $$ = new tree_switch_case_list ($1); }
+		| case_list1 switch_case
+		  {
+		    $1->append ($2);
+		    $$ = $1;
+		  }
+		;
+
+switch_case	: CASE opt_sep expression opt_sep list
+		  { $$ = make_switch_case ($3, $5); }
+		;
+
+default_case	: OTHERWISE opt_sep opt_list
+		  { $$ = new tree_switch_case ($3); }
+		;
+
 screwed_again	: // empty
 		  { lexer_flags.maybe_screwed_again++; }
 		;
 
 expression	: simple_expr
 		  { $$ = $1; }
 		| NUM '=' expression
 		  {
@@ -1275,16 +1329,20 @@ check_end (token *tok, token::end_tok_ty
 	case token::if_end:
 	  end_error ("if", ettype, l, c);
 	  break;
 
 	case token::try_catch_end:
 	  end_error ("try", ettype, l, c);
 	  break;
 
+	case token::switch_end:
+	  end_error ("switch", ettype, l, c);
+	  break;
+
 	case token::unwind_protect_end:
 	  end_error ("unwind_protect", ettype, l, c);
 	  break;
 
 	case token::while_end:
 	  end_error ("while", ettype, l, c);
 	  break;
 
@@ -1346,16 +1404,27 @@ maybe_warn_assign_as_truth_value (tree_e
   if (Vwarn_assign_as_truth_value
       && expr->is_assignment_expression ()
       && expr->is_in_parens () < 2)
     {
       warning ("suggest parenthesis around assignment used as truth value");
     }
 }
 
+// Maybe print a warning about switch labels that aren't constants.
+
+static void
+maybe_warn_variable_switch_label (tree_expression *expr)
+{
+  if (Vwarn_variable_switch_label && ! expr->is_constant ())
+    {
+      warning ("variable switch label");
+    }
+}
+
 // Create a plot command.
 
 static tree_plot_command *
 make_plot_command (token *tok, plot_limits *range, subplot_list *list)
 {
   if (range)
     {
       if (tok->pttype () == token::replot)
@@ -1970,16 +2039,45 @@ finish_if_command (token *if_tok, tree_i
 static tree_if_clause *
 make_elseif_clause (tree_expression *expr, tree_statement_list *list)
 {
   maybe_warn_assign_as_truth_value (expr);
 
   return new tree_if_clause (expr, list);
 }
 
+// Finish a switch command.
+
+static tree_switch_command *
+finish_switch_command (token *switch_tok, tree_expression *expr,
+		       tree_switch_case_list *list, token *end_tok)
+{
+  tree_switch_command *retval = 0;
+
+  if (! check_end (end_tok, token::switch_end))
+    {
+      int l = switch_tok->line ();
+      int c = switch_tok->column ();
+
+      retval = new tree_switch_command (expr, list, l, c);
+    }
+
+  return retval;
+}
+
+// Build a switch case.
+
+static tree_switch_case *
+make_switch_case (tree_expression *expr, tree_statement_list *list)
+{
+  maybe_warn_variable_switch_label (expr);
+
+  return new tree_switch_case (expr, list);
+}
+
 // Build an assignment to a variable.
 
 static tree_expression *
 make_simple_assignment (tree_index_expression *var, token *eq_tok,
 			tree_expression *expr)
 {
   int l = eq_tok->line ();
   int c = eq_tok->column ();
@@ -2269,30 +2367,42 @@ warn_function_name_clash (void)
 static int
 warn_missing_semicolon (void)
 {
   Vwarn_missing_semicolon = check_preference ("warn_missing_semicolon");
 
   return 0;
 }
 
+static int
+warn_variable_switch_label (void)
+{
+  Vwarn_variable_switch_label
+    = check_preference ("warn_variable_switch_label");
+
+  return 0;
+}
+
 void
 symbols_of_parse (void)
 {
   DEFVAR (warn_assign_as_truth_value, 1.0, 0, warn_assign_as_truth_value,
     "produce warning for assignments used as truth values");
 
   DEFVAR (warn_comma_in_global_decl, 1.0, 0, warn_comma_in_global_decl,
     "produce warning for commas in global declarations");
 
   DEFVAR (warn_function_name_clash, 1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR (warn_missing_semicolon, 0.0, 0, warn_missing_semicolon,
-    "produce a warning if a statement in a function file is not
+    "produce a warning if a statement in a function file is not\n\
 terminated with a semicolon");
+
+  DEFVAR (warn_variable_switch_label, 0.0, 0, warn_variable_switch_label,
+    "produce warning for variables used as switch labels");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: text ***
 ;;; End: ***
 */
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -512,16 +512,60 @@ tree_if_command::eval (void)
 }
 
 void
 tree_if_command::accept (tree_walker& tw)
 {
   tw.visit_if_command (*this);
 }
 
+// Switch.
+
+tree_switch_command::~tree_switch_command (void)
+{
+  delete expr;
+  delete list;
+}
+
+void
+tree_switch_command::eval (void)
+{
+  if (expr)
+    {
+      octave_value val = expr->eval (0);
+
+      if (! error_state)
+	{
+	  if (list)
+	    list->eval (val);
+
+	  if (error_state)
+	    eval_error ();
+	}
+      else
+	eval_error ();
+    }
+  else
+    ::error ("missing value in switch command near line %d, column %d",
+	     line (), column ());
+}
+
+void
+tree_switch_command::eval_error (void)
+{
+  ::error ("evaluating switch command near line %d, column %d",
+	   line (), column ());
+}
+
+void
+tree_switch_command::accept (tree_walker& tw)
+{
+  tw.visit_switch_command (*this);
+}
+
 // Simple exception handling.
 
 tree_try_catch_command::~tree_try_catch_command (void)
 {
   delete try_code;
   delete catch_code;
 }
 
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -29,28 +29,30 @@ Software Foundation, 59 Temple Place - S
 
 class ostream;
 
 class octave_value_list;
 
 class tree_statement_list;
 class tree_global_init_list;
 class tree_if_command_list;
+class tree_switch_case_list;
 class tree_expression;
 class tree_index_expression;
 class tree_identifier;
 class tree_return_list;
 class octave_value;
 class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
+class tree_switch_command;
 class tree_try_catch_command;
 class tree_unwind_protect_command;
 class tree_no_op_command;
 class tree_break_command;
 class tree_continue_command;
 class tree_return_command;
 
 class tree_walker;
@@ -207,28 +209,61 @@ public:
 
   tree_if_command (tree_if_command_list *lst, int l = -1, int c = -1)
     : tree_command (l, c), list (lst) { }
 
   ~tree_if_command (void);
 
   void eval (void);
 
-  void eval_error (void);
-
   tree_if_command_list *cmd_list (void) { return list; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // List of if commands (if, elseif, elseif, ... else, endif)
   tree_if_command_list *list;
 };
 
+// Switch.
+
+class
+tree_switch_command : public tree_command
+{
+public:
+
+  tree_switch_command (int l = -1, int c = -1)
+    : tree_command (l, c), expr (0), list (0) { }
+
+  tree_switch_command (tree_expression *e, tree_switch_case_list *lst,
+		       int l = -1, int c = -1)
+    : tree_command (l, c), expr (e), list (lst) { }
+
+  ~tree_switch_command (void);
+
+  void eval (void);
+
+  void eval_error (void);
+
+  tree_expression *switch_value (void) { return expr; }
+
+  tree_switch_case_list *case_list (void) { return list; }
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // Value on which to switch.
+  tree_expression *expr;
+
+  // List of cases (case 1, case 2, ..., default)
+  tree_switch_case_list *list;
+};
+
 // Simple exception handling.
 
 class
 tree_unwind_protect_command : public tree_command
 {
 public:
 
   tree_unwind_protect_command (int l = -1, int c = -1)
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -524,13 +524,102 @@ tree_if_command_list::eval (void)
 }
 
 void
 tree_if_command_list::accept (tree_walker& tw)
 {
   tw.visit_if_command_list (*this);
 }
 
+// Switch.
+
+tree_switch_case::~tree_switch_case (void)
+{
+  delete label;
+  delete list;
+}
+
+bool
+tree_switch_case::label_matches (const octave_value& val)
+{
+  bool retval = false;
+
+  octave_value label_value = label->eval (false);
+
+  if (! error_state)
+    {
+      if (label_value.is_defined ())
+	{
+	  octave_value tmp = do_binary_op (octave_value::eq,
+					   val, label_value);
+
+	  if (! error_state)
+	    {
+	      if (tmp.is_defined ())
+		retval = tmp.is_true ();
+	      else
+		eval_error ();
+	    }
+	  else
+	    eval_error ();
+	}
+      else
+	eval_error ();
+    }
+  else
+    eval_error ();
+
+  return retval;
+}
+
+int
+tree_switch_case::eval (const octave_value& val)
+{
+  int retval = 0;
+
+  if (is_default_case () || label_matches (val))
+    {
+      if (list)
+	list->eval (true);
+
+      retval = 1;
+    }
+
+  return retval;
+}
+
+void
+tree_switch_case::eval_error (void)
+{
+  ::error ("evaluating switch case label");
+}
+
+void
+tree_switch_case::accept (tree_walker& tw)
+{
+  tw.visit_switch_case (*this);
+}
+
+// List of switch cases.
+
+void
+tree_switch_case_list::eval (const octave_value& val)
+{
+  for (Pix p = first (); p != 0; next (p))
+    {
+      tree_switch_case *t = this->operator () (p);
+
+      if (t->eval (val) || error_state)
+	break;
+    }
+}
+
+void
+tree_switch_case_list::accept (tree_walker& tw)
+{
+  tw.visit_switch_case_list (*this);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -42,16 +42,20 @@ class symbol_table;
 class tree_statement;
 class tree_statement_list;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
 class tree_va_return_list;
 class tree_global;
 class tree_global_init_list;
+class tree_if_clause;
+class tree_if_command_list;
+class tree_switch_case;
+class tree_switch_case_list;
 
 class tree_walker;
 
 #include <SLList.h>
 
 #include "pt-base.h"
 
 // A statement is either a command to execute or an expression to
@@ -368,15 +372,79 @@ public:
 	}
     }
 
   void eval (void);
 
   void accept (tree_walker& tw);
 };
 
+class
+tree_switch_case
+{
+public:
+
+  tree_switch_case (void) : label (0), list (0) { }
+
+  tree_switch_case (tree_statement_list *l)
+    : label (0), list (l) { }
+
+  tree_switch_case (tree_expression *e, tree_statement_list *l)
+    : label (e), list (l) { }
+
+  ~tree_switch_case (void);
+
+  bool is_default_case (void)
+    { return ! label; }
+
+  bool label_matches (const octave_value& val);
+
+  int eval (const octave_value& val);
+
+  void eval_error (void);
+
+  tree_expression *case_label (void) { return label; }
+
+  tree_statement_list *commands (void) { return list; }
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // The case label.
+  tree_expression *label;
+
+  // The list of statements to evaluate if the label matches.
+  tree_statement_list *list;
+};
+
+class
+tree_switch_case_list : public SLList<tree_switch_case *>
+{
+public:
+
+  tree_switch_case_list (void)
+    : SLList<tree_switch_case *> () { }
+
+  tree_switch_case_list (tree_switch_case *t)
+    : SLList<tree_switch_case *> () { append (t); }
+
+  ~tree_switch_case_list (void)
+    {
+      while (! empty ())
+	{
+	  tree_switch_case *t = remove_front ();
+	  delete t;
+	}
+    }
+
+  void eval (const octave_value& val);
+
+  void accept (tree_walker& tw);
+};
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -408,16 +408,87 @@ tree_print_code::visit_if_command_list (
 	}
 
       first_elt = false;
       lst.next (p);
     }
 }
 
 void
+tree_print_code::visit_switch_case (tree_switch_case& cs)
+{
+  indent ();
+
+  if (cs.is_default_case ())
+    os << "otherwise";
+  else
+    os << "case ";
+
+  tree_expression *label = cs.case_label ();
+
+  if (label)
+    label->accept (*this);
+
+  newline ();
+
+  increment_indent_level ();
+
+  tree_statement_list *list = cs.commands ();
+
+  if (list)
+    {
+      list->accept (*this);
+
+      decrement_indent_level ();
+    }
+}
+
+void
+tree_print_code::visit_switch_case_list (tree_switch_case_list& lst)
+{
+  Pix p = lst.first ();
+
+  while (p)
+    {
+      tree_switch_case *elt = lst (p);
+
+      if (elt)
+	elt->accept (*this);
+
+      lst.next (p);
+    }
+}
+
+void
+tree_print_code::visit_switch_command (tree_switch_command& cmd)
+{
+  indent ();
+
+  os << "switch ";
+
+  tree_expression *expr = cmd.switch_value ();
+
+  if (expr)
+    expr->accept (*this);
+
+  newline ();
+
+  increment_indent_level ();
+
+  tree_switch_case_list *list = cmd.case_list ();
+
+  if (list)
+    list->accept (*this);
+
+  indent ();
+
+  os << "endswitch";
+}
+
+void
 tree_print_code::visit_index_expression (tree_index_expression& expr)
 {
   indent ();
 
   bool in_parens = expr.is_in_parens ();
 
   if (in_parens)
     os << "(";
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -73,16 +73,22 @@ public:
   void visit_identifier (tree_identifier&);
 
   void visit_if_clause (tree_if_clause&);
 
   void visit_if_command (tree_if_command&);
 
   void visit_if_command_list (tree_if_command_list&);
 
+  void visit_switch_case (tree_switch_case&);
+
+  void visit_switch_case_list (tree_switch_case_list&);
+
+  void visit_switch_command (tree_switch_command&);
+
   void visit_index_expression (tree_index_expression&);
 
   void visit_indirect_ref (tree_indirect_ref&);
 
   void visit_matrix (tree_matrix&);
 
   void visit_matrix_row (tree_matrix_row&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -79,16 +79,25 @@ public:
 
   virtual void
   visit_if_command (tree_if_command&) = 0;
 
   virtual void
   visit_if_command_list (tree_if_command_list&) = 0;
 
   virtual void
+  visit_switch_case (tree_switch_case&) = 0;
+
+  virtual void
+  visit_switch_case_list (tree_switch_case_list&) = 0;
+
+  virtual void
+  visit_switch_command (tree_switch_command&) = 0;
+
+  virtual void
   visit_index_expression (tree_index_expression&) = 0;
 
   virtual void
   visit_indirect_ref (tree_indirect_ref&) = 0;
 
   virtual void
   visit_matrix (tree_matrix&) = 0;
 
diff --git a/src/syswait.h b/src/syswait.h
--- a/src/syswait.h
+++ b/src/syswait.h
@@ -24,17 +24,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_syswait_h 1
 
 // This mess suggested by the autoconf manual.
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
-#if defined (NeXT) && ! defined (_POSIX_SOURCE))
+#if defined (NeXT) && ! defined (_POSIX_SOURCE)
 #define HAVE_SYS_WAIT_H
 #endif
 
 #if defined HAVE_SYS_WAIT_H
 #include <sys/wait.h>
 #endif
 
 #if defined (NeXT)
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -46,16 +46,17 @@ public:
     };
 
   enum end_tok_type
     {
       simple_end,
       for_end,
       function_end,
       if_end,
+      switch_end,
       while_end,
       try_catch_end,
       unwind_protect_end,
     };
 
   enum plot_tok_type
     {
       replot = 1,
