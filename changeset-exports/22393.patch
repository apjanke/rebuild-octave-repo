# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472235331 14400
#      Fri Aug 26 14:15:31 2016 -0400
# Node ID 026067ffcf6689ad4ef2e01d135a758b996a985a
# Parent  4dfb28724863870c10a076ee4916af65205faa5e
fix build with minimal dependencies

* lo-fftpack-proto.h: Fix multiple inclusion guard.
* qr.cc: Use namespace qualifiers for qrupdate replacement functions.
* gl-render.cc: Fix placement of #if FEATURE tests and namespaces.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -48,18 +48,22 @@ next_power_of_2 (int n)
   int m = 1;
 
   while (m < n && m < std::numeric_limits<int>::max ())
     m <<= 1;
 
   return m;
 }
 
+#endif
+
 namespace octave
 {
+#if defined (HAVE_OPENGL)
+
 #define LIGHT_MODE GL_FRONT_AND_BACK
 
   // Use symbolic names for axes
   enum
     {
       X_AXIS,
       Y_AXIS,
       Z_AXIS
@@ -584,41 +588,45 @@ namespace octave
   class
   opengl_renderer::patch_tesselator
   {
     // Dummy class.
   };
 
 #endif
 
+}
+
 #if defined (HAVE_OPENGL)
 
-  static int
-  get_maxlights (void)
-  {
-
-    static int max_lights = 0;
-
-    // Check actual maximum number of lights possible
-    if (max_lights == 0)
-      {
-        for (max_lights = 0; max_lights < GL_MAX_LIGHTS; max_lights++)
-          {
-            glDisable (GL_LIGHT0 + max_lights);
-            if (glGetError ())
-              break;
-          }
-      }
-
-    return max_lights;
-
-  }
+static int
+get_maxlights (void)
+{
+
+  static int max_lights = 0;
+
+  // Check actual maximum number of lights possible
+  if (max_lights == 0)
+    {
+      for (max_lights = 0; max_lights < GL_MAX_LIGHTS; max_lights++)
+        {
+          glDisable (GL_LIGHT0 + max_lights);
+          if (glGetError ())
+            break;
+        }
+    }
+
+  return max_lights;
+
+}
 
 #endif
 
+namespace octave
+{
   opengl_renderer::opengl_renderer (void)
     : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
       zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
       camera_pos (), camera_dir (), interpreter ("none"), txt_renderer ()
   {
     // This constructor will fail if we don't have OpenGL or if the data
     // types we assumed in our public interface aren't compatible with the
     // OpenGL types.
diff --git a/liboctave/numeric/lo-fftpack-proto.h b/liboctave/numeric/lo-fftpack-proto.h
--- a/liboctave/numeric/lo-fftpack-proto.h
+++ b/liboctave/numeric/lo-fftpack-proto.h
@@ -53,8 +53,10 @@ extern "C"
   // FFTI
 
   F77_RET_T
   F77_FUNC (cffti, CFFTI) (const F77_INT&, F77_CMPLX*);
 
   F77_RET_T
   F77_FUNC (zffti, ZFFTI) (const F77_INT&, F77_DBLE_CMPLX*);
 }
+
+#endif
diff --git a/liboctave/numeric/qr.cc b/liboctave/numeric/qr.cc
--- a/liboctave/numeric/qr.cc
+++ b/liboctave/numeric/qr.cc
@@ -231,17 +231,17 @@ namespace octave
       octave_idx_type m = q.rows ();
       octave_idx_type n = r.columns ();
 
       if (u.numel () != m)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
       if (j < 0 || j > n)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
-      init (::insert_col (q*r, j, u), get_type ());
+      init (octave::math::insert_col (q*r, j, u), get_type ());
     }
 
     template <typename T>
     void
     qr<T>::insert_col (const T& u, const Array<octave_idx_type>& j)
     {
       warn_qrupdate_once ();
 
@@ -261,33 +261,33 @@ namespace octave
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
       if (nj > 0 && (js(0) < 0 || js(nj-1) > n))
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       if (nj > 0)
         {
           T a = q*r;
           for (octave_idx_type i = 0; i < js.numel (); i++)
-            a = ::insert_col (a, js(i), u.column (i));
+            a = octave::math::insert_col (a, js(i), u.column (i));
           init (a, get_type ());
         }
     }
 
     template <typename T>
     void
     qr<T>::delete_col (octave_idx_type j)
     {
       warn_qrupdate_once ();
 
       octave_idx_type n = r.columns ();
 
       if (j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
-      init (::delete_col (q*r, j), get_type ());
+      init (octave::math::delete_col (q*r, j), get_type ());
     }
 
     template <typename T>
     void
     qr<T>::delete_col (const Array<octave_idx_type>& j)
     {
       warn_qrupdate_once ();
 
@@ -304,17 +304,17 @@ namespace octave
         (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
       if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       if (nj > 0)
         {
           T a = q*r;
           for (octave_idx_type i = 0; i < js.numel (); i++)
-            a = ::delete_col (a, js(i));
+            a = octave::math::delete_col (a, js(i));
           init (a, get_type ());
         }
     }
 
     template <typename T>
     void
     qr<T>::insert_row (const RV_T& u, octave_idx_type j)
     {
@@ -323,47 +323,47 @@ namespace octave
       octave_idx_type m = r.rows ();
       octave_idx_type n = r.columns ();
 
       if (! q.is_square () || u.numel () != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
-      init (::insert_row (q*r, j, u), get_type ());
+      init (octave::math::insert_row (q*r, j, u), get_type ());
     }
 
     template <typename T>
     void
     qr<T>::delete_row (octave_idx_type j)
     {
       warn_qrupdate_once ();
 
       octave_idx_type m = r.rows ();
 
       if (! q.is_square ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
-      init (::delete_row (q*r, j), get_type ());
+      init (octave::math::delete_row (q*r, j), get_type ());
     }
 
     template <typename T>
     void
     qr<T>::shift_cols (octave_idx_type i, octave_idx_type j)
     {
       warn_qrupdate_once ();
 
       octave_idx_type n = r.columns ();
 
       if (i < 0 || i > n-1 || j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("qrshift: index out of range");
 
-      init (::shift_cols (q*r, i, j), get_type ());
+      init (octave::math::shift_cols (q*r, i, j), get_type ());
     }
 
 #endif
 
     // Specializations.
 
     template <>
     void
