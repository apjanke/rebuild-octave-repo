# HG changeset patch
# User mmuetzel <markus.muetzel@gmx.de>
# Date 1460316823 14400
#      Sun Apr 10 15:33:43 2016 -0400
# Node ID 184b85b31e03a61425357af051142714dd9bc55c
# Parent  f29d68e24c5a9a10b6dbfcc1dcab6412bd7e4787
more updates for version function

* toplev.cc (F__octave_config_info__): New fields, build_time,
fftw_version.
* oct-fftw.cc, oct-fftw.h (octave_fftw_version): New function.
* version.m: New option "-fftw". Fix release_date in tests
* module.mk (libinterp/build-info.cc): Update rule.
* build-info.h, build-info.in.cc (octave_build_date): Delete.
(octave_build_time): Return Unix time instead of local clock time.

diff --git a/libinterp/build-info.h b/libinterp/build-info.h
--- a/libinterp/build-info.h
+++ b/libinterp/build-info.h
@@ -1,9 +1,8 @@
-// %NO_EDIT_WARNING%
 /*
 
 Copyright (C) 2016 M. Muetzel
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -16,15 +15,15 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
+#include <ctime>
+
 #include <string>
 
 extern OCTAVE_API std::string octave_hg_id (void);
 
-extern OCTAVE_API std::string octave_build_date (void);
-
-extern OCTAVE_API std::string octave_build_time (void);
+extern OCTAVE_API time_t octave_build_time (void);
diff --git a/libinterp/build-info.in.cc b/libinterp/build-info.in.cc
--- a/libinterp/build-info.in.cc
+++ b/libinterp/build-info.in.cc
@@ -28,19 +28,13 @@ along with Octave; see the file COPYING.
 #include "build-info.h"
 
 std::string
 octave_hg_id (void)
 {
   return "%OCTAVE_HG_ID%";
 }
 
-std::string
-octave_build_date (void)
-{
-  return __DATE__;
-}
-
-std::string
+time_t
 octave_build_time (void)
 {
-  return __TIME__;
+  return %OCTAVE_BUILD_TIME%;
 }
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include <unistd.h>
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
+#include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
 
 #include "build-env.h"
 #include "build-info.h"
 #include "defaults.h"
@@ -1418,23 +1419,23 @@ specified option.\n\
       { "ENABLE_OPENMP", true },
 #else
       { "ENABLE_OPENMP", false },
 #endif
 
       { "api_version", OCTAVE_API_VERSION },
       { "archlibdir", subst_octave_home (OCTAVE_ARCHLIBDIR) },
       { "bindir", subst_octave_home (OCTAVE_BINDIR) },
-      { "build_date", octave_build_date () },
       { "build_time", octave_build_time () },
       { "canonical_host_type", OCTAVE_CANONICAL_HOST_TYPE },
       { "datadir", subst_octave_home (OCTAVE_DATADIR) },
       { "datarootdir", subst_octave_home (OCTAVE_DATAROOTDIR) },
       { "exec_prefix", subst_octave_home (OCTAVE_EXEC_PREFIX) },
       { "fcnfiledir", subst_octave_home (OCTAVE_FCNFILEDIR) },
+      { "fftw_version", octave_fftw_version () },
       { "hg_id", octave_hg_id () },
       { "imagedir", subst_octave_home (OCTAVE_IMAGEDIR) },
       { "includedir", subst_octave_home (OCTAVE_INCLUDEDIR) },
       { "infodir", subst_octave_home (OCTAVE_INFODIR) },
       { "infofile", subst_octave_home (OCTAVE_INFOFILE) },
       { "libdir", subst_octave_home (OCTAVE_LIBDIR) },
       { "libexecdir", subst_octave_home (OCTAVE_LIBEXECDIR) },
       { "localapiarchlibdir", subst_octave_home (OCTAVE_LOCALAPIARCHLIBDIR) },
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -262,17 +262,18 @@ libinterp/build-env-features.cc: config.
 
 libinterp/version.h: libinterp/version.in.h build-aux/mk-version-h.sh | libinterp/$(octave-dirstamp)
 	$(AM_V_GEN)$(call simple-filter-rule,build-aux/mk-version-h.sh)
 
 libinterp/build-info.cc: libinterp/build-info.in.cc HG-ID | libinterp/$(octave-dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
 	$(SED) \
 	  -e "s|%NO_EDIT_WARNING%|DO NOT EDIT!  Generated automatically by Makefile|" \
-	  -e "s|%OCTAVE_HG_ID%|`cat $(builddir)/HG-ID`|" $< > $@-t && \
+	  -e "s|%OCTAVE_HG_ID%|`cat $(builddir)/HG-ID`|" \
+	  -e "s|%OCTAVE_BUILD_TIME%|`date +%s`|" $< > $@-t && \
 	$(simple_move_if_change_rule)
 
 libinterp/builtins.cc: $(DEF_FILES) libinterp/mkbuiltins | libinterp/$(octave-dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
 	$(SHELL) $(srcdir)/libinterp/mkbuiltins --source $(DEF_FILES) > $@-t && \
 	$(simple_move_if_change_rule)
 
 libinterp/builtin-defun-decls.h: $(SRC_DEF_FILES) libinterp/mkbuiltins | libinterp/$(octave-dirstamp)
diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #  include <fftw3.h>
 #endif
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
+#include "libinterp/build-info.h"
 
 #if defined (HAVE_FFTW3_THREADS) || defined (HAVE_FFTW3F_THREADS)
 #  include "nproc.h"
 #endif
 
 octave_fftw_planner *octave_fftw_planner::instance = 0;
 
 // Helper class to create and cache FFTW plans for both 1D and
@@ -1127,8 +1128,18 @@ octave_fftw::ifftNd (const FloatComplex 
   const FloatComplex scale = npts;
   for (size_t i = 0; i < npts; i++)
     out[i] /= scale;
 
   return 0;
 }
 
 #endif
+
+std::string
+octave_fftw_version (void)
+{
+#if defined (HAVE_FFTW)
+  return fftw_version;
+#else
+  return "none";
+#endif
+}
diff --git a/liboctave/numeric/oct-fftw.h b/liboctave/numeric/oct-fftw.h
--- a/liboctave/numeric/oct-fftw.h
+++ b/liboctave/numeric/oct-fftw.h
@@ -359,9 +359,11 @@ public:
                      const dim_vector &);
 
 private:
   octave_fftw (void);
   octave_fftw (const octave_fftw&);
   octave_fftw& operator = (const octave_fftw&);
 };
 
+extern OCTAVE_API std::string octave_fftw_version (void);
+
 #endif
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -35,16 +35,19 @@
 ## for a description of the release (empty string),
 ##
 ## @item @qcode{"-release"}
 ## for the name of the running build,
 ##
 ## @item @qcode{"-java"}
 ## for version information of the Java VM,
 ##
+## @item @qcode{"-fftw"}
+## for version information for the linked FFTW,
+##
 ## @item @qcode{"-blas"}
 ## for version information for the linked BLAS (not implemented),
 ##
 ## @item @qcode{"-lapack"}
 ## for version information for the linked LAPACK (not implemented).
 ## @end table
 ##
 ## The variant with no input and output argument is an alias for the function
@@ -59,22 +62,22 @@ function [vs, d] = version (feature)
   if (nargin > 1 || ((nargin != 0) && ((nargout > 1) || ! ischar (feature))))
     print_usage ();
   endif
 
   if (nargin == 0)
     vs = OCTAVE_VERSION;
 
     if (nargout > 1)
-      d = __octave_config_info__.releasedate;
+      d = __octave_config_info__ ("release_date");
     end
   else
     switch (feature)
       case "-date"
-        vs = __octave_config_info__.releasedate;
+        vs = __octave_config_info__ ("release_date");
       case "-description"
         vs = "";
       case "-release"
         vs = "";
       case "-java"
         try
           jversion = javaMethod ("getProperty", "java.lang.System", ...
                                  "java.runtime.version");
@@ -83,34 +86,33 @@ function [vs, d] = version (feature)
           jname = javaMethod ("getProperty", "java.lang.System", ...
                                 "java.vm.name");
           jjitmode = javaMethod ("getProperty", "java.lang.System", ...
                                 "java.vm.info");
           vs = ["Java " jversion " with " jvendor " " jname " " jjitmode];
         catch
           vs = "no java available";
         end_try_catch
+      case "-fftw"
+        vs = __octave_config_info__ ("fftw_version");
       case "-blas"
         vs = "";
         warning(["version: option '" feature "' not implemented"])
       case "-lapack"
         vs = "";
         warning(["version: option '" feature "' not implemented"])
       otherwise
         error ("version: Invalid input argument");
     endswitch
   endif
 
-
 endfunction
 
-
 %!assert (ischar (version ()))
 
 %!test
 %! [v, d] = version ();
 %! assert (v, OCTAVE_VERSION)
-%! assert (d, __octave_config_info__.releasedate)
+%! assert (d, __octave_config_info__ ("release_date"))
 
-%!assert (version ("-date"), __octave_config_info__.releasedate)
+%!assert (version ("-date"), __octave_config_info__ ("release_date"))
 
 %!error version (1);
-
