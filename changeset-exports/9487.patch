# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1249459004 -7200
#      Wed Aug 05 09:56:44 2009 +0200
# Node ID 2894af292e69084e28062cf2ee3dca7c57b480bf
# Parent  d85a43495faad694f40612621b2a37e1ab17b6ad
implement isindex function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-08-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* utils.cc (Fisindex): New DEFUN.
+
 2009-08-04  Kristian Rumberg  <kristianrumberg@gmail.com>
 
 	* input.cc (is_completing_dirfns): New function.
 	(generate_completion): Use it to selectively complete file names.
 
 2009-08-04  John W. Eaton  <jwe@octave.org>
 
 	* debug.cc (Fdbwhere): Call octave_call_stack::goto_frame_relative
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1226,13 +1226,63 @@ octave_sleep (double seconds)
 
       // Versions of these functions that accept unsigned int args are
       // defined in cutils.c.
       octave_sleep (sec);
       octave_usleep (usec);
     }
 }
 
+DEFUN (isindex, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isindex (@var{ind}, @var{n})\n\
+Returns true if @var{ind} is a valid index. Valid indices can be\n\
+either positive integers (though possibly real data), or logical arrays.\n\
+If present, @var{n} specifies the extent of the dimension to be indexed.\n\
+Note that, if possible, the internal conversion result is cached so that\n\
+subsequent indexing will not perform the checking again.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  int nargin = args.length ();
+  octave_idx_type n = 0;
+
+  if (nargin == 2)
+    n = args(1).idx_type_value ();
+  else if (nargin != 1)
+    print_usage ();
+
+  if (! error_state)
+    {
+      unwind_protect::frame_id_t uwp = unwind_protect::begin_frame ();
+      unwind_protect::protect_var (error_state);
+      unwind_protect::protect_var (discard_error_messages);
+      discard_error_messages = true;
+
+      try
+        {
+          idx_vector idx = args(0).index_vector ();
+          if (! error_state)
+            {
+              if (nargin == 2)
+                retval = idx.extent (n) <= n;
+              else
+                retval = true;
+            }
+          else
+            retval = false;
+        }
+      catch (octave_execution_exception)
+        {
+          retval = false;
+        }
+
+      unwind_protect::run_frame (uwp);
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
