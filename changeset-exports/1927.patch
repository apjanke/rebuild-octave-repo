# HG changeset patch
# User jwe
# Date 824074767 0
#      Sun Feb 11 21:39:27 1996 +0000
# Node ID e379c781ae7eda53697b5633df41f823387f81e2
# Parent  3ce2c289c9781ea04be1bfe4dc9aa35237ed8e7c
[project @ 1996-02-11 21:39:27 by jwe]

diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -42,62 +42,61 @@ extern "C"
 
   int F77_FCN (zungqr, ZUNGQR) (const int&, const int&, const int&,
 				Complex*, const int&, Complex*,
 				Complex*, const int&, int&);
 }
 
 ComplexQR::ComplexQR (const ComplexMatrix& a, QR::type qr_type)
 {
-  tau = 0;
-  work = 0;
-  tmp_data = 0;
-
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
   int min_mn = m < n ? m : n;
-  tau = new Complex[min_mn];
+
+  Array<Complex> tau (min_mn);
+  Complex *ptau = tau.fortran_vec ();
 
   int lwork = 32*n;
-  work = new Complex[lwork];
+  Array<Complex> work (lwork);
+  Complex *pwork = work.fortran_vec ();
 
   int info = 0;
 
+  ComplexMatrix A_fact;
   if (m > n)
     {
-      tmp_data = new Complex [m*m];
-      copy (tmp_data, a.data (), a.length ());
+      A_fact.resize (m, m);
+      A_fact.insert (a, 0, 0);
     }
   else
-    tmp_data = dup (a.data (), a.length ());
+    A_fact = a;
 
-  F77_XFCN (zgeqrf, ZGEQRF, (m, n, tmp_data, m, tau, work, lwork, info));
+  Complex *tmp_data = A_fact.fortran_vec ();
 
-  delete [] work;
-  work = 0;
+  F77_XFCN (zgeqrf, ZGEQRF, (m, n, tmp_data, m, ptau, pwork, lwork, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeqrf");
   else
     {
       if (qr_type == QR::raw)
 	{
 	  for (int j = 0; j < min_mn; j++)
 	    {
 	      int limit = j < min_mn - 1 ? j : min_mn - 1;
 	      for (int i = limit + 1; i < m; i++)
-		tmp_data[m*j+i] *= tau[j];
+		A_fact.elem (i, j) *= tau.elem (j);
 	    }
 	}
       else
 	{
 	  volatile int n2;
 
 	  if (qr_type == QR::economy && m > n)
 	    {
@@ -109,45 +108,36 @@ ComplexQR::ComplexQR (const ComplexMatri
 	      n2 = m;
 	      r.resize (m, n, 0.0);
 	    }
 
 	  for (int j = 0; j < n; j++)
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
-		r.elem (i, j) = tmp_data[m*j+i];
+		r.elem (i, j) = A_fact.elem (i, j);
 	    }
 
 	  lwork = 32*m;
-	  work = new Complex[lwork];
+	  work.resize (lwork);
+	  Complex *pwork = work.fortran_vec ();
 
-	  F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, tau, work,
-				     lwork, info));
-
-	  delete [] work;
-	  work = 0;
+	  F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, ptau,
+				     pwork, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zungqr");
 	  else
 	    {
 	      q = ComplexMatrix (tmp_data, m, m);
-	      tmp_data = 0;
 	      q.resize (m, n2);
 	    }
 	}
     }
-
-  delete [] tau;
-  tau = 0;
-
-  delete [] tmp_data;
-  tmp_data = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -33,52 +33,43 @@ class ostream;
 #include "CMatrix.h"
 #include "dbleQR.h"
 
 class
 ComplexQR
 {
 public:
 
-  ComplexQR (void) : q (), r (), tau (0), work (0), tmp_data (0) { }
+  ComplexQR (void) : q (), r () { }
 
   ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
   ComplexQR (const ComplexQR& a) : q (a.q), r (a.r) { }
 
   ComplexQR& operator = (const ComplexQR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
-  ~ComplexQR (void)
-    {
-      delete [] tau;
-      delete [] work;
-      delete [] tmp_data;
-    }
+  ~ComplexQR (void) { }
 
   ComplexMatrix Q (void) const { return q; }
   ComplexMatrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const ComplexQR& a);
 
 protected:
 
   ComplexMatrix q;
   ComplexMatrix r;
-
-  Complex *tau;
-  Complex *work;
-  Complex *tmp_data;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -42,61 +42,59 @@ extern "C"
 
   int F77_FCN (dorgqr, DORGQR) (const int&, const int&, const int&,
 				double*, const int&, double*, double*,
 				const int&, int&);
 }
 
 QR::QR (const Matrix& a, QR::type qr_type)
 {
-  tau = 0;
-  work = 0;
-  tmp_data = 0;
-
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
   int min_mn = m < n ? m : n;
-  tau = new double[min_mn];
+  Array<double> tau (min_mn);
+  double *ptau = tau.fortran_vec ();
 
   int lwork = 32*n;
-  work = new double[lwork];
+  Array<double> work (lwork);
+  double *pwork = work.fortran_vec ();
 
   int info = 0;
 
+  Matrix A_fact;
   if (m > n)
     {
-      tmp_data = new double [m*m];
-      copy (tmp_data, a.data (), a.length ());
+      A_fact.resize (m, m);
+      A_fact.insert (a, 0, 0);
     }
   else
-    tmp_data = dup (a.data (), a.length ());
+    A_fact = a;
 
-  F77_XFCN (dgeqrf, DGEQRF, (m, n, tmp_data, m, tau, work, lwork, info));
+  double *tmp_data = A_fact.fortran_vec ();
 
-  delete [] work;
-  work = 0;
+  F77_XFCN (dgeqrf, DGEQRF, (m, n, tmp_data, m, ptau, pwork, lwork, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeqrf");
   else
     {
       if (qr_type == QR::raw)
 	{
 	  for (int j = 0; j < min_mn; j++)
 	    {
 	      int limit = j < min_mn - 1 ? j : min_mn - 1;
 	      for (int i = limit + 1; i < m; i++)
-		tmp_data[m*j+i] *= tau[j];
+		A_fact.elem (i, j) *= tau.elem (j);
 	    }
 	}
       else
 	{
 	  volatile int n2;
 
 	  if (qr_type == QR::economy && m > n)
 	    {
@@ -112,41 +110,32 @@ QR::QR (const Matrix& a, QR::type qr_typ
 	  for (int j = 0; j < n; j++)
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
 		r.elem (i, j) = tmp_data[m*j+i];
 	    }
 
 	  lwork = 32*m;
-	  work = new double[lwork];
+	  work.resize (lwork);
+	  double *pwork = work.fortran_vec ();
 
-	  F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, tau, work,
-				     lwork, info));
-
-	  delete [] work;
-	  work = 0;
+	  F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, ptau,
+				     pwork, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in dorgqr");
 	  else
 	    {
 	      q = Matrix (tmp_data, m, m);
-	      tmp_data = 0;
 	      q.resize (m, n2);
 	    }
 	}
     }
-
-  delete [] tau;
-  tau = 0;
-
-  delete [] tmp_data;
-  tmp_data = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -39,53 +39,44 @@ public:
 
   enum type
     {
       std,
       raw,
       economy,
     };
 
-  QR (void) : q (), r (), tau (0), work (0), tmp_data (0) { }
+  QR (void) : q (), r () { }
 
   QR (const Matrix& A, type qr_type = QR::std);
 
   QR (const QR& a) : q (a.q), r (a.r) { }
 
   QR& operator = (const QR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
-  ~QR (void)
-    {
-      delete [] tau;
-      delete [] work;
-      delete [] tmp_data;
-    }
+  ~QR (void) { }
 
   Matrix Q (void) const { return q; }
 
   Matrix R (void) const { return r; }
 
   friend ostream&  operator << (ostream& os, const QR& a);
 
 protected:
 
   Matrix q;
   Matrix r;
-
-  double *tau;
-  double *work;
-  double *tmp_data;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
