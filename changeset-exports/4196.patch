# HG changeset patch
# User jwe
# Date 1037831221 0
#      Wed Nov 20 22:27:01 2002 +0000
# Node ID f874c6c6884532a77b67aeb4f1ad87335c9373a6
# Parent  f6be18b3136efa4ca7fc272ed40a859b97d856c0
[project @ 2002-11-20 22:27:01 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2002-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* configure.in (OCTAVE_CXX_PRAGMA_INTERFACE_IMPLEMENTATION):
+	Delete use.
+
 	* aclocal.m4 (OCTAVE_LANG_PROG_NO_CONFDEFS): Delete.
 	(OCTAVE_CXX_PRAGMA_INTERFACE_IMPLEMENTATION): Delete.
 
 2002-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for dlopen last, to avoid broken
 	compatibility libraries.
 	Default value for SHLLIB is '$(SHLEXT)', not $SHLEXT.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.393 $)
+AC_REVISION($Revision: 1.394 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -312,17 +312,16 @@ case "$canonical_host_type" in
   ;;
 esac
 if test -n "$LD_STATIC_FLAG"; then
   AC_MSG_RESULT([defining LD_STATIC_FLAG to be $LD_STATIC_FLAG])
 fi
 AC_SUBST(LD_STATIC_FLAG)
 
 OCTAVE_CXX_PREPENDS_UNDERSCORE
-OCTAVE_CXX_PRAGMA_INTERFACE_IMPLEMENTATION
 
 ### Defaults for cross compiling.  BUILD_CC and BUILD_CXX are
 ### the compilers that we use for building tools on the build system.
 ### For now, we assume that the only cross compiling we can do is
 ### with gcc on a Unixy system.
 
 if test "$cross_compiling" = yes; then
   BUILD_CC="gcc"
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+2002-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.h (BEGIN_INTERRUPT_WITH_EXCEPTIONS,
+	END_INTERRUPT_WITH_EXCEPTIONS): Only define for C++ source.
+	Include <new> for C++ source.
+
 2002-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/quit.h, misc/quit.cc [! USE_EXCEPTIONS_FOR_INTERRUPTS]):
 	Always use exceptions for handling interrupts.
 	(BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE): 
 
 	* misc/quit.h (OCTAVE_TRY_WITH_INTERRUPTS, OCTAVE_THROW_BAD_ALLOC,
 	OCTAVE_CATCH_INTERRUPTS, SAVE_OCTAVE_INTERRUPT_IMMEDIATELY,
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -27,16 +27,20 @@ Software Foundation, 59 Temple Place - S
 extern "C" {
 #endif
 
 #include <stdio.h>
 
 #include <signal.h>
 #include <setjmp.h>
 
+#ifdef __cplusplus
+#include <new>
+#endif
+
 #if defined (OCTAVE_HAVE_SIG_JUMP)
 
 typedef sigjmp_buf octave_jmp_buf;
 
 #define octave_set_current_context sigsetjmp (current_context, 1)
 
 #else
 
@@ -104,16 +108,18 @@ extern void octave_throw_bad_alloc (void
 
 #define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
 	  octave_interrupt_immediately--; \
           octave_restore_current_context ((char *) saved_context); \
         } \
     } \
   while (0)
 
+#ifdef __cplusplus
+
 #define BEGIN_INTERRUPT_WITH_EXCEPTIONS \
   sig_atomic_t saved_octave_interrupt_immediately = octave_interrupt_immediately; \
  \
   try \
     { \
       octave_interrupt_immediately = 0;
 
 #define END_INTERRUPT_WITH_EXCEPTIONS \
@@ -126,16 +132,17 @@ extern void octave_throw_bad_alloc (void
   catch (std::bad_alloc) \
     { \
       octave_interrupt_immediately = saved_octave_interrupt_immediately; \
       octave_allocation_error = 1; \
       octave_jump_to_enclosing_context (); \
     } \
  \
   octave_interrupt_immediately = saved_octave_interrupt_immediately
+#endif
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
 /*
