# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255588687 -7200
#      Thu Oct 15 08:38:07 2009 +0200
# Node ID b7b89061bd0e5164d36c2cd951e797d077e1c51d
# Parent  aea3a3a950e18e159faeb1734aa22b6538ff0e65
reimplement median using nth_element

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* statistics/base/median.m: Rewrite using nth_element.
+
 2009-10-01  John W. Eaton  <jwe@octave.org>
 
 	* image/__img__.m: Adjust xlim and ylim correctly.
 
 2009-10-01  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (plot/gnuplot_binary.m): New rule.
 	(DOCSTRINGS): Depend on plot/gnuplot_binary.m.
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -1,10 +1,11 @@
 ## Copyright (C) 1996, 1997, 1998, 1999, 2000, 2004, 2005, 2006, 2007,
 ##               2008, 2009 John W. Eaton
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -48,49 +49,26 @@
 ## Author: jwe
 
 function retval = median (a, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
   if (nargin < 2)
-    dim = find (size (a) > 1, 1);
-    if (isempty (dim))
-      dim = 1;
-    endif
+    dim = [find(size (a) != 1, 1), 1](1); # First non-singleton dim.
   endif
 
-  sz = size (a);
-  s = sort (a, dim);
   if (numel (a) > 0)
-    if (numel (a) == sz(dim))
-      if (rem (sz(dim), 2) == 0)
-	i = sz(dim) / 2;
-	retval = (s(i) + s(i+1)) / 2;
-      else
-	i = ceil (sz(dim) /2);
-	retval = s(i);
-      endif
+    n = size (a, dim);
+    k = floor ((n+1) / 2);
+    if (mod (n, 2) == 1)
+      retval = nth_element (a, k, dim);
     else
-      idx = cell ();
-      nd = length (sz);
-      for i = 1:nd
-	idx{i} = 1:sz(i);
-      endfor
-      if (rem (sz(dim), 2) == 0)
-	i = sz(dim) / 2;
-	idx{dim} = i;
-	retval = s(idx{:});
-	idx{dim} = i+1;
-	retval = (retval + s(idx{:})) / 2;
-      else
-	idx{dim} = ceil (sz(dim) / 2);
-	retval = s(idx{:});
-      endif
+      retval = mean (nth_element (a, k:k+1, dim), dim);
     endif
   else
     error ("median: invalid matrix argument");
   endif
 
 endfunction
 
 %!test
