# HG changeset patch
# User dbateman
# Date 1178949004 0
#      Sat May 12 05:50:04 2007 +0000
# Node ID 3a53d0f3e0e446cb8469e8a5badc6ecba3f04ce6
# Parent  b85dd243601d3e8f9a8ffa78763db2c7f0bf9876
[project @ 2007-05-12 05:50:03 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2007-05-12  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m: Add a "-verbose" option that allows all output of an
+	install to be printed. An error in the on_uninstall script causes
+	a failure to uninstall. Place oct- and mex-files in an
+	architecture dependent directory.
+
 2007-05-09  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Break plot command over multiple lines.
 
 2007-05-09  G. D. McBain  <geordie.mcbain@aeromech.usyd.edu.au>
 
 	* statistics/distributions/normcdf.m: Use standard deviation
 	instead of variance for compatibility.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -39,16 +39,19 @@
 ##
 ## If @var{option} is @code{-noauto} the package manager will not
 ## automatically load the installed package when starting Octave,
 ## even if the package requests that it is.
 ##
 ## If @var{option} is @code{-auto} the package manager will
 ## automatically load the installed package when starting Octave,
 ## even if the package requests that it isn't.
+##
+## Final if @var{option} is @code{-verbose} the package manager will
+## print the output of all of the commands that are performed
 ## @item uninstall
 ## Uninstall named packages.  For example,
 ## @example
 ## pkg uninstall image
 ## @end example
 ## @noindent
 ## removes the @code{image} package from the system. If another installed
 ## package depends on the @code{image} package an error will be issued.
@@ -147,24 +150,27 @@ function [local_packages, global_package
   ## Handle input
   if (length (varargin) == 0 || ! iscellstr (varargin))
     print_usage ();
   endif
   files = {};
   deps = true;
   auto = 0;
   action = "none";
+  verbose = false;
   for i = 1:length (varargin)
     switch (varargin{i})
       case "-nodeps"
 	deps = false;
       case "-noauto"
 	auto = -1;
       case "-auto"
 	auto = 1;
+      case "-verbose"
+	verbose = true;
       case {"list", "install", "uninstall", "load", "unload", ...
 	    "prefix", "local_list", "global_list"}
 	action = varargin{i};
       otherwise
 	files{end+1} = varargin{i};
     endswitch
   endfor
 
@@ -181,23 +187,23 @@ function [local_packages, global_package
       else
 	error ("too many output arguments requested");
       endif
 
     case "install"
       if (length (files) == 0)
 	error ("you must specify at least one filename when calling 'pkg install'");
       endif
-      install (files, deps, auto, prefix, local_list, global_list);
+      install (files, deps, auto, prefix, verbose, local_list, global_list);
 
     case "uninstall"
       if (length (files) == 0)
 	error ("you must specify at least one package when calling 'pkg uninstall'");
       endif
-      uninstall (files, deps, local_list, global_list);
+      uninstall (files, deps, verbose, local_list, global_list);
 
     case "load"
       if (length (files) == 0)
 	error ("you must specify at least one package, 'all' or 'auto' when calling 'pkg load'");
       endif
       load_packages (files, deps, local_list, global_list);
 
     case "unload"
@@ -255,17 +261,17 @@ if (isfield (desc{1}, "autoload"))
 			 || strcmpi (a, "on")
 			 || strcmpi (a, "yes")
 			 || strcmpi (a, "1"))))
     auto = true;
   endif
 endif
 endfunction
 
-function install (files, handle_deps, autoload, prefix, local_list, global_list)
+function install (files, handle_deps, autoload, prefix, verbose, local_list, global_list)
   global_install = issuperuser ();
 
   # Check that the directory in prefix exist. If it doesn't: create it!
   if (! exist (prefix, "dir"))
     warning ("creating installation directory %s", prefix);
     [status, msg] = mkdir (prefix);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
@@ -385,30 +391,30 @@ function install (files, handle_deps, au
   endif
 
   ## Prepare each package for installation
   try
     for i = 1:length (descriptions)
       desc = descriptions{i};
       pdir = packdirs{i};
       prepare_installation (desc, pdir);
-      configure_make (desc, pdir);
+      configure_make (desc, pdir, verbose);
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     error (lasterr()(8:end));
   end_try_catch
 
   ## Uninstall the packages that will be replaced
   try
     for i = packages_to_uninstall
-      uninstall ({installed_packages{i}.name}, false, local_list, 
+      uninstall ({installed_packages{i}.name}, false, verbose, local_list, 
 		 global_list);
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     error (lasterr()(8:end));
@@ -484,26 +490,30 @@ function install (files, handle_deps, au
     [status, msg] = rm_rf (tmpdirs{i});
     if (status != 1)
       warning ("couldn't clean up after my self: %s\n", msg);
     endif
   endfor
 
   ## Add the newly installed packages to the path, so the user
   ## can begin usings them.
+  arch = getarch();
   if (length (descriptions) > 0)
-    dirs = cell (1, length (descriptions));
+    dirs = {};
     for i = 1:length (descriptions)
-      dirs{i} = descriptions{i}.dir;
+      dirs{end + 1} = descriptions{i}.dir;
+      if (exist (fullfile (descriptions{i}.dir, arch), "dir"))
+	dirs{end + 1} = fullfile (descriptions{i}.dir, arch);
+      endif
     endfor
     addpath (dirs{:});
   endif
 endfunction
 
-function uninstall (pkgnames, handle_deps, local_list, global_list)
+function uninstall (pkgnames, handle_deps, verbose, local_list, global_list)
   ## Get the list of installed packages
   [local_packages, global_packages] = installed_packages(local_list, 
 							 global_list);
   if (issuperuser ())
     installed_packages = {local_packages{:}, global_packages{:}};
   else
     installed_packages = local_packages;
   endif
@@ -568,30 +578,26 @@ function uninstall (pkgnames, handle_dep
     endif
   endif
 
   ## Delete the directories containing the packages
   for i = delete_idx
     desc = installed_packages{i};
     ## If an 'on_uninstall.m' exist, call it!
     if (exist (fullfile (desc.dir, "packinfo", "on_uninstall.m"), "file"))
-      try
-	wd = pwd ();
-	cd (fullfile(desc.dir, "packinfo"));
-	on_uninstall (desc);
-	cd (wd);
-      catch
-	## XXX: Should this rather be an error?
-	warning ("the 'on_uninstall' script retsurned the following error: %s",
-		 lasterr ());
-	cd (wd);
-      end_try_catch
+      wd = pwd ();
+      cd (fullfile(desc.dir, "packinfo"));
+      on_uninstall (desc);
+      cd (wd);
     endif
     ## Do the actual deletion
     rmpath (desc.dir);
+    if (exist (fullfile (desc.dir, getarch()), "dir"))
+      rmpath (fullfile (desc.dir, getarch ()));
+    endif
     if (exist (desc.dir, "dir"))
       [status, msg] = rm_rf (desc.dir);
       if (status != 1)
 	error ("couldn't delete directory %s: %s", desc.dir, msg);
       endif
     else
       warning ("directory %s previously lost", desc.dir);
     endif
@@ -642,49 +648,59 @@ function prepare_installation (desc, pac
     if (status != 1)
       rm_rf (desc.dir);
       error ("the 'inst' directory did not exist and could not be created: %s", 
 	     msg);
     endif
   endif
 endfunction
 
-function configure_make (desc, packdir)   
+function configure_make (desc, packdir, verbose)   
   ## Perform ./configure, make, make install in "src"
   if (exist (fullfile (packdir, "src"), "dir"))
     src = fullfile (packdir, "src");
     ## configure
     if (exist (fullfile (src, "configure"), "file"))
       [status, output] = system (strcat ("cd ", src, "; ./configure --prefix=",
 					 desc.dir));
+      if (verbose)
+	printf("%s", output);
+      endif
       if (status != 0)
 	rm_rf (desc.dir);
 	error ("the configure script returned the following error: %s", output);
       endif
     endif
 
     ## make
     if (exist (fullfile (src, "Makefile"), "file"))
       [status, output] = system (strcat ("export INSTALLDIR=", desc.dir,
 					 "; make -C ", src));
+      if (verbose)
+	printf("%s", output);
+      endif
       if (status != 0)
 	rm_rf (desc.dir);
 	error ("'make' returned the following error: %s", output);
       endif
       %# make install
       %[status, output] = system(["export INSTALLDIR=" desc.dir "; make install -C " src]);
+      %if (verbose)
+      %  printf("%s", output);
+      %endif
       %if (status != 0)
       %    rm_rf(desc.dir);
       %    error("'make install' returned the following error: %s", output);
       %endif
     endif
 
-    ## Copy files to "inst" (this is instead of 'make install')
+    ## Copy files to "inst" and "inst/arch" (this is instead of 'make install')
     files = fullfile (src, "FILES");
     instdir = fullfile (packdir, "inst");
+    archdir = fullfile (packdir, "inst", getarch ());
     if (exist (files, "file"))
       ## Get file names
       [fid, msg] = fopen (files, "r");
       if (fid < 0)
 	error ("couldn't open %s: %s", files, msg);
       endif
       filenames = char (fread (fid))';
       fclose (fid);
@@ -698,40 +714,71 @@ function configure_make (desc, packdir)
 	if (! all (isspace (fn{i})))
 	  fn{i} = fullfile (src, fn{i});
 	else
 	  delete_idx(end+1) = i;
 	endif
       endfor
       fn(delete_idx) = [];
       filenames = sprintf ("%s ", fn{:});
+
+      filenames = split_by (filenames, " ");
+      archindependent = filenames;
+      mex = regexp (filenames, '^.*\.mex');
+      archindependent(cellfun ("isempty", mex) == 0) = [];
+      mex (cellfun ("isempty", mex)) = [];
+      mex = cellfun (@(x) x(1), mex);
+      oct = regexp (filenames, '^.*\.oct');
+      archindependent(cellfun ("isempty", oct) == 0) = [];
+      oct (cellfun ("isempty", oct)) = [];
+      oct = cellfun (@(x) x(1), oct);
+      archdependent = [oct, mex];
     else
       m = dir (fullfile (src, "*.m"));
       oct = dir (fullfile (src, "*.oct"));
       mex = dir (fullfile (src, "*.mex"));
+      archdependent = "";
+      archindependent = "";
       filenames = "";
       if (length (m) > 0)
 	filenames = sprintf (fullfile (src, "%s "), m.name);
+	archindependent = sprintf (fullfile (src, "%s "), m.name);
       endif
       if (length (oct) > 0)
 	filenames = [filenames, " ", sprintf(fullfile(src, "%s "), oct.name)];
+	archdependent = [archdependent, " ", ...
+			 sprintf(fullfile(src, "%s "), oct.name)];
       endif
       if (length (mex) > 0)
 	filenames = [filenames, " ", sprintf(fullfile(src, "%s "), mex.name)];
+	archdependent = [archdependent, " ", ...
+			 sprintf(fullfile(src, "%s "), mex.name)];
       endif
+      filenames = split_by (filenames, " ");
+      archdependent = split_by (archdependent, " ");
+      archindependent = split_by (archindependent, " ");
     endif
-    filenames = split_by (filenames, " ");
 
     if (! all (isspace (filenames)))
 	mkdir (instdir);
-	[status, output] = copyfile (filenames, instdir);
-	if (status != 1)
+	if (! all (isspace (archindependent)))
+	  [status, output] = copyfile (archindependent, instdir);
+	  if (status != 1)
 	    rm_rf (desc.dir);
 	    error ("Couldn't copy files from 'src' to 'inst': %s", output);
-	endif
+	  endif
+        endif
+	if (! all (isspace (archdependent)))
+	  mkdir (archdir);
+	  [status, output] = copyfile (archdependent, archdir);
+	  if (status != 1)
+	    rm_rf (desc.dir);
+	    error ("Couldn't copy files from 'src' to 'inst': %s", output);
+	  endif
+        endif
     endif
   endif
 endfunction
 
 function pkg = extract_pkg (nm, pat)
   fid = fopen (nm, "rt");
   pkg = "";
   if (fid >= 0)
@@ -1291,16 +1338,30 @@ function load_packages (files, handle_de
 	  endif
 	  dirs{end+1} = pdirs{idx};
 	endfor
       endif
     endfor
     dirs = unique(dirs);
   endif
 
+  ## Check for architecture dependent directories
+  arch = getarch();
+  archdirs = {};
+  for i = 1:length (dirs)
+    tmpdir = fullfile (dirs{i}, arch);
+    if (exist (tmpdir, "dir"))
+      archdirs{end + 1} = dirs{i};
+      archdirs{end + 1} = tmpdir;
+    endif
+  endfor
+  if (length (archdirs) > 0)
+    dirs = archdirs;
+  endif
+
   ## Load the packages
   if (length (dirs) > 0)
     addpath (dirs{:});
   endif
 
   ## Add local binaries, if any, to the EXEC_PATH
   for i = 1:length (dirs)
    if (exist (fullfile (dirs{i}, "bin"), "dir"))
@@ -1334,16 +1395,30 @@ function unload_packages (files, handle_
       idx = strcmp (pnames, files{i});
       if (! any (idx))
 	error ("package %s is not installed", files{i});
       endif
 	dirs{end+1} = pdirs{idx};
       endfor
   endif
 
+  ## Check for architecture dependent directories
+  arch = getarch();
+  archdirs = {};
+  for i = 1:length (dirs)
+    tmpdir = fullfile (dirs{i}, arch);
+    if (exist (tmpdir, "dir"))
+      archdirs{end + 1} = dirs{i};
+      archdirs{end + 1} = tmpdir;
+    endif
+  endfor
+  if (length (archdirs) > 0)
+    dirs = archdirs;
+  endif
+
   ## Unload the packages
   for i = 1:length (dirs)
     d = dirs{i};
     idx = strcmp (p, d);
     if (any (idx))
       rmpath (d);
       ## XXX: We should also check if we need to remove items from EXEC_PATH
     endif
@@ -1383,8 +1458,14 @@ function emp = dirempty (nm, ign)
     endfor
     if (! found)
       emp = false;
       return
     endif
   endfor
   emp = true;
 endfunction
+
+function arch = getarch ()
+  persistent _arch = [octave_config_info("canonical_host_type"), "-", ...
+   octave_config_info("api_version")];
+  arch = _arch;
+endfunction
