# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361771135 18000
#      Mon Feb 25 00:45:35 2013 -0500
# Node ID 2f4fa62089b30146aedac9d9f4a2ba8d2fac23f8
# Parent  9720ecf8d25744bca6bba474179f03615420cf68
improve end of file handling for lexer input

* input.h, input.cc, oct-parse.yy (input_from_eval_string_pending):
Delete variable and all uses.
(gnu_readline, interactive_input, octave_gets, get_user_input):
New argument, eof.
(octave_gets): Pass eof to gnu_readline and interactive_input.
(get_user_input): Simplify handling of eval string input.  Pass eof to
octave_gets.
(octave_read): New static variable, eof.  Pass eof to get_user_input.
Simplify end of file handling.  Return error condition if eof is not
true when there are no more characters to read.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -95,20 +95,16 @@ octave_time Vlast_prompt_time = 0.0;
 static char Vcompletion_append_char = ' ';
 
 // Global pointer for eval().
 std::string current_eval_string;
 
 // TRUE means get input from current_eval_string.
 bool get_input_from_eval_string = false;
 
-// TRUE means we haven't been asked for the input from
-// current_eval_string yet.
-bool input_from_eval_string_pending = false;
-
 // TRUE means that input is coming from a file that was named on
 // the command line.
 bool input_from_command_line_file = false;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 bool stdin_is_tty = false;
 
 // TRUE means we're parsing a function file.
@@ -186,26 +182,26 @@ do_input_echo (const std::string& input_
 
           if (input_string[input_string.length () - 1] != '\n')
             octave_stdout << "\n";
         }
     }
 }
 
 std::string
-gnu_readline (const std::string& s, bool force_readline)
+gnu_readline (const std::string& s, bool& eof, bool force_readline)
 {
   octave_quit ();
 
+  eof = false;
+
   std::string retval;
 
   if (line_editing || force_readline)
     {
-      bool eof;
-
       retval = command_editor::readline (s, eof);
 
       if (! eof && retval.empty ())
         retval = "\n";
     }
   else
     {
       if (! s.empty () && (interactive || forced_interactive))
@@ -216,24 +212,32 @@ gnu_readline (const std::string& s, bool
           gnulib::fflush (stream);
         }
 
       FILE *curr_stream = command_editor::get_input_stream ();
 
       if (reading_fcn_file || reading_script_file || reading_classdef_file)
         curr_stream = ff_instream;
 
-      retval = octave_fgets (curr_stream);
+      retval = octave_fgets (curr_stream, eof);
     }
 
   return retval;
 }
 
+extern std::string
+gnu_readline (const std::string& s, bool force_readline)
+{
+  bool eof = false;
+
+  return gnu_readline (s, eof, force_readline);
+}
+
 static inline std::string
-interactive_input (const std::string& s, bool force_readline = false)
+interactive_input (const std::string& s, bool& eof, bool force_readline)
 {
   Vlast_prompt_time.stamp ();
 
   if (Vdrawnow_requested && (interactive || forced_interactive))
     {
       feval ("drawnow");
 
       flush_octave_stdout ();
@@ -242,24 +246,34 @@ interactive_input (const std::string& s,
       // in drawnow so that the error doesn't reappear at every prompt.
 
       Vdrawnow_requested = false;
 
       if (error_state)
         return "\n";
     }
 
-  return gnu_readline (s, force_readline);
+  return gnu_readline (s, eof, force_readline);
+}
+
+static inline std::string
+interactive_input (const std::string& s, bool force_readline = false)
+{
+  bool eof = false;
+
+  return interactive_input (s, eof, force_readline);
 }
 
 static std::string
-octave_gets (void)
+octave_gets (bool& eof)
 {
   octave_quit ();
 
+  eof = false;
+
   std::string retval;
 
   bool history_skip_auto_repeated_debugging_command = false;
 
   if ((interactive || forced_interactive)
       && (! (reading_fcn_file
              || reading_classdef_file
              || reading_script_file
@@ -275,17 +289,17 @@ octave_gets (void)
 
       flush_octave_stdout ();
 
       octave_pager_stream::reset ();
       octave_diary_stream::reset ();
 
       octave_diary << prompt;
 
-      retval = interactive_input (prompt);
+      retval = interactive_input (prompt, eof, false);
 
       // There is no need to update the load_path cache if there is no
       // user input.
       if (! retval.empty ()
           && retval.find_first_not_of (" \t\n\r") != std::string::npos)
         {
           load_path::update ();
 
@@ -296,17 +310,17 @@ octave_gets (void)
         }
       else if (Vdebugging)
         {
           retval = last_debugging_command;
           history_skip_auto_repeated_debugging_command = true;
         }
     }
   else
-    retval = gnu_readline ("");
+    retval = gnu_readline ("", eof, false);
 
   current_input_line = retval;
 
   if (! current_input_line.empty ())
     {
       if (! (input_from_startup_file || input_from_command_line_file
              || history_skip_auto_repeated_debugging_command))
         command_history::add (current_input_line);
@@ -325,60 +339,62 @@ octave_gets (void)
     octave_diary << "\n";
 
   return retval;
 }
 
 // Read a line from the input stream.
 
 static std::string
-get_user_input (void)
+get_user_input (bool& eof)
 {
   octave_quit ();
 
+  eof = false;
+
   std::string retval;
 
   if (get_input_from_eval_string)
     {
-      if (input_from_eval_string_pending)
-        {
-          input_from_eval_string_pending = false;
+      retval = current_eval_string;
 
-          retval = current_eval_string;
+      size_t len = retval.length ();
 
-          size_t len = retval.length ();
+      // Clear the global eval string so that the next call will return
+      // an empty character string with EOF = true.
+      current_eval_string = "";
 
-          if (len > 0 && retval[len-1] != '\n')
-            retval.append ("\n");
-        }
+      eof = true;
     }
   else
-    retval = octave_gets ();
+    retval = octave_gets (eof);
 
   current_input_line = retval;
 
   return retval;
 }
 
 int
 octave_read (char *buf, unsigned max_size)
 {
   // FIXME -- is this a safe way to buffer the input?
 
   static const char * const eol = "\n";
   static std::string input_buf;
   static const char *pos = 0;
   static size_t chars_left = 0;
+  static bool eof = false;
 
   int status = 0;
+
   if (chars_left == 0)
     {
       pos = 0;
 
-      input_buf = get_user_input ();
+      input_buf = get_user_input (eof);
 
       chars_left = input_buf.length ();
 
       pos = input_buf.c_str ();
     }
 
   if (chars_left > 0)
     {
@@ -405,24 +421,19 @@ octave_read (char *buf, unsigned max_siz
               // in the buffer so make sure it is returned on the next
               // octave_read call.
               pos = eol;
               chars_left = 1;
             }
         }
 
       status = len;
-
-    }
-  else if (chars_left == 0)
-    {
-      status = 0;
     }
   else
-    status = -1;
+    status = eof ? 0 : -1;
 
   return status;
 }
 
 // Fix things up so that input can come from file 'name', printing a
 // warning if the file doesn't exist.
 
 FILE *
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -40,20 +40,16 @@ extern OCTINTERP_API FILE *get_input_fro
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
 // Global pointer for eval().
 extern std::string current_eval_string;
 
 // TRUE means get input from current_eval_string.
 extern bool get_input_from_eval_string;
 
-// TRUE means we haven't been asked for the input from
-// current_eval_string yet.
-extern bool input_from_eval_string_pending;
-
 // TRUE means that input is coming from a file that was named on
 // the command line.
 extern bool input_from_command_line_file;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 extern bool stdin_is_tty;
 
 // TRUE means we're parsing a function file.
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -4310,33 +4310,31 @@ eval_string (const std::string& s, bool 
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   frame.protect_var (input_line_number);
   frame.protect_var (current_input_column);
   frame.protect_var (get_input_from_eval_string);
-  frame.protect_var (input_from_eval_string_pending);
   frame.protect_var (parser_end_of_input);
   frame.protect_var (line_editing);
   frame.protect_var (current_eval_string);
   frame.protect_var (current_function_depth);
   frame.protect_var (function_scopes);
   frame.protect_var (max_function_depth);
   frame.protect_var (parsing_subfunctions);
   frame.protect_var (endfunction_found);
   frame.protect_var (reading_fcn_file);
   frame.protect_var (reading_script_file);
   frame.protect_var (reading_classdef_file);
 
   input_line_number = 1;
   current_input_column = 1;
   get_input_from_eval_string = true;
-  input_from_eval_string_pending = true;
   parser_end_of_input = false;
   line_editing = false;
   current_function_depth = 0;
   function_scopes.clear ();
   max_function_depth = 0;
   parsing_subfunctions = false;
   endfunction_found = false;
   reading_fcn_file = false;
