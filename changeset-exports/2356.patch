# HG changeset patch
# User jwe
# Date 840595206 0
#      Wed Aug 21 02:40:06 1996 +0000
# Node ID de9eb7bd4405d2a41f93baaf1e4a5b76193f19a1
# Parent  c9f70d39255fd00ab984edc8dd8bdc57c20f30c2
[project @ 1996-08-21 02:40:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 Tue Aug 20 17:38:46 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* idx-vector.cc (IDX_VEC_REP::is_colon_equiv): Rename arg sort to
+	sort_uniq.  If sort_uniq is nonzero, sort the elements and make
+	them uniq.
+
 	* CMatrix.cc (ComplexMatrix::row_max, ComplexMatrix::row_min,
 	ComplexMatrix::column_max, ComplexMatrix::column_min):
 	Rewrite.  Also return index as a reference arg.
 	(ComplexMatrix::row_max_loc, ComplexMatrix::row_min_loc,
 	ComplexMatrix::column_max_loc, ComplexMatrix::column_min_loc):
 	Delete.
 
 	* dMatrix.cc (Matrix::row_max, Matrix::row_min,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -373,32 +373,36 @@ copy_data (const int *d, int l)
 
   for (int ii = 0; ii < l; ii++)
     new_data[ii] = d[ii];
 
   return new_data;
 }
 
 int
-IDX_VEC_REP::is_colon_equiv (int n, int sort)
+IDX_VEC_REP::is_colon_equiv (int n, int sort_uniq)
 {
   if (! colon_equiv_checked)
     {
       if (colon)
 	{
 	  colon_equiv = 1;
 	}
       else if (len > 0 && len > 1 && ! one_zero)
 	{
 	  int *tmp_data = copy_data (data, len);
 
-	  if (sort)
-	    sort_data (tmp_data, len);
+	  int tmp_len = len;
 
-	  int tmp_len = make_uniq (tmp_data, len);
+	  if (sort_uniq)
+	    {
+	      sort_data (tmp_data, len);
+
+	      tmp_len = make_uniq (tmp_data, len);
+	    }
 
 	  colon_equiv = ((tmp_len == 0 && n == 0)
 			 || (tmp_len == n
 			     && tmp_data[0] == 0
 			     && tmp_data[tmp_len-1] == tmp_len - 1));
 
 	  delete [] tmp_data;
 	}
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -85,17 +85,17 @@ private:
     int max (void) const { return max_val; }
     int min (void) const { return min_val; }
 
     int one_zero_only (void) const { return one_zero; }
     int zeros_count (void) const { return num_zeros; }
     int ones_count (void) const { return num_ones; }
 
     int is_colon (void) const { return colon; }
-    int is_colon_equiv (int n, int sort);
+    int is_colon_equiv (int n, int sort_uniq);
 
     int orig_rows (void) const { return orig_nr; }
     int orig_columns (void) const { return orig_nc; }
 
     // other stuff
 
     void shorten (int n); // Unsafe.  Avoid at all cost.
 
@@ -198,18 +198,18 @@ public:
   int idx_vector::max (void) const { return rep->max (); }
   int idx_vector::min (void) const { return rep->min (); }
 
   int idx_vector::one_zero_only (void) const { return rep->one_zero_only (); }
   int idx_vector::zeros_count (void) const { return rep->zeros_count (); }
   int idx_vector::ones_count (void) const { return rep->ones_count (); }
 
   int is_colon (void) const { return rep->is_colon (); }
-  int is_colon_equiv (int n, int sort = 0) const
-    { return rep->is_colon_equiv (n, sort); }
+  int is_colon_equiv (int n, int sort_uniq = 0) const
+    { return rep->is_colon_equiv (n, sort_uniq); }
 
   int orig_rows (void) const { return rep->orig_rows (); }
   int orig_columns (void) const { return rep->orig_columns (); }
 
 // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
 
 // i/o
