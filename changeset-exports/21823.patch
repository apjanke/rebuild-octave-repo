# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1465012593 25200
#      Fri Jun 03 20:56:33 2016 -0700
# Node ID 49d999dc443f4ac191ead6417b62bcf97547d003
# Parent  16bb4651a54d97cdc0fd3e00891dae94bc258f45
# Parent  e56ba70108d37f8977fc9081b8b2deb1e91bc21b
maint: Periodic merge of stable to default.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1515,23 +1515,23 @@ unbox (JNIEnv *jni_env, const octave_val
         UNBOX_PRIMITIVE_SCALAR (int8_t, int8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_uint8_type ())
         UNBOX_PRIMITIVE_SCALAR (uint8_t, uint8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_int16_type ())
         UNBOX_PRIMITIVE_SCALAR (int16_t, int16_scalar, "java/lang/Short", "(S)V");
       else if (val.is_uint16_type ())
         UNBOX_PRIMITIVE_SCALAR (uint16_t, uint16_scalar, "java/lang/Short", "(S)V");
       else if (val.is_int32_type ())
-        UNBOX_PRIMITIVE_SCALAR (int32_t, int32_scalar, "java/lang/Int", "(I)V");
+        UNBOX_PRIMITIVE_SCALAR (int32_t, int32_scalar, "java/lang/Integer", "(I)V");
       else if (val.is_uint32_type ())
-        UNBOX_PRIMITIVE_SCALAR (uint32_t, uint32_scalar, "java/lang/Int", "(I)V");
+        UNBOX_PRIMITIVE_SCALAR (uint32_t, uint32_scalar, "java/lang/Integer", "(I)V");
       else if (val.is_int64_type ())
-        UNBOX_PRIMITIVE_SCALAR (int64_t, int64_scalar, "java/lang/Long", "(L)V");
+        UNBOX_PRIMITIVE_SCALAR (int64_t, int64_scalar, "java/lang/Long", "(J)V");
       else if (val.is_uint64_type ())
-        UNBOX_PRIMITIVE_SCALAR (uint64_t, uint64_scalar, "java/lang/Long", "(L)V");
+        UNBOX_PRIMITIVE_SCALAR (uint64_t, uint64_scalar, "java/lang/Long", "(J)V");
 
 #undef UNBOX_PRIMITIVE_SCALAR
       }
   else if (val.is_empty ())
     {
       jobj = 0;
       jcls = 0;
       //jcls = jni_env->FindClass ("java/lang/Object");
@@ -3123,19 +3123,23 @@ Return true if @var{x} is a Java object.
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 255]), uint8 (255)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 128]), uint8 (128)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 127]), uint8 (127)), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
 
 ## Check we can create objects that wrap java literals (bug #38821).
 %!testif HAVE_JAVA
-%! assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
-%! assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
-%! assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
-%! assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Byte",     uint8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Byte",      int8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Short",   uint16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Short",    int16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Integer", uint32 (1))), "java.lang.Integer");
+%! assert (class (javaObject ("java.lang.Integer",  int32 (1))), "java.lang.Integer");
+%! assert (class (javaObject ("java.lang.Long",    uint64 (1))), "java.lang.Long");
+%! assert (class (javaObject ("java.lang.Long",     int64 (1))), "java.lang.Long");
 
 ## Automatic conversion from string cell array into String[] (bug #45290)
 %!testif HAVE_JAVA
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0);
 */
