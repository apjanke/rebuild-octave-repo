# HG changeset patch
# User Rik <rik@octave.org>
# Date 1412476470 25200
#      Sat Oct 04 19:34:30 2014 -0700
# Node ID bbb1fbd900d4a18de36e8ff548766d2664eaa327
# Parent  841d8f606bcd68a249f77127d134d9722935d73b
ls.m: Return Matlab compatible output when called with functional form.

* ls.m: Return a char array with multiple files per row when called in
functional form.  This is identical to output when called with command
form.  Allow multiple arguments to be bundled into a single string in
functional calling form.  Add BIST tests for this on UNIX platforms.

diff --git a/scripts/miscellaneous/ls.m b/scripts/miscellaneous/ls.m
--- a/scripts/miscellaneous/ls.m
+++ b/scripts/miscellaneous/ls.m
@@ -71,45 +71,60 @@ function retval = ls (varargin)
       idx = ! strncmp (args, '/', 1);
       ## Enclose paths, potentially having spaces, in double quotes:
       args(idx) = strcat ('"', args(idx), '"');    
       ## shell (cmd.exe) on MinGW uses '^' as escape character
       args = regexprep (args, '([^\w.*?])', '^$1');
     else
       ## Escape any special characters in filename
       args = regexprep (args, '([^][\w.*?-])', '\\$1');
+      ## Undo escaped spaces following command args
+      ## Only used for command form where single str contains many args.
+      ## Example: list = ls ("-l /usr/bin")
+      args = regexprep (args, '(-\w+)(?:\\ )+', '$1 ');
     endif
     args = sprintf ("%s ", args{:});
   else
     args = "";
   endif
 
   cmd = [__ls_command__ " " args];
 
   if (page_screen_output () || nargout > 0)
     [status, output] = system (cmd);
 
     if (status != 0)
       error ("ls: command exited abnormally with status %d\n", status);
     elseif (nargout == 0)
       puts (output);
     else
-      retval = strvcat (regexp (output, '\S+', 'match'){:});
+      retval = strvcat (regexp (output, "[\r\n]+", "split"){:});
     endif
   else
     ## Just let the output flow if the pager is off.  That way the
     ## output from things like "ls -R /" will show up immediately and
     ## we won't have to buffer all the output.
     system (cmd);
   endif
 
 endfunction
 
 
 %!test
 %! list = ls ();
 %! assert (ischar (list));
 %! assert (! isempty (list));
 
+%!test
+%! if (isunix ())
+%!   list = ls ("/");
+%!   list = (list')(:)';   # transform to a single row vector
+%!   assert (! isempty (strfind (list, "sbin")));
+%!   list2 = ls ("-l /");
+%!   list2 = (list2')(:)';   # transform to a single row vector
+%!   assert (! isempty (strfind (list2, "sbin")));
+%!   assert (rows (list) == rows (list2));
+%! endif 
+
 %!error <all arguments must be character strings> ls (1)
 ## Test below is valid, but produces confusing output on screen
 %!#error <command exited abnormally> ls ("-!")
 
