# HG changeset patch
# User Pascal Dupuis <Pascal.Dupuis@uclouvain.be>
# Date 1296037233 18000
#      Wed Jan 26 05:20:33 2011 -0500
# Node ID 18e9a8da7d18b30b9899a156554a9b1ecc06f418
# Parent  55ebf5df9ea6d3d37d2cf92b0304165c1558c8a6
eliminate some -Weffc++ warnings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2011-01-26  John W. Eaton  <jwe@octave.org>
+
+2011-01-26  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
+	    John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (scaler::scaler (const std::string&)): New constructor.
+	(graphics_handle::operator++, graphics_hanlde::operator--):
+	Implement as recommended by Effective C++.
+
+	* graphics.h.in (class base_property, class array_property,
+	class children_property, class property, class graphics_xform,
+	class graphics_event): Explicitelly iniatialize
+	all data members in constructor initialisation list.
+	* gl-render.cc (class patch_tesselator): Likewise
+	* graphics.cc (class radio_values, class gh_manager),
+	(class callback_event, class set_event): Likewise.
+
+	* graphics.h.in (class base_graphics_property): Disallow copying.
+	* graphics.cc (class function_event): Likewise.
+	(function_event::function_event (void)): Delete implementation.
+
 2011-01-25  Rik  <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/config-module.awk: Use automake variable for 
 	portability.
 	* Makefile.am (uninstall-oct): Use GNU Make features for portability
 
 2011-01-25  Rik  <octave@nomad.inbox5.com>
 
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -411,17 +411,18 @@ public:
 
 class
 opengl_renderer::patch_tesselator : public opengl_tesselator
 {
 public:
   patch_tesselator (opengl_renderer *r, int cmode, int lmode, int idx = 0)
       : opengl_tesselator (), renderer (r),
         color_mode (cmode), light_mode (lmode), index (idx),
-        first (true) { }
+        first (true), tmp_vdata ()
+  { }
 
 protected:
   void begin (GLenum type)
     {
       //printf("patch_tesselator::begin (%d)\n", type);
       first = true;
 
       if (color_mode == 2 || light_mode == 2)
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -798,16 +798,17 @@ base_property::run_listeners (listener_m
       gh_manager::execute_callback (parent, l(i), octave_value ());
 
       if (error_state)
         break;
     }
 }
 
 radio_values::radio_values (const std::string& opt_string)
+  : default_val (), possible_vals ()
 {
   size_t beg = 0;
   size_t len = opt_string.length ();
   bool done = len == 0;
 
   while (! done)
     {
       size_t end = opt_string.find ('|', beg);
@@ -5513,17 +5514,18 @@ base_graphics_object::get_factory_defaul
 
   return parent_obj.get_factory_default (type () + name);
 }
 
 // We use a random value for the handle to avoid issues with plots and
 // scalar values for the first argument.
 gh_manager::gh_manager (void)
   : handle_map (), handle_free_list (),
-    next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0))
+    next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0)),
+    figure_list (), graphics_lock (), event_queue (), callback_objects ()
 {
   handle_map[0] = graphics_object (new root_figure ());
 
   // Make sure the default graphics toolkit is registered.
   graphics_toolkit::default_toolkit ();
 }
 
 graphics_handle
@@ -5608,17 +5610,19 @@ public:
 
   void execute (void)
     {
       gh_manager::execute_callback (handle, callback_name, callback_data);
     }
 
 private:
   callback_event (void)
-      : base_graphics_event () { }
+    : base_graphics_event (), handle (), 
+      callback_name (), callback_data ()
+  { }
 
 private:
   graphics_handle handle;
   std::string callback_name;
   octave_value callback_data;
 };
 
 class
@@ -5630,22 +5634,29 @@ public:
         function_data (data) { }
 
   void execute (void)
     {
       function (function_data);
     }
 
 private:
-  function_event (void)
-      : base_graphics_event () { }
-
-private:
+  
   graphics_event::event_fcn function;
+
   void* function_data;
+
+  // function_event objects must be created with at least a function.
+  function_event (void);
+
+  // No copying!
+
+  function_event (const function_event &);
+
+  function_event & operator = (const function_event &);
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
              const octave_value& value)
@@ -5656,17 +5667,20 @@ public:
     {
       gh_manager::autolock guard;
 
       xset (handle, property_name, property_value);
     }
 
 private:
   set_event (void)
-      : base_graphics_event () { }
+    : base_graphics_event (), 
+      // FIXME: it it private in order not to be used ? 
+      handle (), property_name (), property_value ()
+  { }
 
 private:
   graphics_handle handle;
   std::string property_name;
   octave_value property_value;
 };
 
 graphics_event
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -78,40 +78,42 @@ public:
 
   double value (void) const { return val; }
 
   octave_value as_octave_value (void) const
   {
     return ok () ? octave_value (val) : octave_value (Matrix ());
   }
 
-  graphics_handle operator ++ (void)
+  // Prefix increment/decrement operators.
+  graphics_handle& operator ++ (void)
   {
     ++val;
     return *this;
   }
 
-  graphics_handle operator ++ (int)
-  {
-    graphics_handle h = *this;
-    ++val;
-    return h;
-  }
-
-  graphics_handle operator -- (void)
+  graphics_handle& operator -- (void)
   {
     --val;
     return *this;
   }
 
-  graphics_handle operator -- (int)
+  // Postfix increment/decrement operators.
+  const graphics_handle operator ++ (int)
   {
-    graphics_handle h = *this;
-    --val;
-    return h;
+    graphics_handle old_value = *this;
+    ++(*this);
+    return old_value;
+  }
+
+  const graphics_handle operator -- (int)
+  {
+    graphics_handle old_value = *this;
+    --(*this);
+    return old_value;
   }
 
   bool ok (void) const { return ! xisnan (val); }
 
 private:
   double val;
 };
 
@@ -249,16 +251,22 @@ private:
 
 class scaler
 {
 public:
   scaler (void) : rep (new base_scaler ()) { }
 
   scaler (const scaler& s) : rep (s.rep->clone()) { }
 
+  scaler (const std::string& s)
+    : rep (s == "log"
+           ? new log_scaler ()
+           : (s == "linear" ? new lin_scaler () : new base_scaler ()))
+    { }
+
   ~scaler (void) { delete rep; }
 
   Matrix scale (const Matrix& m) const
     { return rep->scale (m); }
 
   NDArray scale (const NDArray& m) const
     { return rep->scale (m); }
 
@@ -313,23 +321,28 @@ class property;
 enum listener_mode { POSTSET };
 
 class base_property
 {
 public:
   friend class property;
 
 public:
-  base_property (void) : id (-1), count (1) { }
+  base_property (void) 
+    : id (-1), count (1), name (), parent (), hidden (), listeners () 
+    { }
 
   base_property (const std::string& s, const graphics_handle& h)
-    : id (-1), count (1), name (s), parent (h), hidden (false) { }
+    : id (-1), count (1), name (s), parent (h), hidden (false), listeners () 
+    { }
 
   base_property (const base_property& p)
-    : id (-1), count (1), name (p.name), parent (p.parent), hidden (p.hidden) { }
+    : id (-1), count (1), name (p.name), parent (p.parent), 
+      hidden (p.hidden), listeners () 
+    { }
 
   virtual ~base_property (void) { }
 
   bool ok (void) const { return parent.ok (); }
 
   std::string get_name (void) const { return name; }
 
   void set_name (const std::string& s) { name = s; }
@@ -493,17 +506,17 @@ private:
 class string_array_property : public base_property
 {
 public:
   enum desired_enum { string_t, cell_t };
 
   string_array_property (const std::string& s, const graphics_handle& h,
                   const std::string& val = "", const char& sep = '|',
                   const desired_enum& typ = string_t)
-    : base_property (s, h), desired_type (typ), separator (sep)
+    : base_property (s, h), desired_type (typ), separator (sep), str ()
     {
       size_t pos = 0;
 
       while (true)
         {
           size_t new_pos = val.find_first_of (separator, pos);
 
           if (new_pos == std::string::npos)
@@ -516,17 +529,17 @@ public:
 
           pos = new_pos + 1;
         }
     }
 
   string_array_property (const std::string& s, const graphics_handle& h,
                   const Cell& c, const char& sep = '|',
                   const desired_enum& typ = string_t)
-    : base_property (s, h), desired_type (typ), separator (sep)
+    : base_property (s, h), desired_type (typ), separator (sep), str ()
     {
       if (c.is_cellstr ())
         {
           string_vector strings (c.numel ());
 
           for (octave_idx_type i = 0; i < c.numel (); i++)
             strings[i] = c(i).string_value ();
 
@@ -1076,34 +1089,39 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class array_property : public base_property
 {
 public:
   array_property (void)
-      : base_property ("", graphics_handle ()), data (Matrix ())
+    : base_property ("", graphics_handle ()), data (Matrix ()),
+      xmin (), xmax (), xminp (), type_constraints (), size_constraints ()
     {
       get_data_limits ();
     }
 
   array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
-      : base_property (nm, h), data (m)
+    : base_property (nm, h), data (m),
+    xmin (), xmax (), xminp (), type_constraints (), size_constraints ()
+    
     {
       get_data_limits ();
     }
 
   // This copy constructor is only intended to be used
   // internally to access min/max values; no need to
   // copy constraints.
   array_property (const array_property& p)
     : base_property (p), data (p.data),
-      xmin (p.xmin), xmax (p.xmax), xminp (p.xminp) { }
+      xmin (p.xmin), xmax (p.xmax), xminp (p.xminp),
+      type_constraints (), size_constraints ()
+    { }
 
   octave_value get (void) const { return data; }
 
   void add_constraint (const std::string& type)
     { type_constraints.push_back (type); }
 
   void add_constraint (const dim_vector& dims)
     { size_constraints.push_back (dims); }
@@ -1368,30 +1386,30 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class children_property : public base_property
 {
 public:
   children_property (void)
-    : base_property ("", graphics_handle ())
+    : base_property ("", graphics_handle ()), children_list ()
     {
       do_init_children (Matrix ());
     }
 
   children_property (const std::string& nm, const graphics_handle& h,
                      const Matrix &val)
-    : base_property (nm, h)
+    : base_property (nm, h), children_list ()
     {
       do_init_children (val);
     }
 
   children_property (const children_property& p)
-    : base_property (p)
+    : base_property (p), children_list ()
     {
       do_init_children (p.children_list);
     }
 
   children_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
@@ -1599,19 +1617,18 @@ class property
 {
 public:
   property (void) : rep (new base_property ("", graphics_handle ()))
     { }
 
   property (base_property *bp, bool persist = false) : rep (bp)
     { if (persist) rep->count++; }
 
-  property (const property& p)
+  property (const property& p) : rep (p.rep)
     {
-      rep = p.rep;
       rep->count++;
     }
 
   ~property (void)
     {
       if (--rep->count <= 0)
         delete rep;
     }
@@ -2183,18 +2200,16 @@ protected:
 
 class OCTINTERP_API base_graphics_object
 {
 public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1) { }
 
-  base_graphics_object (const base_graphics_object&) { }
-
   virtual ~base_graphics_object (void) { }
 
   virtual void mark_modified (void)
   {
     if (valid_object ())
       get_properties ().mark_modified ();
     else
       error ("base_graphics_object::mark_modified: invalid graphics object");
@@ -2398,29 +2413,34 @@ public:
         }
       else
         error ("base_graphics_object::default: invalid graphics object");
     }
 
 protected:
   // A reference count.
   int count;
+
+  // No copying!
+
+  base_graphics_object (const base_graphics_object&);
+
+  base_graphics_object& operator = (const base_graphics_object&);
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
   graphics_object (void) : rep (new base_graphics_object ()) { }
 
   graphics_object (base_graphics_object *new_rep)
     : rep (new_rep) { }
 
-  graphics_object (const graphics_object& obj)
+  graphics_object (const graphics_object& obj) : rep (obj.rep)
   {
-    rep = obj.rep;
     rep->count++;
   }
 
   graphics_object& operator = (const graphics_object& obj)
   {
     if (rep != obj.rep)
       {
         if (--rep->count == 0)
@@ -2953,19 +2973,19 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API graphics_xform
 {
 public:
   graphics_xform (void)
-      : xform (xform_eye ()), xform_inv (xform_eye ()), zlim (1, 2, 0.0)
+    : xform (xform_eye ()), xform_inv (xform_eye ()), 
+      sx ("linear"), sy ("linear"), sz ("linear"),  zlim (1, 2, 0.0)
     {
-      sx = sy = sz = "linear";
       zlim(1) = 1.0;
     }
 
   graphics_xform (const Matrix& xm, const Matrix& xim,
                   const scaler& x, const scaler& y, const scaler& z,
                   const Matrix& zl)
       : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
 
@@ -4199,19 +4219,18 @@ private:
 class
 graphics_event
 {
 public:
   typedef void (*event_fcn) (void*);
 
   graphics_event (void) : rep (0) { }
 
-  graphics_event (const graphics_event& e)
+  graphics_event (const graphics_event& e) : rep (e.rep)
     {
-      rep = e.rep;
       rep->count++;
     }
 
   ~graphics_event (void)
     {
       if (rep && --rep->count == 0)
         delete rep;
     }
