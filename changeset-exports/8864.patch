# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235540836 -3600
#      Wed Feb 25 06:47:16 2009 +0100
# Node ID 4d328b8979c80f738b376ccf24409a76549dab3f
# Parent  34a8218549610c6adb5e1ddeddd3f24d6f5b5b94
simplify integer power

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-inttypes.cc (pow (const octave_int<T>&, const octave_int<T>&)):
+	Simplify.
+
 2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_int_cmp_op::mop): Implement as simple
 	forwarders when OCTAVE_INT_USE_LONG_DOUBLE is not defined.
 	(octave_int_cmp_op::emulate_mop): New static overloaded template
 	member function.
 	* oct-inttypes.cc: Turn the octave_int_cmp_op::mop definitions into
 	defs for octave_int_cmp_op::emulate_mop. 
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -525,25 +525,24 @@ INSTANTIATE_INT64_DOUBLE_CMP_OP(ne);
 //}
 
 template <class T>
 octave_int<T>
 pow (const octave_int<T>& a, const octave_int<T>& b)
 {
   octave_int<T> retval;
 
-  octave_int<T> zero = octave_int<T> (0);
-  octave_int<T> one = octave_int<T> (1);
+  octave_int<T> zero = static_cast<T> (0);
+  octave_int<T> one = static_cast<T> (1);
 
   if (b == zero || a == one)
     retval = one;
-  // the is_signed check is inserted twice to avoid compiler warnings
-  else if (std::numeric_limits<T>::is_signed && b < zero)
+  else if (b < zero)
     {
-      if (a == octave_int<int> (-1))
+      if (a == -one)
         retval = (b.value () % 2) ? a : one;
       else
         retval = zero;
     }
   else
     {
       octave_int<T> a_val = a;
       T b_val = b; // no need to do saturation on b
