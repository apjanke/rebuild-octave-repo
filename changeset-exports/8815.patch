# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235057837 -3600
#      Thu Feb 19 16:37:17 2009 +0100
# Node ID af907aeedbf4a0ebdeb87c7be6dd254576757499
# Parent  de16ebeef93dc628cee477332567752e5414b130
cache cellstr_value in ov-cell

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-02-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-cell.h (octave_cell::cellstr_cache): New field.
+	(octave_cell::clear_cellstr_cache, octave_cell::make_cellstr_cache,
+	octave_cell::assign, octave_cell::delete_elements,
+	octave_cell::mex_get_data): New methods.
+	(octave_cell::is_cellstr): Reuse cellstr cache if possible, create if
+	successful.
+	(octave_cell::cellstr_value): Reuse cellstr cache if possible.
+	(octave_cell::subsasgn): Clear cellstr cache.
+
 2009-02-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (Flookup): Use Array<T>::lookup if possible.
 	Do not compare octave_values directly. Properly check for iscellstr.
 
 2009-02-19  John W. Eaton  <jwe@octave.org>
 
 	* data.cc, graphics.cc, help.cc, lex.l, load-path.cc, parse.y:
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -209,16 +209,18 @@ octave_cell::subsasgn (const std::string
 		       const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
 
+  clear_cellstr_cache ();
+
   if (n > 1)
     {
       switch (type[0])
 	{
 	case '(':
 	  {
 	    if (is_empty () && type[1] == '.')
 	      {
@@ -371,16 +373,75 @@ octave_cell::subsasgn (const std::string
 	default:
 	  panic_impossible ();
 	}
     }
 
   return retval;
 }
 
+void 
+octave_cell::clear_cellstr_cache (void) const
+{
+  cellstr_cache = Array<std::string> ();
+}
+
+void 
+octave_cell::make_cellstr_cache (void) const
+{
+  cellstr_cache = Array<std::string> (matrix.dims ());
+
+  octave_idx_type n = numel ();
+
+  std::string *dst = cellstr_cache.fortran_vec ();
+  const octave_value *src = matrix.data ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    dst[i] = src[i].string_value ();
+}
+
+bool 
+octave_cell::is_cellstr (void) const
+{
+  bool retval;
+  if (! cellstr_cache.is_empty ())
+    retval = true;
+  else
+    {
+      retval = matrix.is_cellstr ();
+      // force cache to be created here
+      if (retval)
+        make_cellstr_cache ();
+    }
+
+  return retval;
+}
+
+void 
+octave_cell::assign (const octave_value_list& idx, const Cell& rhs)
+{
+  clear_cellstr_cache ();
+  octave_base_matrix<Cell>::assign (idx, rhs);
+}
+
+void 
+octave_cell::assign (const octave_value_list& idx, const octave_value& rhs)
+{
+  clear_cellstr_cache ();
+  octave_base_matrix<Cell>::assign (idx, rhs);
+}
+
+
+void 
+octave_cell::delete_elements (const octave_value_list& idx)
+{
+  clear_cellstr_cache ();
+  octave_base_matrix<Cell>::delete_elements (idx);
+}
+
 size_t
 octave_cell::byte_size (void) const
 {
   size_t retval = 0;
 
   for (octave_idx_type i = 0; i < numel (); i++)
     retval += matrix(i).byte_size ();
 
@@ -510,30 +571,24 @@ octave_cell::all_strings (bool pad) cons
     }
 
   return retval;
 }
 
 Array<std::string>
 octave_cell::cellstr_value (void) const
 {
-  Array<std::string> retval (dims ());
+  Array<std::string> retval;
 
   if (is_cellstr ())
     {
-      octave_idx_type n = numel ();
-
-      std::string *dst = retval.fortran_vec ();
-      const octave_value *src = matrix.data ();
-
-      for (octave_idx_type i = 0; i < n; i++)
-	dst[i] = src[i].string_value ();
+      retval = cellstr_cache;
     }
   else
-    error ("invalid conversion from cell array to Array<std::string>");
+    error ("invalid conversion from cell array to array of strings");
 
   return retval;
 }
 
 bool
 octave_cell::print_as_scalar (void) const
 {
   return (ndims () > 2 || numel () == 0);
@@ -657,16 +712,18 @@ octave_cell::save_ascii (std::ostream& o
   return true;
 }
 
 bool 
 octave_cell::load_ascii (std::istream& is)
 {
   bool success = true;
 
+  clear_cellstr_cache ();
+
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -821,18 +878,20 @@ octave_cell::save_binary (std::ostream& 
 	return false;
     }
   
   return true;
 }
 
 bool 
 octave_cell::load_binary (std::istream& is, bool swap,
-				 oct_mach_info::float_format fmt)
+                          oct_mach_info::float_format fmt)
 {
+  clear_cellstr_cache ();
+
   bool success = true;
   int32_t mdims;
   if (! is.read (reinterpret_cast<char *> (&mdims), 4))
     return false;
   if (swap)
     swap_bytes<4> (&mdims);
   if (mdims >= 0)
     return false;
@@ -895,16 +954,23 @@ octave_cell::load_binary (std::istream& 
     {
       error ("load: failed to load matrix constant");
       success = false;
     }
 
   return success;
 }
 
+void *
+octave_cell::mex_get_data (void) const
+{
+  clear_cellstr_cache ();
+  return matrix.mex_get_data ();
+}
+
 #if defined (HAVE_HDF5)
 
 bool
 octave_cell::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
 {
   dim_vector dv = dims ();
   int empty = save_hdf5_empty (loc_id, name, dv);
   if (empty)
@@ -981,16 +1047,18 @@ octave_cell::save_hdf5 (hid_t loc_id, co
 
   return true;
 }
 
 bool
 octave_cell::load_hdf5 (hid_t loc_id, const char *name,
 			bool have_h5giterate_bug)
 {
+  clear_cellstr_cache ();
+
   bool retval = false;
 
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
   if (empty)
     return (empty > 0);
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -81,16 +81,22 @@ public:
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx,
                         bool auto_add);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
+  void assign (const octave_value_list& idx, const Cell& rhs);
+
+  void assign (const octave_value_list& idx, const octave_value& rhs);
+
+  void delete_elements (const octave_value_list& idx);
+
   size_t byte_size (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const;
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
@@ -100,17 +106,17 @@ public:
   bool is_numeric_type (void) const { return false; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
-  bool is_cellstr (void) const { return matrix.is_cellstr (); }
+  bool is_cellstr (void) const;
 
   bool is_true (void) const;
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
@@ -155,18 +161,28 @@ public:
   octave_value xisupper (void) const { return matrix.xisupper (); }
   octave_value xisxdigit (void) const { return matrix.xisxdigit (); }
   octave_value xtoascii (void) const { return matrix.xtoascii (); }
   octave_value xtolower (void) const { return matrix.xtolower (); }
   octave_value xtoupper (void) const { return matrix.xtoupper (); }
 
   mxArray *as_mxArray (void) const;
 
+  // Unsafe.  This function exists to support the MEX interface.
+  // You should not use it anywhere else.
+  void *mex_get_data (void) const; 
+
 private:
 
+  void clear_cellstr_cache (void) const;
+
+  mutable Array<std::string> cellstr_cache;
+
+  void make_cellstr_cache (void) const;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
