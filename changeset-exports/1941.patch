# HG changeset patch
# User jwe
# Date 824240151 0
#      Tue Feb 13 19:35:51 1996 +0000
# Node ID c3ae47c97e5320e7adc81c6df15c49db82df08cd
# Parent  1b193e313c56156c259061001253eed06c4f4c34
[project @ 1996-02-13 19:35:44 by jwe]

diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -169,33 +169,33 @@ NPSOL::do_minimize (double& objf, int& i
   int ncnln = nlc.size ();
   int nrowa = 1 > nclin ? 1 : nclin;
   int nrowj = 1 > ncnln ? 1 : ncnln;
   int nrowr = n;
 
   // Informative stuff.
 
   int iter;
-  int *istate = new int [n+nclin+ncnln];
+
+  Array<int> aistate (n+nclin+ncnln);
+  int *istate = aistate.fortran_vec ();
 
   // User defined function stuff is defined above in the functions
   // npsol_confun() and npsol_objfun();
 
   // Constraint stuff.
 
-  double *pclin = 0;
-  Matrix clin;
-  if (nclin > 0)
-    {
-      clin = lc.constraint_matrix ();
-      pclin  = clin.fortran_vec ();
-    }
+  Matrix clin = lc.constraint_matrix ();
+  double *pclin = clin.fortran_vec ();
 
-  double *clow = new double [n+nclin+ncnln];
-  double *cup = new double [n+nclin+ncnln];
+  Array<double> aclow (n+nclin+ncnln);
+  double *clow = aclow.fortran_vec ();
+
+  Array<double> acup (n+nclin+ncnln);
+  double *cup = acup.fortran_vec ();
 
   if (bnds.size () > 0)
     {
       for (int i = 0; i < n; i++)
 	{
 	  clow[i] = bnds.lower_bound (i);
 	  cup[i] = bnds.upper_bound (i);
 	}
@@ -217,31 +217,31 @@ NPSOL::do_minimize (double& objf, int& i
     }
 
   for (int i = 0; i < ncnln; i++)
     {
       clow[i+n+nclin] = nlc.lower_bound (i);
       cup[i+n+nclin] = nlc.upper_bound (i);
     }
 
-  double *c = 0;
-  double *cjac = 0;
-  if (ncnln > 0)
-    {
-      c = new double [ncnln];
-      cjac = new double [nrowj*n];
-    }
+  Array<double> ac (ncnln);
+  double *c = ac.fortran_vec ();
+
+  Array<double> acjac (nrowj*n);
+  double *cjac = acjac.fortran_vec ();
 
   // Objective stuff.
 
-  double *objgrd = new double [n];
+  Array<double> aobjgrd (n);
+  double *objgrd = aobjgrd.fortran_vec ();
 
   // Other stuff.
 
-  double *r = new double [n*n];
+  Array<double> ar (n*n);
+  double *r = ar.fortran_vec ();
 
   lambda.resize (n+nclin+ncnln);
   double *pclambda = lambda.fortran_vec ();
 
   // Decision variable stuff.
 
   double *px = x.fortran_vec ();
 
@@ -251,18 +251,21 @@ NPSOL::do_minimize (double& objf, int& i
   int leniw = 3 * n + nclin + 2 * ncnln;
   if (nclin == 0 && ncnln == 0)
     lenw = 20*n;
   else if (ncnln == 0)
     lenw = 2*n*(10 + n) + 11*nclin;
   else
     lenw = 2*n*(n + 10) + nclin*(n + 11) + ncnln*(2*n + 21);
 
-  int *iw = new int [leniw];
-  double *w = new double [lenw];
+  Array<int> aiw (leniw);
+  int *iw = aiw.fortran_vec ();
+
+  Array<double> aw (lenw);
+  double *w = aw.fortran_vec ();
 
   user_phi  = phi.objective_function ();
   user_grad = phi.gradient_function ();
   user_g    = nlc.function ();
   user_jac  = nlc.jacobian_function ();
 
   pass_options_to_npsol ();
 
@@ -270,17 +273,17 @@ NPSOL::do_minimize (double& objf, int& i
     F77_FCN (npoptn, NPOPTN) ("Derivative Level 0", 18L);
   else if (! user_jac && user_grad)
     F77_FCN (npoptn, NPOPTN) ("Derivative Level 1", 18L);
   else if (user_jac && ! user_grad)
     F77_FCN (npoptn, NPOPTN) ("Derivative Level 2", 18L);
   else if (user_jac && user_grad)
     F77_FCN (npoptn, NPOPTN) ("Derivative Level 3", 18L);
 
-  int attempt = 0;
+  attempt = 0;
   while (attempt++ < 5)
     {
 
       F77_XFCN (npsol, NPSOL,
 		(n, nclin, ncnln, nrowa, nrowj, nrowr, pclin, clow,
 		 cup, npsol_confun, npsol_objfun, inform, iter,
 		 istate, c, cjac, pclambda, objf, objgrd, r, px, iw,
 		 leniw, w, lenw));
@@ -288,30 +291,16 @@ NPSOL::do_minimize (double& objf, int& i
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in npsol");
       else if (inform == 6 || inform == 1)
 	continue;
       else
 	break;
     }
 
-  // Clean up.
-
-  delete [] istate;
-  delete [] clow;
-  delete [] cup;
-  delete [] c;
-  delete [] cjac;
-  delete [] objgrd;
-  delete [] r;
-  delete [] iw;
-  delete [] w;
-
-  // See how it went.
-
   return x;
 }
 
 void
 NPSOL_options::init (void)
 {
   x_central_difference_interval = -1.0;
   x_crash_tolerance = 0.1;
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -275,16 +275,20 @@ public:
 	  NPSOL_options::operator = (a);
 	}
       return *this;
     }
 
   ~NPSOL (void) { }
 
   ColumnVector do_minimize (double& objf, int& inform, ColumnVector& lambda);
+
+private:
+
+  int attempt;
 };
 
 // XXX FIXME XXX -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the objective
 // function, and the user wants us to quit.
 extern int npsol_objective_error;
 
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -90,88 +90,82 @@ QPSOL::do_minimize (double& objf, int& i
   double *pa = 0;
   Matrix clin;
   if (nclin > 0)
     {
       clin = lc.constraint_matrix ();
       pa = clin.fortran_vec ();
     }
 
-  double *pbl = new double [nctotl];
-  double *pbu = new double [nctotl];
+  ColumnVector bl (n+nclin);
+  ColumnVector bu (n+nclin);
 
   if (bnds.size () > 0)
     {
-      for (int i = 0; i < n; i++)
-	{
-	  pbl[i] = bnds.lower_bound (i);
-	  pbu[i] = bnds.upper_bound (i);
-	}
+      bl.insert (bnds.lower_bounds (), 0);
+      bu.insert (bnds.upper_bounds (), 0);
     }
   else
     {
-      for (int i = 0; i < n; i++)
-	{
-	  pbl[i] = -bigbnd;
-	  pbu[i] = bigbnd;
-	}
+      bl.fill (-bigbnd);
+      bu.fill (bigbnd);
     }
 
-  for (int i = 0; i < nclin; i++)
+  if (nclin > 0)
     {
-      pbl[i+n] = lc.lower_bound (i);
-      pbu[i+n] = lc.upper_bound (i);
+      bl.insert (lc.lower_bounds (), 0);
+      bu.insert (lc.upper_bounds (), 0);
     }
 
+  double *pbl = bl.fortran_vec ();
+  double *pbu = bu.fortran_vec ();
+
   double *pc = c.fortran_vec ();
 
-  double *featol = new double [nctotl];
   double tmp = feasibility_tolerance ();
-  for (int i = 0; i < nctotl; i++)
-    featol[i] = tmp;
+
+  Array<double> afeatol (nctotl, tmp);
+  double *featol = afeatol.fortran_vec ();
 
   double *ph = H.fortran_vec ();
 
   int cold = 1;
   int lp = 0;
   int orthog = 1;
 
-  int *istate = new int [nctotl];
+  Array<int> aistate (nctotl);
+  int *istate = aistate.fortran_vec ();
 
   double *px = x.fortran_vec ();
 
   int iter = 0;
   lambda.resize (nctotl);
   double *pclambda = lambda.fortran_vec ();
 
   int leniw = 2 * n;
 
   int lenw;
   int ncon = nclin > 1 ? nclin : 1;
   if (lp == 0 || nclin >= n)
     lenw = 2*n*(n + 2) + nclin + 2*ncon;
   else
     lenw = 2*ncon*(1 + ncon) + 4*n + nclin;
 
-  int *iw = new int [leniw];
-  double *w = new double [lenw];
+  Array<int> aiw (leniw);
+  int *iw = aiw.fortran_vec ();
+
+  Array<double> aw (lenw);
+  double *w = aw.fortran_vec ();
 
   F77_FCN (qpsol, QPSOL) (itmax, msglvl, n, nclin, nctotl, ncon, n,
 			  n, bigbnd, pa, pbl, pbu, pc, featol, ph,
 			  qphess, cold, lp, orthog, istate, px,
 			  inform, iter, objf, pclambda, iw, leniw, w,
 			  lenw);
 
-  delete [] pbl;
-  delete [] pbu;
-  delete [] featol;
-  delete [] istate;
-  delete [] iw;
-  delete [] w;
-
   return x;
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
