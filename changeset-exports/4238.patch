# HG changeset patch
# User jwe
# Date 1040850274 0
#      Wed Dec 25 21:04:34 2002 +0000
# Node ID a5a68c0afe56b64962461cfd1f55465fa1cd9363
# Parent  9c8034434982735ae77851deb6e2ad9b4ca96043
[project @ 2002-12-25 21:04:33 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,79 @@
+2002-12-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* variables.cc (link_to_builtin_or_function): Maybe prepend parent
+	function name symbol name.
+
+	* parse.y (parent_function_name): New variable.
+	(fcn_name): New non-terminal.
+	(function2): Use it.
+	(parsed_fcn_name): Fold into fcn_name.
+	(function_end): Don't call check_for_garbage_after_fcn_def.
+	Set lexer_flags.parsing_nested_function on EOF.
+	* parse.h: Provide decl for parent_function_name.
+
+	* ov-usr-fcn.h (octave_user_function::mark_as_nested_function,
+	(octave_user_funciton::is_nested_function): New functions.
+	(octave_user_function::nested_function): New data member.
+	(octave_user_function::do_multi_index_op): Maybe protect and set
+	curr_parent_function pointer.
+	* parse.y (frob_function): Maybe mark as nested function.
+
+	* toplev.cc (curr_parent_function): New global variable.
+	* toplev.h: Provide decl.
+
+	* lex.l (check_for_garbage_after_fcn_def): Delete.
+	* lex.h: Delete decl.
+
+	* lex.l (prep_for_nested_function): New function.
+	(<NESTED_FUNCTION_START>): Use it here.
+	(is_keyword): And here.
+	(lookup_identifier): Maybe prepend parent function name.
+
+	* variables.cc (initialize_symbol_tables): Give names to the three
+	main symbol tables.
+	* symtab.cc (symbol_table::lookup, symbol_table::rename): Print
+	debugging info if Vdebug_symtab_lookups is nonzero.
+	(debug_symtab_lookups): New function.
+	(Vdebug_symtab_lookups): New static varaible.
+	(symbols_of_symtab): DEFVAR it.
+	* symtab.h (symbol_table::table_name): New member variable.
+	(symtab_count): New static member variable.
+	(symbol_table::symbol_table): Handle table name.
+
 2002-12-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (frob_function): Don't give nested functions the same
+	name as the function file.
+
+	* lex.h (lexical_feedback::parsing_nested_function): New data member.
+	* lex.l (lexical_feedback::init): Initialize it to false.
+	(<NESTED_FUNCTION_START>): Set lexer_flags.parsing_nested_function
+	to true.
+
+	* parse.y (symtab_context): Now a stack.  Change all uses.
+
+	* lex.l (NESTED_FUNCTION_START): New start state to handle
+	"function" keyword in a nested function context.
+	(prep_for_function): New function.
+	(is_keyword): Allow functions to be nested in function files.
+
+	* lex.l (is_keyword): Maybe ignore END tokens.
+	Increment and decrement end_tokens_expected as appropriate.
+	(handle_identifier): If is_keyword returns -1, return immediately.
+	({IDENT}{S}*): Do nothing if handle_identifier returns -1.
+
+	* parse.y (end_tokens_expected): New variable.
+	(parse_fcn_file): Protect and set it.
+
 	* parse.y (begin_obj_idx): Increment
 	lexer_flags.looking_at_object_index.
 	(postfix_expr): Decrement it as appropriate here.
+
 	* lex.h (lexical_feedback::looking_at_object_index): Now int.
 
 	* parse.y (postfix_expr): Reset	lexer_flags.looking_at_object_index
 	in () and {} cases too.
 
 	* ov-usr-fcn.cc (clear_symbol_table): Clear variables only.
 
 2002-12-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -108,21 +108,16 @@ extern void switch_to_buffer (YY_BUFFER_
 extern void delete_buffer (YY_BUFFER_STATE buf);
 
 // Restore a buffer (for unwind-prot).
 extern void restore_input_buffer (void *buf);
 
 // Delete a buffer (for unwind-prot).
 extern void delete_input_buffer (void *buf);
 
-// See if a function file has extra garbage after the end statement.
-// This needs to be defined in lex.l so that it can use yyinput() but
-// it must be called from parse.y.
-extern void check_for_garbage_after_fcn_def (void);
-
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   lexical_feedback (void) { init (); }
@@ -186,16 +181,19 @@ public:
   // TRUE means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
   // TRUE means that we've already seen the name of this function.
   // Should only matter if defining_func is also TRUE.
   bool parsed_function_name;
 
+  // TRUE means that we're parsing a nested function definition.
+  bool parsing_nested_function;
+
   // TRUE means we've seen something that means we must be past the
   // range part of a plot command.
   bool past_plot_range;
 
   // TRUE means we're working on a plot command.
   bool plotting;
 
   // Return transpose or start a string?
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -17,16 +17,17 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 %s COMMAND_START
 %s MATRIX_START
+%s NESTED_FUNCTION_START
 
 %{
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
@@ -188,16 +189,18 @@ static bool Vwarn_single_quote_string = 
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const std::string& s);
 static int is_keyword (const std::string& s);
+static void prep_for_function (void);
+static void prep_for_nested_function (void);
 static std::string plot_style_token (const std::string& s);
 static symbol_record *lookup_identifier (const std::string& s);
 static void grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
@@ -233,16 +236,22 @@ SNLCMT	({SNL}|{COMMENT})
 NOT	((\~)|(\!))
 POW     ((\*\*)|(\^))
 EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
+<NESTED_FUNCTION_START>{} {
+    BEGIN 0;
+    prep_for_nested_function ();
+    return FCN;
+  }
+
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
 %}
 
 <COMMAND_START>{NL} {
     BEGIN 0;
@@ -524,17 +533,20 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
-    return handle_identifier ();
+    int id_tok = handle_identifier ();
+
+    if (id_tok >= 0)
+      return id_tok;
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
 // are handled by the <MATRIX_START> start state code above.  If closest
 // nesting is inside parentheses, don't return a row separator.
 %}
 
@@ -809,17 +821,20 @@ do_comma_insert_check (void)
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN 0;
   error_state = 0;
   warning_state = 0;
   parser_end_of_input = false;
-  symtab_context = 0;
+  end_tokens_expected = 0;
+
+  while (! symtab_context.empty ())
+    symtab_context.pop ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
@@ -1041,17 +1056,45 @@ is_plot_keyword (const std::string& s)
       return CLEAR;
     }
   else
     {
       return 0;
     }
 }
 
-// Handle keywords.
+static void
+prep_for_function (void)
+{
+  end_tokens_expected++;
+
+  // Prepare for local symbols.
+
+  tmp_local_sym_tab = new symbol_table ();
+
+  promptflag--;
+
+  lexer_flags.defining_func = true;
+  lexer_flags.parsed_function_name = false;
+  lexer_flags.beginning_of_function = true;
+
+  if (! (reading_fcn_file || reading_script_file))
+    input_line_number = 1;
+}
+
+static void
+prep_for_nested_function (void)
+{
+  lexer_flags.parsing_nested_function = true;
+  prep_for_function ();
+  yylval.tok_val = new token (input_line_number, current_input_column);
+  token_stack.push (yylval.tok_val);
+}
+
+// Handle keywords.  Return -1 if the keyword should be ignored.
 
 static int
 is_keyword (const std::string& s)
 {
   int l = input_line_number;
   int c = current_input_column;
 
   if (lexer_flags.plotting)
@@ -1106,58 +1149,84 @@ is_keyword (const std::string& s)
 	case until_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
 	  if (lexer_flags.looking_at_object_index)
 	    return 0;
 	  else
-	    yylval.tok_val = new token (token::simple_end, l, c);
+	    {
+	      if (reading_fcn_file && end_tokens_expected == 1)
+		return -1;
+	      else
+		{
+		  yylval.tok_val = new token (token::simple_end, l, c);
+		  end_tokens_expected--;
+		}
+	    }
 	  break;
 
 	case end_try_catch_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::try_catch_end, l, c);
 	  break;
 
 	case end_unwind_protect_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::unwind_protect_end, l, c);
 	  break;
 
 	case endfor_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::for_end, l, c);
 	  break;
 
 	case endfunction_kw:
-	  yylval.tok_val = new token (token::function_end, l, c);
+	  {
+	    if (reading_fcn_file && end_tokens_expected == 1)
+	      return -1;
+	    else
+	      {
+		yylval.tok_val = new token (token::function_end, l, c);
+		end_tokens_expected--;
+	      }
+	  }
 	  break;
 
 	case endif_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::if_end, l, c);
 	  break;
 
 	case endswitch_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::switch_end, l, c);
 	  break;
 
 	case endwhile_kw:
+	  end_tokens_expected--;
 	  yylval.tok_val = new token (token::while_end, l, c);
 	  break;
 
-	case do_kw:
 	case for_kw:
 	case while_kw:
+	  end_tokens_expected++;
+	  // Fall through...
+
+	case do_kw:
 	  promptflag--;
 	  lexer_flags.looping++;
 	  break;
 
 	case if_kw:
 	case try_kw:
 	case switch_kw:
 	case unwind_protect_kw:
+	  end_tokens_expected++;
 	  promptflag--;
 	  break;
 
 	case gplot_kw:
 	  lexer_flags.plotting = true;
 	  yylval.tok_val = new token (token::two_dee, l, c);
 	  break;
 
@@ -1167,45 +1236,50 @@ is_keyword (const std::string& s)
 	  break;
 
 	case replot_kw:
 	  lexer_flags.plotting = true;
 	  yylval.tok_val = new token (token::replot, l, c);
 	  break;
 
 	case function_kw:
-	  if (lexer_flags.defining_func)
-	    {
-	      error ("function keyword invalid within a function body");
-
-	      if ((reading_fcn_file || reading_script_file)
-		  && ! curr_fcn_file_name.empty ())
-		error ("defining new function near line %d of file `%s.m'",
-		       input_line_number, curr_fcn_file_name.c_str ());
-	      else
-		error ("defining new function near line %d",
-		       input_line_number);
-
-	      return LEXICAL_ERROR;
-	    }
-	  else
-	    {
-	      // Prepare for local symbols.
-
-	      tmp_local_sym_tab = new symbol_table ();
-
-	      promptflag--;
-
-	      lexer_flags.defining_func = true;
-	      lexer_flags.parsed_function_name = false;
-	      lexer_flags.beginning_of_function = true;
-
-	      if (! (reading_fcn_file || reading_script_file))
-		input_line_number = 1;
-	    }
+	  {
+	    if (lexer_flags.defining_func)
+	      {
+		if (reading_fcn_file)
+		  {
+
+		    if (lexer_flags.parsing_nested_function)
+		      {
+			BEGIN NESTED_FUNCTION_START;
+			yylval.tok_val = new token (token::function_end, l, c);
+		      }
+		    else
+		      {
+			prep_for_nested_function ();
+			return FCN;
+		      }
+		  }
+		else
+		  {
+		    error ("nested functions not implemented in this context");
+
+		    if ((reading_fcn_file || reading_script_file)
+			&& ! curr_fcn_file_name.empty ())
+		      error ("near line %d of file `%s.m'",
+			     input_line_number, curr_fcn_file_name.c_str ());
+		    else
+		      error ("near line %d", input_line_number);
+
+		    return LEXICAL_ERROR;
+		  }
+	      }
+	    else
+	      prep_for_function ();
+	  }
 	  break;
 
         case magic_file_kw:
 	  {
 	    if ((reading_fcn_file || reading_script_file)
 		&& ! curr_fcn_file_full_name.empty ())
 	      yylval.tok_val = new token (curr_fcn_file_full_name, l, c);
 	    else
@@ -1243,17 +1317,23 @@ is_keyword (const std::string& s)
 }
 
 // Try to find an identifier.  All binding to global or builtin
 // variables occurs when expressions are evaluated.
 
 static symbol_record *
 lookup_identifier (const std::string& name)
 {
-  return curr_sym_tab->lookup (name, true);
+  std::string sym_name = name;
+
+  if (curr_sym_tab == fbi_sym_tab
+      && lexer_flags.parsing_nested_function)
+    sym_name = parent_function_name + ":" + sym_name;
+
+  return curr_sym_tab->lookup (sym_name, true);
 }
 
 static bool
 is_variable (const std::string& name)
 {
   symbol_record *sr = curr_sym_tab->lookup (name);
 
   return sr && sr->is_variable ();
@@ -2238,17 +2318,18 @@ maybe_unput_comma (int spc_gobbled)
 
 	  if (Vwhitespace_in_literal_matrix != 2)
 	    unput (',');
 	}
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
-// an identifier.  Handles keywords.
+// an identifier.  Handles keywords.  Return -1 if the identifier
+// should be ignored.
 
 static int
 handle_identifier (void)
 {
   std::string tok = strip_trailing_whitespace (yytext);
 
   int c = yytext[yyleng-1];
 
@@ -2290,17 +2371,19 @@ handle_identifier (void)
   // If we have a regular keyword, or a plot STYLE, return it.
   // Keywords can be followed by identifiers (TOK_RETURN handles
   // that).
 
   int kw_token = is_keyword (tok);
 
   if (kw_token)
     {
-      if (kw_token == STYLE)
+      if (kw_token < 0)
+	return kw_token;
+      else if (kw_token == STYLE)
 	{
 	  current_input_column += yyleng;
 	  lexer_flags.quote_is_transpose = false;
 	  lexer_flags.convert_spaces_to_comma = true;
 	  return kw_token;
 	}
       else
 	TOK_RETURN (kw_token);
@@ -2531,16 +2614,17 @@ lexical_feedback::init (void)
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   beginning_of_function = false;
   defining_func = false;
   parsed_function_name = false;
+  parsing_nested_function = false;
 
   // Not parsing a function return or parameter list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -77,17 +77,18 @@ octave_user_function::octave_user_functi
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     sym_tab (st), lead_comm (), trail_comm (),
     file_name (), fcn_name (),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
-    num_named_args (0), args_passed (), num_args_passed (0),
+    num_named_args (0), nested_function (false),
+    args_passed (), num_args_passed (0),
     curr_va_arg_number (0), vr_list (0), symtab_entry (0),
     argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
   install_automatic_vars ();
 
   if (param_list)
     {
       num_named_args = param_list->length ();
@@ -400,16 +401,22 @@ octave_user_function::do_multi_index_op 
   // eval_undefined_error().
 
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
 
   unwind_protect_ptr (curr_function);
   curr_function = this;
 
+  if (! is_nested_function ())
+    {
+      unwind_protect_ptr (curr_parent_function);
+      curr_parent_function = this;
+    }
+
   // Save and restore args passed for recursive calls.
 
   save_args_passed (args);
 
   unwind_protect::add (::restore_args_passed, this);
 
   string_vector arg_names = args.name_tags ();
 
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -115,16 +115,20 @@ public:
 
   bool has_varargout (void) const;
 
   void stash_function_name (const std::string& s);
 
   std::string function_name (void)
     { return fcn_name; }
 
+  void mark_as_nested_function (void) { nested_function = true; }
+
+  bool is_nested_function (void) const { return nested_function; }
+
   void save_args_passed (const octave_value_list& args)
     {
       if (call_depth > 1)
 	saved_args.push (args_passed);
 
       args_passed = args;
     }
 
@@ -206,16 +210,19 @@ private:
   bool system_fcn_file;
 
   // Used to keep track of recursion depth.
   int call_depth;
 
   // The number of arguments that have names.
   int num_named_args;
 
+  // TRUE means this is a nested function.
+  bool nested_function;
+
   // The values that were passed as arguments.
   octave_value_list args_passed;
 
   // A place to store the passed args for recursive calls.
   std::stack<octave_value_list> saved_args;
 
   // The number of arguments passed in.
   int num_args_passed;
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -68,21 +68,28 @@ extern bool input_from_startup_file;
 extern bool input_from_command_line_file;
 
 // TRUE means that we are in the process of evaluating a function
 // body.  The parser might be called in that case if we are looking at
 // an eval() statement.
 extern bool evaluating_function_body;
 
 // Keep track of symbol table information when parsing functions.
-extern symbol_table *symtab_context;
+extern std::stack<symbol_table*> symtab_context;
+
+// Name of parent function when parsing function files that might
+// contain nested functions.
+extern std::string parent_function_name;
 
 // TRUE means warn about function files that have time stamps in the future.
 extern bool Vwarn_future_time_stamp;
 
+// Keep a count of how many END tokens we expect.
+extern int end_tokens_expected;
+
 extern void
 parse_and_execute (FILE *f);
 
 extern void
 parse_and_execute (const std::string& s, bool verbose = false,
 		   const char *warn_for = 0);
 
 extern std::string get_help_from_file (const std::string& f);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -128,18 +128,25 @@ bool input_from_startup_file = false;
 // the command line.
 bool input_from_command_line_file = true;
 
 // TRUE means that we are in the process of evaluating a function
 // body.  The parser might be called in that case if we are looking at
 // an eval() statement.
 bool evaluating_function_body = false;
 
+// Keep a count of how many END tokens we expect.
+int end_tokens_expected = 0;
+
 // Keep track of symbol table information when parsing functions.
-symbol_table *symtab_context = 0;
+std::stack<symbol_table*> symtab_context;
+
+// Name of parent function when parsing function files that might
+// contain nested functions.
+std::string parent_function_name;
 
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
 static void
 yyerror (const char *s);
 
@@ -316,20 +323,20 @@ maybe_warn_missing_semi (tree_statement_
 static void
 set_stmt_print_flag (tree_statement_list *, char, bool);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
-      if (symtab_context) \
+      if (! symtab_context.empty ()) \
         { \
-	  curr_sym_tab = symtab_context; \
-	  symtab_context = 0; \
+	  curr_sym_tab = symtab_context.top (); \
+	  symtab_context.pop (); \
         } \
       if (interactive || forced_interactive) \
 	YYACCEPT; \
       else \
 	YYABORT; \
     } \
   while (0)
 
@@ -415,17 +422,17 @@ set_stmt_print_flag (tree_statement_list
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> constant magic_colon
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> title matrix cell
 %type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
-%type <tree_identifier_type> identifier
+%type <tree_identifier_type> identifier fcn_name
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
@@ -1092,40 +1099,31 @@ except_command	: UNWIND stash_comment op
 		  }
 		;
 
 // ===========================================
 // Some `subroutines' for function definitions
 // ===========================================
 
 save_symtab	: // empty
-		  {
-		    if (symtab_context)
-		      panic_impossible ();
-
-		    symtab_context = curr_sym_tab;
-		  }
+		  { symtab_context.push (curr_sym_tab); }
 		;
 		   
 function_symtab	: // empty
 		  { curr_sym_tab = fbi_sym_tab; }
 		;
 
 local_symtab	: // empty
 		  { curr_sym_tab = tmp_local_sym_tab; }
 		;
 
 in_return_list	: // empty
 		  { lexer_flags.looking_at_return_list = true; }
 		;
 
-parsed_fcn_name	: // empty
-		  { lexer_flags.parsed_function_name = true; }
-		;
-
 // ===========================
 // List of function parameters
 // ===========================
 
 param_list_beg	: '('
 		  { lexer_flags.looking_at_parameter_list = true; }
 		;
 
@@ -1224,18 +1222,18 @@ return_list1	: identifier
 
 return_list_end	: function_symtab ']'
 		;
 
 // ===================
 // Function definition
 // ===================
 
-function_beg	: save_symtab FCN stash_comment function_symtab
-		  { $$ = $3; }
+function_beg	: save_symtab FCN function_symtab stash_comment
+		  { $$ = $4; }
 		;
 
 function	: function_beg function2
 		  {
 		    $2->stash_leading_comment ($1);
 		    recover_from_parsing_function ();
 		    $$ = 0;
 		  }
@@ -1252,45 +1250,57 @@ function	: function_beg function2
 		    $$ = 0;
 		  }
 		;
 
 function1	: function_symtab '=' function2
 		  { $$ = $3; }
 		;
 
-function2	: identifier local_symtab parsed_fcn_name function3
+fcn_name	: identifier local_symtab
 		  {
-		    if (! ($$ = frob_function ($1, $4)))
+		    std::string id_name = $1->name ();
+
+		    if (reading_fcn_file
+		        && ! lexer_flags.parsing_nested_function)
+		      parent_function_name = (curr_fcn_file_name == id_name)
+			? id_name : curr_fcn_file_name;
+
+		    lexer_flags.parsed_function_name = true;
+
+		    $$ = $1;
+		  }
+		;
+
+function2	: fcn_name function3
+		  {
+		    if (! ($$ = frob_function ($1, $2)))
 		      ABORT_PARSE;
 		  }
 		;
 
 function3	: param_list function4
 		  { $$ = start_function ($1, $2); }
 		| function4
 		  { $$ = start_function (0, $1); }
 		;
 
 function4	: opt_sep opt_list function_end
 		  { $$ = $2; }
 		;
 
 function_end	: END
 		  {
-		    if (end_token_ok ($1, token::function_end))
-		      {
-			if (reading_fcn_file)
-			  check_for_garbage_after_fcn_def ();
-		      }
-		    else
+		    if (! end_token_ok ($1, token::function_end))
 		      ABORT_PARSE;
 		  }
 		| END_OF_INPUT
 		  {
+		    lexer_flags.parsing_nested_function = false;
+
 		    if (! (reading_fcn_file || reading_script_file
 			   || get_input_from_eval_string))
 		      YYABORT;
 		  }
 		;
 
 // ========
 // Plotting
@@ -2520,17 +2530,18 @@ frob_function (tree_identifier *id, octa
   // the file does not match the name of the function stated in the
   // file.  Matlab doesn't provide a diagnostic (it ignores the stated
   // name).
 
   fcn->stash_function_name (id_name);
 
   if (reading_fcn_file)
     {
-      if (curr_fcn_file_name != id_name)
+      if (! lexer_flags.parsing_nested_function
+          && curr_fcn_file_name != id_name)
 	{
 	  if (Vwarn_function_name_clash)
 	    warning ("function name `%s' does not agree with function\
  file name `%s'", id_name.c_str (), curr_fcn_file_full_name.c_str ());
 
 	  fbi_sym_tab->rename (id_name, curr_fcn_file_name);
 
 	  if (error_state)
@@ -2564,17 +2575,22 @@ frob_function (tree_identifier *id, octa
 	       id_name.c_str (), curr_fcn_file_full_name.c_str ());
     }
 
   top_level_sym_tab->clear (id_name);
 
   symbol_record *sr = fbi_sym_tab->lookup (id_name);
 
   if (sr)
-    fcn->stash_symtab_ptr (sr);
+    {
+      fcn->stash_symtab_ptr (sr);
+
+      if (lexer_flags.parsing_nested_function)
+        fcn->mark_as_nested_function ();
+    }
   else
     panic_impossible ();
 
   id->define (fcn, symbol_record::USER_FUNCTION);
 
   id->document (help_buf);
 
   help_buf.resize (0);
@@ -2608,21 +2624,21 @@ finish_function (tree_parameter_list *re
   fcn->stash_leading_comment (lc);
 
   return fcn->define_ret_list (ret_list);
 }
 
 static void
 recover_from_parsing_function (void)
 {
-  if (! symtab_context)
+  if (symtab_context.empty ())
     panic_impossible ();
 
-  curr_sym_tab = symtab_context;
-  symtab_context = 0;
+  curr_sym_tab = symtab_context.top ();
+  symtab_context.pop ();
 
   lexer_flags.defining_func = false;
   lexer_flags.beginning_of_function = false;
   lexer_flags.parsed_function_name = false;
   lexer_flags.looking_at_return_list = false;
   lexer_flags.looking_at_parameter_list = false;
 }
 
@@ -3233,23 +3249,27 @@ parse_fcn_file (const std::string& ff, b
   FILE *in_stream = command_editor::get_input_stream ();
 
   unwind_protect::add (restore_input_stream, in_stream);
 
   unwind_protect_ptr (ff_instream);
 
   unwind_protect_int (input_line_number);
   unwind_protect_int (current_input_column);
+  unwind_protect_int (end_tokens_expected);
   unwind_protect_bool (reading_fcn_file);
   unwind_protect_bool (line_editing);
+  unwind_protect_str (parent_function_name);
 
   input_line_number = 0;
   current_input_column = 1;
+  end_tokens_expected = 0;
   reading_fcn_file = true;
   line_editing = false;
+  parent_function_name = "";
 
   FILE *ffile = get_input_from_file (ff, 0);
 
   unwind_protect::add (safe_fclose, ffile);
 
   if (ffile)
     {
       // Check to see if this file defines a function or is just a
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -42,21 +42,26 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pt-pr-code.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
+unsigned long int symbol_table::symtab_count = 0;
+
 // Should variables be allowed to hide functions of the same name?  A
 // positive value means yes.  A negative value means yes, but print a
 // warning message.  Zero means it should be considered an error.
 static int Vvariables_can_hide_functions;
 
+// Nonzero means we print debugging info about symbol table lookups.
+static int Vdebug_symtab_lookups;
+
 octave_allocator
 symbol_record::symbol_def::allocator (sizeof (symbol_record::symbol_def));
 
 #define SYMBOL_DEF symbol_record::symbol_def
 
 std::string
 SYMBOL_DEF::type_as_string (void) const
 {
@@ -457,16 +462,25 @@ symbol_record::read_only_error (const ch
     return false;
 }
 
 // A symbol table.
 
 symbol_record *
 symbol_table::lookup (const std::string& nm, bool insert, bool warn)
 {
+  if (Vdebug_symtab_lookups)
+    {
+      std::cerr << (table_name.empty () ? "???" : table_name)
+		<< " symtab::lookup ["
+		<< (insert ? "I" : "-")
+		<< (warn ? "W" : "-")
+		<< "] \"" << nm << "\"\n";
+    }
+
   unsigned int index = hash (nm);
 
   symbol_record *ptr = table[index].next ();
 
   while (ptr)
     {
       if (ptr->name () == nm)
 	return ptr;
@@ -486,16 +500,25 @@ symbol_table::lookup (const std::string&
     warning ("lookup: symbol `%s' not found", nm.c_str ());
 
   return 0;
 }
 
 void
 symbol_table::rename (const std::string& old_name, const std::string& new_name)
 {
+  if (Vdebug_symtab_lookups)
+    {
+      std::cerr << (table_name.empty () ? "???" : table_name)
+		<< " symtab::rename "
+		<< "\"" << old_name << "\""
+		<< " to "
+		<< "\"" << new_name << "\"\n";
+    }
+
   unsigned int index = hash (old_name);
 
   symbol_record *prev = &table[index];
   symbol_record *ptr = prev->next ();
 
   while (ptr)
     {
       if (ptr->name () == old_name)
@@ -1067,27 +1090,40 @@ static int
 variables_can_hide_functions (void)
 {
   Vvariables_can_hide_functions
     = check_preference ("variables_can_hide_functions");
 
   return 0;
 }
 
+static int
+debug_symtab_lookups (void)
+{
+  Vdebug_symtab_lookups = check_preference ("debug_symtab_lookups");
+
+  return 0;
+}
+
 void
 symbols_of_symtab (void)
 {
   DEFVAR (variables_can_hide_functions, true, variables_can_hide_functions,
     "-*- texinfo -*-\n\
 @defvr variables_can_hide_functions\n\
 If the value of this variable is nonzero, assignments to variables may\n\
 hide previously defined functions of the same name.  A negative value\n\
 will cause Octave to print a warning, but allow the operation.\n\
 @end defvr");
 
+  DEFVAR (debug_symtab_lookups, false, debug_symtab_lookups,
+    "-*- texinfo -*-\n\
+@defvr debug_symtab_lookups\n\
+If the value of htis variable is nonzero, print debugging info when\n\
+searching for symbols in the symbol tables");
 }
 
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <cassert>
 
 #include <string>
 #include <stack>
 
+#include "lo-sstream.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov.h"
 
 class octave_lvalue;
 
 class string_vector;
@@ -401,20 +402,30 @@ private:
 #define SYMTAB_VARIABLES (symbol_record::USER_VARIABLE \
 			  | symbol_record::BUILTIN_VARIABLE)
 
 class
 symbol_table
 {
 public:
 
-  symbol_table (unsigned int tab_size = 128)
-    : table_size (tab_size), table (new symbol_record [table_size])
+  symbol_table (unsigned int tab_size = 128,
+		const std::string& nm = std::string ())
+    : table_size (tab_size), table (new symbol_record [table_size]),
+      table_name (nm)
     {
       assert ((tab_size % 2) == 0);
+
+      if (table_name.empty ())
+	{
+	  OSSTREAM buf;
+	  buf << symtab_count++ << OSSTREAM_ENDS;
+	  table_name = OSSTREAM_STR (buf);
+	  OSSTREAM_FREEZE (buf);
+	}
     }
 
   ~symbol_table (void)
     {
       clear ();
       delete [] table;
     }
 
@@ -490,16 +501,20 @@ public:
   void print_info (std::ostream& os) const;
 
 private:
 
   unsigned int table_size;
 
   symbol_record *table;
 
+  std::string table_name;
+
+  static unsigned long int symtab_count;
+
   unsigned int hash (const std::string& s);
 
   // No copying!
 
   symbol_table (const symbol_table&);
 
   symbol_table& operator = (const symbol_table&);
 };
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -87,16 +87,19 @@ bool octave_interpreter_ready = false;
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 octave_user_function *curr_function = 0;
 
+// Pointer to parent function that is currently being evaluated.
+octave_user_function *curr_parent_function = 0;
+
 // Original value of TEXMFDBS environment variable.
 std::string octave_original_texmfdbs;
 
 static void
 recover_from_exception (void)
 {
   unwind_protect::run_all ();
   can_interrupt = true;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -43,16 +43,19 @@ extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern octave_user_function *curr_function;
 
+// Pointer to parent function that is currently being evaluated.
+extern octave_user_function *curr_parent_function;
+
 // Original value of TEXMFDBS environment variable.
 extern std::string octave_original_texmfdbs;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -81,23 +81,23 @@ at_top_level (void)
 
 // Create the initial symbol tables and set the current scope at the
 // top level.
 
 void
 initialize_symbol_tables (void)
 {
   if (! fbi_sym_tab)
-    fbi_sym_tab = new symbol_table (2048);
+    fbi_sym_tab = new symbol_table (2048, "FBI");
 
   if (! global_sym_tab)
-    global_sym_tab = new symbol_table (2048);
+    global_sym_tab = new symbol_table (2048, "GLOBAL");
 
   if (! top_level_sym_tab)
-    top_level_sym_tab = new symbol_table (4096);
+    top_level_sym_tab = new symbol_table (4096, "TOP");
 
   curr_sym_tab = top_level_sym_tab;
 }
 
 // Attributes of variables and functions.
 
 // Is this variable a builtin?
 
@@ -918,17 +918,29 @@ link_to_global_variable (symbol_record *
 // Make the definition of the symbol record sr be the same as the
 // definition of the builtin variable, constant, or function, or user
 // function of the same name, provided that the name has not been used
 // as a formal parameter.
 
 void
 link_to_builtin_or_function (symbol_record *sr)
 {
-  symbol_record *tmp_sym = fbi_sym_tab->lookup (sr->name ());
+  std::string nm = sr->name ();
+
+  symbol_record *tmp_sym = 0;
+
+  if (curr_parent_function)
+    {
+      std::string parent = curr_parent_function->function_name ();
+
+      tmp_sym = fbi_sym_tab->lookup (parent + ":" + nm);
+    }
+
+  if (! tmp_sym)
+    tmp_sym = fbi_sym_tab->lookup (nm);
 
   if (tmp_sym
       && (tmp_sym->is_builtin_variable ()
 	  || tmp_sym->is_builtin_constant ()
 	  || tmp_sym->is_function ())
       && ! tmp_sym->is_formal_parameter ())
     sr->alias (tmp_sym);
 }
