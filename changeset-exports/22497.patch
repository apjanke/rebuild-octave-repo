# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473960285 25200
#      Thu Sep 15 10:24:45 2016 -0700
# Node ID a3f74fed899ba159bcaec830a9b2a4437e93f13a
# Parent  d7931cb69486bde3a23d5b913deb6ddbab58e2af
test: Check for JRE at runtime before executing BIST tests which use Java.

* ov-class.cc, ov-java.cc, ov-typeinfo.cc, fieldnames.m, methods.m,
javachk.m, usejava.m:
Add check on `usejava ("jvm")' before executing BIST test which uses
Java features.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1774,16 +1774,19 @@ is derived.
   return retval;
 }
 
 /*
 %!assert (class (1.1), "double")
 %!assert (class (single (1.1)), "single")
 %!assert (class (uint8 (1)), "uint8")
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! jobj = javaObject ("java.lang.StringBuffer");
 %! assert (class (jobj), "java.lang.StringBuffer");
 
 %% Test Input Validation
 %!error class ()
 */
 
 DEFUN (isa, args, ,
@@ -1877,16 +1880,19 @@ belongs to.
 %!assert (isa (uint64 (13), "uint64"))
 %!assert (isa ("string", "char"))
 %!assert (isa (true, "logical"))
 %!assert (isa (false, "logical"))
 %!assert (isa ({1, 2}, "cell"))
 %!assert (isa ({1, 2}, {"numeric", "integer", "cell"}), [false false true])
 
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! ## The first and last assert() are equal on purpose.  The assert() in
 %! ## the middle with an invalid class name will cause the java code to
 %! ## throw exceptions which we then must clear properly (or all other calls
 %! ## will fail).  So we test this too.
 %! assert (isa (javaObject ("java.lang.Double", 10), "java.lang.Number"));
 %! assert (isa (javaObject ("java.lang.Double", 10), "not_a_class"), false);
 %! assert (isa (javaObject ("java.lang.Double", 10), "java.lang.Number"));
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2863,16 +2863,19 @@ x = javaObject ("java.lang.StringBuffer"
 }
 
 /*
 ## The tests below merely check if javaObject works at all.  Whether
 ## it works properly, i.e., creates the right values, is a matter of
 ## Java itself.  Create a Short and check if it really is a short, i.e.,
 ## whether it overflows.
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javaObject ("java.lang.Short", 40000).doubleValue < 0);
 */
 
 DEFUN (javaMethod, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})
 @deftypefnx {} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})
 Invoke the method @var{methodname} on the Java object @var{obj} with the
@@ -2935,16 +2938,19 @@ equivalent
 
   err_disabled_feature ("javaMethod", "Java");
 
 #endif
 }
 
 /*
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! ## Check for valid first two Java version numbers
 %! jver = strsplit (javaMethod ("getProperty", "java.lang.System", "java.version"), ".");
 %! assert (isfinite (str2double (jver{1})) && isfinite (str2double (jver{2})));
 */
 
 DEFUN (__java_get__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{val} =} __java_get__ (@var{obj}, @var{name})
@@ -3205,49 +3211,64 @@ Return true if @var{x} is a Java object.
     print_usage ();
 
   return ovl (args(0).is_java ());
 }
 
 /*
 ## Check automatic conversion of java primitive arrays into octave types.
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javaObject ("java.lang.String", "hello").getBytes (),
 %!         int8 ([104 101 108 108 111]'));
 
 ## Check automatic conversion of octave types into java primitive arrays.
 ## Note that uint8 is casted to int8.
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 255]), uint8 (255)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 128]), uint8 (128)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 127]), uint8 (127)), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
 
 ## Check we can create objects that wrap java literals
 %!testif HAVE_JAVA <38821>
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (class (javaObject ("java.lang.Byte",     uint8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Byte",      int8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Short",   uint16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Short",    int16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Integer", uint32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Integer",  int32 (1))), "java.lang.Integer");
 %! assert (class (javaObject ("java.lang.Long",    uint64 (1))), "java.lang.Long");
 %! assert (class (javaObject ("java.lang.Long",     int64 (1))), "java.lang.Long");
 
 ## Test for automatic conversion of specific numeric classes
 %!testif HAVE_JAVA <48013>
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javaMethod ("valueOf", "java.lang.Byte",     int8 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Short",   int16 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Integer", int32 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Long",    int64 (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Float",  single (1)), 1)
 %! assert (javaMethod ("valueOf", "java.lang.Double", double (1)), 1)
 %! assert (class (javaMethod ("valueOf", "java.math.BigDecimal", double (1))), "java.math.BigDecimal")
 %! assert (class (javaMethod ("valueOf", "java.math.BigInteger",  int64 (1))), "java.math.BigInteger")
 
 ## Automatic conversion from string cell array into String[]
 %!testif HAVE_JAVA <45290>
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0);
 */
 
diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -677,16 +677,19 @@ currently installed data types.
 %!assert (typeinfo (""), "null_string")
 %!assert (typeinfo (''), "null_sq_string")
 
 %!test
 %! cvar = onCleanup (@() "");
 %! assert (typeinfo (cvar), "onCleanup");
 
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! x = javaObject ("java.lang.StringBuffer");
 %! assert (typeinfo (x), "octave_java");
 
 ## Test input validation
 %!error typeinfo ("foo", 1)
 */
 
 static boolNDArray
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -70,24 +70,33 @@ endfunction
 
 ## test empty structure
 %!test
 %! s = struct ();
 %! assert (fieldnames (s), cell (0, 1));
 
 ## test Java classname by passing classname
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! names = fieldnames ("java.lang.Double");
 %! assert (any (strcmp (names, "MAX_VALUE")));
 
 ## test Java classname by passing java object
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! names = fieldnames (javaObject ("java.lang.Double", 10));
 %! assert (any (strcmp (names, "MAX_VALUE")));
 %! assert (all (ismember ({"POSITIVE_INFINITY", "NEGATIVE_INFINITY", ...
 %!                         "NaN", "MAX_VALUE", "MIN_NORMAL", "MIN_VALUE", ...
 %!                         "MAX_EXPONENT", "MIN_EXPONENT", "SIZE", "TYPE"},
 %!                        names)));
 
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! names = fieldnames (javaObject ("java.lang.String", "Hello"));
 %! assert (any (strcmp (names, "CASE_INSENSITIVE_ORDER")));
 
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -76,12 +76,15 @@ endfunction
 
 ## test Octave classname
 %!test
 %! mtds = methods ("ftp");
 %! assert (mtds{1}, "ascii");
 
 ## test Java classname
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! mtds = methods ("java.lang.Double");
 %! search = strfind (mtds, "java.lang.Double valueOf");
 %! assert (! isempty ([search{:}]));
 
diff --git a/scripts/java/javachk.m b/scripts/java/javachk.m
--- a/scripts/java/javachk.m
+++ b/scripts/java/javachk.m
@@ -137,13 +137,16 @@ endfunction
 %! assert (msg.message, "javachk: desktop is not supported");
 %! assert (msg.identifier, "");
 %!test
 %! msg = javachk ("desktop", "Java DESKTOP");
 %! assert (msg.message, "javachk: desktop is not supported");
 %! assert (msg.identifier, "Java DESKTOP");
 
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (javachk ("jvm"), "");
 
 ## Test input validation
 %!error <javachk: unrecognized feature 'foobar'> javachk ("foobar")
 
diff --git a/scripts/java/usejava.m b/scripts/java/usejava.m
--- a/scripts/java/usejava.m
+++ b/scripts/java/usejava.m
@@ -81,16 +81,19 @@ function retval = usejava (feature)
   endswitch
 
 endfunction
 
 
 %!assert (usejava ("desktop"), false)
 
 %!testif HAVE_JAVA
+%! if (! usejava ("jvm"))
+%!   return;
+%! endif
 %! assert (usejava ("jvm"), true);
 
 ## Test input validation
 %!error usejava ()
 %!error usejava (1, 2)
 %!error usejava (1)
 %!error <unrecognized feature> usejava ("abc")
 
