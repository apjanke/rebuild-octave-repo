# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1489530002 -3600
#      Tue Mar 14 23:20:02 2017 +0100
# Node ID ea143f4f76a51d8e8147fba64c6f0eabb5da7cac
# Parent  d00280b0d6bddef11356581f929c1d56f24a8b99
Allow to close an editor tab with the middle mouse button (bug #44605)

* file-editor.cc (file_editor::construct): change tab_widget into
  file_editor_tab_widget, connect the new signal for closing the tab with
  the already existing slot of the file editor;
  (file_editor_tab_widget::mousePressEvent): reimplemented mouse event of
  the tab bar, filtering out clicks with the middle button into the tab bar

* file-editor.h: renamed the subclass tab_widget into file_editor_tab_widget,
  new signal close_current_tab_signal of the file_editor_tab_widget,
  reimplemented mousePressEvent in file_editor_tab_widget

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1559,21 +1559,24 @@ file_editor::construct (void)
   // FIXME: what was the intended purpose of this unused variable?
   // QStyle *editor_style = QApplication::style ();
   _menu_bar = new QMenuBar (editor_widget);
 #if defined (Q_OS_MAC)
   _menu_bar->setNativeMenuBar (false);
 #endif
   _tool_bar = new QToolBar (editor_widget);
   _tool_bar->setMovable (true);
-  _tab_widget = new tab_widget (editor_widget);
+
+  _tab_widget = new file_editor_tab_widget (editor_widget);
   _tab_widget->setTabsClosable (true);
 #if defined (HAVE_QTABWIDGET_SETMOVABLE)
   _tab_widget->setMovable (true);
 #endif
+  connect (_tab_widget, SIGNAL (close_current_tab_signal (bool)),
+           this, SLOT (request_close_file (bool)));
 
   // the mru-list and an empty array of actions
   QSettings *settings = resource_manager::get_settings ();
   _mru_files = settings->value ("editor/mru_file_list").toStringList ();
   _mru_files_encodings = settings->value ("editor/mru_file_encodings")
                                    .toStringList ();
 
   if (_mru_files_encodings.count () != _mru_files.count ())
@@ -2461,8 +2464,48 @@ file_editor::switch_tab (int direction, 
       focus ();
 #endif
     }
   else
     _tab_widget->setCurrentIndex (new_pos);
 }
 
 #endif
+
+
+//
+// Functions of the the reimplemented tab widget
+//
+
+// Reimplement mouse event for filtering out the desired mouse clicks
+void
+file_editor_tab_widget::mousePressEvent(QMouseEvent *me)
+{
+  if (me->type () != QEvent::MouseButtonDblClick &&
+       me->button() == Qt::MiddleButton)
+    {
+      // Middle click into the tabbar -> close the tab
+      for (int i = 0; i < tabBar ()->count (); i++)
+        {
+          QPoint clickPos = mapToGlobal (me->pos ());
+          if (tabBar ()->tabRect (i).contains (tabBar ()->mapFromGlobal (clickPos)))
+            {
+              int idx = currentIndex ();
+              // Make the clicked tab the current one and close it
+              setCurrentIndex (i);
+              emit close_current_tab_signal (true);
+              // Was the closed tab before or after the previously current tab?
+              // According to the result, use previous index or remove it by one
+              if (idx - i > 0)
+                setCurrentIndex (idx - 1);
+              else if (idx - i < 0)
+                setCurrentIndex (idx);
+              break;
+            }
+        }
+    }
+  else
+    {
+      // regular handling of the mouse event
+      QTabWidget::mousePressEvent (me);
+    }
+}
+
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -34,27 +34,39 @@ along with Octave; see the file COPYING.
 #include <QDragEnterEvent>
 #include <QDropEvent>
 
 #include <map>
 
 #include "file-editor-interface.h"
 #include "file-editor-tab.h"
 
-// subclassed QTabWidget for usable tab-bar
-class tab_widget : public QTabWidget
+// subclassed QTabWidget for usable tab-bar and reimplemented mouse event
+class file_editor_tab_widget : public QTabWidget
 {
   Q_OBJECT
 
 public:
-  tab_widget (QWidget *p) : QTabWidget (p) { }
-  ~tab_widget () { }
+
+  file_editor_tab_widget (QWidget *p) : QTabWidget (p) { }
+
+  ~file_editor_tab_widget () { }
+
   QTabBar* tabBar () const { return (QTabWidget::tabBar ()); }
+
+signals:
+
+  void close_current_tab_signal (bool);
+
+protected:
+
+  void mousePressEvent(QMouseEvent *event);
 };
 
+// the class for the file editor
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
 public:
 
   struct tab_info
   {
@@ -425,17 +437,17 @@ private:
   QMenu *_edit_cmd_menu;
   QMenu *_edit_fmt_menu;
   QMenu *_edit_nav_menu;
   QMenu *_fileMenu;
   QMenu *_view_editor_menu;
 
   QList<QAction*> _fetab_actions;
 
-  tab_widget *_tab_widget;
+  file_editor_tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   bool _closed;
 
   QString _file_encoding;
 
   enum { MaxMRUFiles = 10 };
