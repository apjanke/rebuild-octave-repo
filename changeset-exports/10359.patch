# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267105532 -3600
#      Thu Feb 25 14:45:32 2010 +0100
# Node ID ec05728ce7f087a9e2f9f323f0814b25873714f1
# Parent  72fab01e5d68390bfb37f30aa630f479964fa8fb
guard against >2GB allocations with 32-bit ptrs on weird platforms

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,9 +1,13 @@
-
+2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-mem.h (safe_size_comp): New helper func.
+	(no_ctor_new): Call it here.
+
 2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-mem.h (copy_or_memcpy, fill_or_memset, no_ctor_new): Accept
 	size_t rather than octave_idx_type.
 	* Array.h (Array<T>::byte_size): Correct calculation.
 	* DiagArray2.h (DiagArray2<T>::byte_size): Call inherited byte_size.
 	* PermMatrix.h (PermMatrix::byte_size): Ditto.
 
diff --git a/liboctave/oct-mem.h b/liboctave/oct-mem.h
--- a/liboctave/oct-mem.h
+++ b/liboctave/oct-mem.h
@@ -31,16 +31,23 @@ along with Octave; see the file COPYING.
 #include "oct-inttypes.h"
 
 // NOTE: These functions are used to optimize stuff where performance is a
 // priority. They assume that the std::complex and octave_int can be
 // manipulated as plain memory, an assumption that is always true in practice
 // but not theoretically guaranteed by the C++ standard. In the future, C++ may
 // provide a better way to accomplish these tasks.
 
+inline size_t safe_size_comp (size_t n, size_t size)
+{
+  if (n > static_cast<size_t> (-1) / size)
+    throw std::bad_alloc ();
+  return n * size;
+}
+
 // Unaliased copy. This boils down to memcpy, even for octave_int and complex types.
 
 template <class T>
 inline void copy_or_memcpy (size_t n, const T *src, T *dest)
 { std::copy (src, src + n, dest); }
 
 #define DEFINE_POD_UCOPY(T) \
 inline void copy_or_memcpy (size_t n, const T *src, T *dest) \
@@ -112,25 +119,30 @@ DEFINE_POD_FILL (FloatComplex)
 
 template <class T>
 DEFINE_POD_FILL (octave_int<T>)
 
 // Uninitialized allocation. Will not initialize memory for complex and octave_int.
 // Memory allocated by octave_new should be freed by octave_delete.
 template <class T>
 inline T *no_ctor_new (size_t n)
-{ return new T[n]; }
+{ 
+  // Some systems let us allocate > 2GB memory even though size_t, which is either
+  // buggy or completely cuckoo, so let's check here to stay safe.
+  safe_size_comp (n, sizeof (T));
+  return new T[n]; 
+}
 template <class T>
 inline void no_ctor_delete (T *ptr)
 { delete [] ptr; }
 
 #define DEFINE_POD_NEW_DELETE(T) \
 template <> \
 inline T *no_ctor_new<T > (size_t n) \
-{ return reinterpret_cast<T *> (new char[n * sizeof (T)]); } \
+{ return reinterpret_cast<T *> (new char[safe_size_comp (n, sizeof (T))]); } \
 template <> \
 inline void no_ctor_delete<T > (T *ptr) \
 { delete [] reinterpret_cast<char *> (ptr); }
 
 DEFINE_POD_NEW_DELETE (Complex)
 DEFINE_POD_NEW_DELETE (FloatComplex)
 
 DEFINE_POD_NEW_DELETE (octave_int8)
