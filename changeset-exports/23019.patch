# HG changeset patch
# User Rik <rik@octave.org>
# Date 1483825110 28800
#      Sat Jan 07 13:38:30 2017 -0800
# Node ID cb09392b5b1c5e6df4509ee51150b6416387053b
# Parent  50b9eb1fb5fbcf9c1f4c56d9d206ae1f19892be5
Return struct array for 'names' option of regexp (bug #49659).

* NEWS: Announce change.

* regexp.cc (octregexp): Change return variable nmap to type octave_map from
octave_scalar_map.  Change Cell variable tmp to ctmp for clarity.  Declare
temporary variable i just before use.  Change BIST tests to reflect new
behavior.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -9,16 +9,20 @@ Summary of important user-visible change
 
       BLAS  LAPACK  QRUPDATE  SuiteSparse  ARPACK
 
     Additionally, the following libraries use "int" internally, so
     maximum problem sizes are always limited:
 
       glpk  Qhull
 
+ ** The "names" option used in regular expressions now returns a struct
+    array, rather than a struct with a cell array for each field.  This
+    change was made for Matlab compatibility.
+
  ** Other new functions added in 4.4:
 
       gsvd
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.4 and will
     be removed from Octave 4.8 (or whatever version is the second major
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -354,49 +354,38 @@ octregexp (const octave_value_list &args
     = octave::regexp::match (pattern, buffer, options, who);
 
   string_vector named_pats = rx_lst.named_patterns ();
 
   size_t sz = rx_lst.size ();
 
   // Converted the linked list in the correct form for the return values
 
-  octave_idx_type i = 0;
-  octave_scalar_map nmap;
+  octave_map nmap (dim_vector ((sz == 0 ? 0 : 1), sz), named_pats);
 
   retval.resize (7);
 
-  if (sz == 1)
-    {
-      string_vector named_tokens = rx_lst.begin ()->named_tokens ();
-
-      for (int j = 0; j < named_pats.numel (); j++)
-        nmap.assign (named_pats(j), named_tokens(j));
-
-      retval(5) = nmap;
-    }
-  else
+  if (sz != 0)
     {
       for (int j = 0; j < named_pats.numel (); j++)
         {
-          Cell tmp (dim_vector (1, sz));
+          Cell ctmp (dim_vector (1, sz));
+          octave_idx_type i = 0;
 
-          i = 0;
           for (const auto& match_data : rx_lst)
             {
               string_vector named_tokens = match_data.named_tokens ();
 
-              tmp(i++) = named_tokens(j);
+              ctmp(i++) = named_tokens(j);
             }
 
-          nmap.assign (named_pats(j), octave_value (tmp));
+          nmap.assign (named_pats(j), ctmp);
         }
-
-      retval(5) = nmap;
     }
+  retval(5) = nmap;
 
   if (options.once ())
     {
       octave::regexp::match_data::const_iterator p = rx_lst.begin ();
 
       retval(4) = sz ? p->tokens () : Cell ();
       retval(3) = sz ? p->match_string () : "";
       retval(2) = sz ? p->token_extents () : Matrix ();
@@ -426,17 +415,17 @@ octregexp (const octave_value_list &args
       Cell tokens (dim_vector (1, sz));
       Cell match_string (dim_vector (1, sz));
       Cell token_extents (dim_vector (1, sz));
       NDArray end (dim_vector (1, sz));
       NDArray start (dim_vector (1, sz));
       Cell split (dim_vector (1, sz+1));
       size_t sp_start = 0;
 
-      i = 0;
+      octave_idx_type i = 0;
       for (const auto& match_data : rx_lst)
         {
           double s = match_data.start ();
           double e = match_data.end ();
 
           string_vector tmp = match_data.tokens ();
           tokens(i) = Cell (dim_vector (1, tmp.numel ()), tmp);
           match_string(i) = match_data.match_string ();
@@ -971,25 +960,25 @@ are zero or more @qcode{'b'} characters 
 %! assert (! isempty (fieldnames (nm)));
 %! assert (sort (fieldnames (nm)), {'word1';'word2'});
 %! assert (nm.word1, 'short');
 %! assert (nm.word2, 'test');
 
 %!test
 %! [t, nm] = regexp ("John Davis\nRogers, James", '(?<first>\w+)\s+(?<last>\w+)|(?<last>\w+),\s+(?<first>\w+)', 'tokens', 'names');
 %! assert (size (t), [1, 2]);
-%! assert (t{1}{1}, 'John');
-%! assert (t{1}{2}, 'Davis');
-%! assert (t{2}{1}, 'Rogers');
-%! assert (t{2}{2}, 'James');
-%! assert (size (nm), [1, 1]);
-%! assert (nm.first{1}, 'John');
-%! assert (nm.first{2}, 'James');
-%! assert (nm.last{1}, 'Davis');
-%! assert (nm.last{2}, 'Rogers');
+%! assert (t{1}{1}, "John");
+%! assert (t{1}{2}, "Davis");
+%! assert (t{2}{1}, "Rogers");
+%! assert (t{2}{2}, "James");
+%! assert (size (nm), [1, 2]);
+%! assert (nm(1).first, "John");
+%! assert (nm(1).last, "Davis");
+%! assert (nm(2).first, "James");
+%! assert (nm(2).last, "Rogers");
 
 ## Tests for named tokens
 %!test
 %! ## Parenthesis in named token (ie (int)) causes a problem
 %! assert (regexp ('qwe int asd', ['(?<typestr>(int))'], 'names'), struct ('typestr', 'int'));
 
 %!test <35683>
 %! ## Mix of named and unnamed tokens can cause segfault
