# HG changeset patch
# User jwe
# Date 861874946 0
#      Thu Apr 24 09:42:26 1997 +0000
# Node ID 4309724baab6825fc98efa37f657c20a5fe340f4
# Parent  55cca18e943a025df0f07eaedbf56ecb4f8c76ce
[project @ 1997-04-24 09:30:23 by jwe]

diff --git a/src/op-cm-cm.cc b/src/op-cm-cm.cc
--- a/src/op-cm-cm.cc
+++ b/src/op-cm-cm.cc
@@ -215,16 +215,16 @@ install_cm_cm_ops (void)
   INSTALL_BINOP (ne, octave_complex_matrix, octave_complex_matrix, ne);
   INSTALL_BINOP (el_mul, octave_complex_matrix, octave_complex_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_complex_matrix, octave_complex_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_complex_matrix, octave_complex_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_complex_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex_matrix, octave_complex_matrix, el_and);
   INSTALL_BINOP (el_or, octave_complex_matrix, octave_complex_matrix, el_or);
 
-  INSTALL_ASSIGNOP (octave_complex_matrix, octave_complex_matrix, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_complex_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cm-cs.cc b/src/op-cm-cs.cc
--- a/src/op-cm-cs.cc
+++ b/src/op-cm-cs.cc
@@ -220,16 +220,16 @@ install_cm_cs_ops (void)
   INSTALL_BINOP (ne, octave_complex_matrix, octave_complex, ne);
   INSTALL_BINOP (el_mul, octave_complex_matrix, octave_complex, el_mul);
   INSTALL_BINOP (el_div, octave_complex_matrix, octave_complex, el_div);
   INSTALL_BINOP (el_pow, octave_complex_matrix, octave_complex, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_complex, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex_matrix, octave_complex, el_and);
   INSTALL_BINOP (el_or, octave_complex_matrix, octave_complex, el_or);
 
-  INSTALL_ASSIGNOP (octave_complex_matrix, octave_complex, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_complex, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cm-m.cc b/src/op-cm-m.cc
--- a/src/op-cm-m.cc
+++ b/src/op-cm-m.cc
@@ -213,16 +213,16 @@ install_cm_m_ops (void)
   INSTALL_BINOP (ne, octave_complex_matrix, octave_matrix, ne);
   INSTALL_BINOP (el_mul, octave_complex_matrix, octave_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_complex_matrix, octave_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_complex_matrix, octave_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex_matrix, octave_matrix, el_and);
   INSTALL_BINOP (el_or, octave_complex_matrix, octave_matrix, el_or);
 
-  INSTALL_ASSIGNOP (octave_complex_matrix, octave_matrix, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cm-s.cc b/src/op-cm-s.cc
--- a/src/op-cm-s.cc
+++ b/src/op-cm-s.cc
@@ -222,16 +222,16 @@ install_cm_s_ops (void)
   INSTALL_BINOP (ne, octave_complex_matrix, octave_scalar, ne);
   INSTALL_BINOP (el_mul, octave_complex_matrix, octave_scalar, el_mul);
   INSTALL_BINOP (el_div, octave_complex_matrix, octave_scalar, el_div);
   INSTALL_BINOP (el_pow, octave_complex_matrix, octave_scalar, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex_matrix, octave_scalar, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex_matrix, octave_scalar, el_and);
   INSTALL_BINOP (el_or, octave_complex_matrix, octave_scalar, el_or);
 
-  INSTALL_ASSIGNOP (octave_complex_matrix, octave_scalar, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_complex_matrix, octave_scalar, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-m-m.cc b/src/op-m-m.cc
--- a/src/op-m-m.cc
+++ b/src/op-m-m.cc
@@ -209,16 +209,16 @@ install_m_m_ops (void)
   INSTALL_BINOP (ne, octave_matrix, octave_matrix, ne);
   INSTALL_BINOP (el_mul, octave_matrix, octave_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_matrix, octave_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_matrix, octave_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_matrix, octave_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_matrix, octave_matrix, el_and);
   INSTALL_BINOP (el_or, octave_matrix, octave_matrix, el_or);
 
-  INSTALL_ASSIGNOP (octave_matrix, octave_matrix, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_matrix, octave_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-m-s.cc b/src/op-m-s.cc
--- a/src/op-m-s.cc
+++ b/src/op-m-s.cc
@@ -220,16 +220,16 @@ install_m_s_ops (void)
   INSTALL_BINOP (ne, octave_matrix, octave_scalar, ne);
   INSTALL_BINOP (el_mul, octave_matrix, octave_scalar, el_mul);
   INSTALL_BINOP (el_div, octave_matrix, octave_scalar, el_div);
   INSTALL_BINOP (el_pow, octave_matrix, octave_scalar, el_pow);
   INSTALL_BINOP (el_ldiv, octave_matrix, octave_scalar, el_ldiv);
   INSTALL_BINOP (el_and, octave_matrix, octave_scalar, el_and);
   INSTALL_BINOP (el_or, octave_matrix, octave_scalar, el_or);
 
-  INSTALL_ASSIGNOP (octave_matrix, octave_scalar, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_matrix, octave_scalar, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-str-str.cc b/src/op-str-str.cc
--- a/src/op-str-str.cc
+++ b/src/op-str-str.cc
@@ -106,16 +106,16 @@ assign (octave_value& a1, const octave_v
 }
 
 void
 install_str_str_ops (void)
 {
   INSTALL_BINOP (eq, octave_char_matrix_str, octave_char_matrix_str, eq);
   INSTALL_BINOP (ne, octave_char_matrix_str, octave_char_matrix_str, ne);
 
-  INSTALL_ASSIGNOP (octave_char_matrix_str, octave_char_matrix_str, assign);
+  INSTALL_ASSIGNOP (asn_eq, octave_char_matrix_str, octave_char_matrix_str, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -20,27 +20,23 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_ops_h)
 #define octave_ops_h 1
 
 extern void install_ops (void);
 
-#define INSTALL_UNOP(op, t, f) \
-  octave_value_typeinfo::register_unary_op \
-    (octave_value::op, t::static_type_id (), f);
-
 #define INSTALL_BINOP(op, t1, t2, f) \
   octave_value_typeinfo::register_binary_op \
     (octave_value::op, t1::static_type_id (), t2::static_type_id (), f);
 
-#define INSTALL_ASSIGNOP(t1, t2, f) \
+#define INSTALL_ASSIGNOP(op, t1, t2, f) \
   octave_value_typeinfo::register_assign_op \
-    (t1::static_type_id (), t2::static_type_id (), f);
+    (octave_value::op, t1::static_type_id (), t2::static_type_id (), f);
 
 #define INSTALL_ASSIGNCONV(t1, t2, tr) \
   octave_value_typeinfo::register_pref_assign_conv \
     (t1::static_type_id (), t2::static_type_id (), tr::static_type_id ());
 
 #define INSTALL_WIDENOP(t1, t2, f) \
   octave_value_typeinfo::register_widening_op \
     (t1::static_type_id (), t2::static_type_id (), f);
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -306,17 +306,17 @@ tree_for_command::do_for_loop_once (tree
   octave_variable_reference tmp (ident);
 
   if (error_state)
     {
       eval_error ();
       return;
     }
 
-  tmp.assign (rhs);
+  tmp.assign (octave_value::asn_eq, rhs);
 
   if (list)
     {
       list->eval (true);
       if (error_state)
 	{
 	  eval_error ();
 	  quit = true;
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -23,64 +23,27 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cctype>
-#include <cstring>
-
-#include <string>
-
-#include <fstream.h>
 #include <iostream.h>
 
-#include <SLList.h>
-
-#include "Array-flags.h"
-
-#include "mx-base.h"
-#include "Range.h"
-#include "str-vec.h"
-
-#include "defun.h"
-#include "error.h"
-#include "gripes.h"
-#include "idx-vector.h"
-#include "mappers.h"
-#include "oct-map.h"
 #include "oct-obj.h"
-#include "pager.h"
-#include "pr-output.h"
-#include "sysdep.h"
 #include "pt-const.h"
 #include "pt-walk.h"
-#include "unwind-prot.h"
-#include "utils.h"
-#include "variables.h"
 
 // We are likely to have a lot of tree_constant objects to allocate,
 // so make the grow_size large.
 octave_allocator
 tree_constant::allocator (sizeof (tree_constant), 1024);
 
-Octave_map
-tree_constant::map_value (void) const
-{
-  return val.map_value ();
-}
-
-void
-tree_constant::print (void)
-{
-}
-
 void
 tree_constant::print (ostream& os, bool pr_as_read_syntax, bool pr_orig_text)
 {
   if (pr_orig_text && ! orig_text.empty ())
     os << orig_text;
   else
     val.print (os, pr_as_read_syntax);
 }
@@ -92,52 +55,17 @@ tree_constant::eval (bool print_result)
     val.print ();
 
   return val;
 }
 
 octave_value_list
 tree_constant::eval (bool, int, const octave_value_list& idx)
 {
-  octave_value_list retval;
-
-  if (idx.length () >  0)
-    retval (0) = index (idx);
-  else
-    retval (0) = val;
-
-  return retval;
-}
-
-octave_value
-tree_constant::lookup_map_element (const string&, bool, bool)
-{
-  octave_value retval;
-  error ("tree_constant::lookup_map_element() not implemented");
-  return retval;
-}
-
-octave_value
-tree_constant::lookup_map_element (SLList<string>&, bool, bool)
-{
-  octave_value retval;
-  error ("tree_constant::lookup_map_element() not implemented");
-  return retval;
-}
-
-void
-tree_constant::stash_original_text (const string& s)
-{
-  orig_text = s;
-}
-
-string
-tree_constant::original_text (void) const
-{
-  return orig_text;
+  return (idx.length () > 0) ? index (idx) : val;
 }
 
 void
 tree_constant::accept (tree_walker& tw)
 {
   tw.visit_constant (*this);
 }
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -26,123 +26,33 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 class ostream;
 
-#include "Range.h"
-#include "mx-base.h"
 #include "oct-alloc.h"
-#include "str-vec.h"
 
 #include "pt-fvc.h"
 
-class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 #include "ov.h"
 
 class
 tree_constant : public tree_fvc
 {
 public:
 
-  enum magic_colon { magic_colon_t };
-  enum all_va_args { all_va_args_t };
-
-  // Constructors.  It is possible to create the following types of
-  // constants:
-  //
-  // constant type    constructor arguments
-  // -------------    ---------------------
-  // unknown          none
-  // real scalar      double
-  // real matrix      Matrix
-  //                  DiagMatrix
-  //                  RowVector
-  //                  ColumnVector
-  // complex scalar   Complex
-  // complex matrix   ComplexMatrix
-  //                  ComplexDiagMatrix
-  //                  ComplexRowVector
-  //                  ComplexColumnVector
-  // char matrix      charMatrix
-  // string           char* (null terminated)
-  //                  string
-  //                  charMatrix
-  // range            double, double, double
-  //                  Range
-  // map              Octave_map
-  // magic colon      tree_constant::magic_colon
-  // all_va_args      tree_constant::all_va_args
-
-  tree_constant (void)
-    : tree_fvc (), val (), orig_text () { }
-
-  tree_constant (double d, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (d), orig_text () { }
-
-  tree_constant (const Matrix& m)
-    : tree_fvc (), val (m), orig_text () { }
-
-  tree_constant (const DiagMatrix& d)
-    : tree_fvc (), val (d), orig_text () { }
-
-  tree_constant (const RowVector& v, int pcv = -1)
-    : tree_fvc (), val (v, pcv), orig_text () { }
-
-  tree_constant (const ColumnVector& v, int pcv = -1)
-    : tree_fvc (), val (v, pcv), orig_text () { }
-
-  tree_constant (const Complex& C, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (C), orig_text () { }
-
-  tree_constant (const ComplexMatrix& m)
-    : tree_fvc (), val (m), orig_text () { }
-
-  tree_constant (const ComplexDiagMatrix& d)
-    : tree_fvc (), val (d), orig_text () { }
-
-  tree_constant (const ComplexRowVector& v, int pcv = -1)
-    : tree_fvc (), val (v, pcv), orig_text () { }
-
-  tree_constant (const ComplexColumnVector& v, int pcv = -1)
-    : tree_fvc (), val (v, pcv), orig_text () { }
-
-  tree_constant (const char *s, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (s), orig_text () { }
-
-  tree_constant (const string& s, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (s), orig_text () { }
-
-  tree_constant (const string_vector& s, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (s), orig_text () { }
-
-  tree_constant (const charMatrix& chm, bool is_string = false)
-    : tree_fvc (), val (chm, is_string), orig_text () { }
-
-  tree_constant (double base, double limit, double inc)
-    : tree_fvc (), val (base, limit, inc), orig_text () { }
-
-  tree_constant (const Range& r)
-    : tree_fvc (), val (r), orig_text () { }
-
-  tree_constant (const Octave_map& m)
-    : tree_fvc (), val (m), orig_text () { }
-
-  tree_constant (tree_constant::magic_colon, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (octave_value::magic_colon_t), orig_text () { }
-
-  tree_constant (tree_constant::all_va_args, int l = -1, int c = -1)
-    : tree_fvc (l, c), val (octave_value::all_va_args_t), orig_text () { }
+  tree_constant (int l = -1, int c = -1)
+    : tree_fvc (l, c), val (), orig_text () { }
 
   tree_constant (const octave_value& v, int l = -1, int c = -1)
     : tree_fvc (l, c), val (v), orig_text () { }
 
   tree_constant (const tree_constant& a)
     : tree_fvc (), val (a.val), orig_text () { }
 
   ~tree_constant (void) { }
@@ -170,188 +80,51 @@ public:
 
   octave_value& reference (void)
     {
       val.make_unique ();
       return val;
     }
 
   octave_value value (void) const
-    {
-      return val;
-    }
+    { return val; }
 
-  octave_value assign (const octave_value_list& idx, const octave_value& rhs)
+  octave_value assign (octave_value::assign_op op,
+		       const octave_value_list& idx,
+		       const octave_value& rhs)
     {
-      val.assign (idx, rhs);
+      val.assign (op, idx, rhs);
       return val;
     }
 
   // Type.  It would be nice to eliminate the need for this.
 
   bool is_constant (void) const { return true; }
 
-  // Size.
-
-  int rows (void) const { return val.rows (); }
-  int columns (void) const { return val.columns (); }
-
-  // Does this constant have a type?  Both of these are provided since
-  // it is sometimes more natural to write is_undefined() instead of
-  // ! is_defined().
-
-  bool is_defined (void) const { return val.is_defined (); }
-  bool is_undefined (void) const { return val.is_undefined (); }
-
-  // Is this constant a particular type, or does it belong to a
-  // particular class of types?
-
-  bool is_real_scalar (void) const { return val.is_real_scalar (); }
-  bool is_real_matrix (void) const { return val.is_real_matrix (); }
-  bool is_complex_scalar (void) const { return val.is_complex_scalar (); }
-  bool is_complex_matrix (void) const { return val.is_complex_matrix (); }
-  bool is_char_matrix (void) const { return val.is_char_matrix (); }
-  bool is_string (void) const { return val.is_string (); }
-  bool is_range (void) const { return val.is_range (); }
-  bool is_map (void) const { return val.is_map (); }
-  bool is_magic_colon (void) const { return val.is_magic_colon (); }
-  bool is_all_va_args (void) const { return val.is_all_va_args (); }
-
-  // Are any or all of the elements in this constant nonzero?
-
-  octave_value all (void) const { return val.all (); }
-  octave_value any (void) const { return val.any (); }
-
-  // Other type stuff.
-
-  bool is_real_type (void) const { return val.is_real_type (); }
-
-  bool is_complex_type (void) const { return val.is_complex_type (); }
-
-  bool is_scalar_type (void) const { return val.is_scalar_type (); }
-  bool is_matrix_type (void) const { return val.is_matrix_type (); }
-
-  bool is_numeric_type (void) const
-    { return val.is_numeric_type (); }
-
-  bool valid_as_scalar_index (void) const
-    { return val.valid_as_scalar_index (); }
-
-  bool valid_as_zero_index (void) const
-    { return val.valid_as_zero_index (); }
-
-  // Does this constant correspond to a truth value?
-
-  bool is_true (void) const { return val.is_true (); }
-
-  // Is at least one of the dimensions of this constant zero?
-
-  bool is_empty (void) const
-    { return val.is_empty (); }
-
-  // Are the dimensions of this constant zero by zero?
-
-  bool is_zero_by_zero (void) const
-    { return val.is_zero_by_zero (); }
-
-  // Values.
-
-  double double_value (bool frc_str_conv = false) const
-    { return val.double_value (frc_str_conv); }
-
-  Matrix matrix_value (bool frc_str_conv = false) const
-    { return val.matrix_value (frc_str_conv); }
-
-  Complex complex_value (bool frc_str_conv = false) const
-    { return val.complex_value (frc_str_conv); }
-
-  ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
-    { return val.complex_matrix_value (frc_str_conv); }
-
-  charMatrix char_matrix_value (bool frc_str_conv = false) const
-    { return val.char_matrix_value (frc_str_conv); }
-
-  charMatrix all_strings (void) const
-    { return val.all_strings (); }
-
-  string string_value (void) const
-    { return val.string_value (); }
-
-  Range range_value (void) const
-    { return val.range_value (); }
-
-  Octave_map map_value (void) const;
-
-  octave_value lookup_map_element (const string& ref,
-				   bool insert = false,
-				   bool silent = false);
-
-  octave_value lookup_map_element (SLList<string>& list,
-				   bool insert = false,
-				   bool silent = false);
-
-  ColumnVector vector_value (bool /* frc_str_conv */ = false,
-			     bool /* frc_vec_conv */ = false) const 
-    { return val.vector_value (); }
-
-  ComplexColumnVector
-  complex_vector_value (bool /* frc_str_conv */ = false,
-			bool /* frc_vec_conv */ = false) const
-    { return val.complex_vector_value (); }
-
-  // Binary and unary operations.
-
-  friend octave_value do_binary_op (octave_value& a, octave_value& b,
-				    tree_expression::type t);
-
-  friend octave_value do_unary_op (octave_value& a,
-				   tree_expression::type t);
-
-  // Conversions.  These should probably be private.  If a user of this
-  // class wants a certain kind of constant, he should simply ask for
-  // it, and we should convert it if possible.
-
-  octave_value convert_to_str (void) const
-    { return val.convert_to_str (); }
-
-  void convert_to_row_or_column_vector (void)
-    { val.convert_to_row_or_column_vector (); }
-
   void maybe_mutate (void)
     { val.maybe_mutate (); }
 
-  // Increment or decrement this constant.
-
-  void increment (void) { val.increment (); }
-
-  void decrement (void) { val.decrement (); }
-
-  void print (void);
   void print (ostream& os, bool pr_as_read_syntax = false,
 	      bool pr_orig_txt = true);
 
-  void print_with_name (const string& name, bool print_padding = true);
-  void print_with_name (ostream& os, const string& name,
-			bool print_padding = true);
-
   octave_value eval (bool print = false);
 
   octave_value_list eval (bool, int, const octave_value_list&);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
-  void stash_original_text (const string& s);
+  void stash_original_text (const string& s)
+    { orig_text = s; }
 
-  string original_text (void) const;
+  string original_text (void) const
+    { return orig_text; }
 
   void accept (tree_walker& tw);
 
-  string type_name (void) const { return val.type_name (); }
-
 private:
 
   // For custom memory management.
   static octave_allocator allocator;
 
   // The actual value that this constant refers to.
   octave_value val;
 
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -41,16 +41,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "utils.h"
+#include "variables.h"
 
 // Nonzero means we're returning from a function.
 extern int returning;
 
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Prefix expressions.
@@ -330,100 +331,19 @@ tree_binary_expression::eval (bool /* pr
       else if (a.is_defined () && op_rhs)
 	{
 	  octave_value b = op_rhs->eval ();
 
 	  if (error_state)
 	    eval_error ();
 	  else if (b.is_defined ())
 	    {
-	      octave_value::binary_op op = octave_value::unknown_binary_op;
-
-	      switch (etype)
-		{
-		case add:
-		  op = octave_value::add;
-		  break;
-
-		case subtract:
-		  op = octave_value::sub;
-		  break;
-
-		case multiply:
-		  op = octave_value::mul;
-		  break;
-
-		case el_mul:
-		  op = octave_value::el_mul;
-		  break;
-
-		case divide:
-		  op = octave_value::div;
-		  break;
-
-		case el_div:
-		  op = octave_value::el_div;
-		  break;
-
-		case leftdiv:
-		  op = octave_value::ldiv;
-		  break;
-
-		case el_leftdiv:
-		  op = octave_value::el_ldiv;
-		  break;
-
-		case power:
-		  op = octave_value::pow;
-		  break;
+	      retval = ::do_binary_op (etype, a, b);
 
-		case elem_pow:
-		  op = octave_value::el_pow;
-		  break;
-
-		case cmp_lt:
-		  op = octave_value::lt;
-		  break;
-
-		case cmp_le:
-		  op = octave_value::le;
-		  break;
-
-		case cmp_eq:
-		  op = octave_value::eq;
-		  break;
-
-		case cmp_ge:
-		  op = octave_value::ge;
-		  break;
-
-		case cmp_gt:
-		  op = octave_value::gt;
-		  break;
-
-		case cmp_ne:
-		  op = octave_value::ne;
-		  break;
-
-		case el_and:
-		  op = octave_value::el_and;
-		  break;
-
-		case el_or:
-		  op = octave_value::el_or;
-		  break;
-
-		default:
-		  ::error ("binary operator %d not implemented", etype);
-		  break;
-		}
-
-	      if (! error_state)
-		retval = ::do_binary_op (op, a, b);
-	      else
+	      if (error_state)
 		{
 		  retval = octave_value ();
 		  eval_error ();
 		}
 	    }
 	  else
 	    eval_error ();
 	}
@@ -434,96 +354,18 @@ tree_binary_expression::eval (bool /* pr
     eval_error ();
 
   return retval;
 }
 
 const char *
 tree_binary_expression::oper (void) const
 {
-  static const char *op;
-  switch (etype)
-    {
-    case add:
-      op = "+";
-      break;
-
-    case subtract:
-      op = "-";
-      break;
-
-    case multiply:
-      op = "*";
-      break;
-
-    case el_mul:
-      op = ".*";
-      break;
-
-    case divide:
-      op = "/";
-      break;
-
-    case el_div:
-      op = "./";
-      break;
-
-    case leftdiv:
-      op = "\\";
-      break;
-
-    case el_leftdiv:
-      op = ".\\";
-      break;
-
-    case power:
-      op = "^";
-      break;
-
-    case elem_pow:
-      op = ".^";
-      break;
-
-    case cmp_lt:
-      op = "<";
-      break;
-
-    case cmp_le:
-      op = "<=";
-      break;
-
-    case cmp_eq:
-      op = "==";
-      break;
-
-    case cmp_ge:
-      op = ">=";
-      break;
-
-    case cmp_gt:
-      op = ">";
-      break;
-
-    case cmp_ne:
-      op = "!=";
-      break;
-
-    case el_and:
-      op = "&";
-      break;
-
-    case el_or:
-      op = "|";
-      break;
-
-    default:
-      op = "<unknown>";
-      break;
-    }
-  return op;
+  // XXX FIXME XXX
+  return octave_value::binary_op_as_string (etype) . c_str ();
 }
 
 void
 tree_binary_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating binary operator `%s' near line %d, column %d",
 	     oper (), line (), column ());
@@ -625,35 +467,27 @@ tree_boolean_expression::oper (void) con
     }
   return op;
 }
 
 // Simple assignment expressions.
 
 tree_simple_assignment_expression::tree_simple_assignment_expression
   (tree_identifier *i, tree_expression *r, bool plhs, bool ans_assign,
-   int l, int c)
-    : tree_expression (l, c)
-      {
-	init (plhs, ans_assign);
-	lhs = new tree_indirect_ref (i);
-	rhs = r;
-      }
+   int l, int c, octave_value::assign_op t)
+    : tree_expression (l, c), lhs_idx_expr (0),
+      lhs (new tree_indirect_ref (i)), index (0), rhs (r),
+      preserve (plhs), ans_ass (ans_assign), etype (t) { }
 
 tree_simple_assignment_expression::tree_simple_assignment_expression
   (tree_index_expression *idx_expr, tree_expression *r, bool plhs,
-   bool ans_assign, int l, int c)
-    : tree_expression (l, c)
-      {
-	init (plhs, ans_assign);
-	lhs_idx_expr = idx_expr; // cache this -- we may need to delete it.
-	lhs = idx_expr->ident ();
-	index = idx_expr->arg_list ();
-	rhs = r;
-      }
+   bool ans_assign, int l, int c, octave_value::assign_op t)
+    : tree_expression (l, c), lhs_idx_expr (idx_expr),
+      lhs (idx_expr->ident ()), index (idx_expr->arg_list ()), rhs (r),
+      preserve (plhs), ans_ass (ans_assign), etype (t) { }
 
 tree_simple_assignment_expression::~tree_simple_assignment_expression (void)
 {
   if (! preserve)
     {
       if (lhs_idx_expr)
 	delete lhs_idx_expr;
       else
@@ -676,18 +510,16 @@ tree_simple_assignment_expression::left_
 }
 
 // ??? FIXME ??? -- should octave_variable_reference::assign return
 // the right thing for us to return?
 
 octave_value
 tree_simple_assignment_expression::eval (bool print)
 {
-  assert (etype == tree_expression::assignment);
-
   octave_value retval;
 
   octave_value lhs_val;
 
   if (error_state)
     return retval;
 
   if (rhs)
@@ -720,34 +552,34 @@ tree_simple_assignment_expression::eval 
 		  if (error_state)
 		    eval_error ();
 		  else
 		    {
 		      int nargin = args.length ();
 
 		      if (nargin > 0)
 			{
-			  ult.assign (args, rhs_val);
+			  ult.assign (etype, args, rhs_val);
 
 			  if (error_state)
 			    eval_error ();
 			  else
 			    {
 			      lhs_val = ult.value ();
 
 			      retval = rhs_val;
 			    }
 			}
 		      else
 			error ("??? invalid index list ???");
 		    }
 		}
 	      else
 		{
-		  ult.assign (rhs_val);
+		  ult.assign (etype, rhs_val);
 
 		  lhs_val = ult.value ();
 
 		  retval = rhs_val;
 		}
 	    }
 	}
     }
@@ -771,16 +603,22 @@ tree_simple_assignment_expression::eval_
       int c = column ();
 
       if (l != -1 && c != -1)
 	::error ("evaluating assignment expression near line %d, column %d",
 		 l, c);
     }
 }
 
+const char *
+tree_simple_assignment_expression::oper (void) const
+{
+  return octave_value::assign_op_as_string (etype) . c_str ();
+}
+
 void
 tree_simple_assignment_expression::accept (tree_walker& tw)
 {
   tw.visit_simple_assignment_expression (*this);
 }
 
 // Colon expressions.
 
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -31,16 +31,20 @@ class ostream;
 
 class tree_identifier;
 class tree_index_expression;
 class tree_indirect_ref;
 class tree_argument_list;
 
 class tree_walker;
 
+class octave_value;
+class octave_value_list;
+class octave_variable_reference;
+
 #include "pt-exp-base.h"
 
 // Prefix expressions.
 
 class
 tree_prefix_expression : public tree_expression
 {
 public:
@@ -174,44 +178,25 @@ private:
 
 // Binary expressions.
 
 class
 tree_binary_expression : public tree_expression
 {
 public:
 
-  enum type
-    {
-      unknown,
-      add,
-      subtract,
-      multiply,
-      el_mul,
-      divide,
-      el_div,
-      leftdiv,
-      el_leftdiv,
-      power,
-      elem_pow,
-      cmp_lt,
-      cmp_le,
-      cmp_eq,
-      cmp_ge,
-      cmp_gt,
-      cmp_ne,
-      el_and,
-      el_or
-    };
-
-  tree_binary_expression (int l = -1, int c = -1, type t = unknown)
+  tree_binary_expression (int l = -1, int c = -1,
+			  octave_value::binary_op t
+			    = octave_value::unknown_binary_op)
     : tree_expression (l, c), op_lhs (0), op_rhs (0), etype (t) { }
 
   tree_binary_expression (tree_expression *a, tree_expression *b,
-			  int l = -1, int c = -1, type t = unknown)
+			  int l = -1, int c = -1,
+			  octave_value::binary_op t
+			    = octave_value::unknown_binary_op)
     : tree_expression (l, c), op_lhs (a), op_rhs (b), etype (t) { }
 
   ~tree_binary_expression (void)
     {
       delete op_lhs;
       delete op_rhs;
     }
 
@@ -230,34 +215,34 @@ protected:
 
   // The operands for the expression.
   tree_expression *op_lhs;
   tree_expression *op_rhs;
 
 private:
 
   // The type of the expression.
-  type etype;
+  octave_value::binary_op etype;
 };
 
 // Boolean expressions.
 
 class
 tree_boolean_expression : public tree_binary_expression
 {
 public:
 
   enum type
     {
       unknown,
       bool_and,
       bool_or
     };
 
-  tree_boolean_expression (int l = -1, int c = -1, type t)
+  tree_boolean_expression (int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (l, c), etype (t) { }
 
   tree_boolean_expression (tree_expression *a, tree_expression *b,
 			   int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
   ~tree_boolean_expression (void) { }
 
@@ -273,45 +258,38 @@ private:
 
 // Simple assignment expressions.
 
 class
 tree_simple_assignment_expression : public tree_expression
 {
 public:
 
-  tree_simple_assignment_expression (bool plhs = false,
-				     bool ans_assign = false,
-				     int l = -1, int c = -1)
-    : tree_expression (l, c)
-      { init (plhs, ans_assign); }
+  tree_simple_assignment_expression
+    (bool plhs = false, bool ans_assign = false, int l = -1, int c = -1,
+     octave_value::assign_op t = octave_value::asn_eq)
+    : tree_expression (l, c), lhs_idx_expr (0), lhs (0), index (0),
+      rhs (0), preserve (plhs), ans_ass (ans_assign), etype (t) { }
 
-  tree_simple_assignment_expression (tree_identifier *i,
-				     tree_expression *r,
-				     bool plhs = false,
-				     bool ans_assign = false,
-				     int l = -1, int c = -1);
+  tree_simple_assignment_expression
+    (tree_identifier *i, tree_expression *r, bool plhs = false,
+     bool ans_assign = false, int l = -1, int c = -1,
+     octave_value::assign_op t = octave_value::asn_eq);
 
-  tree_simple_assignment_expression (tree_indirect_ref *i,
-				     tree_expression *r,
-				     bool plhs = false,
-				     bool ans_assign = false,
-				     int l = -1, int c = -1)
-    : tree_expression (l, c)
-      {
-	init (plhs, ans_assign);
-	lhs = i;
-	rhs = r;
-      }
+  tree_simple_assignment_expression
+    (tree_indirect_ref *i, tree_expression *r, bool plhs = false,
+     bool ans_assign = false, int l = -1, int c = -1,
+     octave_value::assign_op t = octave_value::asn_eq)
+    : tree_expression (l, c), lhs_idx_expr (0), lhs (i), index (0),
+      rhs (r), preserve (plhs), ans_ass (ans_assign), etype (t) { }
 
-  tree_simple_assignment_expression (tree_index_expression *idx_expr,
-				     tree_expression *r,
-				     bool plhs = false,
-				     bool ans_assign = false,
-				     int l = -1, int c = -1);
+  tree_simple_assignment_expression
+    (tree_index_expression *idx_expr, tree_expression *r,
+     bool plhs = false, bool ans_assign = false, int l = -1, int c = -1,
+     octave_value::assign_op t = octave_value::asn_eq);
 
   ~tree_simple_assignment_expression (void);
 
   bool left_hand_side_is_identifier_only (void);
 
   tree_identifier *left_hand_side_id (void);
 
   bool is_ans_assign (void)
@@ -319,26 +297,35 @@ public:
 
   octave_value eval (bool print = false);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   void eval_error (void);
 
+  const char *oper (void) const;
+
   tree_indirect_ref *left_hand_side (void) { return lhs; }
 
   tree_argument_list *lhs_index (void) { return index; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   void accept (tree_walker& tw);
 
 private:
 
+  void do_assign (octave_variable_reference& ult,
+		  const octave_value_list& args,
+		  const octave_value& rhs_val);
+
+  void do_assign (octave_variable_reference& ult,
+		  const octave_value& rhs_val);
+
   // The left hand side of the assignment, as an index expression.  If
   // the assignment is constructed from an index expression, the index
   // expression is split into the its components in the constructor.
   tree_index_expression *lhs_idx_expr;
 
   // The indirect reference (id or structure reference) on the left
   // hand side of the assignemnt.
   tree_indirect_ref *lhs;
@@ -350,26 +337,18 @@ private:
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
   bool preserve;
 
   // True if this is an assignment to the built-in variable ans.
   bool ans_ass;
 
-  void init (bool plhs, bool ans_assign)
-    {
-      etype = tree_expression::assignment;
-      lhs_idx_expr = 0;
-      lhs = 0;
-      index = 0;
-      rhs = 0;
-      preserve = plhs;
-      ans_ass = ans_assign;
-    }
+  // The type of the expression.
+  octave_value::assign_op etype;
 };
 
 // Colon expressions.
 
 class
 tree_colon_expression : public tree_expression
 {
 public:
diff --git a/src/pt-fcn.h b/src/pt-fcn.h
--- a/src/pt-fcn.h
+++ b/src/pt-fcn.h
@@ -28,24 +28,24 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <ctime>
 
 class ostream;
 
 #include <string>
 
+class symbol_table;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 
 class tree_walker;
 
 #include "oct-obj.h"
-#include "symtab.h"
 #include "pt-fvc.h"
 
 // User defined functions.
 
 class
 tree_function : public tree_fvc
 {
 public:
@@ -103,17 +103,18 @@ public:
 
   void stash_function_name (const string& s);
 
   string function_name (void)
     { return fcn_name; }
 
   octave_value eval (bool print = false);
 
-  octave_value_list eval (bool print, int nargout, const octave_value_list& args);
+  octave_value_list eval (bool print, int nargout,
+			  const octave_value_list& args);
 
   void traceback_error (void);
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
diff --git a/src/pt-fvc-base.cc b/src/pt-fvc-base.cc
--- a/src/pt-fvc-base.cc
+++ b/src/pt-fvc-base.cc
@@ -42,28 +42,16 @@ Software Foundation, 59 Temple Place - S
 string
 tree_fvc::name (void) const
 {
   string retval;
   panic_impossible ();
   return retval;
 }
 
-void
-tree_fvc::increment (void)
-{
-  panic_impossible ();
-}
-
-void
-tree_fvc::decrement (void)
-{
-  panic_impossible ();
-}
-
 time_t
 tree_fvc::time_parsed (void)
 {
   panic_impossible ();
   return 0;
 }
 
 int
diff --git a/src/pt-fvc-base.h b/src/pt-fvc-base.h
--- a/src/pt-fvc-base.h
+++ b/src/pt-fvc-base.h
@@ -49,20 +49,16 @@ public:
 
   tree_fvc (int l = -1, int c = -1)
     : tree_multi_val_ret (l, c) { }
 
   ~tree_fvc (void) { }
 
   virtual string name (void) const;
 
-  virtual void increment (void);
-
-  virtual void decrement (void);
-
   virtual string fcn_file_name (void)
     { return string (); }
 
   virtual time_t time_parsed (void);
 
   virtual bool is_system_fcn_file (void) const
     { return false; }
 
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -119,17 +119,17 @@ tree_identifier::define (tree_function *
 void
 tree_identifier::document (const string& s)
 {
   if (sym)
     sym->document (s);
 }
 
 octave_value
-tree_identifier::assign (const octave_value& rhs)
+tree_identifier::assign (octave_value::assign_op op, const octave_value& rhs)
 {
   octave_value retval;
 
   if (rhs.is_defined ())
     {
       if (! sym->is_defined ())
 	{
 	  if (! (sym->is_formal_parameter ()
@@ -138,29 +138,32 @@ tree_identifier::assign (const octave_va
 	      link_to_builtin_variable (sym);
 	    }
 	}
       else if (sym->is_function ())
 	{
 	  sym->clear ();
 	}
 
+      // XXX FIXME XXX -- make this work for ops other than `='.
+
       tree_constant *tmp = new tree_constant (rhs);
 
       if (sym->define (tmp))
 	retval = rhs;
       else
 	delete tmp;
     }
 
   return retval;
 }
 
 octave_value
-tree_identifier::assign (const octave_value_list& args,
+tree_identifier::assign (octave_value::assign_op op,
+			 const octave_value_list& args,
 			 const octave_value& rhs)
 {
   octave_value retval;
 
   if (rhs.is_defined ())
     {
       if (! sym->is_defined ())
 	{
@@ -173,31 +176,31 @@ tree_identifier::assign (const octave_va
       else if (sym->is_function ())
 	{
 	  sym->clear ();
 	}
 
       if (sym->is_variable () && sym->is_defined ())
 	{
 	  tree_constant *tmp = static_cast<tree_constant *> (sym->def ());
-	  retval = tmp->assign (args, rhs);
+	  retval = tmp->assign (op, args, rhs);
 	}
       else
 	{
 	  assert (! sym->is_defined ());
 
 	  if (! Vresize_on_range_error)
 	    {
 	      ::error ("indexed assignment to previously undefined variables");
 	      ::error ("is only possible when resize_on_range_error is true");
 	    }
 	  else
 	    {
 	      tree_constant *tmp = new tree_constant ();
-	      retval = tmp->assign (args, rhs);
+	      retval = tmp->assign (op, args, rhs);
 	      if (retval.is_defined ())
 		sym->define (tmp);
 	    }
 	}
     }
 
   return retval;
 }
@@ -209,45 +212,35 @@ tree_identifier::is_defined (void)
 }
 
 void
 tree_identifier::increment (void)
 {
   if (sym)
     {
       if (sym->is_read_only ())
-	{
-	  ::error ("can't redefined read-only variable `%s'",
-		   name ().c_str ());
-	}
+	::error ("can't redefined read-only variable `%s'", name ().c_str ());
+      else if (sym->is_defined () && sym->is_variable ())
+	reference () . increment ();
       else
-	{
-	  tree_fvc *tmp = sym->def ();
-	  if (tmp)
-	    tmp->increment ();
-	}
+	::error ("can only increment variables");
     }
 }
 
 void
 tree_identifier::decrement (void)
 {
   if (sym)
     {
       if (sym->is_read_only ())
-	{
-	  ::error ("can't redefined read-only variable `%s'",
-		   name ().c_str ());
-	}
+	::error ("can't redefined read-only variable `%s'", name ().c_str ());
+      else if (sym->is_defined () && sym->is_variable ())
+	reference () . decrement ();
       else
-	{
-	  tree_fvc *tmp = sym->def ();
-	  if (tmp)
-	    tmp->decrement ();
-	}
+	::error ("can only decrement variables");
     }
 }
 
 void
 tree_identifier::eval_undefined_error (void)
 {
   int l = line ();
   int c = column ();
diff --git a/src/pt-fvc.h b/src/pt-fvc.h
--- a/src/pt-fvc.h
+++ b/src/pt-fvc.h
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #define octave_tree_fvc2_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
+#include <string>
+
 #include <SLList.h>
 
 class symbol_record;
 class tree_constant;
 class tree_function;
 
 class tree_walker;
 
@@ -63,18 +65,22 @@ public:
 
   string name (void) const;
 
   tree_identifier *define (tree_constant *t);
   tree_identifier *define (tree_function *t);
 
   void document (const string& s);
 
-  octave_value assign (const octave_value& t);
-  octave_value assign (const octave_value_list& args, const octave_value& t);
+  octave_value assign (octave_value::assign_op op,
+		       const octave_value& t);
+
+  octave_value assign (octave_value::assign_op op,
+		       const octave_value_list& args,
+		       const octave_value& t);
 
   bool is_defined (void);
 
   void increment (void);
 
   void decrement (void);
 
   tree_fvc *do_lookup (bool& script_file_executed, bool exec_script = true);
