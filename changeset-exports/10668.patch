# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1274987608 25200
#      Thu May 27 12:13:28 2010 -0700
# Node ID 72585f1ca7a29d3a717ab3e183df7abf99d65b06
# Parent  6769fbfec7390fbaf9d5fc388352f279f68eeedd
Replace @ifinfo with @ifnottex.
Non-Tex documentation can now flow through to HTML format.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2010-05-27  Rik <octave@nomad.inbox5.com>
+
+        * interpreter/arith.txi, interpreter/diffeq.txi, interpreter/intro.txi,
+        interpreter/nonlin.txi, interpreter/poly.txi, interpreter/sparse.txi:
+        Replace @ifinfo with @ifnottex. 
+
 2010-05-07  John W. Eaton  <jwe@octave.org>
 
 	* basics.txi: Update list of internal variables for --traditional.
 
 2010-05-02  Rik <octave@nomad.inbox5.com>
 
         * interpreter/contrib.txi, interpreter/install.txi, 
         interpreter/plot.txi, interpreter/sparse.txi,
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -76,20 +76,20 @@ sin ([1, 2; 3, 4])
 @node Complex Arithmetic
 @section Complex Arithmetic
 
 In the descriptions of the following functions,
 @tex
 $z$ is the complex number $x + iy$, where $i$ is defined as
 $\sqrt{-1}$.
 @end tex
-@ifinfo
+@ifnottex
 @var{z} is the complex number @var{x} + @var{i}@var{y}, where @var{i} is
 defined as @code{sqrt (-1)}.
-@end ifinfo
+@end ifnottex
 
 @DOCSTRING(abs)
 
 @DOCSTRING(arg)
 
 @DOCSTRING(conj)
 
 @DOCSTRING(cplxpair)
diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -36,29 +36,29 @@ All solvers are based on reliable ODE ro
 @section Ordinary Differential Equations
 
 The function @code{lsode} can be used to solve ODEs of the form
 @tex
 $$
  {dx\over dt} = f (x, t)
 $$
 @end tex
-@ifinfo
+@ifnottex
 
 @example
 @group
 dx
 -- = f (x, t)
 dt
 @end group
 @end example
-@end ifinfo
+@end ifnottex
 
 @noindent
-using Hindmarsh's ODE solver @sc{Lsode}.
+using Hindmarsh's ODE solver @sc{lsode}.
 
 
 
 @DOCSTRING(lsode)
 
 @DOCSTRING(lsode_options)
 
 Here is an example of solving a set of three differential equations using
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -530,20 +530,20 @@ error: fieldnames: wrong type argument `
 
 @node Format of Descriptions
 @subsection Format of Descriptions
 @cindex description format
 
 Functions, commands, and variables are described in this manual in a 
 uniform format.  The first line of a description contains the name of
 the item followed by its arguments, if any.
-@ifinfo
+@ifnottex
 The category---function, variable, or whatever---appears at the
 beginning of the line.
-@end ifinfo
+@end ifnottex
 @iftex
 The category---function, variable, or whatever---is printed next to the
 right margin.
 @end iftex
 The description follows on succeeding lines, sometimes with examples.
 
 @menu
 * A Sample Function Description::  
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -44,25 +44,25 @@ convergence is not guaranteed even if a 
 
 Here is a complete example.  To solve the set of equations
 @tex
 $$
  \eqalign{-2x^2 + 3xy + 4\sin(y) - 6 &= 0\cr
            3x^2 - 2xy^2 + 3\cos(x) + 4 &= 0}
 $$
 @end tex
-@ifinfo
+@ifnottex
 
 @example
 @group
 -2x^2 + 3xy   + 4 sin(y) = 6
  3x^2 - 2xy^2 + 3 cos(x) = -4
 @end group
 @end example
-@end ifinfo
+@end ifnottex
 
 @noindent
 you first need to write a function to compute the value of the given
 function.  For example:
 
 @example
 @group
 function y = f (x)
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -23,23 +23,23 @@ In Octave, a polynomial is represented b
 in descending order).  For example, a vector @var{c} of length
 @math{N+1} corresponds to the following polynomial of order
 @tex
  $N$
 $$
  p (x) = c_1 x^N + \ldots + c_N x + c_{N+1}.
 $$
 @end tex
-@ifinfo
+@ifnottex
  @var{N}
 
 @example
 p(x) = @var{c}(1) x^@var{N} + @dots{} + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
-@end ifinfo
+@end ifnottex
 
 @menu
 * Evaluating Polynomials::
 * Finding Roots::
 * Products of Polynomials::
 * Derivatives and Integrals::
 * Polynomial Interpolation::
 * Miscellaneous Functions::
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -882,77 +882,60 @@ A common application for sparse matrices
 Element Models.  Finite element models allow numerical solution of
 partial differential equations that do not have closed form solutions,
 typically because of the complex shape of the domain.
 
 In order to motivate this application, we consider the boundary value
 Laplace equation.  This system can model scalar potential fields, such
 as heat or electrical potential.  Given a medium 
 @tex
-$\Omega$ 
-@end tex
-@ifinfo
-Omega
-@end ifinfo
-with boundary
-@tex
-$\partial\Omega$ 
+$\Omega$ with boundary $\partial\Omega$.  At all points on the $\partial\Omega$
+the boundary conditions are known, and we wish to calculate the potential in
+$\Omega$.
 @end tex
-@ifinfo
-dOmega
-@end ifinfo
-. At all points on the 
-@tex
-$\partial\Omega$ 
-@end tex
-@ifinfo
-dOmega
-@end ifinfo
+@ifnottex
+Omega with boundary dOmega.  At all points on the dOmega
 the boundary conditions are known, and we wish to calculate the potential in
-@tex
-$\Omega$ 
-@end tex
-@ifinfo
-Omega
-@end ifinfo
-. Boundary conditions may specify the potential (Dirichlet
+Omega.
+@end ifnottex
+Boundary conditions may specify the potential (Dirichlet
 boundary condition), its normal derivative across the boundary
 (Neumann boundary condition), or a weighted sum of the potential and
 its derivative (Cauchy boundary condition).
 
 In a thermal model, we want to calculate the temperature in
 @tex
 $\Omega$ 
 @end tex
-@ifinfo
+@ifnottex
 Omega
-@end ifinfo
+@end ifnottex
 and know the boundary temperature (Dirichlet condition)
 or heat flux (from which we can calculate the Neumann condition
 by dividing by the thermal conductivity at the boundary).  Similarly, 
 in an electrical model, we want to calculate the voltage in
 @tex
 $\Omega$ 
 @end tex
-@ifinfo
+@ifnottex
 Omega
-@end ifinfo
+@end ifnottex
 and know the boundary voltage (Dirichlet) or current
 (Neumann condition after diving by the electrical conductivity).
 In an electrical model, it is common for much of the boundary
 to be electrically isolated; this is a Neumann boundary condition
 with the current equal to zero.
 
 The simplest finite element models will divide 
 @tex
 $\Omega$ 
 @end tex
-@ifinfo
+@ifnottex
 Omega
-@end ifinfo
+@end ifnottex
 into simplexes (triangles in 2D, pyramids in 3D).
 @ifset htmltex
 We take as an 3D example a cylindrical liquid filled tank with a small 
 non-conductive ball from the EIDORS project@footnote{EIDORS - Electrical 
 Impedance Tomography and Diffuse optical Tomography Reconstruction Software 
 @url{http://eidors3d.sourceforge.net}}.  This is model is designed to reflect
 an application of electrical impedance tomography, where current patterns
 are applied to such a tank in order to image the internal conductivity
@@ -1003,19 +986,19 @@ This creates a N-by-2 matrix @code{nodes
 @end group
 @end example
 
 Using a first order FEM, we approximate the electrical conductivity 
 distribution in 
 @tex
 $\Omega$ 
 @end tex
-@ifinfo
+@ifnottex
 Omega
-@end ifinfo
+@end ifnottex
 as constant on each simplex (represented by the vector @code{conductivity}).
 Based on the finite element geometry, we first calculate a system (or
 stiffness) matrix for each simplex (represented as 3-by-3 elements on the
 diagonal of the element-wise system matrix @code{SE}.  Based on @code{SE} 
 and a N-by-DE connectivity matrix @code{C}, representing the connections 
 between simplices and vertices, the global connectivity matrix @code{S} is
 calculated.
 
@@ -1047,26 +1030,26 @@ calculated.
   # Global system matrix
   S= C'* SE *C;
 @end example
 
 The system matrix acts like the conductivity 
 @tex
 $S$ 
 @end tex
-@ifinfo
+@ifnottex
 @code{S}
-@end ifinfo
+@end ifnottex
 in Ohm's law 
 @tex
 $SV = I$. 
 @end tex
-@ifinfo
+@ifnottex
 @code{S * V = I}.
-@end ifinfo
+@end ifnottex
 Based on the Dirichlet and Neumann boundary conditions, we are able to 
 solve for the voltages at each vertex @code{V}. 
 
 @example
   # Dirichlet boundary conditions
   D_nodes=[1:5, 51:55]; 
   D_value=[10*ones(1,5), 20*ones(1,5)]; 
 
