# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327702868 -3600
#      Fri Jan 27 23:21:08 2012 +0100
# Node ID f570d3baa6fb67808bbddc2083f01b0c5fd14383
# Parent  f3ec6627e00de89dce26c7225baf6ba81c6befc6
Removed unused code.

diff --git a/libqterminal/QTerminal.cpp b/libqterminal/QTerminal.cpp
--- a/libqterminal/QTerminal.cpp
+++ b/libqterminal/QTerminal.cpp
@@ -1,9 +1,10 @@
 /*  Copyright (C) 2008 e_k (e_k@users.sourceforge.net)
+    Copyright (C) 2012 Jacob Dawid <jacob.dawid@googlemail.com>
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Library General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later version.
 		
     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -38,34 +39,27 @@ void QTerminal::init()
     int fds = kpty->slaveFd();
 
     dup2 (fds, 0);
     dup2 (fds, 1);
     dup2 (fds, 2);
 
     m_sessionModel = new SessionModel(kpty);
 
-    m_sessionModel->setTitle(SessionModel::NameRole, "QTermWidget");
-    m_sessionModel->setProgram("/bin/bash");
-    QStringList args("");
-    m_sessionModel->setArguments(args);
     m_sessionModel->setAutoClose(true);
     m_sessionModel->setCodec(QTextCodec::codecForName("UTF-8"));
-    m_sessionModel->setFlowControlEnabled(true);
     m_sessionModel->setHistoryType(HistoryTypeBuffer(1000));
     m_sessionModel->setDarkBackground(true);
     m_sessionModel->setKeyBindings("");
 
-
     m_sessionView = new SessionView(this);
     m_sessionView->setBellMode(SessionView::NotifyBell);
     m_sessionView->setTerminalSizeHint(true);
     m_sessionView->setTripleClickMode(SessionView::SelectWholeLine);
     m_sessionView->setTerminalSizeStartup(true);
-    m_sessionView->setRandomSeed(m_sessionModel->sessionId() * 31);
     m_sessionView->setSize(80, 40);
     
     QFont font = QApplication::font(); 
     font.setFamily("Monospace");
     font.setPointSize(10);
     font.setStyleHint(QFont::TypeWriter);
     setTerminalFont(font);  
 
@@ -76,45 +70,23 @@ void QTerminal::init()
     connect(m_sessionModel, SIGNAL(finished()), this, SLOT(sessionFinished()));
 }
 
 QTerminal::~QTerminal()
 {
     emit destroyed();
 }
 
-
 void QTerminal::setTerminalFont(QFont &font)
 {
     if(!m_sessionView)
 	return;
     m_sessionView->setVTFont(font);
 }
 
-void QTerminal::setShellProgram(const QString &progname)
-{
-    if(!m_sessionModel)
-	return;
-    m_sessionModel->setProgram(progname);
-}
-
-void QTerminal::setWorkingDirectory(const QString& dir)
-{
-    if(!m_sessionModel)
-        return;
-    m_sessionModel->setInitialWorkingDirectory(dir);
-}
-
-void QTerminal::setArgs(QStringList &args)
-{
-    if (!m_sessionModel)
-	return;
-    m_sessionModel->setArguments(args);
-}
-
 void QTerminal::setTextCodec(QTextCodec *codec)
 {
     if(!m_sessionModel)
 	return;
     m_sessionModel->setCodec(codec);
 }
 
 void QTerminal::setSize(int h, int v)
@@ -132,20 +104,29 @@ void QTerminal::setHistorySize(int lines
         m_sessionModel->setHistoryType(HistoryTypeBuffer(lines));
 }
 
 void QTerminal::setReadOnly(bool readonly)
 {
     m_sessionView->setReadOnly(readonly);
 }
 
+void QTerminal::focusInEvent(QFocusEvent *focusEvent)
+{
+    Q_UNUSED(focusEvent);
+    m_sessionView->updateImage();
+    m_sessionView->repaint();
+    m_sessionView->update();
+}
+
 void QTerminal::resizeEvent(QResizeEvent*)
 {
     m_sessionView->resize(this->size());
     m_sessionView->updateImage();
+    m_sessionView->repaint();
     m_sessionView->update();
 }
 
 void QTerminal::sessionFinished()
 {
     emit finished();
 }
 
@@ -154,35 +135,8 @@ void QTerminal::copyClipboard()
     m_sessionView->copyClipboard();
 }
 
 void QTerminal::pasteClipboard()
 {
     m_sessionView->pasteClipboard();
 }
 
-void QTerminal::setFlowControlEnabled(bool enabled)
-{
-    m_sessionModel->setFlowControlEnabled(enabled);
-}
-
-bool QTerminal::flowControlEnabled(void)
-{
-    return m_sessionModel->flowControlEnabled();
-}
-
-void QTerminal::setFlowControlWarningEnabled(bool enabled)
-{
-    if(flowControlEnabled()) {
-        m_sessionView->setFlowControlWarningEnabled(enabled);
-    }
-}
-
-void QTerminal::setEnvironment(const QStringList& environment)
-{
-    m_sessionModel->setEnvironment(environment);
-}
-
-void* QTerminal::getTerminalDisplay()
-{
-    return static_cast<void*>(m_sessionView);
-}
-
diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -25,58 +25,34 @@
 #include "SessionView.h"
 
 class QTerminal : public QWidget
 {
     Q_OBJECT
 public:
     QTerminal(QWidget *parent = 0);
     ~QTerminal();
-
-    void startShellProgram();
     
     void setTerminalFont(QFont &font); 
-
-    void setEnvironment(const QStringList& environment);
-
-    void setShellProgram(const QString &progname);
-
-    void setWorkingDirectory(const QString& dir);
-
     void setArgs(QStringList &args);
-
     void setTextCodec(QTextCodec *codec);
-
     void setSize(int h, int v);
-
     void setHistorySize(int lines);
-
-    void setFlowControlEnabled(bool enabled);
-
-    bool flowControlEnabled(void);
-
-    /**
-     * Sets whether the flow control warning box should be shown
-     * when the flow control stop key (Ctrl+S) is pressed.
-     */
-    void setFlowControlWarningEnabled(bool enabled);
-
-
     void setReadOnly(bool);
             
 signals:
     void finished();
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
         
-protected: 
+protected:
+    void focusInEvent(QFocusEvent *focusEvent);
     virtual void resizeEvent(QResizeEvent *);
-    void *getTerminalDisplay();
     
 protected slots:
     void sessionFinished();        
     
 private:
     void init();
     SessionView *m_sessionView;
     SessionModel *m_sessionModel;
diff --git a/libqterminal/SessionModel.cpp b/libqterminal/SessionModel.cpp
--- a/libqterminal/SessionModel.cpp
+++ b/libqterminal/SessionModel.cpp
@@ -34,61 +34,45 @@
 #include <QtCore/QByteRef>
 #include <QtCore/QDir>
 #include <QtCore/QFile>
 #include <QtCore/QRegExp>
 #include <QtCore/QStringList>
 #include <QtCore>
 
 #include "SessionView.h"
-#include "ShellCommand.h"
 #include "Vt102Emulation.h"
 
-int SessionModel::lastSessionId = 0;
-
 SessionModel::SessionModel(KPty *kpty) :
     _shellProcess(0)
   , _emulation(0)
   , _monitorActivity(false)
   , _monitorSilence(false)
   , _notifiedActivity(false)
   , _autoClose(true)
   , _wantedClose(false)
   , _silenceSeconds(10)
   , _addToUtmp(false)
-  , _flowControl(true)
   , _fullScripting(false)
-  , _sessionId(0)
   , _hasDarkBackground(false)
 {
     _kpty = kpty;
 
     //create emulation backend
     _emulation = new Vt102Emulation();
-
-    connect( _emulation, SIGNAL( titleChanged( int, const QString & ) ),
-             this, SLOT( setUserTitle( int, const QString & ) ) );
     connect( _emulation, SIGNAL( stateSet(int) ),
              this, SLOT( activityStateSet(int) ) );
-    //    connect( _emulation, SIGNAL( zmodemDetected() ), this ,
-    //            SLOT( fireZModemDetected() ) );
     connect( _emulation, SIGNAL( changeTabTextColorRequest( int ) ),
              this, SIGNAL( changeTabTextColorRequest( int ) ) );
     connect( _emulation, SIGNAL(profileChangeCommandReceived(const QString&)),
              this, SIGNAL( profileChangeCommandReceived(const QString&)) );
     // TODO
     // connect( _emulation,SIGNAL(imageSizeChanged(int,int)) , this ,
     //        SLOT(onEmulationSizeChange(int,int)) );
 
-    //connect teletype to emulation backend
-    //_shellProcess->setUtf8Mode(_emulation->utf8());
-
-    //connect( _shellProcess,SIGNAL(receivedData(const char*,int)),this,
-    //         SLOT(onReceiveBlock(const char*,int)) );
-
     _selfListener = new SelfListener(kpty->masterFd());
     _selfListener->start();
     connect( _selfListener, SIGNAL(recvData(const char*,int)),
              this, SLOT(onReceiveBlock(const char*,int)), Qt::BlockingQueuedConnection);
 
     connect( _emulation, SIGNAL(sendData(const char*,int))
              ,this,SLOT(sendData(const char*,int)));
 
@@ -107,39 +91,22 @@ SessionModel::SessionModel(KPty *kpty) :
 void SessionModel::setDarkBackground(bool darkBackground)
 {
     _hasDarkBackground = darkBackground;
 }
 bool SessionModel::hasDarkBackground() const
 {
     return _hasDarkBackground;
 }
-bool SessionModel::isRunning() const
-{
-    return true; //_shellProcess->isRunning();
-}
 
 void SessionModel::setCodec(QTextCodec* codec)
 {
     emulation()->setCodec(codec);
 }
 
-void SessionModel::setProgram(const QString& program)
-{
-    _program = ShellCommand::expand(program);
-}
-void SessionModel::setInitialWorkingDirectory(const QString& dir)
-{
-    _initialWorkingDir = ShellCommand::expand(dir);
-}
-void SessionModel::setArguments(const QStringList& arguments)
-{
-    _arguments = ShellCommand::expand(arguments);
-}
-
 QList<SessionView*> SessionModel::views() const
 {
     return _views;
 }
 
 void SessionModel::addView(SessionView* widget)
 {
     Q_ASSERT( !_views.contains(widget) );
@@ -218,114 +185,16 @@ void SessionModel::removeView(SessionVie
     }
 }
 
 void SessionModel::run()
 {
     emit started();
 }
 
-void SessionModel::setUserTitle( int what, const QString &caption )
-{
-    //set to true if anything is actually changed (eg. old _nameTitle != new _nameTitle )
-    bool modified = false;
-
-    // (btw: what=0 changes _userTitle and icon, what=1 only icon, what=2 only _nameTitle
-    if ((what == 0) || (what == 2)) 
-    {
-       	if ( _userTitle != caption ) {
-            _userTitle = caption;
-            modified = true;
-        }
-    }
-
-    if ((what == 0) || (what == 1))
-    {
-        if ( _iconText != caption ) {
-            _iconText = caption;
-            modified = true;
-        }
-    }
-
-    if (what == 11) 
-    {
-        QString colorString = caption.section(';',0,0);
-        qDebug() << __FILE__ << __LINE__ << ": setting background colour to " << colorString;
-        QColor backColor = QColor(colorString);
-        if (backColor.isValid()){// change color via \033]11;Color\007
-            if (backColor != _modifiedBackground)
-            {
-                _modifiedBackground = backColor;
-
-                // bail out here until the code to connect the terminal display
-                // to the changeBackgroundColor() signal has been written
-                // and tested - just so we don't forget to do this.
-                Q_ASSERT( 0 );
-
-                emit changeBackgroundColorRequest(backColor);
-            }
-        }
-    }
-
-    if (what == 30)
-    {
-        if ( _nameTitle != caption ) {
-            setTitle(SessionModel::NameRole,caption);
-            return;
-        }
-    }
-
-    if (what == 31) 
-    {
-        QString cwd=caption;
-        cwd=cwd.replace( QRegExp("^~"), QDir::homePath() );
-        emit openUrlRequest(cwd);
-    }
-
-    // change icon via \033]32;Icon\007
-    if (what == 32) 
-    { 
-    	if ( _iconName != caption ) {
-            _iconName = caption;
-
-            modified = true;
-        }
-    }
-
-    if (what == 50) 
-    {
-        emit profileChangeCommandReceived(caption);
-        return;
-    }
-
-    if ( modified )
-    	emit titleChanged();
-}
-
-QString SessionModel::userTitle() const
-{
-    return _userTitle;
-}
-void SessionModel::setTabTitleFormat(TabTitleContext context , const QString& format)
-{
-    if ( context == LocalTabTitle )
-        _localTabTitleFormat = format;
-    else if ( context == RemoteTabTitle )
-        _remoteTabTitleFormat = format;
-}
-QString SessionModel::tabTitleFormat(TabTitleContext context) const
-{
-    if ( context == LocalTabTitle )
-        return _localTabTitleFormat;
-    else if ( context == RemoteTabTitle )
-        return _remoteTabTitleFormat;
-
-    return QString();
-}
-
 void SessionModel::monitorTimerDone()
 {
     //FIXME: The idea here is that the notification popup will appear to tell the user than output from
     //the terminal has stopped and the popup will disappear when the user activates the session.
     //
     //This breaks with the addition of multiple views of a session.  The popup should disappear
     //when any of the views of the session becomes active
 
@@ -344,19 +213,17 @@ void SessionModel::monitorTimerDone()
 
     _notifiedActivity=false;
 }
 
 void SessionModel::activityStateSet(int state)
 {
     if (state==NOTIFYBELL)
     {
-        QString s; s.sprintf("Bell in session '%s'",_nameTitle.toAscii().data());
-
-        emit bellRequest( s );
+        emit bellRequest("");
     }
     else if (state==NOTIFYACTIVITY)
     {
         if (_monitorSilence) {
             _monitorTimer->start(_silenceSeconds*1000);
         }
 
         if ( _monitorActivity ) {
@@ -458,108 +325,36 @@ Emulation* SessionModel::emulation() con
     return _emulation;
 }
 
 QString SessionModel::keyBindings() const
 {
     return _emulation->keyBindings();
 }
 
-QStringList SessionModel::environment() const
-{
-    return _environment;
-}
-
-void SessionModel::setEnvironment(const QStringList& environment)
-{
-    _environment = environment;
-}
-
-int SessionModel::sessionId() const
-{
-    return _sessionId;
-}
-
 void SessionModel::setKeyBindings(const QString &id)
 {
     _emulation->setKeyBindings(id);
 }
 
-void SessionModel::setTitle(TitleRole role , const QString& newTitle)
-{
-    if ( title(role) != newTitle )
-    {
-        if ( role == NameRole )
-            _nameTitle = newTitle;
-        else if ( role == DisplayedTitleRole )
-            _displayTitle = newTitle;
-
-        emit titleChanged();
-    }
-}
-
-QString SessionModel::title(TitleRole role) const
-{
-    if ( role == NameRole )
-        return _nameTitle;
-    else if ( role == DisplayedTitleRole )
-        return _displayTitle;
-    else
-        return QString();
-}
-
-void SessionModel::setIconName(const QString& iconName)
-{
-    if ( iconName != _iconName )
-    {
-        _iconName = iconName;
-        emit titleChanged();
-    }
-}
-
-void SessionModel::setIconText(const QString& iconText)
-{
-    _iconText = iconText;
-}
-
-QString SessionModel::iconName() const
-{
-    return _iconName;
-}
-
-QString SessionModel::iconText() const
-{
-    return _iconText;
-}
-
 void SessionModel::setHistoryType(const HistoryType &hType)
 {
     _emulation->setHistory(hType);
 }
 
 const HistoryType& SessionModel::historyType() const
 {
     return _emulation->history();
 }
 
 void SessionModel::clearHistory()
 {
     _emulation->clearHistory();
 }
 
-QStringList SessionModel::arguments() const
-{
-    return _arguments;
-}
-
-QString SessionModel::program() const
-{
-    return _program;
-}
-
 // unused currently
 bool SessionModel::isMonitorActivity() const { return _monitorActivity; }
 // unused currently
 bool SessionModel::isMonitorSilence()  const { return _monitorSilence; }
 
 void SessionModel::setMonitorActivity(bool _monitor)
 {
     _monitorActivity=_monitor;
@@ -592,33 +387,16 @@ void SessionModel::setMonitorSilenceSeco
     }
 }
 
 void SessionModel::setAddToUtmp(bool set)
 {
     _addToUtmp = set;
 }
 
-void SessionModel::setFlowControlEnabled(bool enabled)
-{
-    if (_flowControl == enabled)
-  	return;
-
-    _flowControl = enabled;
-
-    //if (_shellProcess)
-    //	_shellProcess->setXonXoff(_flowControl);
-
-    emit flowControlEnabledChanged(enabled);
-}
-bool SessionModel::flowControlEnabled() const
-{
-    return _flowControl;
-}
-
 void SessionModel::onReceiveBlock( const char* buf, int len )
 {
     _emulation->receiveData( buf, len );
     emit receivedData( QString::fromLatin1( buf, len ) );
 }
 
 QSize SessionModel::size()
 {
diff --git a/libqterminal/SessionModel.h b/libqterminal/SessionModel.h
--- a/libqterminal/SessionModel.h
+++ b/libqterminal/SessionModel.h
@@ -52,17 +52,16 @@ class SessionView;
  * The attached views can then display output from the program running in the terminal
  * or send input to the program in the terminal in the form of keypresses and mouse
  * activity.
  */
 class SessionModel : public QObject {
 Q_OBJECT
 
 public:
-  Q_PROPERTY(QString name READ nameTitle)
   Q_PROPERTY(QString keyBindings READ keyBindings WRITE setKeyBindings)
   Q_PROPERTY(QSize size READ size WRITE setSize)
 
   /**
    * Constructs a new session.
    *
    * To start the terminal process, call the run() method,
    * after specifying the program and arguments
@@ -70,21 +69,16 @@ public:
    *
    * If no program or arguments are specified explicitly, the Session
    * falls back to using the program specified in the SHELL environment
    * variable.
    */
   SessionModel(KPty *kpty);
   ~SessionModel();
 
-  /**
-   * Returns true if the session is currently running.  This will be true
-   * after run() has been called successfully.
-   */
-  bool isRunning() const;
 
   /**
    * Sets the profile associated with this session.
    *
    * @param profileKey A key which can be used to obtain the current
    * profile settings from the SessionManager
    */
   void setProfileKey(const QString& profileKey);
@@ -121,86 +115,17 @@ public:
   QList<SessionView*> views() const;
 
   /**
    * Returns the terminal emulation instance being used to encode / decode
    * characters to / from the process.
    */
   Emulation*  emulation() const;
 
-  /**
-   * Returns the environment of this session as a list of strings like
-   * VARIABLE=VALUE
-   */
-  QStringList environment() const;
-  /**
-   * Sets the environment for this session.
-   * @p environment should be a list of strings like
-   * VARIABLE=VALUE
-   */
-  void setEnvironment(const QStringList& environment);
 
-  /** Returns the unique ID for this session. */
-  int sessionId() const;
-
-  /**
-   * Return the session title set by the user (ie. the program running
-   * in the terminal), or an empty string if the user has not set a custom title
-   */
-  QString userTitle() const;
-
-  /**
-   * This enum describes the contexts for which separate
-   * tab title formats may be specified.
-   */
-  enum TabTitleContext
-  {
-    /** Default tab title format */
-    LocalTabTitle,
-    /**
-     * Tab title format used session currently contains
-     * a connection to a remote computer (via SSH)
-     */
-    RemoteTabTitle
-  };
-  /**
-   * Sets the format used by this session for tab titles.
-   *
-   * @param context The context whoose format should be set.
-   * @param format The tab title format.  This may be a mixture
-   * of plain text and dynamic elements denoted by a '%' character
-   * followed by a letter.  (eg. %d for directory).  The dynamic
-   * elements available depend on the @p context
-   */
-  void setTabTitleFormat(TabTitleContext context , const QString& format);
-  /** Returns the format used by this session for tab titles. */
-  QString tabTitleFormat(TabTitleContext context) const;
-
-
-  /** Returns the arguments passed to the shell process when run() is called. */
-  QStringList arguments() const;
-  /** Returns the program name of the shell process started when run() is called. */
-  QString program() const;
-
-  /**
-   * Sets the command line arguments which the session's program will be passed when
-   * run() is called.
-   */
-  void setArguments(const QStringList& arguments);
-  /** Sets the program to be executed when run() is called. */
-  void setProgram(const QString& program);
-
-  /** Returns the session's current working directory. */
-  QString initialWorkingDirectory() { return _initialWorkingDir; }
-
-  /**
-   * Sets the initial working directory for the session when it is run
-   * This has no effect once the session has been started.
-   */
-  void setInitialWorkingDirectory( const QString& dir );
 
   /**
    * Sets the type of history store used by this session.
    * Lines of output produced by the terminal are added
    * to the history store.  The type of history store
    * used affects the number of lines which can be
    * remembered before they are lost and the storage
    * (in memory, on-disk etc.) used.
@@ -249,75 +174,32 @@ public:
    * @param id The name of the key bindings to use.  The
    * names of available key bindings can be determined using the
    * KeyboardTranslatorManager class.
    */
   void setKeyBindings(const QString& id);
   /** Returns the name of the key bindings used by this session. */
   QString keyBindings() const;
 
-  /**
-   * This enum describes the available title roles.
-   */
-  enum TitleRole
-  {
-      /** The name of the session. */
-      NameRole,
-      /** The title of the session which is displayed in tabs etc. */
-      DisplayedTitleRole
-  };
-
-  /** Sets the session's title for the specified @p role to @p title. */
-  void setTitle(TitleRole role , const QString& title);
-  /** Returns the session's title for the specified @p role. */
-  QString title(TitleRole role) const;
-  /** Convenience method used to read the name property.  Returns title(Session::NameRole). */
-  QString nameTitle() const { return title(SessionModel::NameRole); }
-
-  /** Sets the name of the icon associated with this session. */
-  void setIconName(const QString& iconName);
-  /** Returns the name of the icon associated with this session. */
-  QString iconName() const;
-
-  /** Sets the text of the icon associated with this session. */
-  void setIconText(const QString& iconText);
-  /** Returns the text of the icon associated with this session. */
-  QString iconText() const;
 
   /** Specifies whether a utmp entry should be created for the pty used by this session. */
   void setAddToUtmp(bool);
 
   /**
    * Specifies whether to close the session automatically when the terminal
    * process terminates.
    */
   void setAutoClose(bool b) { _autoClose = b; }
 
   /**
-   * Sets whether flow control is enabled for this terminal
-   * session.
-   */
-  void setFlowControlEnabled(bool enabled);
-
-  /** Returns whether flow control is enabled for this terminal session. */
-  bool flowControlEnabled() const;
-
-  /**
    * Sends @p text to the current foreground terminal program.
    */
   void sendText(const QString& text) const;
 
 
-  /**
-   * Returns the process id of the terminal's foreground process.
-   * This is initially the same as processId() but can change
-   * as the user starts other programs inside the terminal.
-   */
-  int foregroundProcessId() const;
-
   /** Returns the terminal session's window size in lines and columns. */
   QSize size();
   /**
    * Emits a request to resize the session to accommodate
    * the specified window size.
    *
    * @param size The size in lines and columns to request.
    */
@@ -359,23 +241,16 @@ public slots:
 
   /**
    * Closes the terminal session.  This sends a hangup signal
    * (SIGHUP) to the terminal process and causes the done(Session*)
    * signal to be emitted.
    */
   void close();
 
-  /**
-   * Changes the session title or other customizable aspects of the terminal
-   * emulation display. For a list of what may be changed see the
-   * Emulation::titleChanged() signal.
-   */
-  void setUserTitle( int, const QString &caption );
-
 signals:
 
   /** Emitted when the terminal process starts. */
   void started();
 
   /**
    * Emitted when the terminal process exits.
    */
@@ -431,23 +306,16 @@ signals:
   /**
    * Emitted when a profile change command is received from the terminal.
    *
    * @param text The text of the command.  This is a string of the form
    * "PropertyName=Value;PropertyName=Value ..."
    */
   void profileChangeCommandReceived(const QString& text);
 
- /**
-  * Emitted when the flow control state changes.
-  *
-  * @param enabled True if flow control is enabled or false otherwise.
-  */
-  void flowControlEnabledChanged(bool enabled);
-
 private slots:
   void done(int);
 
   void onReceiveBlock( const char* buffer, int len );
   void monitorTimerDone();
 
   void onViewSizeChange(int height, int width);
   void onEmulationSizeChange(int lines , int columns);
@@ -476,45 +344,27 @@ private:
   bool           _notifiedActivity;
   bool           _masterMode;
   bool           _autoClose;
   bool           _wantedClose;
   QTimer*        _monitorTimer;
 
   int            _silenceSeconds;
 
-  QString        _nameTitle;
-  QString        _displayTitle;
-  QString        _userTitle;
-
-  QString        _localTabTitleFormat;
-  QString        _remoteTabTitleFormat;
-
-  QString        _iconName;
-  QString        _iconText; // as set by: echo -en '\033]1;IconText\007
   bool           _addToUtmp;
-  bool           _flowControl;
   bool           _fullScripting;
 
-  QString        _program;
-  QStringList    _arguments;
-
-  QStringList    _environment;
-  int            _sessionId;
   int            _masterFd;
   int            _slaveFd;
-  QString        _initialWorkingDir;
+
   SelfListener  *_selfListener;
   KPty         * _kpty;
 
 
   QColor         _modifiedBackground; // as set by: echo -en '\033]11;Color\007
 
   QString        _profileKey;
 
   bool _hasDarkBackground;
-
-  static int lastSessionId;
-
 };
 
 
 #endif
diff --git a/libqterminal/SessionView.cpp b/libqterminal/SessionView.cpp
--- a/libqterminal/SessionView.cpp
+++ b/libqterminal/SessionView.cpp
@@ -256,17 +256,16 @@ SessionView::SessionView(QWidget *parent
 ,_cursorBlinking(false)
 ,_hasBlinkingCursor(false)
 ,_ctrlDrag(false)
 ,_tripleClickMode(SelectWholeLine)
 ,_isFixedSize(false)
 ,_possibleTripleClick(false)
 ,_resizeWidget(0)
 ,_resizeTimer(0)
-,_flowControlWarningEnabled(false)
 ,_outputSuspendedLabel(0)
 ,_lineSpacing(0)
 ,_colorsInverted(false)
 ,_blendColor(qRgba(0,0,0,0xff))
 ,_filterChain(new TerminalImageFilterChain())
 ,_cursorShape(BlockCursor)
 ,_readonly(false)
 {
@@ -2279,45 +2278,22 @@ void SessionView::pasteSelection()
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                                Keyboard                                   */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
-void SessionView::setFlowControlWarningEnabled( bool enable )
-{
-	_flowControlWarningEnabled = enable;
-	
-	// if the dialog is currently visible and the flow control warning has 
-	// been disabled then hide the dialog
-	if (!enable)
-		outputSuspended(false);
-}
-
 void SessionView::keyPressEvent( QKeyEvent* event )
 {
 //qDebug("%s %d keyPressEvent and key is %d", __FILE__, __LINE__, event->key());
 
     bool emitKeyPressSignal = true;
 
-    // XonXoff flow control
-    if (event->modifiers() & Qt::ControlModifier && _flowControlWarningEnabled)
-	{
-		if ( event->key() == Qt::Key_S ) {
-		//qDebug("%s %d keyPressEvent, output suspended", __FILE__, __LINE__);
-				emit flowControlKeyPressed(true /*output suspended*/);
-		}
-		else if ( event->key() == Qt::Key_Q ) {
-		//qDebug("%s %d keyPressEvent, output enabled", __FILE__, __LINE__);
-				emit flowControlKeyPressed(false /*output enabled*/);
-		}
-	}
-
     // Keyboard-based navigation
     if ( event->modifiers() == Qt::ShiftModifier )
     {
         bool update = true;
 
         if ( event->key() == Qt::Key_PageUp )
         {
 	    //qDebug("%s %d pageup", __FILE__, __LINE__);
diff --git a/libqterminal/SessionView.h b/libqterminal/SessionView.h
--- a/libqterminal/SessionView.h
+++ b/libqterminal/SessionView.h
@@ -413,22 +413,16 @@ public slots:
      * display.
      */
     void pasteClipboard();
     /**
      * Pastes the content of the selection into the
      * display.
      */
     void pasteSelection();
-
-	/** 
- 	  * Changes whether the flow control warning box should be shown when the flow control
- 	  * stop key (Ctrl+S) are pressed.
- 	  */
-	void setFlowControlWarningEnabled(bool enabled);
 	
     /** 
 	 * Causes the widget to display or hide a message informing the user that terminal
 	 * output has been suspended (by using the flow control key combination Ctrl+S)
 	 *
 	 * @param suspended True if terminal output has been suspended and the warning message should
 	 *				 	be shown or false to indicate that terminal output has been resumed and that
 	 *				 	the warning message should disappear.
diff --git a/libqterminal/ShellCommand.cpp b/libqterminal/ShellCommand.cpp
deleted file mode 100644
--- a/libqterminal/ShellCommand.cpp
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
-    Copyright (C) 2007 by Robert Knight <robertknight@gmail.com>
-
-    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-    02110-1301  USA.
-*/
-
-// Own
-#include "ShellCommand.h"
-
-//some versions of gcc(4.3) require explicit include
-#include <cstdlib>
-
-// expands environment variables in 'text'
-// function copied from kdelibs/kio/kio/kurlcompletion.cpp
-static bool expandEnv(QString& text);
-
-ShellCommand::ShellCommand(const QString& fullCommand)
-{
-    bool inQuotes = false;
-
-    QString builder;
-
-    for ( int i = 0 ; i < fullCommand.count() ; i++ )
-    {
-        QChar ch = fullCommand[i];
-
-        const bool isLastChar = ( i == fullCommand.count() - 1 );
-        const bool isQuote = ( ch == '\'' || ch == '\"' );
-
-        if ( !isLastChar && isQuote )
-            inQuotes = !inQuotes;
-        else
-        { 
-            if ( (!ch.isSpace() || inQuotes) && !isQuote )
-                builder.append(ch);
-
-            if ( (ch.isSpace() && !inQuotes) || ( i == fullCommand.count()-1 ) )
-            {
-                _arguments << builder;      
-                builder.clear(); 
-            }
-        }
-    }
-}
-ShellCommand::ShellCommand(const QString& command , const QStringList& arguments)
-{
-    _arguments = arguments;
-    
-    if ( !_arguments.isEmpty() )
-        _arguments[0] == command;
-}
-QString ShellCommand::fullCommand() const
-{
-    return _arguments.join(QChar(' '));
-}
-QString ShellCommand::command() const
-{
-    if ( !_arguments.isEmpty() )
-        return _arguments[0];
-    else
-        return QString();
-}
-QStringList ShellCommand::arguments() const
-{
-    return _arguments;
-}
-bool ShellCommand::isRootCommand() const
-{
-    Q_ASSERT(0); // not implemented yet
-    return false;
-}
-bool ShellCommand::isAvailable() const
-{
-    Q_ASSERT(0); // not implemented yet
-    return false; 
-}
-QStringList ShellCommand::expand(const QStringList& items)
-{
-    QStringList result;
-
-    foreach( QString item , items )
-        result << expand(item);
-
-    return result;
-}
-QString ShellCommand::expand(const QString& text)
-{
-    QString result = text;
-    expandEnv(result);
-    return result;
-}
-
-/*
- * expandEnv
- *
- * Expand environment variables in text. Escaped '$' characters are ignored.
- * Return true if any variables were expanded
- */
-static bool expandEnv( QString &text )
-{
-	// Find all environment variables beginning with '$'
-	//
-	int pos = 0;
-
-	bool expanded = false;
-
-	while ( (pos = text.indexOf(QLatin1Char('$'), pos)) != -1 ) {
-
-		// Skip escaped '$'
-		//
-		if ( pos > 0 && text.at(pos-1) == QLatin1Char('\\') ) {
-			pos++;
-		}
-		// Variable found => expand
-		//
-		else {
-			// Find the end of the variable = next '/' or ' '
-			//
-			int pos2 = text.indexOf( QLatin1Char(' '), pos+1 );
-			int pos_tmp = text.indexOf( QLatin1Char('/'), pos+1 );
-
-			if ( pos2 == -1 || (pos_tmp != -1 && pos_tmp < pos2) )
-				pos2 = pos_tmp;
-
-			if ( pos2 == -1 )
-				pos2 = text.length();
-
-			// Replace if the variable is terminated by '/' or ' '
-			// and defined
-			//
-			if ( pos2 >= 0 ) {
-				int len	= pos2 - pos;
-				QString key	= text.mid( pos+1, len-1);
-				QString value =
-					QString::fromLocal8Bit( ::getenv(key.toLocal8Bit()) );
-
-				if ( !value.isEmpty() ) {
-					expanded = true;
-					text.replace( pos, len, value );
-					pos = pos + value.length();
-				}
-				else {
-					pos = pos2;
-				}
-			}
-		}
-	}
-
-	return expanded;
-}
diff --git a/libqterminal/ShellCommand.h b/libqterminal/ShellCommand.h
deleted file mode 100644
--- a/libqterminal/ShellCommand.h
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
-    Copyright (C) 2007 by Robert Knight <robertknight@gmail.com>
-
-    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-    02110-1301  USA.
-*/
-
-#ifndef SHELLCOMMAND_H
-#define SHELLCOMMAND_H
-
-// Qt
-#include <QtCore/QStringList>
-
-/** 
- * A class to parse and extract information about shell commands. 
- *
- * ShellCommand can be used to:
- *
- * <ul>
- *      <li>Take a command-line (eg "/bin/sh -c /path/to/my/script") and split it
- *          into its component parts (eg. the command "/bin/sh" and the arguments
- *          "-c","/path/to/my/script")
- *      </li>
- *      <li>Take a command and a list of arguments and combine them to 
- *          form a complete command line.
- *      </li>
- *      <li>Determine whether the binary specified by a command exists in the
- *          user's PATH.
- *      </li>
- *      <li>Determine whether a command-line specifies the execution of
- *          another command as the root user using su/sudo etc.
- *      </li>
- * </ul> 
- */
-class ShellCommand
-{
-public:
-    /**
-     * Constructs a ShellCommand from a command line.
-     *
-     * @param fullCommand The command line to parse.  
-     */
-    ShellCommand(const QString& fullCommand);
-    /**
-     * Constructs a ShellCommand with the specified @p command and @p arguments.
-     */
-    ShellCommand(const QString& command , const QStringList& arguments);
-
-    /** Returns the command. */
-    QString command() const;
-    /** Returns the arguments. */
-    QStringList arguments() const;
-
-    /** 
-     * Returns the full command line. 
-     */
-    QString fullCommand() const;
-
-    /** Returns true if this is a root command. */
-    bool isRootCommand() const;
-    /** Returns true if the program specified by @p command() exists. */
-    bool isAvailable() const;
-
-    /** Expands environment variables in @p text .*/
-    static QString expand(const QString& text);
-
-    /** Expands environment variables in each string in @p list. */
-    static QStringList expand(const QStringList& items);
-
-private:
-    QStringList _arguments;    
-};
-
-#endif // SHELLCOMMAND_H
-
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -20,30 +20,28 @@ HEADERS  = BlockArray.h \
            KeyboardTranslator.h \
            konsole_wcwidth.h \
            kpty.h \
            kpty_p.h \
            LineFont.h \
            QTerminal.h \
            Screen.h \
            ScreenWindow.h \
-           ShellCommand.h \
            TerminalCharacterDecoder.h \
            Vt102Emulation.h \
     SessionModel.h \
     SessionView.h \
     SelfListener.h
 SOURCES  = BlockArray.cpp \
            Emulation.cpp \
            Filter.cpp \
            History.cpp \
            KeyboardTranslator.cpp \
            konsole_wcwidth.cpp \
            kpty.cpp \
            QTerminal.cpp \
            Screen.cpp \
            ScreenWindow.cpp \
-           ShellCommand.cpp \
            TerminalCharacterDecoder.cpp \
            Vt102Emulation.cpp \
     SessionModel.cpp \
     SessionView.cpp \
     SelfListener.cpp
