# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1291746260 18000
#      Tue Dec 07 13:24:20 2010 -0500
# Node ID d7ea780b036f30610a6cbf96358e9d43c919be7b
# Parent  2da532d0f41ce2a95a1f121967ed0358511c1f35
repmat: handle special case of replicating scalar using index vector containing zeros

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-12-07  John W. Eaton  <jwe@octave.org>
+
+	* general/repmat.m: Handle special case of replicating scalar
+	using an index vector containing zeros.  Bug #31775.
+
 2010-12-06  Rik  <octave@nomad.inbox5.com>
 
 	* plot/plot.m: Eliminate present tense in first sentence of docstring.
 
 2010-12-06  Rik  <octave@nomad.inbox5.com>
 
 	* plot/xlabel.m, plot/ylabel.m, plot/zlabel.m: Add additional calling
 	form to docstring which returns handle (h)
diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -56,18 +56,22 @@ function x = repmat (a, m, n)
   if (all (idx < 0))
     error ("repmat: invalid dimensions");
   else
     idx = max (idx, 0);
   endif
 
   if (numel (a) == 1)
     ## optimize the scalar fill case.
-    x(1:prod (idx)) = a;
-    x = reshape (x, idx);
+    if (any (idx == 0))
+      x = resize (a, idx);
+    else
+      x(1:prod (idx)) = a;
+      x = reshape (x, idx);
+    endif
   elseif (ndims (a) == 2 && length (idx) < 3)
     if (issparse (a))
       x = kron (ones (idx), a);
     else
       ## indexing is now faster, so we use it rather than kron.
       m = rows (a); n = columns (a);
       p = idx(1); q = idx(2);
       x = reshape (a, m, 1, n, 1);
@@ -131,8 +135,26 @@ endfunction
 
 # Test that sparsity is kept
 %!assert(sparse(4,4), repmat(sparse(2,2),[2 2]));
 
 
 %!assert (size (repmat (".", -1, 1)), [0, 1]);
 %!assert (size (repmat (".", 1, -1)), [1, 0]);
 %!error (size (repmat (".", -1, -1)));
+
+%!assert (size (repmat (1, [1, 0])), [1, 0]);
+%!assert (size (repmat (1, [5, 0])), [5, 0]);
+%!assert (size (repmat (1, [0, 1])), [0, 1]);
+%!assert (size (repmat (1, [0, 5])), [0, 5]);
+
+%!shared x
+%! x = struct ("a", [], "b", []);
+%!assert (size (repmat (x, [1, 0])), [1, 0]);
+%!assert (size (repmat (x, [5, 0])), [5, 0]);
+%!assert (size (repmat (x, [0, 1])), [0, 1]);
+%!assert (size (repmat (x, [0, 5])), [0, 5]);
+
+%!assert (size (repmat ({1}, [1, 0])), [1, 0]);
+%!assert (size (repmat ({1}, [5, 0])), [5, 0]);
+%!assert (size (repmat ({1}, [0, 1])), [0, 1]);
+%!assert (size (repmat ({1}, [0, 5])), [0, 5]);
+
