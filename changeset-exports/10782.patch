# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278925799 -7200
#      Mon Jul 12 11:09:59 2010 +0200
# Node ID d1f920d1ce0c75b2d69e0edb159ed716680dcf05
# Parent  f7584d0ba5d3d2bc491c96743ff0f7e0472bb5b8
simplify code in rand.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/rand.cc (do_rand): Pass the distribution name as an
+	argument. Ensure restoration using unwind_protect.
+	(Frand, Frandn, Frandg, Frandp, Frande): Update.
+
 2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* unwind-prot.h (unwind_protect::fcn_crefarg_elem): New class.
 	(unwind_protect::add_fcn (void (*) (const T&), T)): New method
 	overload.
 
 2010-07-08  David Bateman  <dbateman@free.fr>
 
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -46,23 +46,30 @@ along with Octave; see the file COPYING.
 /*
 %!shared __random_statistical_tests__
 %! % Flag whether the statistical tests should be run in "make check" or not
 %! __random_statistical_tests__ = 0;
 */
 
 static octave_value
 do_rand (const octave_value_list& args, int nargin, const char *fcn,
-         bool additional_arg = false)
+         const std::string& distribution, bool additional_arg = false)
 {
   octave_value retval;
   NDArray a;
   int idx = 0;
   dim_vector dims;
 
+  unwind_protect frame;
+  // Restore current distribution on any exit.
+  frame.add_fcn (octave_rand::distribution,
+                 octave_rand::distribution ());
+
+  octave_rand::distribution (distribution);
+
   if (additional_arg)
     {
       if (nargin == 0)
         {
           error ("%s: expecting at least one argument", fcn);
           goto done;
         }
       else if (args(0).is_string())
@@ -392,17 +399,17 @@ The state or seed of the generator can b
 using the \"reset\" keyword.\n\
 @seealso{randn, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  retval = do_rand (args, nargin, "rand");
+  retval = do_rand (args, nargin, "rand", "uniform");
 
   return retval;
 }
 
 // FIXME -- The old generator (selected when "seed" is set) will not
 // work properly if compiled to use 64-bit integers.
 
 /*
@@ -503,31 +510,17 @@ J. Statistical Software, vol 5, 2000,\n\
 \n\
 @seealso{rand, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  unwind_protect frame;
-
-  // This relies on the fact that elements are popped from the unwind
-  // stack in the reverse of the order they are pushed
-  // (i.e. current_distribution will be reset before calling
-  // reset_rand_generator()).
-
-  frame.add_fcn (reset_rand_generator);
-  frame.protect_var (current_distribution);
-
-  current_distribution = "normal";
-
-  octave_rand::distribution (current_distribution);
-
-  retval = do_rand (args, nargin, "randn");
+  retval = do_rand (args, nargin, "randn", "normal");
 
   return retval;
 }
 
 /*
 %!test
 %! % Test fixed state
 %! randn("state",1);
@@ -576,31 +569,17 @@ J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/})\n\
 @seealso{rand, randn, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  unwind_protect frame;
-
-  // This relies on the fact that elements are popped from the unwind
-  // stack in the reverse of the order they are pushed
-  // (i.e. current_distribution will be reset before calling
-  // reset_rand_generator()).
-
-  frame.add_fcn (reset_rand_generator);
-  frame.protect_var (current_distribution);
-
-  current_distribution = "exponential";
-
-  octave_rand::distribution (current_distribution);
-
-  retval = do_rand (args, nargin, "rande");
+  retval = do_rand (args, nargin, "rande", "exponential");
 
   return retval;
 }
 
 /*
 %!test
 %! % Test fixed state
 %! rande("state",1);
@@ -707,33 +686,17 @@ r = r / sum (r)\n\
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
     error ("randg: insufficient arguments");
   else
-    {
-      unwind_protect frame;
-
-      // This relies on the fact that elements are popped from the unwind
-      // stack in the reverse of the order they are pushed
-      // (i.e. current_distribution will be reset before calling
-      // reset_rand_generator()).
-
-      frame.add_fcn (reset_rand_generator);
-      frame.protect_var (current_distribution);
-
-      current_distribution = "gamma";
-
-      octave_rand::distribution (current_distribution);
-
-      retval = do_rand (args, nargin, "randg", true);
-    }
+    retval = do_rand (args, nargin, "randg", "gamma", true);
 
   return retval;
 }
 
 /*
 %!test
 %! randg("state",12)
 %!assert(randg([-inf,-1,0,inf,nan]),[nan,nan,nan,nan,nan]) % *** Please report
@@ -922,33 +885,17 @@ D 50 p1284, 1994\n\
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
     error ("randp: insufficient arguments");
   else
-    {
-      unwind_protect frame;
-
-      // This relies on the fact that elements are popped from the unwind
-      // stack in the reverse of the order they are pushed
-      // (i.e. current_distribution will be reset before calling
-      // reset_rand_generator()).
-
-      frame.add_fcn (reset_rand_generator);
-      frame.protect_var (current_distribution);
-
-      current_distribution = "poisson";
-
-      octave_rand::distribution (current_distribution);
-
-      retval = do_rand (args, nargin, "randp", true);
-    }
+    retval = do_rand (args, nargin, "randp", "poisson", true);
 
   return retval;
 }
 
 /*
 %!test
 %! randp("state",12)
 %!assert(randp([-inf,-1,0,inf,nan]),[nan,nan,0,nan,nan]); % *** Please report
