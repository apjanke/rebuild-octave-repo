# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451421663 28800
#      Tue Dec 29 12:41:03 2015 -0800
# Node ID b9d4c3615e899bf6ff42d497a1e8b7b474763030
# Parent  7f4c6d594e3db696a721a98c20873afd27a96ed5
maint: Capitalize D for dimension in messages and comments.
"N-d" => "N-D", "1-d" => "1-D", "2-d" => "2-D"

* data.cc, ls-oct-text.cc, xdiv.cc, xpow.cc, ov-str-mat.cc, op-bm-bm.cc,
op-cell.cc, op-cm-cm.cc, op-fcm-fcm.cc, op-fm-fm.cc, op-int.h, op-m-m.cc,
op-str-str.cc, op-struct.cc, Array.cc, Sparse.cc, mx-base.h, mx-op-decl.h,
mx-op-defs.h: Capitalize D for dimension in messages and comments.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6686,17 +6686,17 @@ Undocumented internal function.\n\
     }
 
   octave_value arg = args(0);
 
   if (arg.is_sparse_type ())
     error ("__sort_rows_idx__: sparse matrices not yet supported");
 
   if (arg.ndims () != 2)
-    error ("__sort_rows_idx__: needs a 2-dimensional object");
+    error ("__sort_rows_idx__: needs a 2-D object");
 
   Array<octave_idx_type> idx = arg.sort_rows_idx (smode);
 
   return octave_value (idx, true, true);
 }
 
 static sortmode
 get_sort_mode_option (const octave_value& arg)
@@ -6768,17 +6768,17 @@ This function does not support sparse ma
   octave_value arg = args(0);
 
   if (by_rows)
     {
       if (arg.is_sparse_type ())
         error ("issorted: sparse matrices not yet supported");
 
       if (arg.ndims () != 2)
-        error ("issorted: A must be a 2-dimensional object");
+        error ("issorted: A must be a 2-D object");
 
       retval = arg.is_sorted_rows (smode) != UNSORTED;
     }
   else
     {
       if (! arg.dims ().is_vector ())
         error ("issorted: needs a vector");
 
@@ -6825,17 +6825,17 @@ This function does not support sparse ma
 %!error <needs a vector> issorted ([])
 
 ## Test input validation
 %!error issorted ()
 %!error issorted (1,2,3,4)
 %!error <second argument must be a string> issorted (1, 2)
 %!error <second argument must be a string> issorted (1, {"rows"})
 %!error <sparse matrices not yet supported> issorted (sparse ([1 2 3]), "rows")
-%!error <A must be a 2-dimensional object> issorted (rand (2,2,2), "rows")
+%!error <A must be a 2-D object> issorted (rand (2,2,2), "rows")
 %!error <needs a vector> issorted (ones (2,2))
 */
 
 DEFUN (nth_element, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} nth_element (@var{x}, @var{n})\n\
 @deftypefnx {} {} nth_element (@var{x}, @var{n}, @var{dim})\n\
 Select the n-th smallest element of a vector, using the ordering defined by\n\
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -337,18 +337,18 @@ save_text_data_for_plotting (std::ostrea
                              const std::string& name)
 {
   return save_text_data (os, t, name, false, 6);
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
-// making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
-// TRUE, assume a parametric 3-dimensional plot will be generated.
+// making a 3-D plot with gnuplot.  If PARAMETRIC is TRUE,
+// assume a parametric 3-D plot will be generated.
 
 bool
 save_three_d (std::ostream& os, const octave_value& tc, bool parametric)
 {
   bool fail = false;
 
   octave_idx_type nr = tc.rows ();
   octave_idx_type nc = tc.columns ();
diff --git a/libinterp/corefcn/xdiv.cc b/libinterp/corefcn/xdiv.cc
--- a/libinterp/corefcn/xdiv.cc
+++ b/libinterp/corefcn/xdiv.cc
@@ -274,19 +274,19 @@ x_el_div (const Complex a, const Complex
 
   return result;
 }
 
 // Funny element by element division operations.
 //
 //          op2 \ op1:   s   cs
 //               +--   +---+----+
-//   N-d array         | 1 |  3 |
+//   N-D array         | 1 |  3 |
 //                     +---+----+
-//   complex N-d array | 2 |  4 |
+//   complex N-D array | 2 |  4 |
 //                     +---+----+
 
 NDArray
 x_el_div (double a, const NDArray& b)
 {
   NDArray result (b.dims ());
 
   for (octave_idx_type i = 0; i < b.numel (); i++)
@@ -575,19 +575,19 @@ x_el_div (const FloatComplex a, const Fl
 
   return result;
 }
 
 // Funny element by element division operations.
 //
 //          op2 \ op1:   s   cs
 //               +--   +---+----+
-//   N-d array         | 1 |  3 |
+//   N-D array         | 1 |  3 |
 //                     +---+----+
-//   complex N-d array | 2 |  4 |
+//   complex N-D array | 2 |  4 |
 //                     +---+----+
 
 FloatNDArray
 x_el_div (float a, const FloatNDArray& b)
 {
   FloatNDArray result (b.dims ());
 
   for (octave_idx_type i = 0; i < b.numel (); i++)
diff --git a/libinterp/corefcn/xpow.cc b/libinterp/corefcn/xpow.cc
--- a/libinterp/corefcn/xpow.cc
+++ b/libinterp/corefcn/xpow.cc
@@ -1100,17 +1100,17 @@ elem_xpow (const ComplexMatrix& a, const
       {
         octave_quit ();
         result (i, j) = std::pow (a (i, j), b (i, j));
       }
 
   return result;
 }
 
-// Safer pow functions that work elementwise for N-d arrays.
+// Safer pow functions that work elementwise for N-D arrays.
 //
 //       op2 \ op1:   s   nd  cs   cnd
 //            +--   +---+---+----+----+
 //   scalar   |     | * | 3 |  * |  9 |
 //                  +---+---+----+----+
 //   N_d            | 1 | 4 |  7 | 10 |
 //                  +---+---+----+----+
 //   complex_scalar | * | 5 |  * | 11 |
@@ -2466,17 +2466,17 @@ elem_xpow (const FloatComplexMatrix& a, 
       {
         octave_quit ();
         result (i, j) = std::pow (a (i, j), b (i, j));
       }
 
   return result;
 }
 
-// Safer pow functions that work elementwise for N-d arrays.
+// Safer pow functions that work elementwise for N-D arrays.
 //
 //       op2 \ op1:   s   nd  cs   cnd
 //            +--   +---+---+----+----+
 //   scalar   |     | * | 3 |  * |  9 |
 //                  +---+---+----+----+
 //   N_d            | 1 | 4 |  7 | 10 |
 //                  +---+---+----+----+
 //   complex_scalar | * | 5 |  * | 11 |
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -198,23 +198,23 @@ ComplexMatrix
 octave_char_matrix_str::complex_matrix_value (bool force_string_conv) const
 {
   CHAR_MATRIX_CONV (ComplexMatrix, , "complex matrix", complex_matrix_value);
 }
 
 NDArray
 octave_char_matrix_str::array_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (NDArray, , "real N-d array", array_value);
+  CHAR_MATRIX_CONV (NDArray, , "real N-D array", array_value);
 }
 
 ComplexNDArray
 octave_char_matrix_str::complex_array_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-d array",
+  CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-D array",
                     complex_array_value);
 }
 
 string_vector
 octave_char_matrix_str::string_vector_value (bool) const
 {
   string_vector retval;
 
diff --git a/libinterp/operators/op-bm-bm.cc b/libinterp/operators/op-bm-bm.cc
--- a/libinterp/operators/op-bm-bm.cc
+++ b/libinterp/operators/op-bm-bm.cc
@@ -56,17 +56,17 @@ DEFNDUNOP_OP (uminus, bool_matrix, array
 
 DEFNCUNOP_METHOD (invert, bool_matrix, invert)
 
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.bool_matrix_value ().transpose ());
 }
 
 // bool matrix by bool matrix ops.
 
 DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_eq)
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
diff --git a/libinterp/operators/op-cell.cc b/libinterp/operators/op-cell.cc
--- a/libinterp/operators/op-cell.cc
+++ b/libinterp/operators/op-cell.cc
@@ -36,17 +36,17 @@ along with Octave; see the file COPYING.
 
 // cell ops.
 
 DEFUNOP (transpose, cell)
 {
   CAST_UNOP_ARG (const octave_cell&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (Cell (v.cell_value ().transpose ()));
 }
 
 DEFCATOP_FN (c_c, cell, cell, concat)
 
 DEFASSIGNANYOP_FN (assign, cell, assign);
 
diff --git a/libinterp/operators/op-cm-cm.cc b/libinterp/operators/op-cm-cm.cc
--- a/libinterp/operators/op-cm-cm.cc
+++ b/libinterp/operators/op-cm-cm.cc
@@ -41,27 +41,27 @@ DEFNDUNOP_OP (not, complex_matrix, compl
 DEFNDUNOP_OP (uplus, complex_matrix, complex_array, /* no-op */)
 DEFNDUNOP_OP (uminus, complex_matrix, complex_array, -)
 
 DEFUNOP (transpose, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.complex_matrix_value ().transpose ());
 }
 
 DEFUNOP (hermitian, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   if (v.ndims () > 2)
-    error ("complex-conjugate transpose not defined for N-d objects");
+    error ("complex-conjugate transpose not defined for N-D objects");
 
   return octave_value (v.complex_matrix_value ().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, complex_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, complex_matrix, changesign)
 
diff --git a/libinterp/operators/op-fcm-fcm.cc b/libinterp/operators/op-fcm-fcm.cc
--- a/libinterp/operators/op-fcm-fcm.cc
+++ b/libinterp/operators/op-fcm-fcm.cc
@@ -41,27 +41,27 @@ DEFNDUNOP_OP (not, float_complex_matrix,
 DEFNDUNOP_OP (uplus, float_complex_matrix, float_complex_array, /* no-op */)
 DEFNDUNOP_OP (uminus, float_complex_matrix, float_complex_array, -)
 
 DEFUNOP (transpose, float_complex_matrix)
 {
   CAST_UNOP_ARG (const octave_float_complex_matrix&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.float_complex_matrix_value ().transpose ());
 }
 
 DEFUNOP (hermitian, float_complex_matrix)
 {
   CAST_UNOP_ARG (const octave_float_complex_matrix&);
 
   if (v.ndims () > 2)
-    error ("complex-conjugate transpose not defined for N-d objects");
+    error ("complex-conjugate transpose not defined for N-D objects");
 
   return octave_value (v.float_complex_matrix_value ().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, float_complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_complex_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, float_complex_matrix, changesign)
 
diff --git a/libinterp/operators/op-fm-fm.cc b/libinterp/operators/op-fm-fm.cc
--- a/libinterp/operators/op-fm-fm.cc
+++ b/libinterp/operators/op-fm-fm.cc
@@ -41,17 +41,17 @@ DEFNDUNOP_OP (not, float_matrix, float_a
 DEFNDUNOP_OP (uplus, float_matrix, float_array, /* no-op */)
 DEFNDUNOP_OP (uminus, float_matrix, float_array, -)
 
 DEFUNOP (transpose, float_matrix)
 {
   CAST_UNOP_ARG (const octave_float_matrix&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.float_matrix_value ().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, float_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, float_matrix, changesign)
 
diff --git a/libinterp/operators/op-int.h b/libinterp/operators/op-int.h
--- a/libinterp/operators/op-int.h
+++ b/libinterp/operators/op-int.h
@@ -623,17 +623,17 @@ octave_value elem_xpow (FloatNDArray a, 
     return retval; \
   } \
  \
   DEFUNOP (m_transpose, TYPE ## _matrix) \
   { \
     CAST_UNOP_ARG (const octave_ ## TYPE ## _matrix&); \
  \
     if (v.ndims () > 2) \
-      error ("transpose not defined for N-d objects"); \
+      error ("transpose not defined for N-D objects"); \
     else \
       return octave_value (v.TYPE ## _array_value ().transpose ()); \
   } \
  \
   DEFNCUNOP_METHOD (m_incr, TYPE ## _matrix, increment) \
   DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement) \
   DEFNCUNOP_METHOD (m_changesign, TYPE ## _matrix, changesign)
 
diff --git a/libinterp/operators/op-m-m.cc b/libinterp/operators/op-m-m.cc
--- a/libinterp/operators/op-m-m.cc
+++ b/libinterp/operators/op-m-m.cc
@@ -41,17 +41,17 @@ DEFNDUNOP_OP (not, matrix, array, !)
 DEFNDUNOP_OP (uplus, matrix, array, /* no-op */)
 DEFNDUNOP_OP (uminus, matrix, array, -)
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_matrix&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.matrix_value ().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, matrix, increment)
 DEFNCUNOP_METHOD (decr, matrix, decrement)
 DEFNCUNOP_METHOD (changesign, matrix, changesign)
 
diff --git a/libinterp/operators/op-str-str.cc b/libinterp/operators/op-str-str.cc
--- a/libinterp/operators/op-str-str.cc
+++ b/libinterp/operators/op-str-str.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 
 // string unary ops.
 
 DEFUNOP (transpose, char_matrix_str)
 {
   CAST_UNOP_ARG (const octave_char_matrix_str&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.char_matrix_value ().transpose (),
                        a.is_sq_string () ? '\'' : '"');
 }
 
 // string by string ops.
 
 #define DEFCHARNDBINOP_FN(name, op, t1, t2, e1, e2, f)  \
diff --git a/libinterp/operators/op-struct.cc b/libinterp/operators/op-struct.cc
--- a/libinterp/operators/op-struct.cc
+++ b/libinterp/operators/op-struct.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 
 // struct ops.
 
 DEFUNOP (transpose, struct)
 {
   CAST_UNOP_ARG (const octave_struct&);
 
   if (v.ndims () > 2)
-    error ("transpose not defined for N-d objects");
+    error ("transpose not defined for N-D objects");
 
   return octave_value (v.map_value ().transpose ());
 }
 
 DEFUNOP (scalar_transpose, scalar_struct)
 {
   CAST_UNOP_ARG (const octave_scalar_struct&);
 
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -384,17 +384,17 @@ public:
             }
         }
 
     return dest + nr*nc;
   }
 
 private:
 
-  // Recursive N-d generalized transpose
+  // Recursive N-D generalized transpose
   template <class T>
   T *do_permute (const T *src, T *dest, int lev) const
   {
     if (lev == 0)
       {
         octave_idx_type step = stride[0];
         octave_idx_type len = dim[0];
         if (step == 1)
@@ -559,51 +559,51 @@ public:
           }
       }
   }
 
   ~rec_index_helper (void) { delete [] idx; delete [] dim; }
 
 private:
 
-  // Recursive N-d indexing
+  // Recursive N-D indexing
   template <class T>
   T *do_index (const T *src, T *dest, int lev) const
   {
     if (lev == 0)
       dest += idx[0].index (src, dim[0], dest);
     else
       {
         octave_idx_type nn = idx[lev].length (dim[lev]);
         octave_idx_type d = cdim[lev];
         for (octave_idx_type i = 0; i < nn; i++)
           dest = do_index (src + d*idx[lev].xelem (i), dest, lev-1);
       }
 
     return dest;
   }
 
-  // Recursive N-d indexed assignment
+  // Recursive N-D indexed assignment
   template <class T>
   const T *do_assign (const T *src, T *dest, int lev) const
   {
     if (lev == 0)
       src += idx[0].assign (src, dim[0], dest);
     else
       {
         octave_idx_type nn = idx[lev].length (dim[lev]);
         octave_idx_type d = cdim[lev];
         for (octave_idx_type i = 0; i < nn; i++)
           src = do_assign (src, dest + d*idx[lev].xelem (i), lev-1);
       }
 
     return src;
   }
 
-  // Recursive N-d indexed assignment
+  // Recursive N-D indexed assignment
   template <class T>
   void do_fill (const T& val, T *dest, int lev) const
   {
     if (lev == 0)
       idx[0].fill (val, dim[0], dest);
     else
       {
         octave_idx_type nn = idx[lev].length (dim[lev]);
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -816,17 +816,17 @@ Sparse<T>::reshape (const dim_vector& ne
 {
   Sparse<T> retval;
   dim_vector dims2 = new_dims;
 
   if (dims2.length () > 2)
     {
       (*current_liboctave_warning_with_id_handler)
         ("Octave:reshape-smashes-dims",
-         "reshape: sparse reshape to N-d array smashes dims");
+         "reshape: sparse reshape to N-D array smashes dims");
 
       for (octave_idx_type i = 2; i < dims2.length (); i++)
         dims2(1) *= dims2(i);
 
       dims2.resize (2);
     }
 
   if (dimensions != dims2)
diff --git a/liboctave/operators/mx-base.h b/liboctave/operators/mx-base.h
--- a/liboctave/operators/mx-base.h
+++ b/liboctave/operators/mx-base.h
@@ -61,17 +61,17 @@ along with Octave; see the file COPYING.
 #include "PermMatrix.h"
 
 // Sparse Matrix classes.
 
 #include "boolSparse.h"
 #include "dSparse.h"
 #include "CSparse.h"
 
-// N-d Array classes.
+// N-D Array classes.
 
 #include "boolNDArray.h"
 #include "chNDArray.h"
 #include "dNDArray.h"
 #include "CNDArray.h"
 #include "fNDArray.h"
 #include "fCNDArray.h"
 
diff --git a/liboctave/operators/mx-op-decl.h b/liboctave/operators/mx-op-decl.h
--- a/liboctave/operators/mx-op-decl.h
+++ b/liboctave/operators/mx-op-decl.h
@@ -146,17 +146,17 @@ class boolNDArray;
   BOOL_OP_DECL (mx_el_and, M1, M2, API); \
   BOOL_OP_DECL (mx_el_or,  M1, M2, API);
 
 #define MM_OP_DECLS(R, M1, M2, API) \
   MM_BIN_OP_DECLS (R, M1, M2, API) \
   MM_CMP_OP_DECLS (M1, M2, API) \
   MM_BOOL_OP_DECLS (M1, M2, API)
 
-// N-d matrix by scalar operations.
+// N-D matrix by scalar operations.
 
 #define NDS_BIN_OP_DECLS(R, ND, S, API) \
   BIN_OP_DECL (R, operator +, ND, S, API); \
   BIN_OP_DECL (R, operator -, ND, S, API); \
   BIN_OP_DECL (R, operator *, ND, S, API); \
   BIN_OP_DECL (R, operator /, ND, S, API);
 
 #define NDS_CMP_OP_DECLS(ND, S, API) \
@@ -173,17 +173,17 @@ class boolNDArray;
   NDBOOL_OP_DECL (mx_el_not_and, ND, S, API); \
   NDBOOL_OP_DECL (mx_el_not_or,  ND, S, API);
 
 #define NDS_OP_DECLS(R, ND, S, API) \
   NDS_BIN_OP_DECLS (R, ND, S, API) \
   NDS_CMP_OP_DECLS (ND, S, API) \
   NDS_BOOL_OP_DECLS (ND, S, API)
 
-// scalar by N-d matrix operations.
+// scalar by N-D matrix operations.
 
 #define SND_BIN_OP_DECLS(R, S, ND, API) \
   BIN_OP_DECL (R, operator +, S, ND, API); \
   BIN_OP_DECL (R, operator -, S, ND, API); \
   BIN_OP_DECL (R, operator *, S, ND, API); \
   BIN_OP_DECL (R, operator /, S, ND, API);
 
 #define SND_CMP_OP_DECLS(S, ND, API) \
@@ -200,17 +200,17 @@ class boolNDArray;
   NDBOOL_OP_DECL (mx_el_and_not, S, ND, API); \
   NDBOOL_OP_DECL (mx_el_or_not,  S, ND, API);
 
 #define SND_OP_DECLS(R, S, ND, API) \
   SND_BIN_OP_DECLS (R, S, ND, API) \
   SND_CMP_OP_DECLS (S, ND, API) \
   SND_BOOL_OP_DECLS (S, ND, API)
 
-// N-d matrix by N-d matrix operations.
+// N-D matrix by N-D matrix operations.
 
 #define NDND_BIN_OP_DECLS(R, ND1, ND2, API) \
   BIN_OP_DECL (R, operator +, ND1, ND2, API); \
   BIN_OP_DECL (R, operator -, ND1, ND2, API); \
   BIN_OP_DECL (R, product,    ND1, ND2, API); \
   BIN_OP_DECL (R, quotient,   ND1, ND2, API);
 
 #define NDND_CMP_OP_DECLS(ND1, ND2, API) \
@@ -276,17 +276,17 @@ class boolNDArray;
 #define DMDM_BIN_OP_DECLS(R, DM1, DM2, API) \
   BIN_OP_DECL (R, operator +, DM1, DM2, API); \
   BIN_OP_DECL (R, operator -, DM1, DM2, API); \
   BIN_OP_DECL (R, product, DM1, DM2, API);
 
 #define DMDM_OP_DECLS(R, DM1, DM2, API) \
   DMDM_BIN_OP_DECLS (R, DM1, DM2, API)
 
-// scalar by N-d array min/max ops
+// scalar by N-D array min/max ops
 
 #define MINMAX_DECLS(T, S, API) \
   extern API T min (S d, const T& m); \
   extern API T min (const T& m, S d); \
   extern API T min (const T& a, const T& b); \
   extern API T max (S d, const T& m); \
   extern API T max (const T& m, S d); \
   extern API T max (const T& a, const T& b);
diff --git a/liboctave/operators/mx-op-defs.h b/liboctave/operators/mx-op-defs.h
--- a/liboctave/operators/mx-op-defs.h
+++ b/liboctave/operators/mx-op-defs.h
@@ -206,17 +206,17 @@ along with Octave; see the file COPYING.
     MNANCHK (m2, M2::element_type); \
     return do_mm_binary_op<bool, M1::element_type, M2::element_type> (m1, m2, OP, OP, OP, #F); \
   }
 
 #define MM_BOOL_OPS(M1, M2) \
   MM_BOOL_OP (mx_el_and, mx_inline_and, M1, M2) \
   MM_BOOL_OP (mx_el_or,  mx_inline_or,  M1, M2)
 
-// N-d matrix by scalar operations.
+// N-D matrix by scalar operations.
 
 #define NDS_BIN_OP(R, OP, ND, S, F) \
   R \
   OP (const ND& m, const S& s) \
   { \
     return do_ms_binary_op<R::element_type, ND::element_type, S> (m, s, F); \
   }
 
@@ -253,17 +253,17 @@ along with Octave; see the file COPYING.
 #define NDS_BOOL_OPS(ND, S) \
   NDS_BOOL_OP (mx_el_and,     mx_inline_and,     ND, S) \
   NDS_BOOL_OP (mx_el_or,      mx_inline_or,      ND, S) \
   NDS_BOOL_OP (mx_el_not_and, mx_inline_not_and, ND, S) \
   NDS_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  ND, S) \
   NDS_BOOL_OP (mx_el_and_not, mx_inline_and_not, ND, S) \
   NDS_BOOL_OP (mx_el_or_not,  mx_inline_or_not,  ND, S)
 
-// scalar by N-d matrix operations.
+// scalar by N-D matrix operations.
 
 #define SND_BIN_OP(R, OP, S, ND, F) \
   R \
   OP (const S& s, const ND& m) \
   { \
     return do_sm_binary_op<R::element_type, S, ND::element_type> (s, m, F); \
   }
 
@@ -300,17 +300,17 @@ along with Octave; see the file COPYING.
 #define SND_BOOL_OPS(S, ND) \
   SND_BOOL_OP (mx_el_and,     mx_inline_and,     S, ND) \
   SND_BOOL_OP (mx_el_or,      mx_inline_or,      S, ND) \
   SND_BOOL_OP (mx_el_not_and, mx_inline_not_and, S, ND) \
   SND_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  S, ND) \
   SND_BOOL_OP (mx_el_and_not, mx_inline_and_not, S, ND) \
   SND_BOOL_OP (mx_el_or_not,  mx_inline_or_not,  S, ND)
 
-// N-d matrix by N-d matrix operations.
+// N-D matrix by N-D matrix operations.
 
 #define NDND_BIN_OP(R, OP, ND1, ND2, F) \
   R \
   OP (const ND1& m1, const ND2& m2) \
   { \
     return do_mm_binary_op<R::element_type, ND1::element_type, ND2::element_type> (m1, m2, F, F, F, #OP); \
   }
 
@@ -559,17 +559,17 @@ operator * (const DM& dm, const M& m) \
     return r; \
   }
 
 #define DMDM_BIN_OPS(R, DM1, DM2) \
   DMDM_BIN_OP (R, operator +, DM1, DM2, mx_inline_add) \
   DMDM_BIN_OP (R, operator -, DM1, DM2, mx_inline_sub) \
   DMDM_BIN_OP (R, product,    DM1, DM2, mx_inline_mul)
 
-// scalar by N-d array min/max ops
+// scalar by N-D array min/max ops
 
 #define SND_MINMAX_FCN(FCN, OP, T, S) \
 T \
 FCN (S d, const T& m) \
 { \
   return do_sm_binary_op<T::element_type, S, T::element_type> (d, m, mx_inline_x##FCN); \
 }
 
