# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516942797 18000
#      Thu Jan 25 23:59:57 2018 -0500
# Node ID 7d177be54c3749568b0da5eeb0f18eac0e098028
# Parent  534436fd56079a4f9ad968a0ce50d3b25dcc60c5
pass variable value to variable editor in addition to variable name

* main-window.h, main-window.cc (main_window::edit_variable):
Also pass value.  Change all uses.

* octave-qt-link.h, octave-qt-link.cc (octave_qt_link::octave_qt_link):
Call qRegisterMetaType for octave_value.
(octave_qt_link::do_edit_variable): Rename from
octave_qt_link::do_openvar.  Change all uses.
(edit_variable_signal): Rename from open_variable_signal.

* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::variable_editor_model): Also pass value.
Change all uses.

* variable-editor.h, variable-editor.cc
(variable_editor::edit_variable): Also pass value.  Change all uses.
Align label at top of vbox layout.

* octave-link.h, octave-link.cc (Fopenvar): Use DEFMETHOD.  Get value
from current scope and pass to octave_link::edit_variable.

(octave_link::edit_variable): Rename from octave_link::openvar.
Change all uses.
(octave_link::do_edit_variable): Rename from octave_link::do_openvar.
Change all uses.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1731,19 +1731,19 @@ main_window::set_file_encoding (const QS
 void
 main_window::request_open_files (const QStringList& open_file_names)
 {
   for (int i = 0; i < open_file_names.count (); i++)
     emit open_file_signal (open_file_names.at (i), m_file_encoding, -1);
 }
 
 void
-main_window::edit_variable (const QString &expr)
+main_window::edit_variable (const QString &expr, const octave_value& val)
 {
-  m_variable_editor_window->edit_variable (expr);
+  m_variable_editor_window->edit_variable (expr, val);
 
   if (! m_variable_editor_window->isVisible ())
     {
       m_variable_editor_window->show ();
       m_variable_editor_window->raise ();
     }
 
 }
@@ -1799,18 +1799,21 @@ main_window::construct (void)
     {
       setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
       m_workspace_window->setModel (m_workspace_model);
 
       connect (m_workspace_model, SIGNAL (model_changed (void)),
                m_workspace_window, SLOT (handle_model_changed (void)));
 
-      connect (m_octave_qt_link, SIGNAL (open_variable_signal (const QString&)),
-               this, SLOT (edit_variable (const QString&)));
+      connect (m_octave_qt_link,
+               SIGNAL (edit_variable_signal (const QString&,
+                                             const octave_value&)),
+               this,
+               SLOT (edit_variable (const QString&, const octave_value&)));
 
       connect (m_octave_qt_link, SIGNAL (refresh_variable_editor_signal (void)),
                this, SLOT (refresh_variable_editor (void)));
 
       connect (m_workspace_model,
                SIGNAL (rename_variable (const QString&, const QString&)),
                this,
                SLOT (handle_rename_variable_request (const QString&,
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -59,16 +59,18 @@ along with Octave; see the file COPYING.
 #include "terminal-dock-widget.h"
 #include "variable-editor.h"
 #include "thread-manager.h"
 #include "workspace-model.h"
 #include "workspace-view.h"
 
 class settings_dialog;
 
+class octave_value;
+
 //! QObject to manage the Octave interpreter.
 
 class octave_interpreter : public QObject
 {
   Q_OBJECT
 
 public:
 
@@ -277,17 +279,17 @@ private slots:
 
   void disable_menu_shortcuts (bool disable);
   void restore_create_file_setting (void);
   void set_file_encoding (const QString& new_encoding);
   void request_open_files (const QStringList& open_file_names);
 
   //! Opens the variable editor for @p name.
 
-  void edit_variable (const QString &name);
+  void edit_variable (const QString &name, const octave_value&);
 
   void refresh_variable_editor (void);
 
   void handle_variable_editor_update (void);
 
 protected:
 
   void closeEvent (QCloseEvent *closeEvent);
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -21,40 +21,44 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <QStringList>
 #include <QDialog>
 #include <QDir>
+#include <QMetaType>
 #include <QPushButton>
+#include <QStringList>
 
 #include "oct-env.h"
 #include "str-vec.h"
 
 #include "builtin-defun-decls.h"
 #include "dialog.h"
 #include "error.h"
 #include "interpreter-private.h"
 #include "load-path.h"
+#include "ov.h"
 #include "utils.h"
 
 #include "octave-gui.h"
 #include "octave-qt-link.h"
 #include "resource-manager.h"
 #include "workspace-element.h"
 
 octave_qt_link::octave_qt_link (QWidget *,
                                 octave::gui_application *app_context)
   : octave_link (), m_app_context (app_context)
-{ }
+{
+  qRegisterMetaType<octave_value> ("octave_value");
+}
 
 bool
 octave_qt_link::do_confirm_shutdown (void)
 {
   // Lock the mutex before emitting signal.
   lock ();
 
   emit confirm_shutdown_signal ();
@@ -611,19 +615,19 @@ octave_qt_link::do_show_preferences (voi
 
 void
 octave_qt_link::do_show_doc (const std::string& file)
 {
   emit show_doc_signal (QString::fromStdString (file));
 }
 
 void
-octave_qt_link::do_openvar (const std::string &expr)
+octave_qt_link::do_edit_variable (const std::string& expr, const octave_value& val)
 {
-  emit open_variable_signal (QString::fromStdString (expr));
+  emit edit_variable_signal (QString::fromStdString (expr), val);
 }
 
 void
 octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
 {
   emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
 }
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -35,16 +35,18 @@ along with Octave; see the file COPYING.
 #include <QWaitCondition>
 
 #include "octave-gui.h"
 #include "octave-link.h"
 
 // Defined for purposes of sending QList<int> as part of signal.
 typedef QList<int> QIntList;
 
+class octave_value;
+
 //! Provides threadsafe access to octave.
 //! @author Jacob Dawid
 //!
 //! This class is a wrapper around octave and provides thread safety by
 //! buffering access operations to octave and executing them in the
 //! readline event hook, which lives in the octave thread.
 
 class octave_qt_link : public QObject, public octave_link
@@ -133,17 +135,17 @@ public:
                                std::string& ps4);
 
   static bool file_in_path (const std::string& file, const std::string& dir);
 
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
-  void do_openvar (const std::string &name);
+  void do_edit_variable (const std::string& name, const octave_value& val);
 
   void shutdown_confirmation (bool sd) { m_shutdown_confirm_result = sd; }
 
   void lock (void) { m_mutex.lock (); }
   void wait (void) { m_waitcondition.wait (&m_mutex); }
   void unlock (void) { m_mutex.unlock (); }
   void wake_all (void) { m_waitcondition.wakeAll (); }
 
@@ -192,16 +194,16 @@ signals:
 
   void insert_debugger_pointer_signal (const QString&, int);
   void delete_debugger_pointer_signal (const QString&, int);
 
   void show_preferences_signal (void);
 
   void show_doc_signal (const QString& file);
 
-  void open_variable_signal (const QString &name);
+  void edit_variable_signal (const QString& name, const octave_value& val);
 
   void refresh_variable_editor_signal (void);
 
   void confirm_shutdown_signal (void);
 };
 
 #endif
diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -209,16 +209,17 @@ struct variable_editor_model::impl
   QLabel *m_label;
 
   bool m_validity;
 
   QString m_validtext;
 };
 
 variable_editor_model::variable_editor_model (const QString& expr,
+                                              const octave_value&,
                                               QLabel *label,
                                               QObject *parent)
   : QAbstractTableModel (parent), m_parent (parent), m_d (new impl (expr, label))
 {
   connect (this, SIGNAL (data_ready (int, int, const QString&,
                                      const QString&,
                                      int, int)),
            this, SLOT (received_data (int, int, const QString&,
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -41,18 +41,18 @@ enum sub_editor_types
 
 class
 variable_editor_model : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
-  variable_editor_model (const QString &expr, QLabel *label,
-                         QObject *p = nullptr);
+  variable_editor_model (const QString &expr, const octave_value& val,
+                         QLabel *label, QObject *p = nullptr);
 
   ~variable_editor_model (void);
 
   // No copying!
 
   variable_editor_model (const variable_editor_model&) = delete;
 
   variable_editor_model& operator = (const variable_editor_model&) = delete;
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -104,18 +104,20 @@ variable_editor::variable_editor (QWidge
 
   for (int i = 0; i < resource_manager::varedit_color_chars ().length (); i++)
     m_table_colors.append (QColor (Qt::white));
 
   // Tab Widget.
 
   m_tab_widget->setTabsClosable (true);
   m_tab_widget->setMovable (true);
+
   connect (m_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (closeTab (int)));
+
   m_main->setCentralWidget (m_tab_widget);
 
   // Main.
 
   m_main->setParent (this);
   setWidget (m_main);
 
   connect (this, SIGNAL (command_requested (const QString&)),
@@ -125,17 +127,17 @@ variable_editor::variable_editor (QWidge
 variable_editor::~variable_editor (void)
 {
   // m_tool_bar and m_tab_widget are contained within m_main.
 
   delete m_main;
 }
 
 void
-variable_editor::edit_variable (const QString& name)
+variable_editor::edit_variable (const QString& name, const octave_value& val)
 {
   if (m_stylesheet.isEmpty ())
     {
       QSettings *settings = resource_manager::get_settings ();
       notice_settings (settings);
     }
 
   const int tab_count = m_tab_widget->count ();
@@ -155,21 +157,21 @@ variable_editor::edit_variable (const QS
   QWidget *page = new QWidget;
 
   QVBoxLayout *vbox = new QVBoxLayout (page);
   page->setLayout (vbox);
 
   QLabel *label = new QLabel (page);
   label->setTextFormat (Qt::PlainText);
   label->setText (name);
-  vbox->addWidget (label);
+  vbox->addWidget (label, 0, Qt::AlignTop);
 
   QTableView *table = new QTableView (page);
   variable_editor_model *model =
-    new variable_editor_model (name, label, table);
+    new variable_editor_model (name, val, label, table);
 
   table->setModel (model);
   table->setWordWrap (false);
   table->setContextMenuPolicy (Qt::CustomContextMenu);
   table->setSelectionMode (QAbstractItemView::ContiguousSelection);
 
 
   table->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
@@ -773,17 +775,17 @@ variable_editor::double_click (const QMo
   QString name = real_var_name (m_tab_widget->currentIndex ());
 
   QTableView *const table = get_table_data (m_tab_widget).m_table;
 
   variable_editor_model *const model
     = qobject_cast<variable_editor_model *> (table->model ());
 
   if (model->requires_sub_editor (idx))
-    edit_variable (name + model->subscript_expression (idx));
+    edit_variable (name + model->subscript_expression (idx), octave_value ());
 }
 
 void
 variable_editor::save (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
   QString file
     = QFileDialog::getSaveFileName (this,
@@ -1007,17 +1009,17 @@ variable_editor::up (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
 
   // FIXME: Is there a better way?
 
   if (name.endsWith (')') || name.endsWith ('}'))
     {
       name.remove (QRegExp ("(\\(|\\{)[^({]*(\\)|\\})$"));
-      edit_variable (name);
+      edit_variable (name, octave_value ());
 
       // FIXME: What was the intent here?
       // emit command_requested (QString ("openvar ('%1');").arg (name));
     }
 }
 
 void
 variable_editor::delete_selected (void)
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -25,16 +25,18 @@ along with Octave; see the file COPYING.
 #if ! defined (variable_editor_h)
 #define variable_editor_h 1
 
 #include <QHeaderView>
 #include <QSettings>
 
 #include "octave-dock-widget.h"
 
+class octave_value;
+
 class QTabWidget;
 class QToolBar;
 class QMainWindow;
 class QTableView;
 class QModelIndex;
 
 class variable_editor : public octave_dock_widget
 {
@@ -47,17 +49,17 @@ public:
   ~variable_editor (void);
 
   // No copying!
 
   variable_editor (const variable_editor&) = delete;
 
   variable_editor& operator = (const variable_editor&) = delete;
 
-  void edit_variable (const QString& name);
+  void edit_variable (const QString& name, const octave_value& val);
 
   // Clear all the models' data cache.
   void clear_data_cache (void);
 
   void refresh (void);
 
   bool has_focus (void);
 
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "interpreter.h"
 #include "interpreter-private.h"
 #include "octave-link.h"
 #include "oct-env.h"
 #include "oct-mutex.h"
 #include "ovl.h"
 #include "pager.h"
+#include "symscope.h"
 
 static int
 octave_readline_hook (void)
 {
   octave_link::entered_readline_hook ();
   octave_link::generate_events ();
   octave_link::process_events ();
   octave_link::finished_readline_hook ();
@@ -379,34 +380,43 @@ DEFUN (__octave_link_show_preferences__,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __octave_link_show_preferences__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   return ovl (octave_link::show_preferences ());
 }
 
-DEFUN (openvar, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (openvar, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn {} {} openvar (@var{name})
 Open the variable @var{name} in the graphical Variable Editor.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   if (! args(0).is_string ())
     error ("openvar: NAME must be a string");
 
   std::string name = args(0).string_value ();
 
   if (! (Fisguirunning ())(0).is_true ())
     warning ("openvar: GUI is not running, can't start Variable Editor");
   else
-    octave_link::openvar (name);
+    {
+      octave::symbol_scope scope = interp.require_current_scope ("openvar");
+
+      octave_value val = scope.varval (name);
+
+      if (val.is_undefined ())
+        error ("openvar: '%s' is not a variable", name.c_str ());
+
+      octave_link::edit_variable (name, val);
+    }
 
   return ovl ();
 }
 
 /*
 %!error openvar ()
 %!error openvar ("a", "b")
 %!error <NAME must be a string> openvar (1:10)
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <list>
 #include <string>
 
 #include "oct-mutex.h"
 
 #include "event-queue.h"
 
+class octave_value;
 class string_vector;
 class workspace_element;
 
 //! Provides threadsafe access to octave.
 //! @author Jacob Dawid
 //!
 //! This class is a wrapper around octave and provides thread safety by
 //! buffering access operations to octave and executing them in the
@@ -413,21 +414,21 @@ public:
         return true;
       }
     else
       return false;
 
   }
 
   static bool
-  openvar (const std::string &name)
+  edit_variable (const std::string &name, const octave_value& val)
   {
     if (enabled ())
       {
-        instance->do_openvar (name);
+        instance->do_edit_variable (name, val);
         return true;
       }
     else
       return false;
   }
 
 private:
 
@@ -573,12 +574,13 @@ protected:
 
   virtual void do_set_default_prompts (std::string& ps1, std::string& ps2,
                                        std::string& ps4) = 0;
 
   virtual void do_show_preferences (void) = 0;
 
   virtual void do_show_doc (const std::string& file) = 0;
 
-  virtual void do_openvar (const std::string& name) = 0;
+  virtual void
+  do_edit_variable (const std::string& name, const octave_value& val) = 0;
 };
 
 #endif
