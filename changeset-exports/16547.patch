# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366407400 14400
#      Fri Apr 19 17:36:40 2013 -0400
# Node ID 3cd80afc35092bd930616364244af9f1d0bc005b
# Parent  c1e90c7cfd3082f9c27f037197a53e02a1a6c254
improve debugging with the GUI

* dialog.h, dialog.cc (cd_or_addpath_dialog): New class.
(QUIWidgetCreator::signal_debug_cd_or_addpath): New function.
(QUIWidgetCreator::create_debug_cd_or_addpath_dialog): New signal.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::file_in_path): New function.
(file_editor_tab::add_breakpoint_callback,
file_editor_tab::remove_breakpoint_callback,
file_editor_tab::remove_all_breakpoints_callback): Use file_in_path.
Don't cd to the directory containing the file.  Don't add 1 to the
line number.
(file_editor_tab::request_add_breakpoint,
file_editor_tab::request_remove_breakpoint):
Add 1 to the line number.
(file_editor_tab::insert_debugger_pointer,
file_editor_tab::delete_debugger_pointer,
file_editor_tab::do_breakpoint_marker): Subtract 1 from line.
(file_editor_tab::bp_info): Also cache full file name.  Change all uses.

* file-editor.h, file-editor.cc (file_editor::request_open_file,
file_editor::handle_delete_debugger_pointer_request):
Don't subtract 1 from line numbers.

* main-window.h, main-window.cc (main_window::connect_uiwidget_links):
Connect uiwidget_creator::create_debug_cd_or_addpath_dialog to
main_window::handle_create_debug_cd_or_addpath_dialog.
(main_window::handle_create_debug_cd_or_addpath_dialog):
New function.

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_debug_cd_or_addpath_error): New function.

* load-path.h, load-path.cc (load_path::contains_canonical,
load_path::do_contains_canonical): New functions.

* octave-link.h (octave_link::debug_cd_or_addpath_error,
octave_link::do_debug_cd_or_addpath_error): New functions.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -372,14 +372,94 @@ InputDialog::buttonCancel_clicked (void)
 {
   // Store information about what button was pressed so that builtin
   // functions can retrieve.
   QStringList empty;
   emit finish_input (empty, 0);
   done (QDialog::Rejected);
 }
 
-
+  
 void
 InputDialog::reject (void)
 {
   buttonCancel_clicked ();
 }
+
+
+cd_or_addpath_dialog::cd_or_addpath_dialog (const QString& file,
+                                            const QString& dir,
+                                            bool addpath_option)
+  : QDialog ()
+{
+  QString prompt_string
+    = (addpath_option
+       ? tr ("The file %1 does not exist in the load path.  To debug the function you are editing, you must either change to the directory %2 or add that directory to the load path.").arg(file).arg(dir)
+       : tr ("The file %1 is shadowed by a file with the same name in the load path.  To debug the function you are editing, change to the directory %2.").arg(file).arg(dir));
+
+  QLabel *label = new QLabel (prompt_string);
+  label->setFixedWidth (500);
+  label->setWordWrap (true);
+  //    QIcon *question_mark = new QIcon;
+  QHBoxLayout *horizontalLayout = new QHBoxLayout;
+  //    horizontalLayout->addWidget (question_mark);
+  horizontalLayout->addWidget (label);
+
+  QPushButton *buttonCd = new QPushButton (tr ("Change directory"));
+  QPushButton *buttonAddpath = 0;
+  if (addpath_option)
+    buttonAddpath = new QPushButton (tr ("Add directory to load path"));
+  QPushButton *buttonCancel = new QPushButton (tr ("Cancel"));
+
+  QHBoxLayout *buttonsLayout = new QHBoxLayout;
+  buttonsLayout->addStretch (1);
+  buttonsLayout->addWidget (buttonCd);
+  if (addpath_option)
+    buttonsLayout->addWidget (buttonAddpath);
+  buttonsLayout->addWidget (buttonCancel);
+
+  QVBoxLayout *mainLayout = new QVBoxLayout;
+  mainLayout->addLayout (horizontalLayout);
+  mainLayout->addSpacing (12);
+  mainLayout->addLayout (buttonsLayout);
+  setLayout (mainLayout);
+
+  setWindowTitle (tr ("Change Directory or Add Directory to Load Path"));
+
+  connect (buttonCd, SIGNAL (clicked ()),
+           this, SLOT (buttonCd_clicked ()));
+
+  connect (buttonAddpath, SIGNAL (clicked ()),
+           this, SLOT (buttonAddpath_clicked ()));
+
+  connect (buttonCancel, SIGNAL (clicked ()),
+           this, SLOT (buttonCancel_clicked ()));
+
+  connect (this, SIGNAL (finished (int)),
+           &uiwidget_creator, SLOT (dialog_finished (int)));
+}
+
+void
+cd_or_addpath_dialog::buttonCd_clicked (void)
+{
+  emit finished (1);
+  done (QDialog::Accepted);
+}
+
+void
+cd_or_addpath_dialog::buttonAddpath_clicked (void)
+{
+  emit finished (2);
+  done (QDialog::Accepted);
+}
+
+void
+cd_or_addpath_dialog::buttonCancel_clicked (void)
+{
+  emit finished (-1);
+  done (QDialog::Rejected);
+}
+  
+void
+cd_or_addpath_dialog::reject (void)
+{
+  buttonCancel_clicked ();
+}
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -96,16 +96,27 @@ public:
     if (prompt.isEmpty ())
       return false;
 
     emit create_inputlayout (prompt, title, nr, nc, defaults);
 
     return true;
   };
 
+  // The debug dialog functionality may not really belong here, but it
+  // seems like the easiest thing to do at the moment.
+
+  bool signal_debug_cd_or_addpath (const QString& file, const QString& dir,
+                                   bool addpath_option)
+  {
+    emit create_debug_cd_or_addpath_dialog (file, dir, addpath_option);
+
+    return true;
+  }
+
   const QStringList *get_string_list (void) { return string_list; }
   
   void wait (void)
   {
     // Wait while the user is responding to message box.
     waitcondition.wait (&mutex);
   }
 
@@ -117,16 +128,18 @@ signals:
   void create_listview (const QStringList&, const QString&, int, int,
                         const QIntList&, const QString&, const QString&,
                         const QString&, const QString&);
 
   void create_inputlayout (const QStringList&, const QString&,
                            const QIntList&, const QIntList&,
                            const QStringList&);
 
+  void create_debug_cd_or_addpath_dialog (const QString&, const QString&, bool);
+
 public slots:
 
   void dialog_finished (int result);
 
   void dialog_button_clicked (QAbstractButton *button);
 
   void list_select_finished (const QIntList& selected,
                              const int button_pressed);
@@ -214,9 +227,29 @@ public slots:
 
   void buttonOk_clicked (void);
 
   void buttonCancel_clicked (void);
 
   void reject (void);
 };
 
+class cd_or_addpath_dialog : public QDialog
+{
+  Q_OBJECT
+
+public:
+
+  cd_or_addpath_dialog (const QString& file, const QString& dir,
+                        bool addpath_option);
+
+public slots:
+
+  void buttonCd_clicked (void);
+
+  void buttonAddpath_clicked (void);
+
+  void buttonCancel_clicked (void);
+
+  void reject (void);
+};
+
 #endif
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -42,20 +42,23 @@ along with Octave; see the file COPYING.
 #include <QMessageBox>
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <QInputDialog>
 #include <QPrintDialog>
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
+
+#include "builtin-defun-decls.h"
+#include "debug.h"
+#include "load-path.h"
 #include "octave-link.h"
-
-#include "debug.h"
 #include "oct-env.h"
+#include "utils.h"
 
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
 file_editor_tab::file_editor_tab (QString directory)
 {
   // Make sure there is a slash at the end of the directory name
   // for identification when saved later.
   if (directory.count () && directory.at (directory.count () - 1) != '/')
@@ -190,23 +193,19 @@ file_editor_tab::handle_margin_clicked(i
           if (markers_mask && (1 << bookmark))
             _edit_area->markerDelete(line,bookmark);
           else
             _edit_area->markerAdd(line,bookmark);
         }
       else
         {
           if (markers_mask && (1 << breakpoint))
-            {
-              request_remove_breakpoint (line);
-            }
+            request_remove_breakpoint (line);
           else
-            {
-              request_add_breakpoint (line);
-            }
+            request_add_breakpoint (line);
         }
     }
 }
 
 void
 file_editor_tab::update_lexer ()
 {
   QsciLexer *lexer = _edit_area->lexer ();
@@ -426,81 +425,135 @@ void
 file_editor_tab::remove_bookmark (const QWidget* ID)
 {
   if (ID != this)
     return;
 
   _edit_area->markerDeleteAll (bookmark);
 }
 
+bool
+file_editor_tab::file_in_path (const bp_info& info)
+{
+  bool ok = false;
+  bool addpath_option = true;
+
+  std::string curr_dir = octave_env::get_current_directory ();
+
+  if (curr_dir == info.path)
+    ok = true;
+  else
+    {
+      bool dir_in_load_path = load_path::contains_canonical (info.path);
+
+      std::string base_file = octave_env::base_pathname (info.file);
+      std::string lp_file = load_path::find_file (base_file);
+
+      if (dir_in_load_path)
+        {
+          if (same_file (lp_file, info.file))
+            ok = true;
+        }
+      else
+        {
+          // File directory is not in path.  Is the file in the path in
+          // the current directory?  If so, then changing the current
+          // directory will be needed.  Adding directory to path is
+          // not enough because the file in the current directory would
+          // still be found.
+
+          if (same_file (lp_file, base_file))
+            {
+              if (same_file (curr_dir, info.path))
+                ok = true;
+              else
+                addpath_option = false;
+            }
+        }
+    }
+
+  if (! ok)
+    {
+      int action
+        = octave_link::debug_cd_or_addpath_error (info.file, info.path,
+                                                  addpath_option);
+      switch (action)
+        {
+        case 1:
+          Fcd (ovl (info.path));
+          ok = true;
+          break;
+
+        case 2:
+          load_path::prepend (info.path);
+          ok = true;
+          break;
+
+        default:
+          break;
+        }
+    }
+
+  return ok;
+}
+
 void
 file_editor_tab::add_breakpoint_callback (const bp_info& info)
 {
-  bp_table::intmap intmap;
-  intmap[0] = info.line + 1;
+  bp_table::intmap line_info;
+  line_info[0] = info.line;
 
-  std::string previous_directory = octave_env::get_current_directory ();
-  octave_env::chdir (info.path);
-  intmap = bp_table::add_breakpoint (info.function_name, intmap);
-  octave_env::chdir (previous_directory);
-  // bp_table::add_breakpoint also sets the marker in the editor
+  if (file_in_path (info))
+    bp_table::add_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_breakpoint_callback (const bp_info& info)
 {
-  bp_table::intmap intmap;
-  intmap[0] = info.line + 1;
+  bp_table::intmap line_info;
+  line_info[0] = info.line;
 
-  std::string previous_directory = octave_env::get_current_directory ();
-  octave_env::chdir (info.path);
-  bp_table::remove_breakpoint (info.function_name, intmap);
-  octave_env::chdir (previous_directory);
+  if (file_in_path (info))
+    bp_table::remove_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_all_breakpoints_callback (const bp_info& info)
 {
-  bp_table::intmap intmap;
-  std::string previous_directory = octave_env::get_current_directory ();
-  octave_env::chdir (info.path);
-  intmap = bp_table::remove_all_breakpoints_in_file (info.function_name, true);
-  octave_env::chdir (previous_directory);
-
-  if (intmap.size() > 0)
-    _edit_area->markerDeleteAll (breakpoint);
+  if (file_in_path (info))
+    bp_table::remove_all_breakpoints_in_file (info.function_name, true);
 }
 
 void
 file_editor_tab::request_add_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
   QString path = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (path, function_name, line);
+  bp_info info (_file_name, path, function_name, line+1);
 
   octave_link::post_event
     (this, &file_editor_tab::add_breakpoint_callback, info);
 }
 
 void
 file_editor_tab::request_remove_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
   QString path = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (path, function_name, line);
+  bp_info info (_file_name, path, function_name, line+1);
 
   octave_link::post_event
     (this, &file_editor_tab::remove_breakpoint_callback, info);
 }
 
 void
 file_editor_tab::toggle_breakpoint (const QWidget* ID)
 {
@@ -551,17 +604,17 @@ file_editor_tab::remove_all_breakpoints 
 
   QFileInfo file_info (_file_name);
   QString path = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (path, function_name, 0);
+  bp_info info (_file_name, path, function_name, 0);
 
   octave_link::post_event
     (this, &file_editor_tab::remove_all_breakpoints_callback, info);
 }
 
 void
 file_editor_tab::comment_selected_text (const QWidget* ID)
 {
@@ -1138,43 +1191,43 @@ file_editor_tab::handle_file_resave_answ
 void
 file_editor_tab::insert_debugger_pointer (const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
     {
-      _edit_area->markerAdd (line, debugger_position);
+      _edit_area->markerAdd (line-1, debugger_position);
       center_current_line ();
     }
 }
 
 void
 file_editor_tab::delete_debugger_pointer (const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
-    _edit_area->markerDelete (line, debugger_position);
+    _edit_area->markerDelete (line-1, debugger_position);
 }
 
 void
 file_editor_tab::do_breakpoint_marker (bool insert, const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
     {
       if (insert)
-        _edit_area->markerAdd (line, breakpoint);
+        _edit_area->markerAdd (line-1, breakpoint);
       else
-        _edit_area->markerDelete (line, breakpoint);
+        _edit_area->markerDelete (line-1, breakpoint);
     }
 }
 
 
 void
 file_editor_tab::center_current_line ()
 {
   long int visible_lines = _edit_area->SendScintilla
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -117,20 +117,22 @@ private slots:
   void handle_save_file_as_answer (const QString& fileName);
   void handle_save_file_as_answer_close (const QString& fileName);
   void handle_save_file_as_answer_cancel ();
 
 private:
 
   struct bp_info
   {
-    bp_info (const QString& p, const QString& fn, int l)
-      : path (p.toStdString ()), function_name (fn.toStdString ()), line (l)
+    bp_info (const QString& f, const QString& p, const QString& fn, int l)
+      : file (f.toStdString ()), path (p.toStdString ()),
+        function_name (fn.toStdString ()), line (l)
     { }
 
+    std::string file;
     std::string path;
     std::string function_name;
     int line;
   };
 
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
   void message_duplicate_file_name (const QString& fileName);
@@ -138,16 +140,19 @@ private:
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
 
   void run_file_callback (void);
+
+  bool file_in_path (const bp_info& info);
+
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
 
   QsciScintilla *       _edit_area;
 
   QString               _file_name;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -225,20 +225,20 @@ file_editor::request_open_file (const QS
         {
           _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
             {
               emit fetab_goto_line (tab, line);
 
               if (debug_pointer)
-                emit fetab_insert_debugger_pointer (tab, line-1);
+                emit fetab_insert_debugger_pointer (tab, line);
 
               if (breakpoint_marker)
-                emit fetab_do_breakpoint_marker (insert, tab, line-1);
+                emit fetab_do_breakpoint_marker (insert, tab, line);
             }
 
           emit fetab_set_focus (tab);
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
@@ -253,20 +253,21 @@ file_editor::request_open_file (const QS
                   // file already loaded, add file to mru list here
                   handle_mru_add_file(QDir::cleanPath (openFileName));
 
                   if (line > 0)
                     {
                       emit fetab_goto_line (fileEditorTab, line);
 
                       if (debug_pointer)
-                        emit fetab_insert_debugger_pointer (fileEditorTab, line-1);
+                        emit fetab_insert_debugger_pointer (fileEditorTab,
+                                                            line);
                       if (breakpoint_marker)
-                        emit fetab_do_breakpoint_marker
-                          (insert, fileEditorTab, line-1);
+                        emit fetab_do_breakpoint_marker (insert, fileEditorTab,
+                                                         line);
                     }
                 }
               else
                 {
                   delete fileEditorTab;
                   // Create a NonModal message about error.
                   QMessageBox* msgBox = new QMessageBox (
                                                          QMessageBox::Critical, tr ("Octave Editor"),
@@ -375,17 +376,17 @@ file_editor::handle_delete_debugger_poin
       // Check whether this file is already open in the editor.
       QWidget *tab = find_tab_widget (file);
 
       if (tab)
         {
           _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
-            emit fetab_delete_debugger_pointer (tab, line-1);
+            emit fetab_delete_debugger_pointer (tab, line);
 
           emit fetab_set_focus (tab);
         }
     }
 }
 
 void
 file_editor::handle_update_breakpoint_marker_request (bool insert,
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -587,16 +587,24 @@ main_window::connect_uiwidget_links ()
   connect (&uiwidget_creator,
            SIGNAL (create_inputlayout (const QStringList&, const QString&,
                                        const QIntList&, const QIntList&,
                                        const QStringList&)),
            this,
            SLOT (handle_create_inputlayout (const QStringList&, const QString&,
                                             const QIntList&, const QIntList&,
                                             const QStringList&)));
+
+  connect (&uiwidget_creator,
+           SIGNAL (create_debug_cd_or_addpath_dialog (const QString&,
+                                                      const QString&, bool)),
+           this,
+           SLOT (handle_create_debug_cd_or_addpath_dialog (const QString&,
+                                                           const QString&,
+                                                           bool)));
 }
 
 // Create a message dialog with specified string, buttons and decorative
 // text.
 
 void
 main_window::handle_create_dialog (const QString& message,
                                    const QString& title,
@@ -643,16 +651,29 @@ main_window::handle_create_inputlayout (
 {
   InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
                                                defaults);
 
   input_dialog->setAttribute (Qt::WA_DeleteOnClose);
   input_dialog->show ();
 }
 
+void
+main_window::handle_create_debug_cd_or_addpath_dialog (const QString& file,
+                                                       const QString& dir,
+                                                       bool addpath_option)
+
+{
+  cd_or_addpath_dialog *dialog
+    = new cd_or_addpath_dialog (file, dir, addpath_option);
+
+  dialog->setAttribute (Qt::WA_DeleteOnClose);
+  dialog->show ();
+}
+
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   workspace_window->setModel (_workspace_model);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -137,16 +137,19 @@ public slots:
                                const QString& prompt_string,
                                const QString& ok_string,
                                const QString& cancel_string);
 
   void handle_create_inputlayout (const QStringList&, const QString&,
                                   const QIntList&, const QIntList&,
                                   const QStringList&);
 
+  void handle_create_debug_cd_or_addpath_dialog (const QString& file,
+                                                 const QString& dir,
+                                                 bool addpath_option);
   // find files dialog 
   void find_files(const QString &startdir=QDir::currentPath());
   void find_files_finished(int);
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <QStringList>
 
 #include "str-vec.h"
 
 #include "dialog.h"
+#include "error.h"
 #include "workspace-element.h"
 
 #include "octave-qt-link.h"
 
 octave_qt_link::octave_qt_link (octave_main_thread *mt)
   : octave_link (), main_thread (mt)
 { }
 
@@ -149,16 +150,30 @@ octave_qt_link::do_input_dialog (const s
        it != inputLine->end (); it++)
     {
       retval.push_back (it->toStdString ());
     }
 
   return retval;
 }
 
+int
+octave_qt_link::do_debug_cd_or_addpath_error (const std::string& file,
+                                              const std::string& dir,
+                                              bool addpath_option)
+{
+  uiwidget_creator.signal_debug_cd_or_addpath (QString::fromStdString (file),
+                                               QString::fromStdString (dir),
+                                               addpath_option);
+
+  uiwidget_creator.wait ();
+
+  return uiwidget_creator.get_dialog_result ();
+}
+
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
   emit change_directory_signal (QString::fromStdString (dir));
 }
 
 void
 octave_qt_link::do_set_workspace (bool top_level,
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -74,16 +74,21 @@ public:
 
   std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
                    const std::list<int>& nr,
                    const std::list<int>& nc,
                    const std::list<std::string>& defaults);
 
+  int
+  do_debug_cd_or_addpath_error (const std::string& file,
+                                const std::string& dir,
+                                bool addpath_option);
+
   void do_change_directory (const std::string& dir);
 
   void do_set_workspace (bool top_level,
                          const std::list<workspace_element>& ws);
 
   void do_clear_workspace (void);
 
   void do_set_history (const string_vector& hist);
diff --git a/libinterp/interpfcn/load-path.cc b/libinterp/interpfcn/load-path.cc
--- a/libinterp/interpfcn/load-path.cc
+++ b/libinterp/interpfcn/load-path.cc
@@ -348,16 +348,35 @@ load_path::find_dir_info (const std::str
 }
 
 bool
 load_path::contains (const std::string& dir) const
 {
   return find_dir_info (dir) != dir_info_list.end ();
 }
 
+bool
+load_path::do_contains_canonical (const std::string& dir) const
+{
+  bool retval = false;
+
+  for (const_dir_info_list_iterator i = dir_info_list.begin ();
+       i != dir_info_list.end ();
+       i++)
+    {
+      if (same_file (dir, i->dir_name))
+        {
+          retval = true;
+          break;
+        }
+    }
+
+  return retval;
+}
+
 void
 load_path::move_fcn_map (const std::string& dir_name,
                          const string_vector& fcn_files, bool at_end)
 {
   octave_idx_type len = fcn_files.length ();
 
   for (octave_idx_type k = 0; k < len; k++)
     {
diff --git a/libinterp/interpfcn/load-path.h b/libinterp/interpfcn/load-path.h
--- a/libinterp/interpfcn/load-path.h
+++ b/libinterp/interpfcn/load-path.h
@@ -84,16 +84,21 @@ public:
   }
 
   static void update (void)
   {
     if (instance_ok ())
       instance->do_update ();
   }
 
+  static bool contains_canonical (const std::string& dir_name)
+  {
+    return instance_ok () ? instance->do_contains_canonical (dir_name) : false;
+  }
+
   static std::string find_method (const std::string& class_name,
                                   const std::string& meth,
                                   std::string& dir_name)
   {
     return instance_ok ()
       ? instance->do_find_method (class_name, meth, dir_name) : std::string ();
   }
 
@@ -460,16 +465,18 @@ private:
 
   static bool instance_ok (void);
 
   const_dir_info_list_iterator find_dir_info (const std::string& dir) const;
   dir_info_list_iterator find_dir_info (const std::string& dir);
 
   bool contains (const std::string& dir) const;
 
+  bool do_contains_canonical (const std::string& dir) const;
+
   void move_fcn_map (const std::string& dir,
                      const string_vector& fcn_files, bool at_end);
 
   void move_method_map (const std::string& dir, bool at_end);
 
   void move (std::list<dir_info>::iterator i, bool at_end);
 
   void do_initialize (bool set_initial_path);
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -165,16 +165,24 @@ public:
                 const std::list<int>& nc,
                 const std::list<std::string>& defaults)
   {
     return enabled ()
       ? instance->do_input_dialog (prompt, title, nr, nc, defaults)
       : std::list<std::string> ();
   }
 
+  static int debug_cd_or_addpath_error (const std::string& file,
+                                        const std::string& dir,
+                                        bool addpath_option)
+  {
+    return enabled ()
+      ? instance->do_debug_cd_or_addpath_error (file, dir, addpath_option) : 0;
+  }
+
   static void change_directory (const std::string& dir)
   {
     if (enabled ())
       instance->do_change_directory (dir);
   }
 
   static void set_workspace (void);
 
@@ -336,16 +344,21 @@ protected:
 
   virtual std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
                    const std::list<int>& nr,
                    const std::list<int>& nc,
                    const std::list<std::string>& defaults) = 0;
 
+  virtual int
+  do_debug_cd_or_addpath_error (const std::string& file,
+                                const std::string& dir,
+                                bool addpath_option) = 0;
+
   virtual void do_change_directory (const std::string& dir) = 0;
 
   virtual void
   do_set_workspace (bool top_level,
                     const std::list<workspace_element>& ws) = 0;
 
   virtual void do_clear_workspace (void) = 0;
 
