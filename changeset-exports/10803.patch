# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1279607597 25200
#      Mon Jul 19 23:33:17 2010 -0700
# Node ID 75780a2b04176ec624a0e2a52d91fef7d3de404d
# Parent  c7475803e0c0a98819ffd308eedb9f1f6966476d
__makeinfo__.m: Add support to process @nopsell macro.
Fix bug when more than one @seealso block exists.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,11 +1,16 @@
 2010-07-19  Rik <octave@nomad.inbox5.com>
 
-	* general/repmat.m: Add seealso to new repelems function
+	* help/__makeinfo__.m: Add support to process @nopsell macro.
+	Fix bug when more than one @seealso block exists.
+
+2010-07-19  Rik <octave@nomad.inbox5.com>
+
+	* general/repmat.m: Add seealso to new repelems function.
 
 2010-07-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* specfun/nchoosek.m: Optimize.
 
 2010-07-18  Rik <octave@nomad.inbox5.com>
 
 	* scripts/@ftp/ftp.m, scripts/@ftp/mget.m, scripts/audio/lin2mu.m,
diff --git a/scripts/help/__makeinfo__.m b/scripts/help/__makeinfo__.m
--- a/scripts/help/__makeinfo__.m
+++ b/scripts/help/__makeinfo__.m
@@ -65,37 +65,37 @@ function [retval, status] = __makeinfo__
   if (!ischar (text))
     error ("__makeinfo__: first input argument must be a string");
   endif
   
   if (!ischar (output_type))
     error ("__makeinfo__: second input argument must be a string");
   endif
   
-  ## Define the @seealso macro
+  ## Define the function which expands @seealso macro
   if (isempty (see_also))
     if (strcmpi (output_type, "plain text"))
       see_also = @simple_see_also;
     else
       see_also = @simple_see_also_with_refs;
     endif
   endif
   
   if (!isa (see_also, "function_handle"))
     error ("__makeinfo__: third input argument must be the empty matrix, or a function handle");
   endif
   
-  ## It seems like makeinfo sometimes gets angry if the character on a line is
-  ## a space, so we remove these.
+  ## It seems like makeinfo sometimes gets angry if the first character 
+  ## on a line is a space, so we remove these.
   text = strrep (text, "\n ", "\n");
   
   ## Handle @seealso macro
   SEE_ALSO = "@seealso";
   starts = strfind (text, SEE_ALSO);
-  for start = starts
+  for start = fliplr (starts)
     if (start == 1 || (text (start-1) != "@"))
       bracket_start = find (text (start:end) == "{", 1);
       stop = find (text (start:end) == "}", 1);
       if (!isempty (stop) && !isempty (bracket_start))
         stop += start - 1;
         bracket_start += start - 1;
       else
         bracket_start = start + length (SEE_ALSO);
@@ -107,17 +107,41 @@ function [retval, status] = __makeinfo__
         endif
       endif
       see_also_args = text (bracket_start+1:(stop-1));
       see_also_args = strtrim (strsplit (see_also_args, ","));
       expanded = see_also (see_also_args);
       text = strcat (text (1:start-1), expanded, text (stop+1:end));
     endif
   endfor
-  
+
+  ## Handle @nospell macro
+  NOSPELL = "@nospell";
+  starts = strfind (text, NOSPELL);
+  for start = fliplr (starts)
+    if (start == 1 || (text (start-1) != "@"))
+      bracket_start = find (text (start:end) == "{", 1);
+      stop = find (text (start:end) == "}", 1);
+      if (!isempty (stop) && !isempty (bracket_start))
+        stop += start - 1;
+        bracket_start += start - 1;
+      else
+        bracket_start = start + length (NOSPELL);
+        stop = find (text (start:end) == "\n", 1);
+        if (isempty (stop))
+          stop = length (text);
+        else
+          stop += start - 1;
+        endif
+      endif
+      text(stop) = [];
+      text(start:bracket_start) = [];
+    endif
+  endfor
+
   if (strcmpi (output_type, "texinfo"))
     status = 0;
     retval = text;
     return;
   endif
   
   ## Create the final TeXinfo input string
   text = sprintf ("\\input texinfo\n\n%s\n\n@bye\n", text);
@@ -141,17 +165,17 @@ function [retval, status] = __makeinfo__
          cmd = sprintf ("%s --no-headers --html --no-warn --no-validate --force %s",
                         makeinfo_program (), name);
       otherwise
         error ("__makeinfo__: unsupported output type: '%s'", output_type);
     endswitch
   
     ## Call makeinfo
     [status, retval] = system (cmd);
-   
+
   unwind_protect_cleanup
     if (exist (name, "file"))
       delete (name);
     endif
   end_unwind_protect
 endfunction
 
 function expanded = simple_see_also (args)
