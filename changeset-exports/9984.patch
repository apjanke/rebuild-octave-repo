# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1260816611 18000
#      Mon Dec 14 13:50:11 2009 -0500
# Node ID d1cc2e0ddf55807ee3b252c00d5ec20b54d62028
# Parent  2d347a2f4a0a85f036360f579d65edb15dc88539
isprime: produce logical result

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-12-14  John W. Eaton  <jwe@octave.org>
+
+	* specfun/isprime.m: Produce logical result.  Error if nargin > 1.
+	New tests.
+
 2009-12-14  John W. Eaton  <jwe@octave.org>
 
 	* help/__makeinfo__.m: Use fullfile to concatenate file name
 	components.  Use hyphens instead of underscores in tmp file name.
 
 2009-12-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* help/__makeinfo__.m: Use P_tmpdir to create temporary file.
diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000, 2006, 2007 Paul Kienzle
+## Copyright (C) 2000, 2006, 2007, 2009 Paul Kienzle
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -13,45 +13,51 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isprime (@var{n})
-##
 ## Return true if @var{n} is a prime number, false otherwise.
 ##
 ## Something like the following is much faster if you need to test a lot
 ## of small numbers:
 ##
 ## @example
-##    @var{t} = ismember (@var{n}, primes (max (@var{n} (:))));
+## @var{t} = ismember (@var{n}, primes (max (@var{n} (:))));
 ## @end example
 ##
 ## If max(n) is very large, then you should be using special purpose 
 ## factorization code.
 ##
 ## @seealso{primes, factor, gcd, lcm}
 ## @end deftypefn
 
 function t = isprime (n)
 
-  if (nargin < 1)
+  if (nargin == 1)
+    if (! isscalar (n))
+      nel = numel (n);
+      t = zeros (size (n), "logical");
+      for i = 1:nel
+        t(i) = isprime (n(i));
+      endfor
+    elseif (n != fix (n) || n < 2)
+      t = logical (0);
+    elseif (n < 9)
+      t = all (n != [4, 6, 8]);
+    else
+      q = n./[2, 3:2:sqrt(n)];
+      t = all (q != fix (q));
+    endif
+  else
     print_usage ();
   endif
 
-  if (! isscalar (n))
-    nel = numel (n);
-    t = n;
-    for i = 1:nel
-      t(i) = isprime (t(i));
-    endfor
-  elseif (n != fix (n) || n < 2)
-    t = 0;
-  elseif (n < 9)
-    t = all (n != [4, 6, 8]);
-  else
-    q = n./[2, 3:2:sqrt(n)];
-    t = all (q != fix (q));
-  endif
 endfunction
+
+%!assert (isprime (4), logical (0));
+%!assert (isprime (3), logical (1));
+%!assert (isprime (magic (3)), logical ([0, 0, 0; 1, 1, 1; 0, 0, 1]));
+%!error isprime ()
+%!error isprime (1, 2)
