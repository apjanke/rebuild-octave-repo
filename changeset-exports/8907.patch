# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236124327 18000
#      Tue Mar 03 18:52:07 2009 -0500
# Node ID 5a956c026b6cb703810db9f949a5ee382340a8df
# Parent  ab87d08d9a1b3d566f983f54b66567b386ba564e
preserve field order when saving structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-03-03  John W. Eaton  <jwe@octave.org>
 
+	* ov-struct.cc (octave_struct::save_ascii,
+	octave_struct::save_binary, octave_struct::save_hdf5):
+	Preserve order of structure fields.
+	* ls-mat5.cc (save_mat5_binary_element): Likewise.
+
 	* symtab.h (symbol_table::do_inherit): Only inherit values for
 	symbols from the donor_scope that already exist in the table.
 	(symbol_table::symbol_record::symbol_record_rep::dup): Now const.
 	(symbol_table::symbol_record::operator=): Decrement rep->count and
 	maybe delete rep.
 	(symbol_table::fcn_info::operator=): Likewise.
 
 	* pt-fcn-handle.cc: (tree_anon_fcn_handle::dup): Transform
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -2182,43 +2182,51 @@ save_mat5_binary_element (std::ostream& 
       else
 	m = tc.map_value ();
 
       // an Octave structure */
       // recursively write each element of the structure
       {
 	char buf[64];
 	int32_t maxfieldnamelength = max_namelen + 1;
-	int fieldcnt = 0;
 
-	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
-	  fieldcnt++;
+	octave_idx_type nf = m.nfields ();
+
+	int fieldcnt = nf;
 
 	write_mat5_tag (os, miINT32, 4);
 	os.write (reinterpret_cast<char *> (&maxfieldnamelength), 4);
 	write_mat5_tag (os, miINT8, fieldcnt*maxfieldnamelength);
 
-	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
+	// Iterating over the list of keys will preserve the order of
+	// the fields.
+	string_vector keys = m.keys ();
+
+	for (octave_idx_type i = 0; i < nf; i++)
 	  {
+	    std::string key = keys(i);
+
 	    // write the name of each element
-	    std::string tstr = m.key (i);
 	    memset (buf, 0, max_namelen + 1);
-	    strncpy (buf, tstr.c_str (), max_namelen); // only 31 or 63 char names permitted
+	    // only 31 or 63 char names permitted
+	    strncpy (buf, key.c_str (), max_namelen);
 	    os.write (buf, max_namelen + 1);
 	  }
 
 	int len = m.numel ();
 
 	for (int j = 0; j < len; j++)
 	  {
 	    // write the data of each element
 
-	    for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
+	    // Iterating over the list of keys will preserve the order
+	    // of the fields.
+	    for (octave_idx_type i = 0; i < nf; i++)
 	      {
-		Cell elts = m.contents (i);
+		Cell elts = m.contents (keys(i));
 
 		bool retval2 = save_mat5_binary_element (os, elts(j), "",
 							 mark_as_global,
 							 false, 
 							 save_as_floats);
 		if (! retval2)
 		  goto error_cleanup;
 	      }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1197,29 +1197,35 @@ named fields.\n\
 
   return retval;
 }
 
 bool
 octave_struct::save_ascii (std::ostream& os)
 {
   Octave_map m = map_value ();
-  os << "# length: " << m.nfields () << "\n";
+
+  octave_idx_type nf = m.nfields ();
+
+  os << "# length: " << nf << "\n";
 
-  Octave_map::iterator i = m.begin ();
-  while (i != m.end ())
+  // Iterating over the list of keys will preserve the order of the
+  // fields.
+  string_vector keys = m.keys ();
+
+  for (octave_idx_type i = 0; i < nf; i++)
     {
-      octave_value val = map.contents (i);
+      std::string key = keys(i);
 
-      bool b = save_ascii_data (os, val, m.key (i), false, 0);
+      octave_value val = map.contents (key);
+
+      bool b = save_ascii_data (os, val, key, false, 0);
       
       if (! b)
 	return os;
-
-      i++;
     }
 
   return true;
 }
 
 bool 
 octave_struct::load_ascii (std::istream& is)
 {
@@ -1276,30 +1282,35 @@ octave_struct::load_ascii (std::istream&
   return success;
 }
 
 bool 
 octave_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   Octave_map m = map_value ();
 
-  int32_t len = m.nfields ();
+  octave_idx_type nf = m.nfields ();
+
+  int32_t len = nf;
   os.write (reinterpret_cast<char *> (&len), 4);
-  
-  Octave_map::iterator i = m.begin ();
-  while (i != m.end ())
+
+  // Iterating over the list of keys will preserve the order of the
+  // fields.
+  string_vector keys = m.keys ();
+
+  for (octave_idx_type i = 0; i < nf; i++)
     {
-      octave_value val = map.contents (i);
+      std::string key = keys(i);
 
-      bool b = save_binary_data (os, val, m.key (i), "", 0, save_as_floats);
+      octave_value val = map.contents (key);
+
+      bool b = save_binary_data (os, val, key, "", 0, save_as_floats);
       
       if (! b)
 	return os;
-
-      i++;
     }
 
   return true;
 }
 
 bool 
 octave_struct::load_binary (std::istream& is, bool swap,
 			    oct_mach_info::float_format fmt)
@@ -1362,28 +1373,34 @@ octave_struct::save_hdf5 (hid_t loc_id, 
 {
   hid_t data_hid = -1;
 
   data_hid = H5Gcreate (loc_id, name, 0);
   if (data_hid < 0) return false;
 
   // recursively add each element of the structure to this group
   Octave_map m = map_value ();
-  Octave_map::iterator i = m.begin ();
-  while (i != m.end ())
+
+  octave_idx_type nf = m.nfields ();
+
+  // Iterating over the list of keys will preserve the order of the
+  // fields.
+  string_vector keys = m.keys ();
+
+  for (octave_idx_type i = 0; i < nf; i++)
     {
-      octave_value val = map.contents (i);
+      std::string key = keys(i);
 
-      bool retval2 = add_hdf5_data (data_hid, val, m.key (i), "", false, 
+      octave_value val = map.contents (key);
+
+      bool retval2 = add_hdf5_data (data_hid, val, key, "", false, 
 				    save_as_floats);
 
       if (! retval2)
 	break;
-
-      i++;
     }
 
   H5Gclose (data_hid);
 
   return true;
 }
 
 bool 
@@ -1398,16 +1415,19 @@ octave_struct::load_hdf5 (hid_t loc_id, 
   Octave_map m (dim_vector (1, 1));
   int current_item = 0;
 #ifdef HAVE_H5GGET_NUM_OBJS
   hsize_t num_obj = 0;
   hid_t group_id = H5Gopen (loc_id, name); 
   H5Gget_num_objs (group_id, &num_obj);
   H5Gclose (group_id);
 
+  // FIXME -- fields appear to be sorted alphabetically on loading.
+  // Why is that happening?
+
   while (current_item < static_cast<int> (num_obj)
 	 && (retval2 = H5Giterate (loc_id, name, &current_item,
 				   hdf5_read_next_data, &dsub)) > 0)
 #else
   while ((retval2 = H5Giterate (loc_id, name, &current_item,
 				hdf5_read_next_data, &dsub)) > 0)
 #endif
     {
