# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235506119 18000
#      Tue Feb 24 15:08:39 2009 -0500
# Node ID 31f86487724662b579c219abe9d4383a6e90ac32
# Parent  257ed585b4712acf8bc6950afe1e677d5111495c
doc and lookfor fixes

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,13 @@
 2009-02-24  John W. Eaton  <jwe@octave.org>
 
+	* run-octave.in (DOCFILE): New variable.  Pass --doc-cache-file
+	option to Octave.
+
 	* configure.in: Copy Makefile to build directory if not building
 	in srcdir.
 
 2009-02-24  Thorsten Meyer  <thorsten@hexe>
 
 	* configure.in: AC_SUBST ac_config_files.
 	* Makeconf.in (config_opts): Define CONFIG_SUBDIRS variable.
 	* Makefile: Add make target for configuration files.
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -46,16 +46,17 @@ d4_list=`$FIND "$d4" -type d -a ! \( \( 
 
 d1_path=`echo "$d1_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 d2_path=`echo "$d2_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 d3_path=`echo "$d3_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 d4_path=`echo "$d4_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 
 LOADPATH="$d1_path:$d2_path:$d3_path:$d4_path"
 IMAGEPATH="$top_srcdir/scripts/image"
+DOCFILE="$builddir/doc/interpreter/DOC"
 INFOFILE="$builddir/doc/interpreter/octave.info"
 
 if [ $# -gt 0 ]; then
   if [ "x$1" = "x-g" ]; then
     driver="gdb --args"
     shift
   elif [ "x$1" = "x-valgrind" ]; then
     driver="valgrind --tool=memcheck"
@@ -64,10 +65,10 @@ if [ $# -gt 0 ]; then
     driver="strace -o octave.trace"
     shift
   fi
 fi
 
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
 LD_PRELOAD="$liboctinterp $liboctave $libcruft" \
 %library_path_var%="$builddir/src:$builddir/liboctave:$builddir/libcruft:$%library_path_var%" \
-  exec $driver "$builddir/src/octave" --no-initial-path --path="$LOADPATH" --image-path="$IMAGEPATH" --info-file="$INFOFILE" "$@"
+  exec $driver "$builddir/src/octave" --no-initial-path --path="$LOADPATH" --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" --info-file="$INFOFILE" "$@"
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-02-24  John W. Eaton  <jwe@octave.org>
+
+	* help/gen_doc_cache.m: Don't compress output file.  By default,
+	write to DOC, not DOC.gz.
+	* help/lookfor.m: Use doc_cache_file to get location of DOC file.
+
 2009-02-24  Jason Riedy  <jason@acm.org>
 
 	* help/gen_doc_cache.m: Call __makeinfo__, not makeinfo.
 
 2009-02-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Update niter after each iteration, not just
 	a succesful one.
diff --git a/scripts/help/gen_doc_cache.m b/scripts/help/gen_doc_cache.m
--- a/scripts/help/gen_doc_cache.m
+++ b/scripts/help/gen_doc_cache.m
@@ -23,33 +23,33 @@
 ## The cache is used to speed up @code{lookfor}.
 ##
 ## If no directory is given (or it is the empty matrix), a cache for builtin
 ## operators, etc. is generated.
 ##
 ## @seealso{lookfor, path}
 ## @end deftypefn
 
-function gen_doc_cache (out_file = "DOC.gz", directory = [])
+function gen_doc_cache (out_file = "DOC", directory = [])
   ## Check input
   if (!ischar (out_file))
     print_usage ();
   endif
   
   ## Generate cache
   if (isempty (directory))
     cache = gen_builtin_cache ();
   elseif (ischar (directory))
     cache = gen_doc_cache_in_dir (directory);
   else
     error ("gen_doc_cache: second input argument must be a string");
   endif
   
   ## Save cache
-  save ("-text", "-z", out_file, "cache");
+  save ("-text", out_file, "cache");
 endfunction
 
 function [text, first_sentence, status] = handle_function (f, text, format)
   first_sentence = "";
   ## Skip functions that start with __ as these shouldn't be searched by lookfor
   if (length (f) > 2 && all (f (1:2) == "_"))
     status = 1;
     return;
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -48,17 +48,17 @@ function [out_fun, out_help_text] = look
     str = extra;
     search_type = 2; # when using caches, search its second column
   else
     search_type = 3; # when using caches, search its third column
   endif
   str = lower (str);
 
   ## Search functions, operators, and keywords that come with Octave
-  cache_file = fullfile (octave_config_info.datadir, "etc", "DOC");
+  cache_file = doc_cache_file ();
   if (exist (cache_file, "file"))
     [fun, help_text] = search_cache (str, cache_file, search_type);
     had_core_cache = true;
   else
     fun = help_text = {};
     had_core_cache = false;
   endif
   
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-02-24  John W. Eaton  <jwe@octave.org>
+
+	* help.cc, help.h (Vdoc_cache_file): New global variable.
+	(Fdoc_cache_file): New function.
+	* octave.cc (DOC_CACHE_FILE_OPTION): New option tag.
+	(long_opts): Include doc-cache-file in the list.
+	(octave_main): Handle DOC_CACHE_FILE_OPTION.
+
 2009-02-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-scalar.h 
 	(octave_scalar::int8_scalar_value): New method.
 	(octave_scalar::int16_scalar_value): New method.
 	(octave_scalar::int32_scalar_value): New method.
 	(octave_scalar::int64_scalar_value): New method.
 	(octave_scalar::uint8_scalar_value): New method.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -67,16 +67,20 @@ along with Octave; see the file COPYING.
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "quit.h"
 
+// Name of the doc cache file specified on the command line.
+// (--doc-cache-file file)
+std::string Vdoc_cache_file;
+
 // Name of the info file specified on command line.
 // (--info-file file)
 std::string Vinfo_file;
 
 // Name of the info reader we'd like to use.
 // (--info-program program)
 std::string Vinfo_program;
 
@@ -985,16 +989,28 @@ Undocumented internal function.\n\
 
           retval.append (octave_value (C));
         }
     }  
 
   return retval;
 }
 
+DEFUN (doc_cache_file, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{val} =} doc_cache_file ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} doc_cache_file (@var{new_val})\n\
+Query or set the internal variable that specifies the name of the\n\
+Octave DOC file.  The default value is @code{\"@var{octetcdir}/DOC\"}.\n\
+@seealso{info_program, doc, help, makeinfo_program}\n\
+@end deftypefn")
+{
+  return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (doc_cache_file);
+}
+
 DEFUN (info_file, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} info_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} info_file (@var{new_val})\n\
 Query or set the internal variable that specifies the name of the\n\
 Octave info file.  The default value is\n\
 @code{\"@var{octave-home}/info/octave.info\"}, in\n\
 which @var{octave-home} is the directory where all of Octave is installed.\n\
diff --git a/src/help.h b/src/help.h
--- a/src/help.h
+++ b/src/help.h
@@ -28,16 +28,20 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class string_vector;
 
 extern string_vector make_name_list (void);
 
 extern OCTINTERP_API std::string raw_help (const std::string&, bool&);
 
+// Name of the doc cache file specified on the command line.
+// (--doc-cache-file file)
+extern std::string Vdoc_cache_file;
+
 // Name of the info file specified on command line.
 // (--info-file file)
 extern std::string Vinfo_file;
 
 // Name of the info reader we'd like to use.
 // (--info-program program)
 extern std::string Vinfo_program;
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -138,32 +138,34 @@ static const char *short_opts = "+?HVdfh
 // The code to evaluate at startup (--eval CODE)
 static std::string code_to_eval;
 
 // If TRUE, don't exit after evaluating code given by --eval option.
 static bool persist = false;
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
-#define EVAL_OPTION 1
-#define EXEC_PATH_OPTION 2
-#define IMAGE_PATH_OPTION 3
-#define INFO_FILE_OPTION 4
-#define INFO_PROG_OPTION 5
-#define NO_INIT_FILE_OPTION 6
-#define NO_LINE_EDITING_OPTION 7
-#define NO_SITE_FILE_OPTION 8
-#define NO_INITIAL_PATH_OPTION 9
-#define PERSIST_OPTION 10
-#define TRADITIONAL_OPTION 11
-#define LINE_EDITING_OPTION 12
+#define DOC_CACHE_FILE_OPTION 1
+#define EVAL_OPTION 2
+#define EXEC_PATH_OPTION 3
+#define IMAGE_PATH_OPTION 4
+#define INFO_FILE_OPTION 5
+#define INFO_PROG_OPTION 6
+#define NO_INIT_FILE_OPTION 7
+#define NO_LINE_EDITING_OPTION 8
+#define NO_SITE_FILE_OPTION 9
+#define NO_INITIAL_PATH_OPTION 10
+#define PERSIST_OPTION 11
+#define TRADITIONAL_OPTION 12
+#define LINE_EDITING_OPTION 13
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
+    { "doc-cache-file",   prog_args::required_arg, 0, DOC_CACHE_FILE_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "eval",             prog_args::required_arg, 0, EVAL_OPTION },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
     { "image-path",       prog_args::required_arg, 0, IMAGE_PATH_OPTION },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
@@ -679,16 +681,21 @@ octave_main (int argc, char **argv, int 
 	    bind_internal_variable ("echo_executing_commands", tmp);
 	  }
 	  break;
 
 	case 'v':
 	  print_version_and_exit ();
 	  break;
 
+	case DOC_CACHE_FILE_OPTION:
+	  if (args.optarg ())
+	    bind_internal_variable ("doc_cache_file", args.optarg ());
+	  break;
+
 	case EVAL_OPTION:
 	  if (args.optarg ())
 	    {
 	      if (code_to_eval.empty ())
 		code_to_eval = args.optarg ();
 	      else
 		code_to_eval += std::string (" ") + args.optarg ();
 	    }
