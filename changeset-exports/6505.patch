# HG changeset patch
# User jwe
# Date 1175875898 0
#      Fri Apr 06 16:11:38 2007 +0000
# Node ID c7901606ba7023d8d7503c88e1d2eea9ab7be0f7
# Parent  7e9a548e8ddfa5e45df26dbc3bbff70f8fffff56
[project @ 2007-04-06 16:11:38 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2007-04-06  John W. Eaton  <jwe@octave.org>
+
+	* pt-fcn-handle.cc (tree_anon_fcn_handle::param_list, 
+	tree_anon_fcn_handle::cmd_list,	tree_anon_fcn_handle::ret_list,
+	tree_anon_fcn_handle::sym_tab): Delete.  Remove all uses.
+	(tree_anon_fcn_handle::fcn): New data member.
+	(tree_anon_fcn_handle::tree_anon_fcn_handle): Initialize it.
+	(tree_anon_fcn_handle::rvalue, tree_anon_fcn_handle::dup):
+	Extract parameter list, return list, function body, and symbol
+	table from fcn.
+	(tree_anon_fcn_handle::parameter_list, tree_anon_fcn_handle::body):
+	Forward request to fcn.
+
+	* ov-usr-fcn.h (octave_user_function::local_sym_tab): Rename from
+	sym_tab.  Change all uses.
+	(octave_user_function::sym_tab): New function.
+
+	* octave.cc (execute_command_line_file): 
+
 2007-04-05  David Bateman <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc (Fregexprep): Correct iteration over 
 	cell arrays so that the source and pattern are iterated seperately 
 	in the same manner as matlab.
 
 2007-04-05  Laurent Mazet <laurent.mazet@motorola.com>
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -68,33 +68,33 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
-    sym_tab (st), lead_comm (), trail_comm (), file_name (),
+    local_sym_tab (st), lead_comm (), trail_comm (), file_name (),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0), num_named_args (0),
     nested_function (false), inline_function (false), args_passed (),
     num_args_passed (0), symtab_entry (0), argn_sr (0),
     nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
   if (param_list)
     num_named_args = param_list->length ();
 }
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
   delete ret_list;
-  delete sym_tab;
+  delete local_sym_tab;
   delete cmd_list;
   delete lead_comm;
   delete trail_comm;
 }
 
 octave_user_function *
 octave_user_function::define_ret_list (tree_parameter_list *t)
 {
@@ -272,34 +272,34 @@ octave_user_function::do_multi_index_op 
   if (symtab_entry && ! symtab_entry->is_read_only ())
     {
       symtab_entry->protect ();
       unwind_protect::add (unprotect_function, symtab_entry);
     }
 
   if (call_depth > 1)
     {
-      sym_tab->push_context ();
-      unwind_protect::add (pop_symbol_table_context, sym_tab);
+      local_sym_tab->push_context ();
+      unwind_protect::add (pop_symbol_table_context, local_sym_tab);
     }
 
   install_automatic_vars ();
 
   // Force symbols to be undefined again when this function exits.
 
-  unwind_protect::add (clear_symbol_table, sym_tab);
+  unwind_protect::add (clear_symbol_table, local_sym_tab);
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   unwind_protect_ptr (curr_caller_sym_tab);
   curr_caller_sym_tab = curr_sym_tab;
 
   unwind_protect_ptr (curr_sym_tab);
-  curr_sym_tab = sym_tab;
+  curr_sym_tab = local_sym_tab;
 
   unwind_protect_ptr (curr_caller_statement);
   curr_caller_statement = curr_statement;
 
   octave_call_stack::push (this);
 
   unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
@@ -376,17 +376,17 @@ octave_user_function::do_multi_index_op 
     // Copy return values out.
 
     if (ret_list)
       {
 	ret_list->initialize_undefined_elements (my_name, nargout, Matrix ());
 
 	Cell varargout;
 
-	symbol_record *sr = sym_tab->lookup ("varargout");
+	symbol_record *sr = local_sym_tab->lookup ("varargout");
 
 	if (sr && sr->is_variable ())
 	  {
 	    octave_value v = sr->def ();
 
 	    varargout = v.cell_value ();
 
 	    if (error_state)
@@ -431,18 +431,18 @@ void
 octave_user_function::accept (tree_walker& tw)
 {
   tw.visit_octave_user_function (*this);
 }
 
 void
 octave_user_function::print_symtab_info (std::ostream& os) const
 {
-  if (sym_tab)
-    sym_tab->print_info (os);
+  if (local_sym_tab)
+    local_sym_tab->print_info (os);
   else
     warning ("%s: no symbol table info!", my_name.c_str ());
 }
 
 void
 octave_user_function::print_code_function_header (void)
 {
   tree_print_code tpc (octave_stdout, VPS4);
@@ -456,24 +456,24 @@ octave_user_function::print_code_functio
   tree_print_code tpc (octave_stdout, VPS4);
 
   tpc.visit_octave_user_function_trailer (*this);
 }
 
 void
 octave_user_function::install_automatic_vars (void)
 {
-  if (sym_tab)
+  if (local_sym_tab)
     {
-      argn_sr = sym_tab->lookup ("argn", true);
-      nargin_sr = sym_tab->lookup ("__nargin__", true);
-      nargout_sr = sym_tab->lookup ("__nargout__", true);
+      argn_sr = local_sym_tab->lookup ("argn", true);
+      nargin_sr = local_sym_tab->lookup ("__nargin__", true);
+      nargout_sr = local_sym_tab->lookup ("__nargout__", true);
 
       if (takes_varargs ())
-	varargin_sr = sym_tab->lookup ("varargin", true);
+	varargin_sr = local_sym_tab->lookup ("varargin", true);
     }
 }
 
 void
 octave_user_function::bind_automatic_vars
   (const string_vector& arg_names, int nargin, int nargout,
    const octave_value_list& va_args)
 {
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -190,16 +190,18 @@ public:
   void traceback_error (void) const;
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
 
+  symbol_table *sym_tab (void) { return local_sym_tab; }
+
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   void accept (tree_walker& tw);
 
   void print_symtab_info (std::ostream& os) const;
 
@@ -211,17 +213,17 @@ private:
   // List of parameters we return.  These are also local variables in
   // this function.
   tree_parameter_list *ret_list;
 
   // The list of commands that make up the body of this function.
   tree_statement_list *cmd_list;
 
   // The local symbol table for this function.
-  symbol_table *sym_tab;
+  symbol_table *local_sym_tab;
 
   // The comments preceding the FUNCTION token.
   octave_comment_list *lead_comm;
 
   // The comments preceding the ENDFUNCTION token.
   octave_comment_list *trail_comm;
 
   // The name of the file we parsed.
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
--- a/src/pt-fcn-handle.cc
+++ b/src/pt-fcn-handle.cc
@@ -67,44 +67,41 @@ tree_fcn_handle::rvalue (int nargout)
     error ("invalid number of output arguments for function handle expression");
   else
     retval = rvalue ();
 
   return retval;
 }
 
 tree_expression *
-tree_fcn_handle::dup (symbol_table *sym_tab)
+tree_fcn_handle::dup (symbol_table *)
 {
   tree_fcn_handle *new_fh = new tree_fcn_handle (nm, line (), column ());
 
   new_fh->copy_base (*this);
 
   return new_fh;
 }
 
 void
 tree_fcn_handle::accept (tree_walker& tw)
 {
   tw.visit_fcn_handle (*this);
 }
 
-tree_anon_fcn_handle::~tree_anon_fcn_handle (void)
-{
-  delete param_list;
-  delete cmd_list;
-  delete ret_list;
-  delete sym_tab;
-}
-
 octave_value
 tree_anon_fcn_handle::rvalue (void)
 {
   MAYBE_DO_BREAKPOINT;
 
+  tree_parameter_list *param_list = fcn.parameter_list ();
+  tree_parameter_list *ret_list = fcn.return_list ();
+  tree_statement_list *cmd_list = fcn.body ();
+  symbol_table *sym_tab = fcn.sym_tab ();
+
   symbol_table *new_sym_tab = sym_tab ? sym_tab->dup () : 0;
 
   if (new_sym_tab)
     new_sym_tab->inherit (curr_sym_tab);
 
   tree_parameter_list *new_param_list
     = param_list ? param_list->dup (new_sym_tab) : 0;
 
@@ -115,19 +112,19 @@ tree_anon_fcn_handle::rvalue (void)
     = ret_list ? ret_list->dup (new_sym_tab) : 0;
 
   octave_user_function *uf
     = new octave_user_function (new_param_list, new_ret_list,
 				new_cmd_list, new_sym_tab);
 
   uf->mark_as_inline_function ();
 
-  octave_value fcn (uf);
+  octave_value ov_fcn (uf);
 
-  octave_value fh (new octave_fcn_handle (fcn, "@<anonymous>"));
+  octave_value fh (new octave_fcn_handle (ov_fcn, "@<anonymous>"));
 
   return fh;
 }
 
 octave_value_list
 tree_anon_fcn_handle::rvalue (int nargout)
 {
   octave_value_list retval;
@@ -138,16 +135,21 @@ tree_anon_fcn_handle::rvalue (int nargou
     retval = rvalue ();
 
   return retval;
 }
 
 tree_expression *
 tree_anon_fcn_handle::dup (symbol_table *st)
 {
+  tree_parameter_list *param_list = fcn.parameter_list ();
+  tree_parameter_list *ret_list = fcn.return_list ();
+  tree_statement_list *cmd_list = fcn.body ();
+  symbol_table *sym_tab = fcn.sym_tab ();
+
   symbol_table *new_sym_tab = sym_tab ? sym_tab->dup () : 0;
 
   if (new_sym_tab)
     new_sym_tab->inherit (st);
 
   tree_anon_fcn_handle *new_afh
     = new tree_anon_fcn_handle (param_list ? param_list->dup (new_sym_tab) : 0,
 				ret_list ? ret_list->dup (new_sym_tab) : 0,
diff --git a/src/pt-fcn-handle.h b/src/pt-fcn-handle.h
--- a/src/pt-fcn-handle.h
+++ b/src/pt-fcn-handle.h
@@ -32,16 +32,17 @@ 02110-1301, USA.
 #include "pt-misc.h"
 #include "pt-stmt.h"
 
 class octave_value_list;
 
 class tree_walker;
 
 #include "ov.h"
+#include "ov-usr-fcn.h"
 
 class
 tree_fcn_handle : public tree_expression
 {
 public:
 
   tree_fcn_handle (int l = -1, int c = -1)
     : tree_expression (l, c), nm () { }
@@ -84,56 +85,45 @@ private:
 };
 
 class
 tree_anon_fcn_handle : public tree_expression
 {
 public:
 
   tree_anon_fcn_handle (int l = -1, int c = -1)
-    : tree_expression (l, c), param_list (0), cmd_list (0),
-      ret_list (0), sym_tab (0) { }
+    : tree_expression (l, c), fcn () { }
 
-  tree_anon_fcn_handle (tree_parameter_list *p, tree_parameter_list *r,
+  tree_anon_fcn_handle (tree_parameter_list *pl, tree_parameter_list *rl,
 			tree_statement_list *cl, symbol_table *st,
 			int l = -1, int c = -1)
-    : tree_expression (l, c), param_list (p), cmd_list (cl),
-      ret_list (r), sym_tab (st) { }
+    : tree_expression (l, c), fcn (pl, rl, cl, st) { }
 
-  ~tree_anon_fcn_handle (void);
+  ~tree_anon_fcn_handle (void) { }
 
   bool has_magic_end (void) const { return false; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
-  tree_parameter_list *parameter_list (void) { return param_list; }
+  tree_parameter_list *parameter_list (void) { return fcn.parameter_list (); }
 
-  tree_statement_list *body (void) { return cmd_list; }
+  tree_statement_list *body (void) { return fcn.body (); }
 
   tree_expression *dup (symbol_table *sym_tab);
 
   void accept (tree_walker& tw);
 
 private:
 
-  // The parameter list.
-  tree_parameter_list *param_list;
-
-  // The statement that makes up the body of the function.
-  tree_statement_list *cmd_list;
-
-  // The list of return values.
-  tree_parameter_list *ret_list;
-
-  // The symbol table.
-  symbol_table *sym_tab;
+  // The function.
+  octave_user_function fcn;
 
   // No copying!
 
   tree_anon_fcn_handle (const tree_anon_fcn_handle&);
 
   tree_anon_fcn_handle& operator = (const tree_anon_fcn_handle&);
 };
 
