# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511759164 28800
#      Sun Nov 26 21:06:04 2017 -0800
# Node ID 0d4db91b72999d8e1c50af2143fd6682e00cdcc7
# Parent  7ba994876f3a27d864db490982ad3a06f37753a9
# Parent  67891285578929d22473bb17a9c30eb231fcc6fb
maint: periodic merge of stable to default.

diff --git a/scripts/plot/draw/trimesh.m b/scripts/plot/draw/trimesh.m
--- a/scripts/plot/draw/trimesh.m
+++ b/scripts/plot/draw/trimesh.m
@@ -34,19 +34,20 @@
 ## height above the plane of each vertex.  If no @var{z} input is given then
 ## the triangles are plotted as a 2-D figure.
 ##
 ## The color of the trimesh is computed by linearly scaling the @var{z} values
 ## to fit the range of the current colormap.  Use @code{caxis} and/or
 ## change the colormap to control the appearance.
 ##
 ## Optionally, the color of the mesh can be specified independently of @var{z}
-## by supplying a color matrix, @var{c}.  If @var{z} has N elements, then
-## @var{c} should be an Nx1 vector for colormap data or an Nx3 matrix for
-## RGB data.
+## by supplying @var{c}, which is a vector for colormap data, or a matrix with
+## three columns for RGB data.  The number of colors specified in @var{c} must
+## either equal the number of vertices in @var{z} or the number of triangles
+## in @var{tri}.
 ##
 ## Any property/value pairs are passed directly to the underlying patch object.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ## @seealso{mesh, tetramesh, triplot, trisurf, delaunay, patch, hidden}
 ## @end deftypefn
 
@@ -61,34 +62,35 @@ function h = trimesh (tri, x, y, z, vara
   elseif (ischar (z))
     htmp = triplot (tri, x, y, z, varargin{:});
   else
     ## Process color argument
     if (nargin > 4 && isnumeric (varargin{1}))
       c = varargin{1};
       varargin(1) = [];
       if (isvector (c))
-        if (numel (c) != numel (z))
-          error ("trimesh: C must have 'numel (Z)' elements");
-        endif
         c = c(:);
-      elseif (rows (c) != numel (z) || columns (c) != 3)
-        error ("trimesh: TrueColor C matrix must be 'numel (Z)' rows by 3 columns");
+      end
+      if (rows (c) != numel (z) && rows (c) != rows (tri))
+        error ("trimesh: the numbers of colors specified in C must equal the number of vertices in Z or the number of triangles in TRI");
+      elseif (columns (c) != 1 && columns (c) != 3)
+        error ("trimesh: TrueColor C matrix must have 3 columns");
       endif
     else
       c = z(:);
     endif
 
     hax = newplot ();
 
     ## Tag object as "trimesh" so that hidden() can find it.
-    htmp = patch ("Vertices", [x(:), y(:), z(:)], "Faces", tri,
+    htmp = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
                   "FaceVertexCdata", c, "EdgeColor", "flat", "FaceColor", "w",
                   "FaceLighting", "none", "EdgeLighting", "flat",
                   "Tag", "trimesh", varargin{:});
+
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
                 "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
   endif
 
   if (nargout > 0)
     h = htmp;
@@ -109,12 +111,13 @@ endfunction
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trimesh (tri, x(:), y(:), z(:));
 
 ## Test input validation
 %!error trimesh ()
 %!error trimesh (1)
 %!error trimesh (1,2)
-%!error <C must have 'numel \(Z\)' elements> trimesh (1,2,3,4,[5 6])
-%!error <C must have 'numel \(Z\)' elements> trimesh (1,2,3,4,[5 6]')
-%!error <TrueColor C matrix must> trimesh ([1;1],[2;2],[3;3],[4;4],zeros(3,3))
-%!error <TrueColor C matrix must> trimesh ([1;1],[2;2],[3;3],[4;4],zeros(2,2))
+%!error <the numbers of colors> trimesh (1,2,3,4,[5 6])
+%!error <the numbers of colors> trimesh (1,2,3,4,[5 6]')
+%!error <the numbers of colors> trimesh ([1;1],[2;2],[3;3],[4;4], zeros (3,3))
+%!error <TrueColor C matrix must have 3 columns>
+%! trimesh ([1;1],[2;2],[3;3],[4;4],zeros (2,2))
diff --git a/scripts/plot/draw/trisurf.m b/scripts/plot/draw/trisurf.m
--- a/scripts/plot/draw/trisurf.m
+++ b/scripts/plot/draw/trisurf.m
@@ -23,28 +23,32 @@
 ## @deftypefnx {} {@var{h} =} trisurf (@dots{})
 ## Plot a 3-D triangular surface.
 ##
 ## In contrast to @code{surf}, which plots a surface mesh using rectangles,
 ## @code{trisurf} plots the mesh using triangles.
 ##
 ## @var{tri} is typically the output of a Delaunay triangulation over the
 ## grid of @var{x}, @var{y}.  Every row of @var{tri} represents one triangle
-## and contains three indices into [@var{x}, @var{y}] which are the
-## vertices of the triangles in the x-y plane.  @var{z} determines the
-## height above the plane of each vertex.
+## and contains three indices into [@var{x}, @var{y}] which are the vertices of
+## the triangles in the x-y plane.  @var{z} determines the height above the
+## plane of each vertex.
 ##
-## The color of the trimesh is computed by linearly scaling the @var{z} values
-## to fit the range of the current colormap.  Use @code{caxis} and/or
-## change the colormap to control the appearance.
+## The color of the trisurf is computed by linearly scaling the @var{z} values
+## to fit the range of the current colormap.  Use @code{caxis} and/or change
+## the colormap to control the appearance.
 ##
 ## Optionally, the color of the mesh can be specified independently of @var{z}
-## by supplying a color matrix, @var{c}.  If @var{z} has N elements, then
-## @var{c} should be an Nx1 vector for colormap data or an Nx3 matrix for
-## RGB data.
+## by supplying @var{c}, which is a vector for colormap data, or a matrix with
+## three columns for RGB data.  The number of colors specified in @var{c} must
+## either equal the number of vertices in @var{z} or the number of triangles
+## in @var{tri}.  When specifying the color at each vertex the triangle will
+## be colored according to the color of the first vertex only (see patch
+## documentation and the @qcode{"FaceColor"} property when set to
+## @qcode{"flat"}).
 ##
 ## Any property/value pairs are passed directly to the underlying patch object.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ## @seealso{surf, triplot, trimesh, delaunay, patch, shading}
 ## @end deftypefn
 
@@ -53,22 +57,22 @@ function h = trisurf (tri, x, y, z, vara
   if (nargin < 4)
     print_usage ();
   endif
 
   if (nargin > 4 && isnumeric (varargin{1}))
     c = varargin{1};
     varargin(1) = [];
     if (isvector (c))
-      if (numel (c) != numel (z))
-        error ("trisurf: C must have 'numel (Z)' elements");
-      endif
       c = c(:);
-    elseif (rows (c) != numel (z) || columns (c) != 3)
-      error ("trisurf: TrueColor C matrix must be 'numel (Z)' rows by 3 columns");
+    end
+    if (rows (c) != numel (z) && rows (c) != rows (tri))
+      error ("trisurf: the numbers of colors specified in C must equal the number of vertices in Z or the number of triangles in TRI");
+    elseif (columns (c) != 1 && columns (c) != 3)
+      error ("trisurf: TrueColor C matrix must have 3 columns");
     endif
   else
     c = z(:);
   endif
   ## For Matlab compatibility:
   if (! any (strcmpi (varargin, "FaceColor")))
     varargin(end+(1:2)) = {"FaceColor", "flat"};
   endif
@@ -156,12 +160,13 @@ endfunction
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z, "facecolor", "interp", "edgecolor", "k");
 
 ## Test input validation
 %!error trisurf ()
 %!error trisurf (1)
 %!error trisurf (1,2)
 %!error trisurf (1,2,3)
-%!error <C must have 'numel \(Z\)' elements> trisurf (1,2,3,4,[5 6])
-%!error <C must have 'numel \(Z\)' elements> trisurf (1,2,3,4,[5 6]')
-%!error <TrueColor C matrix must> trisurf ([1;1],[2;2],[3;3],[4;4],zeros(3,3))
-%!error <TrueColor C matrix must> trisurf ([1;1],[2;2],[3;3],[4;4],zeros(2,2))
+%!error <the numbers of colors> trisurf (1,2,3,4,[5 6])
+%!error <the numbers of colors> trisurf (1,2,3,4,[5 6]')
+%!error <the numbers of colors> trisurf ([1;1],[2;2],[3;3],[4;4], zeros (3,3))
+%!error <TrueColor C matrix must have 3 columns>
+%! trisurf ([1;1],[2;2],[3;3],[4;4], zeros (2,2))
