# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216143262 14400
#      Tue Jul 15 13:34:22 2008 -0400
# Node ID 30b952e90c294c6601e8f812e8a746024f91fd5a
# Parent  f728089c9543b46a178a9cb2107d54eaa615e871
misc 64-bit fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-07-15  John W. Eaton  <jwe@octave.org>
+
+	* oct-sort.cc, oct-sort.h (octave_sort<T>::count_run): Declare
+	descending arg as bool&.
+	(octave_sort<T>::sort): Pass bool to count_run for descending arg.
+
 2008-07-11  John W. Eaton  <jwe@octave.org>
 
 	* dDiagMatrix.cc (DiagMatrix::diag): Return empty ColumnVector if
 	number of rows or columns is 0.
 	* fDiagMatrix.cc (FloatDiagMatrix::diag): Likewise.
 
 	* Array-util.cc (is_vector): Avoid GCC warning.
 	* Array-f.cc (Array<float>::sort): Likewise.
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -175,40 +175,40 @@ Return the length of the run beginning a
 is required on entry.  "A run" is the longest ascending sequence, with
 
     lo[0] <= lo[1] <= lo[2] <= ...
 
 or the longest descending sequence, with
 
     lo[0] > lo[1] > lo[2] > ...
 
-Boolean *descending is set to 0 in the former case, or to 1 in the latter.
+DESCENDING is set to false in the former case, or to true in the latter.
 For its intended use in a stable mergesort, the strictness of the defn of
 "descending" is needed so that the caller can safely reverse a descending
 sequence without violating stability (strict > ensures there are no equal
 elements to get out of order).
 
 Returns -1 in case of error.
 */
 template <class T>
 octave_idx_type
-octave_sort<T>::count_run (T *lo, T *hi, int *descending)
+octave_sort<T>::count_run (T *lo, T *hi, bool& descending)
 {
   octave_idx_type n;
 
-  *descending = 0;
+  descending = false;
   ++lo;
   if (lo == hi)
     return 1;
 
   n = 2;
 
   IFLT (*lo, *(lo-1))
     {
-      *descending = 1;
+      descending = true;
       for (lo = lo+1; lo < hi; ++lo, ++n) 
 	{
 	  IFLT (*lo, *(lo-1))
 	    ;
 	  else
 	    break;
 	}
     }
@@ -938,21 +938,21 @@ octave_sort<T>::sort (T *v, octave_idx_t
       T *hi = v + elements;
 
       /* March over the array once, left to right, finding natural runs,
        * and extending short natural runs to minrun elements.
        */
       octave_idx_type minrun = merge_compute_minrun (nremaining);
       do 
 	{
-	  int descending;
+	  bool descending;
 	  octave_idx_type n;
 
 	  /* Identify next run. */
-	  n = count_run (lo, hi, &descending);
+	  n = count_run (lo, hi, descending);
 	  if (n < 0)
 	    goto fail;
 	  if (descending)
 	    reverse_slice (lo, lo + n);
 	  /* If short, extend to min(minrun, nremaining). */
 	  if (n < minrun) 
 	    {
 	      const octave_idx_type force = nremaining <= minrun ? nremaining : minrun;
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -159,17 +159,17 @@ private:
   bool (*compare) (T, T);
   
   MergeState ms;
   
   void reverse_slice (T *lo, T *hi);
   
   void binarysort (T *lo, T *hi, T *start);
     
-  octave_idx_type count_run (T *lo, T *hi, octave_idx_type *descending);
+  octave_idx_type count_run (T *lo, T *hi, bool& descending);
 
   octave_idx_type gallop_left (T key, T *a, octave_idx_type n, octave_idx_type hint);
 
   octave_idx_type gallop_right (T key, T *a, octave_idx_type n, octave_idx_type hint);
 
   void merge_init (void);
 
   void merge_freemem (void);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-07-15  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__convn__.cc (convn): Cast second arg to
+	octave_idx_type in call to std::max.
+
 2008-07-14  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (convhulln.oct, __delaunayn__.oct, __voronoi__.oct, 
 	regexp.oct, urlwrite.oct, __glpk__.oct, fltk_backend.oct):
 	Simplify with target-specific settings for DL_LDFLAGS.
 
 	* DLD-FUNCTIONS/__magick_read__.cc: Delete "using namespace std"
 	and "using namespace Magick" directives.  Style fixes.
diff --git a/src/DLD-FUNCTIONS/__convn__.cc b/src/DLD-FUNCTIONS/__convn__.cc
--- a/src/DLD-FUNCTIONS/__convn__.cc
+++ b/src/DLD-FUNCTIONS/__convn__.cc
@@ -76,17 +76,18 @@ convn (const MTa& a, const MTb& b)
     {
       error ("__convn__: first and second argument must have same dimensionality");
       return retval;
     }
 
   // Allocate output
   dim_vector out_size (a_size);
   for (octave_idx_type n = 0; n < ndims; n++)
-    out_size(n) = std::max (a_size(n) - b_size(n) + 1, 0);
+    out_size(n) = std::max (a_size(n) - b_size(n) + 1,
+			    static_cast<octave_idx_type> (0));
 
   typedef typename octave_convn_traits<MTa, MTb>::TR MTout;
 
   MTout out (out_size);
 
   const octave_idx_type out_numel = out.numel ();
   
   // Iterate over every element of 'out'.
