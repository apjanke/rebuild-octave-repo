# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278493072 -7200
#      Wed Jul 07 10:57:52 2010 +0200
# Node ID 8a868004a4370064e8421ae434820683dfa36627
# Parent  2b041d3995a337ea90ce637662f9b4df5b1a2da8
use octave_map for octave_class

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-07-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-class.h (octave_class::map): Turn to octave_map.
+	* ov-class.cc (octave_class): Update methods.
+	* ov-base.h, ov-base.cc (octave_base_value::old_map_value) : Remove.
+	* ov.h, ov.cc (octave_value::old_map_value) : Remove.
+
 2010-07-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* toplev.cc (octave_call_stack::do_backtrace): Use static
 	octave_fields struct.
 	(octave_call_stack::empty_backtrace): New static method.
 	* toplev.h: Declare it.
 	* error.cc (Vlast_error_stack, initialize_last_error_stack,
 	Frethrow): Use octave_map or octave_scalar_map where applicable.
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -904,22 +904,16 @@ octave_base_value::scalar_map_value (voi
     {
       if (! error_state)
         error ("invalid conversion of multidimensional struct to scalar struct");
 
       return octave_scalar_map ();
     }
 }
 
-Octave_map
-octave_base_value::old_map_value (void) const
-{
-  return map_value ();
-}
-
 string_vector
 octave_base_value::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::map_keys()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -543,18 +543,16 @@ public:
   virtual Array<std::string> cellstr_value (void) const;
 
   virtual Range range_value (void) const;
 
   virtual octave_map map_value (void) const;
 
   virtual octave_scalar_map scalar_map_value (void) const;
 
-  virtual Octave_map old_map_value (void) const;
-
   virtual string_vector map_keys (void) const;
 
   virtual size_t nparents (void) const;
 
   virtual std::list<std::string> parent_class_name_list (void) const;
 
   virtual string_vector parent_class_names (void) const;
 
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -61,17 +61,17 @@ const std::string octave_class::t_name (
 
 void
 octave_class::register_type (void)
 {
   t_id = octave_value_typeinfo::register_type
     (octave_class::t_name, "<unknown>", octave_value (new octave_class ()));
 }
 
-octave_class::octave_class (const Octave_map& m, const std::string& id, 
+octave_class::octave_class (const octave_map& m, const std::string& id, 
                             const octave_value_list& parents)
   : octave_base_value (), map (m), c_name (id), obsolete_copies (0)
 {
   octave_idx_type n = parents.length ();
 
   for (octave_idx_type idx = 0; idx < n; idx++)
     {
       octave_value parent = parents(idx);
@@ -226,17 +226,17 @@ make_idx_args (const std::string& type,
               break;
 
             default:
               panic_impossible ();
               break;
             }
         }
 
-      Octave_map m;
+      octave_map m;
 
       m.assign ("type", type_field);
       m.assign ("subs", subs_field);
 
       retval = m;
     }
   else
     error ("invalid index for %s", who.c_str ());
@@ -254,25 +254,25 @@ octave_class::dotref (const octave_value
   std::string method_class = get_current_method_class ();
 
   // Find the class in which this method resides before attempting to access
   // the requested field.
 
   octave_base_value *obvp
     = method_class.empty () ? 0 : find_parent_class (method_class);
 
-  Octave_map my_map;
+  octave_map my_map;
 
-  my_map = obvp ? obvp->old_map_value () : map;
+  my_map = obvp ? obvp->map_value () : map;
 
   std::string nm = idx(0).string_value ();
 
   if (! error_state)
     {
-      Octave_map::const_iterator p = my_map.seek (nm);
+      octave_map::const_iterator p = my_map.seek (nm);
 
       if (p != my_map.end ())
         retval = my_map.contents (p);
       else
         error ("class has no member `%s'", nm.c_str ());
     }
   else
     gripe_invalid_index1 ();
@@ -481,17 +481,17 @@ octave_class::numeric_conv (const Cell& 
 {
   octave_value retval;
 
   if (val.length () == 1)
     {
       retval = val(0);
 
       if (type.length () > 0 && type[0] == '.' && ! retval.is_map ())
-        retval = Octave_map ();
+        retval = octave_map ();
     }
   else
     gripe_invalid_index_for_assignment ();
 
   return retval;
 }
 
 octave_value
@@ -641,21 +641,21 @@ octave_class::subsasgn (const std::strin
 
             std::list<octave_value_list> next_idx (idx);
 
             next_idx.erase (next_idx.begin ());
 
             std::string next_type = type.substr (1);
 
             Cell tmpc (1, 1);
-            Octave_map::iterator pkey = map.seek (key);
+            octave_map::iterator pkey = map.seek (key);
             if (pkey != map.end ())
               {
-                pkey->second.make_unique ();
-                tmpc = pkey->second;
+                map.contents (pkey).make_unique ();
+                tmpc = map.contents (pkey);
               }
 
             // FIXME: better code reuse?
             if (! error_state)
               {
                 if (tmpc.numel () == 1)
                   {
                     octave_value& tmp = tmpc(0);
@@ -716,17 +716,17 @@ octave_class::subsasgn (const std::strin
                   }
                 else
                   gripe_failed_assignment ();
               }
             else
               {
                 if (t_rhs.is_object () || t_rhs.is_map ())
                   {
-                    Octave_map rhs_map = t_rhs.old_map_value ();
+                    octave_map rhs_map = t_rhs.map_value ();
 
                     if (! error_state)
                       {
                         map.assign (idx.front (), rhs_map);
 
                         if (! error_state)
                           {
                             count++;
@@ -737,17 +737,17 @@ octave_class::subsasgn (const std::strin
                       }
                     else
                       error ("invalid class assignment");
                   }
                 else
                   {
                     if (t_rhs.is_empty ())
                       {
-                        map.maybe_delete_elements (idx.front());
+                        map.delete_elements (idx.front());
 
                         if (! error_state)
                           {
                             count++;
                             retval = octave_value (this);
                           }
                         else
                           gripe_failed_assignment ();
@@ -846,17 +846,17 @@ octave_class::index_vector (void) const
 
 size_t
 octave_class::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
-  for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
     {
       std::string key = map.key (p);
 
       octave_value val = octave_value (map.contents (p));
 
       retval += val.byte_size ();
     }
 
@@ -879,19 +879,19 @@ octave_class::find_parent_class (const s
   if (parent_class_name == class_name ())
     retval = this;
   else
     {
       for (std::list<std::string>::iterator pit = parent_list.begin ();
            pit != parent_list.end ();
            pit++)
         {
-          Octave_map::const_iterator smap = map.seek (*pit);
+          octave_map::const_iterator smap = map.seek (*pit);
 
-          const Cell& tmp = smap->second;
+          const Cell& tmp = map.contents (smap);
 
           octave_value vtmp = tmp(0);
 
           octave_base_value *obvp = vtmp.internal_rep ();
 
           retval = obvp->find_parent_class (parent_class_name);
 
           if (retval)
@@ -910,19 +910,19 @@ octave_class::unique_parent_class (const
   if (parent_class_name == class_name ())
     retval = this;
   else
     {
       for (std::list<std::string>::iterator pit = parent_list.begin ();
            pit != parent_list.end ();
            pit++)
         {
-          Octave_map::iterator smap = map.seek (*pit);
+          octave_map::iterator smap = map.seek (*pit);
 
-          Cell& tmp = smap->second;
+          Cell& tmp = map.contents (smap);
 
           octave_value& vtmp = tmp(0);
 
           octave_base_value *obvp = vtmp.internal_rep ();
 
           // Use find_parent_class first to avoid uniquifying if not necessary.
           retval = obvp->find_parent_class (parent_class_name);
 
@@ -1048,17 +1048,17 @@ octave_class::clear_exemplar_map (void)
 //  to do its magic.
 bool
 octave_class::reconstruct_parents (void)
 {
   bool retval = true, might_have_inheritance = false;
   std::string dbgstr = "dork";
 
   // First, check to see if there might be an issue with inheritance.
-  for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
     {
       std::string  key = map.key (p);
       Cell         val = map.contents (p);
       if ( val(0).is_object() )
         {
           dbgstr = "blork";
           if( key == val(0).class_name() )
             {
@@ -1097,32 +1097,32 @@ octave_class::reconstruct_parents (void)
 
   return retval;
 }
 
 bool
 octave_class::save_ascii (std::ostream& os)
 {
   os << "# classname: " << class_name () << "\n";
-  Octave_map m;
+  octave_map m;
   if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
-        m = tmp(0).old_map_value ();
+        m = tmp(0).map_value ();
       else
         return false;
     }
   else
-    m = old_map_value ();
+    m = map_value ();
 
   os << "# length: " << m.nfields () << "\n";
 
-  Octave_map::iterator i = m.begin ();
+  octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_ascii_data (os, val, m.key (i), false, 0);
       
       if (! b)
         return os;
@@ -1141,17 +1141,17 @@ octave_class::load_ascii (std::istream& 
   bool success = true;
 
   if (extract_keyword (is, "classname", classname) && classname != "")
     {
       if (extract_keyword (is, "length", len) && len >= 0)
         {
           if (len > 0)
             {
-              Octave_map m (map);
+              octave_map m (map);
 
               for (octave_idx_type j = 0; j < len; j++)
                 {
                   octave_value t2;
                   bool dummy;
 
                   // recurse to read cell elements
                   std::string nm
@@ -1184,31 +1184,31 @@ octave_class::load_ascii (std::istream& 
                     {
                       if (load_path::find_method (classname, "loadobj")
                           != std::string ())
                         {
                           octave_value in = new octave_class (*this);
                           octave_value_list tmp = feval ("loadobj", in, 1);
 
                           if (! error_state)
-                            map = tmp(0).old_map_value ();
+                            map = tmp(0).map_value ();
                           else
                             success = false;
                         }
                     }
                 }
               else
                 {
                   error ("load: failed to load class");
                   success = false;
                 }
             }
           else if (len == 0 )
             {
-              map = Octave_map (dim_vector (1, 1));
+              map = octave_map (dim_vector (1, 1));
               c_name = classname;
             }
           else
             panic_impossible ();
         }
       else 
         {
           error ("load: failed to extract number of elements in class");
@@ -1227,33 +1227,33 @@ octave_class::load_ascii (std::istream& 
 bool 
 octave_class::save_binary (std::ostream& os, bool& save_as_floats)
 {
   int32_t classname_len = class_name().length ();
 
   os.write (reinterpret_cast<char *> (&classname_len), 4);
   os << class_name ();
 
-  Octave_map m;
+  octave_map m;
   if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
-        m = tmp(0).old_map_value ();
+        m = tmp(0).map_value ();
       else
         return false;
     }
   else
-    m = old_map_value ();
+    m = map_value ();
 
   int32_t len = m.nfields();
   os.write (reinterpret_cast<char *> (&len), 4);
   
-  Octave_map::iterator i = m.begin ();
+  octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_binary_data (os, val, m.key (i), "", 0, save_as_floats);
       
       if (! b)
         return os;
@@ -1290,17 +1290,17 @@ octave_class::load_binary (std::istream&
   int32_t len;
   if (! is.read (reinterpret_cast<char *> (&len), 4))
     return false;
   if (swap)
     swap_bytes<4> (&len);
 
   if (len > 0)
     {
-      Octave_map m (map);
+      octave_map m (map);
 
       for (octave_idx_type j = 0; j < len; j++)
         {
           octave_value t2;
           bool dummy;
           std::string doc;
 
           // recurse to read cell elements
@@ -1330,30 +1330,30 @@ octave_class::load_binary (std::istream&
           else
             {
               if (load_path::find_method (c_name, "loadobj") != std::string ())
                 {
                   octave_value in = new octave_class (*this);
                   octave_value_list tmp = feval ("loadobj", in, 1);
 
                   if (! error_state)
-                    map = tmp(0).old_map_value ();
+                    map = tmp(0).map_value ();
                   else
                     success = false;
                 }
             }
         }
       else
         {
           warning ("load: failed to load class");
           success = false;
         }
     }
   else if (len == 0 )
-    map = Octave_map (dim_vector (1, 1));
+    map = octave_map (dim_vector (1, 1));
   else
     panic_impossible ();
 
   return success;
 }
 
 #if defined (HAVE_HDF5)
 
@@ -1361,18 +1361,18 @@ bool
 octave_class::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
 {
   hsize_t hdims[3];
   hid_t group_hid = -1;
   hid_t type_hid = -1;
   hid_t space_hid = -1;
   hid_t class_hid = -1;
   hid_t data_hid = -1;
-  Octave_map m;
-  Octave_map::iterator i;
+  octave_map m;
+  octave_map::iterator i;
 
 #if HAVE_HDF5_18
   group_hid = H5Gcreate (loc_id, name, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
 #else
   group_hid = H5Gcreate (loc_id, name, 0);
 #endif
   if (group_hid < 0)
     goto error_cleanup;
@@ -1405,22 +1405,22 @@ octave_class::save_hdf5 (hid_t loc_id, c
   if (data_hid < 0)
     goto error_cleanup;
 
   if (load_path::find_method (class_name (), "saveobj") != std::string ())
     {
       octave_value in = new octave_class (*this);
       octave_value_list tmp = feval ("saveobj", in, 1);
       if (! error_state)
-        m = tmp(0).old_map_value ();
+        m = tmp(0).map_value ();
       else
         goto error_cleanup;
     }
   else
-    m = old_map_value ();
+    m = map_value ();
 
   // recursively add each element of the class to this group
   i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool retval2 = add_hdf5_data (data_hid, val, m.key (i), "", false, 
@@ -1463,17 +1463,17 @@ octave_class::load_hdf5 (hid_t loc_id, c
   hid_t type_class_hid = -1;
   hid_t space_hid = -1;
   hid_t subgroup_hid = -1; 
   hid_t st_id = -1;
 
   hdf5_callback_data dsub;
 
   herr_t retval2 = 0;
-  Octave_map m (dim_vector (1, 1));
+  octave_map m (dim_vector (1, 1));
   int current_item = 0;
   hsize_t num_obj = 0;
   int slen = 0;
   hsize_t rank = 0;
 
 #if HAVE_HDF5_18
   group_hid = H5Gopen (loc_id, name, H5P_DEFAULT);
 #else
@@ -1571,17 +1571,17 @@ octave_class::load_hdf5 (hid_t loc_id, c
         {
           if (load_path::find_method (c_name, "loadobj") != std::string ())
             {
               octave_value in = new octave_class (*this);
               octave_value_list tmp = feval ("loadobj", in, 1);
 
               if (! error_state)
                 {
-                  map = tmp(0).old_map_value ();
+                  map = tmp(0).map_value ();
                   retval = true;
                 }
               else
                 retval = false;
             }
           else
             retval = true;
         }
@@ -1619,17 +1619,17 @@ octave_class::in_class_method (void)
           && find_parent_class (fcn->dispatch_class ()));
 }
 
 octave_class::exemplar_info::exemplar_info (const octave_value& obj)
   : field_names (), parent_class_names ()
 {
   if (obj.is_object ())
     {
-      Octave_map m = obj.old_map_value ();
+      octave_map m = obj.map_value ();
       field_names = m.keys ();
 
       parent_class_names = obj.parent_class_name_list ();
     }
   else
     error ("invalid call to exmplar_info constructor");
 }
 
@@ -1641,17 +1641,17 @@ bool
 octave_class::exemplar_info::compare (const octave_value& obj) const
 {
   bool retval = true;
 
   if (obj.is_object ())
     {
       if (nfields () == obj.nfields ())
         {
-          Octave_map obj_map = obj.old_map_value ();
+          octave_map obj_map = obj.map_value ();
           string_vector obj_fnames = obj_map.keys ();
           string_vector fnames = fields ();
 
           for (octave_idx_type i = 0; i < nfields (); i++)
             {
               if (obj_fnames[i] != fnames[i])
                 {
                   retval = false;
@@ -1720,17 +1720,17 @@ derived.\n\
   else if (nargin == 1)
     retval = args(0).class_name ();
   else
     {
       octave_function *fcn = octave_call_stack::caller ();
 
       if (fcn && fcn->is_class_constructor ())
         {
-          Octave_map m = args(0).old_map_value ();
+          octave_map m = args(0).map_value ();
 
           if (! error_state)
             {
               std::string id = args(1).string_value ();
 
               if (! error_state)
                 {
                   if (nargin == 2)
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -47,35 +47,35 @@ class tree_walker;
 class
 octave_class : public octave_base_value
 {
 public:
 
   octave_class (void)
     : octave_base_value (), obsolete_copies (0)  { }
 
-  octave_class (const Octave_map& m, const std::string& id)
+  octave_class (const octave_map& m, const std::string& id)
     : octave_base_value (), map (m), c_name (id), obsolete_copies (0) { }
 
   octave_class (const octave_class& s)
     : octave_base_value (s), map (s.map), c_name (s.c_name),
       parent_list (s.parent_list), obsolete_copies (0)  { }
 
-  octave_class (const Octave_map& m, const std::string& id, 
+  octave_class (const octave_map& m, const std::string& id, 
                 const octave_value_list& parents);
 
   ~octave_class (void) { }
 
   octave_base_value *clone (void) const { return new octave_class (*this); }
 
   octave_base_value *unique_clone (void);
 
   octave_base_value *empty_clone (void) const
   {
-    return new octave_class (Octave_map (map.keys ()), class_name ());
+    return new octave_class (octave_map (map.keys ()), class_name ());
   }
 
   Cell dotref (const octave_value_list& idx);
 
   Matrix size (void);
 
   octave_idx_type numel (const octave_value_list&); 
 
@@ -117,28 +117,26 @@ public:
   octave_idx_type nfields (void) const { return map.nfields (); }
 
   size_t nparents (void) const { return parent_list.size (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
   octave_value resize (const dim_vector& dv, bool = false) const
-    { Octave_map tmap = map; tmap.resize (dv); return tmap; }
+    { octave_map tmap = map; tmap.resize (dv); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
   bool is_object (void) const { return true; }
 
   octave_map map_value (void) const { return map; }
 
-  Octave_map old_map_value (void) const { return map; }
-
   string_vector map_keys (void) const;
 
   std::list<std::string> parent_class_name_list (void) const
     { return parent_list; }
 
   string_vector parent_class_names (void) const
     { return string_vector (parent_list); }
 
@@ -175,17 +173,17 @@ public:
 
   bool load_hdf5 (hid_t loc_id, const char *name);
 #endif
 
   mxArray *as_mxArray (void) const;
 
 private:
 
-  Octave_map map;
+  octave_map map;
 
   DECLARE_OCTAVE_ALLOCATOR
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return c_name; }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1450,22 +1450,16 @@ octave_value::map_value (void) const
 }
 
 octave_scalar_map
 octave_value::scalar_map_value (void) const
 {
   return rep->scalar_map_value ();
 }
 
-Octave_map
-octave_value::old_map_value (void) const
-{
-  return rep->old_map_value ();
-}
-
 octave_function *
 octave_value::function_value (bool silent) const
 {
   return rep->function_value (silent);
 }
 
 octave_user_function *
 octave_value::user_function_value (bool silent) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -843,18 +843,16 @@ public:
 
   Range range_value (void) const
     { return rep->range_value (); }
 
   octave_map map_value (void) const;
 
   octave_scalar_map scalar_map_value (void) const;
 
-  Octave_map old_map_value (void) const;
-
   string_vector map_keys (void) const
     { return rep->map_keys (); }
 
   size_t nparents (void) const
     { return rep->nparents (); }
 
   std::list<std::string> parent_class_name_list (void) const
     { return rep->parent_class_name_list (); }
