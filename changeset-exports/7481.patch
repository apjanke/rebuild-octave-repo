# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203027263 18000
#      Thu Feb 14 17:14:23 2008 -0500
# Node ID 78f3811155f745e7fc41e9025da3da10dbfd6c4a
# Parent  93826ba0d07898c881df59c7ad9d3df2597ea4c5
use exceptions in liboctave error handler

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,23 @@
+2008-02-14  John W. Eaton  <jwe@octave.org>
+
+	* misc/f77-fcn.h (F77_XFCN): Call octave_rethrow_exception here
+	instead of checking octave_allocation_error.
+	* misc/quit.cc (octave_execution_exception): New function.
+	(octave_rethrow_exception): New function.
+	(octave_handle_signal): Call octave_rethrow_exception instead of
+	octave_throw_interrupt_exception.
+	* misc/quit.h (octave_execution_error): New variable.
+	(END_INTERRUPT_WITH_EXCEPTIONS): Catch octave_execution_exception.
+	(octave_execution_exception): New class.
+	(octave_exception): New enum.
+	(octave_exception_state): Rename from octave_allocation_error.
+	Change all uses.
+
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
 	* lapack-xtra/xilaenv.f: New wrapper for Fortran function ilaenv.
 	* lapack-xtra/Makefile.in (FSRC): Add it to the list.
 
 2008-02-06  John W. Eaton  <jwe@octave.org>
 
 	* Makerules.in (%.def : %.f): Use mv instead of move-if-change.
diff --git a/libcruft/misc/cquit.c b/libcruft/misc/cquit.c
--- a/libcruft/misc/cquit.c
+++ b/libcruft/misc/cquit.c
@@ -250,17 +250,17 @@ octave_restore_signal_mask (void)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
 sig_atomic_t octave_interrupt_immediately = 0;
 
 sig_atomic_t octave_interrupt_state = 0;
 
-sig_atomic_t octave_allocation_error = 0;
+sig_atomic_t octave_exception_state = 0;
 
 sig_atomic_t octave_signal_caught = 0;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -57,20 +57,18 @@ extern "C" {
       f77_exception_encountered = 0; \
       octave_save_current_context (saved_context); \
       if (octave_set_current_context) \
 	{ \
 	  octave_interrupt_immediately = saved_octave_interrupt_immediately; \
           octave_restore_current_context (saved_context); \
 	  if (f77_exception_encountered) \
 	    F77_XFCN_ERROR (f, F); \
-          else if (octave_allocation_error) \
-            octave_throw_bad_alloc (); \
           else \
-            octave_throw_interrupt_exception (); \
+	    octave_rethrow_exception (); \
 	} \
       else \
         { \
 	  octave_interrupt_immediately++; \
 	  F77_FUNC (f, F) args; \
 	  octave_interrupt_immediately--; \
           octave_restore_current_context (saved_context); \
         } \
diff --git a/libcruft/misc/quit.cc b/libcruft/misc/quit.cc
--- a/libcruft/misc/quit.cc
+++ b/libcruft/misc/quit.cc
@@ -53,21 +53,56 @@ octave_throw_interrupt_exception (void)
 {
   if (octave_interrupt_hook)
     octave_interrupt_hook ();
     
   throw octave_interrupt_exception ();
 }
 
 void
+octave_throw_execution_exception (void)
+{
+  // FIXME -- would a hook function be useful here?
+
+  octave_exception_state = octave_exec_exception;
+    
+  throw octave_execution_exception ();
+}
+
+void
 octave_throw_bad_alloc (void)
 {
   if (octave_bad_alloc_hook)
     octave_bad_alloc_hook ();
     
+  octave_exception_state = octave_alloc_exception;
+
   throw std::bad_alloc ();
 }
 
+void
+octave_rethrow_exception (void)
+{
+  if (octave_interrupt_state)
+    octave_throw_interrupt_exception ();
+  else
+    {
+      switch (octave_exception_state)
+	{
+	case octave_exec_exception:
+	  octave_throw_execution_exception ();
+	  break;
+
+	case octave_alloc_exception:
+	  octave_throw_bad_alloc ();
+	  break;
+
+	default:
+	  break;
+	}
+    }
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -69,40 +69,56 @@ CRUFT_API extern void octave_restore_cur
 CRUFT_API extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
 
 CRUFT_API extern void octave_save_signal_mask (void);
 
 CRUFT_API extern void octave_restore_signal_mask (void);
 
 #ifdef __cplusplus
 class
+octave_execution_exception
+{
+};
+
+class
 octave_interrupt_exception
 {
 };
 #endif
 
+enum octave_exception
+{
+  octave_no_exception = 0,
+  octave_exec_exception = 1,
+  octave_alloc_exception = 2
+};
+
 CRUFT_API extern sig_atomic_t octave_interrupt_immediately;
 
 /*
   > 0: interrupt pending
     0: no interrupt pending
   < 0: handling interrupt
 */
 CRUFT_API extern sig_atomic_t octave_interrupt_state;
 
-CRUFT_API extern sig_atomic_t octave_allocation_error;
+CRUFT_API extern sig_atomic_t octave_exception_state;
 
 CRUFT_API extern sig_atomic_t octave_signal_caught;
 
 CRUFT_API extern void octave_handle_signal (void);
 
 CRUFT_API extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
 
+CRUFT_API extern void octave_throw_execution_exception (void) GCC_ATTR_NORETURN;
+
 CRUFT_API extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
 
+CRUFT_API extern void octave_rethrow_exception (void) GCC_ATTR_NORETURN;
+
 #define OCTAVE_QUIT \
   do \
     { \
       if (octave_signal_caught) \
         { \
           octave_signal_caught = 0; \
           octave_handle_signal (); \
         } \
@@ -114,25 +130,25 @@ CRUFT_API extern void octave_throw_bad_a
      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
      ... some code that calls a "foreign" function ...
      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
    but sometimes it is useful to do something like
 
      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_1;
      ... custom code here, normally ending in a call to
-         octave_throw_interrupt_exception ...
+         octave_rethrow_exception ...
      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_2;
 
    so that you can perform extra clean up operations before throwing
    the interrupt exception.  */
 
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_1; \
-  octave_throw_interrupt_exception (); \
+  octave_rethrow_exception (); \
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_2
 
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_1 \
   do \
     { \
       octave_jmp_buf saved_context; \
  \
       octave_save_current_context (saved_context); \
@@ -165,20 +181,26 @@ CRUFT_API extern void octave_throw_bad_a
 
 #define END_INTERRUPT_WITH_EXCEPTIONS \
     } \
   catch (octave_interrupt_exception) \
     { \
       octave_interrupt_immediately = saved_octave_interrupt_immediately; \
       octave_jump_to_enclosing_context (); \
     } \
+  catch (octave_execution_exception) \
+    { \
+      octave_interrupt_immediately = saved_octave_interrupt_immediately; \
+      octave_exception_state = octave_exec_exception; \
+      octave_jump_to_enclosing_context (); \
+    } \
   catch (std::bad_alloc) \
     { \
       octave_interrupt_immediately = saved_octave_interrupt_immediately; \
-      octave_allocation_error = 1; \
+      octave_exception_state = octave_alloc_exception; \
       octave_jump_to_enclosing_context (); \
     } \
  \
   octave_interrupt_immediately = saved_octave_interrupt_immediately
 #endif
 
 #ifdef __cplusplus
 }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2008-02-14  John W. Eaton  <jwe@octave.org>
+
+	* sighandlers.cc (user_abort): If interrupting immediately, set
+	octave_interrupt_state if it is not already set.
+
+	* pt-stmt.cc (tree_statement::eval): Catch execution exceptions.
+
+	* octave.cc (lo_error_handler): New static function.
+	(initialize_error_handlers): Set liboctave_error_handler to
+	lo_error_handler, not error.
+
+	* DLD-FUNCTIONS/urlwrite.cc (urlget): Call octave_rethrow_exception
+	instead of octave_throw_interrupt_exception.
+	* utils.cc (BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_FOR_VSNPRINTF): 
+	Likewise.
+
 2008-02-12  David Bateman  <dbateman@free.fr>
 
 	* graphics.h.in: Implement the cdatamapping property in patch and
 	image objects.
 
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
 	* pt-loop.cc (tree_simple_for_command::eval): Compute range
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -162,17 +162,17 @@ urlget (const std::string& url, const st
   // We were interrupted (this code is inside a block that is only
   // called when siglongjmp is called from a signal handler).
 
   // Is there a better error code to use?  Maybe it doesn't matter
   // because we are about to throw an execption.
 
   res = CURLE_ABORTED_BY_CALLBACK;
   urlget_cleanup (curl);
-  octave_throw_interrupt_exception ();
+  octave_rethrow_exception ();
 
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_2;
 
   res = curl_easy_perform (curl);
 
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
   // If we are not interuppted, we will end up here, so we still need
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -520,19 +520,30 @@ usage (void)
 static void
 print_version_and_exit (void)
 {
   std::cout << OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_WARRANTY_AND_BUGS "\n";
   exit (0);
 }
 
 static void
+lo_error_handler (const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  verror (fmt, args);
+  va_end (args);
+
+  octave_throw_execution_exception ();
+}
+
+static void
 initialize_error_handlers ()
 {
-  set_liboctave_error_handler (error);
+  set_liboctave_error_handler (lo_error_handler);
   set_liboctave_warning_handler (warning);
   set_liboctave_warning_with_id_handler (warning_with_id);
 }
 
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -93,46 +93,54 @@ tree_statement::eval (bool silent, int n
 
   if (cmd || expr)
     {
       unwind_protect_ptr (curr_statement);
       curr_statement = this;
 
       maybe_echo_code (in_function_body);
 
-      if (cmd)
-	cmd->eval ();
-      else
+      try
 	{
-	  expr->set_print_flag (pf);
+	  if (cmd)
+	    cmd->eval ();
+	  else
+	    {
+	      expr->set_print_flag (pf);
 
-	  // FIXME -- maybe all of this should be packaged in
-	  // one virtual function that returns a flag saying whether
-	  // or not the expression will take care of binding ans and
-	  // printing the result.
+	      // FIXME -- maybe all of this should be packaged in
+	      // one virtual function that returns a flag saying whether
+	      // or not the expression will take care of binding ans and
+	      // printing the result.
 
-	  // FIXME -- it seems that we should just have to
-	  // call expr->rvalue () and that should take care of
-	  // everything, binding ans as necessary?
+	      // FIXME -- it seems that we should just have to
+	      // call expr->rvalue () and that should take care of
+	      // everything, binding ans as necessary?
+
+	      bool do_bind_ans = false;
 
-	  bool do_bind_ans = false;
+	      if (expr->is_identifier ())
+		{
+		  tree_identifier *id = dynamic_cast<tree_identifier *> (expr);
 
-	  if (expr->is_identifier ())
-	    {
-	      tree_identifier *id = dynamic_cast<tree_identifier *> (expr);
+		  do_bind_ans = (! id->is_variable ());
+		}
+	      else
+		do_bind_ans = (! expr->is_assignment_expression ());
 
-	      do_bind_ans = (! id->is_variable ());
+	      retval = expr->rvalue (nargout);
+
+	      if (do_bind_ans && ! (error_state || retval.empty ()))
+		bind_ans (retval(0), pf);
 	    }
-	  else
-	    do_bind_ans = (! expr->is_assignment_expression ());
-
-	  retval = expr->rvalue (nargout);
-
-	  if (do_bind_ans && ! (error_state || retval.empty ()))
-	    bind_ans (retval(0), pf);
+	}
+      catch (octave_execution_exception)
+	{
+	  octave_exception_state = octave_no_exception;
+	  error ("caught execution error in library function");
 	}
 
       unwind_protect::run ();
     }
 
   return retval;
 }
 
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -352,17 +352,17 @@ sigwinch_handler (int /* sig */)
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 //
 // This also has to work for SIGBREAK (on systems that have it), so we
 // use the value of sig, instead of just assuming that it is called
 // for SIGINT only.
 
 static
-void user_abort(const char *sig_name, int sig_number)
+void user_abort (const char *sig_name, int sig_number)
 {
   if (! octave_initialized)
     exit (1);
 
   if (can_interrupt)
     {
       if (Vdebug_on_interrupt)
 	{
@@ -373,17 +373,22 @@ void user_abort(const char *sig_name, in
 	      return;
 	    }
 	  else
 	    // Clear the flag and do normal interrupt stuff.
 	    octave_debug_on_interrupt_state = false;
 	}
 
       if (octave_interrupt_immediately)
-	octave_jump_to_enclosing_context ();
+	{
+	  if (octave_interrupt_state == 0)
+	    octave_interrupt_state = 1;
+
+	  octave_jump_to_enclosing_context ();
+	}
       else
 	{
 	  // If we are already cleaning up from a previous interrupt,
 	  // take note of the fact that another interrupt signal has
 	  // arrived.
 
 	  if (octave_interrupt_state < 0)
 	    octave_interrupt_state = 0;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -177,17 +177,17 @@ octave_call_stack::unwind_pop_script (vo
 
 void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_signal_caught = 0;
-  octave_allocation_error = 0;
+  octave_exception_state = octave_no_exception;
   octave_restore_signal_mask ();
   octave_catch_interrupts ();
 }
 
 int
 main_loop (void)
 {
   octave_save_signal_mask ();
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -961,17 +961,17 @@ octave_vformat (std::ostream& os, const 
 // will require a very large buffer.  If we are interrupted in that
 // case, we should make the buffer size smaller for the next call.
 
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_FOR_VSNPRINTF \
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_1; \
   delete [] buf; \
   buf = 0; \
   size = initial_size; \
-  octave_throw_interrupt_exception (); \
+  octave_rethrow_exception (); \
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_2
 
 #if defined __GNUC__ && defined __va_copy
 #define SAVE_ARGS(saved_args, args) __va_copy (saved_args, args)
 #elif defined va_copy
 #define SAVE_ARGS(saved_args, args) va_copy (saved_args, args)
 #else
 #define SAVE_ARGS(saved_args, args) saved_args = args
