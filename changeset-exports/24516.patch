# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515092952 28800
#      Thu Jan 04 11:09:12 2018 -0800
# Node ID b31fa0a0bca236c78e6b7b0ca8ea530b2c2e08bc
# Parent  070e9b0361414907059541f775cfa56b0a459d45
doc: Use '@:' to create non-sentence ending period for "etc.)".

* debug.txi, file-io.cc (Ffopen):  Use '@:' to create non-sentence ending
period for "etc.)".

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -78,17 +78,17 @@ result in Octave terminating normally.
 Breakpoints can be set in any m-file function by using the @code{dbstop}
 function.
 
 @DOCSTRING(dbstop)
 
 @noindent
 Breakpoints in class methods are also supported (e.g.,
 @code{dbstop ("@@class/method")}).  However, breakpoints cannot be set in
-built-in functions (e.g., @code{sin}, etc.) or dynamically loaded functions
+built-in functions (e.g., @code{sin}, etc.@:) or dynamically loaded functions
 (i.e., oct-files).
 
 To set a breakpoint immediately upon entering a function use line number 1, or
 omit the line number entirely and just give the function name.  When setting
 the breakpoint Octave will ignore the leading comment block, and the breakpoint
 will be set on the first executable statement in the function.  For example:
 
 @example
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -484,17 +484,17 @@ DEFMETHOD (fopen, interp, args, nargout,
 @deftypefnx {} {@var{fid} =} fopen (@var{name}, @var{mode})
 @deftypefnx {} {@var{fid} =} fopen (@var{name}, @var{mode}, @var{arch})
 @deftypefnx {} {[@var{fid}, @var{msg}] =} fopen (@dots{})
 @deftypefnx {} {@var{fid_list} =} fopen ("all")
 @deftypefnx {} {[@var{file}, @var{mode}, @var{arch}] =} fopen (@var{fid})
 Open a file for low-level I/O or query open files and file descriptors.
 
 The first form of the @code{fopen} function opens the named file with
-the specified mode (read-write, read-only, etc.) and architecture
+the specified mode (read-write, read-only, etc.@:) and architecture
 interpretation (IEEE big endian, IEEE little endian, etc.), and returns
 an integer value that may be used to refer to the file later.  If an
 error occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the
 corresponding system error message.  The @var{mode} is a one or two
 character string that specifies whether the file is to be opened for
 reading, writing, or both.
 
 The second form of the @code{fopen} function returns a vector of file ids
