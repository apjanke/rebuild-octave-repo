# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502456758 14400
#      Fri Aug 11 09:05:58 2017 -0400
# Node ID 5aec653c88e74753ebe3050268aecaf9e479750a
# Parent  1b232c0c19e65d16418a0dc2570fe54911aa4f9d
new function for accessing classdef objects

* ov.h, ov.cc (octave_value::classdef_object_value): New function.
* ov-base.h, ov-base.cc (octave_base_value::classdef_object_value):
New virtual function.
* ov-classdef.h (octave_classdef::classdef_object_value): New function.


diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -45,6 +45,7 @@ along with Octave; see the file COPYING.
 #include "ov-base.h"
 #include "ov-cell.h"
 #include "ov-ch-mat.h"
+#include "ov-classdef.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-fcn-handle.h"
@@ -884,6 +885,18 @@ octave_base_value::parent_class_names (v
   err_wrong_type_arg ("octave_base_value::parent_class_names()", type_name ());
 }

+octave_classdef *
+octave_base_value::classdef_object_value (bool silent)
+{
+  octave_classdef *retval = nullptr;
+
+  if (! silent)
+    err_wrong_type_arg ("octave_base_value::classdef_object_value()",
+                        type_name ());
+
+  return retval;
+}
+
 octave_function *
 octave_base_value::function_value (bool silent)
 {
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -47,6 +47,7 @@ class octave_map;
 class octave_scalar_map;
 class octave_value;
 class octave_value_list;
+class octave_classdef;
 class octave_function;
 class octave_user_function;
 class octave_user_script;
@@ -598,6 +599,8 @@ public:
   virtual bool is_instance_of (const std::string&) const
   { return false; }

+  virtual octave_classdef * classdef_object_value (bool silent = false);
+
   virtual octave_function * function_value (bool silent = false);

   virtual octave_user_function * user_function_value (bool silent = false);
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1398,6 +1398,8 @@ public:
   octave_base_value * empty_clone (void) const
   { return new octave_classdef (object.empty_clone ()); }

+  octave_classdef * classdef_object_value (bool = false) { return this; }
+
   cdef_object get_object (void) const { return object; }

   cdef_object& get_object_ref (void) { return object; }
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -986,6 +986,8 @@ public:
   bool is_instance_of (const std::string& cls_name) const
   { return rep->is_instance_of (cls_name); }

+  octave_classdef * classdef_object_value (bool silent = false) const;
+
   octave_function * function_value (bool silent = false) const;

   octave_user_function * user_function_value (bool silent = false) const;

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include "oct-hdf5.h"
 #include "oct-lvalue.h"
 #include "oct-map.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-cell.h"
 #include "ov-ch-mat.h"
+#include "ov-classdef.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-fcn-handle.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ovl.h"
@@ -879,16 +880,28 @@ octave_base_value::parent_class_name_lis
 }
 
 string_vector
 octave_base_value::parent_class_names (void) const
 {
   err_wrong_type_arg ("octave_base_value::parent_class_names()", type_name ());
 }
 
+octave_classdef *
+octave_base_value::classdef_object_value (bool silent)
+{
+  octave_classdef *retval = nullptr;
+
+  if (! silent)
+    err_wrong_type_arg ("octave_base_value::classdef_object_value()",
+                        type_name ());
+
+  return retval;
+}
+
 octave_function *
 octave_base_value::function_value (bool silent)
 {
   octave_function *retval = nullptr;
 
   if (! silent)
     err_wrong_type_arg ("octave_base_value::function_value()", type_name ());
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -42,16 +42,17 @@ along with Octave; see the file COPYING.
 #include "oct-stream.h"
 
 class Cell;
 class mxArray;
 class octave_map;
 class octave_scalar_map;
 class octave_value;
 class octave_value_list;
+class octave_classdef;
 class octave_function;
 class octave_user_function;
 class octave_user_script;
 class octave_user_code;
 class octave_fcn_handle;
 class octave_fcn_inline;
 class octave_value_list;
 class octave_lvalue;
@@ -593,16 +594,18 @@ public:
   { return nullptr; }
 
   virtual octave_base_value * unique_parent_class (const std::string&)
   { return nullptr; }
 
   virtual bool is_instance_of (const std::string&) const
   { return false; }
 
+  virtual octave_classdef * classdef_object_value (bool silent = false);
+
   virtual octave_function * function_value (bool silent = false);
 
   virtual octave_user_function * user_function_value (bool silent = false);
 
   virtual octave_user_script * user_script_value (bool silent = false);
 
   virtual octave_user_code * user_code_value (bool silent = false);
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1393,16 +1393,18 @@ public:
     : octave_base_value (obj), object (obj.object) { }
 
   octave_base_value * clone (void) const
   { return new octave_classdef (object.clone ()); }
 
   octave_base_value * empty_clone (void) const
   { return new octave_classdef (object.empty_clone ()); }
 
+  octave_classdef * classdef_object_value (bool = false) { return this; }
+
   cdef_object get_object (void) const { return object; }
 
   cdef_object& get_object_ref (void) { return object; }
 
   bool is_defined (void) const { return true; }
 
   bool isstruct (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1637,16 +1637,22 @@ octave_value::scalar_map_value (void) co
 }
 
 octave_function *
 octave_value::function_value (bool silent) const
 {
   return rep->function_value (silent);
 }
 
+octave_classdef *
+octave_value::classdef_object_value (bool silent) const
+{
+  return rep->classdef_object_value (silent);
+}
+
 octave_user_function *
 octave_value::user_function_value (bool silent) const
 {
   return rep->user_function_value (silent);
 }
 
 octave_user_script *
 octave_value::user_script_value (bool silent) const
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -981,16 +981,18 @@ public:
 
   octave_base_value *
   find_parent_class (const std::string& parent_class_name)
   { return rep->find_parent_class (parent_class_name); }
 
   bool is_instance_of (const std::string& cls_name) const
   { return rep->is_instance_of (cls_name); }
 
+  octave_classdef * classdef_object_value (bool silent = false) const;
+
   octave_function * function_value (bool silent = false) const;
 
   octave_user_function * user_function_value (bool silent = false) const;
 
   octave_user_script * user_script_value (bool silent = false) const;
 
   octave_user_code * user_code_value (bool silent = false) const;
 
