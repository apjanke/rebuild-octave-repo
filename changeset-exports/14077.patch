# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1324422367 18000
#      Tue Dec 20 18:06:07 2011 -0500
# Branch stable
# Node ID b6eeeb67fa3f120ec02aa0b36b0500fca69ec49c
# Parent  9aff66860e0313f3a4f3de2ce44c69196064199e
str2double: return NaN for things like "1 2 3 4" (bug #34713).

* str2double.cc (single_num, extract_num): Skip spaces as needed.
(str2double1): Don't skip all spaces.

diff --git a/src/DLD-FUNCTIONS/str2double.cc b/src/DLD-FUNCTIONS/str2double.cc
--- a/src/DLD-FUNCTIONS/str2double.cc
+++ b/src/DLD-FUNCTIONS/str2double.cc
@@ -41,16 +41,24 @@ along with Octave; see the file COPYING.
 static inline bool
 is_imag_unit (int c)
 { return c == 'i' || c == 'j'; }
 
 static std::istringstream&
 single_num (std::istringstream& is, double& num)
 {
   char c = is.peek ();
+
+  // Skip spaces.
+  while (isspace (c))
+    {
+      is.get ();
+      c = is.peek ();
+    }
+
   if (c == 'I')
     {
       // It's infinity.
       is.get ();
       char c1 = is.get (), c2 = is.get ();
       if (c1 == 'n' && c2 == 'f')
         {
           num = octave_Inf;
@@ -88,66 +96,106 @@ single_num (std::istringstream& is, doub
 }
 
 static std::istringstream&
 extract_num (std::istringstream& is, double& num, bool& imag, bool& have_sign)
 {
   have_sign = imag = false;
 
   char c = is.peek ();
+
+  // Skip leading spaces.
+  while (isspace (c))
+    {
+      is.get ();
+      c = is.peek ();
+    }
+
   bool negative = false;
 
   // Accept leading sign.
   if (c == '+' || c == '-')
     {
       negative = c == '-';
       is.get ();
       c = is.peek ();
       have_sign = true;
     }
 
+  // Skip spaces after sign.
+  while (isspace (c))
+    {
+      is.get ();
+      c = is.peek ();
+    }
+
   // It's i*num or just i.
   if (is_imag_unit (c))
     {
       c = is.get ();
       imag = true;
       char cn = is.peek ();
+
+      // Skip spaces after imaginary unit.
+      while (isspace (cn))
+        {
+          is.get ();
+          cn = is.peek ();
+        }
+
       if (cn == '*')
         {
           // Multiplier follows, we extract it as a number.
           is.get ();
           single_num (is, num);
         }
       else
         num = 1.0;
     }
   else
     {
       // It's num, num*i, or numi.
       single_num (is, num);
       if (is.good ())
         {
           c = is.peek ();
+
+          // Skip spaces after number.
+          while (isspace (c))
+            {
+              is.get ();
+              c = is.peek ();
+            }
+
           if (c == '*')
             {
               is.get ();
-              c = is.get ();
+              c = is.peek ();
+
+              // Skip spaces after operator.
+              while (isspace (c))
+                {
+                  is.get ();
+                  c = is.peek ();
+                }
+
               if (is_imag_unit (c))
                 {
                   imag = true;
-                  is.peek ();
+                  is.get ();
+                  is.peek (); // Sets eof bit.
                 }
               else
                 is.setstate (std::ios::failbit); // indicate that read has failed.
             }
           else if (is_imag_unit (c))
             {
               imag = true;
               is.get ();
-              is.peek ();
+              is.peek (); // Sets eof bit.
             }
         }
     }
 
   if (negative)
     num = -num;
 
   return is;
@@ -176,24 +224,22 @@ set_component (Complex& c, double num, b
 
 static Complex
 str2double1 (const std::string& str_arg)
 {
   Complex val (0.0, 0.0);
 
   std::string str = str_arg;
 
+  // FIXME -- removing all commas does too much...
   std::string::iterator se = str.end ();
-
-  // Remove commas (thousand separators) and spaces.
   se = std::remove (str.begin (), se, ',');
-  se = std::remove (str.begin (), se, ' ');
   str.erase (se, str.end ());
+  std::istringstream is (str);
 
-  std::istringstream is (str);
   double num;
   bool i1, i2, s1, s2;
 
   if (is.eof ())
     val = octave_NaN;
   else if (! extract_num (is, num, i1, s1))
     val = octave_NaN;
   else
@@ -300,16 +346,17 @@ risk of using @code{eval} on unknown dat
 %!assert (str2double ("2j"), 2i)
 %!assert (str2double ("2 + j"), 2+j)
 %!assert (str2double ("i*2 + 3"), 3+2i)
 %!assert (str2double (".5*i + 3.5"), 3.5+0.5i)
 %!assert (str2double ("1e-3 + i*.25"), 1e-3 + 0.25i)
 %!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -5])
 %!assert (str2double ({"2 + j","1.25e-3","-05"}), [2+i, 1.25e-3, -5])
 %!assert (str2double (1), NaN)
+%!assert (str2double ("1 2 3 4"), NaN)
 %!assert (str2double ("Hello World"), NaN)
 %!assert (str2double ("NaN"), NaN)
 %!assert (str2double ("NA"), NA)
 %!assert (str2double ("Inf"), Inf)
 %!assert (str2double ("-Inf"), -Inf)
 %!assert (str2double ("Inf*i"), complex (0, Inf))
 %!assert (str2double ("NaN + Inf*i"), complex (NaN, Inf))
 %!assert (str2double ("Inf - Inf*i"), complex (Inf, -Inf))
