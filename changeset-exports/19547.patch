# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420740532 18000
#      Thu Jan 08 13:08:52 2015 -0500
# Node ID c5b8a91baec69acb3fb3a17ac272097abd7df871
# Parent  cbd5d36c54728b66919f92c534e647d56afca77b
avoid unnecessary use of pointer in audio code

* audiodevinfo.cc (audioplayer::get_left): Return RowVector instead of
pointer to RowVector.  Method is now const.  Change all uses.
(audioplayer::get_right): Likewise.  Handle case of single channel
audio here.
(portaudio_play_callback): Not here.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -453,18 +453,18 @@ public:
   bool print_as_scalar (void) const { return true; }
 
   void init (void);
   void init_fn (void);
   void set_y (const octave_value& y);
   void set_y (octave_function *fn);
   void set_y (std::string fn);
   Matrix& get_y (void);
-  RowVector *get_left (void);
-  RowVector *get_right (void);
+  RowVector get_left (void) const;
+  RowVector get_right (void) const;
   void set_fs (int fs);
   int get_fs (void);
   void set_nbits (int nbits);
   int get_nbits (void);
   void set_id (int id);
   int get_id (void);
   int get_channels (void);
   audio_type get_type (void);
@@ -598,79 +598,75 @@ octave_play_callback (const void *, void
 static int
 portaudio_play_callback (const void *, void *output, unsigned long frames,
                          const PaStreamCallbackTimeInfo*,
                          PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = static_cast<audioplayer *> (data);
   int big_endian = is_big_endian ();
   int channels = player->get_channels ();
-  RowVector *sound_l = player->get_left ();
-  RowVector *sound_r;
-
-  if (channels > 1)
-    sound_r = player->get_right ();
-  else
-    sound_r = sound_l;
+
+  const RowVector sound_l = player->get_left ();
+  const RowVector sound_r = player->get_right ();
 
   for (unsigned long j = 0, k = 0; j < frames; j++, k += 2)
     {
       unsigned int sample_number = player->get_sample_number ();
       if (sample_number > player->get_end_sample ())
         return paAbort;
 
       if (player->get_type () == DOUBLE)
         {
           if (player->get_nbits () == 8)
             {
               int8_t *buffer = static_cast<int8_t *> (output);
-              buffer[k] = sound_l->elem (sample_number) * (pow (2.0, 7) - 1);
-              buffer[k + 1] = sound_r->elem (sample_number) * (pow (2.0, 7) - 1);
+              buffer[k] = sound_l.elem (sample_number) * (pow (2.0, 7) - 1);
+              buffer[k + 1] = sound_r.elem (sample_number) * (pow (2.0, 7) - 1);
             }
           else if (player->get_nbits () == 16)
             {
               int16_t *buffer = static_cast<int16_t *> (output);
-              buffer[k] = sound_l->elem (sample_number) * (pow (2.0, 15) - 1);
-              buffer[k + 1] = sound_r->elem (sample_number) * (pow (2.0, 15) - 1);
+              buffer[k] = sound_l.elem (sample_number) * (pow (2.0, 15) - 1);
+              buffer[k + 1] = sound_r.elem (sample_number) * (pow (2.0, 15) - 1);
             }
           else if (player->get_nbits () == 24)
             {
               uint8_t *buffer = static_cast<uint8_t *> (output);
-              int32_t sample_l = sound_l->elem (sample_number) * (pow (2.0, 23) - 1);
-              int32_t sample_r = sound_r->elem (sample_number) * (pow (2.0, 23) - 1);
+              int32_t sample_l = sound_l.elem (sample_number) * (pow (2.0, 23) - 1);
+              int32_t sample_r = sound_r.elem (sample_number) * (pow (2.0, 23) - 1);
               sample_l &= 0x00ffffff;
               sample_r &= 0x00ffffff;
               // FIXME: Would a mask work better?
               uint8_t *_sample_l = reinterpret_cast<uint8_t *> (&sample_l);
               uint8_t *_sample_r = reinterpret_cast<uint8_t *> (&sample_r);
               buffer[j * 6 + 0] = _sample_l[0 + big_endian];
               buffer[j * 6 + 1] = _sample_l[1 + big_endian];
               buffer[j * 6 + 2] = _sample_l[2 + big_endian];
               buffer[j * 6 + 3] = _sample_r[0 + big_endian];
               buffer[j * 6 + 4] = _sample_r[1 + big_endian];
               buffer[j * 6 + 5] = _sample_r[2 + big_endian];
             }
         }
       else if (player->get_type () == INT8)
         {
           int8_t *buffer = static_cast<int8_t *> (output);
-          buffer[k] = sound_l->elem (sample_number);
-          buffer[k + 1] = sound_r->elem (sample_number);
+          buffer[k] = sound_l.elem (sample_number);
+          buffer[k + 1] = sound_r.elem (sample_number);
         }
       else if (player->get_type () == UINT8)
         {
           uint8_t *buffer = static_cast<uint8_t *> (output);
-          buffer[k] = sound_l->elem (sample_number);
-          buffer[k + 1] = sound_r->elem (sample_number);
+          buffer[k] = sound_l.elem (sample_number);
+          buffer[k + 1] = sound_r.elem (sample_number);
         }
       else if (player->get_type () == INT16)
         {
           int16_t *buffer = static_cast<int16_t *> (output);
-          buffer[k] = sound_l->elem (sample_number);
-          buffer[k + 1] = sound_r->elem (sample_number);
+          buffer[k] = sound_l.elem (sample_number);
+          buffer[k + 1] = sound_r.elem (sample_number);
         }
       player->set_sample_number (sample_number + 1);
     }
   return paContinue;
 }
 
 audioplayer::audioplayer (void)
   : octave_callback_function (0),
@@ -796,26 +792,26 @@ audioplayer::set_y (octave_function *fn)
 }
 
 Matrix&
 audioplayer::get_y (void)
 {
   return y;
 }
 
-RowVector *
-audioplayer::get_left (void)
+RowVector
+audioplayer::get_left (void) const
 {
-  return &(left);
+  return left;
 }
 
-RowVector *
-audioplayer::get_right (void)
+RowVector
+audioplayer::get_right (void) const
 {
-  return &(right);
+  return channels == 1 ? left : right;
 }
 
 void
 audioplayer::set_fs (int fs_arg)
 {
   fs = fs_arg;
 }
 
