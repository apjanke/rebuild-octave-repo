# HG changeset patch
# User Pascal Dupuis <Pascal.Dupuis@uclouvain.be>
# Date 1295561246 18000
#      Thu Jan 20 17:07:26 2011 -0500
# Node ID cda4aa780d588cd152f3460851aa9d43a30d5c5c
# Parent  c4c2cd67c4400fc1ba71968e07b40e4a22211981
Another round of initialising members in the constructor initialisation list

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2011-01-20  Pascal Dupuis <Pascal.Dupuis@worldonline.be>.
+
+	* debug.h, dynamic-ld.cc, gl-render.cc, gl-render.h,
+	gl2ps-renderer.h, lex.h, ls-hdf5.h, oct-stream.h, oct-strstrm.h,
+	ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base-sparse.h,
+	ov-cell.h, ov-class.h, ov-dld-fcn.h, ov-fcn-handle.h,
+	ov-lazy-idx.h, ov-perm.h, ov-range.h, ov-struct.h, procstream.h,
+	pt-assign.h, symtab.h, unwind-prot.h: Initialize
+	all data members in initialization list.
+
 2011-01-20  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/__init_fltk__.cc (__fltk_uigetfile__): Append file
 	seperator to 2nd return value (file path).
 	Bug #32190.
 
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/debug.h b/src/debug.h
--- a/src/debug.h
+++ b/src/debug.h
@@ -34,17 +34,17 @@ class octave_user_code;
 // Interface to breakpoints,.
 
 class
 OCTINTERP_API
 bp_table
 {
 private:
 
-  bp_table (void) { }
+  bp_table (void) : bp_set () { }
 
   ~bp_table (void) { }
 
 public:
 
   typedef std::map<int, int> intmap;
 
   typedef intmap::const_iterator const_intmap_iterator;
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -59,17 +59,17 @@ public:
   static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   static octave_shlib find_file (const std::string& file_name);
 
   static void display (void);
 
 private:
 
-  octave_shlib_list (void) { }
+  octave_shlib_list (void) : lib_list () { }
 
   ~octave_shlib_list (void) { }
 
   void do_append (const octave_shlib& shl);
 
   void do_remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   octave_shlib do_find_file (const std::string& file_name) const;
@@ -198,17 +198,17 @@ public:
   typedef std::list<octave_shlib>::const_iterator const_iterator;
 
   static void append (const octave_shlib& shl);
 
   static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
 private:
 
-  octave_mex_file_list (void) { }
+  octave_mex_file_list (void) : file_list () { }
 
   ~octave_mex_file_list (void) { }
 
   void do_append (const octave_shlib& shl);
 
   void do_remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   static octave_mex_file_list *instance;
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -58,17 +58,20 @@ xmin (octave_idx_type x, octave_idx_type
 
 class
 opengl_texture
 {
 protected:
   class texture_rep
   {
   public:
-    texture_rep (void) : valid (false), count (1) { }
+    texture_rep (void) 
+      : id (), w (), h (), tw (), th (), tx (), ty (),
+        valid (false), count (1) 
+    { }
 
     texture_rep (GLuint id_arg, int w_arg, int h_arg, int tw_arg, int th_arg)
         : id (id_arg), w (w_arg), h (h_arg), tw (tw_arg), th (th_arg),
           tx (double(w)/tw), ty (double(h)/th), valid (true),
           count (1) { }
 
     ~texture_rep (void)
       {
@@ -234,17 +237,17 @@ public:
 #if defined (HAVE_FRAMEWORK_OPENGL) && defined (HAVE_GLUTESSCALLBACK_THREEDOTS)
   typedef GLvoid (CALLBACK *fcn) (...);
 #else
   typedef void (CALLBACK *fcn) (void);
 #endif
 
 public:
 
-  opengl_tesselator (void) : glu_tess (0) { init (); }
+  opengl_tesselator (void) : glu_tess (0), fill() { init (); }
 
   virtual ~opengl_tesselator (void)
     { if (glu_tess) gluDeleteTess (glu_tess); }
 
   void begin_polygon (bool filled = true)
     {
       gluTessProperty (glu_tess, GLU_TESS_BOUNDARY_ONLY,
                        (filled ? GL_FALSE : GL_TRUE));
@@ -338,17 +341,19 @@ public:
     float ambient;
     float diffuse;
     float specular;
     float specular_exp;
 
     // reference counter
     int count;
 
-    vertex_data_rep (void) : count (1) { }
+    vertex_data_rep (void) 
+      : coords (), color (), normal (), alpha (),
+        ambient (), diffuse (), specular (), specular_exp (),count (1) { }
 
     vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
                      double a, float as, float ds, float ss, float se)
         : coords (c), color (col), normal (n), alpha (a),
           ambient (as), diffuse (ds), specular (ss), specular_exp (se),
           count (1) { }
   };
 
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -43,17 +43,24 @@ along with Octave; see the file COPYING.
 #include "graphics.h"
 #include "txt-eng-ft.h"
 
 class
 OCTINTERP_API
 opengl_renderer
 {
 public:
-  opengl_renderer (void) { }
+  opengl_renderer (void)
+    : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
+    zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
+    camera_pos (), camera_dir () 
+#if HAVE_FREETYPE
+    , text_renderer ()
+#endif 
+  { }
 
   virtual ~opengl_renderer (void) { }
 
   virtual void draw (const graphics_handle& h)
     { draw (gh_manager::get_object (h)); }
 
   virtual void draw (const graphics_object& go);
 
@@ -106,17 +113,24 @@ protected:
   virtual Matrix render_text (const std::string& txt,
                               double x, double y, double z,
                               int halign, int valign, double rotation = 0.0);
 
   virtual void draw_pixels (GLsizei w, GLsizei h, GLenum format, 
                             GLenum type, const GLvoid *data);
 
 private:
-  opengl_renderer (const opengl_renderer&) { }
+  opengl_renderer (const opengl_renderer&) 
+    : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
+    zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
+    camera_pos (), camera_dir () 
+#if HAVE_FREETYPE
+    , text_renderer ()
+#endif
+    { }
 
   opengl_renderer& operator = (const opengl_renderer&)
     { return *this; }
 
   bool is_nan_or_inf (double x, double y, double z) const
     {
       return (xisnan (x) || xisnan (y) || xisnan (z)
               || xisinf (x) || xisinf (y) || xisinf (z));
diff --git a/src/gl2ps-renderer.h b/src/gl2ps-renderer.h
--- a/src/gl2ps-renderer.h
+++ b/src/gl2ps-renderer.h
@@ -27,17 +27,18 @@ along with Octave; see the file COPYING.
 #include "gl2ps.h"
 
 class 
 OCTINTERP_API
 glps_renderer : public opengl_renderer
 {
 public:
   glps_renderer (const int _fid, const std::string& _term) 
-    : opengl_renderer () , fid (_fid), term (_term) { }
+    : opengl_renderer () , fid (_fid), term (_term), 
+    fontsize (), fontname () { }
 
   ~glps_renderer (void) { }
 
   virtual void draw (const graphics_object& go);
 
 protected:
 
   virtual Matrix render_text (const std::string& txt,
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -52,26 +52,29 @@ extern void prep_lexer_for_function_file
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   lexical_feedback (void)
+
     : bracketflag (0), braceflag (0), looping (0),
       convert_spaces_to_comma (true), at_beginning_of_statement (true),
       defining_func (0), looking_at_function_handle (false),
       looking_at_return_list (false), looking_at_parameter_list (false),
       looking_at_decl_list (false), looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false), looking_at_object_index (),
-      looking_for_object_index (false), looking_at_indirect_ref (false),
-      parsed_function_name (), parsing_class_method (false),
-      maybe_classdef_get_set_method (false), parsing_classdef (false),
-      quote_is_transpose (false), pending_local_variables ()
+      looking_for_object_index (false), do_comma_insert (false), 
+      looking_at_indirect_ref (false), parsed_function_name (), 
+      parsing_class_method (false), maybe_classdef_get_set_method (false), 
+      parsing_classdef (false), quote_is_transpose (false), 
+      pending_local_variables ()
+
     {
       init ();
     }
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
diff --git a/src/ls-hdf5.h b/src/ls-hdf5.h
--- a/src/ls-hdf5.h
+++ b/src/ls-hdf5.h
@@ -38,21 +38,22 @@ class hdf5_fstreambase : virtual public 
 public:
 
   // HDF5 uses an "id" to refer to an open file
   hid_t file_id;
 
   // keep track of current item index in the file
   int current_item;
 
-  hdf5_fstreambase () { file_id = -1; }
+  hdf5_fstreambase () : file_id (-1), current_item () { }
 
   ~hdf5_fstreambase () { close (); }
 
   hdf5_fstreambase (const char *name, int mode, int /* prot */ = 0)
+    : file_id (-1), current_item (-1)
     {
       if (mode & std::ios::in)
         file_id = H5Fopen (name, H5F_ACC_RDONLY, H5P_DEFAULT);
       else if (mode & std::ios::out)
         {
           if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
             file_id = H5Fopen (name, H5F_ACC_RDWR, H5P_DEFAULT);
           else
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -328,17 +328,18 @@ octave_base_stream
 {
 friend class octave_stream;
 
 public:
 
   octave_base_stream (std::ios::openmode arg_md = std::ios::in|std::ios::out,
                       oct_mach_info::float_format ff
                         = oct_mach_info::native_float_format ())
-    : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true)
+    : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true),
+      errmsg ()
   { }
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -130,17 +130,17 @@ private:
 class
 octave_ostrstream : public octave_base_strstream
 {
 public:
 
   octave_ostrstream (std::ios::openmode arg_md = std::ios::out,
                      oct_mach_info::float_format ff
                        = oct_mach_info::native_float_format ())
-    : octave_base_strstream (arg_md, ff) { }
+    : octave_base_strstream (arg_md, ff), os () { }
 
   static octave_stream
   create (std::ios::openmode arg_md = std::ios::out,
           oct_mach_info::float_format ff
             = oct_mach_info::native_float_format ());
 
   // Return non-zero if EOF has been reached on this stream.
 
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -42,24 +42,24 @@ class tree_walker;
 template <class DMT, class MT>
 class
 octave_base_diag : public octave_base_value
 {
 
 public:
 
   octave_base_diag (void)
-    : octave_base_value () { }
+    : octave_base_value (), matrix (), dense_cache () { }
 
   octave_base_diag (const DMT& m)
-    : octave_base_value (), matrix (m)
+    : octave_base_value (), matrix (m), dense_cache ()
   { }
 
   octave_base_diag (const octave_base_diag& m)
-    : octave_base_value (), matrix (m.matrix) { }
+    : octave_base_value (), matrix (m.matrix), dense_cache () { }
 
   ~octave_base_diag (void) { }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix; }
 
   octave_value full_value (void) const { return to_dense (); }
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -44,17 +44,17 @@ class tree_walker;
 
 template <class MT>
 class
 octave_base_matrix : public octave_base_value
 {
 public:
 
   octave_base_matrix (void)
-    : octave_base_value (), typ (), idx_cache () { }
+    : octave_base_value (), matrix (), typ (), idx_cache () { }
 
   octave_base_matrix (const MT& m, const MatrixType& t = MatrixType ())
     : octave_base_value (), matrix (m), 
       typ (t.is_known () ? new MatrixType(t) : 0), idx_cache ()
   {
     if (matrix.ndims () == 0)
       matrix.resize (dim_vector (0, 0));
   }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -41,17 +41,17 @@ along with Octave; see the file COPYING.
 
 template <class ST>
 class
 octave_base_scalar : public octave_base_value
 {
 public:
 
   octave_base_scalar (void)
-    : octave_base_value () { }
+    : octave_base_value (), scalar () { }
 
   octave_base_scalar (const ST& s)
     : octave_base_value (), scalar (s) { }
 
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -44,17 +44,19 @@ class tree_walker;
 class octave_sparse_bool_matrix;
 
 template <class T>
 class
 octave_base_sparse : public octave_base_value
 {
  public:
  
-  octave_base_sparse (void) : octave_base_value (), typ (MatrixType ()) { }
+  octave_base_sparse (void)
+    : octave_base_value (), matrix (), typ (MatrixType ()) 
+  { }
 
   octave_base_sparse (const T& a) : octave_base_value (), matrix (a),
                                     typ (MatrixType ())
   {
     if (matrix.ndims () == 0)
       matrix.resize (dim_vector (0, 0));
   }
 
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -46,26 +46,26 @@ class tree_walker;
 // Cells.
 
 class
 octave_cell : public octave_base_matrix<Cell>
 {
 public:
 
   octave_cell (void)
-    : octave_base_matrix<Cell> () { }
+    : octave_base_matrix<Cell> (), cellstr_cache () { }
 
   octave_cell (const Cell& c)
-    : octave_base_matrix<Cell> (c) { }
+    : octave_base_matrix<Cell> (c), cellstr_cache () { }
 
   octave_cell (const Array<std::string>& str)
     : octave_base_matrix<Cell> (Cell (str)), cellstr_cache (new Array<std::string> (str)) { }
 
   octave_cell (const octave_cell& c)
-    : octave_base_matrix<Cell> (c) { }
+    : octave_base_matrix<Cell> (c), cellstr_cache () { }
 
   ~octave_cell (void) { }
 
   octave_base_value *clone (void) const { return new octave_cell (*this); }
   octave_base_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_base_value *try_narrowing_conversion (void);
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -45,20 +45,24 @@ class tree_walker;
 // Data structures.
 
 class
 octave_class : public octave_base_value
 {
 public:
 
   octave_class (void)
-    : octave_base_value (), obsolete_copies (0)  { }
+    : octave_base_value (), map (), c_name (), 
+      parent_list (), obsolete_copies (0)  
+    { }
 
   octave_class (const octave_map& m, const std::string& id)
-    : octave_base_value (), map (m), c_name (id), obsolete_copies (0) { }
+    : octave_base_value (), map (m), c_name (id), 
+      parent_list (), obsolete_copies (0) 
+    { }
 
   octave_class (const octave_class& s)
     : octave_base_value (s), map (s.map), c_name (s.c_name),
       parent_list (s.parent_list), obsolete_copies (0)  { }
 
   octave_class (const octave_map& m, const std::string& id, 
                 const octave_value_list& parents);
 
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -39,17 +39,19 @@ class octave_value_list;
 // Dynamically-linked functions.
 
 class
 OCTINTERP_API
 octave_dld_function : public octave_builtin
 {
 public:
 
-  octave_dld_function (void) { }
+  octave_dld_function (void) 
+    : sh_lib (), t_checked (), system_fcn_file () 
+  { }
 
   octave_dld_function (octave_builtin::fcn ff, const octave_shlib& shl,
                        const std::string& nm = std::string (),
                        const std::string& ds = std::string ());
 
   ~octave_dld_function (void);
 
   void mark_fcn_file_up_to_date (const octave_time& t) { t_checked = t; }
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -45,26 +45,26 @@ private:
 
   typedef std::map<std::string, octave_value> str_ov_map;
 
 public:
 
   static const std::string anonymous;
 
   octave_fcn_handle (void)
-    : fcn (), nm (), has_overloads (false) { }
+    : fcn (), nm (), has_overloads (false), overloads () { }
 
   octave_fcn_handle (const std::string& n)
-    : fcn (), nm (n), has_overloads (false) { }
+    : fcn (), nm (n), has_overloads (false), overloads () { }
 
   octave_fcn_handle (const octave_value& f,  const std::string& n = anonymous);
 
   octave_fcn_handle (const octave_fcn_handle& fh)
     : octave_base_value (fh), fcn (fh.fcn), nm (fh.nm),
-    has_overloads (fh.has_overloads)
+    has_overloads (fh.has_overloads), overloads ()
    {
      for (int i = 0; i < btyp_num_types; i++)
        builtin_overloads[i] = fh.builtin_overloads[i];
 
      overloads = fh.overloads;
    }
 
   ~octave_fcn_handle (void) { }
diff --git a/src/ov-lazy-idx.h b/src/ov-lazy-idx.h
--- a/src/ov-lazy-idx.h
+++ b/src/ov-lazy-idx.h
@@ -30,20 +30,20 @@ along with Octave; see the file COPYING.
 
 class
 OCTINTERP_API
 octave_lazy_index : public octave_base_value
 {
 public:
 
   octave_lazy_index (void)
-    : octave_base_value () { }
+    : octave_base_value (), index (), value () { }
 
   octave_lazy_index (const idx_vector& idx)
-    : octave_base_value (), index (idx) { } 
+    : octave_base_value (), index (idx), value () { } 
 
   octave_lazy_index (const octave_lazy_index& i)
     : octave_base_value (), index (i.index), value (i.value) { } 
 
   ~octave_lazy_index (void) { }
 
   octave_base_value *clone (void) const { return new octave_lazy_index (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -30,19 +30,19 @@ along with Octave; see the file COPYING.
 #include "ov-typeinfo.h"
 #include "oct-obj.h"
 
 class 
 OCTINTERP_API
 octave_perm_matrix : public octave_base_value
 {
 public:
-  octave_perm_matrix (void) : matrix () { }
+  octave_perm_matrix (void) : matrix (), dense_cache () { }
 
-  octave_perm_matrix (const PermMatrix& p) : matrix (p) { }
+  octave_perm_matrix (const PermMatrix& p) : matrix (p), dense_cache () { }
 
   octave_base_value *clone (void) const { return new octave_perm_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_perm_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -49,17 +49,17 @@ class tree_walker;
 // Range values.
 
 class
 octave_range : public octave_base_value
 {
 public:
 
   octave_range (void)
-    : octave_base_value (), idx_cache () { }
+    : octave_base_value (), range (), idx_cache () { }
 
   octave_range (double base, double limit, double inc)
     : octave_base_value (), range (base, limit, inc), idx_cache ()
       {
         if (range.nelem () < 0)
           ::error ("invalid range");
       }
 
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -44,17 +44,17 @@ class tree_walker;
 // Data structures.
 
 class
 octave_struct : public octave_base_value
 {
 public:
 
   octave_struct (void)
-    : octave_base_value () { }
+    : octave_base_value (), map () { }
 
   octave_struct (const octave_map& m)
     : octave_base_value (), map (m) { }
 
   octave_struct (const octave_struct& s)
     : octave_base_value (), map (s.map) { }
 
   ~octave_struct (void) { }
@@ -168,17 +168,17 @@ private:
 };
 
 class
 octave_scalar_struct : public octave_base_value
 {
 public:
 
   octave_scalar_struct (void)
-    : octave_base_value () { }
+    : octave_base_value (), map () { }
 
   octave_scalar_struct (const octave_scalar_map& m)
     : octave_base_value (), map (m) { }
 
   octave_scalar_struct (const octave_scalar_struct& s)
     : octave_base_value (), map (s.map) { }
 
   ~octave_scalar_struct (void) { }
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include "oct-procbuf.h"
 
 class
 OCTINTERP_API
 procstreambase : virtual public std::ios
 {
 public:
 
-  procstreambase (void) { pb_init (); }
+  procstreambase (void) : pb () { pb_init (); }
 
   procstreambase (const std::string& name, int mode);
 
   procstreambase (const char *name, int mode);
 
   ~procstreambase (void) { close (); }
 
   void open (const std::string& name, int mode)
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -41,18 +41,18 @@ class octave_lvalue;
 
 class
 tree_simple_assignment : public tree_expression
 {
 public:
 
   tree_simple_assignment (bool plhs = false, int l = -1, int c = -1,
                           octave_value::assign_op t = octave_value::op_asn_eq)
-    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype (t),
-      first_execution (true) { }
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), ans_ass (),
+      etype (t), first_execution (true) { }
 
   tree_simple_assignment (tree_expression *le, tree_expression *re,
                           bool plhs = false, int l = -1, int c = -1,
                           octave_value::assign_op t = octave_value::op_asn_eq);
 
   ~tree_simple_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -524,19 +524,19 @@ public:
 
     class
     fcn_info_rep
     {
     public:
 
       fcn_info_rep (const std::string& nm)
         : name (nm), subfunctions (), private_functions (),
-          class_constructors (), class_methods (), cmdline_function (),
-          autoload_function (), function_on_path (), built_in_function (),
-          count (1) { }
+          class_constructors (), class_methods (), dispatch_map (),
+          cmdline_function (), autoload_function (), function_on_path (), 
+          built_in_function (), count (1) { }
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
       octave_value find (const octave_value_list& args, bool local_funcs);
@@ -1942,17 +1942,17 @@ private:
   static const scope_id xglobal_scope;
   static const scope_id xtop_scope;
 
   static scope_id xcurrent_scope;
 
   static context_id xcurrent_context;
 
   symbol_table (void)
-    : table_name (), table (), curr_fcn (0) { }
+    : table_name (), table (), curr_fcn (0), persistent_table () { }
 
   ~symbol_table (void) { }
 
   static symbol_table *get_instance (scope_id scope, bool create = true)
   {
     symbol_table *retval = 0;
 
     bool ok = true;
