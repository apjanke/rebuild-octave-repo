# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1374111731 14400
#      Wed Jul 17 21:42:11 2013 -0400
# Node ID 90d50e56a06ad2c284b6c99a6988768642933cae
# Parent  a1d091243d11cab89cebfaa52304b93d43786b9c
Add sortable table headers to find_files_dialog results

* libgui/src/find-files-dialog.cc
  (find_files_dialog::find_files_dialog): enable sorting of rows in _file_list.

* libgui/src/find-files-model.cc, libgui/src/find-files-model.h
  (global): New local class find_file_less_than.
  (find_files_model::find_files_model): Add/initialize _sortorder var.
  (find_files_model::addFile): Find pos to add data to sorted entries.
  (find_files_model::sort): New function.

diff --git a/libgui/src/find-files-dialog.cc b/libgui/src/find-files-dialog.cc
--- a/libgui/src/find-files-dialog.cc
+++ b/libgui/src/find-files-dialog.cc
@@ -91,26 +91,30 @@ find_files_dialog::find_files_dialog (QW
   _contains_text_edit = new QLineEdit ();
   _contains_text_edit->setToolTip (tr ("Text to match"));
   _contains_text_edit->setText (settings->value ("findfiles/contains_text", "").toString());
 
   _content_case_check = new QCheckBox (tr("Text case insensitive"));
   _content_case_check->setChecked (settings->value ("findfiles/content_case", false).toBool());
   _content_case_check->setToolTip (tr ("Set text content is case insensitive"));
   
-  find_files_model * model = new find_files_model ();
+  find_files_model * model = new find_files_model (this);
+
   _file_list = new QTableView;
   _file_list->setWordWrap (false);
   _file_list->setModel (model);
   _file_list->setShowGrid (false);
   _file_list->setSelectionBehavior(QAbstractItemView::SelectRows);
   _file_list->setSelectionMode(QAbstractItemView::SingleSelection);
   _file_list->setAlternatingRowColors(true);
   _file_list->setToolTip (tr ("Search results"));
+  _file_list->setSortingEnabled (true);
   _file_list->horizontalHeader ()->restoreState (settings->value ("findfiles/column_state").toByteArray ());
+  _file_list->horizontalHeader ()->setSortIndicatorShown (true);
+  _file_list->horizontalHeader ()->setClickable (true);
   _file_list->horizontalHeader ()->setStretchLastSection (true);
   _file_list->sortByColumn (
               settings->value ("findfiles/sort_files_by_column",0).toInt (),
               static_cast<Qt::SortOrder>(settings->value ("findfiles/sort_files_by_order",Qt::AscendingOrder).toUInt ()));
 
   connect (_file_list, SIGNAL(doubleClicked(const QModelIndex&)),
            this,       SLOT(item_double_clicked(const QModelIndex &)));
 
diff --git a/libgui/src/find-files-model.cc b/libgui/src/find-files-model.cc
--- a/libgui/src/find-files-model.cc
+++ b/libgui/src/find-files-model.cc
@@ -17,22 +17,70 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #include "find-files-model.h"
 #include <QFileIconProvider>
+#include <QtAlgorithms>
+
+class find_file_less_than
+{
+public:
+  find_file_less_than (int ord)
+  {
+    _sortorder = ord;
+  }
+  QVariant getValue (const QFileInfo &f) const
+  {
+     QVariant val;
+     int col = (_sortorder > 0) ? _sortorder : -_sortorder;
+
+     switch (col-1)
+       {
+         case 0:
+           val = QVariant (f.fileName());
+           break;
+
+         case 1:
+           val = QVariant (f.absolutePath());
+           break;
+
+         default:
+            break;
+        }
+     return val;
+  }
+  bool lessThan (const QVariant &left, const QVariant &right) const
+  {
+    return left.toString ().compare (right.toString (), Qt::CaseInsensitive) < 0;
+  }
+  bool operator () (const QFileInfo &left, const QFileInfo &right) const
+  {
+     QVariant leftval = getValue(left);
+     QVariant rightval = getValue(right);
+
+     if (_sortorder > 0)
+        return lessThan(leftval, rightval);
+     else
+        return ! lessThan(leftval, rightval);
+  }
+private:
+  int _sortorder;
+};
+
 
 find_files_model::find_files_model (QObject *p)
   : QAbstractListModel(p)
 {
   _columnNames.append (tr ("Filename"));
   _columnNames.append (tr ("Directory"));
+  _sortorder = 0;
 }
 
 find_files_model::~find_files_model ()
 {
 }
 
 void 
 find_files_model::clear ()
@@ -42,21 +90,29 @@ find_files_model::clear ()
   _files.clear();
 
   endResetModel ();
 }
 
 void 
 find_files_model::addFile (const QFileInfo &info)
 {
-  beginInsertRows(QModelIndex(), _files.size(), _files.size() );
+  beginInsertRows (QModelIndex (), _files.size (), _files.size () );
+
+  QList<QFileInfo>::Iterator it; 
+  find_file_less_than less_than(_sortorder);
 
-  _files.append(info);
+  for (it=_files.begin ();it!=_files.end ();it++)
+    {
+      if (less_than (info, *it)) break;
+    }
 
-  endInsertRows(); 
+  _files.insert (it, info);
+
+  endInsertRows (); 
 }
 
 int 
 find_files_model::rowCount (const QModelIndex & p) const
 {
   return _files.size();
 }
 
@@ -108,16 +164,37 @@ QVariant
 find_files_model::headerData (int section, Qt::Orientation orientation, int role) const
 {
   if (orientation == Qt::Horizontal && role == Qt::DisplayRole)
     return _columnNames[section];
   else
     return QVariant ();
 }
 
+void
+find_files_model::sort (int column, Qt::SortOrder order)
+{
+  if(column >= 0)
+    {
+      if (order == Qt::DescendingOrder)
+        _sortorder = -(column+1);
+      else
+        _sortorder = column+1;
+    }
+  else
+    _sortorder = 0;
+
+  if (_sortorder != 0)
+    {
+      beginResetModel ();
+      qSort (_files.begin (), _files.end (), find_file_less_than (_sortorder));
+      endResetModel ();
+    }
+}
+
 QFileInfo 
 find_files_model::fileInfo (const QModelIndex & p) const
 {
   if(p.isValid ())
   {
     return _files[p.row()];
   }
   return QFileInfo ();
diff --git a/libgui/src/find-files-model.h b/libgui/src/find-files-model.h
--- a/libgui/src/find-files-model.h
+++ b/libgui/src/find-files-model.h
@@ -45,17 +45,20 @@ public:
 
   int columnCount(const QModelIndex & p=QModelIndex()) const;
 
   QVariant data (const QModelIndex& idx, int role) const;
 
   QVariant headerData (int section, Qt::Orientation orientation,
                        int role = Qt::DisplayRole) const;
 
+  void sort (int column, Qt::SortOrder order=Qt::AscendingOrder);
+
   QFileInfo fileInfo (const QModelIndex & p) const;
   QIcon     fileIcon (const QModelIndex &p) const;
 private:
   QList<QFileInfo> _files;
   QStringList _columnNames;
+  int _sortorder;
 };
 
 #endif // find_files_model_h
 
