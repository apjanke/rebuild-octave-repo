# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1249028264 -7200
#      Fri Jul 31 10:17:44 2009 +0200
# Node ID 4d3d90253e8ab584af29849c5de4066763da7561
# Parent  d9b25c5b8ee5feab79371c502ac3895b1b56000f
optimize common_size

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-07-31  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/common_size: Optimize.
+
 2009-07-29  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Fix ticklabels specified as 2D character
 	array.
 	* plot/__go_draw_axes__.m: Ignore fontnames for the Lua-TikZ terminal.
 	* plot/gnuplot_drawnow.m: Support the gnuplot terminal Lua-TikZ.
 	* plot/print.m: Support the gnuplot terminal Lua-TikZ.
 
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -1,10 +1,11 @@
 ## Copyright (C) 1995, 1996, 1999, 2000, 2002, 2004, 2005, 2007
 ##               Kurt Hornik
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -37,46 +38,40 @@
 ## @noindent
 ## This is useful for implementing functions where arguments can either
 ## be scalars or of common size.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
+## Optimized-By: Jaroslav Hajek
 
 function [errorcode, varargout] = common_size (varargin)
 
   if (nargin < 2)
     error ("common_size: only makes sense if nargin >= 2");
   endif
 
-  len = 2;
-  for i = 1 : nargin
-    sz =  size (varargin{i});
-    if (length (sz) < len)
-      s(i,:) = [sz, ones(1,len - length(sz))];
-    else
-      if (length (sz) > len)
-	if (i > 1)
-	  s = [s, ones(size(s,1), length(sz) - len)];
-	endif
-	len = length (sz);
-      endif
-      s(i,:) = sz;
-    endif
-  endfor
+  ## Find scalar args.
+  nscal = cellfun ("numel", varargin) != 1;
 
-  m = max (s);
-  if (any (any ((s != 1)') & any ((s != ones (nargin, 1) * m)')))
-    errorcode = 1;
+  i = find (nscal, 1);
+
+  if (isempty (i))
+    errorcode = 0;
     varargout = varargin;
   else
-    errorcode = 0;
-    for i = 1 : nargin
-      varargout{i} = varargin{i};
-      if (prod (s(i,:)) == 1)
-	varargout{i} *= ones (m);
+    match = cellfun (@size_equal, varargin, varargin(i));
+    if (any (nscal &! match))
+      errorcode = 1;
+      varargout = varargin;
+    else
+      errorcode = 0;
+      if (nargout > 1)
+        scal = !nscal;
+        varargout = varargin;
+        varargout(scal) = cellfun (@repmat, varargin(scal), {size(varargin{i})}, ...
+                                   "UniformOutput", false);
       endif
-    endfor
+    endif
   endif
-
 endfunction
