# HG changeset patch
# User jwe
# Date 1043436050 0
#      Fri Jan 24 19:20:50 2003 +0000
# Node ID fd034cd46aea19aac49ec1931c4a0f0592fe9de4
# Parent  6d3df3900252b6fd7f43babcc5c0aa81b751d911
[project @ 2003-01-24 19:20:50 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-rand.h, oct-rand.cc: New files.
+	* Makefile.in: Add them to the appropriate lists.
+
 2003-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>::index): Fix off-by-one error.
 
 2003-01-16  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* oct-syscalls.cc: Include signal.h.
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -56,17 +56,17 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h \
 	NLFunc.h NLP.h ODE.h ODEFunc.h ODES.h ODESFunc.h \
 	ODESSA.h Objective.h QP.h Quad.h Range.h base-dae.h \
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h \
 	glob-match.h idx-vector.h lo-ieee.h lo-mappers.h \
 	lo-specfun.h lo-sstream.h lo-sysdep.h lo-utils.h \
 	mach-info.h oct-alloc.h oct-cmplx.h oct-env.h oct-fftw.h \
-	oct-getopt.h oct-group.h oct-kpse.h oct-passwd.h \
+	oct-getopt.h oct-group.h oct-kpse.h oct-passwd.h oct-rand.h \
 	oct-rl-edit.h oct-rl-hist.h oct-shlib.h oct-syscalls.h \
 	oct-time.h pathlen.h pathsearch.h prog-args.h statdefs.h \
 	str-vec.h sun-utils.h sysdir.h systime.h syswait.h \
 	$(OPTS_INC) \
 	$(MATRIX_INC) \
 	$(MX_OP_INC) \
 	$(VX_OP_INC)
 
@@ -97,17 +97,17 @@ VX_OP_SRC := vx-ccv-s.cc vx-crv-s.cc vx-
 
 LIBOCTAVE_CXX_SOURCES := Bounds.cc CollocWt.cc \
 	DASPK.cc DASRT.cc DASSL.cc FEGrid.cc LinConst.cc \
 	LPsolve.cc LSODE.cc NLEqn.cc ODES.cc ODESSA.cc \
 	Quad.cc Range.cc data-conv.cc dir-ops.cc \
 	file-ops.cc file-stat.cc glob-match.cc idx-vector.cc \
 	lo-ieee.cc lo-mappers.cc lo-specfun.cc lo-sysdep.cc \
 	lo-utils.cc mach-info.cc oct-alloc.cc oct-env.cc \
-	oct-fftw.cc oct-group.cc oct-passwd.cc oct-shlib.cc \
+	oct-fftw.cc oct-group.cc oct-passwd.cc oct-rand.cc oct-shlib.cc \
 	oct-syscalls.cc oct-time.cc prog-args.cc str-vec.cc \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC) \
 	$(MX_OP_SRC) \
 	$(VX_OP_SRC)
 
 LIBOCTAVE_C_SOURCES := f2c-main.c filemode.c \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2003-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/rand.cc: Rewrite to use new octave_rand functions.
+
 2003-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (octave_base_stream::do_printf): Handle values
 	outside the range of integers in int conversions for
 	compatibilitiy wtih Matlab.
 
 2003-01-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -25,149 +25,30 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <ctime>
 
 #include <string>
 
 #include "f77-fcn.h"
 #include "lo-mappers.h"
+#include "oct-rand.h"
 #include "quit.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
-// Possible distributions of random numbers.  This was handled with an
-// enum, but unwind_protecting that doesn't work so well.
-#define uniform_dist 1
-#define normal_dist 2
-
-// Current distribution of random numbers.
-static int current_distribution = uniform_dist;
-
-// Has the seed been set yet?
-static int initialized = 0;
-
-extern "C"
-{
-  int F77_FUNC (dgennor, DGENNOR) (const double&, const double&,
-				  double&);
-
-  int F77_FUNC (dgenunf, DGENUNF) (const double&, const double&,
-				  double&);
-
-  int F77_FUNC (setall, SETALL) (const int&, const int&);
-
-  int F77_FUNC (getsd, GETSD) (int&, int&);
-
-  int F77_FUNC (setsd, SETSD) (const int&, const int&);
-
-  int F77_FUNC (setcgn, SETCGN) (const int&);
-}
-
-static double
-curr_rand_seed (void)
-{
-  union d2i { double d; int i[2]; };
-  union d2i u;
-  F77_FUNC (getsd, GETSD) (u.i[0], u.i[1]);
-  return u.d;
-}
-
-static int
-force_to_fit_range (int i, int lo, int hi)
-{
-  assert (hi > lo && lo >= 0 && hi > lo);
-
-  i = i > 0 ? i : -i;
-
-  if (i < lo)
-    i = lo;
-  else if (i > hi)
-    i = i % hi;
-
-  return i;
-}
-
-static void
-set_rand_seed (double val)
-{
-  union d2i { double d; int i[2]; };
-  union d2i u;
-  u.d = val;
-  int i0 = force_to_fit_range (u.i[0], 1, 2147483563);
-  int i1 = force_to_fit_range (u.i[1], 1, 2147483399);
-  F77_FUNC (setsd, SETSD) (i0, i1);
-}
-
-static const char *
-curr_rand_dist (void)
-{
-  if (current_distribution == uniform_dist)
-    return "uniform";
-  else if (current_distribution == normal_dist)
-    return "normal";
-  else
-    {
-      panic_impossible ();
-      return 0;
-    }
-}
-
-// Make the random number generator give us a different sequence every
-// time we start octave unless we specifically set the seed.  The
-// technique used below will cycle monthly, but it it does seem to
-// work ok to give fairly different seeds each time Octave starts.
-
-static void
-do_initialization (void)
-{
-  time_t now;
-  struct tm *tm;
- 
-  time (&now);
-  tm = localtime (&now);
- 
-  int hour = tm->tm_hour + 1;
-  int minute = tm->tm_min + 1;
-  int second = tm->tm_sec + 1;
-
-  int s0 = tm->tm_mday * hour * minute * second;
-  int s1 = hour * minute * second;
-
-  s0 = force_to_fit_range (s0, 1, 2147483563);
-  s1 = force_to_fit_range (s1, 1, 2147483399);
-
-  F77_FUNC (setall, SETALL) (s0, s1);
-
-  initialized = 1;
-}
-
-#define MAKE_RAND_MAT(mat, nr, nc, f, F) \
-  do \
-    { \
-      double val; \
-      for (volatile int j = 0; j < nc; j++) \
-	for (volatile int i = 0; i < nr; i++) \
-	  { \
-	    OCTAVE_QUIT; \
-	    F77_FUNC (f, F) (0.0, 1.0, val); \
-	    mat(i,j) = val; \
-	  } \
-    } \
-  while (0)
-
-static octave_value_list
+static octave_value
 do_rand (const octave_value_list& args, int nargin)
 {
-  octave_value_list retval;
+  octave_value retval;
 
   volatile int n = 0;
   volatile int m = 0;
 
   if (nargin == 0)
     {
       n = 1;
       m = 1;
@@ -179,33 +60,29 @@ do_rand (const octave_value_list& args, 
       octave_value tmp = args(0);
 
       if (tmp.is_string ())
 	{
 	  std::string s_arg = tmp.string_value ();
 
 	  if (s_arg == "dist")
 	    {
-	      retval(0) = curr_rand_dist ();
+	      retval = octave_rand::distribution ();
 	    }
 	  else if (s_arg == "seed")
 	    {
-	      retval(0) = curr_rand_seed ();
+	      retval = octave_rand::seed ();
 	    }
 	  else if (s_arg == "uniform")
 	    {
-	      current_distribution = uniform_dist;
-
-	      F77_FUNC (setcgn, SETCGN) (uniform_dist);
+	      octave_rand::uniform_distribution ();
 	    }
 	  else if (s_arg == "normal")
 	    {
-	      current_distribution = normal_dist;
-
-	      F77_FUNC (setcgn, SETCGN) (normal_dist);
+	      octave_rand::normal_distribution ();
 	    }
 	  else
 	    error ("rand: unrecognized string argument");
 	}
       else if (tmp.is_scalar_type ())
 	{
 	  double dval = tmp.double_value ();
 
@@ -266,17 +143,17 @@ do_rand (const octave_value_list& args, 
     {
       if (args(0).is_string ())
 	{
 	  if (args(0).string_value () == "seed")
 	    {
 	      double d = args(1).double_value ();
 
 	      if (! error_state)
-		set_rand_seed (d);
+		octave_rand::seed (d);
 	    }
 	  else
 	    error ("rand: unrecognized string argument");
 	}
       else
 	{
 	  double dval = args(0).double_value ();
 
@@ -298,46 +175,17 @@ do_rand (const octave_value_list& args, 
 	    }
 	}
     }
 
   return retval;
 
  gen_matrix:
 
-  if (n == 0 || m == 0)
-    {
-      Matrix m;
-      retval.resize (1, m);
-    }
-  else if (n > 0 && m > 0)
-    {
-      Matrix rand_mat (n, m);
-
-      switch (current_distribution)
-	{
-	case uniform_dist:
-	  MAKE_RAND_MAT (rand_mat, n, m, dgenunf, DGENUNF);
-	  break;
-
-	case normal_dist:
-	  MAKE_RAND_MAT (rand_mat, n, m, dgennor, DGENNOR);
-	  break;
-
-	default:
-	  panic_impossible ();
-	  break;
-	}
-
-      retval(0) = rand_mat;
-    }
-  else
-    error ("rand: invalid negative argument");
-
-  return retval;
+  return octave_rand::matrix (n, m);
 }
 
 DEFUN_DLD (rand, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} rand (@var{x})\n\
 @deftypefnx {Loadable Function} {} rand (@var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} rand (@code{\"seed\"}, @var{x})\n\
 Return a matrix with random elements uniformly distributed on the\n\
@@ -356,37 +204,34 @@ where @var{x} is a scalar value.  If cal
 @example\n\
 rand (\"seed\")\n\
 @end example\n\
 \n\
 @noindent\n\
 @code{rand} returns the current value of the seed.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 2 || nargout > 1)
     print_usage ("rand");
   else
-    {
-      if (! initialized)
-	do_initialization ();
-
-      retval = do_rand (args, nargin);
-    }
+    retval = do_rand (args, nargin);
 
   return retval;
 }
 
+static std::string current_distribution = octave_rand::distribution ();
+
 static void
 reset_rand_generator (void *)
 {
-  F77_FUNC (setcgn, SETCGN) (current_distribution);
+  octave_rand::distribution (current_distribution);
 }
 
 DEFUN_DLD (randn, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} randn (@var{x})\n\
 @deftypefnx {Loadable Function} {} randn (@var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} randn (@code{\"seed\"}, @var{x})\n\
 Return a matrix with normally distributed random elements.  The\n\
@@ -404,40 +249,37 @@ where @var{x} is a scalar value.  If cal
 @example\n\
 randn (\"seed\")\n\
 @end example\n\
 \n\
 @noindent\n\
 @code{randn} returns the current value of the seed.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 2 || nargout > 1)
     print_usage ("randn");
   else
     {
-      if (! initialized)
-	do_initialization ();
-
       unwind_protect::begin_frame ("randn");
 
       // This relies on the fact that elements are popped from the
       // unwind stack in the reverse of the order they are pushed
       // (i.e. current_distribution will be reset before calling
       // reset_rand_generator()).
 
       unwind_protect::add (reset_rand_generator, 0);
-      unwind_protect_int (current_distribution);
+      unwind_protect_str (current_distribution);
 
-      current_distribution = normal_dist;
+      current_distribution = "normal";
 
-      F77_FUNC (setcgn, SETCGN) (normal_dist);
+      octave_rand::distribution (current_distribution);
 
       retval = do_rand (args, nargin);
 
       unwind_protect::run_frame ("randn");
     }
 
   return retval;
 }
