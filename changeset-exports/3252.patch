# HG changeset patch
# User jwe
# Date 931998845 0
#      Thu Jul 15 00:34:05 1999 +0000
# Node ID 9c784bd188582032e1201bb91b3f9b6ec9b9a336
# Parent  75e84fc9f4de605c4a5e4198156359d651dee8b3
[project @ 1999-07-15 00:33:12 by jwe]

diff --git a/liboctave/systime.h b/liboctave/systime.h
new file mode 100644
--- /dev/null
+++ b/liboctave/systime.h
@@ -0,0 +1,43 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_systime_h)
+#define octave_systime_h 1
+
+#ifdef TIME_WITH_SYS_TIME
+#include <sys/time.h>
+#include <time.h>
+#else
+#ifdef HAVE_SYS_TIME_H
+#include <sys/time.h>
+#else
+#include <time.h>
+#endif
+#endif
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+Wed Jul 14 17:38:46 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* systime.h: Move to liboctave directory.
+	* Makefile.in (INCLUDES): Delete it from the list
+
+Tue Jul 13 14:34:57 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (sigchld_handler): Only wait for processes in
+	octave_child_list.
+	* toplev.cc (cmd_status): Delete unused static variable.
+	(cmd_death_handler): Delete unused function.
+	(run_command_and_return_output): Don't add cmd_death_handler to
+	octave_child_list.  Simply extract command exit status from
+	calling close() on the procstream object.
+
 Mon Jul 12 22:38:50 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defun.h (DEFUN_MAPPER): Handle new args, d_b_map and c_b_map.
 	* defun-int.h (DEFUN_MAPPER_INTERNAL): Likewise.
 	* mappers.cc (install_mapper_functions): Supply new args to
 	all uses of DEFUN_MAPPER.
 	* ov-mapper.cc (octave_mapper::apply): Handle mapper functions
 	that return bool objects.
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -203,43 +203,36 @@ sigchld_handler (int /* sig */)
 #endif
 
   sigset_t set, oset;
 
   BLOCK_CHILD (set, oset);
 
   int n = octave_child_list::length ();
 
-  if (n == 0)
-    {
-      waitpid (-1, 0, WNOHANG);
-    }
-  else
+  for (int i = 0; i < n; i++)
     {
-      for (int i = 0; i < n; i++)
-	{
-	  octave_child& elt = octave_child_list::elem (i);
+      octave_child& elt = octave_child_list::elem (i);
+
+      pid_t pid = elt.pid;
 
-	  pid_t pid = elt.pid;
+      if (pid > 0)
+	{
+	  int status;
 
-	  if (pid > 0)
+	  if (waitpid (pid, &status, WNOHANG) > 0)
 	    {
-	      int status;
+	      elt.pid = -1;
 
-	      if (waitpid (pid, &status, WNOHANG) > 0)
-		{
-		  elt.pid = -1;
+	      octave_child::dead_child_handler f = elt.handler;
 
-		  octave_child::dead_child_handler f = elt.handler;
+	      if (f)
+		f (pid, status);
 
-		  if (f)
-		    f (pid, status);
-
-		  break;
-		}
+	      break;
 	    }
 	}
     }
 
   octave_set_interrupt_handler (saved_interrupt_handler);
 
   UNBLOCK_CHILD (oset);
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -275,24 +275,16 @@ along with this program. If not, write t
 Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\
 \n";
 
   return retval;
 }
 
 // Execute a shell command.
 
-static int cmd_status = 0;
-
-static void
-cmd_death_handler (pid_t, int status)
-{
-  cmd_status = status;
-}
-
 static void
 cleanup_iprocstream (void *p)
 {
   iprocstream *cmd = static_cast<iprocstream *> (p);
 
   octave_child_list::remove (cmd->pid ());
 
   delete cmd;
@@ -300,22 +292,18 @@ cleanup_iprocstream (void *p)
 
 static octave_value_list
 run_command_and_return_output (const string& cmd_str)
 {
   octave_value_list retval;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
-  cmd_status = -1;
-
   if (cmd)
     {
-      octave_child_list::insert (cmd->pid (), cmd_death_handler);
-
       unwind_protect::add (cleanup_iprocstream, cmd);
 
       if (*cmd)
 	{
 	  ostrstream output_buf;
 
 	  // XXX FIXME XXX -- sometimes, the subprocess hasn't written
 	  // anything before we try to read from the procstream.  The
@@ -339,26 +327,17 @@ run_command_and_return_output (const str
 #else
 	      sleep (1);
 #endif
 	    }
 
 	  while (cmd->get (ch))
 	    output_buf.put (ch);
 
-	  cmd->close ();
-
-	  // One way or another, cmd_death_handler should be called
-	  // when the process exits, and it will save the exit status
-	  // of the command in cmd_status.
-
-	  // The value in cmd_status is as returned by waitpid.  If
-	  // the process exited normally, extract the actual exit
-	  // status of the command.  Otherwise, return 127 as a
-	  // failure code.
+	  int cmd_status = cmd->close ();
 
 	  if (WIFEXITED (cmd_status))
 	    cmd_status = WEXITSTATUS (cmd_status);
 	  else
 	    cmd_status = 127;
 
 	  output_buf << ends;
 
