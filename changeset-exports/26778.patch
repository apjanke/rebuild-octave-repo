# HG changeset patch
# User Rik <rik@octave.org>
# Date 1550861474 28800
#      Fri Feb 22 10:51:14 2019 -0800
# Node ID 8cad08868ffd907caf9fe309902515391f2fb221
# Parent  52f42a8187171f163d25f327fc297404b35a0ad0
Return help text for properties() function (bug #55764).

* ov-classdef.cc (Fproperties): Rewrite docstring and add @seealso link to
methods.

* op-kw-docs: Move documentation for keyword "properties" in to the header
section of the file which is not translated to the DOCSTRINGS file.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -496,22 +496,27 @@ Returns the meta.class object correspond
 
 // FIXME: What about dynamic properties if obj is a scalar, or the
 // properties of the class of obj if obj is an array?  Probably there
 // should be a function to do this job so that the DEFUN is just a
 // simple wrapper.
 
 DEFUN (properties, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn {} {} properties (@var{class_name})
+@deftypefn  {} {} properties (@var{class_name})
 @deftypefnx {} {} properties (@var{obj})
 @deftypefnx {} {@var{plist} =} properties (@dots{})
-Return or display the properties for the named class @var{class_name}
-or classdef object @var{obj}.  If an output value is requested, return
-list of property names in a cell array.
+Return or display the public properties for the named class @var{class_name} or
+classdef object @var{obj}.
+
+If an output value is requested, return the list of property names in a cell
+array.
+
+Programming Note: Property names are returned if the @code{GetAccess} attribute is public and if the @code{Hidden} attribute is false.
+@seealso{methods}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   std::string class_name;
@@ -535,17 +540,17 @@ list of property names in a cell array.
   std::list<std::string> property_names;
 
   for (const auto& pname_prop : property_map)
     {
       std::string nm = pname_prop.second.get_name ();
 
       octave_value acc = pname_prop.second.get ("GetAccess");
 
-      if (! acc.is_string() || acc.string_value () != "public")
+      if (! acc.is_string () || acc.string_value () != "public")
         continue;
 
       property_names.push_back (nm);
     }
 
   if (nargout > 0)
     return octave_value (Cell (string_vector (property_names)));
 
diff --git a/libinterp/op-kw-docs b/libinterp/op-kw-docs
--- a/libinterp/op-kw-docs
+++ b/libinterp/op-kw-docs
@@ -11,16 +11,27 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
+## FIXME: Can't have duplicate DOCSTRING entries.  The function properties
+##        already has a docstring which overrides this keyword definition.
+##        If this is ever fixed this entry can be re-inserted after the
+##        keyword "persistent".
+## properties
+##  libinterp/parse-tree/oct-parse.yy
+## -*- texinfo -*-
+## @deftypefn {} {} properties
+## Begin a properties block in a classdef definition.
+## @end deftypefn
+
 !
 @c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} !
 Logical 'not' operator.
 @seealso{~, not}
 @end deftypefn
 ~
@@ -702,24 +713,16 @@ Declare variables as persistent.
 
 A variable that has been declared persistent within a function will retain its
 contents in memory between subsequent calls to the same function.  The
 difference between persistent variables and global variables is that persistent
 variables are local in scope to a particular function and are not visible
 elsewhere.
 @seealso{global}
 @end deftypefn
-@c ## FIXME: Can't have duplicate DOCSTRING entries.  The function properties
-@c ##        already has a docstring which overrides this keyword definition.
-@c properties
-@c  libinterp/parse-tree/oct-parse.yy
-@c -*- texinfo -*-
-@c @deftypefn {} {} properties
-@c Begin a properties block in a classdef definition.
-@c @end deftypefn
 return
 @c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} return
 Return from a function.
 @seealso{function}
 @end deftypefn
 switch
