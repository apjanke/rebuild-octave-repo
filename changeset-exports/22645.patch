# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476911087 25200
#      Wed Oct 19 14:04:47 2016 -0700
# Branch stable
# Node ID 34bf558de12711e98baf4b20ac5f7942b4480d0e
# Parent  23941beb44cda7ad239682955dbe0cba26eff045
integrate_adaptive.m: Take strcmp call out of for loop for performance.

* integrate_adaptive.m: Calculate value of NormControl option
just once, rather than in every loop.
Fix cuddling of parenthesis to indicate indexing.

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -111,16 +111,17 @@ function solution = integrate_adaptive (
   endif
 
   solution.cntloop = 0;
   solution.cntcycles = 0;
   solution.cntsave = 2;
   solution.unhandledtermination = true;
   ireject = 0;
 
+  NormControl = strcmp (options.NormControl, "on");
   k_vals = [];
   iout = istep = 1;
 
   while (dir * t_old < dir * tspan(end))
 
     ## Compute integration step from t_old to t_new = t_old + dt
     [t_new, options.comp] = kahan (t_old, options.comp, dt);
     [t_new, x_new, x_est, new_k_vals] = ...
@@ -128,19 +129,18 @@ function solution = integrate_adaptive (
 
     solution.cntcycles += 1;
 
     if (options.havenonnegative)
       x_new(nn, end) = abs (x_new(nn, end));
       x_est(nn, end) = abs (x_est(nn, end));
     endif
 
-    ## FIXME: Take strcmp out of while loop and calculate just once
     err = AbsRel_norm (x_new, x_old, options.AbsTol, options.RelTol,
-                       strcmp (options.NormControl, "on"), x_est);
+                       NormControl, x_est);
 
     ## Accept solution only if err <= 1.0
     if (err <= 1)
 
       solution.cntloop += 1;
       ireject = 0;              # Clear reject counter
 
       ## if output time steps are fixed
@@ -284,17 +284,17 @@ function solution = integrate_adaptive (
       endif
 
     endif
 
     ## Compute next timestep, formula taken from Hairer
     err += eps;  # avoid divisions by zero
     dt *= min (facmax, max (facmin, fac * (1 / err)^(1 / (order + 1))));
     dt = dir * min (abs (dt), options.MaxStep);
-    if (! (abs (dt) > eps (t (end))))
+    if (! (abs (dt) > eps (t(end))))
       break;
     endif
 
     ## Make sure we don't go past tpan(end)
     dt = dir * min (abs (dt), abs (tspan(end) - t_old));
 
   endwhile
 
