# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1511083874 -3600
#      Sun Nov 19 10:31:14 2017 +0100
# Node ID 508d27e82ad11446e26d0cf0fc560a19f8bdc7c6
# Parent  ca03c9f3fa4bb5262ef215e2edd9a36832c1967b
dim-vector.cc: rewrite dim-vector.cc::squeeze using existing functions

diff --git a/liboctave/array/dim-vector.cc b/liboctave/array/dim-vector.cc
--- a/liboctave/array/dim-vector.cc
+++ b/liboctave/array/dim-vector.cc
@@ -117,63 +117,21 @@ dim_vector::safe_numel (void) const
 
   return n;
 }
 
 dim_vector
 dim_vector::squeeze (void) const
 {
   dim_vector new_dims = *this;
-
-  bool dims_changed = 1;
-
-  int k = 0;
-
-  for (int i = 0; i < ndims (); i++)
-    {
-      if (xelem (i) == 1)
-        dims_changed = true;
-      else
-        new_dims(k++) = xelem (i);
-    }
-
-  if (dims_changed)
-    {
-      if (k == 0)
-        new_dims = dim_vector (1, 1);
-      else if (k == 1)
-        {
-          // There is one non-singleton dimension, so we need
-          // to decide the correct orientation.
+  new_dims.chop_all_singletons ();
 
-          if (elem (0) == 1)
-            {
-              // The original dimension vector had a leading
-              // singleton dimension.
-
-              octave_idx_type tmp = new_dims(0);
-
-              new_dims.resize (2);
-
-              new_dims(0) = 1;
-              new_dims(1) = tmp;
-            }
-          else
-            {
-              // The first element of the original dimension vector
-              // was not a singleton dimension.
-
-              new_dims.resize (2);
-
-              new_dims(1) = 1;
-            }
-        }
-      else
-        new_dims.resize (k);
-    }
+  // preserve orientation if there is only one non-singleton dimension left
+  if (new_dims.ndims () == 2 && xelem(0) == 1 && new_dims.elem(1) == 1)
+    return new_dims.as_row ();
 
   return new_dims;
 }
 
 // This is the rule for cat().  cat (dim, A, B) works if one
 // of the following holds, in this order:
 //
 // 1. size (A, k) == size (B, k) for all k != dim.
