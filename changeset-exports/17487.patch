# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380134093 25200
#      Wed Sep 25 11:34:53 2013 -0700
# Node ID be7e8b91c6b162823be73e0d1635f0cc9db2c4bd
# Parent  b4343603f7ab1a4248e30011273cdb76fb15c07b
hist.m: Overhaul function.

* scripts/plot/hist.m: Rephrase some of docstring.  Put input validation first.
Use variable names in error messages.  Use meaningful variable name 'xsort'
rather than 'tmp'.  Use in-place operators for performance.

diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -35,17 +35,17 @@
 ## the bins, with the width of the bins determined from the adjacent
 ## values in the vector.
 ##
 ## If scalar, the second argument, @var{nbins}, defines the number of bins.
 ##
 ## If a third argument is provided, the histogram is normalized such that
 ## the sum of the bars is equal to @var{norm}.
 ##
-## Extreme values are lumped in the first and last bins.
+## Extreme values are lumped into the first and last bins.
 ##
 ## The histogram's appearance may be modified by specifying property/value
 ## pairs.  For example the face and edge color may be modified.
 ##
 ## @example
 ## @group
 ## hist (randn (1, 100), 25, "facecolor", "r", "edgecolor", "b");
 ## @end group
@@ -59,18 +59,19 @@
 ## hist (rand (10, 3));
 ## colormap (summer ());
 ## @end group
 ## @end example
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## With two output arguments, produce the values @var{nn} and @var{xx} such
-## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
+## With two output arguments, produce the values @var{nn} (numbers of elements)
+## and @var{xx} (bin centers) such that @code{bar (@var{xx}, @var{nn})} will
+## plot the histogram.
 ##
 ## @seealso{histc, bar, pie, rose}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [nn, xx] = hist (varargin)
 
@@ -80,50 +81,50 @@ function [nn, xx] = hist (varargin)
     print_usage ();
   endif
   
   y = varargin{1};
   varargin = varargin(2:end);
 
   arg_is_vector = isvector (y);
 
-  if (rows (y) == 1)
+  if (arg_is_vector)
     y = y(:);
   endif
 
-  if (isreal (y))
-    max_val = max (y(:));
-    min_val = min (y(:));
-  else
-    error ("hist: first argument must be real valued");
+  if (! isreal (y))
+    error ("hist: Y must be real valued");
   endif
 
+  max_val = max (y(:));
+  min_val = min (y(:));
+
   iarg = 1;
   if (nargin == 1 || ischar (varargin{iarg}))
     n = 10;
     x = [0.5:n]'/n;
     x = x * (max_val - min_val) + ones (size (x)) * min_val;
   else
     ## nargin is either 2 or 3
     x = varargin{iarg++};
     if (isscalar (x))
       n = x;
       if (n <= 0)
-        error ("hist: number of bins must be positive");
+        error ("hist: number of bins NBINS must be positive");
       endif
       x = [0.5:n]'/n;
       x = x * (max_val - min_val) + ones (size (x)) * min_val;
     elseif (isreal (x))
       if (isvector (x))
         x = x(:);
       endif
-      tmp = sort (x);
-      if (any (tmp != x))
+      xsort = sort (x);
+      if (any (xsort != x))
         warning ("hist: bin values not sorted on input");
-        x = tmp;
+        x = xsort;
       endif
     else
       error ("hist: second argument must be a scalar or a vector");
     endif
   endif
 
   ## Avoid issues with integer types for x and y
   x = double (x);
@@ -149,24 +150,25 @@ function [nn, xx] = hist (varargin)
     chist = [(zeros (1, y_nc));
              (reshape (chist(idx > len), rows (cutoff), y_nc));
              (chist(end,:) - sum (isnan (y)))];
   endif
 
   freq = diff (chist);
 
   if (nargin > 2 && ! ischar (varargin{iarg}))
-    ## Normalise the histogram.
+    ## Normalize the histogram.
     norm = varargin{iarg++};
-    freq = freq / sum(! isnan (y)) * norm;
+    freq *= norm / sum (! isnan (y));
   endif
 
   if (nargout > 0)
-    if (arg_is_vector)
-      nn = freq';
+    if (arg_is_vector)  
+      ## Matlab compatibility requires a row vector return
+      nn = freq';  
       xx = x';
     else
       nn = freq;
       xx = x;
     endif
   else
     if (isempty (hax))
       hax = gca ();
