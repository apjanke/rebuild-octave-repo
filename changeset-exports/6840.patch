# HG changeset patch
# User dbateman
# Date 1188376668 0
#      Wed Aug 29 08:37:48 2007 +0000
# Node ID 2f17d55567565770f53fb2c2dd14f66bdea9a8f8
# Parent  40ad396488841b0e2ec868ed760940bc5f9c85d9
[project @ 2007-08-29 08:37:47 by dbateman]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1177,17 +1177,17 @@ ComplexMatrix::inverse (MatrixType &matt
   int typ = mattype.type (false);
   ComplexMatrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcond, force, calc_cond);
-  else if (typ != MatrixType::Rectangular)
+  else
     {
       if (mattype.is_hermitian ())
 	{
 	  ComplexCHOL chol (*this, info, calc_cond);
 	  if (info == 0)
 	    {
 	      if (calc_cond)
 		rcond = chol.rcond();
@@ -1196,16 +1196,19 @@ ComplexMatrix::inverse (MatrixType &matt
 	      ret = chol.inverse ();
 	    }
 	  else
 	    mattype.mark_as_unsymmetric ();
 	}
 
       if (!mattype.is_hermitian ())
 	ret = finverse(mattype, info, rcond, force, calc_cond);
+
+      if (rcond == 0.)
+	ret = ComplexMatrix (rows (), columns (), Complex (octave_Inf, 0.));
     }
 
   return ret;
 }
 
 ComplexMatrix
 ComplexMatrix::pseudo_inverse (double tol) const
 {
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -1007,17 +1007,17 @@ SparseComplexMatrix::inverse (MatrixType
     ret = dinverse (mattype, info, rcond, true, calc_cond);
   else if (typ == MatrixType::Upper || typ == MatrixType::Permuted_Upper)
     ret = tinverse (mattype, info, rcond, true, calc_cond).transpose();
   else if (typ == MatrixType::Lower || typ == MatrixType::Permuted_Lower)
     { 
       MatrixType newtype = mattype.transpose();
       ret = transpose().tinverse (newtype, info, rcond, true, calc_cond);
     }
-  else if (typ != MatrixType::Rectangular)
+  else
     {
       if (mattype.is_hermitian())
 	{
 	  MatrixType tmp_typ (MatrixType::Upper);
 	  SparseComplexCHOL fact (*this, info, false);
 	  rcond = fact.rcond();
 	  if (info == 0)
 	    {
@@ -1048,18 +1048,16 @@ SparseComplexMatrix::inverse (MatrixType
 	  double rcond2;
 	  SparseComplexMatrix InvL = fact.L().transpose().
 	    tinverse(tmp_typ, info, rcond2, true, false);
 	  SparseComplexMatrix InvU = fact.U().
 	    tinverse(tmp_typ, info, rcond2, true, false).transpose();
 	  ret = fact.Pc().transpose() * InvU * InvL * fact.Pr();
 	}
     }
-  else
-    (*current_liboctave_error_handler) ("inverse requires square matrix");
 
   return ret;
 }
 
 ComplexDET
 SparseComplexMatrix::determinant (void) const
 {
   octave_idx_type info;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2007-08-29  David Bateman  <dbateman@free.fr>
+
+        * dSparse.cc (SparseMatrix SparseMatrix::inverse (MatrixType &, 
+        octave_idx_type&, double&, int, int)): Calculate with LU even for
+        matrices marked as singular.
+        * CSparse.cc (SparseComplexMatrix SparseComplexMatrix::inverse (
+        MatrixType &, octave_idx_type&, double&, int, int)): ditto.
+        * dMatrix.cc (Matrix Matrix::inverse (MatrixType &, octave_idx_type&,
+        double&, int, int)): ditto. If rcond==0 force matrix of infinities.
+        * dMatrix.cc (ComplexMatrix ComplexMatrix::inverse (MatrixType &,
+         octave_idx_type&, double&, int, int)): ditto.
+
 2007-08-27  John W. Eaton  <jwe@octave.org>
 
 	* oct-env.cc (octave_env::rooted_relative_pathname,
 	octave_env::do_rooted_relative_pathname): New functions.
 	* oct-env.h: Provide decls.
 
 2007-08-24  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -846,17 +846,17 @@ Matrix::inverse (MatrixType &mattype, oc
   int typ = mattype.type (false);
   Matrix ret;
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcond, force, calc_cond);
-  else if (typ != MatrixType::Rectangular)
+  else
     {
       if (mattype.is_hermitian ())
 	{
 	  CHOL chol (*this, info, calc_cond);
 	  if (info == 0)
 	    {
 	      if (calc_cond)
 		rcond = chol.rcond ();
@@ -865,16 +865,19 @@ Matrix::inverse (MatrixType &mattype, oc
 	      ret = chol.inverse ();
 	    }
 	  else
 	    mattype.mark_as_unsymmetric ();
 	}
 
       if (!mattype.is_hermitian ())
 	ret = finverse(mattype, info, rcond, force, calc_cond);
+
+      if (rcond == 0.)
+	ret = Matrix (rows (), columns (), octave_Inf);
     }
 
   return ret;
 }
 
 Matrix
 Matrix::pseudo_inverse (double tol) const
 {
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -1081,17 +1081,17 @@ SparseMatrix::inverse (MatrixType &matty
     ret = dinverse (mattype, info, rcond, true, calc_cond);
   else if (typ == MatrixType::Upper || typ == MatrixType::Permuted_Upper)
     ret = tinverse (mattype, info, rcond, true, calc_cond).transpose();
   else if (typ == MatrixType::Lower || typ == MatrixType::Permuted_Lower)
     {
       MatrixType newtype = mattype.transpose();
       ret = transpose().tinverse (newtype, info, rcond, true, calc_cond);
     }
-  else if (typ != MatrixType::Rectangular)
+  else
     {
       if (mattype.is_hermitian())
 	{
 	  MatrixType tmp_typ (MatrixType::Upper);
 	  SparseCHOL fact (*this, info, false);
 	  rcond = fact.rcond();
 	  if (info == 0)
 	    {
@@ -1122,18 +1122,16 @@ SparseMatrix::inverse (MatrixType &matty
 	  double rcond2;
 	  SparseMatrix InvL = fact.L().transpose().tinverse(tmp_typ, 
 					   info, rcond2, true, false);
 	  SparseMatrix InvU = fact.U().tinverse(tmp_typ, info, rcond2,
 					   true, false).transpose();
 	  ret = fact.Pc().transpose() * InvU * InvL * fact.Pr();
 	}
     }
-  else
-    (*current_liboctave_error_handler) ("inverse requires square matrix");
 
   return ret;
 }
 
 DET
 SparseMatrix::determinant (void) const
 {
   octave_idx_type info;
