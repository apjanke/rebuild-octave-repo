# HG changeset patch
# User jwe
# Date 1144091011 0
#      Mon Apr 03 19:03:31 2006 +0000
# Node ID e065f7c18bdc7c16377f2ae6bf81c1c4f95fb623
# Parent  4ff0cb3e1dd158a6a6b8af6738f21527a9ce5c89
[project @ 2006-04-03 19:03:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-04-03  David Bateman  <dbateman@free.fr>
 
+	* DLD-FUNCTIONS/daspk.cc (Fdaspk): Allow functions to be passed
+	using function handles, inline functions, and cell arrays of
+	strings, inline and function handles.
+	* DLD-FUNCTIONS/dasrtk.cc (Fdasrt): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (Fdassl): Likewise.
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (Flsode):  Likewise.
+
 	* ls-hdf5.h (hdf5_fstreambase::open): Remove unused arg prot.
 
 2006-03-30  Bill Denney  <denney@seas.upenn.edu>
 
  	* data.cc: Include numel in @seealso.
 
 2006-03-30  David Bateman  <dbateman@free.fr>
 
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -32,16 +32,17 @@ 02110-1301, USA.
 
 #include "DASPK.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "ov-cell.h"
 #include "pager.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "DASPK-opts.cc"
 
 // Global pointer for user defined function required by daspk.
@@ -200,19 +201,20 @@ x(t_0) = x_0, xdot(t_0) = xdot_0\n\
 The solution is returned in the matrices @var{x} and @var{xdot},\n\
 with each row in the result matrices corresponding to one of the\n\
 elements in the vector @var{t}.  The first element of @var{t}\n\
 should be @math{t_0} and correspond to the initial state of the\n\
 system @var{x_0} and its derivative @var{xdot_0}, so that the first\n\
 row of the output @var{x} is @var{x_0} and the first row\n\
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string that names the function to\n\
-call to compute the vector of residuals for the set of equations.\n\
-It must have the form\n\
+The first argument, @var{fcn}, is a string or a two element cell array\n\
+of strings, inline or function handle, that names the function, to call\n\
+to compute the vector of residuals for the set of equations. It must\n\
+have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
@@ -281,53 +283,122 @@ parameters for @code{daspk}.\n\
 
   if (call_depth > 1)
     DASPK_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 3 && nargin < 6)
     {
+      std::string fcn_name, fname, jac_name, jname;
       daspk_fcn = 0;
       daspk_jac = 0;
 
       octave_value f_arg = args(0);
 
-      switch (f_arg.rows ())
-	{
-	case 1:
-	  daspk_fcn = extract_function
-	    (args(0), "daspk", "__daspk_fcn__",
-	     "function res = __daspk_fcn__ (x, xdot, t) res = ",
-	     "; endfunction");
-	  break;
+      if (f_arg.is_cell ())
+  	{
+	  Cell c = f_arg.cell_value ();
+	  if (c.length() == 1)
+	    f_arg = c(0);
+	  else if (c.length() == 2)
+	    {
+	      if (c(0).is_function_handle () || c(0).is_inline_function ())
+		daspk_fcn = c(0).function_value ();
+	      else
+		{
+		  fcn_name = unique_symbol_name ("__daspk_fcn__");
+		  fname = "function y = ";
+		  fname.append (fcn_name);
+		  fname.append (" (x, xdot, t) y = ");
+		  daspk_fcn = extract_function
+		    (c(0), "daspk", fcn_name, fname, "; endfunction");
+		}
+	      
+	      if (daspk_fcn)
+		{
+		  if (c(1).is_function_handle () || c(1).is_inline_function ())
+		    daspk_jac = c(1).function_value ();
+		  else
+		    {
+		      jac_name = unique_symbol_name ("__daspk_jac__");
+		      jname = "function jac = ";
+		      jname.append(jac_name);
+		      jname.append (" (x, xdot, t, cj) jac = ");
+		      daspk_jac = extract_function
+			(c(1), "daspk", jac_name, jname, "; endfunction");
 
-	case 2:
-	  {
-	    string_vector tmp = f_arg.all_strings ();
+		      if (!daspk_jac)
+			{
+			  if (fcn_name.length())
+			    clear_function (fcn_name);
+			  daspk_fcn = 0;
+			}
+		    }
+		}
+	    }
+	  else
+	    DASPK_ABORT1 ("incorrect number of elements in cell array");
+	}
 
-	    if (! error_state)
-	      {
-		daspk_fcn = extract_function
-		  (tmp(0), "daspk", "__daspk_fcn__",
-		   "function res = __daspk_fcn__ (x, xdot, t) res = ",
-		   "; endfunction");
+      if (!daspk_fcn && ! f_arg.is_cell())
+	{
+	  if (f_arg.is_function_handle () || f_arg.is_inline_function ())
+	    daspk_fcn = f_arg.function_value ();
+	  else
+	    {
+	      switch (f_arg.rows ())
+		{
+		case 1:
+		  do
+		    {
+		      fcn_name = unique_symbol_name ("__daspk_fcn__");
+		      fname = "function y = ";
+		      fname.append (fcn_name);
+		      fname.append (" (x, xdot, t) y = ");
+		      daspk_fcn = extract_function
+			(f_arg, "daspk", fcn_name, fname, "; endfunction");
+		    }
+		  while (0);
+		  break;
 
-		if (daspk_fcn)
+		case 2:
 		  {
-		    daspk_jac = extract_function
-		      (tmp(1), "daspk", "__daspk_jac__",
-		       "function jac = __daspk_jac__ (x, xdot, t, cj) jac = ",
-		       "; endfunction");
+		    string_vector tmp = f_arg.all_strings ();
+
+		    if (! error_state)
+		      {
+			fcn_name = unique_symbol_name ("__daspk_fcn__");
+			fname = "function y = ";
+			fname.append (fcn_name);
+			fname.append (" (x, xdot, t) y = ");
+			daspk_fcn = extract_function
+			  (tmp(0), "daspk", fcn_name, fname, "; endfunction");
 
-		    if (! daspk_jac)
-		      daspk_fcn = 0;
+			if (daspk_fcn)
+			  {
+			    jac_name = unique_symbol_name ("__daspk_jac__");
+			    jname = "function jac = ";
+			    jname.append(jac_name);
+			    jname.append (" (x, xdot, t, cj) jac = ");
+			    daspk_jac = extract_function
+			      (tmp(1), "daspk", jac_name, jname,
+			       "; endfunction");
+
+			    if (!daspk_jac)
+			      {
+				if (fcn_name.length())
+				  clear_function (fcn_name);
+				daspk_fcn = 0;
+			      }
+			  }
+		      }
 		  }
-	      }
-	  }
+		}
+	    }
 	}
 
       if (error_state || ! daspk_fcn)
 	DASPK_ABORT ();
 
       ColumnVector state = ColumnVector (args(1).vector_value ());
 
       if (error_state)
@@ -370,16 +441,21 @@ parameters for @code{daspk}.\n\
       Matrix output;
       Matrix deriv_output;
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
 
+      if (fcn_name.length())
+	clear_function (fcn_name);
+      if (jac_name.length())
+	clear_function (jac_name);
+
       if (! error_state)
 	{
 	  std::string msg = dae.error_message ();
 
 	  retval(3) = msg;
 	  retval(2) = static_cast<double> (dae.integration_state ());
 
 	  if (dae.integration_ok ())
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -31,16 +31,17 @@ 02110-1301, USA.
 #include "DASRT.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "ov-cell.h"
 #include "pager.h"
 #include "parse.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "DASRT-opts.cc"
 
@@ -244,31 +245,31 @@ row of the output @var{x} is @var{x_0} a
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
 The vector @var{t} provides an upper limit on the length of the\n\
 integration.  If the stopping condition is met, the vector\n\
 @var{t_out} will be shorter than @var{t}, and the final element of\n\
 @var{t_out} will be the point at which the stopping condition was met,\n\
 and may not correspond to any element of the vector @var{t}.\n\
 \n\
-The first argument, @var{fcn}, is a string that names the function to\n\
-call to compute the vector of residuals for the set of equations.\n\
-It must have the form\n\
+The first argument, @var{fcn}, is a string, or cell array of strings or\n\
+inline or function handles, that names the function to call to compute\n\
+the vector of residuals for the set of equations. It must have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
 \n\
-If @var{fcn} is a two-element string array, the first element names\n\
-the function @math{f} described above, and the second element names\n\
-a function to compute the modified Jacobian\n\
+If @var{fcn} is a two-element string array, or two element cell array,\n\
+the first element names the function @math{f} described above, and the\n\
+second element names a function to compute the modified Jacobian\n\
 \n\
 @tex\n\
 $$\n\
 J = {\\partial f \\over \\partial x}\n\
   + c {\\partial f \\over \\partial \\dot{x}}\n\
 $$\n\
 @end tex\n\
 @ifinfo\n\
@@ -362,76 +363,146 @@ parameters for @code{dasrt}.\n\
 
   if (nargin < 4 || nargin > 6)
     {
       print_usage ("dasrt");
       unwind_protect::run_frame ("Fdasrt");
       return retval;
     }
 
+  std::string fcn_name, fname, jac_name, jname;
   dasrt_f = 0;
   dasrt_j = 0;
   dasrt_cf = 0;
 
   // Check all the arguments.  Are they the right animals?
 
   // Here's where I take care of f and j in one shot:
 
   octave_value f_arg = args(0);
 
-  switch (f_arg.rows ())
+  if (f_arg.is_cell ())
     {
-    case 1:
-      dasrt_f = extract_function
-	(args(0), "dasrt", "__dasrt_fcn__",
-	 "function res = __dasrt_fcn__ (x, xdot, t) res = ",
-	 "; endfunction");
-      break;
+      Cell c = f_arg.cell_value ();
+      if (c.length() == 1)
+	f_arg = c(0);
+      else if (c.length() == 2)
+	{
+	  if (c(0).is_function_handle () || c(0).is_inline_function ())
+	    dasrt_f = c(0).function_value ();
+	  else
+	    {
+	      fcn_name = unique_symbol_name ("__dasrt_fcn__");
+	      fname = "function y = ";
+	      fname.append (fcn_name);
+	      fname.append (" (x, xdot, t) y = ");
+	      dasrt_f = extract_function
+		(c(0), "dasrt", fcn_name, fname, "; endfunction");
+	    }
+
+	  if (dasrt_f)
+	    {
+	      if (c(1).is_function_handle () || c(1).is_inline_function ())
+		dasrt_j = c(1).function_value ();
+	      else
+		{
+		  jac_name = unique_symbol_name ("__dasrt_jac__");
+		  jname = "function jac = ";
+		  jname.append(jac_name);
+		  jname.append (" (x, xdot, t, cj) jac = ");
+		  dasrt_j = extract_function
+		    (c(1), "dasrt", jac_name, jname, "; endfunction");
+
+		  if (!dasrt_j)
+		    {
+		      if (fcn_name.length())
+			clear_function (fcn_name);
+		      dasrt_f = 0;
+		    }
+		}
+	    }
+	}
+      else
+	DASRT_ABORT1 ("incorrect number of elements in cell array");
+    }
+
+  if (!dasrt_f && ! f_arg.is_cell())
+    {
+      if (f_arg.is_function_handle () || f_arg.is_inline_function ())
+	dasrt_f = f_arg.function_value ();
+      else
+	{
+	  switch (f_arg.rows ())
+	    {
+	    case 1:
+	      fcn_name = unique_symbol_name ("__dasrt_fcn__");
+	      fname = "function y = ";
+	      fname.append (fcn_name);
+	      fname.append (" (x, xdot, t) y = ");
+	      dasrt_f = extract_function
+		(f_arg, "dasrt", fcn_name, fname, "; endfunction");
+	      break;
       
-    case 2:
-      {
-	string_vector tmp = args(0).all_strings ();
+	    case 2:
+	      {
+		string_vector tmp = args(0).all_strings ();
 	
-	if (! error_state)
-	  {
-	    dasrt_f = extract_function
-	      (tmp(0), "dasrt", "__dasrt_fcn__",
-	       "function res = __dasrt_fcn__ (x, xdot, t) res = ",
-	       "; endfunction");
+		if (! error_state)
+		  {
+		    fcn_name = unique_symbol_name ("__dasrt_fcn__");
+		    fname = "function y = ";
+		    fname.append (fcn_name);
+		    fname.append (" (x, xdot, t) y = ");
+		    dasrt_f = extract_function
+		      (tmp(0), "dasrt", fcn_name, fname, "; endfunction");
 	    
-	    if (dasrt_f)
-	      {
-		dasrt_j = extract_function
-		  (tmp(1), "dasrt", "__dasrt_jac__",
-		   "function jac = __dasrt_jac__ (x, xdot, t, cj) jac = ",
-		   "; endfunction");
-		
-		if (! dasrt_j)
-		  dasrt_f = 0;
+		    if (dasrt_f)
+		      {
+			jac_name = unique_symbol_name ("__dasrt_jac__");
+			jname = "function jac = ";
+			jname.append(jac_name);
+			jname.append (" (x, xdot, t, cj) jac = ");
+			dasrt_j = extract_function
+			  (tmp(1), "dasrt", jac_name, jname, "; endfunction");
+
+			if (! dasrt_j)
+			  dasrt_f = 0;
+		      }
+		  }
 	      }
-	  }
-      }
-      break;
+	      break;
       
-    default:
-      DASRT_ABORT1
-	("first arg should be a string or 2-element string array");
+	    default:
+	      DASRT_ABORT1
+		("first arg should be a string or 2-element string array");
+	    }
+	}
     }
   
   if (error_state || (! dasrt_f))
     DASRT_ABORT;
   
   DAERTFunc func (dasrt_user_f);
   
   argp++;
   
-  if (args(1).is_string ())
+  if (args(1).is_function_handle() || args(1).is_inline_function())
+    {
+      dasrt_cf = args(1).function_value();
+
+      if (! dasrt_cf)
+	DASRT_ABORT1 ("expecting function name as argument 2");
+
+      argp++;
+
+      func.set_constraint_function (dasrt_user_cf);
+    }
+  else if (args(1).is_string ())
     {
       dasrt_cf = is_valid_function (args(1), "dasrt", true);
-
       if (! dasrt_cf)
 	DASRT_ABORT1 ("expecting function name as argument 2");
 
       argp++;
 
       func.set_constraint_function (dasrt_user_cf);
     }
 
@@ -478,16 +549,21 @@ parameters for @code{dasrt}.\n\
 
   dae.set_options (dasrt_opts);
 
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
 
+  if (fcn_name.length())
+    clear_function (fcn_name);
+  if (jac_name.length())
+    clear_function (jac_name);
+
   if (! error_state)
     {
       std::string msg = dae.error_message ();
 
       retval(4) = msg;
       retval(3) = static_cast<double> (dae.integration_state ());
 
       if (dae.integration_ok ())
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -32,16 +32,17 @@ 02110-1301, USA.
 
 #include "DASSL.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "ov-cell.h"
 #include "pager.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "DASSL-opts.cc"
 
 // Global pointer for user defined function required by dassl.
@@ -203,19 +204,20 @@ x(t_0) = x_0, xdot(t_0) = xdot_0\n\
 The solution is returned in the matrices @var{x} and @var{xdot},\n\
 with each row in the result matrices corresponding to one of the\n\
 elements in the vector @var{t}.  The first element of @var{t}\n\
 should be @math{t_0} and correspond to the initial state of the\n\
 system @var{x_0} and its derivative @var{xdot_0}, so that the first\n\
 row of the output @var{x} is @var{x_0} and the first row\n\
 of the output @var{xdot} is @var{xdot_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string that names the function to\n\
-call to compute the vector of residuals for the set of equations.\n\
-It must have the form\n\
+The first argument, @var{fcn}, is a string or a two element cell array\n\
+of strings, inline or function handle, that names the function, to call\n\
+to compute the vector of residuals for the set of equations. It must\n\
+have the form\n\
 \n\
 @example\n\
 @var{res} = f (@var{x}, @var{xdot}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{x}, @var{xdot}, and @var{res} are vectors, and @var{t} is a\n\
 scalar.\n\
@@ -286,53 +288,122 @@ parameters for @code{dassl}.\n\
 
   if (call_depth > 1)
     DASSL_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 3 && nargin < 6 && nargout < 5)
     {
+      std::string fcn_name, fname, jac_name, jname;
       dassl_fcn = 0;
       dassl_jac = 0;
 
       octave_value f_arg = args(0);
 
-      switch (f_arg.rows ())
-	{
-	case 1:
-	  dassl_fcn = extract_function
-	    (f_arg, "dassl", "__dassl_fcn__",
-	     "function res = __dassl_fcn__ (x, xdot, t) res = ",
-	     "; endfunction");
-	  break;
+      if (f_arg.is_cell ())
+  	{
+	  Cell c = f_arg.cell_value ();
+	  if (c.length() == 1)
+	    f_arg = c(0);
+	  else if (c.length() == 2)
+	    {
+	      if (c(0).is_function_handle () || c(0).is_inline_function ())
+		dassl_fcn = c(0).function_value ();
+	      else
+		{
+		  fcn_name = unique_symbol_name ("__dassl_fcn__");
+		  fname = "function y = ";
+		  fname.append (fcn_name);
+		  fname.append (" (x, xdot, t) y = ");
+		  dassl_fcn = extract_function
+		    (c(0), "dassl", fcn_name, fname, "; endfunction");
+		}
+	      
+	      if (dassl_fcn)
+		{
+		  if (c(1).is_function_handle () || c(1).is_inline_function ())
+		    dassl_jac = c(1).function_value ();
+		  else
+		    {
+			jac_name = unique_symbol_name ("__dassl_jac__");
+			jname = "function jac = ";
+			jname.append(jac_name);
+			jname.append (" (x, xdot, t, cj) jac = ");
+			dassl_jac = extract_function
+			  (c(1), "dassl", jac_name, jname, "; endfunction");
 
-	case 2:
-	  {
-	    string_vector tmp = f_arg.all_strings ();
+			if (!dassl_jac)
+			  {
+			    if (fcn_name.length())
+			      clear_function (fcn_name);
+			    dassl_fcn = 0;
+			  }
+		    }
+		}
+	    }
+	  else
+	    DASSL_ABORT1 ("incorrect number of elements in cell array");
+	}
 
-	    if (! error_state)
-	      {
-		dassl_fcn = extract_function
-		  (tmp(0), "dassl", "__dassl_fcn__",
-		   "function res = __dassl_fcn__ (x, xdot, t) res = ",
-		   "; endfunction");
+      if (!dassl_fcn && ! f_arg.is_cell())
+	{
+	  if (f_arg.is_function_handle () || f_arg.is_inline_function ())
+	    dassl_fcn = f_arg.function_value ();
+	  else
+	    {
+	      switch (f_arg.rows ())
+		{
+		case 1:
+		  do
+		    {
+		      fcn_name = unique_symbol_name ("__dassl_fcn__");
+		      fname = "function y = ";
+		      fname.append (fcn_name);
+		      fname.append (" (x, xdot, t) y = ");
+		      dassl_fcn = extract_function
+			(f_arg, "dassl", fcn_name, fname, "; endfunction");
+		    }
+		  while (0);
+		  break;
 
-		if (dassl_fcn)
+		case 2:
 		  {
-		    dassl_jac = extract_function
-		      (tmp(1), "dassl", "__dassl_jac__",
-		       "function jac = __dassl_jac__ (x, xdot, t, cj) jac = ",
-		       "; endfunction");
+		    string_vector tmp = f_arg.all_strings ();
+
+		    if (! error_state)
+		      {
+			fcn_name = unique_symbol_name ("__dassl_fcn__");
+			fname = "function y = ";
+			fname.append (fcn_name);
+			fname.append (" (x, xdot, t) y = ");
+			dassl_fcn = extract_function
+			  (tmp(0), "dassl", fcn_name, fname, "; endfunction");
 
-		    if (! dassl_jac)
-		      dassl_fcn = 0;
+			if (dassl_fcn)
+			  {
+			    jac_name = unique_symbol_name ("__dassl_jac__");
+			    jname = "function jac = ";
+			    jname.append(jac_name);
+			    jname.append (" (x, xdot, t, cj) jac = ");
+			    dassl_jac = extract_function
+			      (tmp(1), "dassl", jac_name, jname, 
+			       "; endfunction");
+
+			    if (!dassl_jac)
+			      {
+				if (fcn_name.length())
+				  clear_function (fcn_name);
+				dassl_fcn = 0;
+			      }
+			  }
+		      }
 		  }
-	      }
-	  }
+		}
+	    }
 	}
 
       if (error_state || ! dassl_fcn)
 	DASSL_ABORT ();
 
       ColumnVector state = ColumnVector (args(1).vector_value ());
 
       if (error_state)
@@ -376,16 +447,21 @@ parameters for @code{dassl}.\n\
       Matrix output;
       Matrix deriv_output;
 
       if (crit_times_set)
 	output = dae.integrate (out_times, deriv_output, crit_times);
       else
 	output = dae.integrate (out_times, deriv_output);
 
+      if (fcn_name.length())
+	clear_function (fcn_name);
+      if (jac_name.length())
+	clear_function (jac_name);
+
       if (! error_state)
 	{
 	  std::string msg = dae.error_message ();
 
 	  retval(3) = msg;
 	  retval(2) = static_cast<double> (dae.integration_state ());
 
 	  if (dae.integration_ok ())
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -32,16 +32,17 @@ 02110-1301, USA.
 
 #include "NLEqn.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "ov-cell.h"
 #include "pager.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "NLEqn-opts.cc"
 
 // Global pointer for user defined function required by hybrd1.
@@ -215,20 +216,21 @@ fsolve_user_jacobian (const ColumnVector
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{info}, @var{msg}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
-If @var{fcn} is a two-element string array, the first element names\n\
-the function @math{f} described above, and the second element names\n\
-a function of the form @code{j (@var{x})} to compute the Jacobian\n\
-matrix with elements\n\
+If @var{fcn} is a two-element string array, or a two element cell array\n\
+containing either the function name or inline or function handle. The\n\
+first element names the function @math{f} described above, and the second\n\
+element names a function of the form @code{j (@var{x})} to compute the\n\
+Jacobian matrix with elements\n\
 @tex\n\
 $$ J = {\\partial f_i \\over \\partial x_j} $$\n\
 @end tex\n\
 @ifinfo\n\
 \n\
 @example\n\
            df_i\n\
 jac(i,j) = ----\n\
@@ -252,53 +254,122 @@ parameters for @code{fsolve}.\n\
 
   if (call_depth > 1)
     FSOLVE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin == 2 && nargout < 4)
     {
+      std::string fcn_name, fname, jac_name, jname;
       fsolve_fcn = 0;
       fsolve_jac = 0;
 
       octave_value f_arg = args(0);
 
-      switch (f_arg.rows ())
-	{
-	case 1:
-	  fsolve_fcn = extract_function
-	    (f_arg, "fsolve", "__fsolve_fcn__",
-	     "function y = __fsolve_fcn__ (x) y = ",
-	     "; endfunction");
-	  break;
+      if (f_arg.is_cell ())
+  	{
+	  Cell c = f_arg.cell_value ();
+	  if (c.length() == 1)
+	    f_arg = c(0);
+	  else if (c.length() == 2)
+	    {
+	      if (c(0).is_function_handle () || c(0).is_inline_function ())
+		fsolve_fcn = c(0).function_value ();
+	      else
+		{
+		  fcn_name = unique_symbol_name ("__fsolve_fcn__");
+		  fname = "function y = ";
+		  fname.append (fcn_name);
+		  fname.append (" (x) y = ");
+		  fsolve_fcn = extract_function
+		    (c(0), "fsolve", fcn_name, fname, "; endfunction");
+		}
+	      
+	      if (fsolve_fcn)
+		{
+		  if (c(1).is_function_handle () || c(1).is_inline_function ())
+		    fsolve_jac = c(1).function_value ();
+		  else
+		    {
+		      jac_name = unique_symbol_name ("__fsolve_jac__");
+		      jname = "function y = ";
+		      jname.append (jac_name);
+		      jname.append (" (x) jac = ");
+		      fsolve_jac = extract_function
+			(c(1), "fsolve", jac_name, jname, "; endfunction");
 
-	case 2:
-	  {
-	    string_vector tmp = f_arg.all_strings ();
+		      if (!fsolve_jac)
+			{
+			  if (fcn_name.length())
+			    clear_function (fcn_name);
+			  fsolve_fcn = 0;
+			}
+		    }
+		}
+	    }
+	  else
+	    FSOLVE_ABORT1 ("incorrect number of elements in cell array");
+	}
 
-	    if (! error_state)
-	      {
-		fsolve_fcn = extract_function
-		  (tmp(0), "fsolve", "__fsolve_fcn__",
-		   "function y = __fsolve_fcn__ (x) y = ",
-		   "; endfunction");
+      if (!fsolve_fcn && ! f_arg.is_cell())
+	{
+	  if (f_arg.is_function_handle () || f_arg.is_inline_function ())
+	    fsolve_fcn = f_arg.function_value ();
+	  else
+	    {
+	      switch (f_arg.rows ())
+		{
+		case 1:
+		  do
+		    {
+		      fcn_name = unique_symbol_name ("__fsolve_fcn__");
+		      fname = "function y = ";
+		      fname.append (fcn_name);
+		      fname.append (" (x) y = ");
+		      fsolve_fcn = extract_function
+			(f_arg, "fsolve", fcn_name, fname, "; endfunction");
+		    }
+		  while (0);
+		  break;
 
-		if (fsolve_fcn)
+		case 2:
 		  {
-		    fsolve_jac = extract_function
-		      (tmp(1), "fsolve", "__fsolve_jac__",
-		       "function jac = __fsolve_jac__ (x) jac = ",
-		       "; endfunction");
+		    string_vector tmp = f_arg.all_strings ();
+
+		    if (! error_state)
+		      {
+			fcn_name = unique_symbol_name ("__fsolve_fcn__");
+			fname = "function y = ";
+			fname.append (fcn_name);
+			fname.append (" (x) y = ");
+			fsolve_fcn = extract_function
+			  (tmp(0), "fsolve", fcn_name, fname, "; endfunction");
 
-		    if (! fsolve_jac)
-		      fsolve_fcn = 0;
+			if (fsolve_fcn)
+			  {
+			    jac_name = unique_symbol_name ("__fsolve_jac__");
+			    jname = "function y = ";
+			    jname.append (jac_name);
+			    jname.append (" (x) jac = ");
+			    fsolve_jac = extract_function
+			      (tmp(1), "fsolve", jac_name, jname, 
+			       "; endfunction");
+
+			    if (!fsolve_jac)
+			      {
+				if (fcn_name.length())
+				  clear_function (fcn_name);
+				fsolve_fcn = 0;
+			      }
+			  }
+		      }
 		  }
-	      }
-	  }
+		}
+	    }
 	}
 
       if (error_state || ! fsolve_fcn)
 	FSOLVE_ABORT ();
 
       ColumnVector x (args(1).vector_value ());
 
       if (error_state)
@@ -315,16 +386,21 @@ parameters for @code{fsolve}.\n\
 	nleqn_fcn.set_jacobian_function (fsolve_user_jacobian);
 
       NLEqn nleqn (x, nleqn_fcn);
       nleqn.set_options (fsolve_opts);
 
       octave_idx_type info;
       ColumnVector soln = nleqn.solve (info);
 
+      if (fcn_name.length())
+	clear_function (fcn_name);
+      if (jac_name.length())
+	clear_function (jac_name);
+
       if (! error_state)
 	{
 	  std::string msg = nleqn.error_message ();
 
 	  retval(2) = msg;
 	  retval(1) = static_cast<double> (hybrd_info_to_fsolve_info (info));
 
 	  retval(0) = soln;
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -33,16 +33,17 @@ 02110-1301, USA.
 #include "LSODE.h"
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
+#include "ov-cell.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "LSODE-opts.cc"
 
@@ -186,19 +187,20 @@ x(t_0) = x_0\n\
 \n\
 @end ifinfo\n\
 The solution is returned in the matrix @var{x}, with each row\n\
 corresponding to an element of the vector @var{t}.  The first element\n\
 of @var{t} should be @math{t_0} and should correspond to the initial\n\
 state of the system @var{x_0}, so that the first row of the output\n\
 is @var{x_0}.\n\
 \n\
-The first argument, @var{fcn}, is a string that names the function to\n\
-call to compute the vector of right hand sides for the set of equations.\n\
-The function must have the form\n\
+The first argument, @var{fcn}, is a string, or cell array of strings,\n\
+inline or function handles, that names the function to call to compute\n\
+the vector of right hand sides for the set of equations. The function\n\
+must have the form\n\
 \n\
 @example\n\
 @var{xdot} = f (@var{x}, @var{t})\n\
 @end example\n\
 \n\
 @noindent\n\
 in which @var{xdot} and @var{x} are vectors and @var{t} is a scalar.\n\
 \n\
@@ -281,58 +283,127 @@ parameters for @code{lsode}.\n\
 
   if (call_depth > 1)
     LSODE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 5 && nargout < 4)
     {
+      std::string fcn_name, fname, jac_name, jname;
       lsode_fcn = 0;
       lsode_jac = 0;
 
       octave_value f_arg = args(0);
 
-      switch (f_arg.rows ())
-	{
-	case 1:
-	  lsode_fcn = extract_function
-	    (f_arg, "lsode", "__lsode_fcn__",
-	     "function xdot = __lsode_fcn__ (x, t) xdot = ",
-	     "; endfunction");
-	  break;
+      if (f_arg.is_cell ())
+  	{
+	  Cell c = f_arg.cell_value ();
+	  if (c.length() == 1)
+	    f_arg = c(0);
+	  else if (c.length() == 2)
+	    {
+	      if (c(0).is_function_handle () || c(0).is_inline_function ())
+		lsode_fcn = c(0).function_value ();
+	      else
+		{
+		  fcn_name = unique_symbol_name ("__lsode_fcn__");
+		  fname = "function y = ";
+		  fname.append (fcn_name);
+		  fname.append (" (x, t) y = ");
+		  lsode_fcn = extract_function
+		    (c(0), "lsode", fcn_name, fname, "; endfunction");
+		}
+	      
+	      if (lsode_fcn)
+		{
+		  if (c(1).is_function_handle () || c(1).is_inline_function ())
+		    lsode_jac = c(1).function_value ();
+		  else
+		    {
+			jac_name = unique_symbol_name ("__lsode_jac__");
+			jname = "function jac = ";
+			jname.append(jac_name);
+			jname.append (" (x, t) jac = ");
+			lsode_jac = extract_function
+			  (c(1), "lsode", jac_name, jname, "; endfunction");
 
-	case 2:
-	  {
-	    string_vector tmp = f_arg.all_strings ();
+		      if (!lsode_jac)
+			{
+			  if (fcn_name.length())
+			    clear_function (fcn_name);
+			  lsode_fcn = 0;
+			}
+		    }
+		}
+	    }
+	  else
+	    LSODE_ABORT1 ("incorrect number of elements in cell array");
+	}
 
-	    if (! error_state)
-	      {
-		lsode_fcn = extract_function
-		  (tmp(0), "lsode", "__lsode_fcn__",
-		   "function xdot = __lsode_fcn__ (x, t) xdot = ",
-		   "; endfunction");
+      if (!lsode_fcn && ! f_arg.is_cell())
+	{
+	  if (f_arg.is_function_handle () || f_arg.is_inline_function ())
+	    lsode_fcn = f_arg.function_value ();
+	  else
+	    {
+	      switch (f_arg.rows ())
+		{
+		case 1:
+		  do
+		    {
+		      fcn_name = unique_symbol_name ("__lsode_fcn__");
+		      fname = "function y = ";
+		      fname.append (fcn_name);
+		      fname.append (" (x, t) y = ");
+		      lsode_fcn = extract_function
+			(f_arg, "lsode", fcn_name, fname, "; endfunction");
+		    }
+		  while (0);
+		  break;
 
-		if (lsode_fcn)
+		case 2:
 		  {
-		    lsode_jac = extract_function
-		      (tmp(1), "lsode", "__lsode_jac__",
-		       "function jac = __lsode_jac__ (x, t) jac = ",
-		       "; endfunction");
+		    string_vector tmp = f_arg.all_strings ();
+
+		    if (! error_state)
+		      {
+			fcn_name = unique_symbol_name ("__lsode_fcn__");
+			fname = "function y = ";
+			fname.append (fcn_name);
+			fname.append (" (x, t) y = ");
+			lsode_fcn = extract_function
+			  (tmp(0), "lsode", fcn_name, fname, "; endfunction");
 
-		    if (! lsode_jac)
-		      lsode_fcn = 0;
+			if (lsode_fcn)
+			  {
+			    jac_name = unique_symbol_name ("__lsode_jac__");
+			    jname = "function jac = ";
+			    jname.append(jac_name);
+			    jname.append (" (x, t) jac = ");
+			    lsode_jac = extract_function
+			      (tmp(1), "lsode", jac_name, jname,
+			      "; endfunction");
+
+			    if (!lsode_jac)
+			      {
+				if (fcn_name.length())
+				  clear_function (fcn_name);
+				lsode_fcn = 0;
+			      }
+			  }
+		      }
 		  }
-	      }
-	  }
-	  break;
+		  break;
 
-	default:
-	  LSODE_ABORT1
-	    ("first arg should be a string or 2-element string array");
+		default:
+		  LSODE_ABORT1
+		    ("first arg should be a string or 2-element string array");
+		}
+	    }
 	}
 
       if (error_state || ! lsode_fcn)
 	LSODE_ABORT ();
 
       ColumnVector state (args(1).vector_value ());
 
       if (error_state)
@@ -367,16 +438,21 @@ parameters for @code{lsode}.\n\
       ode.set_options (lsode_opts);
 
       Matrix output;
       if (crit_times_set)
 	output = ode.integrate (out_times, crit_times);
       else
 	output = ode.integrate (out_times);
 
+      if (fcn_name.length())
+	clear_function (fcn_name);
+      if (jac_name.length())
+	clear_function (jac_name);
+
       if (! error_state)
 	{
 	  std::string msg = ode.error_message ();
 
 	  retval(2) = msg;
 	  retval(1) = static_cast<double> (ode.integration_state ());
 
 	  if (ode.integration_ok ())
