# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1509960429 -3600
#      Mon Nov 06 10:27:09 2017 +0100
# Node ID 3d96400df7132e98a63417017c1fc706515e9565
# Parent  3d26a174e143a9ceceb62d57ffac7a8ffa94d14f
Add function vecnorm (bug #52342).

* scripts/linear-algebra/vecnorm.m: New function.

* script/linear-algebra/module.mk: Add vecnorm function to build system.

* NEWS: Announce new vecnorm function.

* linalg.txi: Add vecnorm to manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -84,16 +84,17 @@ Summary of important user-visible change
       integral
       integral2
       integral3
       openvar
       quad2d
       repelem
       rticks
       thetaticks
+      vecnorm
       xticklabels
       xticks
       yticklabels
       yticks
       zticklabels
       zticks
 
  ** Deprecated functions.
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -132,16 +132,18 @@ detect a non-Hermitian matrix.
 @DOCSTRING(rank)
 
 @DOCSTRING(rcond)
 
 @DOCSTRING(trace)
 
 @DOCSTRING(rref)
 
+@DOCSTRING(vecnorm)
+
 @node Matrix Factorizations
 @section Matrix Factorizations
 @cindex matrix factorizations
 
 @DOCSTRING(chol)
 
 @DOCSTRING(cholinv)
 
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5576,17 +5576,17 @@ p-norm of @var{A}, @code{(sum (abs (@var
 @item other @var{p} @code{@var{p} < 1}
 the p-pseudonorm defined as above.
 @end table
 
 If @var{opt} is the value @qcode{"rows"}, treat each row as a vector and
 compute its norm.  The result is returned as a column vector.
 Similarly, if @var{opt} is @qcode{"columns"} or @qcode{"cols"} then
 compute the norms of each column and return a row vector.
-@seealso{normest, normest1, cond, svd}
+@seealso{normest, normest1, vecnorm, cond, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value x_arg = args(0);
diff --git a/scripts/linear-algebra/module.mk b/scripts/linear-algebra/module.mk
--- a/scripts/linear-algebra/module.mk
+++ b/scripts/linear-algebra/module.mk
@@ -25,17 +25,18 @@ scripts_linear_algebra_FCN_FILES = \
   %reldir%/null.m \
   %reldir%/orth.m \
   %reldir%/planerot.m \
   %reldir%/qzhess.m \
   %reldir%/rank.m \
   %reldir%/rref.m \
   %reldir%/subspace.m \
   %reldir%/trace.m \
-  %reldir%/vech.m
+  %reldir%/vech.m \
+  %reldir%/vecnorm.m
 
 %canon_reldir%dir = $(fcnfiledir)/linear-algebra
 
 scripts_linear_algebra_DATA = $(scripts_linear_algebra_FCN_FILES)
 
 FCN_FILES += $(scripts_linear_algebra_FCN_FILES)
 
 PKG_ADD_FILES += %reldir%/PKG_ADD
diff --git a/scripts/linear-algebra/vecnorm.m b/scripts/linear-algebra/vecnorm.m
new file mode 100644
--- /dev/null
+++ b/scripts/linear-algebra/vecnorm.m
@@ -0,0 +1,116 @@
+## Copyright (C) 2017 Marco Caliari
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {@var{n} =} vecnorm (@var{A})
+## @deftypefnx {} {@var{n} =} vecnorm (@var{A}, @var{p})
+## @deftypefnx {} {@var{n} =} vecnorm (@var{A}, @var{p}, @var{dim})
+## Return the p-norm of the elements of @var{A} along dimension @var{dim}.
+##
+## The p-norm of a vector is defined as
+##
+## @tex
+## $$ {\Vert A \Vert}_p  = \left[ \sum_{i=1}^N {| A_i |}^p \right] ^ {1/p} $$
+## @end tex
+## @ifnottex
+##
+## @example
+## @var{p-norm} (@var{A}, @var{p}) = sum (abs (@var{A}) .^ @var{p})) ^ (1/@var{p})
+## @end example
+##
+## @end ifnottex
+## If @var{p} is omitted it defaults to 2 (Euclidean norm).  @var{p} can be
+## @code{Inf} (absolute value of largest element).
+##
+## If @var{dim} is omitted the first non-singleton dimension is used.
+##
+## @seealso{norm}
+## @end deftypefn
+
+function n = vecnorm (A, p = 2, dim)
+
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
+  endif
+
+  if (! isscalar (p) || ! isreal (p) || (p <= 0))
+    error ("vecnorm: P must be positive real scalar or Inf");
+  endif
+
+  sz = size (A);
+  if (nargin <= 2)
+    ## Find the first non-singleton dimension.
+    (dim = find (sz > 1, 1)) || (dim = 1);
+  elseif (! (isscalar (dim) && dim == fix (dim) && dim > 0))
+    error ("vecnorm: DIM must be an integer and a valid dimension");
+  endif
+
+  ## Calculate norm using the value of p to accelerate special cases
+  switch (p)
+    case {1}
+      n = sum (abs (A), dim);
+
+    case {2}
+      n = sqrt (sumsq (A, dim));
+
+    case {Inf}
+      n = max (abs (A), [], dim);
+
+    otherwise
+      if (rem (p,2) == 0)
+        n = (sum ((real (A).^2 + imag (A).^2) .^ (p/2), dim)) .^ (1 / p);
+      else
+        n = (sum (abs (A) .^ p, dim)) .^ (1 / p);
+      endif
+
+  endswitch
+
+endfunction
+
+
+%!test
+%! A = [0 1 2; 3 4 5];
+%! c = vecnorm (A);
+%! r = vecnorm (A, 2, 2);
+%! i = vecnorm (A, Inf);
+%! assert (c, [3.0000, 4.1231, 5.3852], 1e-4);
+%! assert (r, [2.2361; 7.0711], 1e-4);
+%! assert (i, [3, 4, 5]);
+%!test
+%! A = [1, 2];
+%! assert (vecnorm (A), 2.2361, 1e-4);
+%!test
+%! A(:, :, 1) = [1, 2];
+%! A(:, :, 2) = [3, 4];
+%! A(:, :, 3) = [5, 6];
+%! ret(:, :, 1) = 2.2361;
+%! ret(:, :, 2) = 5;
+%! ret(:, :, 3) = 7.8102;
+%! assert (vecnorm (A), ret, 1e-4);
+
+## Test input validation
+%!error vecnorm ()
+%!error vecnorm (1,2,3,4)
+%!error <P must be positive real scalar> vecnorm (1, [1 2])
+%!error <P must be positive real scalar> vecnorm (1, i)
+%!error <P must be positive real scalar> vecnorm (1, -1)
+%!error <P must be positive real scalar> vecnorm (1, 0)
+%!error <DIM must be an integer and a valid dimension> vecnorm (1, 2, [1 2])
+%!error <DIM must be an integer and a valid dimension> vecnorm (1, 2, [1 2])
+%!error <DIM must be an integer and a valid dimension> vecnorm (1, 2, 0)
+%!error <DIM must be an integer and a valid dimension> vecnorm (1, 2, -1)
