# HG changeset patch
# User jwe
# Date 1189628075 0
#      Wed Sep 12 20:14:35 2007 +0000
# Node ID b2b7526a57722463975bedf08ff38ecd4d74abd7
# Parent  ebff56d6b0a85e5e58829de69a06a05e098ded58
[project @ 2007-09-12 20:14:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2007-09-12  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (text::properties::properties): Default color is
+	black, not white.
+	* graphics.h (text::properties::color): Declare as color_property,
+	not octave_value.
+
+	* graphics.h.in (root_figure::defaults, figure::defaults,
+	axes::defaults, line::defaults, text::defaults, image::defaults,
+	patch::defaults, surface::defaults): New functions.
+	* gripes.cc (gripe_not_implemented): New function.
+	* gripes.h: Provide decl.
+
 2007-09-10  John W. Eaton  <jwe@octave.org>
 
 	* genprops.awk: Add missing newline character at end of file.
 	From Alexander Klimov <alserkli@inbox.ru>.
 
 2007-09-10  David Bateman  <dbateman@free.fr>
 
 	* data.cc (do_cat): Avoid invalid indexing into ra_idx vector.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1252,17 +1252,17 @@ axes::properties::set (const property_na
     }
 
   if (modified)
     mark_modified ();
 }
 
 void
 axes::properties::set_defaults (base_graphics_object& obj,
-				     const std::string& mode)
+				const std::string& mode)
 {
   position = Matrix ();
   title = octave_NaN;
   box = "on";
   key = "off";
   keybox = "off";
   keypos = 1;
   dataaspectratio = Matrix (1, 3, 1.0);
@@ -1868,17 +1868,17 @@ std::string line::properties::go_name ("
 text::properties::properties (const graphics_handle& mh,
 			      const graphics_handle& p)
   : base_properties (go_name, mh, p),
     string (""),
     units ("data"),
     position (Matrix (1, 3, 0.0)),
     rotation (0),
     horizontalalignment ("left"),
-    color (Matrix (1, 3, 1.0))
+    color (Matrix (1, 3, 0.0))
 { }
 
 void
 text::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
   if (name.compare ("parent"))
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -31,16 +31,17 @@ 02110-1301, USA.
 #include <cctype>
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 
+#include "gripes.h"
 #include "oct-map.h"
 #include "ov.h"
 
 class
 radio_values
 {
 public:
   radio_values (const std::string& opt_string = std::string ());
@@ -910,16 +911,21 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const
+  {
+    gripe_not_implemented ("root_figure::defaults");
+  }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 
   static property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
@@ -1044,16 +1050,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("figure::defaults"); }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
@@ -1222,16 +1230,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& np) { xproperties.reparent (np); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("axes::defaults"); }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
@@ -1327,16 +1337,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("line::defaults"); }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class text : public base_graphics_object
 {
 public:
@@ -1361,17 +1373,17 @@ public:
     // properties declarations.
 
     BEGIN_PROPERTIES
       octave_value string
       octave_value units
       octave_value position
       octave_value rotation
       octave_value horizontalalignment
-      octave_value color
+      color_property color
     END_PROPERTIES
 
     static std::string go_name;
   };
 
 private:
   properties xproperties;
 
@@ -1420,16 +1432,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("text::defaults"); }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class image : public base_graphics_object
 {
 public:
@@ -1510,16 +1524,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("image::defaults"); }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class patch : public base_graphics_object
 {
 public:
@@ -1610,16 +1626,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("patch::defaults"); }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class surface : public base_graphics_object
 {
 public:
@@ -1701,16 +1719,18 @@ public:
   void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { xproperties.adopt (h); }
 
   void reparent (const graphics_handle& h) { xproperties.reparent (h); }
 
   base_properties& get_properties (void) { return xproperties; }
 
+  void defaults (void) const { gripe_not_implemented ("surface::defaults"); }
+
   bool valid_object (void) const { return true; }
 };
 
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
 set_property_in_handle (double handle, const std::string &property,
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -33,16 +33,22 @@ 02110-1301, USA.
 
 void
 gripe_not_supported (const char *fcn)
 {
   error ("%s: not supported on this system", fcn);
 }
 
 void
+gripe_not_implemented (const char *fcn)
+{
+  error ("%s: not implemented", fcn);
+}
+
+void
 gripe_string_invalid (void)
 {
   error ("std::string constant used in invalid context");
 }
 
 void
 gripe_range_invalid (void)
 {
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -29,16 +29,19 @@ 02110-1301, USA.
 #include "oct-types.h"
 
 class octave_value;
 
 extern OCTINTERP_API void
 gripe_not_supported (const char *);
 
 extern OCTINTERP_API void
+gripe_not_implemented (const char *);
+
+extern OCTINTERP_API void
 gripe_string_invalid (void);
 
 extern OCTINTERP_API void
 gripe_range_invalid (void);
 
 extern OCTINTERP_API void
 gripe_nonconformant (void);
 
