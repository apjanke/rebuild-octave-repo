# HG changeset patch
# User jwe
# Date 1193857698 0
#      Wed Oct 31 19:08:18 2007 +0000
# Node ID b04f0523558d211044bac289be18a17eb3886ce8
# Parent  625891845df5eb452b79c50de6eed8f043a3aa97
[project @ 2007-10-31 19:08:18 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-10-31  Muthiah Annamalai  <muthuspost@gmail.com>
+
+	* pt-assign.h (tree_simple_assignment::op_type,
+	tree_multi_assignment::op_type): New functions.
+	* pt-unop.h (tree_unary_expression::op_type): New function.
+
 2007-10-31  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (line::properties::get): Fix property name
 	(markerface -> markerfacecolor).
 
 	* Makefile.in (INCLUDES): Add debug.h to the list.
 
 2007-10-30  John Swensen  <jpswensen@comcast.net>
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -71,16 +71,18 @@ public:
   tree_expression *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   tree_expression *dup (symbol_table *sym_tab);
 
   void accept (tree_walker& tw);
 
+  octave_value::assign_op op_type (void) const { return etype; }
+
 private:
 
   void do_assign (octave_lvalue& ult, const octave_value_list& args,
 		  const octave_value& rhs_val);
 
   void do_assign (octave_lvalue& ult, const octave_value& rhs_val);
 
   // The left hand side of the assignment.
@@ -138,16 +140,18 @@ public:
 
   tree_argument_list *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   tree_expression *dup (symbol_table *sym_tab);
 
   void accept (tree_walker& tw);
+  
+  octave_value::assign_op op_type (void) const { return etype; }
 
 private:
 
   // The left hand side of the assignment.
   tree_argument_list *lhs;
 
   // The right hand side of the assignment.
   tree_expression *rhs;
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -53,16 +53,18 @@ public:
 
   ~tree_unary_expression (void) { delete op; }
 
   bool has_magic_end (void) const { return (op && op->has_magic_end ()); }
 
   tree_expression *operand (void) { return op; }
 
   std::string oper (void) const;
+  
+  octave_value::unary_op op_type (void) const { return etype; }
 
 protected:
 
   // The operand for the expression.
   tree_expression *op;
 
   // The type of the expression.
   octave_value::unary_op etype;
