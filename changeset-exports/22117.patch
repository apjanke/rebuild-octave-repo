# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1468593828 14400
#      Fri Jul 15 10:43:48 2016 -0400
# Node ID 9b832e9caae69736e3f1b3264b036e47b7cca2b8
# Parent  03e30a5d6e0d8f6669caa164b6a531755f387662
define forwarding functions for octave_int<T> xmin and xmax (bug #48139)

* lo-mappers.h (min, max): Define forwarding functions for
octave_int<T> types.
* MArray.cc (MArray<T>::idx_min, MArray<T>::idx_max): Use
octave::math::min and max as template parameters instead of xmin and
xmax.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -115,17 +115,17 @@ since all of Octave's header files alrea
 #    define OCTAVE_NORETURN
 #    define OCTAVE_UNUSED
 
 /* #    undef HAVE_OCTAVE_DEPRECATED_ATTR */
 /* #    undef HAVE_OCTAVE_NORETURN_ATTR */
 /* #    undef HAVE_OCTAVE_UNUSED_ATTR */
 #  endif
 
-#  define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
+// #  define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
 
 #  if defined (__cplusplus)
 template <typename T>
 static inline void
 octave_unused_parameter (const T&)
 { }
 #  else
 #    define octave_unused_parameter(param) (void) param;
diff --git a/liboctave/array/MArray.cc b/liboctave/array/MArray.cc
--- a/liboctave/array/MArray.cc
+++ b/liboctave/array/MArray.cc
@@ -106,18 +106,18 @@ MArray<T>::idx_min (const idx_vector& id
     {
       this->resize1 (ext);
       n = ext;
     }
 
   octave_quit ();
 
   octave_idx_type len = std::min (idx.length (n), vals.numel ());
-  idx.loop (len, _idxbinop_helper<T, xmin> (this->fortran_vec (),
-                                            vals.data ()));
+  idx.loop (len, _idxbinop_helper<T, octave::math::min> (this->fortran_vec (),
+                                                         vals.data ()));
 }
 
 template <typename T>
 void
 MArray<T>::idx_max (const idx_vector& idx, const MArray<T>& vals)
 {
   octave_idx_type n = this->numel ();
   octave_idx_type ext = idx.extent (n);
@@ -125,18 +125,18 @@ MArray<T>::idx_max (const idx_vector& id
     {
       this->resize1 (ext);
       n = ext;
     }
 
   octave_quit ();
 
   octave_idx_type len = std::min (idx.length (n), vals.numel ());
-  idx.loop (len, _idxbinop_helper<T, xmax> (this->fortran_vec (),
-                                            vals.data ()));
+  idx.loop (len, _idxbinop_helper<T, octave::math::max> (this->fortran_vec (),
+                                                         vals.data ()));
 }
 
 #include <iostream>
 
 template <typename T>
 void MArray<T>::idx_add_nd (const idx_vector& idx, const MArray<T>& vals,
                             int dim)
 {
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_lo_mappers_h)
 #define octave_lo_mappers_h 1
 
 #include "octave-config.h"
 
 #include <limits>
 
 #include "oct-cmplx.h"
+#include "oct-inttypes-fwd.h"
 #include "lo-math.h"
 #include "lo-ieee.h"
 
 namespace octave
 {
   namespace math
   {
     extern OCTAVE_API bool is_NA (double x);
@@ -404,16 +405,30 @@ namespace octave
     }
 
     inline std::complex<float>
     max (const std::complex<float>& x, const std::complex<float>& y)
     {
       return abs (x) >= abs (y) ? x : (isnan (x) ? x : y);
     }
 
+    template <typename T>
+    inline octave_int<T>
+    min (const octave_int<T>& x, const octave_int<T>& y)
+    {
+      return xmin (x, y);
+    }
+
+    template <typename T>
+    inline octave_int<T>
+    max (const octave_int<T>& x, const octave_int<T>& y)
+    {
+      return xmax (x, y);
+    }
+
     // These map reals to Complex.
 
     extern OCTAVE_API Complex rc_acos (double);
     extern OCTAVE_API FloatComplex rc_acos (float);
 
     extern OCTAVE_API Complex rc_acosh (double);
     extern OCTAVE_API FloatComplex rc_acosh (float);
 
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -45,17 +45,17 @@ along with Octave; see the file COPYING.
 #  define OCTAVE_UNUSED __attribute__ ((__unused__))
 #  define HAVE_OCTAVE_UNUSED_ATTR 1
 #else
 #  define OCTAVE_DEPRECATED(msg)
 #  define OCTAVE_NORETURN
 #  define OCTAVE_UNUSED
 #endif
 
-#define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
+// #define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
 
 #if defined (__cplusplus)
 template <typename T>
 static inline void
 octave_unused_parameter (const T&)
 { }
 #else
 #  define octave_unused_parameter(param) (void) param;
