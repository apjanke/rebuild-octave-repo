# HG changeset patch
# User Rik <rik@octave.org>
# Date 1534360771 25200
#      Wed Aug 15 12:19:31 2018 -0700
# Node ID 4e4ffcca8b5db663384f35eda8d8df1132e95d70
# Parent  8644e7df7fc72d9bea9df404d07f0f5841fae7d5
condest.m: Overhaul function to return Inf for singular matrices (bug #46737).

* condest.m: Add check that first input is either a matrix or a function handle.
Add input check that second argument is a function handle if the first argument is.
Disable Octave:nearly-singular-matrix warning during computation as this could
quite reasonably be triggered.  For matrix inputs, after LU decomposition, check
that U does not contain any zeros on the diagonal (singular matrix).  If singular
matrix detected, return Inf immediately.  Use "isargout (2)" and only calculate
second output if necessary.  Add new BIST test for bug #46737.  Add new input
validation BIST tests.

diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -151,73 +151,90 @@ function [cest, v] = condest (varargin)
   have_apply_normest1 = false;
   have_solve_normest1 = false;
 
   if (isnumeric (varargin{1}))
     A = varargin{1};
     if (! issquare (A))
       error ("condest: A must be square");
     endif
+    have_A = true;
     n = rows (A);
-    have_A = true;
     if (nargin > 1)
       if (is_function_handle (varargin{2}))
         solve = varargin{2};
         have_solve_normest1 = true;
         if (nargin > 2)
           t = varargin{3};
           have_t = true;
         endif
       else
         t = varargin{2};
         have_t = true;
         real_op = isreal (A);
       endif
     else
       real_op = isreal (A);
     endif
-  else  # varargin{1} is a function handle
+  elseif (is_function_handle (varargin{1}))
     if (nargin == 1)
       error("condest: must provide SOLVEFCN when using AFCN");
     endif
     apply = varargin{1};
     have_apply_normest1 = true;
+    if (! is_function_handle (varargin{2}))
+      error("condest: SOLVEFCN must be a function handle");
+    endif
     solve = varargin{2};
     have_solve_normest1 = true;
     n = apply ("dim", [], varargin{4:end});
     if (nargin > 2)
       t = varargin{3};
       have_t = true;
     endif
+  else
+    error ("condest: first argument must be a square matrix or function handle");
   endif
 
   if (! have_t)
     t = min (n, 5);
   endif
 
+  ## Disable warnings which may be emitted during calculation process.
+  warning ("off", "Octave:nearly-singular-matrix", "local");
+
   if (! have_solve_normest1)
      ## prepare solve in normest1 form
     if (issparse (A))
       [L, U, P, Pc] = lu (A);
       solve = @(flag, x) solve_sparse (flag, x, n, real_op, L, U, P, Pc);
     else
       [L, U, P] = lu (A);
       solve = @(flag, x) solve_not_sparse (flag, x, n, real_op, L, U, P);
     endif
+
+    ## Check for singular matrices before continuing
+    if (any (diag (U) == 0))
+      cest = Inf;
+      v = [];
+      return;
+    endif
   endif
 
   if (have_A)
     Anorm = norm (A, 1);
   else
     Anorm = normest1 (apply, t, [], varargin{4:end});
   endif
   [Ainv_norm, v, w] = normest1 (solve, t, [], varargin{4:end});
 
   cest = Anorm * Ainv_norm;
-  v = w / norm (w, 1);
+  if (isargout (2))
+    v = w / norm (w, 1);
+  endif
 
 endfunction
 
 function value = solve_sparse (flag, x, n, real_op, L , U , P , Pc)
   switch (flag)
     case "dim"
       value = n;
     case "real"
@@ -237,16 +254,17 @@ function value = solve_not_sparse (flag,
       value = real_op;
     case "notransp"
       value = P' * (L' \ (U' \ x));
     case "transp"
       value = U \ (L \ (P * x));
   endswitch
 endfunction
 
+
 ## Note: These test bounds are very loose.  There is enough randomization to
 ## trigger odd cases with hilb().
 
 %!function value = apply_fun (flag, x, A, m)
 %!  if (nargin == 3)
 %!    m = 1;
 %!  endif
 %!  switch (flag)
@@ -265,31 +283,30 @@ endfunction
 %!    m = 1;
 %!  endif
 %!  switch (flag)
 %!    case "dim"
 %!      value = length (A);
 %!    case "real"
 %!      value = isreal (A);
 %!    case "notransp"
-%!      value = x; for i = 1:m, value = A \ value;, endfor;
+%!      value = x; for i = 1:m, value = A \ value;, endfor
 %!    case "transp"
-%!      value = x; for i = 1:m, value = A' \ value;, endfor;
+%!      value = x; for i = 1:m, value = A' \ value;, endfor
 %!  endswitch
 %!endfunction
 
 %!test
 %! N = 6;
 %! A = hilb (N);
 %! cA = condest (A);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-8);
 
 %!test
-%! warning ("off", "Octave:nearly-singular-matrix", "local");
 %! N = 12;
 %! A = hilb (N);
 %! [~, v] = condest (A);
 %! x = A*v;
 %! assert (norm (x, inf), 0, eps);
 
 %!test
 %! N = 6;
@@ -311,13 +328,23 @@ endfunction
 %!test # parameters for apply and solve functions
 %! N = 6;
 %! A = hilb (N);
 %! m = 2;
 %! cA = condest (@apply_fun, @solve_fun, [], A, m);
 %! cA_test = norm (inv (A^2), 1) * norm (A^2, 1);
 %! assert (cA, cA_test, -2^-6);
 
+%!test <*46737>
+%! A = [ 0         0         0
+%!       0   3.33333 0.0833333
+%!       0 0.0833333   1.66667];
+%! [cest, v] = condest (A);
+%! assert (cest, Inf);
+%! assert (v, []);
+
 ## Test input validation
 %!error condest ()
 %!error condest (1,2,3,4,5,6,7)
 %!error <A must be square> condest ([1 2])
 %!error <must provide SOLVEFCN when using AFCN> condest (@sin)
+%!error <SOLVEFCN must be a function handle> condest (@sin, 1)
+%!error <argument must be a square matrix or function handle> condest ({1})
