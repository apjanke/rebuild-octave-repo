# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1519251381 -3600
#      Wed Feb 21 23:16:21 2018 +0100
# Branch stable
# Node ID 9773b7ae807c132c13b40af2fe3f49ac412860ad
# Parent  ed6f6bbed6045b8a974c36b5ac6aee6007cdfa66
fixed typos in __gammainc_lentz__.cc

--
changed libinterp/corefcn/__gammainc_lentz__.cc

diff --git a/libinterp/corefcn/__gammainc_lentz__.cc b/libinterp/corefcn/__gammainc_lentz__.cc
--- a/libinterp/corefcn/__gammainc_lentz__.cc
+++ b/libinterp/corefcn/__gammainc_lentz__.cc
@@ -57,18 +57,17 @@ DEFUN (__gammainc_lentz__, args, , "Cont
           NDArray a_arg = args(1).array_value ();
           NDArray x (dim_scen);
           NDArray a (dim_scen);
 
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x.fill (x_arg(0));
           else
-          x = x_arg;
-          //
+            x = x_arg;
           if (len_a == 1)
             a.fill (a_arg(0));
           else
             a = a_arg;
           static const double tiny = pow (2, -100);
           static const double eps = std::numeric_limits<double>::epsilon();
           double y, Cj, Dj, bj, aj, Deltaj;
           int j, maxit;
@@ -93,30 +92,29 @@ DEFUN (__gammainc_lentz__, args, , "Cont
                   Deltaj = Cj * Dj;
                   y *= Deltaj;
                   bj += 2;
                   aj = j * (a(ii) - j);
                   j++;
                 }
               if (! error_state)
                   f(ii) = y;
-              outargs(0) = f;
             }
+          outargs(0) = f;
         }
       else
         {
           FloatNDArray x_s (dim_scen);
           FloatNDArray a_s (dim_scen);
 
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x_s.fill (x_arg_s(0));
           else
           x_s = x_arg_s;
-          //
           if (len_a == 1)
             a_s.fill (a_arg_s(0));
           else
             a_s = a_arg_s;
           static const float tiny = pow (2, -50);
           static const float eps = std::numeric_limits<float>::epsilon();
           float y, Cj, Dj, bj, aj, Deltaj;
           int j, maxit;
@@ -141,14 +139,14 @@ DEFUN (__gammainc_lentz__, args, , "Cont
                   Deltaj = Cj * Dj;
                   y *= Deltaj;
                   bj += 2;
                   aj = j * (a_s(ii) - j);
                   j++;
                 }
               if (! error_state)
                   f(ii) = y;
-              outargs(0) = f;
             }
+          outargs(0) = f;
         }
     }
   return octave_value (outargs);
 }
