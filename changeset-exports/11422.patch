# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1293587023 28800
#      Tue Dec 28 17:43:43 2010 -0800
# Node ID 3cae59b4c0f7fc31cf54d103d32952ae6a9a1994
# Parent  a451eb6f92b2bac3a50908203a0f734dddf6ce05
Improve docstrings for functions which emulate operators.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-12-28  Rik  <octave@nomad.inbox5.com>
+
+	* data.cc (and, ctranspose, eq, ge, gt, ldivide, le, lt, minus,
+	mldivide, mpower, mrdivide, mtimes, ne, not, or, plus, power, rdivide,
+	times, transpose, uminus, uplus): Improve docstrings for functions
+	which emulate operators.  Add Seealso cross-referencing.
+
 2010-12-28  David Bateman  <dbateman@free.fr>
 
 	* ls-mat5.cc (save_mat5_array_length (const float*, octave_idx_type,
         bool)): Take in to account the 4 bytes of padding for an odd number
 	of elements in single precision arrays.
 
 2010-12-27  Rik  <octave@nomad.inbox5.com>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4821,44 +4821,47 @@ unary_op_defun_body (octave_value::unary
     print_usage ();
 
   return retval;
 }
 
 DEFUN (not, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} not (@var{x})\n\
-This function is equivalent to @code{! x}.\n\
+Return the logical NOT of @var{x}.  This function is equivalent to\n\
+@code{! x}.\n\
+@seealso{and, or}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_not, args);
 }
 
 DEFUN (uplus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uplus (@var{x})\n\
-This function is equivalent to @code{+ x}.\n\
+This function is equivalent to @w{@code{+ x}}.\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_uplus, args);
 }
 
 DEFUN (uminus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uminus (@var{x})\n\
-This function is equivalent to @code{- x}.\n\
+This function is equivalent to @w{@code{- x}}.\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_uminus, args);
 }
 
 DEFUN (transpose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} transpose (@var{x})\n\
-This function is equivalent to @code{x.'}.\n\
+Return the transpose of @var{x}.  This function is equivalent to @code{x.'}.\n\
+@seealso{ctranspose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_transpose, args);
 }
 
 /*
 
 %!assert (2.', 2);
@@ -4879,17 +4882,19 @@ This function is equivalent to @code{x.'
 
 %!assert (transpose (single([1,2;3,4])),single([1,3;2,4]));
 
 */
 
 DEFUN (ctranspose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ctranspose (@var{x})\n\
-This function is equivalent to @code{x'}.\n\
+Return the complex conjugate transpose of @var{x}.  This function is\n\
+equivalent to @code{x'}.\n\
+@seealso{transpose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_hermitian, args);
 }
 
 /*
 
 %!assert (2', 2);
@@ -4954,218 +4959,245 @@ binary_assoc_op_defun_body (octave_value
 
   return retval;
 }
 
 DEFUN (plus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} plus (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} plus (@var{x1}, @var{x2}, @dots{})\n\
-This function is equivalent to @code{x + y}.\n\
+This function is equivalent to @w{@code{x + y}}.\n\
 If more arguments are given, the summation is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 + x2) + x3) + @dots{})\n\
 @end example\n\
 \n\
-At least one argument is needed.\n\
+At least one argument is required.\n\
+@seealso{minus}\n\
 @end deftypefn")
 {
   return binary_assoc_op_defun_body (octave_value::op_add,
                                      octave_value::op_add_eq, args);
 }
 
 DEFUN (minus, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} minus (@var{x}, @var{y})\n\
-This function is equivalent to @code{x - y}.\n\
+This function is equivalent to @w{@code{x - y}}.\n\
+@seealso{plus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_sub, args);
 }
 
 DEFUN (mtimes, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mtimes (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} mtimes (@var{x1}, @var{x2}, @dots{})\n\
-This function is equivalent to @code{x * y}.\n\
+Return the matrix multiplicaton product of inputs.\n\
+This function is equivalent to @w{@code{x * y}}.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 * x2) * x3) * @dots{})\n\
 @end example\n\
 \n\
-At least one argument is needed.\n\
+At least one argument is requred.\n\
+@seealso{times}\n\
 @end deftypefn")
 {
   return binary_assoc_op_defun_body (octave_value::op_mul,
                                      octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mrdivide (@var{x}, @var{y})\n\
-This function is equivalent to @code{x / y}.\n\
+Return the matrix right division of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x / y}}.\n\
+@seealso{mldivide, rdivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mpower (@var{x}, @var{y})\n\
-This function is equivalent to @code{x ^ y}.\n\
+Return the matrix power operation of @var{x} raised to the @var{y} power.\n\
+This function is equivalent to @w{@code{x ^ y}}.\n\
+@seealso{power}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mldivide (@var{x}, @var{y})\n\
-This function is equivalent to @code{x \\ y}.\n\
+Return the matrix left division of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x \\ y}}.\n\
+@seealso{mrdivide, ldivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ldiv, args);
 }
 
 DEFUN (lt, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} lt (@var{x}, @var{y})\n\
-This function is equivalent to @code{x < y}.\n\
+This function is equivalent to @w{@code{x < y}}.\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_lt, args);
 }
 
 DEFUN (le, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} le (@var{x}, @var{y})\n\
-This function is equivalent to @code{x <= y}.\n\
+This function is equivalent to @w{@code{x <= y}}.\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_le, args);
 }
 
 DEFUN (eq, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eq (@var{x}, @var{y})\n\
-This function is equivalent to @code{x == y}.\n\
+Return true if the two inputs are equal.\n\
+This function is equivalent to @w{@code{x == y}}.\n\
+@seealso{ne, isequal}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_eq, args);
 }
 
 DEFUN (ge, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ge (@var{x}, @var{y})\n\
-This function is equivalent to @code{x >= y}.\n\
+This function is equivalent to @w{@code{x >= y}}.\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ge, args);
 }
 
 DEFUN (gt, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} gt (@var{x}, @var{y})\n\
-This function is equivalent to @code{x > y}.\n\
+This function is equivalent to @w{@code{x > y}}.\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_gt, args);
 }
 
 DEFUN (ne, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ne (@var{x}, @var{y})\n\
-This function is equivalent to @code{x != y}.\n\
+Return true if the two inputs are not equal.\n\
+This function is equivalent to @w{@code{x != y}}.\n\
+@seealso{eq, isequal}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ne, args);
 }
 
 DEFUN (times, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} times (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} times (@var{x1}, @var{x2}, @dots{})\n\
-This function is equivalent to @code{x .* y}.\n\
+Return the element-by-element multiplication product of inputs.\n\
+This function is equivalent to @w{@code{x .* y}}.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 .* x2) .* x3) .* @dots{})\n\
 @end example\n\
 \n\
-At least one argument is needed.\n\
+At least one argument is required.\n\
+@seealso{mtimes}\n\
 @end deftypefn")
 {
   return binary_assoc_op_defun_body (octave_value::op_el_mul,
                                      octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rdivide (@var{x}, @var{y})\n\
-This function is equivalent to @code{x ./ y}.\n\
+Return the element-by-element right division of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x ./ y}}.\n\
+@seealso{ldivide, mrdivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_div, args);
 }
 
 DEFUN (power, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} power (@var{x}, @var{y})\n\
-This function is equivalent to @code{x .^ y}.\n\
+Return the element-by-element operation of @var{x} raised to the\n\
+@var{y} power.\n\
+This function is equivalent to @w{@code{x .^ y}}.\n\
+@seealso{mpower}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_pow, args);
 }
 
 DEFUN (ldivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ldivide (@var{x}, @var{y})\n\
-This function is equivalent to @code{x .\\ y}.\n\
+Return the element-by-element left division of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x .\\ y}}.\n\
+@seealso{rdivide, mldivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_ldiv, args);
 }
 
 DEFUN (and, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} and (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} and (@var{x1}, @var{x2}, @dots{})\n\
-This function is equivalent to @code{x & y}.\n\
+Return the logical AND of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x & y}}.\n\
 If more arguments are given, the logical and is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 & x2) & x3) & @dots{})\n\
 @end example\n\
 \n\
-At least one argument is needed.\n\
+At least one argument is required.\n\
+@seealso{or, not}\n\
 @end deftypefn")
 {
   return binary_assoc_op_defun_body (octave_value::op_el_and,
                                      octave_value::op_el_and_eq, args);
 }
 
 DEFUN (or, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} or (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} or (@var{x1}, @var{x2}, @dots{})\n\
-This function is equivalent to @code{x | y}.\n\
+Return the logical OR of @var{x} and @var{y}.\n\
+This function is equivalent to @w{@code{x | y}}.\n\
 If more arguments are given, the logical or is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
   (@dots{}((x1 | x2) | x3) | @dots{})\n\
 @end example\n\
 \n\
-At least one argument is needed.\n\
+At least one argument is required.\n\
+@seealso{and, not}\n\
 @end deftypefn")
 {
   return binary_assoc_op_defun_body (octave_value::op_el_or,
                                      octave_value::op_el_or_eq, args);
 }
 
 static double tic_toc_timestamp = -1.0;
 
