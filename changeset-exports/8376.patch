# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228477908 -3600
#      Fri Dec 05 12:51:48 2008 +0100
# Node ID c43481a19bfe496accc54fd2f57c7dd0993acbe6
# Parent  e3c9102431a9c50c04622e87deb34d8af98600ba
implement ASCII saving of diag & perm matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-12-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-diag.cc (save_ascii, load_ascii): Save natively.
+	* ov-base-diag.h (load_ascii): Declare.
+	* ov-perm.cc (save_ascii, load_ascii): Save natively.
+	* ov-perm.h (load_ascii): Declare.
+
+
 2008-12-04  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
         * strfns.cc (Fchar): Add test from str2mat.m
         
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::is_perm_matrix): New method.
 	* ov-base.h (octave_base_value::is_perm_matrix): New method.
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -31,16 +31,18 @@ along with Octave; see the file COPYING.
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "pr-output.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-stream.h"
 #include "ops.h"
 
+#include "ls-oct-ascii.h"
+
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::subsref (const std::string& type,
                                     const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
@@ -350,42 +352,69 @@ octave_base_diag<DMT, MT>::convert_to_st
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
 template <class DMT, class MT>
 bool 
 octave_base_diag<DMT, MT>::save_ascii (std::ostream& os)
 {
-  // FIXME: this should probably save the matrix as diagonal.
-  return to_dense ().save_ascii (os);
+  os << "# rows: " << matrix.rows () << "\n"
+    << "# columns: " << matrix.columns () << "\n";
+
+  os << matrix.diag ();
+
+  return true;
 }
 
 template <class DMT, class MT>
 bool 
-octave_base_diag<DMT, MT>::save_binary (std::ostream& os, bool& save_as_floats)
+octave_base_diag<DMT, MT>::load_ascii (std::istream& is)
 {
-  return to_dense ().save_binary (os, save_as_floats);
-}
+  octave_idx_type r = 0, c = 0;
+  bool success = true;
 
-#if defined (HAVE_HDF5)
+  if (extract_keyword (is, "rows", r, true)
+      && extract_keyword (is, "columns", c, true))
+    {
+      octave_idx_type l = r < c ? r : c;
+      MT tmp (l, 1);
+      is >> tmp;
 
-template <class DMT, class MT>
-bool
-octave_base_diag<DMT, MT>::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
-{
-  return to_dense ().save_hdf5 (loc_id, name, save_as_floats);
+      if (!is) 
+	{
+	  error ("load: failed to load diagonal matrix constant");
+	  success = false;
+	}
+      else
+        {
+          // This is a little tricky, as we have the Matrix type, but
+          // not ColumnVector type. We need to help the compiler get
+          // through the inheritance tree.
+          typedef typename DMT::element_type el_type;
+          matrix = DMT (MDiagArray2<el_type> (MArray<el_type> (tmp)));
+          matrix.resize (r, c);
+
+          // Invalidate cache. Probably not necessary, but safe.
+          dense_cache = octave_value ();
+        }
+    }
+  else
+    {
+      error ("load: failed to extract number of rows and columns");
+      success = false;
+    }
+
+  return success;
 }
 
-#endif
-
 template <class DMT, class MT>
 void
 octave_base_diag<DMT, MT>::print_raw (std::ostream& os,
-			  bool pr_as_read_syntax) const
+                                      bool pr_as_read_syntax) const
 {
   return to_dense ().print_raw (os, pr_as_read_syntax);
 }
 
 template <class DMT, class MT>
 mxArray *
 octave_base_diag<DMT, MT>::as_mxArray (void) const
 {
@@ -400,31 +429,32 @@ octave_base_diag<DMT, MT>::print_as_scal
 
   return (dv.all_ones () || dv.any_zero ());
 }
 
 template <class DMT, class MT>
 void
 octave_base_diag<DMT, MT>::print (std::ostream& os, bool pr_as_read_syntax) const
 {
-  to_dense ().print (os, pr_as_read_syntax);
+  print_raw (os, pr_as_read_syntax);
+  newline (os);
 }
 template <class DMT, class MT>
 int
 octave_base_diag<DMT, MT>::write (octave_stream& os, int block_size,
                                   oct_data_conv::data_type output_type, int skip,
                                   oct_mach_info::float_format flt_fmt) const
 { 
   return to_dense ().write (os, block_size, output_type, skip, flt_fmt); 
 }
 
 template <class DMT, class MT>
 void
 octave_base_diag<DMT, MT>::print_info (std::ostream& os,
-				    const std::string& prefix) const
+                                       const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::to_dense (void) const
 {
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -184,21 +184,17 @@ public:
   uint64_array_value (void) const { return to_dense ().uint64_array_value (); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
-  bool save_binary (std::ostream& os, bool& save_as_floats);
-
-#if defined (HAVE_HDF5)
-  bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
-#endif
+  bool load_ascii (std::istream& is);
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const;
 
   mxArray *as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -27,16 +27,18 @@ along with Octave; see the file COPYING.
 #include "ov-perm.h"
 #include "ov-flt-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "error.h"
 #include "gripes.h"
 #include "ops.h"
 
+#include "ls-oct-ascii.h"
+
 octave_value
 octave_perm_matrix::subsref (const std::string& type,
                              const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
@@ -234,36 +236,69 @@ octave_value
 octave_perm_matrix::convert_to_str_internal (bool pad, bool force, char type) const
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
 bool 
 octave_perm_matrix::save_ascii (std::ostream& os)
 {
-  // FIXME: this should probably save the matrix as permutation.
-  return to_dense ().save_ascii (os);
+  typedef octave_int<octave_idx_type> idx_int_type;
+
+  os << "# size: " << matrix.rows () << "\n";
+  os << "# orient: " << (matrix.is_col_perm () ? 'c' : 'r') << '\n';
+
+  Array<octave_idx_type> pvec = matrix.pvec ();
+  octave_idx_type n = pvec.length ();
+  ColumnVector tmp (n);
+  for (octave_idx_type i = 0; i < n; i++) tmp(i) = pvec(i) + 1;
+  os << tmp;
+
+  return true;
 }
 
 bool 
-octave_perm_matrix::save_binary (std::ostream& os, bool& save_as_floats)
+octave_perm_matrix::load_ascii (std::istream& is)
 {
-  return to_dense ().save_binary (os, save_as_floats);
-}
-
-#if defined (HAVE_HDF5)
+  typedef octave_int<octave_idx_type> idx_int_type;
+  octave_idx_type n;
+  bool success = true;
+  char orient;
 
-bool
-octave_perm_matrix::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
-{
-  return to_dense ().save_hdf5 (loc_id, name, save_as_floats);
+  if (extract_keyword (is, "size", n, true)
+      && extract_keyword (is, "orient", orient, true))
+    {
+      bool colp = orient == 'c';
+      dim_vector dv (n);
+      ColumnVector tmp (n);
+      is >> tmp;
+      if (!is) 
+	{
+	  error ("load: failed to load permutation matrix constant");
+	  success = false;
+	}
+      else
+        {
+          Array<octave_idx_type> pvec (n);
+          for (octave_idx_type i = 0; i < n; i++) pvec(i) = tmp(i) - 1;
+          matrix = PermMatrix (pvec, colp);
+
+          // Invalidate cache. Probably not necessary, but safe.
+          dense_cache = octave_value ();
+        }
+    }
+  else
+    {
+      error ("load: failed to extract size & orientation");
+      success = false;
+    }
+
+  return success;
 }
 
-#endif
-
 void
 octave_perm_matrix::print_raw (std::ostream& os,
 			  bool pr_as_read_syntax) const
 {
   return to_dense ().print_raw (os, pr_as_read_syntax);
 }
 
 mxArray *
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -178,21 +178,17 @@ public:
   uint64_array_value (void) const { return to_dense ().uint64_array_value (); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
-  bool save_binary (std::ostream& os, bool& save_as_floats);
-
-#if defined (HAVE_HDF5)
-  bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
-#endif
+  bool load_ascii (std::istream& is);
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const;
 
   mxArray *as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
