# HG changeset patch
# User jwe
# Date 1020746993 0
#      Tue May 07 04:49:53 2002 +0000
# Node ID 311981a9726d147d650dce152804740664fbb661
# Parent  61d4427c016e5e447359f8f0ef58e68b5941ff5c
[project @ 2002-05-07 04:49:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2002-05-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* TEMPLATE-INST/Map-oct-obj.cc: New file.
+	* Makefile.in (TI_XSRC): Add it to the list.
+
+	* oct-map.h (Octave_map): Make CHMap<octave_value_list> a data
+	member instead of deriving from CHMap<octave_value>, in
+	preparation for structure arrays.
+
 	* pt-indir.h, pt-indir.cc: Delete.
 
 	* pt-all.h: Don't include pt-indir.h.
 
 	* Makefile.in (PT_SRC): Delete pt-indir.cc from the list.
 	(PT_INCLUDES): Delete pt-indir.h from the list.
 
 	* pt-walk.h (tree_walker::visit_indirect_ref): Delete.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -84,20 +84,20 @@ INCLUDES := BaseSLList.h Cell.h DLList.h
 	oct-fstrm.h oct-hist.h oct-iostrm.h oct-map.h oct-obj.h \
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h oct-stream.h \
 	oct-strstrm.h oct-lvalue.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h siglist.h symtab.h \
 	sysdep.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc Map-fnc.cc \
-	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
-	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-ovl.cc SLStack-pc.cc \
-	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
-	SLStack-ue.cc SLStack-ui.cc
+	Map-oct-obj.cc Map-tc.cc SLList-expr.cc SLList-misc.cc \
+	SLList-plot.cc SLList-tc.cc SLList-tm.cc SLStack-i.cc \
+	SLStack-ovl.cc SLStack-pc.cc SLStack-str.cc SLStack-sym.cc \
+	SLStack-tok.cc SLStack-ue.cc SLStack-ui.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -25,17 +25,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "str-vec.h"
 
-#include "ov.h"
 #include "oct-map.h"
 #include "utils.h"
 
 string_vector
 Octave_map::make_name_list (void)
 {
   int len = length ();
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -24,37 +24,71 @@ Software Foundation, 59 Temple Place - S
 #define octave_oct_map_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include "Map.h"
 
-#include "ov.h"
+#include "oct-obj.h"
 
 class string_vector;
 
 class
-Octave_map : public CHMap<octave_value>
+Octave_map
 {
  public:
-  Octave_map (void) : CHMap<octave_value> (octave_value ()) { }
+  Octave_map (void) : map (octave_value_list ()) { }
 
   Octave_map (const std::string& key, const octave_value& value)
-    : CHMap<octave_value> (octave_value ())
+    : map (octave_value_list ())
       {
-	CHMap<octave_value>::operator [] (key) = value;
+	map[key] = octave_value_list (value);
       }
 
-  Octave_map (const Octave_map& m) : CHMap<octave_value> (m) { }
+  Octave_map (const Octave_map& m) : map (m.map) { }
+
+  Octave_map& operator = (const Octave_map& m)
+    {
+      if (this != &m)
+	map = m.map;
+
+      return *this;
+    }
 
   ~Octave_map (void) { }
 
+  int length (void) const { return map.length (); }
+
+  int empty (void) const { return map.empty (); }
+
+  octave_value& operator [] (const std::string& key) { return map[key](0); }
+
+  void del (const std::string& key) { map.del (key); }
+
+  Pix first (void) const { return map.first (); }
+  void next (Pix& i) const { map.next (i); }
+
+  std::string key (Pix p) const { return map.key (p); }
+
+  octave_value& contents (Pix p) const { return map.contents (p)(0); }
+
+  Pix seek (const std::string& key) const { return map.seek (key); }
+
+  int contains (const std::string& key) const { return map.contains (key); }
+
+  void clear (void) { map.clear (); }
+
   string_vector make_name_list (void);
+
+private:
+
+  // The map of names to values.
+  CHMap<octave_value_list> map;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
