# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294262255 18000
#      Wed Jan 05 16:17:35 2011 -0500
# Node ID 40f311a6941705ef3c390917dfd4d002c7eadcfb
# Parent  08f8b0d96091556d3cdf95bab9829c04ff5a25ad
fix OO field access in subfunctions of private functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2011-01-05  John W. Eaton  <jwe@octave.org>
+
+	Bug #32060.
+
+	* ov-fcn.h (octave_function::mark_as_private_function): Now virtual.
+	* ov-usr-fcn.h (octave_function::mark_as_private_fucntion):
+	New function.  Mark subfunctions as private also.
+	* symtab.cc, symtab.h
+	(symbol_table::mark_subfunctions_in_scope_as_private,
+	symbol_table::fcn_info::mark_subfunction_in_scope_as_private,
+	symbol_table::fcn_info::fcn_info_rep::mark_subfunction_in_scope_as_private):
+	New functions.
+
 2011-01-04  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-sparse.cc (octave_base_sparse<T>::print_raw): Improve
 	display of percentage full.  Bug #32011.
 
 2011-01-04  John W. Eaton  <jwe@octave.org>
 
 	* ov-typeinfo.cc (Ftypeinfo): Return cell array of character
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -87,17 +87,18 @@ public:
   virtual bool takes_varargs (void) const { return false; }
 
   virtual bool takes_var_return (void) const { return false; }
 
   void stash_dispatch_class (const std::string& nm) { xdispatch_class = nm; }
 
   std::string dispatch_class (void) const { return xdispatch_class; }
 
-  void mark_as_private_function (const std::string& cname = std::string ())
+  virtual void
+  mark_as_private_function (const std::string& cname = std::string ())
   {
     private_function = true;
     xdispatch_class = cname;
   }
 
   bool is_private_function (void) const { return private_function; }
 
   bool is_private_function_of_class (const std::string& nm)
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -228,16 +228,23 @@ public:
     {
       symbol_table::erase_subfunctions_in_scope (local_scope);
     }
 
   bool takes_varargs (void) const;
 
   bool takes_var_return (void) const;
 
+  void mark_as_private_function (const std::string& cname = std::string ())
+    {
+      symbol_table::mark_subfunctions_in_scope_as_private (local_scope, cname);
+
+      octave_function::mark_as_private_function (cname);
+    }
+
   void lock_subfunctions (void);
 
   void unlock_subfunctions (void);
 
   octave_value_list all_va_args (const octave_value_list& args);
 
   void stash_function_name (const std::string& s) { my_name = s; }
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -424,16 +424,31 @@ symbol_table::fcn_info::fcn_info_rep::lo
             }
         }
     }
 
   return retval;
 }
 
 void
+symbol_table::fcn_info::fcn_info_rep:: mark_subfunction_in_scope_as_private
+  (scope_id scope, const std::string& class_name)
+{
+  scope_val_iterator p = subfunctions.find (scope);
+
+  if (p != subfunctions.end ())
+    {
+      octave_function *fcn = p->second.function_value ();
+
+      if (fcn)
+        fcn->mark_as_private_function (class_name);
+    }
+}
+
+void
 symbol_table::fcn_info::fcn_info_rep::print_dispatch (std::ostream& os) const
 {
   if (dispatch_map.empty ())
     os << "dispatch: " << name << " is not overloaded" << std::endl;
   else
     {
       os << "Overloaded function " << name << ":\n\n";
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -589,16 +589,19 @@ public:
       void erase_subfunction (scope_id scope)
       {
         scope_val_iterator p = subfunctions.find (scope);
 
         if (p != subfunctions.end ())
           subfunctions.erase (p);
       }
 
+      void mark_subfunction_in_scope_as_private (scope_id scope,
+                                                 const std::string& class_name);
+
       void install_cmdline_function (const octave_value& f)
       {
         cmdline_function = f;
       }
 
       void install_subfunction (const octave_value& f, scope_id scope)
       {
         subfunctions[scope] = f;
@@ -819,16 +822,22 @@ public:
       return rep->subfunction_defined_in_scope (scope);
     }        
 
     void erase_subfunction (scope_id scope)
     {
       rep->erase_subfunction (scope);
     }
 
+    void mark_subfunction_in_scope_as_private (scope_id scope,
+                                               const std::string& class_name)
+    {
+      rep->mark_subfunction_in_scope_as_private (scope, class_name);
+    }
+
     void install_cmdline_function (const octave_value& f)
     {
       rep->install_cmdline_function (f);
     }
 
     void install_subfunction (const octave_value& f, scope_id scope)
     {
       rep->install_subfunction (f, scope);
@@ -961,16 +970,25 @@ public:
 
   static void erase_subfunctions_in_scope (scope_id scope)
   {
     for (fcn_table_iterator q = fcn_table.begin ();
          q != fcn_table.end (); q++)
       q->second.erase_subfunction (scope);
   }
 
+  static void
+  mark_subfunctions_in_scope_as_private (scope_id scope,
+                                         const std::string& class_name)
+  {
+    for (fcn_table_iterator q = fcn_table.begin ();
+         q != fcn_table.end (); q++)
+      q->second.mark_subfunction_in_scope_as_private (scope, class_name);
+  }
+
   static scope_id dup_scope (scope_id scope)
   {
     scope_id retval = -1;
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       {
