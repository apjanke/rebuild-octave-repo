# HG changeset patch
# User jwe
# Date 823162027 0
#      Thu Feb 01 08:07:07 1996 +0000
# Node ID 3a47ca3dd227ce92bbdcad04bc06eae27af9a30e
# Parent  2e77f6543ad6939e3bc1829a54774f4df4d29408
[project @ 1996-02-01 08:06:35 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -18,21 +18,21 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 /*
 
-The 3 functions listed below were adapted from similar functions
+The 2 functions listed below were adapted from similar functions
 from GNU Bash, the Bourne Again SHell, copyright (C) 1987, 1989, 1991
 Free Software Foundation, Inc.
 
-  read_octal    sub_append_string    decode_prompt_string
+  read_octal    decode_prompt_string
 
 */
 
 // Use the GNU readline library for command line editing and hisory.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
@@ -55,47 +55,16 @@ Free Software Foundation, Inc.
 #endif
 
 // This must come before anything that includes iostream.h...
 // (This is apparently no longer true...)
 
 #include "readline/readline.h"
 #include "readline/history.h"
 
-// Yes, this sucks, but it avoids a conflict with another readline
-// function declared in iostream.h.
-// (Apparently, there isn't one there now...)
-
-#if 0
-#define LINE_SIZE 8192
-static int no_line_editing = 0;
-#endif
-
-char *
-gnu_readline (const char *s)
-{
-#if 0
-  static int state = 0;
-  static char *line_from_stdin = 0;
-  if (no_line_editing)
-    {
-      if (! state)
-	{
-	  line_from_stdin = (char *) malloc (LINE_SIZE);
-	  state = 1;
-	}
-      fputs ("octave> ", stdout);
-      fgets (line_from_stdin, LINE_SIZE, stdin);
-      return line_from_stdin;
-    }
-  else
-#endif
-    return readline (s);
-}
-
 #include "str-vec.h"
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "help.h"
 #include "input.h"
 #include "oct-map.h"
@@ -108,26 +77,16 @@ gnu_readline (const char *s)
 #include "pt-const.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
-// The size that strings change by.
-#ifndef DEFAULT_ARRAY_SIZE
-#define DEFAULT_ARRAY_SIZE 512
-#endif
-
-// The growth rate for the prompt string.
-#ifndef PROMPT_GROWTH
-#define PROMPT_GROWTH 50
-#endif
-
 // Global pointer for eval().
 string current_eval_string;
 
 // Nonzero means get input from current_eval_string.
 int get_input_from_eval_string = 0;
 
 // Nonzero means we're parsing a function file.
 int reading_fcn_file = 0;
@@ -139,38 +98,32 @@ string curr_fcn_file_name;
 string curr_fcn_file_full_name;
 
 // Nonzero means we're parsing a script file.
 int reading_script_file = 0;
 
 // If we are reading from an M-file, this is it.
 FILE *ff_instream = 0;
 
-// Nonzero means we are using readline.
-int using_readline = 1;
-
 // Nonzero means this is an interactive shell.
 int interactive = 0;
 
 // Nonzero means the user forced this shell to be interactive (-i).
 int forced_interactive = 0;
 
 // Should we issue a prompt?
 int promptflag = 1;
 
 // The current line of input, from wherever.
 string current_input_line;
 
-// A line of input from readline.
-static char *octave_gets_line = 0;
-
 // Return the octal number parsed from STRING, or -1 to indicate that
 // the string contained a bad number.
 
-int
+static int
 read_octal (const string& s)
 {
   int result = 0;
   int digits = 0;
 
   size_t i = 0;
   size_t slen = s.length ();
 
@@ -265,17 +218,17 @@ decode_prompt_string (const string& s)
 		else
 		  temp.resize (10);
 
 		goto add_string;
 	      }
 
 	    case 'n':
 	      {
-		if (! no_line_editing)
+		if (using_readline)
 		  temp = "\r\n";
 		else
 		  temp = "\n";
 
 		goto add_string;
 	      }
 
 	    case 's':
@@ -436,143 +389,206 @@ do_input_echo (const string& input_strin
 	  if (input_string[input_string.length () - 1] != '\n')
 	    buf << "\n";
 	}
 
       maybe_page_output (buf);
     }
 }
 
-// Use GNU readline to get an input line and store it in the history
-// list.
+char *
+gnu_readline (const char *s)
+{
+  char *retval = 0;
+
+  if (using_readline)
+    {
+      retval = ::readline (s);
+    }
+  else
+    {
+      if (s && *s && (interactive || forced_interactive))
+	fprintf (rl_outstream, s);
+
+      FILE *curr_stream = rl_instream;
+      if (reading_fcn_file || reading_script_file)
+	curr_stream = ff_instream;
+
+      int grow_size = 1024;
+      int max_size = grow_size;
+
+      char *buf = (char *) malloc (max_size);
+      char *bufptr = buf;
+
+      do
+	{
+	  if (fgets (bufptr, grow_size, curr_stream))
+	    {
+	      int len = strlen (bufptr);
+
+	      if (len == grow_size - 1)
+		{
+		  int tmp = bufptr - buf + grow_size - 1;
+		  grow_size *= 2;
+		  max_size += grow_size;
+		  buf = (char *) realloc (buf, max_size);
+		  bufptr = buf + tmp;
+
+		  if (*(bufptr-1) == '\n')
+		    {
+		      *bufptr = '\0';
+		      retval = buf;
+		    }
+		}
+	      else if (bufptr[len-1] != '\n')
+		{
+		  bufptr[len++] = '\n';
+		  bufptr[len] = '\0';
+		  retval = buf;
+		}
+	      else
+		retval = buf;
+	    }
+	  else
+	    break;
+	}
+      while (! retval);
+    }
+
+  return retval;
+}
 
 static char *
 octave_gets (void)
 {
-  if (octave_gets_line)
-    {
-      free (octave_gets_line);
-      octave_gets_line = 0;
-    }
+  char *retval = 0;
 
-  if (interactive || forced_interactive)
+  if ((interactive || forced_interactive)
+      && (! (reading_fcn_file || reading_script_file)))
     {
       const char *ps = (promptflag > 0) ? user_pref.ps1.c_str () :
 	user_pref.ps2.c_str ();
 
       string prompt = decode_prompt_string (ps);
 
       if (interactive)
 	{
 	  pipe_handler_error_count = 0;
 	  flush_output_to_pager ();
 	}
 
       maybe_write_to_diary_file (prompt);
 
-      octave_gets_line = gnu_readline (prompt.c_str ());
+      retval = gnu_readline (prompt.c_str ());
     }
   else
-    octave_gets_line = gnu_readline ("");
+    retval = gnu_readline ("");
 
-  current_input_line = string (octave_gets_line);
+  if (retval)
+    current_input_line = retval;
+  else
+    current_input_line = "";
 
-  if (octave_gets_line && *octave_gets_line)
+  if (! current_input_line.empty ())
     {
       if (! input_from_startup_file)
-	octave_command_history.add (octave_gets_line);
+	octave_command_history.add (current_input_line);
 
-      maybe_write_to_diary_file (octave_gets_line);
+      maybe_write_to_diary_file (current_input_line);
 
-      do_input_echo (octave_gets_line);
+      do_input_echo (current_input_line);
     }
 
   maybe_write_to_diary_file ("\n");
   
-  return octave_gets_line;
+  return retval;
 }
 
 // Read a line from the input stream.
 
-int
-octave_read (char *buf, unsigned max_size)
+static char *
+get_user_input (void)
 {
-  int status = 0;
+  char *retval = 0;
 
   if (get_input_from_eval_string)
     {
       size_t len = current_eval_string.length ();
 
-      if (len < max_size - 1)
+      retval = (char *) malloc (len + 2);
+
+      strcpy (retval, current_eval_string.c_str ());
+
+      retval[len++] = '\n';
+      retval[len] = '\0';    // Paranoia.
+    }
+  else
+    retval = octave_gets ();
+
+  if (retval)
+    current_input_line = retval;
+
+  input_line_number++;
+
+  return retval;
+}
+
+int
+octave_read (char *buf, unsigned max_size)
+{
+  static char *input_buf = 0;
+  static char *cur_pos = 0;
+  static int chars_left = 0;
+
+  int status = 0;
+
+  if (! input_buf)
+    {
+      cur_pos = input_buf = get_user_input ();
+
+      chars_left = input_buf ? strlen (input_buf) : 0;
+    }
+
+  if (chars_left > 0)
+    {
+      buf[0] = '\0';
+
+      int len = max_size - 2;
+
+      strncpy (buf, cur_pos, len);
+
+      if (chars_left > len)
 	{
-	  strcpy (buf, current_eval_string.c_str ());
-	  buf[len++] = '\n';
-	  buf[len] = '\0';    // Paranoia.
+	  chars_left -= len;
+
+	  cur_pos += len;
+
+	  buf[len] = '\0';
+
 	  status = len;
 	}
       else
-	status = -1;
-
-      current_input_line = buf;
-    }
-  else if (using_readline)
-    {
-      char *cp = octave_gets ();
-      if (cp)
 	{
-	  size_t len = strlen (cp);
+	  free (input_buf);
+	  input_buf = 0;
 
-	  if (len >= max_size)
-	    status = -1;
-	  else
-	    {
-	      strcpy (buf, cp);
-	      buf[len++] = '\n';
-	      buf[len] = '\0';    // Paranoia.
-	      status = len;
-	    }
-	}
-      current_input_line = cp;
-    }
-  else
-    {
-      FILE *curr_stream = rl_instream;
-      if (reading_fcn_file || reading_script_file)
-	curr_stream = ff_instream;
+	  len = chars_left;
+
+	  if (buf[len-1] != '\n')
+	    buf[len++] = '\n';
 
-      assert (curr_stream);
-
-      // Why is this required?
-      buf[0] = '\0';
-
-      if (fgets (buf, max_size, curr_stream))
-	{
-	  size_t len = strlen (buf);
+	  buf[len] = '\0';
 
-	  if (len > max_size - 2)
-	    status = -1;
-	  else
-	    {
-	      if (buf[len-1] != '\n')
-		{
-		  buf[len++] = '\n';
-		  buf[len] = '\0';
-		}
-	      status = len;
-	    }
+	  status = len;
 	}
-      else
-	status = 0; // Tell yylex that we found EOF.
-
-      current_input_line = buf;
-
-      do_input_echo (current_input_line);
     }
-
-  input_line_number++;
+  else if (chars_left == 0)
+    status = 0;
+  else    
+    status = -1;
 
   return status;
 }
 
 // Fix things up so that input can come from file `name', printing a
 // warning if the file doesn't exist.
 
 FILE *
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -72,18 +72,18 @@ extern string load_path;
 extern string info_file;
 
 // Name of the info reader we'd like to use.
 extern string info_prog;
 
 // Name of the editor to be invoked by the edit_history command.
 extern string editor;
 
-// If nonzero, don't do fancy line editing.
-extern int no_line_editing;
+// Nonzero means we are using readline.
+extern int using_readline;
 
 // If nonzero, print verbose info in some cases.
 extern int verbose_flag;
 
 // Nonzero means we printed messages about reading startup files.
 extern int reading_startup_message_printed;
 
 // Command number, counting from the beginning of this session.
