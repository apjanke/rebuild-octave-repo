# HG changeset patch
# User jwe
# Date 847253538 0
#      Wed Nov 06 04:12:18 1996 +0000
# Node ID 0c788e9b53b88a5cedbff56ff4a1c9cbf7cb5cf7
# Parent  7f99808d467d23c9e8554c1a316e7fcd0effc79c
[project @ 1996-11-06 04:10:07 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,12 @@
 Tue Nov  5 12:32:30 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* configure.in: Add checks for geteuid, getuid.
+
 	* configure.in: Comment out code to handle --enable-readline since
 	it doesn't work yet.
 
 	* aclocal.m4 (OCTAVE_SIGNAL_CHECK, OCTAVE_REINSTALL_SIGHANDLERS):
 	New checks stolen from bash 2.0 config.
 	* configure.in: Use them.
 
 	* acconfig.h: Add #undefs for HAVE_BSD_SIGNALS, HAVE_POSIX_SIGNALS,
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1996 John W. Eaton
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.225 $)
+AC_REVISION($Revision: 1.227 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -174,17 +174,17 @@ AC_SUBST(LIBPLPLOT)
 AC_SUBST(PLPLOT_DIR)
 
 ### Allow the user disable support for command line editing using GNU
 ### readline.
 
 READLINE_DIR=readline
 USE_READLINE=true
 LIBREADLINE=-lreadline
-dnlAC_ARG_ENABLE(readline,
+dnl AC_ARG_ENABLE(readline,
 dnl  [  --enable-readline       use readline library (default is yes)],
 dnl  [if test "$enableval" = no; then
 dnl     USE_READLINE=false;
 dnl     LIBREADLINE="";
 dnl     READLINE_DIR="";
 dnl   fi], [])
 if $USE_READLINE; then
   AC_DEFINE(USE_READLINE, 1)
@@ -691,23 +691,23 @@ if test -f $srcdir/libcruft/fsqp/fsqpd.f
 else
   AC_MSG_RESULT(no)
   AC_DEFINE(FSQP_MISSING, 1)
 fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endpwent execvp fcntl fork \
-	       getcwd gethostname getpgrp getpid getppid getpwent \
-	       getpwnam getpwuid lstat memmove mkdir mkfifo on_exit \
-	       pipe putenv rename rindex rmdir setpwent setvbuf \
-	       sigaction sigpending sigprocmask sigsuspend stat \
-	       strcasecmp strdup strerror stricmp strncasecmp \
-	       strnicmp tempnam umask unlink vfprintf vsprintf \
-	       waitpid)
+	       getcwd geteuid gethostname getpgrp getpid getppid \
+	       getpwent getpwnam getpwuid getuid lstat memmove mkdir \
+	       mkfifo on_exit pipe putenv rename rindex rmdir \
+	       setpwent setvbuf sigaction sigpending sigprocmask \
+	       sigsuspend stat strcasecmp strdup strerror stricmp \
+	       strncasecmp strnicmp tempnam umask unlink vfprintf \
+	       vsprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 OCTAVE_PROGRAM_INVOCATION_NAME
 
 LIBDLFCN=
 DLFCN_INCFLAGS=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   case "$canonical_host_type" in
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 Tue Nov  5 13:00:35 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* syscalls.cc (Fgeteuid, Fgetuid): New functions.
+
+	* getpwent.cc: Use gripe_not_supported from gripes.cc, instead of
+	local gripe_not_implemented function.
+
 	* input.cc, sysdep.cc, variables.cc: Only include readline.h and
 	history.h if USE_READLINE is defined.
 
 	* help.cc: Make it compile without warnings even if USE_GNU_INFO
 	is not defined.
 
 	* sighandlers.h (octave_child_list): Don't define
 	HAVE_POSIX_SIGNALS HERE.
diff --git a/src/getpwent.cc b/src/getpwent.cc
--- a/src/getpwent.cc
+++ b/src/getpwent.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_PWD_H
 #include <pwd.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
+#include "gripes.h"
 #include "help.h"
 #include "oct-map.h"
 #include "ov.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // Password file functions.  (Why not?)
 
@@ -64,37 +65,32 @@ mk_pw_map (struct passwd *pw)
       retval = m;
     }
   else
     retval = 0.0;
 
   return retval;
 }
 
-#if ! (defined (HAVE_GETPWENT) || defined (HAVE_GETPWUID) \
-       || defined (HAVE_GETPWNAM) || defined (HAVE_SETPWENT) \
-       || defined (HAVE_ENDPWENT))
-static void
-gripe_not_implemented (const char *nm)
-{
-  error ("%s: not implemented on this system", nm);
-}
-#endif
-
 DEFUN_DLD (getpwent, , ,
  "getpwent ()\n\
 \n\
 Read an entry from the password-file stream, opening it if necessary.")
 {
   octave_value retval;
 
 #ifdef HAVE_GETPWENT
-  retval = mk_pw_map (getpwent ());
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    retval = mk_pw_map (getpwent ());
+  else
+    print_usage ("getpwent");
 #else
-  gripe_not_implemented ("getpwent");
+  gripe_not_supported ("getpwent");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (getpwuid, args, ,
   "getpwuid (UID)\n\
 \n\
@@ -119,17 +115,17 @@ Search for a password entry with a match
 	    }
 	  else
 	    error ("getpwuid: argument must be an integer");
 	}
     }
   else
     print_usage ("getpwuid");
 #else
-  gripe_not_implemented ("getpwuid");
+  gripe_not_supported ("getpwuid");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (getpwnam, args, ,
   "getpwnam (NAME)\n\
 \n\
@@ -145,49 +141,59 @@ Search for password entry with a matchin
       string s = args(0).string_value ();
 
       if (! error_state)
 	retval = mk_pw_map (getpwnam (s.c_str ()));
     }
   else
     print_usage ("getpwnam");
 #else
-  gripe_not_implemented ("getpwnam");
+  gripe_not_supported ("getpwnam");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (setpwent, , ,
   "setpwent ()\n\
 \n\
 Rewind the password-file stream.")
 {
   octave_value retval;
 
 #ifdef HAVE_SETPWENT
-  setpwent ();
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    setpwent ();
+  else
+    print_usage ("setpwent");
 #else
-  gripe_not_implemented ("setpwent");
+  gripe_not_supported ("setpwent");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (endpwent, , ,
   "endpwent ()\n\
 \n\
 Close the password-file stream.")
 {
   octave_value retval;
 
 #ifdef HAVE_ENDPWENT
-  endpwent ();
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    endpwent ();
+  else
+    print_usage ("endpwent");
 #else
-  gripe_not_implemented ("endpwent");
+  gripe_not_supported ("endpwent");
 #endif
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -304,16 +304,50 @@ DEFUN (getppid, args, ,
     print_usage ("getppid");
 #else
   gripe_not_supported ("getppid");
 #endif
 
   return retval;
 }
 
+DEFUN (geteuid, , ,
+  "uid = geteuid (): return the effective user id of the current process")
+{
+  double retval = -1.0;
+
+#if defined (HAVE_GETEUID)
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    retval = geteuid ();
+  else
+    print_usage ("geteuid");
+#else
+  gripe_not_supported ("geteuid");
+#endif
+}
+
+DEFUN (getuid, , ,
+  "uid = getuid (): return the real user id of the current process")
+{
+  double retval = -1.0;
+
+#if defined (HAVE_GETUID)
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    retval = getuid ();
+  else
+    print_usage ("getuid");
+#else
+  gripe_not_supported ("getuid");
+#endif
+}
+
 DEFUN (lstat, args, ,
   "[S, ERR, MSG] = lstat (NAME)\n\
 \n\
 Like [S, ERR, MSG] = stat (NAME), but if NAME refers to a symbolic\n\
 link, returns information about the link itself, not the file that it\n\
 points to.")
 {
   octave_value_list retval;
