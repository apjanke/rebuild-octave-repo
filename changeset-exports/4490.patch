# HG changeset patch
# User jwe
# Date 1062097393 0
#      Thu Aug 28 19:03:13 2003 +0000
# Node ID 1aed172ab84a8e758c323f5dde2cb85fe5bb10e0
# Parent  a90c3cbded0d192f26ea12b51a5e84030b578a4c
[project @ 2003-08-28 19:03:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2003-08-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-specfun.cc (zbesj, zbesy, zbesi, zbesk, airy, biry):
+	Also zero imaginary part of result if real part of input value is
+	zero.
+
 2003-07-30  Heine Kolltveit  <kolltvei@idi.ntnu.no>
 
 	* mx-base.h: Include ArrayN.h.
 
 2003-30-07  Heine Kolltveit  <kolltvei@idi.ntnu.no>
 
         * ArrayN.cc (operator <<): Corrected output.
 
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -214,17 +214,17 @@ zbesj (const Complex& z, double alpha, i
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
       F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
 
-      if (zi == 0.0 && zr > 0.0)
+      if (zi == 0.0 && zr >= 0.0)
 	yi = 0.0;
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       alpha = -alpha;
 
@@ -267,17 +267,17 @@ zbesy (const Complex& z, double alpha, i
 	  yr = -octave_Inf;
 	  yi = 0.0;
 	}
       else
 	{
 	  F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, kode, 1, &yr, &yi, nz,
 				  &wr, &wi, ierr);
 
-	  if (zi == 0.0 && zr > 0.0)
+	  if (zi == 0.0 && zr >= 0.0)
 	    yi = 0.0;
 	}
 
       return bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       alpha = -alpha;
@@ -309,17 +309,17 @@ zbesi (const Complex& z, double alpha, i
 
       int nz;
 
       double zr = z.real ();
       double zi = z.imag ();
 
       F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
 
-      if (zi == 0.0 && zr > 0.0)
+      if (zi == 0.0 && zr >= 0.0)
 	yi = 0.0;
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       alpha = -alpha;
 
@@ -360,17 +360,17 @@ zbesk (const Complex& z, double alpha, i
 	{
 	  yr = octave_Inf;
 	  yi = 0.0;
 	}
       else
 	{
 	  F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, kode, 1, &yr, &yi, nz, ierr);
 
-	  if (zi == 0.0 && zr > 0.0)
+	  if (zi == 0.0 && zr >= 0.0)
 	    yi = 0.0;
 	}
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else
     {
       Complex tmp = zbesk (z, -alpha, kode, ierr);
@@ -611,17 +611,17 @@ airy (const Complex& z, bool deriv, bool
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
   int kode = scaled ? 2 : 1;
 
   F77_FUNC (zairy, ZAIRY) (zr, zi, id, kode, ar, ai, nz, ierr);
 
-  if (zi == 0.0 && (! scaled || zr > 0.0))
+  if (zi == 0.0 && (! scaled || zr >= 0.0))
     ai = 0.0;
 
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 Complex
 biry (const Complex& z, bool deriv, bool scaled, int& ierr)
 {
@@ -632,17 +632,17 @@ biry (const Complex& z, bool deriv, bool
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
   int kode = scaled ? 2 : 1;
 
   F77_FUNC (zbiry, ZBIRY) (zr, zi, id, kode, ar, ai, ierr);
 
-  if (zi == 0.0 && (! scaled || zr > 0.0))
+  if (zi == 0.0 && (! scaled || zr >= 0.0))
     ai = 0.0;
 
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 ComplexMatrix
 airy (const ComplexMatrix& z, bool deriv, bool scaled, Array2<int>& ierr)
 {
