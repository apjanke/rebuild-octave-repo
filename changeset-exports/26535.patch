# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546323346 -3600
#      Tue Jan 01 07:15:46 2019 +0100
# Branch stable
# Node ID d68381feb6cbb3459f02ed0dbbb3b48b8f40e0b3
# Parent  c8efbaf651803cbde9ee16fc008246c376774a8b
jit: Avoid the use of llvm::getGlobalContext, removed in LLVM 3.9

* libinterp/parse-tree/pt-jit.h: Add a static llvm_context member in tree_jit.
* libinterp/parse-tree/pt-jit.cc: Define and use tree_jit::llvm_context.
* libinterp/parse-tree/jit-typeinfo.cc: Use tree_jit::llvm_context.

diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -71,17 +71,17 @@ along with Octave; see the file COPYING.
 #include "ov-builtin.h"
 #include "ov-complex.h"
 #include "ov-scalar.h"
 #include "pager.h"
 #include "interpreter-private.h"
 
 namespace octave
 {
-  static llvm::LLVMContext& context = llvm::getGlobalContext ();
+  static llvm::LLVMContext& context = tree_jit::llvm_context;
 
   std::ostream& jit_print (std::ostream& os, jit_type *atype)
   {
     if (! atype)
       return os << "null";
     return os << atype->name ();
   }
 
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -116,19 +116,19 @@ static bool Vdebug_jit = false;
 static bool Vjit_enable = false;
 
 static int Vjit_startcnt = 1000;
 
 static int Vjit_failcnt = 0;
 
 namespace octave
 {
-  static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
-
-  static llvm::LLVMContext& context = llvm::getGlobalContext ();
+  static llvm::IRBuilder<> builder (tree_jit::llvm_context);
+
+  static llvm::LLVMContext& context = tree_jit::llvm_context;
 
   // -------------------- jit_break_exception --------------------
 
   // jit_break is thrown whenever a branch we are converting has only breaks or
   // continues.  This is because all code that follows a break or continue
   // is dead.
   class jit_break_exception : public std::exception
   { };
@@ -2096,16 +2096,18 @@ namespace octave
     return addr;
   }
 
 
   // -------------------- tree_jit --------------------
 
   bool tree_jit::initialized = false;
 
+  llvm::LLVMContext tree_jit::llvm_context;
+
   int tree_jit::next_forloop_number = 0;
   int tree_jit::next_function_number = 0;
   int tree_jit::next_module_number = 0;
 
   tree_jit::tree_jit (void)
     : target_machine (nullptr)
   {
     // target_machine will be truly initialized by tree_jit::do_initialize ()
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -387,16 +387,22 @@ namespace octave
 
     // ----- Initialization -----
 
   private:
 
     static bool initialized;
     bool do_initialize (void);
 
+    // ----- LLVM context -----
+
+  public:
+
+    static llvm::LLVMContext llvm_context;
+
     // ----- Target machine ----
 
   public:
 
     static const llvm::TargetMachine* get_target_machine (void)
     { return instance ().target_machine; }
 
   private:
