# HG changeset patch
# User jwe
# Date 1033661096 0
#      Thu Oct 03 16:04:56 2002 +0000
# Node ID ee47900970335fbcc0d2d08b0f932bc2b4085ac9
# Parent  babc519f245b815a5795c9f8ffa207da152b69e0
[project @ 2002-10-03 16:04:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2002-10-03  Paul Kienzle <pkienzle@users.sf.net>
+
+	* oct-time.cc: Win32 version of octave_time::stamp().
+
 2002-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read): Clean up error handling logic.
 
 2002-09-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* file-ops.cc (file_ops::mkdir): Handle one-arg mkdir here.
 
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -29,16 +29,20 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#if defined (__WIN32__)  && ! defined (HAVE_GETTIMEOFDAY)
+#include <windows.h>
+#endif
+
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-time.h"
 
 octave_time::octave_time (const octave_base_tm& tm)
 {
   struct tm t;
   
@@ -82,18 +86,84 @@ octave_time::stamp (void)
 
 #if defined  (GETTIMEOFDAY_NO_TZ)
   gettimeofday (&tp);
 #else
   gettimeofday (&tp, 0);
 #endif
 
   ot_unix_time = tp.tv_sec;
+  ot_usec = tp.tv_usec;
 
-  ot_usec = tp.tv_usec;
+#elif defined (__WIN32__)
+
+  // Loosely based on the code from Cygwin
+  // Copyright 1996-2002 Red Hat, Inc.
+  // Licenced under the GPL.
+
+  const LONGLONG TIME_OFFSET = 0x19db1ded53e8000LL;
+
+  static int init = 1;
+  static LARGE_INTEGER base;
+  static LARGE_INTEGER t0;
+  static double dt;
+
+  if (init)
+    {
+      LARGE_INTEGER ifreq;
+
+      if (QueryPerformanceFrequency (&ifreq))
+        {
+	  // Get clock frequency
+	  dt = (double) 1000000.0 / (double) ifreq.QuadPart;
+
+	  // Get base time as microseconds from Jan 1. 1970
+	  int priority = GetThreadPriority (GetCurrentThread ());
+	  SetThreadPriority (GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
+	  if (QueryPerformanceCounter (&base))
+	    {
+	      FILETIME f;
+
+	      GetSystemTimeAsFileTime (&f);
+
+	      t0.HighPart = f.dwHighDateTime;
+	      t0.LowPart = f.dwLowDateTime;
+	      t0.QuadPart -= TIME_OFFSET;
+	      t0.QuadPart /= 10;
+
+	      init = 0;
+	    }
+
+	  SetThreadPriority (GetCurrentThread (), priority);
+	}
+
+      if (! init)
+	{
+	  ot_unix_time = time (0);
+	  ot_usec = 0;
+
+	  return;
+	}
+    }
+
+  LARGE_INTEGER now;
+
+  if (QueryPerformanceCounter (&now))
+    {
+      now.QuadPart = (LONGLONG) (dt * (double)(now.QuadPart - base.QuadPart));
+      now.QuadPart += t0.QuadPart;
+
+      ot_unix_time = now.QuadPart / 1000000LL;
+      ot_usec = now.QuadPart % 1000000LL;
+    }
+  else
+    {
+      ot_unix_time = time (0);
+      ot_usec = 0;
+    }
 
 #else
 
   ot_unix_time = time (0);
 
 #endif
 }
 
