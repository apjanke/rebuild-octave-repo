# HG changeset patch
# User Mark van Rossum <mvanross@inf.ed.ac.uk>
# Date 1220885386 14400
#      Mon Sep 08 10:49:46 2008 -0400
# Branch release-3-0-x
# Node ID 4b36e0cc57ed20f32010b54146b2671c759eeb28
# Parent  0b1d7174a12c66790afba26ed887170c0cec3ec6
Handle zero values of n in binornd correctly

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-08  Mark van Rossum  <mvanross@inf.ed.ac.uk>
+
+	* statistics/distributions/binornd.m: Handle zero values of n
+	correctly.
+
 2008-08-28  Martin Weiser  <weiser2@natur.cuni.cz>
 
 	* plot/scatter3.m: Doc fix.
 
 2008-08-26  John W. Eaton  <jwe@octave.org>
 
 	* plot/hold.m: If hold is applied to a figure, set state for all
 	child axes objects.
diff --git a/scripts/statistics/distributions/binornd.m b/scripts/statistics/distributions/binornd.m
--- a/scripts/statistics/distributions/binornd.m
+++ b/scripts/statistics/distributions/binornd.m
@@ -70,29 +70,31 @@ function rnd = binornd (n, p, r, c)
     endif
   elseif (nargin == 2)
     sz = size(n);
   else
     print_usage ();
   endif
 
   if (isscalar (n) && isscalar (p))
-    if (find (!(n > 0) | !(n < Inf) | !(n == round (n)) |
+    if (find (!(n >= 0) | !(n < Inf) | !(n == round (n)) |
               !(p >= 0) | !(p <= 1)))
       rnd = NaN * ones (sz);
+    elseif (n == 0)
+      rnd = zeros (sz);
     else
       nel = prod (sz);
       tmp = rand (n, nel);
       rnd = sum(tmp < ones (n, nel) * p, 1);
       rnd = reshape(rnd, sz);
     endif
   else
     rnd = zeros (sz);
 
-    k = find (!(n > 0) | !(n < Inf) | !(n == round (n)) |
+    k = find (!(n >= 0) | !(n < Inf) | !(n == round (n)) |
               !(p >= 0) | !(p <= 1));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((n > 0) & (n < Inf) & (n == round (n)) & (p >= 0) & (p <= 1));
     if (any (k))
       N = max (n(k));
@@ -100,8 +102,11 @@ function rnd = binornd (n, p, r, c)
       tmp = rand (N, L);
       ind = (1 : N)' * ones (1, L);
       rnd(k) = sum ((tmp < ones (N, 1) * p(k)(:)') &
                     (ind <= ones (N, 1) * n(k)(:)'),1);
     endif
   endif
 
 endfunction
+
+%!assert (binornd(0, 0, 1), 0)
+%!assert (binornd([0, 0], [0, 0], 1, 2), [0, 0])
