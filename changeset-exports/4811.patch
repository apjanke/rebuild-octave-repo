# HG changeset patch
# User jwe
# Date 1078341873 0
#      Wed Mar 03 19:24:33 2004 +0000
# Node ID 198f3712c6925dab819b5c4bed45b5b7c27ee891
# Parent  72a6d410a14a42ff0593a75099ac8f50c2673b64
[project @ 2004-03-03 19:24:33 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2004-03-03  Hans Ekkehard Plesser  <hans.ekkehard.plesser@nlh.no>
+
+	* base-lu.cc (base_lu<>::L): Check bounds before setting diagonal
+	element.
+
+2004-03-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Range.h (Range::Range): Add cache to member initialization list.
+	(Range::clear_cache): New private function.
+
+	* Range.h (Range::set_base, Range::set_limit, Range::set_inc):
+	Use clear cache.  Don't do anything if range does not change.
+	* Range.cc (Range::sort): Likewise.
+
 2004-03-02  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* Range.cc (Range::matrix_value): Cache result.
 	(Range::sort): Clear cache.
 	* Range.h (Range::cache): New data member.
 	(Range::set_base, Range::set_limit, Range::set_inc): Clear cache.
 	(Range::print_range): Delete.
 
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -47,17 +47,17 @@ Range::all_elements_are_ints (void) cons
   return (! (xisnan (rng_base) || xisnan (rng_inc))
 	  && NINT (rng_base) == rng_base
 	  && NINT (rng_inc) == rng_inc);
 }
 
 Matrix
 Range::matrix_value (void) const
 {
-  if (rng_nelem > 0 && cache.rows() == 0)
+  if (rng_nelem > 0 && cache.rows () == 0)
     {
       cache.resize (1, rng_nelem);
       double b = rng_base;
       double increment = rng_inc;
       for (int i = 0; i < rng_nelem; i++)
 	cache(i) = b + i * increment;
 
       // On some machines (x86 with extended precision floating point
@@ -124,17 +124,17 @@ void
 Range::sort (void)
 {
   if (rng_base > rng_limit && rng_inc < 0.0)
     {
       double tmp = rng_base;
       rng_base = min ();
       rng_limit = tmp;
       rng_inc = -rng_inc;
-      cache.resize (0,0);
+      clear_cache ();
     }
 }
 
 std::ostream&
 operator << (std::ostream& os, const Range& a)
 {
   double b = a.base ();
   double increment = a.inc ();
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -31,63 +31,89 @@ Software Foundation, 59 Temple Place - S
 #include "dMatrix.h"
 
 class
 Range
 {
  public:
 
   Range (void)
-    : rng_base (-1), rng_limit (-1), rng_inc (-1), rng_nelem (-1) { }
+    : rng_base (-1), rng_limit (-1), rng_inc (-1), rng_nelem (-1), cache () { }
 
   Range (const Range& r)
     : rng_base (r.rng_base), rng_limit (r.rng_limit), rng_inc (r.rng_inc),
-      rng_nelem (r.rng_nelem) { }
+      rng_nelem (r.rng_nelem), cache () { }
 
   Range (double b, double l)
     : rng_base (b), rng_limit (l), rng_inc (1),
-      rng_nelem (nelem_internal ()) { }
+      rng_nelem (nelem_internal ()), cache () { }
 
   Range (double b, double l, double i)
     : rng_base (b), rng_limit (l), rng_inc (i),
-      rng_nelem (nelem_internal ()) { }
+      rng_nelem (nelem_internal ()), cache () { }
 
-  double base (void) const { return rng_base;  }
+  double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
-  double inc (void) const { return rng_inc;   }
+  double inc (void) const { return rng_inc; }
   int nelem (void) const { return rng_nelem; }
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
 
   void sort (void);
 
-  void set_base (double b) { rng_base = b; cache.resize (0,0); }
-  void set_limit (double l) { rng_limit = l; cache.resize (0,0); }
-  void set_inc (double i) { rng_inc = i; cache.resize (0,0); }
+  void set_base (double b)
+  {
+    if (rng_base != b)
+      {
+	rng_base = b;
+	clear_cache ();
+      }
+  }
+
+  void set_limit (double l)
+  {
+    if (rng_limit != l)
+      {
+	rng_limit = l;
+	clear_cache ();
+      }
+  }
+
+  void set_inc (double i)
+  {
+    if (rng_inc != i)
+      {
+	rng_inc = i;
+	clear_cache ();
+      }
+  }
 
   friend std::ostream& operator << (std::ostream& os, const Range& r);
   friend std::istream& operator >> (std::istream& is, Range& r);
 
   void print_range (void);
 
  private:
 
-  mutable Matrix cache;
   double rng_base;
   double rng_limit;
   double rng_inc;
 
   int rng_nelem;
 
+  mutable Matrix cache;
+
   int nelem_internal (void) const;
+
+  void clear_cache (void) const { cache.resize (0, 0); }
 };
 
 extern Range operator - (const Range& r);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/base-lu.cc b/liboctave/base-lu.cc
--- a/liboctave/base-lu.cc
+++ b/liboctave/base-lu.cc
@@ -37,17 +37,19 @@ base_lu <lu_type, lu_elt_type, p_type, p
   int a_nr = a_fact.rows ();
   int a_nc = a_fact.cols ();
   int mn = (a_nr < a_nc ? a_nr : a_nc);
 
   lu_type l (a_nr, mn, lu_elt_type (0.0));
 
   for (int i = 0; i < a_nr; i++)
     {
-      l.xelem (i, i) = 1.0;
+      if (i < a_nc)
+	l.xelem (i, i) = 1.0;
+
       for (int j = 0; j < (i < a_nc ? i : a_nc); j++)
 	l.xelem (i, j) = a_fact.xelem (i, j);
     }
 
   return l;
 }
 
 template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2004-03-03  Stefan van der Walt  <stefan@sun.ac.za>
+
+	* plot/hist.m: Compute histogram correctly for n>=30.
+
 2004-03-02  Paul Kienzle <pkienzle@users.sf.net>
 
 	* signal/sinc.m: Use i(:) instead of i when checking for any nonzeros.
 
 2004-03-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/horzcat.m: Delete.
 	* miscellaneous/vertcat.m: Delete.
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -90,17 +90,17 @@ function [nn, xx] = hist (y, x, norm)
     for i = 1:n-1
       chist(i+1) = sum (y < cutoff(i));
     endfor
   else
     ## The following algorithm works fastest for n greater than about 30.
     ## Put cutoff elements between boundaries, integrate over all
     ## elements, keep totals at boundaries.
     [s, idx] = sort ([cutoff(:); y(:)]);
-    chist = cumsum(idx>n);
+    chist = cumsum(idx>=n);
     chist = [0; chist(idx<n); chist(end)];
   endif
 
   freq= diff(chist)';
 
   if (nargin == 3)
     ## Normalise the histogram.
     freq = freq / length (y) * norm;
@@ -109,8 +109,13 @@ function [nn, xx] = hist (y, x, norm)
   if (nargout > 0)
     nn = freq;
     xx = x;
   else
     bar (x, freq);
   endif
 
 endfunction
+
+%!test
+%!  for n = [1, 10, 30, 100, 1000]
+%!    assert( sum(hist([1:n], [1:n])) == n );
+%!  endfor
