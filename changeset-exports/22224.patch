# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1456550196 -39600
#      Sat Feb 27 16:16:36 2016 +1100
# Node ID 20e0c0b8820c9c4094f018b54426e2b258c07654
# Parent  cf18d6e791a140b7df0dd32b32354d975c5554a1
Allow sequential quadratic programs with infeasible QPs (bug #36015).

* qp.m: Use conformant sizes of temporary C and lower bound in call to glpk.

* glpk.m: State size of A if its size doesn't match C and lb.

* sqp.m: If the QP was infeasible, restore lambda to the correct size.

diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -493,19 +493,23 @@ function [xopt, fmin, errnum, extra] = g
   ## Force column vector.
   c = c(:);
 
   ## 2) Matrix constraint
 
   if (isempty (A))
     error ("glpk: A cannot be an empty matrix");
   endif
+  if (! isreal (A))
+    error ("glpk: A must be real valued, not %s", typeinfo (A));
+  endif
   [nc, nxa] = size (A);
-  if (! isreal (A) || nxa != nx)
-    error ("glpk: A must be a real valued %d by %d matrix", nc, nx);
+  if (nxa != nx)
+    error ("glpk: A must be %d by %d, not %d by %d",
+           nc, nx, rows(A), columns(A));
   endif
 
   ## 3) RHS
 
   if (isempty (b))
     error ("glpk: B cannot be an empty vector");
   endif
   if (! isreal (b) || length (b) != nc)
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -368,18 +368,18 @@ function [x, obj, INFO, lambda] = qp (x0
           gamma = eye (n_in);
           if (n_eq > 0)
             Atmp = [Ain*Z, gamma];
             btmp = -res;
           else
             Atmp = [Ain, gamma];
             btmp = bin;
           endif
-          ctmp = [zeros(n-n_eq, 1); ones(n_in, 1)];
-          lb = [-Inf(n-n_eq,1); zeros(n_in,1)];
+          ctmp = [zeros(n, 1); ones(n_in, 1)];
+          lb = [-Inf(n,1); zeros(n_in,1)];
           ub = [];
           ctype = repmat ("L", n_in, 1);
           [P, dummy, status] = glpk (ctmp, Atmp, btmp, lb, ub, ctype);
           if ((status == 0)
               && all (abs (P(n-n_eq+1:end)) < rtol * (1 + norm (btmp))))
             ## We found a feasible starting point
             if (n_eq > 0)
               x0 = xbar + Z*P(1:n-n_eq);
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -403,16 +403,17 @@ function [x, obj, info, iter, nf, lambda
       info = 101;
       break;
     endif
 
     ## Compute search direction p by solving QP.
     g = -ce;
     d = -ci;
 
+    old_lambda = lambda;
     [p, obj_qp, INFO, lambda] = qp (x, B, c, F, g, [], [], d, C,
                                     Inf (size (d)));
 
     info = INFO.info;
 
     ## FIXME: check QP solution and attempt to recover if it has failed.
     ##        For now, just warn about possible problems.
 
@@ -420,16 +421,17 @@ function [x, obj, info, iter, nf, lambda
     switch (info)
       case 2
         warning (id, "sqp: QP subproblem is non-convex and unbounded");
       case 3
         warning (id, "sqp: QP subproblem failed to converge in %d iterations",
                  INFO.solveiter);
       case 6
         warning (id, "sqp: QP subproblem is infeasible");
+        lambda = old_lambda;  # The return value was size 0x0 in this case.
     endswitch
 
     ## Choose mu such that p is a descent direction for the chosen
     ## merit function phi.
     [x_new, alpha, obj_new, globals] = ...
         linesearch_L1 (x, p, obj_fun, obj_grd, ce_fun, ci_fun, lambda, ...
                        obj, globals);
 
