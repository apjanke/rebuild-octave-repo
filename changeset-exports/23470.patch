# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493925029 14400
#      Thu May 04 15:10:29 2017 -0400
# Node ID a41fdb801db67eb8e5cf4c11b484a28963aa579d
# Parent  2699c59748443830d982459050eb01235262f5b8
use mark_global and mark_persistent consistently

* ls-hdf5.cc, ls-hdf5.h, ls-mat5.cc, ls-mat5.h, ls-oct-binary.cc,
ls-oct-binary.h, ls-oct-text.cc, ls-oct-text.h, oct-parse.in.yy,
pt-decl.cc, pt-decl.h, pt-eval.cc, pt-id.h: Consistently use
mark_global and mark_persistent instead of mark_as_global,
mark_as_persistent, mark_static, or mark_as_static.

diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -1043,17 +1043,17 @@ save_type_to_hdf5 (save_type st)
 // Add the data from TC to the HDF5 location loc_id, which could
 // be either a file or a group within a file.  Return true if
 // successful.  This function calls itself recursively for lists
 // (stored as HDF5 groups).
 
 bool
 add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
-               bool mark_as_global, bool save_as_floats)
+               bool mark_global, bool save_as_floats)
 {
 #if defined (HAVE_HDF5)
 
   hsize_t dims[3];
   hid_t type_id, space_id, data_id, data_type_id;
   type_id = space_id = data_id = data_type_id = -1;
 
   bool retval = false;
@@ -1101,17 +1101,17 @@ add_hdf5_data (octave_hdf5_id loc_id, co
   retval = val.save_hdf5 (data_id, "value", save_as_floats);
 
   // attach doc string as comment:
   if (retval && doc.length () > 0
       && H5Gset_comment (loc_id, name.c_str (), doc.c_str ()) < 0)
     retval = false;
 
   // if it's global, add an attribute "OCTAVE_GLOBAL" with value 1
-  if (retval && mark_as_global)
+  if (retval && mark_global)
     retval = hdf5_add_attr (data_id, "OCTAVE_GLOBAL") >= 0;
 
   // We are saving in the new variable format, so mark it
   if (retval)
     retval = hdf5_add_attr (data_id, "OCTAVE_NEW_FORMAT") >= 0;
 
 error_cleanup:
 
@@ -1138,25 +1138,25 @@ error_cleanup:
 }
 
 // Write data from TC in HDF5 (binary) format to the stream OS,
 // which must be an hdf5_ofstream, returning true on success.
 
 bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
-                bool mark_as_global, bool save_as_floats)
+                bool mark_global, bool save_as_floats)
 {
 #if defined (HAVE_HDF5)
 
   check_hdf5_types ();
 
   hdf5_ofstream& hs = dynamic_cast<hdf5_ofstream&> (os);
 
   return add_hdf5_data (hs.file_id, tc, name, doc,
-                        mark_as_global, save_as_floats);
+                        mark_global, save_as_floats);
 
 #else
   err_disabled_feature ("save_hdf5_data", "HDF5");
 #endif
 }
 
 #endif
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -127,33 +127,33 @@ hdf5_read_next_data (octave_hdf5_id grou
 
 extern OCTINTERP_API octave_hdf5_err
 hdf5_h5g_iterate (octave_hdf5_id loc_id, const char *name, int *idx,
                   void *operator_data);
 
 extern OCTINTERP_API bool
 add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
-               bool mark_as_global, bool save_as_floats);
+               bool mark_global, bool save_as_floats);
 
 extern OCTINTERP_API int
 save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector& d);
 
 extern OCTINTERP_API int
 load_hdf5_empty (octave_hdf5_id loc_id, const char *name, dim_vector& d);
 
 extern OCTINTERP_API std::string
 read_hdf5_data (std::istream& is,  const std::string& filename, bool& global,
                 octave_value& tc, std::string& doc,
                 const string_vector& argv, int argv_idx, int argc);
 
 extern OCTINTERP_API bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
-                bool mark_as_global, bool save_as_floats);
+                bool mark_global, bool save_as_floats);
 
 extern OCTINTERP_API bool
 hdf5_check_attr (octave_hdf5_id loc_id, const char *attr_name);
 
 extern OCTINTERP_API bool
 hdf5_get_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf);
 
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -1857,25 +1857,25 @@ template void
 write_mat5_integer_data (std::ostream& os, const int *m,
                          int size, octave_idx_type nel);
 
 // Write out cell element values in the cell array to OS, preceded by
 // the appropriate tag.
 
 static bool
 write_mat5_cell_array (std::ostream& os, const Cell& cell,
-                       bool mark_as_global, bool save_as_floats)
+                       bool mark_global, bool save_as_floats)
 {
   octave_idx_type nel = cell.numel ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       octave_value ov = cell(i);
 
-      if (! save_mat5_binary_element (os, ov, "", mark_as_global,
+      if (! save_mat5_binary_element (os, ov, "", mark_global,
                                       false, save_as_floats))
         return false;
     }
 
   return true;
 }
 
 int
@@ -2226,17 +2226,17 @@ warn_dim_too_large (const std::string& n
 }
 
 // save the data from TC along with the corresponding NAME on stream
 // OS in the MatLab version 5 binary format.  Return true on success.
 
 bool
 save_mat5_binary_element (std::ostream& os,
                           const octave_value& tc, const std::string& name,
-                          bool mark_as_global, bool mat7_format,
+                          bool mark_global, bool mat7_format,
                           bool save_as_floats, bool compressing)
 {
   int32_t flags = 0;
   int32_t nnz_32 = 0;
   std::string cname = tc.class_name ();
   size_t max_namelen = 63;
 
   dim_vector dv = tc.dims ();
@@ -2291,17 +2291,17 @@ save_mat5_binary_element (std::ostream& 
   if (mat7_format && ! compressing)
     {
       bool ret = false;
 
       std::ostringstream buf;
 
       // The code seeks backwards in the stream to fix the header.
       // Can't do this with zlib, so use a stringstream.
-      ret = save_mat5_binary_element (buf, tc, name, mark_as_global, true,
+      ret = save_mat5_binary_element (buf, tc, name, mark_global, true,
                                       save_as_floats, true);
 
       if (ret)
         {
           // destLen must be at least 0.1% larger than source buffer
           // + 12 bytes.  Reality is it must be larger again than that.
           std::string buf_str = buf.str ();
           uLongf srcLen = buf_str.length ();
@@ -2333,17 +2333,17 @@ save_mat5_binary_element (std::ostream& 
                   (tc, name, save_as_floats, mat7_format));
 
   // array flags subelement
   write_mat5_tag (os, miUINT32, 8);
 
   if (tc.is_bool_type ())
     flags |= 0x0200;
 
-  if (mark_as_global)
+  if (mark_global)
     flags |= 0x0400;
 
   if (tc.is_complex_scalar () || tc.is_complex_matrix ())
     flags |= 0x0800;
 
   if (tc.is_string ())
     flags |= MAT_FILE_CHAR_CLASS;
   else if (cname == "int8")
@@ -2556,17 +2556,17 @@ save_mat5_binary_element (std::ostream& 
 
           write_mat5_array (os, m, save_as_floats);
         }
     }
   else if (tc.is_cell ())
     {
       Cell cell = tc.cell_value ();
 
-      if (! write_mat5_cell_array (os, cell, mark_as_global, save_as_floats))
+      if (! write_mat5_cell_array (os, cell, mark_global, save_as_floats))
         error ("save: error while writing '%s' to MAT file", name.c_str ());
     }
   else if (tc.is_complex_scalar () || tc.is_complex_matrix ())
     {
       if (tc.is_single_type ())
         {
           FloatComplexNDArray m_cmplx = tc.float_complex_array_value ();
 
@@ -2661,17 +2661,17 @@ save_mat5_binary_element (std::ostream& 
           {
             // write the data of each element
 
             // Iterating over the list of keys will preserve the order
             // of the fields.
             for (octave_idx_type i = 0; i < nf; i++)
               {
                 bool retval2 = save_mat5_binary_element (os, elts[i][j], "",
-                                                         mark_as_global,
+                                                         mark_global,
                                                          false,
                                                          save_as_floats);
                 if (! retval2)
                   error ("save: error while writing '%s' to MAT file",
                          name.c_str ());
               }
           }
       }
diff --git a/libinterp/corefcn/ls-mat5.h b/libinterp/corefcn/ls-mat5.h
--- a/libinterp/corefcn/ls-mat5.h
+++ b/libinterp/corefcn/ls-mat5.h
@@ -57,12 +57,12 @@ read_mat5_binary_file_header (std::istre
                               bool quiet = false,
                               const std::string& filename = "");
 extern std::string
 read_mat5_binary_element (std::istream& is, const std::string& filename,
                           bool swap, bool& global, octave_value& tc);
 extern bool
 save_mat5_binary_element (std::ostream& os,
                           const octave_value& tc, const std::string& name,
-                          bool mark_as_global, bool mat7_format,
+                          bool mark_global, bool mat7_format,
                           bool save_as_floats, bool compressing = false);
 
 #endif
diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -247,31 +247,31 @@ read_binary_data (std::istream& is, bool
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
 // binary format described above for read_binary_data.
 
 bool
 save_binary_data (std::ostream& os, const octave_value& tc,
                   const std::string& name, const std::string& doc,
-                  bool mark_as_global, bool save_as_floats)
+                  bool mark_global, bool save_as_floats)
 {
   int32_t name_len = name.length ();
 
   os.write (reinterpret_cast<char *> (&name_len), 4);
   os << name;
 
   int32_t doc_len = doc.length ();
 
   os.write (reinterpret_cast<char *> (&doc_len), 4);
   os << doc;
 
   unsigned char tmp;
 
-  tmp = mark_as_global;
+  tmp = mark_global;
   os.write (reinterpret_cast<char *> (&tmp), 1);
 
   // 255 flags the new binary format
   tmp = 255;
   os.write (reinterpret_cast<char *> (&tmp), 1);
 
   // Write the string corresponding to the octave_value type
   std::string typ = tc.type_name ();
diff --git a/libinterp/corefcn/ls-oct-binary.h b/libinterp/corefcn/ls-oct-binary.h
--- a/libinterp/corefcn/ls-oct-binary.h
+++ b/libinterp/corefcn/ls-oct-binary.h
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 
 #include "mach-info.h"
 
 class octave_value;
 
 extern OCTINTERP_API bool
 save_binary_data (std::ostream& os, const octave_value& tc,
                   const std::string& name, const std::string& doc,
-                  bool mark_as_global, bool save_as_floats);
+                  bool mark_global, bool save_as_floats);
 
 extern OCTINTERP_API std::string
 read_binary_data (std::istream& is, bool swap,
                   octave::mach_info::float_format fmt,
                   const std::string& filename, bool& global,
                   octave_value& tc, std::string& doc);
 
 #endif
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -293,27 +293,27 @@ read_text_data (std::istream& is, const 
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // FIXME: should probably write the help string here too.
 
 bool
 save_text_data (std::ostream& os, const octave_value& val_arg,
-                const std::string& name, bool mark_as_global,
+                const std::string& name, bool mark_global,
                 int precision)
 {
   bool success = true;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   octave_value val = val_arg;
 
-  if (mark_as_global)
+  if (mark_global)
     os << "# type: global " << val.type_name () << "\n";
   else
     os << "# type: " << val.type_name () << "\n";
 
   if (! precision)
     precision = Vsave_precision;
 
   long old_precision = os.precision ();
diff --git a/libinterp/corefcn/ls-oct-text.h b/libinterp/corefcn/ls-oct-text.h
--- a/libinterp/corefcn/ls-oct-text.h
+++ b/libinterp/corefcn/ls-oct-text.h
@@ -49,17 +49,17 @@ extract_keyword (std::istream& is, const
                  const bool next_only = false);
 
 extern OCTINTERP_API std::string
 read_text_data (std::istream& is, const std::string& filename, bool& global,
                 octave_value& tc, octave_idx_type count);
 
 extern OCTINTERP_API bool
 save_text_data (std::ostream& os, const octave_value& val_arg,
-                const std::string& name, bool mark_as_global, int precision);
+                const std::string& name, bool mark_global, int precision);
 
 extern OCTINTERP_API bool
 save_text_data_for_plotting (std::ostream& os, const octave_value& t,
                              const std::string& name);
 
 extern OCTINTERP_API bool
 save_three_d (std::ostream& os, const octave_value& t,
               bool parametric = false);
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3856,25 +3856,25 @@ namespace octave
     int l = tok_val->line ();
     int c = tok_val->column ();
 
     switch (tok)
       {
       case GLOBAL:
         {
           retval = new tree_decl_command ("global", lst, l, c);
-          retval->mark_as_global ();
+          retval->mark_global ();
         }
         break;
 
       case PERSISTENT:
         if (curr_fcn_depth > 0)
           {
             retval = new tree_decl_command ("persistent", lst, l, c);
-            retval->mark_as_persistent ();
+            retval->mark_persistent ();
           }
         else
           {
             if (lexer.reading_script_file)
               warning ("ignoring persistent declaration near line %d of file '%s'",
                        l, lexer.fcn_file_full_name.c_str ());
             else
               warning ("ignoring persistent declaration near line %d", l);
diff --git a/libinterp/parse-tree/pt-decl.cc b/libinterp/parse-tree/pt-decl.cc
--- a/libinterp/parse-tree/pt-decl.cc
+++ b/libinterp/parse-tree/pt-decl.cc
@@ -73,19 +73,19 @@ namespace octave
 
   tree_decl_command::tree_decl_command (const std::string& n,
                                         tree_decl_init_list *t, int l, int c)
     : tree_command (l, c), cmd_name (n), init_list (t)
   {
     if (t)
       {
         if (cmd_name == "global")
-          mark_as_global ();
+          mark_global ();
         else if (cmd_name == "persistent")
-          mark_as_persistent ();
+          mark_persistent ();
         else
           error ("tree_decl_command: unknown decl type: %s", cmd_name);
       }
   }
 
   tree_decl_command::~tree_decl_command (void)
   {
     delete init_list;
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -76,20 +76,20 @@ namespace octave
 
     bool lvalue_ok (void) { return id ? id->lvalue_ok () : false; }
 
     octave_lvalue lvalue (tree_evaluator *tw)
     {
       return id ? id->lvalue (tw) : octave_lvalue ();
     }
 
-    void mark_as_global (void) { type = global; }
+    void mark_global (void) { type = global; }
     bool is_global (void) const { return type == global; }
 
-    void mark_as_persistent (void) { type = persistent; }
+    void mark_persistent (void) { type = persistent; }
     bool is_persistent (void) const { return type == persistent; }
 
     tree_identifier * ident (void) { return id; }
 
     std::string name (void) { return id ? id->name () : ""; }
 
     tree_expression * expression (void) { return expr; }
 
@@ -131,26 +131,26 @@ namespace octave
       while (! empty ())
         {
           iterator p = begin ();
           delete *p;
           erase (p);
         }
     }
 
-    void mark_as_global (void)
+    void mark_global (void)
     {
       for (tree_decl_elt *elt : *this)
-        elt->mark_as_global ();
+        elt->mark_global ();
     }
 
-    void mark_as_persistent (void)
+    void mark_persistent (void)
     {
       for (tree_decl_elt *elt : *this)
-        elt->mark_as_persistent ();
+        elt->mark_persistent ();
     }
 
     tree_decl_init_list * dup (symbol_table::scope_id scope,
                                symbol_table::context_id context) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_decl_init_list (*this);
@@ -172,26 +172,26 @@ namespace octave
     // No copying!
 
     tree_decl_command (const tree_decl_command&) = delete;
 
     tree_decl_command& operator = (const tree_decl_command&) = delete;
 
     ~tree_decl_command (void);
 
-    void mark_as_global (void)
+    void mark_global (void)
     {
       if (init_list)
-        init_list->mark_as_global ();
+        init_list->mark_global ();
     }
 
-    void mark_as_persistent (void)
+    void mark_persistent (void)
     {
       if (init_list)
-        init_list->mark_as_persistent ();
+        init_list->mark_persistent ();
     }
 
     tree_decl_init_list * initializer_list (void) { return init_list; }
 
     std::string name (void) const { return cmd_name; }
 
     tree_command *dup (symbol_table::scope_id scope,
                        symbol_table::context_id context) const;
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -631,17 +631,17 @@ namespace octave
   {
     octave::tree_identifier *id = elt.ident ();
 
     if (id)
       {
         if (elt.is_global ())
           id->mark_global ();
         else if (elt.is_persistent ())
-          id->mark_as_static ();
+          id->mark_persistent ();
         else
           error ("declaration list element not global or persistent");
 
         octave_lvalue ult = id->lvalue (this);
 
         if (ult.is_undefined ())
           {
             octave::tree_expression *expr = elt.expression ();
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -98,17 +98,17 @@ namespace octave
     octave_value
     do_lookup (const octave_value_list& args = octave_value_list ())
     {
       return sym->find (args);
     }
 
     void mark_global (void) { sym->mark_global (); }
 
-    void mark_as_static (void) { sym->init_persistent (); }
+    void mark_persistent (void) { sym->init_persistent (); }
 
     void mark_as_formal_parameter (void) { sym->mark_formal (); }
 
     // We really need to know whether this symbol referst to a variable
     // or a function, but we may not know that yet.
 
     bool lvalue_ok (void) const { return true; }
 
