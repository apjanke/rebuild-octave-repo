# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1248866525 14400
#      Wed Jul 29 07:22:05 2009 -0400
# Node ID 5af462716bff3985df25e3ab11c43d03346800f5
# Parent  49f890499ebccc4ec29293890427e9bc4b17f6fa
Add support for gnuplot's Lua-TikZ terminal.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-07-29  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m: Ignore fontnames for the Lua-TikZ terminal.
+	* plot/gnuplot_drawnow.m: Support the gnuplot terminal Lua-TikZ.
+	* plot/print.m: Support the gnuplot terminal Lua-TikZ.
+
 2009-07-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* plot/gnuplot_binary.m: Fix typo.
 
 2009-07-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fzero.m: Use "global" parameter in str2func.
 	* optimization/fsolve.m: Ditto.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -1351,17 +1351,17 @@ function __go_draw_axes__ (h, plot_strea
 
   else
     print_usage ();
   endif
 
 endfunction
 
 function fontspec = create_fontspec (f, s, gp_term)
-  if (strcmp (f, "*"))
+  if (strcmp (f, "*") || strcmp (gp_term, "tikz"))
     fontspec = sprintf ("font \",%d\"", s);
   else
     fontspec = sprintf ("font \"%s,%d\"", f, s);
   endif
 endfunction
 
 function [style, typ, with] = do_linestyle_command (obj, idx, mono,
 						    plot_stream, errbars = "")
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -197,26 +197,28 @@ function [enhanced, implicit_margin] = g
 	if (! isempty (begin_match))
 	  error ("gnuplot_drawnow.m: specifying resultion, '%s', not supported for terminal '%s'",
 	         strtrim (match{1}), term)
 	endif
         if (all (gnuplot_size > 0))
           ## Set terminal size.
           terminals_with_size = {"emf", "gif", "jpeg", "latex", "pbm", ...
                                  "pdf", "png", "postscript", "svg", ...
-                                 "epslatex", "pstex", "pslatex"};
+                                 "epslatex", "pstex", "pslatex", "tikz"};
           if (__gnuplot_has_feature__ ("x11_figure_position"))
             terminals_with_size{end+1} = "x11";
           endif
           if (__gnuplot_has_feature__ ("wxt_figure_size"))
             terminals_with_size{end+1} = "wxt";
           endif
           if (any (strncmpi (term, terminals_with_size, 3)))
 	    if (term_units_are_pixels (term))
               size_str = sprintf ("size %d,%d", gnuplot_size);
+	    elseif (strcmp (term, "tikz"))
+              size_str = sprintf ("size %.15gin,%.15gin", gnuplot_size);
 	    else
               size_str = sprintf ("size %.15g,%.15g", gnuplot_size);
 	    endif
             if (strncmpi (term, "X11", 3) && __gnuplot_has_feature__ ("x11_figure_position"))
 	      ## X11 allows the window to be positioned as well.
 	      units = get (0, "units");
 	      unwind_protect
 	        set (0, "units", "pixels");
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -65,16 +65,18 @@
 ##   @itemx epslatexstandalone
 ##   @itemx pstex
 ##   @itemx pslatex
 ##     Generate a @LaTeX{} (or @TeX{}) file for labels, and eps/ps for
 ## graphics.  The file produced by @code{epslatexstandalone} can be
 ## processed directly by @LaTeX{}.  The other formats are intended to
 ## be included in a @LaTeX{} (or @TeX{}) document.  The @code{tex} device
 ## is the same as the @code{epslatex} device.
+##   @item tikz
+##     Generate a LaTeX file using gnuplot's Lua/TikZ terminal.
 ##   @item ill
 ##   @itemx aifm
 ##     Adobe Illustrator
 ##   @item cdr
 ##   @itemx corel
 ##     CorelDraw
 ##   @item dxf
 ##     AutoCAD
@@ -309,17 +311,17 @@ function print (varargin)
     endif
 
     ## Check if the specified device is one that is supported by gnuplot.
     ## If not, assume it is a device/format supported by Ghostscript.
     dev_list = {"aifm", "corel", "fig", "png", "jpeg", ...
 		"gif", "pbm", "dxf", "mf", "svg", "hpgl", ...
 		"ps", "ps2", "psc", "psc2", "eps", "eps2", ...
 		"epsc", "epsc2", "emf", "pdf", "pslatex", ...
-		"epslatex", "epslatexstandalone", "pstex"};
+		"epslatex", "epslatexstandalone", "pstex", "tikz"};
     if (! any (strcmp (dev, dev_list)) && have_ghostscript)
       ghostscript_output = name;
       ghostscript_device = dev;
       if (doprint)
 	## If printing, use color postscript.
         dev = "psc";
         name = cstrcat (tmpnam, ".ps");
       else
@@ -382,17 +384,26 @@ function print (varargin)
       endif
 
       if (! isempty (font))
         options = cstrcat (options, "\"", font, "\" ");
       endif
       if (! isempty (fontsize))
         options = cstrcat (options, " ", fontsize);
       endif
-      
+
+    elseif (strcmp (dev, "tikz"))
+      if (! isempty (font) && ! isempty (fontsize))
+        options = cstrcat (options, "\"", font, ",", fontsize, "\" ");
+      elseif (! isempty (font))
+        options = cstrcat (options, "\"", font, "\" ");
+      else
+        options = "";
+      endif
+
     elseif (strcmp (dev, "aifm") || strcmp (dev, "corel"))
       ## Adobe Illustrator, CorelDraw
       if (use_color >= 0)
         options = " color";
       else
         options = " mono";
       endif
       if (! isempty (font))
