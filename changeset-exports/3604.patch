# HG changeset patch
# User jwe
# Date 952401621 0
#      Tue Mar 07 04:00:21 2000 +0000
# Node ID 5446d3f11362ba88615c57fd1366e94f14647a0b
# Parent  de4471c26cd3259d4cfe3a1f8d5d05b1031d86b1
[project @ 2000-03-07 04:00:20 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2000-03-06  Stephen Eglen  <stephen@anc.ed.ac.uk>
+
+	* statistics/tests/kolmogorov_smirnov_test_2.m: Account for ties
+	between the two distributions (took same approach as ks.test() in R.)
+
 2000-02-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/base/bode.m: Temporarily disable automatic_replot.
 
 2000-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (clean): Also remove gethelp.
 
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
@@ -10,17 +10,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{pval}, @var{ks}] =} kolmogorov_smirnov_test_2 (@var{x}, @var{y}, @var{alt})
+## @deftypefn {Function File} {[@var{pval}, @var{ks}, @var{d}] =} kolmogorov_smirnov_test_2 (@var{x}, @var{y}, @var{alt})
 ## Perform a 2-sample Kolmogorov-Smirnov test of the null hypothesis
 ## that the samples @var{x} and @var{y} come from the same (continuous)
 ## distribution.  I.e., if F and G are the CDFs corresponding to the
 ## @var{x} and @var{y} samples, respectively, then the null is that F ==
 ## G.
 ##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
@@ -29,23 +29,26 @@
 ## Kolmogorov-Smirnov distribution.  If @var{alt} is @code{">"}, the
 ## one-sided alternative F > G is considered.  Similarly for @code{"<"},
 ## the one-sided alternative F < G is considered.  In this case, the
 ## test statistic @var{ks} has a one-sided Kolmogorov-Smirnov
 ## distribution.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
+## The third returned value, @var{d}, is the test statistic, the maximum
+## vertical distance between the two cumulative distribution functions.
+##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description: Two-sample Kolmogorov-Smirnov test
 
-function [pval, ks] = kolmogorov_smirnov_test_2 (x, y, alt)
+function [pval, ks, d] = kolmogorov_smirnov_test_2 (x, y, alt)
 
   if (nargin < 2 || nargin > 3)
     usage ("[pval, ks] = kolmogorov_smirnov_test_2 (x, y, tol)");
   endif
 
   if (! (is_vector (x) && is_vector (y)))
     error ("kolmogorov_smirnov_test_2: both x and y must be vectors");
   endif
@@ -61,25 +64,37 @@ function [pval, ks] = kolmogorov_smirnov
   n_x = length (x);
   n_y = length (y);
   n   = n_x * n_y / (n_x + n_y);
   x   = reshape (x, n_x, 1);
   y   = reshape (y, n_y, 1);
   [s, i] = sort ([x; y]);
   count (find (i <= n_x)) = 1 / n_x;
   count (find (i > n_x)) = - 1 / n_y;
+
+  z = cumsum(count);
+  if ( find(diff(s))) 
+    ## There are some ties, so keep only those changes.
+    warning ("cannot compute correct p-values with ties")
+    elems = [find(diff(s)); n_x + n_y];
+    z = z(elems);
+  endif
+  
   if (strcmp (alt, "!=") || strcmp (alt, "<>"))
-    ks   = sqrt (n) * max (abs (cumsum (count)));
+    d    = max (abs (z));
+    ks   = sqrt (n) * d;
     pval = 1 - kolmogorov_smirnov_cdf (ks);
   elseif (strcmp (alt, ">"))
-    ks   = sqrt (n) * max (cumsum (count));
-    pval = exp(- 2 * ks^2);
-  elseif (strcmp(alt, "<"))
-    ks   = - sqrt (n) * min (cumsum (count));
-    pval = exp(- 2 * ks^2);
+    d    = max (z);
+    ks   = sqrt (n) * d;
+    pval = exp (-2 * ks^2);
+  elseif (strcmp (alt, "<"))
+    d    = min (z);
+    ks   = -sqrt (n) * d;
+    pval = exp (-2 * ks^2);
   else
     error ("kolmogorov_smirnov_test_2: option %s not recognized", alt);
   endif
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
