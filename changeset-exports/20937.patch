# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450472136 18000
#      Fri Dec 18 15:55:36 2015 -0500
# Node ID 3b2cc6ef0624f65bd1855290e0f3ca77177a86e1
# Parent  80dd7b3529ee273b6f12d656dbf27d44549b680e
use numfields (x) instead of numel (fieldnames (x))

* inputParser.m, fileattrib.m, odeset.m:
Use numfields (x) instead of numel (fieldnames (x)).

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -280,30 +280,29 @@ classdef inputParser < handle
     ## Default validator, always returns scalar true.
     def_val = @() true;
   endproperties
 
   methods
     function addRequired (this, name, val = inputParser.def_val)
       if (nargin < 2 || nargin > 3)
         print_usage ();
-      elseif (numel (this.Optional) || numel (fieldnames (this.ParamValue))
-              || numel (fieldnames (this.Switch)))
+      elseif (numel (this.Optional) || numfields (this.ParamValue)
+              || numfields (this.Switch))
         error (["inputParser.addRequired: can't have a Required argument " ...
                 "after Optional, ParamValue, or Switch"]);
       endif
       this.validate_name ("Required", name);
       this.Required{end+1} = struct ("name", name, "val", val);
     endfunction
 
     function addOptional (this, name, def, val = inputParser.def_val)
       if (nargin < 3 || nargin > 4)
         print_usage ();
-      elseif (numel (fieldnames (this.ParamValue))
-              || numel (fieldnames (this.Switch)))
+      elseif (numfields (this.ParamValue) || numfields (this.Switch))
         error (["inputParser.Optional: can't have Optional arguments " ...
                 "after ParamValue or Switch"]);
       endif
       this.validate_name ("Optional", name);
       this.Optional{end+1} = struct ("name", name, "def", def, "val", val);
     endfunction
 
     function addParamValue (this, name, def, val = inputParser.def_val)
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -149,17 +149,17 @@ function [status, msg, msgid] = fileattr
 
 endfunction
 
 
 %!test
 %! [status, attr] = fileattrib (P_tmpdir ());
 %! assert (status);
 %! assert (isstruct (attr));
-%! assert (numel (fieldnames (attr)), 14);
+%! assert (numfields (attr), 14);
 %! assert (attr.Name, P_tmpdir ());
 %! assert (attr.directory);
 %! if (ispc ())
 %!   assert (! isnan (attr.archive));
 %! else
 %!   assert (isnan (attr.archive));
 %! endif
 %! assert (attr.UserRead);
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -264,17 +264,17 @@ endfunction
 
 ## All tests that are needed to check if a valid option has been set are
 ## implemented in ode_struct_value_check.m
 ## ## FIXME ## currently fails as there are two extra options to control
 ##             fixed step integratio options.
 %!xtest
 %! odeoptA = odeset ();
 %! assert (isstruct (odeoptA));
-%! assert (numel (fieldnames (odeoptA)), 23);
+%! assert (numfields (odeoptA), 23);
 %! assert (all (structfun ("isempty", odeoptA)));
 
 %!shared odeoptB, odeoptC
 %!test
 %! odeoptB = odeset ("ABSTOL", 1e-2, "reltol", 1e-1);
 %! assert (odeoptB.AbsTol, 1e-2);  # Check canonicalization of name
 %! assert (odeoptB.RelTol, 1e-1);
 
