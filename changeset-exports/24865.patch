# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1520714494 21600
#      Sat Mar 10 14:41:34 2018 -0600
# Node ID 5f7b9ee5b878e48a7a00220688cdd30209bfaefb
# Parent  26d8b90c0cb29dae438eae16a20314c2946fa5b4
Add a QFrame to the variable editor panels and adjust tooltips (bug #53275)

* octave-dock-widget.cc (octave_dock_widget::make_window): Remove obsolete
  FIXME comment.  Add maximize control to the window-manager title bar
  inherently enabling feature.

* variable-editor.cc (variable_dock_widget::variable_dock_widget): Define
  DOCKED_FULLSCREEN_BUTTON_TOOLTIP and UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP to
  take the place of multiply used strings and place in the proper locations.
  Also, undefine these after the last point used.
  Use the resource_manager::icon() method for installing all icons.  Create
  new QFrame assigned to m_frame with the variable editor as parent but
  otherwise not associated with a layout.  Give the frame sunken appearance
  and invisible to mouse cursor.
  (variable_dock_widget::change_fullscreen): Set the full-screen action tooltip
  to "Redock" when coming from undocked state.  When coming from full-screen
  state, either change tooltip to UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP or restore
  docked state and set tooltip to DOCKED_FULLSCREEN_BUTTON_TOOLTIP.
  (variable_dock_widget::resizeEvent): Added.  Re-implement virtual base
  function by setting the size of the m_frame QFrame to that of the
  variable_dock_widget.

* variable-editor.h (variable_dock_widget): Declare reimplemented virtual
  resizeEvent().  Add new pointer m_frame.

diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -149,29 +149,28 @@ namespace octave
   void
   octave_dock_widget::make_window (void)
   {
     // the widget has to be reparented (parent = 0)
 
     QSettings *settings = resource_manager::get_settings ();
 
     // save the docking area and geometry for later redocking
-    // FIXME: dockWidgetArea always returns 2
     settings->setValue ("DockWidgets/" + objectName () + "_dock_area",
                         m_parent->dockWidgetArea (this));
     settings->setValue ("DockWidgets/" + objectName (), saveGeometry ());
     settings->sync ();
 
     // remove parent and adjust the (un)dock icon
     setTitleBarWidget (0);
     setParent (0, Qt::Window | Qt::CustomizeWindowHint | Qt::WindowTitleHint |
-               Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint);
+               Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint);
     setTitleBarWidget (m_title_widget);
     setParent (0, Qt::Window | Qt::CustomizeWindowHint | Qt::WindowTitleHint |
-               Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint);
+               Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint);
 
 #if defined (Q_OS_UNIX)
     m_title_widget->setToolTip (
       tr ("Use <Alt> + <Left Mouse Button> for moving the window"));
 #endif
 
     m_dock_action->setIcon (QIcon (":/actions/icons/widget-dock"
                                    + m_icon_color + ".png"));
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -102,29 +102,31 @@ namespace octave
     connect (m_close_action, SIGNAL (triggered (bool)),
              this, SLOT (change_existence (bool)));
     connect (this, SIGNAL (topLevelChanged(bool)),
              this, SLOT (toplevel_change (bool)));
     connect (p, SIGNAL (visibilityChanged (bool)),
              this, SLOT (setVisible (bool)));
 
 #if defined (HAVE_QGUIAPPLICATION)
+#define DOCKED_FULLSCREEN_BUTTON_TOOLTIP "Fullscreen undock"
+#define UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP "Fullscreen"
     // Add a fullscreen button
 
     m_fullscreen_action = nullptr;
     m_full_screen = false;
     m_prev_floating = false;
     m_prev_geom = QRect (0, 0, 0, 0);
 
     QHBoxLayout *h_layout = findChild<QHBoxLayout *> ();
     if (h_layout != nullptr && titleBarWidget () != nullptr)
       {
         m_fullscreen_action = new QAction
-          (QIcon::fromTheme ("view-fullscreen"), "", this);
-        m_fullscreen_action->setToolTip (tr ("Fullscreen undock"));
+          (resource_manager::icon ("view-fullscreen", false), "", this);
+        m_fullscreen_action->setToolTip (tr (DOCKED_FULLSCREEN_BUTTON_TOOLTIP));
         QToolButton *fullscreen_button = new QToolButton (titleBarWidget ());
         fullscreen_button->setDefaultAction (m_fullscreen_action);
         fullscreen_button->setFocusPolicy (Qt::NoFocus);
         fullscreen_button->setIconSize (QSize (m_icon_size,m_icon_size));
         QString css_button = QString ("QToolButton {background: transparent; border: 0px;}");
         fullscreen_button->setStyleSheet (css_button);
 
         connect (m_fullscreen_action, SIGNAL (triggered ()),
@@ -132,35 +134,40 @@ namespace octave
 
         int index = -1;
         QToolButton *first = titleBarWidget ()->findChild<QToolButton *> ();
         if (first != nullptr)
           index = h_layout->indexOf (first);
         h_layout->insertWidget (index, fullscreen_button);
       }
 #endif
+
+    // Custom title bars cause loss of decorations, add a frame
+    m_frame = new QFrame (this);
+    m_frame->setFrameStyle (QFrame::Box | QFrame::Sunken);
+    m_frame->setAttribute (Qt::WA_TransparentForMouseEvents);
   }
 
   // slot for (un)dock action
   void
   variable_dock_widget::change_floating (bool)
   {
 #if defined (HAVE_QGUIAPPLICATION)
     if (isFloating ())
       {
         if (m_full_screen)
           {
             setGeometry (m_prev_geom);
-            m_fullscreen_action->setIcon (QIcon::fromTheme ("view-fullscreen"));
+            m_fullscreen_action->setIcon (resource_manager::icon ("view-fullscreen", false));
             m_full_screen = false;
           }
-        m_fullscreen_action->setToolTip (tr ("Fullscreen undock"));
+        m_fullscreen_action->setToolTip (tr (DOCKED_FULLSCREEN_BUTTON_TOOLTIP));
       }
     else
-      m_fullscreen_action->setToolTip (tr ("Fullscreen"));
+      m_fullscreen_action->setToolTip (tr (UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP));
 #endif
 
     setFloating (! isFloating ());
   }
 
   // slot for hiding the widget
   void
   variable_dock_widget::change_existence (bool)
@@ -192,41 +199,49 @@ namespace octave
   variable_dock_widget::change_fullscreen (void)
   {
 #if defined (HAVE_QGUIAPPLICATION)
     if (! m_full_screen)
       {
         m_prev_floating = isFloating ();
         m_prev_geom = geometry ();
 
-        m_fullscreen_action->setIcon (QIcon::fromTheme ("view-restore"));
+        m_fullscreen_action->setIcon (resource_manager::icon ("view-restore", false));
         if (m_prev_floating)
           m_fullscreen_action->setToolTip (tr ("Restore geometry"));
         else
-          setFloating (true);
+          {
+            m_fullscreen_action->setToolTip (tr ("Redock"));
+            setFloating (true);
+          }
 
         // showFullscreen() and setWindowState() only work for QWindow objects.
         QScreen *pscreen = QGuiApplication::primaryScreen ();
         QRect rect (0, 0, 0, 0);
         rect = pscreen->availableGeometry ();
         setGeometry (rect);
 
         m_full_screen = true;
       }
     else
       {
-        m_fullscreen_action->setIcon (QIcon::fromTheme ("view-fullscreen"));
+        m_fullscreen_action->setIcon (resource_manager::icon ("view-fullscreen", false));
         setGeometry (m_prev_geom);
         if (m_prev_floating)
-            m_fullscreen_action->setToolTip (tr ("Fullscreen"));
+          m_fullscreen_action->setToolTip (tr (UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP));
         else
-          setFloating (false);
+          {
+            setFloating (false);
+            m_fullscreen_action->setToolTip (tr (DOCKED_FULLSCREEN_BUTTON_TOOLTIP));
+          }
 
         m_full_screen = false;
       }
+#undef DOCKED_FULLSCREEN_BUTTON_TOOLTIP
+#undef UNDOCKED_FULLSCREEN_BUTTON_TOOLTIP
 #endif
   }
 
   void
   variable_dock_widget::closeEvent (QCloseEvent *e)
   {
     QDockWidget::closeEvent (e);
   }
@@ -251,16 +266,22 @@ namespace octave
     else if (old == focusWidget())
       {
         QLabel *label = titleBarWidget ()->findChild<QLabel *> ();
         if (label != NULL)
           label->setBackgroundRole (QPalette::NoRole);
       }
   }
 
+  void variable_dock_widget::resizeEvent (QResizeEvent *)
+  {
+    if (m_frame)
+      m_frame->resize (size ());
+  }
+
 
   // Variable editor stack
 
   variable_editor_stack::variable_editor_stack (QWidget *p)
     : QStackedWidget (p), m_edit_view (new variable_editor_view (this))
   {
     setFocusPolicy (Qt::StrongFocus);
 
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -57,37 +57,46 @@ namespace octave
   signals:
 
     void variable_focused_signal (const QString& name);
 
   protected:
 
     virtual void closeEvent (QCloseEvent *e);
 
+    void resizeEvent (QResizeEvent *event);
+
   public slots:
 
     void handle_focus_change (QWidget *old, QWidget *now);
 
   private slots:
 
     void change_floating (bool);
 
     void change_existence (bool);
 
     void toplevel_change (bool);
 
     void change_fullscreen (void);
 
+  protected:
+
+    QFrame *m_frame;
+
 #if defined (HAVE_QGUIAPPLICATION)
-  protected:
 
     QAction *m_fullscreen_action;
+
     bool m_full_screen;
+
     bool m_prev_floating;
+
     QRect m_prev_geom;
+
 #endif
   };
 
   class variable_editor_stack : public QStackedWidget
   {
     Q_OBJECT
 
   public:
