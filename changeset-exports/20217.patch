# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1432390790 14400
#      Sat May 23 10:19:50 2015 -0400
# Node ID b5d2f6954c48dc157761da9041e27dd38cfbbf34
# Parent  4e15a4c331e73ccf9899875dd851db33d52003b3
# Parent  9866b3202c522da073e19cb58c89a423a0850fb5
maint: Periodic merge of stable to default.

diff --git a/CITATION b/CITATION
--- a/CITATION
+++ b/CITATION
@@ -1,21 +1,18 @@
 To cite GNU Octave in publications use:
 
-  John W. Eaton, David Bateman, Søren Hauberg, Rik Wehbring (2014).
-  GNU Octave version 3.8.1 manual: a high-level interactive language for
+  John W. Eaton, David Bateman, Søren Hauberg, Rik Wehbring (2015).
+  GNU Octave version 4.0.0 manual: a high-level interactive language for
   numerical computations.
-  CreateSpace Independent Publishing Platform.  ISBN 1441413006,
   URL http://www.gnu.org/software/octave/doc/interpreter/
 
 A BibTeX entry for LaTeX users is:
 
   @book{,
     author    = {John W. Eaton, David Bateman, S\oren Hauberg, and Rik Wehbring},
-    title     = {{GNU Octave} version 3.8.1 manual: a high-level interactive language for numerical computations},
-    publisher = {CreateSpace Independent Publishing Platform},
-    year      = {2014},
-    note      = {{ISBN} 1441413006},
+    title     = {{GNU Octave} version 4.0.0 manual: a high-level interactive language for numerical computations},
+    year      = {2015},
     url       = {http://www.gnu.org/software/octave/doc/interpreter},
   }
 
 We have invested a lot of time and effort in creating GNU Octave, please cite it
 when using it.  See also `citation pkgname' for citing Octave packages.
diff --git a/examples/code/make_int.cc b/examples/code/make_int.cc
--- a/examples/code/make_int.cc
+++ b/examples/code/make_int.cc
@@ -97,31 +97,31 @@ public:
   octave_value transpose (void) const { return new octave_integer (scalar); }
 
   octave_value hermitian (void) const { return new octave_integer (scalar); }
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
+  void print (std::ostream& os, bool pr_as_read_syntax = false);
 
 private:
 
   int scalar;
 
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 void
-octave_integer::print (std::ostream& os, bool pr_as_read_syntax) const
+octave_integer::print (std::ostream& os, bool pr_as_read_syntax)
 {
   os << scalar;
-  // octave_print_internal (os, scalar, pr_as_read_syntax);
+  newline (os);
 }
 
 #ifdef DEFUNOP_OP
 #undef DEFUNOP_OP
 #endif
 
 #define DEFUNOP_OP(name, t, op) \
   UNOPDECL (name, a) \
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -248,34 +248,32 @@ Canvas::canvasToggleGrid (const graphics
       graphics_handle ah = fp.get_currentaxes ();
 
       graphics_object ax = gh_manager::get_object (ah);
 
       if (ax.valid_object ())
         {
           axes::properties& ap = Utils::properties<axes> (ax);
 
-          if (ap.handlevisibility_is ("on") && ap.is_visible ())
-            {
-              std::string tmp;
+          std::string tmp;
 
-              // If any grid is off, then turn them all on.  If they are all
-              // on, then turn them off.
+          // If any grid is off, then turn them all on.  If they are all
+          // on, then turn them off.
 
-              std::string state = ((ap.get_xgrid () == "off"
-                                    || ap.get_ygrid () == "off"
-                                    || ap.get_zgrid () == "off")
-                                   ? "on" : "off");
+          std::string state = ((ap.get_xgrid () == "off"
+                                || ap.get_ygrid () == "off"
+                                || ap.get_zgrid () == "off")
+                               ? "on" : "off");
 
-              ap.set_xgrid (state);
-              ap.set_ygrid (state);
-              ap.set_zgrid (state);
+          ap.set_xgrid (state);
+          ap.set_ygrid (state);
+          ap.set_zgrid (state);
 
-              redraw (true);
-            }
+          redraw (true);
+            
         }
     }
 }
 
 static void
 autoscale_axes (axes::properties& ap)
 {
   ap.clear_zoom_stack ();
@@ -299,22 +297,19 @@ Canvas::canvasAutoAxes (const graphics_h
       graphics_handle ah = fp.get_currentaxes ();
 
       graphics_object ax = gh_manager::get_object (ah);
 
       if (ax.valid_object ())
         {
           axes::properties& ap = Utils::properties<axes> (ax);
 
-          if (ap.handlevisibility_is ("on") && ap.is_visible ())
-            {
-              autoscale_axes (ap);
+          autoscale_axes (ap);
 
-              redraw (true);
-            }
+          redraw (true);
         }
     }
 }
 
 void
 Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -469,21 +469,24 @@ fill empty fields.  The default is zero.
           i++;
         }
 
       if (r1 >= r)
         r1 = r - 1;
       if (c1 >= c)
         c1 = c - 1;
 
-      // Now take the subset of the matrix.
-      if (iscmplx)
-        cdata = cdata.extract (0, c0, r1, c1);
-      else
-        rdata = rdata.extract (0, c0, r1, c1);
+      // Now take the subset of the matrix if there are any values.
+      if (i > 0 || j > 0)
+        {
+          if (iscmplx)
+            cdata = cdata.extract (0, c0, r1, c1);
+          else
+            rdata = rdata.extract (0, c0, r1, c1);
+        }
 
       if (iscmplx)
         retval(0) = cdata;
       else
         retval(0) = rdata;
     }
 
   return retval;
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -244,21 +244,39 @@ public:
   void fill (const T& val);
 
   void clear (void);
   void clear (const dim_vector& dv);
 
   void clear (octave_idx_type r, octave_idx_type c)
   { clear (dim_vector (r, c)); }
 
+  // Number of elements in the array. These are all synonyms.
   //@{
-  //! Number of elements in the array. These are all synonyms.
+  //! Number of elements in the array.
+  //! Synonymous with length(), nelem(), and numel().
   octave_idx_type capacity (void) const { return slice_len; }
+
+  //! Number of elements in the array.
+  /*! Synonymous with capacity(), nelem(), and numel().
+
+      @note
+      This is @em not the same as @c %length() at the Octave interpreter.
+      At the Octave interpreter, the function @c %length() returns the
+      length of the greatest dimension.  This method returns the total
+      number of elements.
+   */
   octave_idx_type length (void) const { return capacity (); }
+
+  //! Number of elements in the array.
+  //! Synonymous with capacity(), length(), and numel().
   octave_idx_type nelem (void) const { return capacity (); }
+
+  //! Number of elements in the array.
+  //! Synonymous with capacity(), length(), and nelem().
   octave_idx_type numel (void) const { return nelem (); }
   //@}
 
   //! Return the array as a column vector.
   Array<T> as_column (void) const
   {
     Array<T> retval (*this);
     if (dimensions.length () != 2 || dimensions(1) != 1)
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -135,30 +135,74 @@ private:
           freerep ();
 
         rep = new_rep;
       }
   }
 
 public:
 
+// There are constructors for up to 7 dimensions initialized this way.
+// More can be added if necessary.
 #define ASSIGN_REP(i) rep[i] = d ## i;
 #define DIM_VECTOR_CTOR(N) \
   dim_vector (OCT_MAKE_DECL_LIST (octave_idx_type, d, N)) \
     : rep (newrep (N)) \
   { \
     OCT_ITERATE_MACRO (ASSIGN_REP, N) \
   }
 
-  // Add more if needed.
+  //! Construct dim_vector for 2 dimensional array.
+  /*!
+    It can be used to construct a 2D array.  Example:
+
+    @code{.cc}
+    dim_vector dv (7, 5);
+    Matrix mat (dv);
+    @endcode
+
+    The constructed dim_vector @c dv will have two elements, @f$[7, 5]@f$,
+    one for each dimension.  It can then be used to construct a Matrix
+    with such dimensions, i.e., 7 rows and 5 columns.
+
+    There are constructors available for up to 7 dimensions.  For a higher
+    number of dimensions, use redim() or resize().
+
+    Note that that there is no constructor for a 1 element dim_vector.
+    This is because there are no 1 dimensional Array in liboctave.  Such
+    constructor did exist in liboctave but was removed in version 4.0.0
+    due to its potential for confusion.
+  */
   DIM_VECTOR_CTOR (2)
+
+  //! Construct dim_vector for 3 dimensional array.
+  /*!
+    It can be used to construct a 3D array.  Example:
+
+    @code{.cc}
+    NDArray A (dim_vector (7, 5, 4));
+    @endcode
+
+    This will construct a 3 dimensional NDArray of lengths 7, 5, and 4,
+    on the first, second, and third dimension (rows, columns, and pages)
+    respectively.
+  */
   DIM_VECTOR_CTOR (3)
+
+  //! Construct dim_vector for 4 dimensional array.
+  //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (4)
+  //! Construct dim_vector for 5 dimensional array.
+  //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (5)
+  //! Construct dim_vector for 6 dimensional array.
+  //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (6)
+  //! Construct dim_vector for 7 dimensional array.
+  //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (7)
 
 #undef ASSIGN_REP
 #undef DIM_VECTOR_CTOR
 
   octave_idx_type& elem (int i)
   {
 #ifdef BOUNDS_CHECKING
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -698,16 +698,19 @@ function varargout = strread (str, forma
       if (format_repeat_count < 0)
         data = words(m:num_words_per_line:end);
       elseif (format_repeat_count == 0)
         data = {};
       else
         lastline = ...
           min (num_words_per_line * format_repeat_count + m - 1, numel (words));
         data = words(m:num_words_per_line:lastline);
+        if (num_lines > format_repeat_count)
+          num_lines = format_repeat_count;
+        endif
       endif
 
       ## Map to format
       ## FIXME: Add support for formats like "<%s>", "%[a-zA-Z]"
       ##        Someone with regexp experience is needed.
       switch (fmt_words{m}(1:min (2, length (fmt_words{m}))))
         case "%s"
           if (pad_out)
@@ -874,16 +877,28 @@ endfunction
 %! [c{:}] = strread (str, fmt);
 %! assert (c{1}, {"Tom"; "Dick"; "Harry"})
 %! assert (c{2}, [100; 90; 80])
 
 %!test
 %! a = strread ("a b c, d e, , f", "%s", "delimiter", ",");
 %! assert (a, {"a b c"; "d e"; ""; "f"});
 
+%! ## Format repeat counters w & w/o trailing EOL even within partly read files
+%!test
+%! [a, b] = strread ("10 a 20 b\n 30 c 40", "%d %s", 4);
+%! assert (a, int32 ([10; 20; 30; 40]));
+%! assert (b, {"a"; "b"; "c"});
+%! [a, b] = strread ("10 a 20 b\n 30 c 40\n", "%d %s", 4);
+%! assert (a, int32 ([10; 20; 30; 40]));
+%! assert (b, {"a"; "b"; "c"; ""});
+%! [a, b] = strread ("10 a 20 b\n 30 c 40", "%d %s", 1);
+%! assert (a, int32 (10));
+%! assert (b, {"a"});
+
 %!test
 %! ## Bug #33536
 %! [a, b, c] = strread ("1,,2", "%s%s%s", "delimiter", ",");
 %! assert (a{1}, "1");
 %! assert (b{1}, "");
 %! assert (c{1}, "2");
 
 %!test
@@ -1035,17 +1050,17 @@ endfunction
 
 ## Test #3 bug #42609
 %!test
 %! [a, b, c] = strread ("1 2 3\n4 5 6\n7 8 9\n", '%f %f %f\n');
 %! assert (a, [1; 4; 7]);
 %! assert (b, [2; 5; 8]);
 %! assert (c, [3; 6; 9]);
 
-## Test #3 bug #42609
+## Test #4 bug #42609
 %!test
 %! [a, b, c] = strread ("1 2\n3\n4 5\n6\n7 8\n9\n", '%f %f\n%f');
 %! assert (a, [1;4;7]);
 %! assert (b, [2; 5; 8]);
 %! assert (c, [3; 6; 9]);
 
 ## Unsupported format specifiers
 %!test
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -110,17 +110,22 @@ function varargout = textread (filename,
     warning ("textread: empty file");
     varargout = cell (1, nargout);
     return;
   endif
 
   endofline = find (strcmpi (varargin, "endofline"), 1);
   if (! isempty (endofline))
     ## 'endofline' option set by user.
-    if (! ischar (varargin{endofline + 1}));
+    if (ischar (varargin{endofline + 1}))
+      eol_char = varargin{endofline + 1};
+      if (! any (strcmp (eol_char, {"", "\n", "\r", "\r\n"})))
+        error ("textscan: illegal EndOfLine character value specified");
+      endif
+    else
       error ("character value required for EndOfLine");
     endif
   else
     ## Determine EOL from file.
     ## Search for EOL candidates in the first BUFLENGTH chars
     eol_srch_len = min (length (str), BUFLENGTH);
     ## First try DOS (CRLF)
     if (! isempty (strfind (str(1 : eol_srch_len), "\r\n")))
@@ -305,16 +310,30 @@ endfunction
 %! fid = fopen (f, "w");
 %! d = rand (1, 4);
 %! fprintf (fid, ",2,,4\n5,\n");
 %! fclose (fid);
 %! A = textread (f, "", "delimiter", ",");
 %! unlink (f);
 %! assert (A, [0 2 0 4; 5 0 0 0], 1e-6);
 
+## Test endofline
+%!test
+%! f = tempname ();
+%! fid = fopen (f, "w");
+%! fprintf (fid, "a\rb\rc");
+%! fclose (fid);
+%! ## Test EOL detection
+%! d = textread (f, "%s");
+%! assert (d, {"a";"b";"c"});
+%! ## Test explicit EOL specification (bug #45046)
+%! d = textread (f, "%s", "endofline", "\r");
+%! assert (d, {"a"; "b"; "c"});
+%! unlink (f);
+
 ## Test input validation
 %!error textread ()
 %!error textread (1)
 %!error <arguments must be strings> textread (1, "%f")
 %!error <arguments must be strings> textread ("fname", 1)
 %!error <missing or illegal value for> textread (file_in_loadpath ("textread.m"), "", "headerlines")
 %!error <missing or illegal value for> textread (file_in_loadpath ("textread.m"), "", "headerlines", 'hh')
 %!error <character value required for> textread (file_in_loadpath ("textread.m"), "%s", "endofline", true)
diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -55,20 +55,28 @@
 ##
 ## @example
 ## @group
 ## fplot (@@cos, [0, 2*pi])
 ## fplot ("[cos(x), sin(x)]", [0, 2*pi])
 ## @end group
 ## @end example
 ##
-## Note: @code{fplot} works best with continuous functions.  Functions with
+## Programming Notes:
+##
+## @code{fplot} works best with continuous functions.  Functions with
 ## discontinuities are unlikely to plot well.  This restriction may be removed
 ## in the future.
-## @seealso{ezplot, plot}
+##
+## @code{fplot} requires that the function accept and return a vector argument.
+## Consider this when writing user-defined functions and use @code{.*},
+## @code{./}, etc.  See the function @code{vectorize} for potentially
+## converting inline or anonymous functions to vectorized versions.
+##  
+## @seealso{ezplot, plot, vectorize}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
 function [X, Y] = fplot (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("fplot", varargin{:});
 
