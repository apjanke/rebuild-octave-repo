# HG changeset patch
# User Rik <rik@octave.org>
# Date 1373563892 25200
#      Thu Jul 11 10:31:32 2013 -0700
# Node ID 3c20fb2aa4192bade4f346c2c39f183c252ba4e3
# Parent  a7c9be4a2c0f23706a7f52ca810de67d2ec4827e
doc: Add example to rank docstring.

* scripts/linear-algebra/rank.m: Add example to docstring.  Add %!test
for empty matrix and for row and column vectors.

diff --git a/scripts/linear-algebra/rank.m b/scripts/linear-algebra/rank.m
--- a/scripts/linear-algebra/rank.m
+++ b/scripts/linear-algebra/rank.m
@@ -14,28 +14,52 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rank (@var{A})
 ## @deftypefnx {Function File} {} rank (@var{A}, @var{tol})
-## Compute the rank of @var{A}, using the singular value decomposition.
+## Compute the rank of matrix @var{A}, using the singular value decomposition.
+##
 ## The rank is taken to be the number of singular values of @var{A} that
 ## are greater than the specified tolerance @var{tol}.  If the second
 ## argument is omitted, it is taken to be
 ##
 ## @example
 ## tol = max (size (@var{A})) * sigma(1) * eps;
 ## @end example
 ##
 ## @noindent
 ## where @code{eps} is machine precision and @code{sigma(1)} is the largest
 ## singular value of @var{A}.
+##
+## The rank of a matrix is the number of linearly independent rows or
+## columns and determines how many particular solutions exist to a system
+## of equations.  Use @code{null} for finding the remaining homogenous
+## solutions.
+##
+## Example:
+##
+## @example
+## @group
+## x = [1 2 3
+##      4 5 6
+##      7 8 9];
+## rank (x)
+##   @result{} 2
+## @end group
+## @end example
+##
+## @noindent
+## The number of linearly independent rows is only 2 because the final row
+## is a linear combination of -1*row1 + 2*row2.
+##
+## @seealso{null, sprank, svd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = rank (A, tol)
 
   if (nargin == 1)
     sigma = svd (A);
@@ -99,15 +123,19 @@ endfunction
 %!      4 5 6 7 8 9 10;
 %!      5 6 7 8 9 10 11];
 %! assert (rank (A), 3);
 
 %!test
 %! A = eye (100);
 %! assert (rank (A), 100);
 
+%!assert (rank ([]), 0)
+%!assert (rank ([1:9]), 1)
+%!assert (rank ([1:9]'), 1)
+
 %!test
 %! A = [1, 2, 3; 1, 2.001, 3; 1, 2, 3.0000001];
 %! assert (rank (A), 3);
 %! assert (rank (A,0.0009), 1);
 %! assert (rank (A,0.0006), 2);
 %! assert (rank (A,0.00000002), 3);
 
