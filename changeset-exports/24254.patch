# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510775527 18000
#      Wed Nov 15 14:52:07 2017 -0500
# Node ID 4bca68f0d8d5469996f21444f0952da15cfdac14
# Parent  cf15cb87bad99d7a596c3b8dacbcf1e42ab75417
use shared_ptr to manage url_transfer object

* url-transfer.h (base_url_transfer::count): Delete data member and
all uses.
(class usrl_transfer): Use default constructor and destrucor methods
where possible.
(url_transfer::rep): Manage with shared_ptr.

diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 // Author: jwe
 
 #if ! defined (octave_url_transfer_h)
 #define octave_url_transfer_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
+#include <memory>
 #include <string>
 
 #include "str-vec.h"
 
 template <typename T> class Array;
 
 namespace octave
 {
@@ -52,30 +53,30 @@ namespace octave
       curl_xfer->cwd ("..");
     }
 
   public:
 
     friend class url_transfer;
 
     base_url_transfer (void)
-      : count (1), host_or_url (), valid (false), ftp (false),
+      : host_or_url (), valid (false), ftp (false),
         ascii_mode (false), ok (true), errmsg (),
         curr_istream (&std::cin), curr_ostream (&std::cout) { }
 
     base_url_transfer (const std::string& host,
                        const std::string& /* user_arg */,
                        const std::string& /* passwd */,
                        std::ostream& os)
-      : count (1), host_or_url (host), valid (false), ftp (true),
+      : host_or_url (host), valid (false), ftp (true),
         ascii_mode (false), ok (true), errmsg (), curr_istream (&std::cin),
         curr_ostream (&os) { }
 
     base_url_transfer (const std::string& url, std::ostream& os)
-      : count (1), host_or_url (url), valid (false), ftp (false),
+      : host_or_url (url), valid (false), ftp (false),
         ascii_mode (false), ok (true), errmsg (),
         curr_istream (&std::cin), curr_ostream (&os) { }
 
     // No copying!
 
     base_url_transfer (const base_url_transfer&) = delete;
 
     base_url_transfer& operator = (const base_url_transfer&) = delete;
@@ -146,19 +147,16 @@ namespace octave
 
     virtual void http_post (const Array<std::string>& /* param */) { }
 
     virtual void http_action (const Array<std::string>& /* param */,
                               const std::string& /* action */) { }
 
   protected:
 
-    // Reference count.
-    refcount<size_t> count;
-
     // Host for ftp transfers or full URL for http requests.
     std::string host_or_url;
     bool valid;
     bool ftp;
     bool ascii_mode;
     bool ok;
     std::string errmsg;
     std::istream *curr_istream;
@@ -173,40 +171,21 @@ namespace octave
 
     url_transfer (void);
 
     url_transfer (const std::string& host, const std::string& user,
                   const std::string& passwd, std::ostream& os);
 
     url_transfer (const std::string& url, std::ostream& os);
 
-    url_transfer (const url_transfer& h) : rep (h.rep)
-    {
-      rep->count++;
-    }
-
-    url_transfer& operator = (const url_transfer& h)
-    {
-      if (this != &h)
-        {
-          if (--rep->count == 0)
-            delete rep;
+    url_transfer (const url_transfer& h) = default;
 
-          rep = h.rep;
-          rep->count++;
-        }
+    url_transfer& operator = (const url_transfer& h) = default;
 
-      return *this;
-    }
-
-    ~url_transfer (void)
-    {
-      if (--rep->count == 0)
-        delete rep;
-    }
+    ~url_transfer (void) = default;
 
     bool is_valid (void) const { return rep->is_valid (); }
 
     bool good (void) const { return rep->good (); }
 
     std::string lasterror (void) const { return rep->lasterror (); }
 
     std::ostream& set_ostream (std::ostream& os)
@@ -281,17 +260,17 @@ namespace octave
     void http_action (const Array<std::string>& param,
                       const std::string& action)
     {
       rep->http_action (param, action);
     }
 
   private:
 
-    base_url_transfer *rep;
+    std::shared_ptr<base_url_transfer> rep;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.2, "use 'octave::base_url_transfer' instead")
 typedef octave::base_url_transfer base_url_transfer;
 
