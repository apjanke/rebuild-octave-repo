# HG changeset patch
# User jwe
# Date 1172005511 0
#      Tue Feb 20 21:05:11 2007 +0000
# Node ID 4e81fe3bceff887fa4d07477a54058de14c60aa3
# Parent  debb662eab079788d8eebcc750006d4db1ec7861
[project @ 2007-02-20 21:05:10 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-20  Rafael Laboissiere  <rafael@debian.org>
+
+	* configure.in: Check for versions of GLPK prior to 4.15 and set
+	the GLPK_PRE_4_15 macro accordingly.
+
 2007-02-16  John W. Eaton  <jwe@octave.org>
 
 	* mkoctfile.in: Use OCTAVE_PREFIX, not OCTAVE_CONF_PREFIX, in sed
 	substitutions.
 	* octave-conf.in: Define DATAROOTDIR, not DATADIR, from
 	OCTAVE_DATAROOTDIR.
 	From Michael Goffioul <michael.goffioul@swing.be>.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.555 $)
+AC_REVISION($Revision: 1.556 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -585,17 +585,19 @@ glpk_lib=
 if test "$with_glpk" = yes; then
   glpk_lib="glpk"
 elif test "$with_glpk" != no; then
   glpk_lib="$with_glpk"
 fi
 
 GLPK_LIBS=
 if test -n "$glpk_lib"; then
-  AC_CHECK_LIB($glpk_lib, glp_lpx_simplex, [GLPK_LIBS="-l$glpk_lib"], [
+  AC_CHECK_LIB($glpk_lib, glp_lpx_simplex, [
+    GLPK_LIBS="-l$glpk_lib"
+    AC_DEFINE(GLPK_PRE_4_15, 1, [Define if GLPK version is less than 4.15.])], [
     AC_CHECK_LIB($glpk_lib, _glp_lpx_simplex, [GLPK_LIBS="-l$glpk_lib"], [])])
   if test -n "$GLPK_LIBS"; then
     AC_CHECK_HEADERS(glpk.h, [
       GLPK_LIBS="-l$glpk_lib"
       AC_DEFINE(HAVE_GLPK, 1, [Define if GLPK is available.])], [
         GLPK_LIBS=
         glpk_missing=yes])
   fi
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-20  Rafael Laboissiere  <rafael@debian.org>
+
+	* optimization/glpk.m: Document the fact that extra.mem does not work
+	for versions of GLPK 4.15 and later.
+
 2007-02-19  John W. Eaton  <jwe@octave.org>
 
 	* plot/__uiobject_alloc__.in: If next available element in
 	__uiobject_list__ is 0, grow list before doing anything else.
 	* plot/__uiobject_grow_list__.in: Only set __uiobject_head__ on
 	first call when size of __uiobject_list__ is 0.
 
 2007-02-16  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -356,17 +356,18 @@
 ## @table @code
 ## @item lambda
 ## Dual variables.
 ## @item redcosts
 ## Reduced Costs.
 ## @item time
 ## Time (in seconds) used for solving LP/MIP problem.
 ## @item mem
-## Memory (in bytes) used for solving LP/MIP problem.
+## Memory (in bytes) used for solving LP/MIP problem (this is not 
+## available if the version of GLPK is 4.15 or later).
 ## @end table
 ## @end table
 ## 
 ## Example:
 ## 
 ## @example
 ## @group
 ## c = [10, 6, 4]';
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-20  Rafael Laboissiere  <rafael@laboissiere.net>
+
+	* DLD-FUNCTIONS/__glpk__.cc: Adapt code for changes in the GLPK
+	API for version 4.15 or later.
+
 2007-02-20  John W. Eaton  <jwe@octave.org>
 
 	* mxarray.h (mxArray::get_scalar): New function.
 	* mex.cc (mxArray_base::get_scalar): New pure virtual function.
 	(mxArray_octave_value::get_scalar, mxArray_matlab::get_scalar,
 	mxArray_number::get_scalar): New functions.
 	(mxGetScalar): Call get_scalar here.
 
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -33,29 +33,43 @@ 02110-1301, USA.
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "pager.h"
 
 #if defined (HAVE_GLPK)
 
-extern "C" {
+extern "C"
+{
 #include <glpk.h>
+
+#ifdef GLPK_PRE_4_15
+
 #ifndef _GLPLIB_H
 #include <glplib.h>
 #endif
 #ifndef lib_set_fault_hook
 #define lib_set_fault_hook lib_fault_hook
 #endif
 #ifndef lib_set_print_hook
 #define lib_set_print_hook lib_print_hook
 #endif
 }
 
+#else
+
+extern "C"
+{
+void _glp_lib_print_hook (int (*func)(void *info, char *buf), void *info);
+void _glp_lib_fault_hook (int (*func)(void *info, char *buf), void *info);
+}
+
+#endif
+
 #define NIntP 17
 #define NRealP 10
 
 int lpxIntParam[NIntP] = {
   0,
   1,
   0,
   1,
@@ -145,20 +159,28 @@ glpk (int sense, int n, int m, double *c
       double *lambda, double *redcosts, double *time, double *mem)
 {
   int errnum;
   int typx = 0;
   int method;
 
   clock_t t_start = clock();
 
-  lib_set_fault_hook (NULL, glpk_fault_hook);
+#ifdef GLPK_PRE_4_15
+  lib_set_fault_hook (0, glpk_fault_hook);
+#else
+  _glp_lib_fault_hook (glpk_fault_hook, 0);
+#endif
 
   if (lpxIntParam[0] > 1)
-    lib_set_print_hook (NULL, glpk_print_hook);
+#ifdef GLPK_PRE_4_15
+    lib_set_print_hook (0, glpk_print_hook);
+#else
+    _glp_lib_print_hook (glpk_print_hook, 0);
+#endif
 
   LPX *lp = lpx_create_prob ();
 
 
   //-- Set the sense of optimization
   if (sense == 1)
     lpx_set_obj_dir (lp, LPX_MIN);
   else
@@ -281,17 +303,21 @@ glpk (int sense, int n, int m, double *c
       }
      break;
 
     case 'T':
       errnum = lpx_interior(lp);
       break;
 
     default:
+#ifdef GLPK_PRE_4_15
       insist (method != method);
+#else
+      glpk_fault_hook (0, "method != method");
+#endif
     }
 
   /*  errnum assumes the following results:
       errnum = 0 <=> No errors
       errnum = 1 <=> Iteration limit exceeded.
       errnum = 2 <=> Numerical problems with basis matrix.
   */
   if (errnum == LPX_E_OK)
@@ -346,17 +372,22 @@ glpk (int sense, int n, int m, double *c
 	      if (lpsolver == 1)
 		redcosts[i] = lpx_get_col_dual (lp, i+1);
 	      else
 		redcosts[i] = lpx_ipt_col_dual (lp, i+1);
 	    }
 	}
 
       *time = (clock () - t_start) / CLOCKS_PER_SEC;
+
+#ifdef GLPK_PRE_4_15
       *mem = (lib_env_ptr () -> mem_tpeak);
+#else
+      *mem = 0;
+#endif
 
       lpx_delete_prob (lp);
       return 0;
     }
 
    lpx_delete_prob (lp);
 
    *status = errnum;
