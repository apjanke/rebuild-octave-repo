# HG changeset patch
# User jwe
# Date 1189457007 0
#      Mon Sep 10 20:43:27 2007 +0000
# Node ID 1cbb8b606d6377b3368d60e0f8d68783645a16bb
# Parent  037c8b622a019ecbb05383d3edda21291a423200
[project @ 2007-09-10 20:43:26 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1347,17 +1347,17 @@ Array<T>::maybe_delete_elements_1 (idx_v
 	      octave_idx_type ii = 0;
 	      iidx = 0;
 	      for (octave_idx_type i = 0; i < len; i++)
 		{
 		  if (iidx < num_to_delete && i == idx_arg.elem (iidx))
 		    iidx++;
 		  else
 		    {
-		      new_data[ii] = elem (i);
+		      new_data[ii] = xelem (i);
 		      ii++;
 		    }
 		}
 
 	      if (--rep->count <= 0)
 		delete rep;
 
 	      rep = new typename Array<T>::ArrayRep (new_data, new_len);
@@ -1433,17 +1433,17 @@ Array<T>::maybe_delete_elements_2 (idx_v
 	  octave_idx_type ii = 0;
 	  iidx = 0;
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      if (iidx < num_to_delete && i == idx_arg.elem (iidx))
 		iidx++;
 	      else
 		{
-		  new_data[ii] = elem (i);
+		  new_data[ii] = xelem (i);
 
 		  ii++;
 		}
 	    }
 
 	  if (--(Array<T>::rep)->count <= 0)
 	    delete Array<T>::rep;
 
@@ -1550,17 +1550,17 @@ Array<T>::maybe_delete_elements (idx_vec
 		      iidx = 0;
 		      for (octave_idx_type j = 0; j < nc; j++)
 			{
 			  if (iidx < num_to_delete && j == idx_j.elem (iidx))
 			    iidx++;
 			  else
 			    {
 			      for (octave_idx_type i = 0; i < nr; i++)
-				new_data[nr*jj+i] = elem (i, j);
+				new_data[nr*jj+i] = xelem (i, j);
 			      jj++;
 			    }
 			}
 
 		      if (--(Array<T>::rep)->count <= 0)
 			delete Array<T>::rep;
 
 		      Array<T>::rep = new typename Array<T>::ArrayRep (new_data, nr * new_nc);
@@ -1613,17 +1613,17 @@ Array<T>::maybe_delete_elements (idx_vec
 		      iidx = 0;
 		      for (octave_idx_type i = 0; i < nr; i++)
 			{
 			  if (iidx < num_to_delete && i == idx_i.elem (iidx))
 			    iidx++;
 			  else
 			    {
 			      for (octave_idx_type j = 0; j < nc; j++)
-				new_data[new_nr*j+ii] = elem (i, j);
+				new_data[new_nr*j+ii] = xelem (i, j);
 			      ii++;
 			    }
 			}
 
 		      if (--(Array<T>::rep)->count <= 0)
 			delete Array<T>::rep;
 
 		      Array<T>::rep = new typename Array<T>::ArrayRep (new_data, new_nr * nc);
@@ -1911,17 +1911,17 @@ Array<T>::maybe_delete_elements (Array<i
 			      octave_idx_type num_lgt = how_many_lgt (result_idx(non_col),
 							  ra_idx(non_col));
 
 			      temp_result_idx(non_col) -= num_lgt;
 
 			      octave_idx_type kidx
 				= ::compute_index (temp_result_idx, new_lhs_dim);
 
-			      new_data[kidx] = elem (result_idx);
+			      new_data[kidx] = xelem (result_idx);
 			    }
 
 			  increment_index (result_idx, lhs_dims);
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
@@ -1969,17 +1969,17 @@ Array<T>::maybe_delete_elements (Array<i
 	      for (octave_idx_type i = 0; i < lhs_numel; i++)
 		{
 		  if (iidx < num_to_delete && i == idx_vec.elem (iidx))
 		    {
 		      iidx++;
 		    }
 		  else
 		    {
-		      new_data[ii++] = elem (lhs_ra_idx);
+		      new_data[ii++] = xelem (lhs_ra_idx);
 		    }
 
 		  increment_index (lhs_ra_idx, lhs_dims);
 		}
 
 	      if (--(Array<T>::rep)->count <= 0)
 		delete Array<T>::rep;
 
@@ -2500,37 +2500,59 @@ assign1 (Array<LT>& lhs, const Array<RT>
 	    ("A(I) = X: unable to resize A");
 
 	  retval = 0;
 	}
       else
 	{
 	  if (rhs_len == n || rhs_len == 1)
 	    {
+	      lhs.make_unique ();
+
 	      octave_idx_type max_idx = lhs_idx.max () + 1;
 	      if (max_idx > lhs_len)
 		lhs.resize_and_fill (max_idx, rfv);
 	    }
 
 	  if (rhs_len == n)
 	    {
-	      for (octave_idx_type i = 0; i < n; i++)
+	      lhs.make_unique ();
+
+	      if (lhs_idx.is_colon ())
 		{
-		  octave_idx_type ii = lhs_idx.elem (i);
-		  lhs.elem (ii) = rhs.elem (i);
+		  for (octave_idx_type i = 0; i < n; i++)
+		    lhs.xelem (i) = rhs.elem (i);
+		}
+	      else
+		{
+		  for (octave_idx_type i = 0; i < n; i++)
+		    {
+		      octave_idx_type ii = lhs_idx.elem (i);
+		      lhs.xelem (ii) = rhs.elem (i);
+		    }
 		}
 	    }
 	  else if (rhs_len == 1)
 	    {
+	      lhs.make_unique ();
+
 	      RT scalar = rhs.elem (0);
 
-	      for (octave_idx_type i = 0; i < n; i++)
+	      if (lhs_idx.is_colon ())
 		{
-		  octave_idx_type ii = lhs_idx.elem (i);
-		  lhs.elem (ii) = scalar;
+		  for (octave_idx_type i = 0; i < n; i++)
+		    lhs.xelem (i) = scalar;
+		}
+	      else
+		{
+		  for (octave_idx_type i = 0; i < n; i++)
+		    {
+		      octave_idx_type ii = lhs_idx.elem (i);
+		      lhs.xelem (ii) = scalar;
+		    }
 		}
 	    }
 	  else
 	    {
 	      (*current_liboctave_error_handler)
 		("A(I) = X: X must be a scalar or a vector with same length as I");
 
 	      retval = 0;
@@ -2538,20 +2560,22 @@ assign1 (Array<LT>& lhs, const Array<RT>
 	}
     }
   else if (lhs_idx.is_colon ())
     {
       dim_vector lhs_dims = lhs.dims ();
 
       if (lhs_dims.all_zero ())
 	{
+	  lhs.make_unique ();
+
 	  lhs.resize_no_fill (rhs_len);
 
 	  for (octave_idx_type i = 0; i < rhs_len; i++)
-	    lhs.elem (i) = rhs.elem (i);
+	    lhs.xelem (i) = rhs.elem (i);
 	}
       else if (rhs_len != lhs_len)
 	(*current_liboctave_error_handler)
 	  ("A(:) = X: A must be the same size as X");
     }
   else if (! (rhs_len == 1 || rhs_len == 0))
     {
       (*current_liboctave_error_handler)
@@ -2661,65 +2685,71 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	    {
 	      if (rhs_is_scalar && n >= 0 && m >= 0)
 		{
 		  // No need to do anything if either of the indices
 		  // are empty.
 
 		  if (n > 0 && m > 0)
 		    {
+		      lhs.make_unique ();
+
 		      MAYBE_RESIZE_LHS;
 
 		      RT scalar = xrhs.elem (0, 0);
 
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
-			      lhs.elem (ii, jj) = scalar;
+			      lhs.xelem (ii, jj) = scalar;
 			    }
 			}
 		    }
 		}
 	      else if ((n == 1 || m == 1)
 		       && (rhs_nr == 1 || rhs_nc == 1)
 		       && n * m == rhs_nr * rhs_nc)
 		{
+		  lhs.make_unique ();
+
 		  MAYBE_RESIZE_LHS;
 
 		  if (n > 0 && m > 0)
 		    {
 		      octave_idx_type k = 0;
 
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
-			      lhs.elem (ii, jj) = xrhs.elem (k++);
+			      lhs.xelem (ii, jj) = xrhs.elem (k++);
 			    }
 			}
 		    }
 		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
+		  lhs.make_unique ();
+
 		  MAYBE_RESIZE_LHS;
 
 		  if (n > 0 && m > 0)
 		    {
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
-			      lhs.elem (ii, jj) = xrhs.elem (i, j);
+			      lhs.xelem (ii, jj) = xrhs.elem (i, j);
 			    }
 			}
 		    }
 		}
 	      else if (n == 0 && m == 0)
 		{
 		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
 		    {
@@ -2854,30 +2884,50 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	      else if (len == 0)
 		{
 		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
 		    (*current_liboctave_error_handler)
 		      ("A([]) = X: X must be an empty matrix or scalar");
 		}
 	      else if (len == rhs_nr * rhs_nc)
 		{
-		  for (octave_idx_type i = 0; i < len; i++)
+		  lhs.make_unique ();
+
+		  if (idx_i.is_colon ())
 		    {
-		      octave_idx_type ii = idx_i.elem (i);
-		      lhs.elem (ii) = xrhs.elem (i);
+		      for (octave_idx_type i = 0; i < len; i++)
+			lhs.xelem (i) = xrhs.elem (i);
+		    }
+		  else
+		    {
+		      for (octave_idx_type i = 0; i < len; i++)
+			{
+			  octave_idx_type ii = idx_i.elem (i);
+			  lhs.xelem (ii) = xrhs.elem (i);
+			}
 		    }
 		}
 	      else if (rhs_is_scalar)
 		{
+		  lhs.make_unique ();
+
 		  RT scalar = rhs.elem (0, 0);
 
-		  for (octave_idx_type i = 0; i < len; i++)
+		  if (idx_i.is_colon ())
 		    {
-		      octave_idx_type ii = idx_i.elem (i);
-		      lhs.elem (ii) = scalar;
+		      for (octave_idx_type i = 0; i < len; i++)
+			lhs.xelem (i) = scalar;
+		    }
+		  else
+		    {
+		      for (octave_idx_type i = 0; i < len; i++)
+			{
+			  octave_idx_type ii = idx_i.elem (i);
+			  lhs.xelem (ii) = scalar;
+			}
 		    }
 		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
       ("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 		  retval = 0;
@@ -2926,18 +2976,19 @@ assignN (Array<LT>& lhs, const Array<RT>
       (*current_liboctave_error_handler)
 	("invalid number of indices for matrix expression");
 
       retval = 0;
     }
   else if (n_idx == 1)
     {
       idx_vector iidx = idx(0);
-
-      if (! (iidx.is_colon ()
+      int iidx_is_colon = iidx.is_colon ();
+
+      if (! (iidx_is_colon
 	     || (iidx.one_zero_only ()
 		 && iidx.orig_dimensions () == lhs.dims ())))
 	(*current_liboctave_warning_with_id_handler)
 	  ("Octave:fortran-indexing", "single index used for N-d array");
 
       octave_idx_type lhs_len = lhs.length ();
 
       octave_idx_type len = iidx.freeze (lhs_len, "N-d arrray");
@@ -2951,32 +3002,52 @@ assignN (Array<LT>& lhs, const Array<RT>
 		  (*current_liboctave_error_handler)
 		    ("A([]) = X: X must be an empty matrix or scalar");
 
 		  retval = 0;
 		}
 	    }
 	  else if (len == rhs.length ())
 	    {
-	      for (octave_idx_type i = 0; i < len; i++)
+	      lhs.make_unique ();
+
+	      if (iidx_is_colon)
 		{
-		  octave_idx_type ii = iidx.elem (i);
-
-		  lhs.elem (ii) = rhs.elem (i);
+		  for (octave_idx_type i = 0; i < len; i++)
+		    lhs.xelem (i) = rhs.elem (i);
+		}
+	      else
+		{
+		  for (octave_idx_type i = 0; i < len; i++)
+		    {
+		      octave_idx_type ii = iidx.elem (i);
+
+		      lhs.xelem (ii) = rhs.elem (i);
+		    }
 		}
 	    }
 	  else if (rhs_is_scalar)
 	    {
 	      RT scalar = rhs.elem (0);
 
-	      for (octave_idx_type i = 0; i < len; i++)
+	      lhs.make_unique ();
+
+	      if (iidx_is_colon)
 		{
-		  octave_idx_type ii = iidx.elem (i);
-
-		  lhs.elem (ii) = scalar;
+		  for (octave_idx_type i = 0; i < len; i++)
+		    lhs.xelem (i) = scalar;
+		}
+	      else
+		{
+		  for (octave_idx_type i = 0; i < len; i++)
+		    {
+		      octave_idx_type ii = iidx.elem (i);
+
+		      lhs.xelem (ii) = scalar;
+		    }
 		}
 	    }
 	  else
 	    {
 	      (*current_liboctave_error_handler)
 		("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 	      retval = 0;
@@ -3123,67 +3194,91 @@ assignN (Array<LT>& lhs, const Array<RT>
 		      retval = 0;
 		      lhs.clear_index ();
 		      return retval;
 		    }
 		}
 
 	      if (rhs_is_scalar)
 		{
+		  lhs.make_unique ();
+
 		  if (n_idx < orig_lhs_dims_len)
 		    lhs = lhs.reshape (lhs_dims);
 
 		  lhs.resize_and_fill (new_dims, rfv);
 
 		  if  (! final_lhs_dims.any_zero ())
 		    {
 		      RT scalar = rhs.elem (0);
 
 		      if (n_idx == 1)
 			{
 			  idx_vector iidx = idx(0);
 
 			  octave_idx_type len = frozen_len(0);
 
-			  for (octave_idx_type i = 0; i < len; i++)
+			  if (iidx.is_colon ())
+			    {
+			      for (octave_idx_type i = 0; i < len; i++)
+				lhs.xelem (i) = scalar;
+			    }
+			  else
 			    {
-			      octave_idx_type ii = iidx.elem (i);
-
-			      lhs.elem (ii) = scalar;
+			      for (octave_idx_type i = 0; i < len; i++)
+				{
+				  octave_idx_type ii = iidx.elem (i);
+
+				  lhs.xelem (ii) = scalar;
+				}
 			    }
 			}
 		      else if (lhs_dims_len == 2 && n_idx == 2)
 			{
 			  idx_vector idx_i = idx(0);
 			  idx_vector idx_j = idx(1);
 
 			  octave_idx_type i_len = frozen_len(0);
 			  octave_idx_type j_len = frozen_len(1);
 
-			  for (octave_idx_type j = 0; j < j_len; j++)
+			  if (idx_i.is_colon())
 			    {
-			      octave_idx_type jj = idx_j.elem (j);
-			      for (octave_idx_type i = 0; i < i_len; i++)
+			      for (octave_idx_type j = 0; j < j_len; j++)
 				{
-				  octave_idx_type ii = idx_i.elem (i);
-				  lhs.elem (ii, jj) = scalar;
+				  octave_idx_type off = new_dims (0) *
+				    idx_j.elem (j);
+				  for (octave_idx_type i = 0; i < i_len; i++)
+				    lhs.xelem (i + off) = scalar;
+				}
+			    }
+			  else
+			    {
+			      for (octave_idx_type j = 0; j < j_len; j++)
+				{
+				  octave_idx_type off = new_dims (0) *
+				    idx_j.elem (j);
+				  for (octave_idx_type i = 0; i < i_len; i++)
+				    {
+				      octave_idx_type ii = idx_i.elem (i);
+				      lhs.xelem (ii + off) = scalar;
+				    }
 				}
 			    }
 			}
 		      else
 			{
 			  octave_idx_type n = Array<LT>::get_size (frozen_len);
 
 			  Array<octave_idx_type> result_idx (lhs_dims_len, 0);
 
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      Array<octave_idx_type> elt_idx = get_elt_idx (idx, result_idx);
 
-			      lhs.elem (elt_idx) = scalar;
+			      lhs.xelem (elt_idx) = scalar;
 
 			      increment_index (result_idx, frozen_len);
 			    }
 			}
 		    }
 		}
 	      else
 		{
@@ -3195,66 +3290,92 @@ assignN (Array<LT>& lhs, const Array<RT>
 		    {
 		      (*current_liboctave_error_handler)
 			("A(IDX-LIST) = X: X must be a scalar or size of X must equal number of elements indexed by IDX-LIST");
 
 			  retval = 0;
 		    }
 		  else
 		    {
+		      lhs.make_unique ();
+
 		      if (n_idx < orig_lhs_dims_len)
 			lhs = lhs.reshape (lhs_dims);
 
 		      lhs.resize_and_fill (new_dims, rfv);
 
 		      if  (! final_lhs_dims.any_zero ())
 			{
 			  if (n_idx == 1)
 			    {
 			      idx_vector iidx = idx(0);
 
 			      octave_idx_type len = frozen_len(0);
 
-			      for (octave_idx_type i = 0; i < len; i++)
+			      if (iidx.is_colon ())
+				{
+				  for (octave_idx_type i = 0; i < len; i++)
+				    lhs.xelem (i) = rhs.elem (i);
+				}
+			      else
 				{
-				  octave_idx_type ii = iidx.elem (i);
-
-				  lhs.elem (ii) = rhs.elem (i);
+				  for (octave_idx_type i = 0; i < len; i++)
+				    {
+				      octave_idx_type ii = iidx.elem (i);
+
+				      lhs.xelem (ii) = rhs.elem (i);
+				    }
 				}
 			    }
 			  else if (lhs_dims_len == 2 && n_idx == 2)
 			    {
 			      idx_vector idx_i = idx(0);
 			      idx_vector idx_j = idx(1);
 
 			      octave_idx_type i_len = frozen_len(0);
 			      octave_idx_type j_len = frozen_len(1);
 			      octave_idx_type k = 0;
 
-			      for (octave_idx_type j = 0; j < j_len; j++)
+			      if (idx_i.is_colon())
 				{
-				  octave_idx_type jj = idx_j.elem (j);
-				  for (octave_idx_type i = 0; i < i_len; i++)
+				  for (octave_idx_type j = 0; j < j_len; j++)
 				    {
-				      octave_idx_type ii = idx_i.elem (i);
-				      lhs.elem (ii, jj) = rhs.elem (k++);
+				      octave_idx_type off = new_dims (0) * 
+					idx_j.elem (j);
+				      for (octave_idx_type i = 0; 
+					   i < i_len; i++)
+					lhs.xelem (i + off) = rhs.elem (k++);
 				    }
 				}
+			      else
+				{
+				  for (octave_idx_type j = 0; j < j_len; j++)
+				    {
+				      octave_idx_type off = new_dims (0) * 
+					idx_j.elem (j);
+				      for (octave_idx_type i = 0; i < i_len; i++)
+					{
+					  octave_idx_type ii = idx_i.elem (i);
+					  lhs.xelem (ii + off) = rhs.elem (k++);
+					}
+				    }
+				}
+
 			    }
 			  else
 			    {
 			      n = Array<LT>::get_size (frozen_len);
 
 			      Array<octave_idx_type> result_idx (lhs_dims_len, 0);
 
 			      for (octave_idx_type i = 0; i < n; i++)
 				{
 				  Array<octave_idx_type> elt_idx = get_elt_idx (idx, result_idx);
 
-				  lhs.elem (elt_idx) = rhs.elem (i);
+				  lhs.xelem (elt_idx) = rhs.elem (i);
 
 				  increment_index (result_idx, frozen_len);
 				}
 			    }
 			}
 		    }
 		}
 	    }
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -105,16 +105,21 @@ protected:
 
     // No assignment!
 
     ArrayRep& operator = (const ArrayRep& a);
   };
 
   //--------------------------------------------------------------------
 
+public:
+
+  // !!! WARNING !!! -- these should be protected, not public.  You
+  // should not access these methods directly!
+
   void make_unique (void)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new ArrayRep (*rep);
 	}
     }
@@ -125,18 +130,16 @@ protected:
 	{
 	  --rep->count;
 	  rep = new ArrayRep (rep->length (), val);
 	}
       else
 	rep->fill (val);
     }
 
-public:
-
   typedef T element_type;
 
   // !!! WARNING !!! -- these should be protected, not public.  You
   // should not access these data members directly!
 
   typename Array<T>::ArrayRep *rep;
 
   dim_vector dimensions;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,32 @@
+2007-09-10  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assign1): Don't call make_unique for invalid assignment.
+
+2007-09-10  David Bateman  <dbateman@free.fr>
+
+	* Array.h (Array<T>::make_unique): Make public so that the
+	::assign functions can access it directly.
+	* Array.cc (Array<T>::maybe_delete_elements_1(idx_vector&),
+	Array<T>::maybe_delete_elements_1(idx_vector&),
+	Array<T>::maybe_delete_elements(idx_vector&, idx_vector&),
+	Array<T>::maybe_delete_elements(Array<idx_vector>&, const T&)):
+	Use xelem for non const RHS to avoid call to make_unique.
+	(int assign1 (Array<LT>&, const Array<RT>&, const LT&)): Use
+	xelem for LHS and call lhs.make_unique() only once. Special case
+	the is_colon index case and use Array<T>::xelem(octave_idx_type)
+	rather than Array<T>::xelem(octave_idx_type,octave_idx_type) and
+	bring the additional multiplication out of the inner loop.
+	(int assign2 (Array<LT>&, const Array<RT>&, const LT&)): ditto.
+	(int assignN (Array<LT>&, const Array<RT>&, const LT&)): ditto.
+	* idx-vector.h (idx_vector::idx_vector_rep::idx_vector_rep 
+	(const Range& r)): Don't use init_state() method but special case
+	as with a Range can avoid exhaustive search.
+
 2007-09-07  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (Array<T>::fortran_vec): Call make_unique instead of
 	manipulating rep directly.
 
 	* Array.h (idx, idx_count): Declare mutable.
 	(Array<T>::set_index, Array<T>::clear_index, Array<T>::value):
 	Now const.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -192,17 +192,35 @@ IDX_VEC_REP::idx_vector_rep (const Range
     {    
       octave_idx_type b = static_cast<octave_idx_type> (r.base ());
       octave_idx_type step = static_cast<octave_idx_type> (r.inc ());
 
       data[0] = b - 1;
       for (octave_idx_type i = 1; i < len; i++)
 	data[i] = data[i-1] + step;
 
-      init_state ();
+      // Don't use init_state(), as it can be vastly accelerated since 
+      // we don't have to search all values for max/min, etc.
+      if (step >= 0)
+	{
+	  min_val = data [0];
+	  max_val = data [len - 1];
+	}
+      else
+	{
+	  min_val = data [len - 1];
+	  max_val = data [0];
+	}
+
+      if ((b <= 0 && step > 0) || (b >= 0 && step < 0))
+	num_zeros = 1;
+      if ((b <= 1 && step > 0) || (b >= 1 && step < 0))
+	num_zeros = 0;
+
+      initialized = 1;
     }
   else
     (*current_liboctave_error_handler)
       ("expecting integer index, found non integer Range");
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
   : data (0), len (1), num_zeros (0), num_ones (0),
