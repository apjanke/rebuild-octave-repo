# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295514318 18000
#      Thu Jan 20 04:05:18 2011 -0500
# Node ID e306683a7e973c78eb6544cf785f68767eb257dc
# Parent  5c680b69b4e2ec2907d19ae5ab114ef62f55136f
read_mat5_binary_element: improve diagnostic if uncompress fails

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
+	* ls-mat5.cc (read_mat5_binary_element):
+	Improve diagnositc if uncompress fails.
+
 	* load-path.cc (strip_trailing_separators): New static function.
 	(load_path::do_add, load_path::do_remove): Call it on directory arg.
 
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.h, graphics.cc, gl-render.cc, graphics.h.in:
 	Update for backend -> graphics_toolkit change.
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -542,17 +542,56 @@ read_mat5_binary_element (std::istream& 
 
           // FIXME -- find a way to avoid casting away const here!
 
           int err = uncompress (reinterpret_cast<Bytef *> (const_cast<char *> (outbuf.c_str ())),
                                 &destLen, reinterpret_cast<Bytef *> (inbuf),
                                 element_length);
 
           if (err != Z_OK)
-            error ("load: error uncompressing data element");
+            {
+              std::string msg;
+              switch (err)
+                {
+                case Z_STREAM_END:
+                  msg = "stream end";
+                  break;
+
+                case Z_NEED_DICT:
+                  msg = "need dict";
+                  break;
+
+                case Z_ERRNO:
+                  msg = "errno case";
+                  break;
+
+                case Z_STREAM_ERROR:
+                  msg = "stream error";
+                  break;
+
+                case Z_DATA_ERROR:
+                  msg = "data error";
+                  break;
+
+                case Z_MEM_ERROR:
+                  msg = "mem error";
+                  break;
+
+                case Z_BUF_ERROR:
+                  msg = "buf error";
+                  break;
+
+                case Z_VERSION_ERROR:
+                  msg = "version error";
+                  break;
+                }
+
+              error ("load: error uncompressing data element (%s from zlib)",
+                     msg.c_str ());
+            }
           else
             {
               std::istringstream gz_is (outbuf);
               retval = read_mat5_binary_element (gz_is, filename, 
                                                  swap, global, tc);
             }
         }
       else
