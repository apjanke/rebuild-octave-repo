# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1320472780 14400
#      Sat Nov 05 01:59:40 2011 -0400
# Node ID f1b023fd098d717d5095212c0bcbc4f98355552f
# Parent  822f80b908660755b800fc6023b7ef4195a17c1c
always initialize info and rcon in Matrix determinant methods

* dMatrix.cc (Matrix::determinant): Always initialize info and rcon.
* CMatrix.cc (ComplexMatrix::determinant): Likewise.
* fMatrix.cc (FloatMatrix::determinant): Likewise.
* fCMatrix.cc (FloatComplexMatrix::determinant): Likewise.

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1566,16 +1566,19 @@ ComplexMatrix::determinant (octave_idx_t
 
 ComplexDET
 ComplexMatrix::determinant (MatrixType& mattype,
                             octave_idx_type& info, double& rcon,
                             int calc_cond) const
 {
   ComplexDET retval (1.0);
 
+  info = 0;
+  rcon = 0.0;
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
@@ -1594,17 +1597,16 @@ ComplexMatrix::determinant (MatrixType& 
           for (octave_idx_type i = 0; i < nc; i++)
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           ComplexMatrix atmp = *this;
           Complex *tmp_data = atmp.fortran_vec ();
 
-          info = 0;
           double anorm = 0;
           if (calc_cond) anorm = xnorm (*this, 1);
 
 
           char job = 'L';
           F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1234,16 +1234,19 @@ Matrix::determinant (octave_idx_type& in
 }
 
 DET
 Matrix::determinant (MatrixType& mattype,
                      octave_idx_type& info, double& rcon, int calc_cond) const
 {
   DET retval (1.0);
 
+  info = 0;
+  rcon = 0.0;
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
@@ -1262,17 +1265,16 @@ Matrix::determinant (MatrixType& mattype
           for (octave_idx_type i = 0; i < nc; i++)
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
 
-          info = 0;
           double anorm = 0;
           if (calc_cond) anorm = xnorm (*this, 1);
 
 
           char job = 'L';
           F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1562,16 +1562,19 @@ FloatComplexMatrix::determinant (octave_
 }
 
 FloatComplexDET
 FloatComplexMatrix::determinant (MatrixType& mattype,
                                  octave_idx_type& info, float& rcon, int calc_cond) const
 {
   FloatComplexDET retval (1.0);
 
+  info = 0;
+  rcon = 0.0;
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
@@ -1590,17 +1593,16 @@ FloatComplexMatrix::determinant (MatrixT
           for (octave_idx_type i = 0; i < nc; i++)
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           FloatComplexMatrix atmp = *this;
           FloatComplex *tmp_data = atmp.fortran_vec ();
 
-          info = 0;
           float anorm = 0;
           if (calc_cond) anorm = xnorm (*this, 1);
 
 
           char job = 'L';
           F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1234,16 +1234,19 @@ FloatMatrix::determinant (octave_idx_typ
 }
 
 FloatDET
 FloatMatrix::determinant (MatrixType& mattype,
                           octave_idx_type& info, float& rcon, int calc_cond) const
 {
   FloatDET retval (1.0);
 
+  info = 0;
+  rcon = 0.0;
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       volatile int typ = mattype.type ();
@@ -1262,17 +1265,16 @@ FloatMatrix::determinant (MatrixType& ma
           for (octave_idx_type i = 0; i < nc; i++)
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
 
-          info = 0;
           float anorm = 0;
           if (calc_cond) anorm = xnorm (*this, 1);
 
 
           char job = 'L';
           F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
