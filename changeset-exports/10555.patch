# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1272054859 14400
#      Fri Apr 23 16:34:19 2010 -0400
# Node ID a8020730354953d5b799bcfb7cc23f7049fbfd37
# Parent  dfdc040a0c5e989e3cc2129493cf6f6fd1659e11
style fixes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,14 @@
-n2010-04-23  John W. Eaton  <jwe@octave.org>
+2010-04-23  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fltk_backend.cc	(OpenGL_fltk::OpenGL_fltk):
+	Explicitly initizlize all data members in the order they are declared.
+
+2010-04-23  John W. Eaton  <jwe@octave.org>
 
 	* txt-eng-ft.cc (ft_render::visit): Declare loop counter size_t,
 	not int.
 
 	* graphics.h.in (graphics_xform::untransform):  Likewise.
 	* graphics.cc (text::properties::update_text_extent): Likewise.
 	* DLD-FUNCTIONS/fltk_backend.cc	(plot_window::set_axes_currentpoint):
 	Avoid GCC shadow variable warning.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -78,18 +78,18 @@ right drag - rectangle zoom\n\
 left double click - autoscale\n\
 ";
 
 
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
-    : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), in_zoom (false),
-      print_filename ("")
+    : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), renderer (),
+      in_zoom (false), zoom_box (),  print_filename ()
   {
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE);
   }
 
   ~OpenGL_fltk (void) { }
 
   void zoom (bool z) 
@@ -111,21 +111,21 @@ private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
   // (x1,y1,x2,y2)
   Matrix zoom_box;
 
   std::string print_filename;
 
-  void setup_viewport (int _w, int _h)
+  void setup_viewport (int ww, int hh)
   {
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
-    glViewport (0, 0, _w, _h);
+    glViewport (0, 0, ww, hh);
   }
 
   void draw (void)
   {
     if (! valid ())
       {
         valid (1);
         setup_viewport (w (), h ());
@@ -142,20 +142,20 @@ private:
       {
         renderer.draw (gh_manager::lookup (number));
 
         if (zoom ())
           overlay ();
       }
   }
 
-  void resize (int _x, int _y, int _w, int _h)
+  void resize (int xx, int yy, int ww, int hh)
   {
-    Fl_Gl_Window::resize (_x, _y, _w, _h);
-    setup_viewport (_w, _h);
+    Fl_Gl_Window::resize (xx, yy, ww, hh);
+    setup_viewport (ww, hh);
     redraw ();
   }
 
   void zoom_box_vertex (void)
   {
     glVertex2d (zoom_box(0), h () - zoom_box(1));
     glVertex2d (zoom_box(0), h () - zoom_box(3));
     glVertex2d (zoom_box(2), h () - zoom_box(3));
@@ -212,56 +212,56 @@ private:
 };
 
 // Parameter controlling how fast we zoom when using the scrool wheel.
 static double wheel_zoom_speed = 0.05;
 
 class plot_window : public Fl_Window
 {
 public:
-  plot_window (int _x, int _y, int _w, int _h, figure::properties& _fp)
-    : Fl_Window (_x, _y, _w, _h, "octave"), window_label (), shift (0),
-      fp (_fp), canvas (0), autoscale (0), togglegrid (0), help (0),
+  plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
+    : Fl_Window (xx, yy, ww, hh, "octave"), window_label (), shift (0),
+      fp (xfp), canvas (0), autoscale (0), togglegrid (0), help (0),
       status (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     begin ();
     {
       canvas = new
-        OpenGL_fltk (0, 0, _w , _h - status_h, number ());
+        OpenGL_fltk (0, 0, ww , hh - status_h, number ());
 
       autoscale = new
         Fl_Button (0,
-                   _h - status_h,
+                   hh - status_h,
                    status_h,
                    status_h,
                    "A");
       autoscale->callback (button_callback, static_cast<void*> (this));
 
       togglegrid = new
         Fl_Button (status_h,
-                   _h - status_h,
+                   hh - status_h,
                    status_h,
                    status_h,
                    "G");
       togglegrid->callback (button_callback, static_cast<void*> (this));
 
       help = new
         Fl_Button (2*status_h,
-                   _h - status_h,
+                   hh - status_h,
                    status_h,
                    status_h,
                    "?");
       help->callback (button_callback, static_cast<void*> (this));
 
       status = new
         Fl_Output (3*status_h,
-                   _h - status_h,
-                   _w > 2*status_h ? _w - status_h : 0,
+                   hh - status_h,
+                   ww > 2*status_h ? ww - status_h : 0,
                    status_h, "");
 
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
       status->box (FL_ENGRAVED_BOX);
 
@@ -516,25 +516,25 @@ private:
     if (shift & FL_CTRL)
       mod.append (std::string ("control"));
     if (shift & FL_ALT || shift & FL_META)
       mod.append (std::string ("alt"));
 
     return Cell (mod);
   }
 
-  void resize (int _x,int _y,int _w,int _h)
+  void resize (int xx,int yy,int ww,int hh)
   {
-    Fl_Window::resize (_x, _y, _w, _h);
+    Fl_Window::resize (xx, yy, ww, hh);
 
     Matrix pos (1,4,0);
-    pos(0) = _x;
-    pos(1) = _y;
-    pos(2) = _w;
-    pos(3) = _h - status_h;
+    pos(0) = xx;
+    pos(1) = yy;
+    pos(2) = ww;
+    pos(3) = hh - status_h;
 
     fp.set_position (pos);
   }
 
   void draw (void)
   {
     Matrix pos = fp.get_position ().matrix_value ();
     Fl_Window::resize (pos(0), pos(1) , pos(2), pos(3) + status_h);
