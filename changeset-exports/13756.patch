# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1319653194 14400
#      Wed Oct 26 14:19:54 2011 -0400
# Node ID 6dfebfa334cbc63191cdb946e16209eb23852443
# Parent  8cd08124cb5900122bdfc378b3990428e90cc4fa
allow negative data log plots with OpenGL+FLTK graphics (bug #34232)

* mx-inlines.cc (mx_inline_any_positive): New function.
* lo-mappers.h (xpositive_sign (double), xpositive_sign (float)):
New functions.
* fNDArray.h, fNDArray.cc (FloatNDArray::any_element_is_positive):
New function.
* fMatrix.h, fMatrix.cc (FloatMatrix::any_element_is_positive):
New function.
* dNDArray.h, dNDArray.cc (NDArray::any_element_is_positive):
New function.
* dMatrix.h, dMatrix.cc (Matrix::any_element_is_positive):
New function.
* graphics.h.in (log_scaler::do_neg_scale): New function.
(log_scaler::scale (const Matrix&) const,
log_scaler::scale (const NDArray&) const): Call do_neg_scale if no
array elements are positive.
* graphics.cc (axes::properties::get_axis_limits): Omit zero from
positive values for log plots.  Correctly widen range for all negative
log plots.

diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2650,16 +2650,23 @@ operator * (const ColumnVector& v, const
 bool
 Matrix::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<double> (*this, mx_inline_any_negative));
 }
 
 bool
+Matrix::any_element_is_positive (bool neg_zero) const
+{
+  return (neg_zero ? test_all (xpositive_sign)
+          : do_mx_check<double> (*this, mx_inline_any_positive));
+}
+
+bool
 Matrix::any_element_is_nan (void) const
 {
   return do_mx_check<double> (*this, mx_inline_any_nan);
 }
 
 bool
 Matrix::any_element_is_inf_or_nan (void) const
 {
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -291,16 +291,17 @@ public:
 
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
   bool any_element_is_negative (bool = false) const;
+  bool any_element_is_positive (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
   boolMatrix all (int dim = -1) const;
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -549,16 +549,23 @@ NDArray::operator ! (void) const
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<double> (*this, mx_inline_any_negative));
 }
 
 bool
+NDArray::any_element_is_positive (bool neg_zero) const
+{
+  return (neg_zero ? test_all (xpositive_sign)
+          : do_mx_check<double> (*this, mx_inline_any_positive));
+}
+
+bool
 NDArray::any_element_is_nan (void) const
 {
   return do_mx_check<double> (*this, mx_inline_any_nan);
 }
 
 bool
 NDArray::any_element_is_inf_or_nan (void) const
 {
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -70,16 +70,17 @@ public:
       return *this;
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   bool any_element_is_negative (bool = false) const;
+  bool any_element_is_positive (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool all_integers (void) const;
   bool too_large_for_float (void) const;
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2650,16 +2650,23 @@ operator * (const FloatColumnVector& v, 
 bool
 FloatMatrix::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<float> (*this, mx_inline_any_negative));
 }
 
 bool
+FloatMatrix::any_element_is_positive (bool neg_zero) const
+{
+  return (neg_zero ? test_all (xpositive_sign)
+          : do_mx_check<float> (*this, mx_inline_any_positive));
+}
+
+bool
 FloatMatrix::any_element_is_nan (void) const
 {
   return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatMatrix::any_element_is_inf_or_nan (void) const
 {
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -291,16 +291,17 @@ public:
 
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
   bool any_element_is_negative (bool = false) const;
+  bool any_element_is_positive (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (float& max_val, float& min_val) const;
   bool too_large_for_float (void) const;
 
   boolMatrix all (int dim = -1) const;
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -509,16 +509,23 @@ FloatNDArray::operator ! (void) const
 bool
 FloatNDArray::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<float> (*this, mx_inline_any_negative));
 }
 
 bool
+FloatNDArray::any_element_is_positive (bool neg_zero) const
+{
+  return (neg_zero ? test_all (xpositive_sign)
+          : do_mx_check<float> (*this, mx_inline_any_positive));
+}
+
+bool
 FloatNDArray::any_element_is_nan (void) const
 {
   return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatNDArray::any_element_is_inf_or_nan (void) const
 {
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -67,16 +67,17 @@ public:
       return *this;
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   bool any_element_is_negative (bool = false) const;
+  bool any_element_is_positive (bool = false) const;
   bool any_element_is_nan (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
   bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (float& max_val, float& min_val) const;
   bool all_integers (void) const;
   bool too_large_for_float (void) const;
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -213,16 +213,20 @@ xisinteger (float x)
 {
   return xfinite (x) && x == xround (x);
 }
 
 // Test for negative sign.
 extern OCTAVE_API bool xnegative_sign (double x);
 extern OCTAVE_API bool xnegative_sign (float x);
 
+// Test for positive sign.
+inline bool xpositive_sign (double x) { return ! xnegative_sign (x); }
+inline bool xpositive_sign (float x) { return ! xnegative_sign (x); }
+
 // Some old rounding functions.
 
 extern OCTAVE_API octave_idx_type NINTbig (double x);
 extern OCTAVE_API octave_idx_type NINTbig (float x);
 
 extern OCTAVE_API int NINT (double x);
 extern OCTAVE_API int NINT (float x);
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -210,16 +210,29 @@ mx_inline_any_negative (size_t n, const 
     {
       if (x[i] < 0)
         return true;
     }
 
   return false;
 }
 
+template <class T>
+inline bool
+mx_inline_any_positive (size_t n, const T* x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    {
+      if (x[i] > 0)
+        return true;
+    }
+
+  return false;
+}
+
 template<class T>
 inline bool
 mx_inline_all_real (size_t n, const std::complex<T>* x) throw ()
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i].imag () != 0)
         return false;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -5563,17 +5563,17 @@ axes::properties::get_axis_limits (doubl
               // TODO -- max_neg is needed for "loglog ([0 -Inf])"
               //         This is the only place where max_neg is needed.
               //         Is there another way?
               retval = default_lim ();
               retval(0) = pow (10., retval(0));
               retval(1) = pow (10., retval(1));
               return retval;
             }
-          if ((min_val <= 0 && max_val >= 0))
+          if ((min_val <= 0 && max_val > 0))
             {
               warning ("axis: omitting nonpositive data in log plot");
               min_val = min_pos;
             }
           // FIXME -- maybe this test should also be relative?
           if (std::abs (min_val - max_val) < sqrt (DBL_EPSILON))
             {
               min_val *= 0.9;
@@ -5583,18 +5583,18 @@ axes::properties::get_axis_limits (doubl
             {
               // Log plots with all positive data
               min_val = pow (10, gnulib::floor (log10 (min_val)));
               max_val = pow (10, std::ceil (log10 (max_val)));
             }
           else
             {
               // Log plots with all negative data
-              min_val = -pow (10, gnulib::floor (log10 (-min_val)));
-              max_val = -pow (10, std::ceil (log10 (-max_val)));
+              min_val = -pow (10, std::ceil (log10 (-min_val)));
+              max_val = -pow (10, gnulib::floor (log10 (-max_val)));
             }
         }
       else
         {
           if (min_val == 0 && max_val == 0)
             {
               min_val = -1;
               max_val = 1;
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -216,25 +216,33 @@ class log_scaler : public base_scaler
 {
 public:
   log_scaler (void) { }
 
   Matrix scale (const Matrix& m) const
     {
       Matrix retval (m.rows (), m.cols ());
 
-      do_scale (m.data (), retval.fortran_vec (), m.numel ());
+      if (m.any_element_is_positive ())
+        do_scale (m.data (), retval.fortran_vec (), m.numel ());
+      else
+        do_neg_scale (m.data (), retval.fortran_vec (), m.numel ());
+
       return retval;
     }
 
   NDArray scale (const NDArray& m) const
     {
       NDArray retval (m.dims ());
 
-      do_scale (m.data (), retval.fortran_vec (), m.numel ());
+      if (m.any_element_is_positive ())
+        do_scale (m.data (), retval.fortran_vec (), m.numel ());
+      else
+        do_neg_scale (m.data (), retval.fortran_vec (), m.numel ());
+
       return retval;
     }
 
   double scale (double d) const
     { return log10 (d); }
 
   double unscale (double d) const
     { return pow (10.0, d); }
@@ -243,16 +251,22 @@ public:
     { return new log_scaler (); }
 
 private:
   void do_scale (const double *src, double *dest, int n) const
     {
       for (int i = 0; i < n; i++)
         dest[i] = log10(src[i]);
     }
+
+  void do_neg_scale (const double *src, double *dest, int n) const
+    {
+      for (int i = 0; i < n; i++)
+        dest[i] = -log10(-src[i]);
+    }
 };
 
 class scaler
 {
 public:
   scaler (void) : rep (new base_scaler ()) { }
 
   scaler (const scaler& s) : rep (s.rep->clone()) { }
