# HG changeset patch
# User Rik <rik@octave.org>
# Date 1432616535 25200
#      Mon May 25 22:02:15 2015 -0700
# Node ID e914b5399c675b4b5a646b46c8efb3312daeb42c
# Parent  5dfaaaae784f682a22aa03169c0fce51ba6c027e
Use in-place operators in C++ code where possible.

* libgui/src/dialog.cc, libgui/src/m-editor/file-editor-tab.cc,
libgui/src/main-window.cc, libinterp/corefcn/bsxfun.cc,
libinterp/corefcn/filter.cc, libinterp/corefcn/mgorth.cc,
libinterp/corefcn/oct-stream.cc, libinterp/corefcn/pr-output.cc,
liboctave/array/Array-util.cc, liboctave/array/dim-vector.h,
liboctave/numeric/CollocWt.cc, liboctave/numeric/eigs-base.cc,
liboctave/numeric/lo-specfun.cc:
Use in-place operators in C++ code where possible.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -514,17 +514,17 @@ void FileDialog::acceptSelection (void)
   // Matlab expects just the file name, whereas the file dialog gave us
   // full path names, so fix it.
 
   for (int i = 0; i < string_result.size (); i++)
     string_result[i] = QFileInfo (string_result[i]).fileName ();
 
   // if not showing only dirs, add end slash for the path component
   if (testOption (QFileDialog::ShowDirsOnly)  == false)
-    path = path + "/";
+    path += "/";
 
   // convert to native slashes
   path = QDir::toNativeSeparators (path);
 
   QStringList name_filters = nameFilters ();
   idx = name_filters.indexOf (selectedNameFilter ()) + 1;
 
   // send the selected info
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -477,22 +477,22 @@ file_editor_tab::update_lexer ()
                   "editor/codeCompletion_octave_functions", true).toBool ();
 
       if (_is_octave_file)
         {
           // octave file: keywords are always used
           _prep_apis_file = prep_apis_path + lexer->lexer () + "_k";
 
           if (octave_builtins)
-            _prep_apis_file = _prep_apis_file + "b";  // use builtins, too
+            _prep_apis_file += "b";  // use builtins, too
 
           if (octave_functions)
-            _prep_apis_file = _prep_apis_file + "f";  // use keywords, too
+            _prep_apis_file += "f";  // use keywords, too
 
-          _prep_apis_file = _prep_apis_file + ".pap"; // final name of apis file
+          _prep_apis_file += ".pap"; // final name of apis file
 
           // check whether the APIs info needs to be prepared and saved
           QFileInfo apis_file = QFileInfo (_prep_apis_file);
           update_apis_file = ! apis_file.exists ();  // flag whether apis file needs update
 
           // function list depends on installed packages: check mod. date
           if (! update_apis_file && octave_functions)
             {
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -742,17 +742,17 @@ main_window::notice_settings (const QSet
   QString icon;
   foreach (octave_dock_widget *widget, dock_widget_list ())
     {
       QString name = widget->objectName ();
       if (! name.isEmpty ())
         { // if children has a name
           icon = widget_icon_data[icon_set_found].path; // prefix or octave-logo
           if (widget_icon_data[icon_set_found].name != "NONE")
-            icon = icon + name + ".png"; // add widget name and ext.
+            icon += name + ".png"; // add widget name and ext.
           widget->setWindowIcon (QIcon (icon));
         }
     }
   if (widget_icon_data[icon_set_found].name != "NONE")
     _release_notes_icon = widget_icon_data[icon_set_found].path
                           + "ReleaseWidget.png";
   else
     _release_notes_icon = ":/actions/icons/logo.png";
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -237,17 +237,17 @@ maybe_update_column (octave_value& Ac, c
       idx(0) = octave_value (':');
       for (octave_idx_type j = 1; j < nd; j++)
         {
           if (dva(j) == 1)
             idx(j) = octave_value (1);
           else
             idx(j) = octave_value ((i % dvc(j)) + 1);
 
-          i = i / dvc(j);
+          i /= dvc(j);
         }
 
       Ac = A;
       Ac = Ac.single_subsref ("(", idx);
       return true;
     }
   else
     {
@@ -257,18 +257,18 @@ maybe_update_column (octave_value& Ac, c
       for (octave_idx_type j = 1; j < nd; j++)
         {
           if (dva(j) != 1 && k % dvc(j) != k1 % dvc(j))
             {
               idx (j) = octave_value ((k % dvc(j)) + 1);
               is_changed = true;
             }
 
-          k = k / dvc(j);
-          k1 = k1 / dvc(j);
+          k /= dvc(j);
+          k1 /= dvc(j);
         }
 
       if (is_changed)
         {
           Ac = A;
           Ac = Ac.single_subsref ("(", idx);
           return true;
         }
@@ -290,32 +290,32 @@ update_index (octave_value_list& idx, co
         idx(j) = octave_value (1.0);
       idx(0) = octave_value (':');
     }
   else
     {
       for (octave_idx_type j = 1; j < nd; j++)
         {
           idx (j) = octave_value (i % dv(j) + 1);
-          i = i / dv(j);
+          i /= dv(j);
         }
     }
 }
 #endif
 
 static void
 update_index (Array<int>& idx, const dim_vector& dv, octave_idx_type i)
 {
   octave_idx_type nd = dv.length ();
 
   idx(0) = 0;
   for (octave_idx_type j = 1; j < nd; j++)
     {
       idx(j) = i % dv(j);
-      i = i / dv(j);
+      i /= dv(j);
     }
 }
 
 DEFUN (bsxfun, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bsxfun (@var{f}, @var{A}, @var{B})\n\
 The binary singleton expansion function performs broadcasting,\n\
 that is, it applies a binary function @var{f} element-by-element to two\n\
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -122,18 +122,18 @@ filter (MArray<T>& b, MArray<T>& a, MArr
         }
     }
 
   if (x_len == 0)
     return x;
 
   if (norm != static_cast<T> (1.0))
     {
-      a = a / norm;
-      b = b / norm;
+      a /= norm;
+      b /= norm;
     }
 
   if (a_len <= 1 && si_len <= 0)
     return b(0) * x;
 
   y.resize (x_dims, 0.0);
 
   int x_stride = 1;
diff --git a/libinterp/corefcn/mgorth.cc b/libinterp/corefcn/mgorth.cc
--- a/libinterp/corefcn/mgorth.cc
+++ b/libinterp/corefcn/mgorth.cc
@@ -40,17 +40,17 @@ do_mgorth (ColumnVector& x, const Matrix
     {
       ColumnVector Vcj = V.column (j);
       h(j) = RowVector (Vcj.hermitian ()) * x;
       x -= h(j) * Vcj;
     }
 
   h(Vc) = xnorm (x);
   if (real (h(Vc)) > 0)
-    x = x / h(Vc);
+    x /= h(Vc);
 }
 
 DEFUN (mgorth, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{y}, @var{h}] =} mgorth (@var{x}, @var{v})\n\
 Orthogonalize a given column vector @var{x} with respect to a set of\n\
 orthonormal vectors comprising the columns of @var{v} using the modified\n\
 Gram-Schmidt method.\n\
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -337,23 +337,23 @@ scanf_format_list::process_conversion (c
 
         case '0': case '1': case '2': case '3': case '4':
         case '5': case '6': case '7': case '8': case '9':
           if (have_width)
             nconv = -1;
           else
             {
               char c = s[i++];
-              width = width * 10 + c - '0';
+              width = 10 * width + c - '0';
               have_width = true;
               *buf << c;
               while (i < n && isdigit (s[i]))
                 {
                   c = s[i++];
-                  width = width * 10 + c - '0';
+                  width = 10 * width + c - '0';
                   *buf << c;
                 }
             }
           break;
 
         case 'h': case 'l': case 'L':
           if (modifier != '\0')
             nconv = -1;
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -388,18 +388,18 @@ rational_approx (double val, int len)
           if (fabs (frac) < 1 / static_cast<double> (std::numeric_limits<int>::max ()))
             {
               lastn = n;
               lastd = d;
               break;
             }
 
           frac = flip - step;
-          n = n * step + lastn;
-          d = d * step + lastd;
+          n = step * n + lastn;
+          d = step * d + lastd;
           lastn = nextn;
           lastd = nextd;
 
           std::ostringstream buf;
           buf.flags (std::ios::fixed);
           buf << std::setprecision (0) << static_cast<int>(n)
               << "/" << static_cast<int>(d);
           m++;
diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -555,30 +555,30 @@ sub2ind (const dim_vector& dv, const Arr
 
       if (len == 1)
         retval = idxa(0);
       else if (clen == 1)
         {
           // All scalars case - the result is a scalar.
           octave_idx_type idx = idxa(len-1)(0);
           for (octave_idx_type i = len - 2; i >= 0; i--)
-            idx = idx * dvx(i) + idxa(i)(0);
+            idx = dvx(i) * idx + idxa(i)(0);
           retval = idx_vector (idx);
         }
       else if (all_ranges && clen != 0)
         {
           // All ranges case - the result is a range.
           octave_idx_type start = 0;
           octave_idx_type step = 0;
           for (octave_idx_type i = len - 1; i >= 0; i--)
             {
               octave_idx_type xstart = idxa(i)(0);
               octave_idx_type xstep = idxa(i)(1) - xstart;
-              start = start * dvx(i) + xstart;
-              step = step * dvx(i) + xstep;
+              start = dvx(i) * start + xstart;
+              step = dvx(i) * step + xstep;
             }
           retval = idx_vector::make_range (start, step, clen);
         }
       else
         {
           Array<octave_idx_type> idx (idxa(0).orig_dimensions ());
           octave_idx_type *idx_vec = idx.fortran_vec ();
 
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -453,28 +453,28 @@ public:
   }
 
   //! Compute a linear index from an index tuple.
 
   octave_idx_type compute_index (const octave_idx_type *idx) const
   {
     octave_idx_type k = 0;
     for (int i = length () - 1; i >= 0; i--)
-      k = k * rep[i] + idx[i];
+      k = rep[i] * k + idx[i];
 
     return k;
   }
 
   //! Ditto, but the tuple may be incomplete (nidx < length ()).
 
   octave_idx_type compute_index (const octave_idx_type *idx, int nidx) const
   {
     octave_idx_type k = 0;
     for (int i = nidx - 1; i >= 0; i--)
-      k = k * rep[i] + idx[i];
+      k = rep[i] * k + idx[i];
 
     return k;
   }
 
   /*/!
       Increment a multi-dimensional index tuple, optionally starting
       from an offset position and return the index of the last index
       position that was changed, or length () if just cycled over.
diff --git a/liboctave/numeric/CollocWt.cc b/liboctave/numeric/CollocWt.cc
--- a/liboctave/numeric/CollocWt.cc
+++ b/liboctave/numeric/CollocWt.cc
@@ -170,19 +170,19 @@ jcobi (octave_idx_type n, octave_idx_typ
           double z = ab + 2 * z1;
 
           dif1[i] = (ab * ad / z / (z + 2.0) + 1.0) / 2.0;
 
           if (i == 1)
             dif2[i] = (ab + ap + z1) / z / z / (z + 1.0);
           else
             {
-              z = z * z;
+              z *= z;
               double y = z1 * (ab + z1);
-              y = y * (ap + y);
+              y *= (ap + y);
               dif2[i] = y / z / (z - 1.0);
             }
         }
     }
 
   // Root determination by Newton method with suppression of previously
   // determined roots.
 
@@ -213,34 +213,34 @@ jcobi (octave_idx_type n, octave_idx_typ
             }
 
           double zc = 1.0;
           double z = xn / xn1;
 
           if (i != 0)
             {
               for (octave_idx_type j = 1; j <= i; j++)
-                zc = zc - z / (x - root[j-1]);
+                zc -= z / (x - root[j-1]);
             }
 
-          z = z / zc;
-          x = x - z;
+          z /= zc;
+          x -= z;
 
           // Famous last words:  100 iterations should be more than
           // enough in all cases.
 
           if (++k > 100 || xisnan (z))
             return false;
 
           if (std::abs (z) <= 100 * std::numeric_limits<double>::epsilon ())
             done = true;
         }
 
       root[i] = x;
-      x = x + sqrt (std::numeric_limits<double>::epsilon ());
+      x += sqrt (std::numeric_limits<double>::epsilon ());
     }
 
   // Add interpolation points at x = 0 and/or x = 1.
 
   if (n0 != 0)
     {
       for (octave_idx_type i = n; i > 0; i--)
         root[i] = root[i-1];
@@ -357,17 +357,17 @@ dfopr (octave_idx_type n, octave_idx_typ
           if (n0 == 0)
             ax = ax / x / x;
 
           if (n1 == 0)
             ax = ax / (1.0 - x) / (1.0 - x);
 
           vect[j] = ax / (dif1[j] * dif1[j]);
 
-          y = y + vect[j];
+          y += vect[j];
         }
 
       for (octave_idx_type j = 0; j < nt; j++)
         vect[j] = vect[j] / y;
     }
 }
 
 // Error handling.
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -452,40 +452,39 @@ LuAminusSigmaB (const SparseMatrix &m, c
                 {
                   tmp.xcidx (i) = i;
                   tmp.xridx (i) =
                     static_cast<octave_idx_type>(permB(i));
                   tmp.xdata (i) = 1;
                 }
               tmp.xcidx (n) = n;
 
-              AminusSigmaB = AminusSigmaB - sigma * tmp *
-                             b.transpose () * b * tmp.transpose ();
+              AminusSigmaB -= sigma * tmp *
+                              b.transpose () * b * tmp.transpose ();
             }
           else
-            AminusSigmaB = AminusSigmaB - sigma *
-                           b.transpose () * b;
+            AminusSigmaB -= sigma * b.transpose () * b;
         }
       else
-        AminusSigmaB = AminusSigmaB - sigma * b;
+        AminusSigmaB -= sigma * b;
     }
   else
     {
       SparseMatrix sigmat (n, n, n);
 
       // Create sigma * speye (n,n)
       sigmat.xcidx (0) = 0;
       for (octave_idx_type i = 0; i < n; i++)
         {
           sigmat.xdata (i) = sigma;
           sigmat.xridx (i) = i;
           sigmat.xcidx (i+1) = i + 1;
         }
 
-      AminusSigmaB = AminusSigmaB - sigmat;
+      AminusSigmaB -= sigmat;
     }
 
   SparseLU fact (AminusSigmaB);
 
   L = fact.L ();
   U = fact.U ();
   const octave_idx_type *P2 = fact.row_perm ();
   const octave_idx_type *Q2 = fact.col_perm ();
@@ -547,20 +546,20 @@ LuAminusSigmaB (const Matrix &m, const M
               for (octave_idx_type j = 0;
                    j < b.cols (); j++)
                 for (octave_idx_type i = 0;
                      i < b.rows (); i++)
                   *p++ -= tmp.xelem (static_cast<octave_idx_type>(pB[i]),
                                      static_cast<octave_idx_type>(pB[j]));
             }
           else
-            AminusSigmaB = AminusSigmaB - tmp;
+            AminusSigmaB -= tmp;
         }
       else
-        AminusSigmaB = AminusSigmaB - sigma * b;
+        AminusSigmaB -= sigma * b;
     }
   else
     {
       double *p = AminusSigmaB.fortran_vec ();
 
       for (octave_idx_type i = 0; i < n; i++)
         p[i*(n+1)] -= sigma;
     }
@@ -617,39 +616,39 @@ LuAminusSigmaB (const SparseComplexMatri
                 {
                   tmp.xcidx (i) = i;
                   tmp.xridx (i) =
                     static_cast<octave_idx_type>(permB(i));
                   tmp.xdata (i) = 1;
                 }
               tmp.xcidx (n) = n;
 
-              AminusSigmaB = AminusSigmaB - tmp * b.hermitian () * b *
-                             tmp.transpose () * sigma;
+              AminusSigmaB -= tmp * b.hermitian () * b *
+                              tmp.transpose () * sigma;
             }
           else
-            AminusSigmaB = AminusSigmaB - sigma * b.hermitian () * b;
+            AminusSigmaB -= sigma * b.hermitian () * b;
         }
       else
-        AminusSigmaB = AminusSigmaB - sigma * b;
+        AminusSigmaB -= sigma * b;
     }
   else
     {
       SparseComplexMatrix sigmat (n, n, n);
 
       // Create sigma * speye (n,n)
       sigmat.xcidx (0) = 0;
       for (octave_idx_type i = 0; i < n; i++)
         {
           sigmat.xdata (i) = sigma;
           sigmat.xridx (i) = i;
           sigmat.xcidx (i+1) = i + 1;
         }
 
-      AminusSigmaB = AminusSigmaB - sigmat;
+      AminusSigmaB -= sigmat;
     }
 
   SparseComplexLU fact (AminusSigmaB);
 
   L = fact.L ();
   U = fact.U ();
   const octave_idx_type *P2 = fact.row_perm ();
   const octave_idx_type *Q2 = fact.col_perm ();
@@ -711,20 +710,20 @@ LuAminusSigmaB (const ComplexMatrix &m, 
               for (octave_idx_type j = 0;
                    j < b.cols (); j++)
                 for (octave_idx_type i = 0;
                      i < b.rows (); i++)
                   *p++ -= tmp.xelem (static_cast<octave_idx_type>(pB[i]),
                                      static_cast<octave_idx_type>(pB[j]));
             }
           else
-            AminusSigmaB = AminusSigmaB - tmp;
+            AminusSigmaB -= tmp;
         }
       else
-        AminusSigmaB = AminusSigmaB - sigma * b;
+        AminusSigmaB -= sigma * b;
     }
   else
     {
       Complex *p = AminusSigmaB.fortran_vec ();
 
       for (octave_idx_type i = 0; i < n; i++)
         p[i*(n+1)] -= sigma;
     }
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3245,47 +3245,47 @@ betain (double x, double p, double q, do
   temp = qq - ai;
   if (ns == 0)
     {
       rx = xx;
     }
 
   for ( ; ; )
     {
-      term = term * temp * rx / (pp + ai);
-      value = value + term;
+      term *= temp * rx / (pp + ai);
+      value += term;
       temp = fabs (term);
 
       if (temp <= acu && temp <= acu * value)
         {
-          value = value * exp (pp * gnulib::log (xx)
-                               + (qq - 1.0) * gnulib::log (cx) - beta) / pp;
+          value *= exp (pp * gnulib::log (xx)
+                        + (qq - 1.0) * gnulib::log (cx) - beta) / pp;
 
           if (indx)
             {
               value = 1.0 - value;
             }
           break;
         }
 
-      ai = ai + 1.0;
-      ns = ns - 1;
+      ai += 1.0;
+      ns -= 1;
 
       if (0 <= ns)
         {
           temp = qq - ai;
           if (ns == 0)
             {
               rx = xx;
             }
         }
       else
         {
           temp = psq;
-          psq = psq + 1.0;
+          psq += 1.0;
         }
     }
 
   return value;
 }
 
 //
 //  Inverse of the incomplete Beta function
@@ -3447,17 +3447,17 @@ betaincinv (double y, double p, double q
                 {
                   tx = value - adj;
 
                   if (0.0 <= tx && tx <= 1.0)
                     {
                       break;
                     }
                 }
-              g = g / 3.0;
+              g /= 3.0;
             }
 
           if (prev <= acu)
             {
               if (indx)
                 {
                   value = 1.0 - value;
                 }
@@ -3473,17 +3473,17 @@ betaincinv (double y, double p, double q
               return value;
             }
 
           if (tx != 0.0 && tx != 1.0)
             {
               break;
             }
 
-          g = g / 3.0;
+          g /= 3.0;
         }
 
       if (tx == value)
         {
           break;
         }
 
       value = tx;
