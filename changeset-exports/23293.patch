# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489681648 25200
#      Thu Mar 16 09:27:28 2017 -0700
# Node ID ed3d5186ffcfb2fa70b2bd5f73555c5d13b567dd
# Parent  7a06a1a5a12ba7ed248afb5eaf00216e2f794acc
# Parent  6cbf5c2d4d55e452021c65d2d328301eafe81ab7
maint: merge stable to default.

diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -40,18 +40,19 @@ DEFUN (eig, args, nargout,
 @deftypefnx {} {@var{lambda} =} eig (@var{A}, @var{B})
 @deftypefnx {} {[@var{V}, @var{lambda}] =} eig (@var{A})
 @deftypefnx {} {[@var{V}, @var{lambda}] =} eig (@var{A}, @var{B})
 @deftypefnx {} {[@var{V}, @var{lambda}, @var{W}] =} eig (@var{A})
 @deftypefnx {} {[@var{V}, @var{lambda}, @var{W}] =} eig (@var{A}, @var{B})
 @deftypefnx {} {[@dots{}] =} eig (@var{A}, @var{balanceOption})
 @deftypefnx {} {[@dots{}] =} eig (@var{A}, @var{B}, @var{algorithm})
 @deftypefnx {} {[@dots{}] =} eig (@dots{}, @var{eigvalOption})
-Compute the right eigenvalues(V) and optionally the eigenvectors(lambda) and
-the left eigenvalues(W) of a matrix or a pair of matrices.
+Compute the eigenvalues (@var{lambda}) and optionally the right eigenvectors
+(@var{V}) and the left eigenvectors (@var{W}) of a matrix or a pair of
+matrices.
 
 The flag @var{balanceOption} can be one of:
 
 @table @asis
 @item @qcode{"balance"}
 Preliminary balancing is on. (default)
 
 @item @qcode{"nobalance"}
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -214,25 +214,29 @@ function __datetick__ (varargin)
         ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
       elseif (maxyear - minyear < N)
         sep = __calc_tick_sep__ (minmonth, maxmonth);
         minyear = floor (minyear);
         minmonth = sep * floor (minmonth / sep);
         minmonth = ifelse (minmonth == 0, 1, minmonth);
         maxmonth = sep * ceil (maxmonth / sep);
         rangemonth = (minmonth:sep:maxmonth)';
+        tickdays = round (1 + 28*mod (rangemonth, 1));
         ticks = datenum ([repmat(minyear, size(rangemonth)), ...
-                          rangemonth, ...
-                          ones(size (rangemonth))]);
+                          floor(rangemonth), ...
+                          tickdays]);
       else
         sep = __calc_tick_sep__ (minyear, maxyear);
         minyear = sep * floor (minyear / sep);
         maxyear = sep * ceil (maxyear / sep);
         rangeyear = (minyear:sep:maxyear)';
-        ticks = datenum ([rangeyear, ones(rows(rangeyear),2)]);
+        tickmonth = round (1 + 12*mod (rangeyear, 1));
+        ticks = datenum ([floor(rangeyear), ... 
+                          tickmonth, ...
+                          ones(rows (rangeyear), 1)]);
       endif
     endif
   endif
 
   if (isempty (form))
     r = max (ticks) - min (ticks);
     if (r < 10/60/24)
       ## minutes and seconds
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -154,16 +154,23 @@ function [days, secs] = datenum (year, m
 
   ## Set start of year to March by moving Jan. and Feb. to previous year.
   ## Correct for months > 12 by moving to subsequent years.
   year += ceil ((month-14)/12);
 
   ## Lookup number of days since start of the current year.
   day += monthstart(mod (month-1,12) + 1) + 60;
 
+  ## Treat fractional years, by converting the fraction to days
+  if (any (year != fix (year)))
+    fracyear = year - floor (year);
+    year = floor (year);
+    day += fracyear .* (365 + is_leap_year (year+1));
+  endif
+  
   ## Add number of days to the start of the current year.  Correct
   ## for leap year every 4 years except centuries not divisible by 400.
   day += 365*year + floor (year/4) - floor (year/100) + floor (year/400);
 
   if (do_reshape)
     day = reshape (day, sz_reshape);
   endif
 
@@ -191,20 +198,25 @@ endfunction
 %! t = [2001,5,19,12,21,3.5; 1417,6,12,12,21,3.5];
 %! n = [730990; 517712] + part;
 %! assert (datenum (t), n, 2*eps);
 %! ## Check that vectors can have either orientation
 %! t = t';
 %! n = n';
 %! assert (datenum (t(1,:), t(2,:), t(3,:), t(4,:), t(5,:), t(6,:)), n, 2*eps);
 
+## Test fractional years including leap years
+%!assert (fix (datenum ([2001.999 1 1; 2001.999 2 1])), [731216; 731247])
+%!assert (fix (datenum ([2004.999 1 1; 2004.999 2 1])), [732312; 732343])
+
 ## Test fractional months including leap months
 %!assert (fix (datenum ([2001 1.999 1; 2001 2.999 1])), [730882; 730910])
 %!assert (fix (datenum ([2004 1.999 1; 2004 2.999 1])), [731977; 732006])
 
+
 ## Test mixed vectors and scalars
 %!assert (datenum ([2008;2009],1,1), [datenum(2008,1,1);datenum(2009,1,1)])
 %!assert (datenum (2008, [1;2], 1), [datenum(2008,1,1);datenum(2008,2,1)])
 %!assert (datenum (2008, 1, [1;2]), [datenum(2008,1,1);datenum(2008,1,2)])
 %!assert (datenum ([2008;2009], [1;2], 1), [datenum(2008,1,1);datenum(2009,2,1)])
 %!assert (datenum ([2008;2009], 1, [1;2]), [datenum(2008,1,1);datenum(2009,1,2)])
 %!assert (datenum (2008, [1;2], [1;2]), [datenum(2008,1,1);datenum(2008,2,2)])
 ## And the other orientation
