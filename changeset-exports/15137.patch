# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344197758 14400
#      Sun Aug 05 16:15:58 2012 -0400
# Branch gui
# Node ID 16a6b0a6855d43d5c0fd89773351133217c28521
# Parent  3735a0e783cb30c2cffc2ba884e18f427de965f5
GUI: support for octave arguments and integrate with run-octave.

* src/octave.h (octave_initialize_interpreter, octave_execute_interpreter):
New functions.
(octave_cmdline_argc, octave_cmdline_argv, octave_embedded): New variables.
* src/octave.cc (octave_cmdline_argc, octave_cmdline_argv, octave_embedded):
New variables.
(octave_initialize_interpreter, octave_execute_interpreter): New functions.
(octave_main): Rewrite using them.
* run-octave.in (octave_executable): New variable.
(-gui): New option flag.
* gui/src/octave-adapter/octave-main-thread.cc (octave_main_thread::run):
Use octave_execute_interpreter.
* gui/src/octave-gui.cc (dissociate_terminal): New function.
(main): Use it. Also use octave_initialize_interpreter.

diff --git a/gui/src/octave-adapter/octave-main-thread.cc b/gui/src/octave-adapter/octave-main-thread.cc
--- a/gui/src/octave-adapter/octave-main-thread.cc
+++ b/gui/src/octave-adapter/octave-main-thread.cc
@@ -22,13 +22,11 @@
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
   setlocale (LC_ALL, "en_US.UTF-8");
-  int argc = 1;
-  const char *argv[] = { "octave" };
   emit ready ();
-  octave_main (argc, const_cast<char**>(argv), 0);
+  octave_execute_interpreter ();
 }
diff --git a/gui/src/octave-gui.cc b/gui/src/octave-gui.cc
--- a/gui/src/octave-gui.cc
+++ b/gui/src/octave-gui.cc
@@ -17,46 +17,53 @@
 
 #include <QtGui/QApplication>
 #include <QTranslator>
 #include <QSettings>
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "main-window.h"
 
-int
-main (int argc, char *argv[])
+// Dissociate from the controlling terminal, if any.
+
+static void
+dissociate_terminal (void)
 {
-  /* dissociate from the controlling terminal, if any */
+#if ! defined (Q_OS_WIN32) || defined (Q_OS_CYGWIN)
+  pid_t pid = fork ();
 
-  pid_t pid = fork ();
   if (pid < 0)
     {
-      //fprintf (stderr, "fork failed\n");
-      return 1;
+      std::cerr << "fork failed!" << std::endl;;
+      exit (1);
     }
   else if (pid == 0)
     {
-      /* child */
-      //fprintf (stderr, "in child, calling setsid ()\n");
+      // Child.
 
       if (setsid () < 0)
         {
-          //fprintf (stderr, "setsid error\n");
-          return 1;
+          std::cerr << "setsid error" << std::endl;
+          exit (1);
         }
     }
   else
-    {
-      /* parent */
-      //fprintf (stderr, "in parent, exiting\n");
-      exit (0);
-    }
+    exit (0);
+#endif
+}
+
+int
+main (int argc, char *argv[])
+{
+  octave_initialize_interpreter (argc, argv, 0);
+
+  dissociate_terminal ();
 
   QApplication application (argc, argv);
+
   while (true)
     {
       if (resource_manager::instance ()->is_first_run ())
         {
           welcome_wizard welcomeWizard;
           welcomeWizard.exec ();
           resource_manager::instance ()->reload_settings ();
         }
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -37,16 +37,18 @@ d3="$builddir/src"
 d1_list=`$FIND "$d1" -type d -a ! \( \( -name private -o -name '@*' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
 d2_list=`$FIND "$d2" -type d -a ! \( \( -name private -o -name '@*' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
 d3_list=`$FIND "$d3" -type d -a ! \( \( -name private -o -name '@*' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
 
 d1_path=`echo "$d1_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 d2_path=`echo "$d2_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 d3_path=`echo "$d3_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
 
+octave_executable="$builddir/src/octave"
+
 LOADPATH="$d1_path:$d2_path:$d3_path"
 IMAGEPATH="$top_srcdir/scripts/image"
 DOCFILE="$builddir/doc/interpreter/doc-cache"
 TEXIMACROSFILE="$top_srcdir/doc/interpreter/macros.texi"
 INFOFILE="$top_srcdir/doc/interpreter/octave.info"
 
 ## Checking for string equality below with prepended x's in order to
 ## handle problems with empty strings.
@@ -59,16 +61,19 @@ if [ $# -gt 0 ]; then
     driver="gdb --annotate=3 --args"
     shift
   elif [ "x$1" = "x-valgrind" ]; then
     driver="valgrind --tool=memcheck"
     shift
   elif [ "x$1" = "x-strace" ]; then
     driver="strace -o octave.trace"
     shift
+  elif [ "x$1" = "x-gui" ]; then
+    octave_executable="$builddir/gui/src/octave-gui"
+    shift
   fi
 fi
 
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
   exec $builddir/libtool --mode=execute $driver \
-    "$builddir/src/octave" --no-init-path --path="$LOADPATH" \
+    "$octave_executable" --no-init-path --path="$LOADPATH" \
     --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" \
     --texi-macros-file="$TEXIMACROSFILE" --info-file="$INFOFILE" "$@"
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -76,16 +76,20 @@ along with Octave; see the file COPYING.
 // Kluge.
 extern "C" F77_RET_T
 F77_FUNC (xerbla, XERBLA) (F77_CONST_CHAR_ARG_DECL,
                            const octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL);
 
 extern void install_builtins (void);
 
+int octave_cmdline_argc;
+char **octave_cmdline_argv;
+int octave_embedded;
+
 // The command-line options.
 static string_vector octave_argv;
 
 // The name used to invoke Octave.
 static std::string
 octave_program_invocation_name;
 
 // The last component of octave_program_invocation_name.
@@ -628,16 +632,28 @@ maximum_braindamage (void)
   disable_warning ("Octave:possible-matlab-short-circuit-operator");
 }
 
 // You guessed it.
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
+  octave_initialize_interpreter (argc, argv, embedded);
+
+  return octave_execute_interpreter ();
+}
+
+void
+octave_initialize_interpreter (int argc, char **argv, int embedded)
+{
+  octave_cmdline_argc = argc;
+  octave_cmdline_argv = argv;
+  octave_embedded = embedded;
+
   octave_env::set_program_name (argv[0]);
 
   octave_program_invocation_name = octave_env::get_program_invocation_name ();
   octave_program_name = octave_env::get_program_name ();
 
   octave_thread::init ();
 
   // The order of these calls is important.  The call to
@@ -857,96 +873,100 @@ octave_main (int argc, char **argv, int 
     command_editor::force_default_editor ();
 
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
 
   if (line_editing)
     initialize_command_input ();
 
-  if (! inhibit_startup_message)
-    std::cout << OCTAVE_STARTUP_MESSAGE "\n" << std::endl;
-
   if (traditional)
     maximum_braindamage ();
 
   octave_interpreter_ready = true;
 
   initialize_version_info ();
 
   // Make all command-line arguments available to startup files,
   // including PKG_ADD files.
 
   intern_argv (argc, argv);
 
   load_path::initialize (set_initial_path);
 
   initialize_history (read_history_file);
+}
+
+int
+octave_execute_interpreter (void)
+{
+  if (! inhibit_startup_message)
+    std::cout << OCTAVE_STARTUP_MESSAGE "\n" << std::endl;
 
   execute_startup_files ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int last_arg_idx = optind;
 
-  int remaining_args = argc - last_arg_idx;
+  int remaining_args = octave_cmdline_argc - last_arg_idx;
 
   if (! code_to_eval.empty ())
     {
       int parse_status = execute_eval_option_code (code_to_eval);
 
       if (! (persist || remaining_args > 0))
         clean_up_and_exit (parse_status || error_state ? 1 : 0);
     }
 
   if (remaining_args > 0)
     {
       // If we are running an executable script (#! /bin/octave) then
       // we should only see the args passed to the script.
 
-      intern_argv (remaining_args, argv+last_arg_idx);
+      intern_argv (remaining_args, octave_cmdline_argv+last_arg_idx);
 
-      execute_command_line_file (argv[last_arg_idx]);
+      execute_command_line_file (octave_cmdline_argv[last_arg_idx]);
 
       if (! persist)
         {
           quitting_gracefully = true;
 
           clean_up_and_exit (error_state ? 1 : 0);
         }
     }
 
   // Avoid counting commands executed from startup files.
 
   command_editor::reset_current_command_number (1);
 
   // Now argv should have the full set of args.
-  intern_argv (argc, argv);
+  intern_argv (octave_cmdline_argc, octave_cmdline_argv);
 
-  if (! embedded)
+  if (! octave_embedded)
     switch_to_buffer (create_buffer (get_input_from_stdin ()));
 
   // Force input to be echoed if not really interactive, but the user
   // has forced interactive behavior.
 
   if (! interactive && forced_interactive)
     {
       command_editor::blink_matching_paren (false);
 
       // FIXME -- is this the right thing to do?
 
       bind_internal_variable ("echo_executing_commands", ECHO_CMD_LINE);
     }
 
-  if (embedded)
+  if (octave_embedded)
     {
       // FIXME -- do we need to do any cleanup here before
       // returning?  If we don't, what will happen to Octave functions
       // that have been registered to execute with atexit, for example?
 
       return 1;
     }
 
diff --git a/src/octave.h b/src/octave.h
--- a/src/octave.h
+++ b/src/octave.h
@@ -24,13 +24,22 @@ along with Octave; see the file COPYING.
 #define octave_octave_h 1
 
 #ifdef  __cplusplus
 extern "C" {
 #endif
 
 extern OCTINTERP_API int octave_main (int argc, char **argv, int embedded);
 
+extern OCTINTERP_API void
+octave_initialize_interpreter (int argc, char **argv, int embedded);
+
+extern OCTINTERP_API int octave_execute_interpreter (void);
+
+extern OCTINTERP_API int octave_cmdline_argc;
+extern OCTINTERP_API char **octave_cmdline_argv;
+extern OCTINTERP_API int octave_embedded;
+
 #ifdef  __cplusplus
 }
 #endif
 
 #endif
