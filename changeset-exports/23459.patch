# HG changeset patch
# User Rik <rik@octave.org>
# Date 1493425213 25200
#      Fri Apr 28 17:20:13 2017 -0700
# Node ID ddcbf10c8c394d382935bad6da9f9ca1a2badad8
# Parent  0f4ed33886dec73fbe46b3e455c5a033f166817c
maint: Use C++11 nullptr rather than 0 or NULL for remaining instances in code.

* sysdep.cc, __osmesa_print__.cc, audioread.cc,
ov-java.cc: Use C++11 nullptr rather than 0 or NULL.

diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -180,17 +180,17 @@ void
 set_application_id (void)
 {
 #if defined (__MINGW32__) || defined (_MSC_VER)
 
   typedef HRESULT (WINAPI *SETCURRENTAPPID)(PCWSTR AppID);
 
   HMODULE hShell = LoadLibrary ("shell32.dll");
 
-  if (hShell != NULL)
+  if (hShell)
     {
       SETCURRENTAPPID pfnSetCurrentProcessExplicitAppUserModelID =
         reinterpret_cast<SETCURRENTAPPID> (GetProcAddress (hShell,
                                            "SetCurrentProcessExplicitAppUserModelID"));
 
       if (pfnSetCurrentProcessExplicitAppUserModelID)
         pfnSetCurrentProcessExplicitAppUserModelID (L"gnu.octave." VERSION);
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -118,17 +118,17 @@ instead.
 
   bool internal = true;
   Matrix bb = fp.get_boundingbox (internal);
 
   GLsizei Width = static_cast<GLsizei> (bb(2));
   GLsizei Height = static_cast<GLsizei> (bb(3));
 
   // Create an RGBA-mode context, specify Z=16, stencil=0, accum=0 sizes
-  OSMesaContext ctx = OSMesaCreateContextExt (OSMESA_RGBA, 16, 0, 0, NULL);
+  OSMesaContext ctx = OSMesaCreateContextExt (OSMESA_RGBA, 16, 0, 0, nullptr);
   if (! ctx)
     error ("__osmesa_print__: OSMesaCreateContext failed!\n");
 
   // Allocate the image buffer
   OCTAVE_LOCAL_BUFFER (GLubyte, buffer, 4 * Width * Height);
 
   // Bind the buffer to the context and make it current
   if (! OSMesaMakeCurrent (ctx, buffer, GL_UNSIGNED_BYTE, Width, Height))
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -518,23 +518,23 @@ Return information about an audio file s
 }
 
 #if defined (HAVE_SNDFILE)
 
 static void
 audio_sub_formats (int format)
 {
   int count;
-  sf_command (NULL, SFC_GET_FORMAT_SUBTYPE_COUNT, &count, sizeof (int));
+  sf_command (nullptr, SFC_GET_FORMAT_SUBTYPE_COUNT, &count, sizeof (int));
 
   for (int i = 0; i < count; i++)
     {
       SF_FORMAT_INFO info;
       info.format = i;
-      sf_command (NULL, SFC_GET_FORMAT_SUBTYPE, &info, sizeof (info));
+      sf_command (nullptr, SFC_GET_FORMAT_SUBTYPE, &info, sizeof (info));
 
       SF_INFO sfinfo;
       memset (&sfinfo, 0, sizeof (sfinfo));
       sfinfo.channels = 1;
       sfinfo.format = (format & SF_FORMAT_TYPEMASK) | info.format;
 
       if (sf_format_check (&sfinfo))
         octave_stdout << "  " << info.name << std::endl;
@@ -561,23 +561,23 @@ with names that start with @var{format}.
   std::string search = "";
   if (args.length () > 0)
     {
       search = args(0).string_value ();
       std::transform (search.begin (), search.end (), search.begin (), tolower);
     }
 
   int count;
-  sf_command (NULL, SFC_GET_FORMAT_MAJOR_COUNT, &count, sizeof (int));
+  sf_command (nullptr, SFC_GET_FORMAT_MAJOR_COUNT, &count, sizeof (int));
 
   for (int i = 0; i < count; i++)
     {
       SF_FORMAT_INFO info;
       info.format = i;
-      sf_command (NULL, SFC_GET_FORMAT_MAJOR, &info, sizeof (info));
+      sf_command (nullptr, SFC_GET_FORMAT_MAJOR, &info, sizeof (info));
       bool match = true;
 
       if (! search.empty ())
         {
           std::string nm = info.name;
           std::transform (nm.begin (), nm.end (), nm.begin (), tolower);
           match = nm.compare (0, search.length (), search) == 0;
         }
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1504,17 +1504,17 @@ unbox (JNIEnv *jni_env, const octave_val
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.is_cellstr ())
     {
       const Array<std::string> str_arr = val.cellstr_value ();
       const octave_idx_type n = str_arr.numel ();
 
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
-      jobjectArray array = jni_env->NewObjectArray (n, scls, NULL);
+      jobjectArray array = jni_env->NewObjectArray (n, scls, nullptr);
 
       for (octave_idx_type i = 0; i < n; i++)
         {
           jstring_ref jstr (jni_env, jni_env->NewStringUTF
                             (str_arr(i).c_str ()));
           jni_env->SetObjectArrayElement (array, i, jstr);
         }
 
