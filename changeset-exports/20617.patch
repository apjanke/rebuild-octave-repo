# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444710512 25200
#      Mon Oct 12 21:28:32 2015 -0700
# Node ID a3b9ee5c040aecff5cd9930a9b1923c6d9b0c943
# Parent  e54ecb33727e03de2ac4cf6b34ecd9749193a990
Replace bsxfun with broadcasting for performance with complex inputs (bug #38628).

cumtrapz.m, quadgk.m, trapz.m, center.m, zscore.m: Replace bsxfun with
broadcasting for performance where inputs might be complex.

diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -95,17 +95,17 @@ function z = cumtrapz (x, y, dim)
     if (isvector (x) && ! isvector (y))
       if (length (x) != sz(dim))
         error ("cumtrapz: length of X and length of Y along DIM must match");
       endif
       ## Reshape vector to point along dimension DIM
       shape = ones (nd, 1);
       shape(dim) = sz(dim);
       x = reshape (x, shape);
-      z = 0.5 * cumsum (bsxfun (@times, diff (x), y(idx1{:}) + y(idx2{:})), dim);
+      z = 0.5 * cumsum (diff (x) .* (y(idx1{:}) + y(idx2{:})), dim);
     else
       if (! size_equal (x, y))
         error ("cumtrapz: X and Y must have same shape");
       endif
       z = 0.5 * cumsum (diff (x, 1, dim) .* (y(idx1{:}) + y(idx2{:})), dim);
     endif
   endif
 
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -415,17 +415,17 @@ function [q, err] = __quadgk_eval__ (f, 
   persistent weights7  = ...
       diag ([0.1294849661688697e+00,  0.2797053914892767e+00, ...
              0.3818300505051889e+00,  0.4179591836734694e+00, ...
              0.3818300505051889e+00,  0.2797053914892767e+00, ...
              0.1294849661688697e+00]);
 
   halfwidth = diff (subs, [], 2) ./ 2;
   center = sum (subs, 2) ./ 2;;
-  x = bsxfun (@plus, halfwidth * abscissa, center);
+  x = (halfwidth * abscissa) + center;
   y = reshape (f (x(:)), size (x));
 
   ## This is faster than using bsxfun as the * operator can use a
   ## single BLAS call, rather than rows(sub) calls to the @times
   ## function.
   q = sum (y * weights15, 2) .* halfwidth;
   err = abs (sum (y(:,2:2:end) * weights7, 2) .* halfwidth - q);
 endfunction
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -109,17 +109,17 @@ function z = trapz (x, y, dim)
     if (isvector (x) && ! isvector (y))
       if (length (x) != sz(dim))
         error ("trapz: length of X and length of Y along DIM must match");
       endif
       ## Reshape vector to point along dimension DIM
       shape = ones (nd, 1);
       shape(dim) = sz(dim);
       x = reshape (x, shape);
-      z = 0.5 * sum (bsxfun (@times, diff (x), y(idx1{:}) + y(idx2{:})), dim);
+      z = 0.5 * sum (diff (x) .* (y(idx1{:}) + y(idx2{:})), dim);
     else
       if (! size_equal (x, y))
         error ("trapz: X and Y must have same shape");
       endif
       z = 0.5 * sum (diff (x, 1, dim) .* (y(idx1{:}) + y(idx2{:})), dim);
     endif
   endif
 endfunction
diff --git a/scripts/statistics/base/center.m b/scripts/statistics/base/center.m
--- a/scripts/statistics/base/center.m
+++ b/scripts/statistics/base/center.m
@@ -65,17 +65,17 @@ function retval = center (x, dim)
     endif
   endif
 
   n = sz(dim);
 
   if (n == 0)
     retval = x;
   else
-    retval = bsxfun (@minus, x, mean (x, dim));
+    retval = x - mean (x, dim);
   endif
 
 endfunction
 
 
 %!assert (center ([1,2,3]), [-1,0,1])
 %!assert (center (single ([1,2,3])), single ([-1,0,1]))
 %!assert (center (int8 ([1,2,3])), [-1,0,1])
diff --git a/scripts/statistics/base/zscore.m b/scripts/statistics/base/zscore.m
--- a/scripts/statistics/base/zscore.m
+++ b/scripts/statistics/base/zscore.m
@@ -81,18 +81,17 @@ function [z, mu, sigma] = zscore (x, opt
     if (isinteger (x))
       x = double (x);
     endif
 
     mu = mean (x, dim);
     sigma = std (x, opt, dim);
     s = sigma;
     s(s==0) = 1;
-    ## FIXME: Use normal broadcasting once we can disable that warning
-    z = bsxfun (@rdivide, bsxfun (@minus, x, mu), s);
+    z = (x - mu) ./ s;
   endif
 
 endfunction
 
 
 %!assert (zscore ([1,2,3]), [-1,0,1])
 %!assert (zscore (single ([1,2,3])), single ([-1,0,1]))
 %!assert (zscore (int8 ([1,2,3])), [-1,0,1])
