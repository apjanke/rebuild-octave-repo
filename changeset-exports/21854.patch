# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465604116 25200
#      Fri Jun 10 17:15:16 2016 -0700
# Node ID ce0f87bd05095f28aae84991cb5c4f0da0f5941f
# Parent  09583900661b5b002e93eaac5dcb63a533db4d5e
axes.m: Restack legend along with the specified axes on top of Z-stack (bug #48141).

* axes.m (restack_axes): Look for a legend associated with the axes that should
be put on top of the list of figure children.  If found, move the legend axis
object to be on top of the axis which in turn is on top of all other figure
children.

diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -46,36 +46,36 @@ function h = axes (varargin)
     idx = find (strcmpi (varargin(1:2:end), "parent"), 1, "first");
     if (! isempty (idx) && length (varargin) >= 2*idx)
       cf = varargin{2*idx};
       varargin([2*idx-1, 2*idx]) = [];
     else
       cf = gcf ();
     endif
 
-    ## If there is an annotation axes currently on top of the figure
-    ## children stack, we will put it back on top
+    ## If there is an annotation axes currently on top of the
+    ## figure children stack, then we will put it back on top
+    ## FIXME: Should all annotation axes always be put ahead of regular axes?
     do_restack = false;
     ch = allchild (cf);
     hax = ch(isaxes (ch));
-    idx = find (strcmp (get (hax, "tag"), "scribeoverlay"));
-    if (idx == 1)
-      hover = hax(idx);
+    if (! isempty (hax) && strcmp (get (hax(1), "tag"), "scribeoverlay"))
+      h_annotation = hax(1);
       do_restack = true;
     endif
 
     ## Create an axes object.
     htmp = __go_axes__ (cf, varargin{:});
     if (__is_handle_visible__ (htmp))
       set (ancestor (cf, "figure"), "currentaxes", htmp);
     endif
 
     ## Restack if necessary
     if (do_restack)
-      restack_axes (hover, cf);
+      restack_axes (h_annotation, cf);
     endif
   else
     ## ARG is axes handle.
     htmp = varargin{1};
     if (isscalar (htmp) && isaxes (htmp))
       cf = ancestor (htmp, "figure");
       if (__is_handle_visible__ (htmp))
         set (0, "currentfigure", cf);
@@ -93,20 +93,65 @@ function h = axes (varargin)
     h = htmp;
   endif
 
 endfunction
 
 function restack_axes (h, cf)
 
   show = get (0, "showhiddenhandles");
-  set (0, "showhiddenhandles", "on");
   unwind_protect
+    set (0, "showhiddenhandles", "on");
     ch = get (cf, "children");
-    hax = ch(isaxes (ch));
-    ch(isaxes (ch)) = [h; hax(hax != h)];
+    axidx = isaxes (ch);
+    hax = ch(axidx);
+    ## Stack the legend associated with this axes on top of the axes itself
+    hleg = hax(strcmp (get (hax, "tag"), "legend"));
+    if (any (hleg)) 
+      ## Get field "handle" from structure stored in "userdata" property
+      if (isscalar (hleg))
+        hlegaxes = get (hleg, "userdata").handle;
+      else
+        hlegaxes = [[get(hleg, "userdata"){:}].handle](:);
+      endif
+      hleg = hleg(hlegaxes == h);
+      h = [hleg; h];
+    endif
+    ch(axidx) = [h; hax(! ismember (hax, h))];
     set (cf, "children", ch);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", show);
   end_unwind_protect
 
 endfunction
 
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax1 = axes ();
+%!   plot (1:10, "b");
+%!   hleg1 = legend ("hax1");
+%!   hax2 = axes ();
+%!   plot (10:-1:1, "r");
+%!   hleg2 = legend ("hax2");
+%!
+%!   ch = allchild (hf); 
+%!   hax = ch(isaxes (ch)); 
+%!   assert (find (hax == hax2) < find (hax == hax1));
+%!   assert (find (hax == hleg1) < find (hax == hax1));
+%!   assert (find (hax == hleg2) < find (hax == hax2));
+%!
+%!   axes (hax1);
+%!   ch = allchild (hf); 
+%!   hax = ch(isaxes (ch)); 
+%!   assert (find (hax == hax2) > find (hax == hax1));
+%!   assert (find (hax == hleg1) < find (hax == hax1));
+%!
+%!   axes (hax2);
+%!   ch = allchild (hf); 
+%!   hax = ch(isaxes (ch)); 
+%!   assert (find (hax == hax2) < find (hax == hax1));
+%!   assert (find (hax == hleg2) < find (hax == hax2));
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
