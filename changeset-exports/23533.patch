# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495732397 14400
#      Thu May 25 13:13:17 2017 -0400
# Node ID 8edbc923a7dc6f5fdc533e584ad7229db937bef7
# Parent  084245f9bd03d8f8e67515636f0746a8fa4c2eac
begin refactoring use of interpreter/evaluator in classdef objects

* ov-classdef.h, ov-classdef.cc (install_classdef): Pass reference to
interpreter instead of pointer to evaluator.  Change use.
(is_method_executing): Use __get_evaluator__.
(make_class, make_meta_class): Don't pass pointer to evaluator.
Change all uses.
(cdef_class::m_evaluator, cdef_class::cdef_class_rep::m_evaluator):
Delete.
(compute_attribute_value): Pass reference to evaluator, instead of
pointer.  Change all uses.
(cdef_class::make_meta_class): Likewise.
(package_getAllPackages): Pass reference to interpreter as first arg.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -420,17 +420,17 @@ namespace octave
     initialize_file_io ();
 
     install_types ();
 
     install_ops ();
 
     install_builtins ();
 
-    install_classdef (m_evaluator);
+    install_classdef (*this);
 
     bool line_editing = false;
     bool traditional = false;
 
     if (m_app_context)
       {
         // Embedded interpeters don't execute command line options or
         const cmdline_options& options = m_app_context->options ();
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -632,20 +632,20 @@ handle_delete (const octave_value_list& 
   octave_value_list retval;
 
   // FIXME: implement this
 
   return retval;
 }
 
 static cdef_class
-make_class (octave::tree_evaluator *tw, const std::string& name,
+make_class (const std::string& name,
             const std::list<cdef_class>& super_list = std::list<cdef_class> ())
 {
-  cdef_class cls (tw, name, super_list);
+  cdef_class cls (name, super_list);
 
   cls.set_class (cdef_class::meta_class ());
   cls.put ("Abstract", false);
   cls.put ("ConstructOnLoad", false);
   cls.put ("ContainingPackage", Matrix ());
   cls.put ("Description", "");
   cls.put ("DetailedDescription", "");
   cls.put ("Events", Cell ());
@@ -687,27 +687,25 @@ make_class (octave::tree_evaluator *tw, 
 
   if (! name.empty ())
     cdef_manager::register_class (cls);
 
   return cls;
 }
 
 static cdef_class
-make_class (octave::tree_evaluator *tw, const std::string& name,
-            const cdef_class& super)
+make_class (const std::string& name, const cdef_class& super)
 {
-  return make_class (tw, name, std::list<cdef_class> (1, super));
+  return make_class (name, std::list<cdef_class> (1, super));
 }
 
 static cdef_class
-make_meta_class (octave::tree_evaluator *tw, const std::string& name,
-                 const cdef_class& super)
+make_meta_class (const std::string& name, const cdef_class& super)
 {
-  cdef_class cls = make_class (tw, name, super);
+  cdef_class cls = make_class (name, super);
 
   cls.put ("Sealed", true);
   cls.mark_as_meta_class ();
 
   return cls;
 }
 
 static cdef_property
@@ -786,16 +784,26 @@ make_method (const cdef_class& cls, cons
              octave_builtin::fcn ff, const std::string& m_access = "public",
              bool is_static = false)
 {
   octave_value fcn (new octave_builtin (ff, name));
 
   return make_method (cls, name, fcn, m_access, is_static);
 }
 
+inline cdef_method
+make_method (const cdef_class& cls, const std::string& name,
+             octave_builtin::meth mm, const std::string& m_access = "public",
+             bool is_static = false)
+{
+  octave_value fcn (new octave_builtin (mm, name));
+
+  return make_method (cls, name, fcn, m_access, is_static);
+}
+
 static cdef_package
 make_package (const std::string& nm,
               const std::string& parent = "")
 {
   cdef_package pack (nm);
 
   pack.set_class (cdef_class::meta_package ());
   if (parent.empty ())
@@ -1733,20 +1741,19 @@ handle_cdef_object::~handle_cdef_object 
 value_cdef_object::~value_cdef_object (void)
 {
 #if DEBUG_TRACE
   std::cerr << "deleting " << get_class ().get_name ()
             << " object (value)" << std::endl;
 #endif
 }
 
-cdef_class::cdef_class_rep::cdef_class_rep (octave::tree_evaluator *tw,
-                                            const std::list<cdef_class>& superclasses)
-  : cdef_meta_object_rep (), m_evaluator (tw), member_count (0),
-    handle_class (false), object_count (0), meta (false)
+cdef_class::cdef_class_rep::cdef_class_rep (const std::list<cdef_class>& superclasses)
+  : cdef_meta_object_rep (), member_count (0), handle_class (false),
+    object_count (0), meta (false)
 {
   put ("SuperClasses", to_ov (superclasses));
   implicit_ctor_list = superclasses;
 }
 
 cdef_method
 cdef_class::cdef_class_rep::find_method (const std::string& nm, bool local)
 {
@@ -2391,38 +2398,35 @@ cdef_class::cdef_class_rep::construct_ob
 
       cdef_class this_cls = wrap ();
 
       static cdef_object empty_class;
 
       if (this_cls == cdef_class::meta_class ())
         {
           if (! empty_class.ok ())
-            empty_class = make_class (m_evaluator, "",
-                                      std::list<cdef_class> ());
+            empty_class = make_class ("", std::list<cdef_class> ());
           obj = empty_class;
         }
       else if (this_cls == cdef_class::meta_property ())
         {
           static cdef_property empty_property;
 
           if (! empty_class.ok ())
-            empty_class = make_class (m_evaluator, "",
-                                      std::list<cdef_class> ());
+            empty_class = make_class ("", std::list<cdef_class> ());
           if (! empty_property.ok ())
             empty_property = make_property (empty_class, "");
           obj = empty_property;
         }
       else if (this_cls == cdef_class::meta_method ())
         {
           static cdef_method empty_method;
 
           if (! empty_class.ok ())
-            empty_class = make_class (m_evaluator, "",
-                                      std::list<cdef_class> ());
+            empty_class = make_class ("", std::list<cdef_class> ());
           if (! empty_method.ok ())
             empty_method = make_method (empty_class, "", octave_value ());
           obj = empty_method;
         }
       else if (this_cls == cdef_class::meta_package ())
         {
           static cdef_package empty_package;
 
@@ -2449,17 +2453,17 @@ cdef_class::cdef_class_rep::construct_ob
 
       return obj;
     }
 
   return cdef_object ();
 }
 
 static octave_value
-compute_attribute_value (octave::tree_evaluator *tw,
+compute_attribute_value (octave::tree_evaluator& tw,
                          octave::tree_classdef_attribute *t)
 {
   octave::tree_expression *expr = t->expression ();
 
   if (expr)
     {
       if (expr->is_identifier ())
         {
@@ -2468,17 +2472,17 @@ compute_attribute_value (octave::tree_ev
           if (s == "public")
             return std::string ("public");
           else if (s == "protected")
             return std::string ("protected");
           else if (s == "private")
             return std::string ("private");
         }
 
-      return tw->evaluate (expr);
+      return tw.evaluate (expr);
     }
   else
     return octave_value (true);
 }
 
 template <typename T>
 static std::string
 attribute_value_to_string (T *t, octave_value v)
@@ -2487,17 +2491,17 @@ attribute_value_to_string (T *t, octave_
     return v.string_value ();
   else if (t->expression ())
     return t->expression ()->original_text ();
   else
     return std::string ("true");
 }
 
 cdef_class
-cdef_class::make_meta_class (octave::tree_evaluator *tw,
+cdef_class::make_meta_class (octave::interpreter& interp,
                              octave::tree_classdef *t, bool is_at_folder)
 {
   cdef_class retval;
   std::string class_name, full_class_name;
 
   // Class creation
 
   class_name = full_class_name = t->ident ()->name ();
@@ -2525,30 +2529,32 @@ cdef_class::make_meta_class (octave::tre
           if (sclass.get ("Sealed").bool_value ())
             error ("`%s' cannot inherit from `%s', because it is sealed",
                    full_class_name.c_str (), sclass_name.c_str ());
 
           slist.push_back (sclass);
         }
     }
 
-  retval = ::make_class (tw, full_class_name, slist);
+  retval = ::make_class (full_class_name, slist);
 
   // Package owning this class
 
   if (! t->package_name ().empty ())
     {
       cdef_package pack = cdef_manager::find_package (t->package_name ());
 
       if (pack.ok ())
         retval.put ("ContainingPackage", to_ov (pack));
     }
 
   // Class attributes
 
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
   if (t->attribute_list ())
     {
       for (const auto& attr : (*t->attribute_list ()))
         {
           std::string aname = attr->ident ()->name ();
           octave_value avalue = compute_attribute_value (tw, attr);
 
 #if DEBUG_TRACE
@@ -2569,18 +2575,17 @@ cdef_class::make_meta_class (octave::tre
 
       std::map<std::string, octave_value> get_methods;
       std::map<std::string, octave_value> set_methods;
 
       // Method blocks
 
       std::list<octave::tree_classdef_methods_block *> mb_list = b->methods_list ();
 
-      octave::load_path& lp
-        = octave::__get_load_path__ ("cdef_class::make_meta_class");
+      octave::load_path& lp = interp.get_load_path ();
 
       for (auto& mb_p : mb_list)
         {
           std::map<std::string, octave_value> amap;
 
 #if DEBUG_TRACE
           std::cerr << "method block" << std::endl;
 #endif
@@ -2728,17 +2733,17 @@ cdef_class::make_meta_class (octave::tre
 #if DEBUG_TRACE
                   std::cerr << "property: " << prop_p->ident ()->name ()
                             << std::endl;
 #endif
 
                   octave::tree_expression *expr = prop_p->expression ();
                   if (expr)
                     {
-                      octave_value pvalue = tw->evaluate (expr);
+                      octave_value pvalue = tw.evaluate (expr);
 
 #if DEBUG_TRACE
                       std::cerr << "property default: "
                                 << attribute_value_to_string (*pit, pvalue)
                                 << std::endl;
 #endif
 
                       prop.put ("DefaultValue", pvalue);
@@ -3129,21 +3134,22 @@ package_get_packages (const octave_value
 
       retval(0) = pack.get_packages ();
     }
 
   return retval;
 }
 
 static octave_value_list
-package_getAllPackages (const octave_value_list& /* args */, int /* nargout */)
+package_getAllPackages (octave::interpreter& interp,
+                        const octave_value_list& /* args */, int /* nargout */)
 {
   std::map<std::string, cdef_package> toplevel_packages;
 
-  octave::load_path& lp = octave::__get_load_path__ ("package_getAllPackages");
+  octave::load_path& lp = interp.get_load_path ();
 
   std::list<std::string> names = lp.get_all_package_names ();
 
   toplevel_packages["meta"] = cdef_manager::find_package ("meta", false,
                                                           false);
 
   for (const auto& nm : names)
     toplevel_packages[nm] = cdef_manager::find_package (nm, false, true);
@@ -3299,33 +3305,48 @@ cdef_package::cdef_package_rep::meta_rel
 cdef_class cdef_class::_meta_class = cdef_class ();
 cdef_class cdef_class::_meta_property = cdef_class ();
 cdef_class cdef_class::_meta_method = cdef_class ();
 cdef_class cdef_class::_meta_package = cdef_class ();
 
 cdef_package cdef_package::_meta = cdef_package ();
 
 void
-install_classdef (octave::tree_evaluator *tw)
+install_classdef (octave::interpreter& /* interp */)
 {
   octave_classdef::register_type ();
 
   // bootstrap
-  cdef_class handle = make_class (tw, "handle");
-  cdef_class meta_class = cdef_class::_meta_class = make_meta_class (tw, "meta.class", handle);
+  cdef_class handle = make_class ("handle");
+
+  cdef_class meta_class
+    = cdef_class::_meta_class
+    = make_meta_class ("meta.class", handle);
+
   handle.set_class (meta_class);
   meta_class.set_class (meta_class);
 
   // meta classes
-  cdef_class meta_property = cdef_class::_meta_property = make_meta_class (tw, "meta.property", handle);
-  cdef_class meta_method = cdef_class::_meta_method = make_meta_class (tw, "meta.method", handle);
-  cdef_class meta_package = cdef_class::_meta_package = make_meta_class (tw, "meta.package", handle);
-
-  cdef_class meta_event = make_meta_class (tw, "meta.event", handle);
-  cdef_class meta_dynproperty = make_meta_class (tw, "meta.dynamicproperty", handle);
+  cdef_class meta_property
+    = cdef_class::_meta_property
+    = make_meta_class ("meta.property", handle);
+
+  cdef_class meta_method
+    = cdef_class::_meta_method
+    = make_meta_class ("meta.method", handle);
+
+  cdef_class meta_package
+    = cdef_class::_meta_package
+    = make_meta_class ("meta.package", handle);
+
+  cdef_class meta_event
+    = make_meta_class ("meta.event", handle);
+
+  cdef_class meta_dynproperty
+    = make_meta_class ("meta.dynamicproperty", handle);
 
   // meta.class properties
   meta_class.install_property (make_attribute (meta_class, "Abstract"));
   meta_class.install_property (make_attribute (meta_class, "ConstructOnLoad"));
   meta_class.install_property (make_property  (meta_class, "ContainingPackage"));
   meta_class.install_property (make_property  (meta_class, "Description"));
   meta_class.install_property (make_property  (meta_class, "DetailedDescription"));
   meta_class.install_property (make_property  (meta_class, "Events"));
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -37,18 +37,18 @@ along with Octave; see the file COPYING.
 class cdef_object;
 class cdef_class;
 class cdef_property;
 class cdef_method;
 class cdef_package;
 
 namespace octave
 {
+  class interpreter;
   class tree_classdef;
-  class tree_evaluator;
 }
 
 // This is mainly a boostrap class to declare the expected interface.
 // The actual base class is cdef_class_base, which is declared after
 // cdef_object, such that it can contain cdef_object objects.
 class
 cdef_object_rep
 {
@@ -337,21 +337,19 @@ protected:
     register_object ();
   }
 
 private:
   void register_object (void);
 
   void unregister_object (void);
 
-private:
   // The class of the object
   cdef_object klass;
 
-private:
   // No assignment!
   cdef_object_base& operator = (const cdef_object_base&);
 };
 
 class
 cdef_object_array : public cdef_object_base
 {
 public:
@@ -378,17 +376,16 @@ public:
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
             const octave_value& rhs);
 
 private:
   Array<cdef_object> array;
 
-private:
   void fill_empty_values (void) { fill_empty_values (array); }
 
   void fill_empty_values (Array<cdef_object>& arr);
 
   // Private copying!
   cdef_object_array (const cdef_object_array& obj)
     : cdef_object_base (obj), array (obj.array) { }
 
@@ -612,22 +609,21 @@ cdef_class : public cdef_meta_object
 {
 private:
 
   class
   cdef_class_rep : public cdef_meta_object_rep
   {
   public:
     cdef_class_rep (void)
-      : cdef_meta_object_rep (), m_evaluator (0), member_count (0),
-        handle_class (false), object_count (0), meta (false)
+      : cdef_meta_object_rep (), member_count (0), handle_class (false),
+        object_count (0), meta (false)
     { }
 
-    cdef_class_rep (octave::tree_evaluator *tw,
-                    const std::list<cdef_class>& superclasses);
+    cdef_class_rep (const std::list<cdef_class>& superclasses);
 
     cdef_object_rep * copy (void) const { return new cdef_class_rep (*this); }
 
     bool is_class (void) const { return true; }
 
     std::string get_name (void) const
     { return get ("Name").string_value (); }
 
@@ -700,39 +696,34 @@ private:
       else
         delete this;
     }
 
     void mark_as_meta_class (void) { meta = true; }
 
     bool is_meta_class (void) const { return meta; }
 
-    octave::tree_evaluator * evaluator (void) const { return m_evaluator; }
+  private:
 
-  private:
     void load_all_methods (void);
 
     void find_names (std::set<std::string>& names, bool all);
 
     void find_properties (std::map<std::string,cdef_property>& props,
                           int mode = 0);
 
     void find_methods (std::map<std::string, cdef_method>& meths,
                        bool only_inherited);
 
     cdef_class wrap (void)
     {
       refcount++;
       return cdef_class (this);
     }
 
-  private:
-
-    octave::tree_evaluator *m_evaluator;
-
     // The @-directory were this class is loaded from.
     // (not used yet)
     std::string directory;
 
     // The methods defined by this class.
     std::map<std::string,cdef_method> method_map;
 
     // The properties defined by this class.
@@ -757,34 +748,31 @@ private:
     bool meta;
 
     // Utility iterator typedef's.
     typedef std::map<std::string,cdef_method>::iterator method_iterator;
     typedef std::map<std::string,cdef_method>::const_iterator method_const_iterator;
     typedef std::map<std::string,cdef_property>::iterator property_iterator;
     typedef std::map<std::string,cdef_property>::const_iterator property_const_iterator;
 
-  private:
     cdef_class_rep (const cdef_class_rep& c)
-      : cdef_meta_object_rep (c), m_evaluator (c.m_evaluator),
-        directory (c.directory),
+      : cdef_meta_object_rep (c), directory (c.directory),
         method_map (c.method_map), property_map (c.property_map),
         member_count (c.member_count), handle_class (c.handle_class),
         implicit_ctor_list (c.implicit_ctor_list),
         object_count (c.object_count), meta (c.meta) { }
   };
 
 public:
   // Create and invalid class object
   cdef_class (void)
     : cdef_meta_object () { }
 
-  cdef_class (octave::tree_evaluator *tw, const std::string& nm,
-              const std::list<cdef_class>& superclasses)
-    : cdef_meta_object (new cdef_class_rep (tw, superclasses))
+  cdef_class (const std::string& nm, const std::list<cdef_class>& superclasses)
+    : cdef_meta_object (new cdef_class_rep (superclasses))
   { get_rep ()->set_name (nm); }
 
   cdef_class (const cdef_class& cls)
     : cdef_meta_object (cls) { }
 
   cdef_class (const cdef_object& obj)
     : cdef_meta_object (obj)
   {
@@ -836,19 +824,19 @@ public:
   { return get_rep ()->get_name (); }
 
   bool is_builtin (void) const
   { return get_directory ().empty (); }
 
   void delete_object (cdef_object obj)
   { get_rep ()->delete_object (obj); }
 
-  static cdef_class make_meta_class (octave::tree_evaluator *tw,
-                                     octave::tree_classdef *t,
-                                     bool is_at_folder = false);
+  static cdef_class
+  make_meta_class (octave::interpreter& interp, octave::tree_classdef *t,
+                   bool is_at_folder = false);
 
   octave_function * get_method_function (const std::string& nm);
 
   octave_function * get_constructor_function (void)
   { return get_method_function (get_name ()); }
 
   octave_value construct (const octave_value_list& args)
   { return get_rep ()->construct (args); }
@@ -891,30 +879,26 @@ public:
 
 private:
   cdef_class_rep * get_rep (void)
   { return dynamic_cast<cdef_class_rep *> (cdef_object::get_rep ()); }
 
   const cdef_class_rep * get_rep (void) const
   { return dynamic_cast<const cdef_class_rep *> (cdef_object::get_rep ()); }
 
-  octave::tree_evaluator * evaluator (void) const
-  { return get_rep ()->evaluator (); }
-
   friend bool operator == (const cdef_class&, const cdef_class&);
   friend bool operator != (const cdef_class&, const cdef_class&);
   friend bool operator < (const cdef_class&, const cdef_class&);
 
-private:
   static cdef_class _meta_class;
   static cdef_class _meta_property;
   static cdef_class _meta_method;
   static cdef_class _meta_package;
 
-  friend void install_classdef (octave::tree_evaluator *);
+  friend void install_classdef (octave::interpreter& interp);
 };
 
 inline bool
 operator == (const cdef_class& clsa, const cdef_class& clsb)
 // FIXME: is this really the right way to check class equality?
 { return (clsa.get_rep () == clsb.get_rep ()); }
 
 inline bool
@@ -1098,17 +1082,16 @@ private:
     void check_method (void);
 
     cdef_method wrap (void)
     {
       refcount++;
       return cdef_method (this);
     }
 
-  private:
     octave_value function;
 
     // When non-empty, the method is externally defined and this member
     // is used to cache the dispatch type to look for the method.
     std::string dispatch_type;
   };
 
 public:
@@ -1327,17 +1310,16 @@ private:
 
     typedef std::map<std::string, cdef_class>::iterator class_iterator;
     typedef std::map<std::string, cdef_class>::const_iterator class_const_iterator;
     typedef std::map<std::string, octave_value>::iterator function_iterator;
     typedef std::map<std::string, octave_value>::const_iterator function_const_iterator;
     typedef std::map<std::string, cdef_package>::iterator package_iterator;
     typedef std::map<std::string, cdef_package>::const_iterator package_const_iterator;
 
-  private:
     cdef_package_rep (const cdef_package_rep& p)
       : cdef_meta_object_rep (p), full_name (p.full_name),
         class_map (p.class_map), function_map (p.function_map),
         package_map (p.package_map), member_count (p.member_count)
     { }
 
     cdef_package wrap (void)
     {
@@ -1398,20 +1380,19 @@ public:
 
 private:
   cdef_package_rep * get_rep (void)
   { return dynamic_cast<cdef_package_rep *> (cdef_object::get_rep ()); }
 
   const cdef_package_rep * get_rep (void) const
   { return dynamic_cast<const cdef_package_rep *> (cdef_object::get_rep ()); }
 
-private:
   static cdef_package _meta;
 
-  friend void install_classdef (octave::tree_evaluator *);
+  friend void install_classdef (octave::interpreter& interp);
 };
 
 class
 octave_classdef : public octave_base_value
 {
 public:
   octave_classdef (void)
     : octave_base_value (), object () { }
@@ -1476,32 +1457,30 @@ public:
                   const octave_value& rhs);
 
   string_vector map_keys (void) const { return object.map_keys (); }
 
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
-private:
-  cdef_object object;
-
-private:
-
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return object.class_name (); }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
   static std::string static_class_name (void) { return "<unknown>"; }
   static void register_type (void);
 
 private:
+
+  cdef_object object;
+
   static int t_id;
 
   static const std::string t_name;
 };
 
 inline octave_value
 to_ov (const cdef_object& obj)
 {
@@ -1532,17 +1511,17 @@ to_cdef_ref (const octave_value& val)
 
   return dynamic_cast<octave_classdef *> (val.internal_rep ())->get_object_ref ();
 }
 
 inline cdef_object
 to_cdef (const cdef_object& obj)
 { return obj; }
 
-OCTINTERP_API void install_classdef (octave::tree_evaluator *);
+OCTINTERP_API void install_classdef (octave::interpreter& interp);
 
 class
 cdef_manager
 {
 public:
 
   static cdef_class find_class (const std::string& name,
                                 bool error_if_not_found = true,
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4348,21 +4348,21 @@ parse_fcn_file (const std::string& full_
               // meta.class info (and stash it in the symbol
               // table?).  Return pointer to constructor?
 
               if (fcn_ptr)
                 panic_impossible ();
 
               bool is_at_folder = ! dispatch_type.empty ();
 
-              octave::tree_evaluator& tw
-                = octave::__get_evaluator__ ("parse_fcn_file");
+              octave::interpreter& interp
+                = octave::__get_interpreter__ ("parse_fcn_file");
 
               fcn_ptr
-                = parser.classdef_object->make_meta_class (&tw, is_at_folder);
+                = parser.classdef_object->make_meta_class (interp, is_at_folder);
 
               delete (parser.classdef_object);
 
               parser.classdef_object = 0;
             }
           else if (fcn_ptr)
             {
               fcn_ptr->maybe_relocate_end ();
diff --git a/libinterp/parse-tree/pt-classdef.cc b/libinterp/parse-tree/pt-classdef.cc
--- a/libinterp/parse-tree/pt-classdef.cc
+++ b/libinterp/parse-tree/pt-classdef.cc
@@ -140,19 +140,19 @@ namespace octave
         delete *p;
         enum_lst.erase (p);
       }
   }
 
   // Classdef
 
   octave_function*
-  tree_classdef::make_meta_class (tree_evaluator *tw, bool is_at_folder)
+  tree_classdef::make_meta_class (interpreter& interp, bool is_at_folder)
   {
-    cdef_class cls = cdef_class::make_meta_class (tw, this, is_at_folder);
+    cdef_class cls = cdef_class::make_meta_class (interp, this, is_at_folder);
 
     if (cls.ok ())
       return cls.get_constructor_function ();
 
     return 0;
   }
 
   tree_classdef *
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -33,16 +33,18 @@ class octave_value;
 #include "pt-id.h"
 
 #include "base-list.h"
 
 #include <list>
 
 namespace octave
 {
+  class interpreter;
+
   class tree_classdef_attribute
   {
   public:
 
     tree_classdef_attribute (tree_identifier *i = nullptr,
                              tree_expression *e = nullptr)
       : id (i), expr (e), neg (false) { }
 
@@ -664,17 +666,17 @@ namespace octave
 
     tree_classdef_body * body (void) { return element_list; }
 
     octave_comment_list * leading_comment (void) { return lead_comm; }
     octave_comment_list * trailing_comment (void) { return trail_comm; }
 
     const std::string& package_name (void) const { return pack_name; }
 
-    octave_function * make_meta_class (tree_evaluator *tw,
+    octave_function * make_meta_class (interpreter& interp,
                                        bool is_at_folder = false);
 
     tree_classdef * dup (symbol_table::scope_id scope,
                          symbol_table::context_id context) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_classdef (*this);
