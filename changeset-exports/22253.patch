# HG changeset patch
# User Olaf Till <olaf.till@uni-jena.de>
# Date 1444126376 -7200
#      Tue Oct 06 12:12:56 2015 +0200
# Node ID dbf7fd79e39133f4b371095155d23e2783154737
# Parent  54dc5062879e3d58161d82c62cec4480c9994552
More informative messages for errors in anonymous functions (bug #46136).

* ov-usr-fcn.cc (octave_user_function::do_multi_index_op ()): If tree evaluator
is bypassed for (is_special_expr ()), set location here.

* call-stack.cc (octave_call_stack::stack_frame::fcn_name ()): Append
octave_fcn_handle::anonymous to function name for anonymous functions.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "singleton-cleanup.h"
 
 #include "call-stack.h"
 #include "oct-map.h"
 #include "ov.h"
 #include "ov-fcn.h"
+#include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 
 octave_call_stack *octave_call_stack::instance = 0;
 
 std::string
 octave_call_stack::stack_frame::fcn_file_name (void) const
 {
   return m_fcn ? m_fcn->fcn_file_name () : "";
@@ -47,17 +48,20 @@ octave_call_stack::stack_frame::fcn_name
 
   if (m_fcn)
     {
       std::string parent_fcn_name = m_fcn->parent_fcn_name ();
 
       if (print_subfn && ! parent_fcn_name.empty ())
         retval = parent_fcn_name + Vfilemarker;
 
-      retval += m_fcn->name ();
+      if (m_fcn->is_anonymous_function ())
+        retval += octave_fcn_handle::anonymous;
+      else
+        retval += m_fcn->name ();
     }
   else
     retval = "<unknown>";
 
   return retval;
 }
 
 bool
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -586,22 +586,30 @@ octave_user_function::do_multi_index_op 
 
   frame.protect_var (octave::tree_evaluator::statement_context);
   octave::tree_evaluator::statement_context = octave::tree_evaluator::function;
 
   BEGIN_PROFILER_BLOCK (octave_user_function)
 
   if (is_special_expr ())
     {
-      tree_expression *expr = special_expr ();
+      assert (cmd_list->length () == 1);
+
+      tree_statement *stmt = cmd_list->front ();
+
+      tree_expression *expr = stmt->expression ();
 
       if (expr)
-        retval = (lvalue_list
-                  ? expr->rvalue (nargout, lvalue_list)
-                  : expr->rvalue (nargout));
+        {
+          octave_call_stack::set_location (stmt->line (), stmt->column ());
+
+          retval = (lvalue_list
+                    ? expr->rvalue (nargout, lvalue_list)
+                    : expr->rvalue (nargout));
+        }
     }
   else
     cmd_list->accept (*octave::current_evaluator);
 
   END_PROFILER_BLOCK
 
   if (echo_commands)
     print_code_function_trailer ();
