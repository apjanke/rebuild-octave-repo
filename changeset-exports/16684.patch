# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1368933176 14400
#      Sat May 18 23:12:56 2013 -0400
# Branch classdef
# Node ID edbb123cbe3aea4fcb68001c7ffe23353537ca73
# Parent  e1c6ad54259f8817677016f0f3967fb59e757f07
Correct handling of package context in symbol table.

This change partially revert the previous changes on the symbol table,
because the function table is not a member of the symbol table, but
a static field.

* libinterp/interpfcn/load-path.h (load_path::do_find_method,
load_path::do_methods): Remove methods.
(load_path::find_method, load_path::methods): Reimplement with class
load_path::loader.

* libinterp/interpfcn/load-path.cc (load_path::do_find_method,
load_path::do_methods): Remove methods.

* libinterp/interpfcn/symtab.h (symbol_table::package_name): Remove
field, moved to symbol_table::fcn_info::fcn_info_rep. Suppress all
usage.
(symbol_table::find): Remove scope argument.
(symbol_table::alloc_package_scope): Remove method.
(symbol_table::fcn_info::find_function,
symbol_table::fcn_info::find_user_function,
symbol_table::fcn_info::find): Remove package_name argument.
(symbol_table::fcn_info::fcn_info_rep::find,
symbol_table::fcn_info::fcn_info_rep::xfind,
symbol_table::fcn_info::fcn_info_rep::find_function,
symbol_table::fcn_info::fcn_info_rep::find_user_function,
symbol_table::fcn_info::fcn_info_rep::find_package,
symbol_table::fcn_info::fcn_info_rep::load_class_constructor):
Likewise.
(symbol_table::fcn_info::fcn_info_rep::package_name): New member.
(symbol_table::fcn_info::fcn_info_rep::fcn_info_rep): Initialize it.
(symbol_table::fcn_info::fcn_info_rep::full_name): New method.

* libinterp/interpfcn/symtab.cc
(symbol_table::fcn_info::fcn_info_rep::load_class_constructor,
symbol_table::fcn_info::fcn_info_rep::find,
symbol_table::fcn_info::fcn_info_rep::xfind,
symbol_table::fcn_info::fcn_info_rep::find_package,
symbol_table::fcn_info::fcn_info_rep::find_user_function): Remove
package_name argument. Use package_name member instead.
(symbol_table::fcn_info::fcn_info_rep::load_class_method): Simplify,
using full_name method and package_name member.
(symbol_table::fcn_info::fcn_info_rep::dump): Use full_name.
(symbol_table::find): Remove scope argument.
(symbol_table::do_find): Do not use (removed) package_name member.

* libinterp/octave-value/ov-classdef.h
(cdef_package::cdef_package_rep::scope): Remove member. Suppress all
usages.

* libinterp/octave-value/ov-classdef.cc
(cdef_package::cdef_package_rep::find): Do not use (removed) scope
member. Pass fully-qualified name to the symbol table.

diff --git a/libinterp/interpfcn/load-path.cc b/libinterp/interpfcn/load-path.cc
--- a/libinterp/interpfcn/load-path.cc
+++ b/libinterp/interpfcn/load-path.cc
@@ -1143,35 +1143,16 @@ load_path::loader::find_private_fcn (con
             retval = fname;
         }
     }
 
   return retval;
 }
 
 std::string
-load_path::do_find_method (const std::string& class_name,
-                           const std::string& meth,
-                           std::string& dir_name) const
-{
-  size_t pos = class_name.rfind ('.');
-
-  if (pos == std::string::npos)
-    return default_loader.find_method (class_name, meth, dir_name);
-  else
-    {
-      std::string pname = class_name.substr (0, pos);
-
-      std::string cname = class_name.substr (pos+1);
-
-      return get_loader(pname).find_method (cname, meth, dir_name);
-    }
-}
-
-std::string
 load_path::loader::find_method (const std::string& class_name,
                                 const std::string& meth,
                                 std::string& dir_name, int type) const
 {
   std::string retval;
 
   //  update ();
 
@@ -1210,33 +1191,16 @@ load_path::loader::find_method (const st
             }
         }
     }
 
   return retval;
 }
 
 std::list<std::string>
-load_path::do_methods (const std::string& class_name) const
-{
-  size_t pos = class_name.rfind ('.');
-
-  if (pos == std::string::npos)
-    return default_loader.methods (class_name);
-  else
-    {
-      std::string pname = class_name.substr (0, pos);
-
-      std::string cname = class_name.substr (pos+1);
-
-      return get_loader (pname).methods (cname);
-    }
-}
-
-std::list<std::string>
 load_path::loader::methods (const std::string& class_name) const
 {
   std::list<std::string> retval;
 
   //  update ();
 
   const_method_map_iterator q = method_map.find (class_name);
 
diff --git a/libinterp/interpfcn/load-path.h b/libinterp/interpfcn/load-path.h
--- a/libinterp/interpfcn/load-path.h
+++ b/libinterp/interpfcn/load-path.h
@@ -90,34 +90,39 @@ public:
 
   static bool contains_canonical (const std::string& dir_name)
   {
     return instance_ok () ? instance->do_contains_canonical (dir_name) : false;
   }
 
   static std::string find_method (const std::string& class_name,
                                   const std::string& meth,
-                                  std::string& dir_name)
+                                  std::string& dir_name,
+                                  const std::string& pack_name = std::string ())
   {
     return instance_ok ()
-      ? instance->do_find_method (class_name, meth, dir_name)
+      ? instance->get_loader (pack_name).find_method (class_name, meth,
+                                                      dir_name)
       : std::string ();
   }
 
   static std::string find_method (const std::string& class_name,
-                                  const std::string& meth)
+                                  const std::string& meth,
+                                  const std::string& pack_name = std::string ())
   {
     std::string dir_name;
-    return find_method (class_name, meth, dir_name);
+    return find_method (class_name, meth, dir_name, pack_name);
   }
 
-  static std::list<std::string> methods (const std::string& class_name)
+  static std::list<std::string> methods (const std::string& class_name,
+                                         const std::string& pack_name = std::string ())
   {
     return instance_ok ()
-      ? instance->do_methods (class_name) : std::list<std::string> ();
+      ? instance->get_loader(pack_name).methods (class_name)
+      : std::list<std::string> ();
   }
 
   static std::list<std::string> overloads (const std::string& meth)
   {
     return instance_ok ()
       ? instance->do_overloads (meth) : std::list<std::string> ();
   }
 
@@ -654,22 +659,16 @@ private:
                                  loader_map_type::value_type (name, loader (name)));
 
         return l->second;
       }
 
     return default_loader;
   }
 
-  std::string do_find_method (const std::string& class_name,
-                              const std::string& meth,
-                              std::string& dir_name) const;
-
-  std::list<std::string> do_methods (const std::string& class_name) const;
-
   std::list<std::string> do_overloads (const std::string& meth) const;
 
   bool do_find_package (const std::string& package_name) const
   {
     return (loader_map.find (package_name) != loader_map.end ());
   }
 
   std::string do_find_file (const std::string& file) const;
diff --git a/libinterp/interpfcn/symtab.cc b/libinterp/interpfcn/symtab.cc
--- a/libinterp/interpfcn/symtab.cc
+++ b/libinterp/interpfcn/symtab.cc
@@ -369,34 +369,29 @@ symbol_table::fcn_info::fcn_info_rep::lo
           private_functions[dir_name] = retval;
         }
     }
 
   return retval;
 }
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::load_class_constructor
-  (const std::string& pname)
+symbol_table::fcn_info::fcn_info_rep::load_class_constructor (void)
 {
   octave_value retval;
 
   std::string dir_name;
 
-  std::string full_name = name;
-
-  if (! pname.empty ())
-    full_name = pname + "." + full_name;
-
-  std::string file_name = load_path::find_method (full_name, name, dir_name);
+  std::string file_name = load_path::find_method (name, name, dir_name,
+                                                  package_name);
 
   if (! file_name.empty ())
     {
       octave_function *fcn = load_fcn_from_file (file_name, dir_name, name,
-                                                 pname);
+                                                 package_name);
 
       if (fcn)
         {
           retval = octave_value (fcn);
 
           class_constructors[name] = retval;
         }
     }
@@ -404,17 +399,17 @@ symbol_table::fcn_info::fcn_info_rep::lo
     {
       // Classdef constructors can be defined anywhere in the path, not
       // necessarily in @-folders. Look for a normal function and load it.
       // If the loaded function is a classdef constructor, store it as such
       // and restore function_on_path to its previous value.
 
       octave_value old_function_on_path = function_on_path;
 
-      octave_value maybe_cdef_ctor = find_user_function (pname);
+      octave_value maybe_cdef_ctor = find_user_function ();
 
       if (maybe_cdef_ctor.is_defined ())
         {
           octave_function *fcn = maybe_cdef_ctor.function_value (true);
 
           if (fcn && fcn->is_classdef_constructor ())
             {
               retval = maybe_cdef_ctor;
@@ -430,28 +425,18 @@ symbol_table::fcn_info::fcn_info_rep::lo
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::load_class_method
   (const std::string& dispatch_type)
 {
   octave_value retval;
 
-  if (name == dispatch_type)
-    retval = load_class_constructor (std::string ());
-  else if (dispatch_type.length () > name.length ()
-           && dispatch_type.substr (dispatch_type.length () - name.length ()
-                                    - 1) == ("." + name))
-    {
-      std::string pname =
-        dispatch_type.substr (0,
-                              dispatch_type.length () - name.length () - 1);
-
-      retval = load_class_constructor (pname);
-    }
+  if (full_name () == dispatch_type)
+    retval = load_class_constructor ();
   else
     {
       octave_function *cm = cdef_manager::find_method_symbol (name,
                                                               dispatch_type);
 
       if (cm)
         retval = octave_value (cm);
 
@@ -659,39 +644,37 @@ get_dispatch_type (const octave_value_li
 //   function on the path
 //   built-in function
 //
 // Matlab documentation states that constructors have higher precedence
 // than methods, but that does not seem to be the case.
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find (const octave_value_list& args,
-                                            bool local_funcs,
-                                            const std::string& pname)
+                                            bool local_funcs)
 {
-  octave_value retval = xfind (args, local_funcs, pname);
+  octave_value retval = xfind (args, local_funcs);
 
   if (! (error_state || retval.is_defined ()))
     {
       // It is possible that the user created a file on the fly since
       // the last prompt or chdir, so try updating the load path and
       // searching again.
 
       load_path::update ();
 
-      retval = xfind (args, local_funcs, pname);
+      retval = xfind (args, local_funcs);
     }
 
   return retval;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
-                                             bool local_funcs,
-                                             const std::string& pname)
+                                             bool local_funcs)
 {
   if (local_funcs)
     {
       // Subfunction.  I think it only makes sense to check for
       // subfunctions if we are currently executing a function defined
       // from a .m file.
 
       octave_user_function *curr_fcn = symbol_table::get_curr_fcn ();
@@ -764,33 +747,33 @@ symbol_table::fcn_info::fcn_info_rep::xf
     }
 
   // Class constructors.  The class name and function name are the same.
 
   str_val_iterator q = class_constructors.find (name);
 
   if (q == class_constructors.end ())
     {
-      octave_value val = load_class_constructor (pname);
+      octave_value val = load_class_constructor ();
 
       if (val.is_defined ())
         return val;
     }
   else
     {
       octave_value& fval = q->second;
 
       if (fval.is_defined ())
         out_of_date_check (fval, name);
 
       if (fval.is_defined ())
         return fval;
       else
         {
-          octave_value val = load_class_constructor (pname);
+          octave_value val = load_class_constructor ();
 
           if (val.is_defined ())
             return val;
         }
     }
 
   // Legacy dispatch.
 
@@ -826,24 +809,24 @@ symbol_table::fcn_info::fcn_info_rep::xf
 
   octave_value fcn = find_autoload ();
 
   if (fcn.is_defined ())
     return fcn;
 
   // Function on the path.
 
-  fcn = find_user_function (pname);
+  fcn = find_user_function ();
 
   if (fcn.is_defined ())
     return fcn;
 
   // Package
 
-  fcn = find_package (pname);
+  fcn = find_package ();
 
   if (fcn.is_defined ())
     return fcn;
 
   // Built-in function (might be undefined).
 
   return built_in_function;
 }
@@ -890,17 +873,17 @@ octave_value
 symbol_table::fcn_info::fcn_info_rep::x_builtin_find (void)
 {
   // Built-in function.
   if (built_in_function.is_defined ())
     return built_in_function;
 
   // Function on the path.
 
-  octave_value fcn = find_user_function (std::string ());
+  octave_value fcn = find_user_function ();
 
   if (fcn.is_defined ())
     return fcn;
 
   // Autoload?
 
   fcn = find_autoload ();
 
@@ -1037,57 +1020,54 @@ symbol_table::fcn_info::fcn_info_rep::fi
             autoload_function = octave_value (fcn);
         }
     }
 
   return autoload_function;
 }
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::find_user_function (const std::string& pname)
+symbol_table::fcn_info::fcn_info_rep::find_user_function (void)
 {
   // Function on the path.
 
   if (function_on_path.is_defined ())
     out_of_date_check (function_on_path);
 
   if (! (error_state || function_on_path.is_defined ()))
     {
       std::string dir_name;
 
-      std::string file_name = load_path::find_fcn (name, dir_name, pname);
+      std::string file_name = load_path::find_fcn (name, dir_name,
+                                                   package_name);
 
       if (! file_name.empty ())
         {
           octave_function *fcn = load_fcn_from_file (file_name, dir_name, "",
-                                                     pname);
+                                                     package_name);
 
           if (fcn)
             function_on_path = octave_value (fcn);
         }
     }
 
   return function_on_path;
 }
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::find_package (const std::string& pname)
+symbol_table::fcn_info::fcn_info_rep::find_package (void)
 {
   // FIXME: implement correct way to check out of date package
   //if (package.is_defined ())
   //  out_of_date_check (package);
 
   if (! (error_state || package.is_defined ()))
     {
-      std::string full_name = name;
-
-      if (! pname.empty ())
-        full_name = pname + "." + full_name;
-
-      octave_function * fcn = cdef_manager::find_package_symbol (full_name);
+      octave_function * fcn =
+        cdef_manager::find_package_symbol (full_name ());
 
       if (fcn)
         package = octave_value (fcn);
     }
 
   return package;
 }
 
@@ -1143,17 +1123,17 @@ fcn_file_name (const octave_value& fcn)
 
   return f ? f->fcn_file_name () : std::string ();
 }
 
 void
 symbol_table::fcn_info::fcn_info_rep::dump
   (std::ostream& os, const std::string& prefix) const
 {
-  os << prefix << name
+  os << prefix << full_name ()
      << " ["
      << (cmdline_function.is_defined () ? "c" : "")
      << (built_in_function.is_defined () ? "b" : "")
      << (package.is_defined () ? "p" : "")
      << "]\n";
 
   std::string tprefix = prefix + "  ";
 
@@ -1222,20 +1202,19 @@ symbol_table::install_nestfunction (cons
 
   parent_table->add_nest_child (*fcn_table_loc);
 }
 
 octave_value
 symbol_table::find (const std::string& name,
                     const octave_value_list& args,
                     bool skip_variables,
-                    bool local_funcs,
-                    scope_id scope)
+                    bool local_funcs)
 {
-  symbol_table *inst = get_instance (scope);
+  symbol_table *inst = get_instance (xcurrent_scope);
 
   return inst
     ? inst->do_find (name, args, skip_variables, local_funcs)
     : octave_value ();
 }
 
 octave_value
 symbol_table::builtin_find (const std::string& name)
@@ -1423,22 +1402,22 @@ symbol_table::do_find (const std::string
                 return val;
             }
         }
     }
 
   fcn_table_iterator p = fcn_table.find (name);
 
   if (p != fcn_table.end ())
-    return p->second.find (args, local_funcs, package_name);
+    return p->second.find (args, local_funcs);
   else
     {
       fcn_info finfo (name);
 
-      octave_value fcn = finfo.find (args, local_funcs, package_name);
+      octave_value fcn = finfo.find (args, local_funcs);
 
       if (fcn.is_defined ())
         fcn_table[name] = finfo;
 
       return fcn;
     }
 
   return retval;
diff --git a/libinterp/interpfcn/symtab.h b/libinterp/interpfcn/symtab.h
--- a/libinterp/interpfcn/symtab.h
+++ b/libinterp/interpfcn/symtab.h
@@ -749,49 +749,56 @@ public:
   private:
 
     class
     fcn_info_rep
     {
     public:
 
       fcn_info_rep (const std::string& nm)
-        : name (nm), subfunctions (), private_functions (),
+        : name (nm), package_name (), subfunctions (), private_functions (),
           class_constructors (), class_methods (), dispatch_map (),
           cmdline_function (), autoload_function (), function_on_path (),
-          built_in_function (), count (1) { }
+          built_in_function (), count (1)
+      {
+        size_t pos = name.rfind ('.');
+
+        if (pos != std::string::npos)
+          {
+            package_name = name.substr (0, pos);
+            name = name.substr (pos+1);
+          }
+      }
 
       octave_value load_private_function (const std::string& dir_name);
 
-      octave_value load_class_constructor (const std::string& pname);
+      octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value find (const octave_value_list& args, bool local_funcs,
-                         const std::string& package_name);
+      octave_value find (const octave_value_list& args, bool local_funcs);
 
       octave_value builtin_find (void);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
-      octave_value find_package (const std::string& package_name);
-
-      octave_value find_user_function (const std::string& package_name);
+      octave_value find_package (void);
+
+      octave_value find_user_function (void);
 
       bool is_user_function_defined (void) const
       {
         return function_on_path.is_defined ();
       }
 
-      octave_value find_function (const octave_value_list& args, bool local_funcs,
-                                  const std::string& package_name)
+      octave_value find_function (const octave_value_list& args, bool local_funcs)
       {
-        return find (args, local_funcs, package_name);
+        return find (args, local_funcs);
       }
 
       void lock_subfunction (scope_id scope)
       {
         scope_val_iterator p = subfunctions.find (scope);
 
         if (p != subfunctions.end ())
           p->second.lock ();
@@ -917,18 +924,28 @@ public:
       void print_dispatch (std::ostream& os) const;
 
       std::string help_for_dispatch (void) const;
 
       dispatch_map_type get_dispatch (void) const { return dispatch_map; }
 
       void dump (std::ostream& os, const std::string& prefix) const;
 
+      std::string full_name (void) const
+      {
+        if (package_name.empty ())
+          return name;
+        else
+          return package_name + "." + name;
+      }
+
       std::string name;
 
+      std::string package_name;
+
       // Scope id to function object.
       std::map<scope_id, octave_value> subfunctions;
 
       // Directory name to function object.
       std::map<std::string, octave_value> private_functions;
 
       // Class name to function object.
       std::map<std::string, octave_value> class_constructors;
@@ -948,18 +965,17 @@ public:
       octave_value package;
 
       octave_value built_in_function;
 
       octave_refcount<size_t> count;
 
     private:
 
-      octave_value xfind (const octave_value_list& args, bool local_funcs,
-                          const std::string& package_name);
+      octave_value xfind (const octave_value_list& args, bool local_funcs);
 
       octave_value x_builtin_find (void);
 
       // No copying!
 
       fcn_info_rep (const fcn_info_rep&);
 
       fcn_info_rep& operator = (const fcn_info_rep&);
@@ -991,20 +1007,19 @@ public:
 
     ~fcn_info (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
     octave_value find (const octave_value_list& args = octave_value_list (),
-                       bool local_funcs = true,
-                       const std::string& package_name = std::string ())
+                       bool local_funcs = true)
     {
-      return rep->find (args, local_funcs, package_name);
+      return rep->find (args, local_funcs);
     }
 
     octave_value builtin_find (void)
     {
       return rep->builtin_find ();
     }
 
     octave_value find_method (const std::string& dispatch_type) const
@@ -1022,31 +1037,30 @@ public:
       return rep->cmdline_function;
     }
 
     octave_value find_autoload (void)
     {
       return rep->find_autoload ();
     }
 
-    octave_value find_user_function (const std::string& pname = std::string ())
+    octave_value find_user_function (void)
     {
-      return rep->find_user_function (pname);
+      return rep->find_user_function ();
     }
 
     bool is_user_function_defined (void) const
     {
       return rep->is_user_function_defined ();
     }
 
     octave_value find_function (const octave_value_list& args = octave_value_list (),
-                                bool local_funcs = true,
-                                const std::string& package_name = std::string ())
+                                bool local_funcs = true)
     {
-      return rep->find_function (args, local_funcs, package_name);
+      return rep->find_function (args, local_funcs);
     }
 
     void lock_subfunction (scope_id scope)
     {
       rep->lock_subfunction (scope);
     }
 
     void unlock_subfunction (scope_id scope)
@@ -1142,31 +1156,16 @@ public:
   static scope_id top_scope (void) { return xtop_scope; }
 
   static scope_id current_scope (void) { return xcurrent_scope; }
 
   static context_id current_context (void) { return xcurrent_context; }
 
   static scope_id alloc_scope (void) { return scope_id_cache::alloc (); }
 
-  static scope_id alloc_package_scope (const std::string& name)
-  {
-    scope_id retval = alloc_scope ();
-
-    if (retval != -1)
-      {
-        symbol_table* inst = get_instance (retval, true);
-
-        inst->do_cache_name (name);
-        inst->package_name = name;
-      }
-
-    return retval;
-  }
-
   static void set_scope (scope_id scope)
   {
     if (scope == xglobal_scope)
       error ("can't set scope to global");
     else if (scope != xcurrent_scope)
       {
         all_instances_iterator p = all_instances.find (scope);
 
@@ -1300,18 +1299,17 @@ public:
 
   static bool at_top_level (void) { return xcurrent_scope == xtop_scope; }
 
   // Find a value corresponding to the given name in the table.
   static octave_value
   find (const std::string& name,
         const octave_value_list& args = octave_value_list (),
         bool skip_variables = false,
-        bool local_funcs = true,
-        scope_id scope = xcurrent_scope);
+        bool local_funcs = true);
 
   static octave_value builtin_find (const std::string& name);
 
   // Insert a new name in the table.
   static symbol_record& insert (const std::string& name,
                                 scope_id scope = xcurrent_scope)
   {
     static symbol_record foobar;
@@ -2338,20 +2336,16 @@ private:
   symbol_table *nest_parent;
 
   // The associated user code (may be null).
   octave_user_function *curr_fcn;
 
   // If true then no variables can be added.
   bool static_workspace;
 
-  // The name of the package context associated with this table. This is
-  // only used by classdef packages.
-  std::string package_name;
-
   // Map from names of global variables to values.
   static std::map<std::string, octave_value> global_table;
 
   // Map from names of persistent variables to values.
   std::map<std::string, octave_value> persistent_table;
 
   // Pointer to symbol table for current scope (variables only).
   static symbol_table *instance;
@@ -2382,17 +2376,17 @@ private:
   static scope_id xcurrent_scope;
 
   static context_id xcurrent_context;
 
   static const context_id xdefault_context = static_cast<context_id> (-1);
 
   symbol_table (scope_id scope)
     : my_scope (scope), table_name (), table (), nest_children (), nest_parent (0),
-    curr_fcn (0), static_workspace (false), package_name (), persistent_table () { }
+    curr_fcn (0), static_workspace (false), persistent_table () { }
 
   ~symbol_table (void) { }
 
   static symbol_table *get_instance (scope_id scope, bool create = true)
   {
     symbol_table *retval = 0;
 
     bool ok = true;
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2782,20 +2782,19 @@ cdef_package::cdef_package_rep::get_func
 
 Cell
 cdef_package::cdef_package_rep::get_packages (void) const
 { return map2Cell (package_map); }
 
 octave_value
 cdef_package::cdef_package_rep::find (const std::string& nm)
 {
-  if (scope == -1)
-    scope = symbol_table::alloc_package_scope (get_name ());
-
-  return symbol_table::find (nm, octave_value_list (), true, false, scope);
+  std::string symbol_name = get_name () + "." + nm;
+
+  return symbol_table::find (symbol_name, octave_value_list (), true, false);
 }
 
 octave_value_list
 cdef_package::cdef_package_rep::meta_subsref
   (const std::string& type, const std::list<octave_value_list>& idx,
    int nargout)
 {
   octave_value_list retval;
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1207,23 +1207,19 @@ cdef_package : public cdef_meta_object
 
 private:
 
   class
   cdef_package_rep : public cdef_meta_object_rep
   {
   public:
     cdef_package_rep (void)
-      : cdef_meta_object_rep (), member_count (0), scope (-1) { }
+      : cdef_meta_object_rep (), member_count (0) { }
 
-    ~cdef_package_rep (void)
-      {
-        if (scope != -1)
-          symbol_table::erase_scope (scope);
-      }
+    ~cdef_package_rep (void) { }
 
     cdef_object_rep* copy (void) const { return new cdef_package_rep (*this); }
 
     bool is_package (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
@@ -1280,19 +1276,16 @@ private:
 
     typedef std::map<std::string, cdef_class>::iterator class_iterator;
     typedef std::map<std::string, cdef_class>::const_iterator class_const_iterator;
     typedef std::map<std::string, octave_value>::iterator function_iterator;
     typedef std::map<std::string, octave_value>::const_iterator function_const_iterator;
     typedef std::map<std::string, cdef_package>::iterator package_iterator;
     typedef std::map<std::string, cdef_package>::const_iterator package_const_iterator;
 
-    // The symbol_table scope corresponding to this package.
-    symbol_table::scope_id scope;
-
   private:
     cdef_package_rep (const cdef_package_rep& p)
       : cdef_meta_object_rep (p), full_name (p.full_name),
         class_map (p.class_map), function_map (p.function_map),
         package_map (p.package_map), member_count (p.member_count)
       { }
 
     cdef_package wrap (void)
