# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532321554 25200
#      Sun Jul 22 21:52:34 2018 -0700
# Node ID 0812413a0bb7948eecc84a5f755ccbc361228289
# Parent  db326f3aacf46c35b5ca4877ec63fa355d8a5dd4
Improve fread speed by a further 40% when SKIP parameter used (bug #54100).

* oct-stream.cc (stream::fread): Check stream_ok immediately and return from
function if it is not.  Reformat comments to 80 character width.  Declare
new variable cur_pos to hold current position within file.  Remove call to
tellg, and use arithmetic based on cur_pos and number of iems read to determine
position in file.  Eliminate unneccesary test on stream is after seekg as it
will be done as part of the while loop.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -6506,29 +6506,29 @@ namespace octave
   stream::read (const Array<double>& size, octave_idx_type block_size,
                 oct_data_conv::data_type input_type,
                 oct_data_conv::data_type output_type,
                 octave_idx_type skip, mach_info::float_format ffmt,
                 octave_idx_type& count)
   {
     octave_value retval;
 
+    if (! stream_ok ())
+      return retval;
+
     octave_idx_type nr = -1;
     octave_idx_type nc = -1;
 
     bool one_elt_size_spec = false;
 
-    if (! stream_ok ())
-      return retval;
-
-    // FIXME: we may eventually want to make this extensible.
-
-    // FIXME: we need a better way to ensure that this
-    // numbering stays consistent with the order of the elements in the
-    // data_type enum in the oct_data_conv class.
+    // FIXME: We may eventually want to make this extensible.
+
+    // FIXME: We need a better way to ensure that this numbering stays
+    // consistent with the order of the elements in the data_type enum in the
+    // oct_data_conv class.
 
     // Expose this in a future version?
     size_t char_count = 0;
 
     ptrdiff_t tmp_count = 0;
 
     try
       {
@@ -6590,37 +6590,37 @@ namespace octave
     octave_idx_type input_elt_size
       = oct_data_conv::data_type_size (input_type);
 
     ptrdiff_t input_buf_size =
       static_cast<ptrdiff_t> (input_buf_elts) * input_elt_size;
 
     assert (input_buf_size >= 0);
 
-    // Must also work and return correct type object
-    // for 0 elements to read.
+    // Must also work and return correct type object for 0 elements to read.
     std::istream *isp = input_stream ();
 
     if (! isp)
       error ("fread: invalid input stream");
     else
       {
         std::istream& is = *isp;
 
         // Initialize eof_pos variable just once per function call
         off_t eof_pos = 0;
+        off_t cur_pos = 0;
         if (skip != 0 && is && ! is.eof ())
           {
-            off_t orig_pos = is.tellg ();
+            cur_pos = is.tellg ();
             is.seekg (0, is.end);
             eof_pos = is.tellg ();
-            is.seekg (orig_pos, is.beg);
+            is.seekg (cur_pos, is.beg);
           }
 
-        std::list <void *> input_buf_list;
+        std::list<void *> input_buf_list;
 
         while (is && ! is.eof ()
                && (read_to_eof || tmp_count < elts_to_read))
           {
             if (! read_to_eof)
               {
                 octave_idx_type remaining_elts = elts_to_read - tmp_count;
 
@@ -6630,37 +6630,40 @@ namespace octave
 
             char *input_buf = new char [input_buf_size];
 
             is.read (input_buf, input_buf_size);
 
             size_t gcount = is.gcount ();
 
             char_count += gcount;
+            cur_pos += gcount;
 
             octave_idx_type nel = gcount / input_elt_size;
 
             tmp_count += nel;
 
             input_buf_list.push_back (input_buf);
 
-            if (is && skip != 0 && nel == block_size)
+            if (skip != 0 && nel == block_size && is)
               {
                 // Attempt to skip.
                 // If skip would move past EOF, position at EOF.
-                off_t orig_pos = is.tellg ();
-                off_t remaining = eof_pos - orig_pos;
+                off_t remaining = eof_pos - cur_pos;
 
                 if (remaining < skip)
-                  is.seekg (0, is.end);
+                  {
+                    is.seekg (0, is.end);
+                    cur_pos = eof_pos;
+                  }
                 else
-                  is.seekg (skip, is.cur);
-
-                if (! is)
-                  break;
+                  {
+                    is.seekg (skip, is.cur);
+                    cur_pos += skip;
+                  }
               }
           }
 
         if (read_to_eof)
           {
             if (nc < 0)
               {
                 nc = tmp_count / nr;
