# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550699225 0
#      Wed Feb 20 21:47:05 2019 +0000
# Node ID a89aa5b95a59a8f3f0bcd1e3a32fa9f90752f551
# Parent  2c4ad1958cab80023609232098f196c0d58905d6
return early if searching for function or package with empty name

* symtab.cc (symbol_table::find_method, symbol_table::find_autoload,
symbol_table::builtin_find, symbol_table::fcn_table_find,
symbol_table::find_function, symbol_table::find_user_function,
symbol_table::find_cmdline_function): Return early if name is empty.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -82,16 +82,19 @@ namespace octave
   }
 
   // FIXME: this function only finds legacy class methods, not
   // classdef methods.
 
   octave_value symbol_table::find_method (const std::string& name,
                                           const std::string& dispatch_type)
   {
+    if (name.empty ())
+      return octave_value ();
+
     fcn_table_const_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
       return p->second.find_method (dispatch_type);
     else
       {
         fcn_info finfo (name);
 
@@ -109,24 +112,30 @@ namespace octave
     fcn_table_const_iterator p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_built_in_function () : octave_value ());
   }
 
   octave_value symbol_table::find_autoload (const std::string& name)
   {
+    if (name.empty ())
+      return octave_value ();
+
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_autoload () : octave_value ());
   }
 
   octave_value symbol_table::builtin_find (const std::string& name)
   {
+    if (name.empty ())
+      return octave_value ();
+
     fcn_table_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
       return p->second.builtin_find ();
     else
       {
         fcn_info finfo (name);
 
@@ -139,16 +148,19 @@ namespace octave
       }
 
     return octave_value ();
   }
 
   octave_value symbol_table::fcn_table_find (const std::string& name,
                                              const octave_value_list& args)
   {
+    if (name.empty ())
+      return octave_value ();
+
     fcn_table_iterator p = m_fcn_table.find (name);
 
     if (p != m_fcn_table.end ())
       return p->second.find (args);
     else
       {
         fcn_info finfo (name);
 
@@ -182,16 +194,19 @@ namespace octave
       }
     else
       return find_function (name, ovl ());
   }
 
   octave_value symbol_table::find_function (const std::string& name,
                                             const octave_value_list& args)
   {
+    if (name.empty ())
+      return octave_value ();
+
     octave_value fcn;
 
     symbol_scope curr_scope = current_scope ();
 
     if (curr_scope)
       {
         fcn = curr_scope.find_subfunction (name);
 
@@ -199,24 +214,30 @@ namespace octave
           return fcn;
       }
 
     return fcn_table_find (name, args);
   }
 
   octave_value symbol_table::find_user_function (const std::string& name)
   {
+    if (name.empty ())
+      return octave_value ();
+
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_user_function () : octave_value ());
   }
 
   octave_value symbol_table::find_cmdline_function (const std::string& name)
   {
+    if (name.empty ())
+      return octave_value ();
+
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_cmdline_function () : octave_value ());
   }
 
   void symbol_table::install_cmdline_function (const std::string& name,
                                                const octave_value& fcn)
