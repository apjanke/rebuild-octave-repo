# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1219771455 14400
#      Tue Aug 26 13:24:15 2008 -0400
# Node ID 75c99d3f97d7faf23e37a300cecfb115346af9b9
# Parent  ca39c21fa4b88701efcc11599d75212734b8c4c6
Octave to backend notification scheme

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,62 @@
+2008-08-26  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* DLD_FUNCTIONS/fltk_backend.cc (fltk_backend::close_figure): Remove.
+	(fltk_backend::object_destroyed, fltk_backend::property_changed): New
+	methods.
+	* genprops.awk (emit_declarations): Generate "enum" property fields.
+	(emit_sources): Emit set_id calls.
+	* graphics.h.in (base_property::id): New field.
+	(base_property::base_property): Initialize it.
+	(base_property::get_id, base_property::set_id): Add accessors.
+	(property::get_id, property::set_id): Likewise.
+	(base_graphics_backend::close_figure, graphics_backend::close_figure):
+	Remove methods.
+	(base_graphics_backend::redraw_figure,
+	base_graphics_backend::print_figure, graphics_backend::redraw_figure,
+	graphics_backend::print_figure): Change graphics_handle argument into
+	graphics_object.
+	(base_graphics_backend::property_changed,
+	base_graphics_backend::object_created,
+	base_graphics_backend::object_destroyed,
+	graphics_backend::property_changed, graphics_backend::object_created,
+	graphics_backend::object_destroyed): New signature with
+	graphics_object argument.
+	(base_properties::base_properties): Add set_id calls.
+	(class base_properties): Add "enum" property fields.
+	(root_figure::properties::remove_child): Add overloaded method.
+	(figure::properties::close): Remove.
+	(figure::properties::set_backend): Call object_destroyed instead of
+	close.
+	(figure::~figure): Remove close call.
+	(figure::properties::get_title): New method.
+	* graphics.cc (base_property::set): Call property_changed only for
+	valid id (>=0); Use graphics_object argument.
+	(gh_manager::do_free): Call object_destroyed with graphics_object
+	argument.
+	(base_graphics_backend::property_changed,
+	base_graphics_backend::object_created,
+	base_graphics_object::object_destroyed): Implement wrappers for
+	graphics_handle argument case.
+	(gnuplot_backend::close_figure): Remove.
+	(gnuplot_backend::object_destroyed,
+	gnuplot_backend::property_changed): New methods.
+	(gnuplot_backend::redraw_figure, gnuplot_backend::print_figure):
+	Change graphics_handle argument to graphics_object.
+	(root_figure::properties::remove_child): Add.
+	(figure::properties::close): Remove.
+	(figure::properties::set_position): Do not call set_figure_position.
+	(figure::properties::get_title): New method.
+	(gh_manager::do_make_graphics_handle): Call object_created with
+	a graphics_object argument.
+	(gh_manager::do_make_figure_handle): Likewise.
+	(Fdrawnow): Call redraw_figure and print_figure with a graphics_object
+	argument.
+
 2008-08-26  Maciek Gajewski <maciej.gajewski0@gmail.com>
 
 	* graphics.h.in (base_property::set): Remove inline implementation.
 	(base_graphics_backend::property_changed,
 	base_graphics_backend::object_created,
 	base_graphics_backend::object_destroyed): New method.
 	(graphics_backend::property_changed, graphics_backend::object_created,
 	graphics_backend::object_destroyed): Likewise.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -691,20 +691,41 @@ class fltk_backend : public base_graphic
 public:
   fltk_backend (void)
     : base_graphics_backend (FLTK_BACKEND_NAME) { }
 
   ~fltk_backend (void) { }
 
   bool is_valid (void) const { return true; }
 
-  void close_figure (const octave_value& ov) const
+  void object_destroyed (const graphics_object& go)
+  {
+    if (go.isa ("figure"))
+      {
+	octave_value ov = go.get (caseless_str ("__plot_stream__"));
+	figure_manager::Instance ().delete_window (ov.string_value ());
+      }
+  }
+
+  void property_changed (const graphics_object& go, int id)
   {
-    if (ov.is_string ())
-      figure_manager::Instance ().delete_window (ov.string_value ());
+    if (go.isa ("figure"))
+      {
+	octave_value ov = go.get (caseless_str ("__plot_stream__"));
+	
+	if (! ov.is_empty ())
+	  {
+	    switch (id)
+	      {
+	      case base_properties::VISIBLE:
+		// FIXME: something to do here
+		break;
+	      }
+	  }
+      }
   }
 
   void redraw_figure (const graphics_handle& fh) const
   {
     figure_manager::Instance ().mark_modified (fh);
   }
 
   void print_figure (const graphics_handle& /*fh*/,
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -255,16 +255,28 @@ function emit_declarations ()
   if (idx > 0)
     print "private:\n";
 
   for (i = 1; i <= idx; i++)
     printf ("  %s%s %s;\n", mutable[i] ? "mutable " : "", type[i], name[i]);
 
   if (idx > 0)
     print "\npublic:\n";
+  
+  if (idx > 0)
+  {
+    printf ("  enum\n  {");
+    for (i = 1; i <= idx; i++)
+    {
+      printf ("%s\n    %s = %d", (i == 1 ? "" : ","), toupper(name[i]), pcount);
+      pcount++;
+    }
+    printf ("\n  };\n\n");
+    pcount = (int(pcount/1000)+1)*1000;
+  }
 
   for (i = 1; i <= idx; i++)
   {
     if (emit_get[i])
     {
       if (type[i] == "any_property")
         emit_get_accessor(i, "octave_value", "get");
       else if (type[i] == "handle_property")
@@ -320,17 +332,18 @@ function emit_declarations ()
         if (updater[i])
           printf ("        update_%s ();\n", name[i]);
         if (limits[i])
           printf ("        update_axis_limits (\"%s\");\n", name[i]);
         if (mode[i])
           printf ("        set_%smode (\"manual\");\n", name[i]);
 	if (has_builtin_listeners)
 	  printf ("        %s.run_listeners (POSTSET);\n", name[i]);
-        printf ("        mark_modified ();\n      }\n  }\n\n");
+        printf ("        mark_modified ();\n");
+        printf ("      }\n  }\n\n");
       }
       else
         printf (";\n\n");
     }
 
     if (updater[i] == "extern")
     {
       printf ("  void update_%s (void);\n\n", name[i]);
@@ -375,16 +388,17 @@ function emit_source ()
       printf ("\n") >> filename;
     }
 
     printf ("{\n") >> filename;
 
     for (i = 1; i <= idx; i++)
     {
 ##    printf ("  insert_static_property (\"%s\", %s);\n", name[i], name[i]) >> filename;
+      printf ("  %s.set_id (%s);\n", name[i], toupper(name[i])) >> filename;
       if (hidden[i])
         printf ("  %s.set_hidden (true);\n", name[i]) >> filename;
     }
 
     printf ("  init ();\n}\n\n") >> filename;
 
     ## set method
 
@@ -487,16 +501,17 @@ function emit_source ()
             class_name, class_name) >> filename;
   }
 }
 
 BEGIN {
   filename = "graphics-props.cc";
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n");
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n") > filename;
+  pcount = 1000;
 }
 
 /BEGIN_PROPERTIES\(.*\)/ {
   gather = 1;
   idx = 0;
   str = $0;
   k = index (str, "BEGIN_PROPERTIES(");
   str = substr (str, k + 17);
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <cfloat>
 #include <cstdlib>
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
+#include <sstream>
 
 #include "file-ops.h"
 #include "file-stat.h"
 
 #include "cmd-edit.h"
 #include "defun.h"
 #include "error.h"
 #include "graphics.h"
@@ -459,22 +460,25 @@ make_graphics_object_from_type (const ca
 // ---------------------------------------------------------------------
 
 void
 base_property::set (const octave_value& v, bool do_run )
 {
   do_set (v);
 
   // notify backend
-  graphics_object go = gh_manager::get_object (parent);
-  if (go)
+  if (id >= 0)
     {
-      graphics_backend backend = go.get_backend();
-      if (backend)
-        backend.property_changed (parent, name);
+      graphics_object go = gh_manager::get_object (parent);
+      if (go)
+	{
+	  graphics_backend backend = go.get_backend();
+	  if (backend)
+	    backend.property_changed (go, id);
+	}
     }
   
   // run listeners
   if (do_run && ! error_state)
     run_listeners (POSTSET);
 }
 
 
@@ -1184,23 +1188,26 @@ gh_manager::do_free (const graphics_hand
   if (h.ok ())
     {
       if (h.value () != 0)
 	{
 	  iterator p = handle_map.find (h);
 
 	  if (p != handle_map.end ())
 	    {
+	      // FIXME: should we explicitely free all children first?
+	      //        => call delete_children () ?
+
 	      p->second.get_properties ().set_beingdeleted (true);
 	      p->second.get_properties ().execute_deletefcn ();
 
 	      // notify backend
 	      graphics_backend backend = p->second.get_backend ();
 	      if (backend)
-                backend.object_destroyed (h);
+                backend.object_destroyed (p->second);
                  // note - this will be valid only for first explicitly deleted object.
                  // All his children will have unknown backend then.
                  
 	      handle_map.erase (p);
 
 	      if (h.value () < 0)
 		handle_free_list.insert (h);
 	    }
@@ -1337,16 +1344,41 @@ static void
 xcreatefcn (const graphics_handle& h)
 {
   graphics_object obj = gh_manager::get_object (h);
   obj.get_properties ().execute_createfcn  ();
 }
 
 // ---------------------------------------------------------------------
 
+void
+base_graphics_backend::property_changed (const graphics_handle& h, int id)
+{
+  graphics_object go = gh_manager::get_object (h);
+
+  property_changed (go, id);
+}
+
+void
+base_graphics_backend::object_created (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (h);
+
+  object_created (go);
+}
+
+void
+base_graphics_backend::object_destroyed (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (h);
+
+  object_destroyed (go);
+}
+// ---------------------------------------------------------------------
+
 static int
 compare (const void *a_arg, const void *b_arg)
 {
   double a = *(static_cast<const double *> (a_arg));
   double b = *(static_cast<const double *> (b_arg));
 
   return a > b ? 1 : (a < b) ? -1 : 0;
 }
@@ -1758,18 +1790,86 @@ class gnuplot_backend : public base_grap
 {
 public:
   gnuplot_backend (void)
       : base_graphics_backend ("gnuplot") { }
 
   ~gnuplot_backend (void) { }
 
   bool is_valid (void) const { return true; }
- 
-  void close_figure (const octave_value& pstream) const
+
+  void object_destroyed (const graphics_object& go)
+    {
+      if (go.isa ("figure"))
+	{
+	  const figure::properties& props =
+	      dynamic_cast<const figure::properties&> (go.get_properties ());
+
+	  send_quit (props.get___plot_stream__ ());
+	}
+    }
+
+  void property_changed (const graphics_object& go, int id)
+    {
+      if (go.isa ("figure"))
+	{
+	  graphics_object obj (go);
+
+	  figure::properties& props =
+	      dynamic_cast<figure::properties&> (obj.get_properties ());
+
+	  switch (id)
+	    {
+	    case base_properties::VISIBLE:
+	      if (! props.is_visible ())
+		{
+		  send_quit (props.get___plot_stream__ ());
+		  props.set___plot_stream__ (Matrix ());
+		  props.set___enhanced__ (false);
+		}
+	      break;
+	    }
+	}
+    }
+
+  void redraw_figure (const graphics_object& go) const
+    {
+      octave_value_list args;
+      args(0) = go.get_handle ().as_octave_value ();
+      feval ("gnuplot_drawnow", args);
+    }
+
+  void print_figure (const graphics_object& go, const std::string& term,
+		     const std::string& file, bool mono,
+		     const std::string& debug_file) const
+    {
+      octave_value_list args;
+      if (! debug_file.empty ())
+	args(4) = debug_file;
+      args(3) = mono;
+      args(2) = file;
+      args(1) = term;
+      args(0) = go.get_handle ().as_octave_value ();
+      feval ("gnuplot_drawnow", args);
+    }
+
+  Matrix get_canvas_size (const graphics_handle&) const
+    {
+      Matrix sz (1, 2, 0.0);
+      return sz;
+    }
+
+  double get_screen_resolution (void) const
+    { return 72.0; }
+
+  Matrix get_screen_size (void) const
+    { return Matrix (1, 2, 0.0); }
+
+private:
+  void send_quit (const octave_value& pstream) const
     {
       if (! pstream.is_empty())
 	{
 	  octave_value_list args;
 	  Matrix fids = pstream.matrix_value ();
 
 	  if (! error_state)
 	    {
@@ -1782,49 +1882,16 @@ public:
 	      if (fids.numel () > 1)
 		{
 		  args(0) = octave_value (fids (1));
 		  feval ("pclose", args);
 		}
 	    }
 	}
     }
-
-  void redraw_figure (const graphics_handle& fh) const
-    {
-      octave_value_list args;
-      args(0) = fh.as_octave_value ();
-      feval ("gnuplot_drawnow", args);
-    }
-
-  void print_figure (const graphics_handle& fh, const std::string& term,
-		     const std::string& file, bool mono,
-		     const std::string& debug_file) const
-    {
-      octave_value_list args;
-      if (! debug_file.empty ())
-	args(4) = debug_file;
-      args(3) = mono;
-      args(2) = file;
-      args(1) = term;
-      args(0) = fh.as_octave_value ();
-      feval ("gnuplot_drawnow", args);
-    }
-
-  Matrix get_canvas_size (const graphics_handle&) const
-    {
-      Matrix sz (1, 2, 0.0);
-      return sz;
-    }
-
-  double get_screen_resolution (void) const
-    { return 72.0; }
-
-  Matrix get_screen_size (void) const
-    { return Matrix (1, 2, 0.0); }
 };
 
 graphics_backend
 graphics_backend::default_backend (void)
 {
   if (available_backends.size () == 0)
     register_backend (new gnuplot_backend ());
 
@@ -1898,16 +1965,28 @@ root_figure::properties::set_callbackobj
 	cbo_stack.push_front (get_callbackobject ());
 
       callbackobject = val;
     }
   else
     gripe_set_invalid ("callbackobject");
 }
 
+void
+root_figure::properties::remove_child (const graphics_handle& gh)
+{
+  gh_manager::pop_figure (gh);
+
+  graphics_handle cf = gh_manager::current_figure ();
+
+  xset (0, "currentfigure", cf.value ());
+  
+  base_properties::remove_child (gh);
+}
+
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& v)
 {
@@ -1931,32 +2010,16 @@ figure::properties::set_visible (const o
     {
       if (s == "on")
 	xset (0, "currentfigure", __myhandle__.value ());
 
       visible = val;
     }
 }
 
-void
-figure::properties::close (bool pop)
-{
-  if (backend)
-    backend.close_figure (get___plot_stream__ ());
-
-  if (pop)
-    {
-      gh_manager::pop_figure (__myhandle__);
-
-      graphics_handle cf = gh_manager::current_figure ();
-
-      xset (0, "currentfigure", cf.value ());
-    }
-}
-
 Matrix
 figure::properties::get_boundingbox (bool) const
 {
   graphics_backend b = get_backend ();
   // FIXME: screen size should be obtained from root object
   Matrix screen_size = b.get_screen_size ();
   Matrix pos;
 
@@ -1994,30 +2057,45 @@ figure::properties::set_position (const 
       Matrix old_bb, new_bb;
 
       old_bb = get_boundingbox ();
       position = v;
       new_bb = get_boundingbox ();
 
       if (old_bb != new_bb)
 	{
-	  // FIXME: maybe this should be converted into a more generic
-	  //        call like "update_gui (this)"
-	  get_backend ().set_figure_position (__myhandle__, new_bb);
 	  if (old_bb(2) != new_bb(2) || old_bb(3) != new_bb(3))
 	    {
 	      execute_resizefcn ();
 	      update_boundingbox ();
 	    }
 	}
 
       mark_modified ();
     }
 }
 
+std::string
+figure::properties::get_title (void) const
+{
+  if (is_numbertitle ())
+    {
+      std::ostringstream os;
+      std::string name = get_name ();
+
+      os << "Figure " << __myhandle__.value ();
+      if (! name.empty ())
+	os << ": " << get_name ();
+
+      return os.str ();
+    }
+  else
+    return get_name ();
+}
+
 octave_value
 figure::get_default (const caseless_str& name) const
 {
   octave_value retval = default_properties.lookup (name);
 
   if (retval.is_undefined ())
     {
       graphics_handle parent = get_parent ();
@@ -3543,44 +3621,48 @@ gh_manager::do_make_graphics_handle (con
   graphics_handle h = get_handle (go_name);
 
   base_graphics_object *go = 0;
 
   go = make_graphics_object_from_type (go_name, h, p);
   
   if (go)
     {
-      handle_map[h] = graphics_object (go);
+      graphics_object obj (go);
+
+      handle_map[h] = obj;
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
 
       // notify backend
       graphics_backend backend = go->get_backend ();
       if (backend)
-        backend.object_created (h);
+        backend.object_created (obj);
     }
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
 	   go_name.c_str ());
 
   return h;
 }
 
 graphics_handle
 gh_manager::do_make_figure_handle (double val)
 {
   graphics_handle h = val;
 
   base_graphics_object* go = new figure (h, 0);
-  handle_map[h] = graphics_object (go);
+  graphics_object obj (go);
+
+  handle_map[h] = obj;
 
   // notify backend
   graphics_backend backend = go->get_backend ();
   if (backend)
-    backend.object_created (h);
+    backend.object_created (obj);
   
   return h;
 }
 
 void
 gh_manager::do_push_figure (const graphics_handle& h)
 {
   do_pop_figure (h);
@@ -4558,26 +4640,21 @@ Undocumented internal function.\n\
 		  figure::properties& fprops = dynamic_cast <figure::properties&> (go.get_properties ());
 
 		  if (fprops.is_modified ())
 		    {
 		      if (fprops.is_visible ())
 			{
 			  gh_manager::unlock ();
 
-			  fprops.get_backend ().redraw_figure (h);
+			  fprops.get_backend ().redraw_figure (go);
 
 			  gh_manager::lock ();
 			}
-		      else if (! fprops.get___plot_stream__ ().is_empty ())
-			{
-			  fprops.close (false);
-			  fprops.set___plot_stream__ (Matrix ());
-			  fprops.set___enhanced__ (false);
-			}
+
 		      fprops.set_modified (false);
 		    }
 		}
 	    }
 
 	  bool do_events = true;
 
 	  if (args.length () == 1)
@@ -4636,17 +4713,17 @@ Undocumented internal function.\n\
 
 			  if (h.ok ())
 			    {
 			      graphics_object go = gh_manager::get_object (h);
 
 			      gh_manager::unlock ();
 
 			      go.get_backend ()
-				.print_figure (h, term, file, mono, debug_file);
+				.print_figure (go, term, file, mono, debug_file);
 
 			      gh_manager::lock ();
 			    }
 			  else
 			    error ("drawnow: nothing to draw");
 			}
 		      else
 			error ("drawnow: invalid debug_file, expected a string value");
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -343,23 +343,23 @@ class property;
 enum listener_mode { POSTSET };
 
 class base_property
 {
 public:
   friend class property;
 
 public:
-  base_property (void) : count (1) { }
+  base_property (void) : id (-1), count (1) { }
 
   base_property (const std::string& s, const graphics_handle& h)
-    : count (1), name (s), parent (h), hidden (false) { }
+    : id (-1), count (1), name (s), parent (h), hidden (false) { }
 
   base_property (const base_property& p)
-    : count (1), name (p.name), parent (p.parent), hidden (p.hidden) { }
+    : id (-1), count (1), name (p.name), parent (p.parent), hidden (p.hidden) { }
 
   virtual ~base_property (void) { }
 
   bool ok (void) const { return parent.ok (); }
 
   std::string get_name (void) const { return name; }
 
   void set_name (const std::string& s) { name = s; }
@@ -367,16 +367,20 @@ public:
   graphics_handle get_parent (void) const { return parent; }
 
   void set_parent (const graphics_handle &h) { parent = h; }
 
   bool is_hidden (void) const { return hidden; }
 
   void set_hidden (bool flag) { hidden = flag; }
 
+  int get_id (void) const { return id; }
+
+  void set_id (int d) { id = d; }
+
   // Sets property value, notifies backend.
   // If do_run is true, runs associated listeners.
   void set (const octave_value& v, bool do_run = true);
   
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
@@ -404,16 +408,17 @@ protected:
     { error ("set: invalid property \"%s\"", name.c_str ()); }
 
 private:
   typedef std::map<listener_mode, octave_value_list> listener_map;
   typedef std::map<listener_mode, octave_value_list>::iterator listener_map_iterator;
   typedef std::map<listener_mode, octave_value_list>::const_iterator listener_map_const_iterator;
 
 private:
+  int id;
   int count;
   std::string name;
   graphics_handle parent;
   bool hidden;
   listener_map listeners;
 };
 
 // ---------------------------------------------------------------------
@@ -1185,16 +1190,22 @@ public:
     { rep->set_parent (h); }
 
   bool is_hidden (void) const
     { return rep->is_hidden (); }
 
   void set_hidden (bool flag)
     { rep->set_hidden (flag); }
 
+  int get_id (void) const
+    { return rep->get_id (); }
+
+  void set_id (int d)
+    { rep->set_id (d); }
+
   octave_value get (void) const
     { return rep->get (); }
 
   void set (const octave_value& val)
     { rep->set (val); }
 
   property& operator = (const octave_value& val)
     {
@@ -1294,39 +1305,37 @@ public:
 
 private:
   plist_map_type plist_map;
 };
 
 // ---------------------------------------------------------------------
 
 class graphics_backend;
+class graphics_object;
 
 class base_graphics_backend
 {
 public:
   friend class graphics_backend;
 
 public:
   base_graphics_backend (const std::string& nm)
       : name (nm), count (0) { }
 
   virtual ~base_graphics_backend (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
-  virtual void close_figure (const octave_value& /*pstream*/) const
-    { gripe_invalid ("close_figure"); }
-
-  virtual void redraw_figure (const graphics_handle&) const
+  virtual void redraw_figure (const graphics_object&) const
     { gripe_invalid ("redraw_figure"); }
 
-  virtual void print_figure (const graphics_handle&, const std::string&,
+  virtual void print_figure (const graphics_object&, const std::string&,
 			     const std::string&, bool,
 			     const std::string& = "") const
     { gripe_invalid ("print_figure"); }
 
   virtual Matrix get_canvas_size (const graphics_handle&) const
     {
       gripe_invalid ("get_canvas_size");
       return Matrix (1, 2, 0.0);
@@ -1339,31 +1348,34 @@ public:
     }
   
   virtual Matrix get_screen_size (void) const
     {
       gripe_invalid ("get_screen_size");
       return Matrix (1, 2, 0.0);
     }
 
-  virtual void set_figure_position (const graphics_handle&, const Matrix&) const
-    { gripe_invalid ("set_figure_position"); }
-
   // Called when graphics object using this backend changes it's property.
-  virtual void property_changed (const graphics_handle&, const std::string&)
+  virtual void property_changed (const graphics_object&, int)
     { gripe_invalid ("property_changed"); }
+
+  void property_changed (const graphics_handle&, int);
   
   // Called when new object using this backend is created.
-  virtual void object_created (const graphics_handle&)
+  virtual void object_created (const graphics_object&)
     { gripe_invalid ("object_created"); }
 
+  void object_created (const graphics_handle&);
+
   // Called when object using this backend is destroyed.
-  virtual void object_destroyed (const graphics_handle&)
+  virtual void object_destroyed (const graphics_object&)
     { gripe_invalid ("object_destroyed"); }
 
+  void object_destroyed (const graphics_handle&);
+
 private:
   std::string name;
   int count;
 
 private:
   void gripe_invalid (const std::string& fname) const
     {
       if (! is_valid ())
@@ -1411,50 +1423,53 @@ public:
 
       return *this;
     }
 
   operator bool (void) const { return rep->is_valid (); }
 
   std::string get_name (void) const { return rep->get_name (); }
 
-  void close_figure (const octave_value& pstream) const
-    { rep->close_figure (pstream); }
-
-  void redraw_figure (const graphics_handle& fh) const
-    { rep->redraw_figure (fh); }
+  void redraw_figure (const graphics_object& go) const
+    { rep->redraw_figure (go); }
   
-  void print_figure (const graphics_handle& fh, const std::string& term,
+  void print_figure (const graphics_object& go, const std::string& term,
 		     const std::string& file, bool mono,
 		     const std::string& debug_file = "") const
-    { rep->print_figure (fh, term, file, mono, debug_file); }
+    { rep->print_figure (go, term, file, mono, debug_file); }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
     { return rep->get_canvas_size (fh); }
 
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
     { return rep->get_screen_size (); }
 
-  void set_figure_position (const graphics_handle& h, const Matrix& pos) const
-    { rep->set_figure_position (h, pos); }
+  // Notifies backend that object't property has changed.
+  void property_changed (const graphics_object& go, int id)
+    { rep->property_changed (go, id); }
   
-  // Notifies backend that object't property has changed.
-  void property_changed (const graphics_handle& h, const std::string& prop)
-    { rep->property_changed (h, prop); }
+  void property_changed (const graphics_handle& h, int id)
+    { rep->property_changed (h, id); }
 
   // Notifies backend that new object was created.
+  void object_created (const graphics_object& go)
+    { rep->object_created (go); }
+  
   void object_created (const graphics_handle& h)
     { rep->object_created (h); }
   
   // Notifies backend that object was destroyed.
   // This is called only for explicitly deleted object. Children are
   // deleted implicitly and backend isn't notified.
+  void object_destroyed (const graphics_object& go)
+    { rep->object_destroyed (go); }
+  
   void object_destroyed (const graphics_handle& h)
     { rep->object_destroyed (h); }
   
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
@@ -1477,17 +1492,16 @@ public:
     const_available_backends_iterator p;
     int i;
     
     for (i = 0,p = available_backends.begin (); p !=  available_backends.end (); p++,i++)
       m(i) = p->first;
 
     return m;
   }
-	
 
 private:
   base_graphics_backend *rep;
 
   static OCTINTERP_API std::map<std::string, graphics_backend> available_backends;
 
   typedef std::map<std::string, graphics_backend>::iterator available_backends_iterator;
   typedef std::map<std::string, graphics_backend>::const_iterator const_available_backends_iterator;
@@ -1518,17 +1532,33 @@ public:
       selectionhighlight ("selectionhighlight", mh, true),
       tag ("tag", mh),
       type ("type", mh, ty),
       userdata ("userdata", mh, Matrix ()),
       visible ("visible", mh, true),
       __modified__ ("__modified__", mh, true),
       __myhandle__ (mh),
       uicontextmenu ("uicontextmenu", mh, graphics_handle ())
-    { }
+    {
+      beingdeleted.set_id (BEINGDELETED);
+      busyaction.set_id (BUSYACTION);
+      buttondownfcn.set_id (BUTTONDOWNFCN);
+      clipping.set_id (CLIPPING);
+      createfcn.set_id (CREATEFCN);
+      deletefcn.set_id (DELETEFCN);
+      handlevisibility.set_id (HANDLEVISIBILITY);
+      hittest.set_id (HITTEST);
+      interruptible.set_id (INTERRUPTIBLE);
+      parent.set_id (PARENT);
+      selected.set_id (SELECTED);
+      selectionhighlight.set_id (SELECTIONHIGHLIGHT);
+      tag.set_id (TAG);
+      userdata.set_id (USERDATA);
+      visible.set_id (VISIBLE);
+    }
 
   virtual ~base_properties (void) { }
 
   virtual std::string graphics_object_name (void) const { return "unknonwn"; }
 
   void mark_modified (void);
 
   void override_defaults (base_graphics_object& obj);
@@ -1782,17 +1812,37 @@ public:
   virtual octave_value get_clim (void) const { return octave_value (); }
   virtual octave_value get_alim (void) const { return octave_value (); }
 
   virtual bool is_xliminclude (void) const { return false; }
   virtual bool is_yliminclude (void) const { return false; }
   virtual bool is_zliminclude (void) const { return false; }
   virtual bool is_climinclude (void) const { return false; }
   virtual bool is_aliminclude (void) const { return false; }
-  
+ 
+  enum
+    {
+      BEINGDELETED = 0,
+      BUSYACTION,
+      BUTTONDOWNFCN,
+      // CHILDREN,
+      CLIPPING,
+      CREATEFCN,
+      DELETEFCN,
+      HANDLEVISIBILITY,
+      HITTEST,
+      INTERRUPTIBLE,
+      PARENT,
+      SELECTED,
+      SELECTIONHIGHLIGHT,
+      TAG,
+      USERDATA,
+      VISIBLE
+    };
+
 protected:
   // properties common to all objects
   bool_property beingdeleted;
   radio_property busyaction;
   callback_property buttondownfcn;
   // FIXME: use a property class for children
   Matrix children;
   bool_property clipping;
@@ -2190,16 +2240,18 @@ private:
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
+    void remove_child (const graphics_handle& h);
+    
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(root_figure)
       handle_property currentfigure S , graphics_handle ()
       handle_property callbackobject Sr , graphics_handle ()
     END_PROPERTIES
 
@@ -2306,31 +2358,30 @@ private:
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API figure : public base_graphics_object
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
-    void close (bool pop = true);
-
     void set_visible (const octave_value& val);
 
     graphics_backend get_backend (void) const
       {
 	if (! backend)
 	  backend = graphics_backend::default_backend ();
 
 	return backend;
       }
 
     void set_backend (const graphics_backend& b) 
     { 
-      close (false);
+      if (backend)
+	backend.object_destroyed (__myhandle__);
       backend = b; 
       __backend__ = b.get_name ();
       __plot_stream__ = Matrix ();
       mark_modified ();
     }
 
     void set___backend__ (const octave_value& val)
     {
@@ -2354,16 +2405,18 @@ public:
 	    error ("set___backend__ must be a string");
 	}
     }
 
     Matrix get_boundingbox (bool internal = false) const;
 
     void set_boundingbox (const Matrix& bb);
 
+    std::string get_title (void) const;
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(figure)
       any_property __plot_stream__ h , Matrix ()
       bool_property __enhanced__ h , "on"
       radio_property nextplot , "new|{add}|replace_children|replace"
       callback_property closerequestfcn , "closereq"
@@ -2439,17 +2492,16 @@ public:
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
     xproperties.override_defaults (*this);
   }
 
   ~figure (void)
   {
     xproperties.delete_children (); 
-    xproperties.close ();
   }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
