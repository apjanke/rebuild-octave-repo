# HG changeset patch
# User jwe
# Date 1094668679 0
#      Wed Sep 08 18:37:59 2004 +0000
# Node ID 80842ad3f85c473bf8cca7d1409f111b7b500734
# Parent  ff29117ce225eaaf7b3f70a72d05d8c13fb50e8c
[project @ 2004-09-08 18:37:58 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,24 @@
 2004-09-08  John W. Eaton  <jwe@octave.org>
 
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op):
+	Save and set curr_caller_function and curr_caller_statement here.
+	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Likewise.
+
+	* pt-stmt.cc (curr_caller_statement): New variable.
+	* pt-stmt.h: Provide decl.	
+
+	* toplev.cc (curr_caller_function): New variable.
+	* toplev.h: Provide decl.
+
+	* input.cc (get_user_input): Print location info before the debug
+	prompt.  From Keith Goodman <kwgoodman@gmail.com>.
+
 	* pt-arg-list.cc (convert_to_const_vector):
 	Unwind-protect index_position before modifying it.
 	Don't protect and set index_position unless stash_object is true.
 
 2004-09-08  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-inline.cc (octave_fcn_inline::save_ascii,
 	octave_fcn_inline::load_ascii, octave_fcn_inline::save_binary,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -530,17 +530,53 @@ get_user_input (const octave_value_list&
 
   int nargin = args.length ();
 
   int read_as_string = 0;
 
   if (nargin == 2)
     read_as_string++;
 
-  std::string prompt ("debug> ");
+  std::string nm;
+  int line = -1;
+
+  // We look at curr_caller_function because curr_function is always
+  // "keyboard".
+
+  if (curr_caller_function)
+    {
+      nm = curr_caller_function->fcn_file_name ();
+
+      if (nm.empty ())
+	nm = curr_caller_function->name ();
+
+      if (curr_statement)
+	line = curr_statement->line ();
+    }
+
+  OSSTREAM buf;
+
+  if (! nm.empty ())
+    {
+      buf << "stopped in " << nm;
+
+      if (line > 0)
+	buf << " at line " << line;
+    }
+    
+  buf << OSSTREAM_ENDS;
+
+  std::string msg = OSSTREAM_STR (buf);
+
+  OSSTREAM_FREEZE (buf);
+
+  if (! msg.empty ())
+    message ("keyboard", msg.c_str ());
+
+  std::string prompt = "debug> ";
 
   if (nargin > 0)
     {
       prompt = args(0).string_value ();
 
       if (error_state)
 	{
 	  error ("input: unrecognized argument");
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -104,16 +104,19 @@ octave_builtin::do_multi_index_op (int n
   if (error_state)
     return retval;
 
   if (any_arg_is_magic_colon (args))
     ::error ("invalid use of colon in function argument list");
   else
     {
       unwind_protect_ptr (curr_function);
+      unwind_protect_ptr (curr_caller_function);
+
+      curr_caller_function = curr_function;
       curr_function = this;
 
       retval = (*f) (args, nargout);
 
       unwind_protect::run ();
     }
 
   return retval;
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -283,16 +283,19 @@ octave_mapper::do_multi_index_op (int, c
     ::error ("%s: too many arguments", name().c_str ());
   else if (nargin < 1)
     ::error ("%s: too few arguments", name().c_str ());
   else
     {
       if (args(0).is_defined ())
 	{
 	  unwind_protect_ptr (curr_function);
+	  unwind_protect_ptr (curr_caller_function);
+
+	  curr_caller_function = curr_function;
 	  curr_function = this;
 
 	  retval = apply (args(0));
 
 	  unwind_protect::run ();
 	}
       else
 	::error ("%s: argument undefined", name().c_str ());
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -388,16 +388,21 @@ octave_user_function::do_multi_index_op 
 
   unwind_protect_ptr (curr_caller_sym_tab);
   curr_caller_sym_tab = curr_sym_tab;
 
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
 
   unwind_protect_ptr (curr_function);
+  unwind_protect_ptr (curr_caller_function);
+  unwind_protect_ptr (curr_caller_statement);
+
+  curr_caller_statement = curr_statement;
+  curr_caller_function = curr_function;
   curr_function = this;
 
   if (! is_nested_function ())
     {
       unwind_protect_ptr (curr_parent_function);
       curr_parent_function = this;
     }
 
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -46,16 +46,19 @@ Software Foundation, 59 Temple Place - S
 #include "pt-walk.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Pointer to the current statement being executed.
 tree_statement *curr_statement = 0;
 
+// Pointer to the current statement being executed in the calling function.
+tree_statement *curr_caller_statement = 0;
+
 // A list of commands to be executed.
 
 tree_statement::~tree_statement (void)
 {
   delete cmd;
   delete expr;
   delete comm;
 }
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -154,15 +154,18 @@ private:
   tree_statement_list (const tree_statement_list&);
 
   tree_statement_list& operator = (const tree_statement_list&);
 };
 
 // Pointer to the current statement being executed.
 extern tree_statement *curr_statement;
 
+// Pointer to the current statement being executed in the calling function.
+extern tree_statement *curr_caller_statement;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -88,16 +88,19 @@ bool octave_interpreter_ready = false;
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 octave_function *curr_function = 0;
 
+// Pointer to caller of curr_function.
+octave_function *curr_caller_function = 0;
+
 // Pointer to parent function that is currently being evaluated.
 octave_function *curr_parent_function = 0;
 
 static void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -43,16 +43,19 @@ extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern octave_function *curr_function;
 
+// Pointer to caller of curr_function.
+extern octave_function *curr_caller_function;
+
 // Pointer to parent function that is currently being evaluated.
 extern octave_function *curr_parent_function;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
