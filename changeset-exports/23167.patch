# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1486553043 -3600
#      Wed Feb 08 12:24:03 2017 +0100
# Node ID a2d6b84ce5c5b7ee9c37603033ecf07f69feb382
# Parent  ea4c27f49a626e23b9aa0db94a0044680a9b0a65
scripts/general/inputParser.m: refactor two xtest cases to normal test cases.

* inputParser.m: The idea of the test function foobar was to validate the
parsing process for empty and non-default input.  Some minor formatting
improvements.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -379,18 +379,18 @@ classdef inputParser < handle
         if (this.FunctionName)
           print_usage (this.FunctionName);
         else
           this.error ("inputParser.parse: not enough input arguments");
         endif
       endif
       pnargin = numel (varargin);
 
-      this.ParameterNames  = fieldnames (this.Parameter);
-      this.SwitchNames     = fieldnames (this.Switch);
+      this.ParameterNames = fieldnames (this.Parameter);
+      this.SwitchNames    = fieldnames (this.Switch);
 
       ## Evaluate the Required arguments first
       nReq = numel (this.Required);
       for idx = 1:nReq
         req = this.Required{idx};
         this.validate_arg (req.name, req.val, varargin{idx});
       endfor
 
@@ -457,17 +457,17 @@ classdef inputParser < handle
                              varargin{vidx});
         elseif (this.is_argname ("Switch", name))
           this.Results.(this.last_name) = true;
         else
           if (vidx++ < pnargin && this.KeepUnmatched)
             this.Unmatched.(name) = varargin{vidx};
           else
             this.error (sprintf ("argument '%s' is not a valid parameter",
-                                  toupper (name)));
+                                 toupper (name)));
           endif
         endif
       endwhile
       ## Add them to the UsingDeafults list
       this.add_missing ("Parameter");
       this.add_missing ("Switch");
 
     endfunction
@@ -714,25 +714,23 @@ endclassdef
 ## addParameter but they use the same codepath.
 %!test
 %! p = inputParser;
 %! addParameter (p, "line", "tree", @(x) any (strcmp (x, {"tree", "circle"})));
 %! addParameter (p, "color", "red", @(x) any (strcmp (x, {"red", "green"})));
 %! p.parse ("line", "circle");
 %! assert ({p.Results.line, p.Results.color}, {"circle", "red"})
 
-%!function r = foobar (varargin)
-%!  p = inputParser ();
-%!  p.addParameter ("foo", "bar", @ischar);
-%!  p.parse (varargin{2:end});
-%!  r = p.Results;
-%!endfunction
-
-%!xtest assert (foobar (), struct ("foo", "bar"))
-%!xtest assert (foobar ([], "foo", "qux"), struct ("foo", "qux"))
+%!test
+%! p = inputParser;
+%! p.addParameter ("foo", "bar", @ischar);
+%! p.parse ();
+%! assert (p.Results, struct ("foo", "bar"))
+%! p.parse ("foo", "qux");
+%! assert (p.Results, struct ("foo", "qux"))
 
 ## FIXME: This somehow works in Matlab
 %!xtest
 %! p = inputParser;
 %! p.addOptional ("op1", "val");
 %! p.addParameter ("line", "tree");
 %! p.parse ("line", "circle");
 %! assert (p.Results, struct ("op1", "val", "line", "circle"));
