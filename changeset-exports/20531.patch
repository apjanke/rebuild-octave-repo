# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1443718200 14400
#      Thu Oct 01 12:50:00 2015 -0400
# Node ID dcfbf4c1c3c8e458f15e8b029102ea482bdb3bf6
# Parent  17e507df10e3a9a50241d6a875415d85d3d35bcf
eliminate trailing whitespace and tabs from sources

* Canvas.cc, Canvas.h, Figure.cc, gl-render.h,
graphics.cc, ov-fcn-handle.cc, ov-java.cc, Range.cc, CmplxCHOL.cc,
dbleCHOL.cc, floatCHOL.cc: Eliminate trailing whitespace and tabs used
for indentation.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -263,17 +263,16 @@ Canvas::canvasToggleGrid (const graphics
                                 || ap.get_zgrid () == "off")
                                ? "on" : "off");
 
           ap.set_xgrid (state);
           ap.set_ygrid (state);
           ap.set_zgrid (state);
 
           redraw (true);
-            
         }
     }
 }
 
 static void
 autoscale_axes (axes::properties& ap)
 {
   ap.clear_zoom_stack ();
@@ -366,18 +365,18 @@ zoom_mode (const graphics_object figObj)
   octave_value ov_zm
     = Utils::properties<figure> (figObj).get___zoom_mode__ ();
 
   octave_scalar_map zm = ov_zm.scalar_map_value ();
 
   return zm.contents ("Motion").string_value ();
 }
 
-void 
-Canvas::select_object (graphics_object obj, QMouseEvent* event, 
+void
+Canvas::select_object (graphics_object obj, QMouseEvent* event,
                        graphics_object &currentObj, graphics_object &axesObj,
                        bool axes_only)
 {
   QList<graphics_object> axesList;
   Matrix children = obj.get_properties ().get_all_children ();
   octave_idx_type num_children = children.numel ();
 
   for (int i = 0; i < num_children; i++)
@@ -402,31 +401,30 @@ Canvas::select_object (graphics_object o
 
   if (axes_only)
     {
       QPoint pt = event->pos ();
 
       for (QList<graphics_object>::ConstIterator it = axesList.begin ();
            it != axesList.end (); ++it)
         {
-          const axes::properties& ap = 
+          const axes::properties& ap =
             dynamic_cast<const axes::properties&> ((*it).get_properties ());
 
           ColumnVector p0 = ap.pixel2coord (pt.x (), pt.y ());
           Matrix xlim = ap.get_xlim ().matrix_value ();
           Matrix ylim = ap.get_ylim ().matrix_value ();
 
-          if (xlim(0) < p0(0) && xlim(1) > p0(0) 
+          if (xlim(0) < p0(0) && xlim(1) > p0(0)
               && ylim(0) < p0(1) && ylim(1) > p0(1))
             {
               axesObj = *it;
               return;
             }
         }
-      
     }
   else if (! currentObj)
     {
       for (QList<graphics_object>::ConstIterator it = axesList.begin ();
            it != axesList.end (); ++it)
         {
           graphics_object go = selectFromAxes (*it, event->pos ());
 
@@ -518,37 +516,37 @@ Canvas::canvasMouseMoveEvent (QMouseEven
           graphics_object figObj (obj.get_ancestor ("figure"));
 
           updateCurrentPoint (figObj, obj, event);
           gh_manager::post_callback (figObj.get_handle (),
                                      "windowbuttonmotionfcn");
         }
     }
 
-  // Update mouse coordinates in the figure window status bar 
-  graphics_object figObj = 
+  // Update mouse coordinates in the figure window status bar
+  graphics_object figObj =
     gh_manager::get_object (m_handle).get_ancestor ("figure");
 
   if (figObj.valid_object ())
     {
       graphics_object currentObj, axesObj;
       select_object (figObj, event, currentObj, axesObj, true);
 
       if (axesObj.valid_object ())
         {
-          // FIXME: should we use signal/slot mechanism instead of 
+          // FIXME: should we use signal/slot mechanism instead of
           //        directly calling parent fig methods
-          Figure* fig = 
+          Figure* fig =
             dynamic_cast<Figure*> (Backend::toolkitObject (figObj));
           axes::properties& ap = Utils::properties<axes> (axesObj);
 
           if (fig)
             fig->updateStatusBar (ap.pixel2coord (event->x (), event->y ()));
         }
-    }    
+    }
 }
 
 void
 Canvas::canvasMouseDoubleClickEvent (QMouseEvent* event)
 {
   // same processing as normal click, but event type is MouseButtonDblClick
   canvasMousePressEvent (event);
 }
@@ -586,17 +584,17 @@ Canvas::canvasMousePressEvent (QMouseEve
   graphics_object obj = gh_manager::get_object (m_handle);
 
   bool isdblclick = (event->type () == QEvent::MouseButtonDblClick);
 
   if (obj.valid_object ())
     {
       graphics_object figObj (obj.get_ancestor ("figure"));
       graphics_object currentObj, axesObj;
-      
+
       select_object (obj, event, currentObj, axesObj);
 
       if (axesObj)
         {
           if (axesObj.get_properties ().handlevisibility_is ("on"))
             Utils::properties<figure> (figObj)
               .set_currentaxes (axesObj.get_handle ().as_octave_value ());
           if (! currentObj)
@@ -628,17 +626,17 @@ Canvas::canvasMousePressEvent (QMouseEve
           updateCurrentPoint (figObj, obj, event);
 
           gh_manager::post_callback (figObj.get_handle (),
                                      "windowbuttondownfcn",
                                      button_number (event));
 
           if (currentObj.get ("buttondownfcn").is_empty ())
             {
-              graphics_object parentObj = 
+              graphics_object parentObj =
                 gh_manager::get_object (currentObj.get_parent ());
 
               if (parentObj.valid_object () && parentObj.isa ("hggroup"))
                 gh_manager::post_callback (parentObj.get_handle (),
                                            "buttondownfcn",
                                            button_number (event));
             }
           else
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -103,18 +103,18 @@ protected:
   bool canvasKeyReleaseEvent (QKeyEvent* event);
 
   void updateCurrentPoint (const graphics_object& fig,
                            const graphics_object& obj, QMouseEvent *event);
   void updateCurrentPoint (const graphics_object& fig,
                            const graphics_object& obj);
 
   void annotation_callback (const octave_value_list& args);
-  void select_object (graphics_object obj, QMouseEvent* event, 
-                      graphics_object &currentObj, graphics_object &axesObj, 
+  void select_object (graphics_object obj, QMouseEvent* event,
+                      graphics_object &currentObj, graphics_object &axesObj,
                       bool axes_only = false);
 
 private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   bool m_clickMode;              // True: ZoomIn, False: ZoomOut
   QPoint m_mouseAnchor;
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -124,39 +124,39 @@ Figure::create (const graphics_object& g
 }
 
 Figure::Figure (const graphics_object& go, FigureWindow* win)
   : Object (go, win), m_blockUpdates (false), m_figureToolBar (0),
     m_menuBar (0), m_innerRect (), m_outerRect (), m_mouseModeGroup (0)
 {
   m_container = new Container (win);
   win->setCentralWidget (m_container);
-  
+
   figure::properties& fp = properties<figure> ();
 
   // Enable mouse tracking
   m_container->setMouseTracking (true);
   foreach (QWidget* w, m_container->findChildren<QWidget*> ())
     { w->setMouseTracking (true); }
-  
+
   // Status bar
   m_statusBar = win->statusBar ();
   int boffset = 0;
 
   // Toolbar and menubar
   createFigureToolBarAndMenuBar ();
   int toffset = 0;
 
   if (fp.toolbar_is ("figure") ||
       (fp.toolbar_is ("auto") && fp.menubar_is ("figure") &&
        ! hasUiControlChildren (fp)))
     {
       toffset += m_figureToolBar->sizeHint ().height ();
       boffset += m_statusBar->sizeHint ().height ();
-    } 
+    }
   else
     {
       m_figureToolBar->hide ();
       m_statusBar->hide ();
     }
 
   if (fp.menubar_is ("figure") || hasUiMenuChildren (fp))
     toffset += m_menuBar->sizeHint ().height () + 1;
@@ -432,17 +432,17 @@ Figure::update (int pId)
           int boffset = 0;
 
           foreach (QToolBar* tb, win->findChildren<QToolBar*> ())
             if (! tb->isHidden ())
               toffset += tb->sizeHint ().height ();
 
           if (! m_menuBar->isHidden ())
             toffset += m_menuBar->sizeHint ().height () + 1;
-          
+
           if (! m_statusBar->isHidden ())
             boffset += m_statusBar->sizeHint ().height () + 1;
 
           win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
         }
       break;
 
     case figure::properties::ID_NAME:
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -103,17 +103,17 @@ protected:
   virtual void set_color (const Matrix& c);
   virtual void set_polygon_offset (bool on, float offset = 0.0f);
   virtual void set_linewidth (float w);
   virtual void set_linestyle (const std::string& s, bool stipple = false);
   virtual void set_clipbox (double x1, double x2, double y1, double y2,
                             double z1, double z2);
   virtual void set_clipping (bool on);
   virtual void set_font (const base_properties& props);
-  virtual void set_interpreter (const caseless_str interp) 
+  virtual void set_interpreter (const caseless_str interp)
   {
     interpreter = interp;
   }
 
   virtual void init_marker (const std::string& m, double size, float width);
   virtual void end_marker (void);
   virtual void draw_marker (double x, double y, double z,
                             const Matrix& lc, const Matrix& fc);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2284,17 +2284,17 @@ graphics_object::set (const Array<std::s
 
 // Set properties given in a struct array
 void
 graphics_object::set (const octave_map& m)
 {
   for (octave_idx_type p = 0; p < m.nfields (); p++)
     {
       // FIXME: Would it be better to extract all the keys at once rather than
-      //        repeatedly call keys() inside a for loop? 
+      //        repeatedly call keys() inside a for loop?
       caseless_str pname = m.keys ()[p];
 
       octave_value val = octave_value (m.contents (pname).elem (m.numel () - 1));
 
       set_value_or_default (pname, val);
 
       if (error_state)
         break;
@@ -3086,17 +3086,17 @@ base_properties::set_parent (const octav
 %!   close (hf);
 %! end_unwind_protect
 */
 
 void
 base_properties::mark_modified (void)
 {
   // Mark existing object as modified
-  __modified__ = "on";  
+  __modified__ = "on";
   // Attempt to mark parent object as modified if it exists
   graphics_object parent_go = gh_manager::get_object (get_parent ());
   if (parent_go)
     parent_go.mark_modified ();
 }
 
 void
 base_properties::override_defaults (base_graphics_object& obj)
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1867,17 +1867,17 @@ functions are ignored in the lookup.\n\
           std::string nm = args(0).string_value ();
           if (nm[0] == '@')
             {
               int parse_status;
               octave_value anon_fcn_handle =
                 eval_string (nm, true, parse_status);
 
               if (parse_status == 0)
-                retval = anon_fcn_handle; 
+                retval = anon_fcn_handle;
             }
           else
             retval = make_fcn_handle (nm, nargin != 2);
         }
       else
         error ("str2func: FCN_NAME must be a string");
     }
   else
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1842,37 +1842,37 @@ octave_java::print (std::ostream& os, bo
 
 void
 octave_java::print_raw (std::ostream& os, bool) const
 {
   os << "<Java object: " << java_classname << ">";
 }
 
 // FIXME: Need routines to actually save/load java objects through Serialize.
-//        See bug #42112. 
+//        See bug #42112.
 
 bool
 octave_java::save_ascii (std::ostream& /* os */)
 {
-  warning ("save: unable to save java objects, skipping"); 
+  warning ("save: unable to save java objects, skipping");
 
   return true;
 }
 
 bool
 octave_java::load_ascii (std::istream& /* is */)
 {
   // Silently skip over java object that was not saved
   return true;
 }
 
 bool
 octave_java::save_binary (std::ostream& /* os */, bool& /* save_as_floats */)
 {
-  warning ("save: unable to save java objects, skipping"); 
+  warning ("save: unable to save java objects, skipping");
 
   return true;
 }
 
 bool
 octave_java::load_binary (std::istream& /* is */, bool /* swap*/,
                           oct_mach_info::float_format /* fmt */)
 {
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -49,17 +49,17 @@ Range::all_elements_are_ints (void) cons
 }
 
 Matrix
 Range::matrix_value (void) const
 {
   if (rng_numel > 0 && cache.numel () == 0)
     {
       cache.resize (1, rng_numel);
-      
+
       // The first element must always be *exactly* the base.
       // E.g, -0 would otherwise become +0 in the loop (-0 + 0*increment).
       cache(0) = rng_base;
 
       double b = rng_base;
       double increment = rng_inc;
       for (octave_idx_type i = 1; i < rng_numel - 1; i++)
         cache(i) = b + i * increment;
diff --git a/liboctave/numeric/CmplxCHOL.cc b/liboctave/numeric/CmplxCHOL.cc
--- a/liboctave/numeric/CmplxCHOL.cc
+++ b/liboctave/numeric/CmplxCHOL.cc
@@ -115,17 +115,17 @@ ComplexCHOL::init (const ComplexMatrix& 
         }
      }
   else
     {
       for (octave_idx_type j = 0; j < n; j++)
         {
           for (octave_idx_type i = 0; i < j; i++)
             chol_mat.xelem (i, j) = 0.0;
-       	  for (octave_idx_type i = j; i < n; i++)
+          for (octave_idx_type i = j; i < n; i++)
             chol_mat.xelem (i, j) = a (i, j);
         }
     }
   Complex *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
diff --git a/liboctave/numeric/dbleCHOL.cc b/liboctave/numeric/dbleCHOL.cc
--- a/liboctave/numeric/dbleCHOL.cc
+++ b/liboctave/numeric/dbleCHOL.cc
@@ -115,17 +115,17 @@ CHOL::init (const Matrix& a, bool upper,
         }
      }
   else
     {
       for (octave_idx_type j = 0; j < n; j++)
         {
           for (octave_idx_type i = 0; i < j; i++)
             chol_mat.xelem (i, j) = 0.0;
-       	  for (octave_idx_type i = j; i < n; i++)
+          for (octave_idx_type i = j; i < n; i++)
             chol_mat.xelem (i, j) = a (i, j);
         }
     }
   double *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
@@ -156,24 +156,23 @@ CHOL::init (const Matrix& a, bool upper,
       double *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (dim_vector (n, 1));
       octave_idx_type *piz = iz.fortran_vec ();
       if (is_upper)
         {
           F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
                                      n, anorm, xrcond, pz, piz, dpocon_info
                                      F77_CHAR_ARG_LEN (1)));
-	}
+        }
       else
         {
           F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
                                      n, anorm, xrcond, pz, piz, dpocon_info
                                      F77_CHAR_ARG_LEN (1)));
-	}
-      
+        }
 
       if (dpocon_info != 0)
         info = -1;
     }
 
   return info;
 }
 
diff --git a/liboctave/numeric/floatCHOL.cc b/liboctave/numeric/floatCHOL.cc
--- a/liboctave/numeric/floatCHOL.cc
+++ b/liboctave/numeric/floatCHOL.cc
@@ -131,23 +131,23 @@ FloatCHOL::init (const FloatMatrix& a, b
   float anorm = 0;
   if (calc_cond)
     anorm = xnorm (a, 1);
 
   if (is_upper)
     {
       F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
                                  n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));   
+                                 F77_CHAR_ARG_LEN (1)));
     }
   else
     {
       F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                                  n, h, n, info
-                                 F77_CHAR_ARG_LEN (1)));   
+                                 F77_CHAR_ARG_LEN (1)));
     }
 
   xrcond = 0.0;
   if (info > 0)
     chol_mat.resize (info - 1, info - 1);
   else if (calc_cond)
     {
       octave_idx_type spocon_info = 0;
@@ -156,23 +156,23 @@ FloatCHOL::init (const FloatMatrix& a, b
       Array<float> z (dim_vector (3*n, 1));
       float *pz = z.fortran_vec ();
       Array<octave_idx_type> iz (dim_vector (n, 1));
       octave_idx_type *piz = iz.fortran_vec ();
       if (is_upper)
         {
           F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
                                      n, anorm, xrcond, pz, piz, spocon_info
-                                     F77_CHAR_ARG_LEN (1)));       
+                                     F77_CHAR_ARG_LEN (1)));
         }
       else
         {
           F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
                                      n, anorm, xrcond, pz, piz, spocon_info
-                                     F77_CHAR_ARG_LEN (1)));       
+                                     F77_CHAR_ARG_LEN (1)));
         }
 
 
       if (spocon_info != 0)
         info = -1;
     }
 
   return info;
@@ -213,17 +213,17 @@ chol2inv_internal (const FloatMatrix& r,
           // faster for that matter :-)), please let me know!
 
           if (n > 1)
             {
               if (is_upper)
                 {
                   for (octave_idx_type j = 0; j < r_nc; j++)
                     for (octave_idx_type i = j+1; i < r_nr; i++)
-                      tmp.xelem (i, j) = tmp.xelem (j, i); 
+                      tmp.xelem (i, j) = tmp.xelem (j, i);
                 }
               else
                 {
                   for (octave_idx_type j = 0; j < r_nc; j++)
                     for (octave_idx_type i = j+1; i < r_nr; i++)
                       tmp.xelem (j, i) = tmp.xelem (i, j);
                 }
             }
