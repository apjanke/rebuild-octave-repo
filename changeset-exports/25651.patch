# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532114808 25200
#      Fri Jul 20 12:26:48 2018 -0700
# Branch stable
# Node ID c759aa39c23afb062b44ac42a04753425277d34c
# Parent  cf452aa01cd536597b6a07a41bbbfa5dbd48bb80
Produce same random number stream for "state" initialized to Inf (bug #54342).

* rand.cc (Frand): Update BIST test for new behavior.
* rand.cc (do_rand): Map Inf values in initialization state vector to 0.0 which
previous versions of Octave used.

diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -261,17 +261,23 @@ do_rand (const octave_value_list& args, 
             else if (ts == "state" || ts == "twister")
               {
                 if (args(idx+1).is_string ()
                     && args(idx+1).string_value () == "reset")
                   octave_rand::reset (fcn);
                 else
                   {
                     ColumnVector s =
-                      ColumnVector (args(idx+1).vector_value(false, true));
+                      ColumnVector (args(idx+1).vector_value (false, true));
+                   
+                    // Backwards compatibility with previous versions of
+                    // Octave which mapped Inf to 0.
+                    for (octave_idx_type i = 0; i < s.numel (); i++)
+                      if (octave::math::isinf (s.xelem (i)))
+                        s.xelem (i) = 0.0;
 
                     octave_rand::state (s, fcn);
                   }
               }
             else
               error ("%s: unrecognized string argument", fcn);
           }
         else
@@ -523,17 +529,17 @@ classes.
 %!function v = __rand_sample__ (initval)
 %!  rand ("state", initval);
 %!  v = rand (1, 6);
 %!endfunction
 %!
 %!assert (__rand_sample__ (-1), __rand_sample__ (0))
 %!assert (__rand_sample__ (-Inf), __rand_sample__ (0))
 %!assert (__rand_sample__ (2^33), __rand_sample__ (intmax ("uint32")))
-%!assert (__rand_sample__ (Inf), __rand_sample__ (intmax ("uint32")))
+%!assert (__rand_sample__ (Inf), __rand_sample__ (0))
 %!assert (__rand_sample__ (NaN), __rand_sample__ (0))
 */
 
 static std::string current_distribution = octave_rand::distribution ();
 
 DEFUN (randn, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} randn (@var{n})
