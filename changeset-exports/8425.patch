# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1230204667 -3600
#      Thu Dec 25 12:31:07 2008 +0100
# Node ID 2e777f5135a3b9718b1622fd63a655f9a8830ecc
# Parent  a84d71abdc5bb445c9706cc767b898b8d23f07b5
support -tabs option for save -ascii

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2008-12-25  Jaroslav Hajek <highegg@gmail.com>
+
+	* load-save.h (load_save_format_type, load_save_format_options): New
+	enums.
+	(load_save_format): Convert to a class.
+	* load-save.cc (do_save(..., const octave_value&,...)): Use fmt.type
+	in switch. Use options of LS_MAT_ASCII.
+	(do_load, write_header): Use format.type in switch.
+	* ls-mat-ascii.h (save_mat_ascii_data): Add tabs option.
+	* ls-mat-ascii.cc (save_mat_ascii_data): Implement it.
+
 2008-12-24  Ben Abbott  <bpabbott@mac.com>
 
 	* DLD-FUNCTIONS/chol.cc: Compare results to 0 in tests.
 	Delete spurious function calls in test block.
 
 2008-12-24  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/eigs.cc: Use "testif HAVE_ARPACK" to skip tests if
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -342,17 +342,17 @@ do_load (std::istream& stream, const std
   for (;;)
     {
       bool global = false;
       octave_value tc;
 
       std::string name;
       std::string doc;
 
-      switch (format)
+      switch (format.type)
 	{
 	case LS_ASCII:
 	  name = read_ascii_data (stream, orig_fname, global, tc, count);
 	  break;
 
 	case LS_BINARY:
 	  name = read_binary_data (stream, swap, flt_fmt, orig_fname,
 				   global, tc, doc);
@@ -923,29 +923,29 @@ glob_pattern_p (const std::string& patte
   return false;
 }
 
 static void
 do_save (std::ostream& os, const octave_value& tc,
 	 const std::string& name, const std::string& help,
 	 bool global, load_save_format fmt, bool save_as_floats)
 {
-  switch (fmt)
+  switch (fmt.type)
     {
     case LS_ASCII:
       save_ascii_data (os, tc, name, global, 0);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_ASCII:
-    case LS_MAT_ASCII_LONG:
-      if (! save_mat_ascii_data (os, tc, fmt == LS_MAT_ASCII ? 8 : 16))
+      if (! save_mat_ascii_data (os, tc, fmt.opts & LS_MAT_ASCII_LONG ? 16 : 8, 
+                                 fmt.opts & LS_MAT_ASCII_TABS))
 	warning ("save: unable to save %s in ASCII format", name.c_str ());
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
       break;
 
 #ifdef HAVE_HDF5
@@ -1043,32 +1043,36 @@ save_vars (std::ostream& os, const std::
 static string_vector
 parse_save_options (const string_vector &argv,
 		    load_save_format &format, bool &append,
 		    bool &save_as_floats, bool &use_zlib)
 {
   string_vector retval;
   int argc = argv.length ();
 
-  bool do_double = false;
+  bool do_double = false, do_tabs = false;
 
   for (int i = 0; i < argc; i++)
     {
       if (argv[i] == "-append")
 	{
 	  append = true;
 	}
       else if (argv[i] == "-ascii" || argv[i] == "-a")
 	{
 	  format = LS_MAT_ASCII;
 	}
       else if (argv[i] == "-double")
 	{
 	  do_double = true;
 	}
+      else if (argv[i] == "-tabs")
+	{
+	  do_tabs = true;
+	}
       else if (argv[i] == "-text" || argv[i] == "-t")
 	{
 	  format = LS_ASCII;
 	}
       else if (argv[i] == "-binary" || argv[i] == "-b")
 	{
 	  format = LS_BINARY;
 	}
@@ -1120,21 +1124,29 @@ parse_save_options (const string_vector 
 #endif
       else
         retval.append (argv[i]);
     }
 
   if (do_double)
     {
       if (format == LS_MAT_ASCII)
-	format = LS_MAT_ASCII_LONG;
+	format.opts |= LS_MAT_ASCII_LONG;
       else
 	warning ("save: \"-double\" option only has an effect with \"-ascii\"");
     }
 
+  if (do_tabs)
+    {
+      if (format == LS_MAT_ASCII)
+	format.opts |= LS_MAT_ASCII_TABS;
+      else
+	warning ("save: \"-tabs\" option only has an effect with \"-ascii\"");
+    }
+
   return retval;
 }
 
 static string_vector
 parse_save_options (const std::string &arg, load_save_format &format, 
 		    bool &append, bool &save_as_floats, 
 		    bool &use_zlib)
 {
@@ -1150,17 +1162,17 @@ parse_save_options (const std::string &a
 
   return parse_save_options (argv, format, append, save_as_floats, 
 			     use_zlib);
 }
 
 void
 write_header (std::ostream& os, load_save_format format)
 {
-  switch (format)
+  switch (format.type)
     {
     case LS_BINARY:
       {
 	os << (oct_mach_info::words_big_endian ()
 	       ? "Octave-1-B" : "Octave-1-L");
 
 	oct_mach_info::float_format flt_fmt =
 	  oct_mach_info::native_float_format ();
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -25,31 +25,55 @@ along with Octave; see the file COPYING.
 #define octave_load_save_h 1
 
 #include <iostream>
 
 #include <string>
 
 class octave_value;
 
-enum load_save_format
+// FIXME: maybe MAT5 and MAT7 should be options to MAT_BINARY.
+// Similarly, save_as_floats may be an option for LS_BINARY, LS_HDF5 etc.
+enum load_save_format_type
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_ASCII,
-    LS_MAT_ASCII_LONG,
     LS_MAT_BINARY,
     LS_MAT5_BINARY,
     LS_MAT7_BINARY,
 #ifdef HAVE_HDF5
     LS_HDF5,
 #endif /* HAVE_HDF5 */
     LS_UNKNOWN
   };
 
+enum load_save_format_options
+{
+  // LS_MAT_ASCII options (not exclusive)
+  LS_MAT_ASCII_LONG = 1,
+  LS_MAT_ASCII_TABS = 2,
+  // LS_MAT_BINARY options
+  LS_MAT_BINARY_V5 = 1,
+  LS_MAT_BINARY_V7,
+  // zero means no option.
+  LS_NO_OPTION = 0  
+};
+
+class load_save_format
+{
+public:
+  load_save_format (load_save_format_type t,
+                    load_save_format_options o = LS_NO_OPTION)
+    : type (t), opts (o) { }
+  operator int (void) const
+    { return type; }
+  int type, opts;
+};
+
 extern void dump_octave_core (void);
 
 extern int
 read_binary_file_header (std::istream& is, bool& swap,
 			 oct_mach_info::float_format& flt_fmt,
 			 bool quiet = false);
 
 extern octave_value
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -324,17 +324,17 @@ read_mat_ascii_data (std::istream& is, c
     error ("load: unable to convert filename `%s' to valid identifier",
 	   filename.c_str ());
 
   return retval;
 }
 
 bool
 save_mat_ascii_data (std::ostream& os, const octave_value& val,
-		     int precision)
+		     int precision, bool tabs)
 {
   bool success = true;
 
   if (val.is_complex_type ())
     warning ("save: omitting imaginary part for ASCII file");
 
   Matrix m = val.matrix_value (true);
 
@@ -348,17 +348,31 @@ save_mat_ascii_data (std::ostream& os, c
     {
       long old_precision = os.precision ();
 
       os.precision (precision);
 
       std::ios::fmtflags oflags
 	= os.flags (static_cast<std::ios::fmtflags> (std::ios::scientific));
 
-      os << m;
+      if (tabs)
+        {
+          for (octave_idx_type i = 0; i < m.rows (); i++)
+            {
+              for (octave_idx_type j = 0; j < m.cols (); j++)
+                {
+                  // Omit leading tabs.
+                  if (j != 0) os << '\t'; 
+                  octave_write_double (os, m (i, j));
+                }
+              os << "\n";
+            }
+        }
+      else
+        os << m;
 
       os.flags (oflags);
 
       os.precision (old_precision);
     }
 
   return (os && success);
 }
diff --git a/src/ls-mat-ascii.h b/src/ls-mat-ascii.h
--- a/src/ls-mat-ascii.h
+++ b/src/ls-mat-ascii.h
@@ -24,17 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_ls_mat_ascii_h 1
 
 extern std::string
 read_mat_ascii_data (std::istream& is, const std::string& filename,
 		     octave_value& tc);
 
 extern bool
 save_mat_ascii_data (std::ostream& os, const octave_value& val_arg,
-		     int precision);
+		     int precision, bool tabs = false);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
