# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1338937885 25200
#      Tue Jun 05 16:11:25 2012 -0700
# Node ID 94a8366f9f89a513578cb4c07cb9d54224f308c0
# Parent  295bd3efc065dd6774bb4c349710a20ff3f06834
datenum.m: Ensure all inputs are of class double (Bug #36587).

* datenum.m: Ensure all inputs are of class double.  Add tests for new behavior.

diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -104,17 +104,22 @@ function [days, secs] = datenum (year, m
       if (nc >= 5) minute = year(:,5); endif
       if (nc >= 4) hour   = year(:,4); endif
       day   = year(:,3);
       month = year(:,2);
       year  = year(:,1);
     endif
   endif
 
-  month(month<1) = 1; ## For compatibility.  Otherwise allow negative months.
+  if (! (isa (year, "double") && isa (month, "double") && isa (day, "double") &&
+         isa (hour, "double") && isa (minute, "double") && isa (second, "double")))
+    error ("datenum: all inputs must be of class double");
+  endif
+
+  month(month<1) = 1;  # For compatibility.  Otherwise allow negative months.
 
   ## Treat fractional months, by converting the fraction to days
   if (floor (month) != month)
     fracmonth = month - floor (month);
     month = floor (month);
     if ((mod (month-1,12) + 1) == 2 && 
         (floor (year/4) - floor (year/100) + floor (year/400)) != 0)
       ## leap year
@@ -190,10 +195,11 @@ endfunction
 %!assert (datenum ("5/19/2001"), 730990)
 %!assert (datenum ({"5/19/2001"}), 730990)
 %!assert (datenum (char ("5/19/2001", "6/6/1944")), [730990; 710189])
 %!assert (datenum ({"5/19/2001", "6/6/1944"}), [730990; 710189])
 
 %% Test input validation
 %!error datenum ()
 %!error datenum (1,2,3,4,5,6,7)
-%!error datenum ([1, 2])
-%!error datenum ([1,2,3,4,5,6,7])
+%!error <expected date vector containing> datenum ([1, 2])
+%!error <expected date vector containing> datenum ([1,2,3,4,5,6,7])
+%!error <all inputs must be of class double> datenum (int32 (2000), int32 (1), int32 (1))
