# HG changeset patch
# User jwe
# Date 845671182 0
#      Fri Oct 18 20:39:42 1996 +0000
# Node ID de430cdd92346e7813ec9100fba4fc515e241930
# Parent  327f65b8ea0c8f42c8fb2661e9461a6d9d441b42
[project @ 1996-10-18 20:39:41 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 Fri Oct 18 13:44:33 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.h (octave_value::index): Undo previous change.
+	* ov.cc (octave_value constructors): Call maybe_mutate() in most
+	cases.
+
+	* ov-complex.cc (octave_complex::index): Avoid implicit type
+	conversion back to scalar type.
+	* ov-scalar.cc (octave_scalar::index): Likewise.
+
 	* ov.h (octave_value::index): Call maybe_mutate() on retval before
 	returning it.
 
 Wed Oct 16 12:00:11 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::struct_elt_val): New optional arg, silent.
 	* ov-base.h, ov-base.cc, ov-struct.h, ov-struct.cc: Likewise, but
 	for the derived classes the arg is required.
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "lo-ieee.h"
 
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-complex.h"
+#include "ov-cx-mat.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 
 int octave_complex::t_id = -1;
 
 const string octave_complex::t_name ("complex scalar");
 
@@ -74,17 +75,21 @@ octave_complex::index (const octave_valu
   else
     {
       // XXX FIXME XXX -- this doesn't solve the problem of
       //
       //   a = i; a([1,1], [1,1], [1,1])
       //
       // and similar constructions.  Hmm...
 
-      octave_value tmp (complex_matrix_value ());
+      // XXX FIXME XXX -- using this constructor avoids narrowing the
+      // 1x1 matrix back to a scalar value.  Need a better solution
+      // to this problem.
+
+      octave_value tmp (new octave_complex_matrix (complex_matrix_value ()));
 
       retval = tmp.index (idx);
     }
 
   return retval;
 }
 
 double
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-scalar.h"
+#include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 int octave_scalar::t_id = -1;
 
 const string octave_scalar::t_name ("scalar");
@@ -63,17 +64,21 @@ octave_scalar::index (const octave_value
   else
     {
       // XXX FIXME XXX -- this doesn't solve the problem of
       //
       //   a = 1; a([1,1], [1,1], [1,1])
       //
       // and similar constructions.  Hmm...
 
-      octave_value tmp (matrix_value ());
+      // XXX FIXME XXX -- using this constructor avoids narrowing the
+      // 1x1 matrix back to a scalar value.  Need a better solution
+      // to this problem.
+
+      octave_value tmp (new octave_matrix (matrix_value ()));
 
       retval = tmp.index (idx);
     }
 
   return retval;
 }
 
 octave_value
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -217,67 +217,124 @@ octave_value::binary_op_as_string (binar
 
 octave_value::octave_value (void)
   : rep (new octave_base_value ()) { rep->count = 1; }
 
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d)) { rep->count = 1; }
 
 octave_value::octave_value (const Matrix& m)
-  : rep (new octave_matrix (m)) { rep->count = 1; }
+  : rep (new octave_matrix (m))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const DiagMatrix& d)
-  : rep (new octave_matrix (d)) { rep->count = 1; }
+  : rep (new octave_matrix (d))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const RowVector& v, int pcv)
-  : rep (new octave_matrix (v, pcv)) { rep->count = 1; }
+  : rep (new octave_matrix (v, pcv))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const ColumnVector& v, int pcv)
-  : rep (new octave_matrix (v, pcv)) { rep->count = 1; }
+  : rep (new octave_matrix (v, pcv))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const Complex& C)
-  : rep (new octave_complex (C)) { rep->count = 1; }
+  : rep (new octave_complex (C))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const ComplexMatrix& m)
-  : rep (new octave_complex_matrix (m)) { rep->count = 1; }
+  : rep (new octave_complex_matrix (m))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const ComplexDiagMatrix& d)
-  : rep (new octave_complex_matrix (d)) { rep->count = 1; }
+  : rep (new octave_complex_matrix (d))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const ComplexRowVector& v, int pcv)
-  : rep (new octave_complex_matrix (v, pcv)) { rep->count = 1; }
+  : rep (new octave_complex_matrix (v, pcv))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const ComplexColumnVector& v, int pcv)
-  : rep (new octave_complex_matrix (v, pcv)) { rep->count = 1; }
+  : rep (new octave_complex_matrix (v, pcv))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const char *s)
-  : rep (new octave_char_matrix_str (s)) { rep->count = 1; }
+  : rep (new octave_char_matrix_str (s))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const string& s)
-  : rep (new octave_char_matrix_str (s)) { rep->count = 1; }
+  : rep (new octave_char_matrix_str (s))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const string_vector& s)
-  : rep (new octave_char_matrix_str (s)) { rep->count = 1; }
+  : rep (new octave_char_matrix_str (s))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const charMatrix& chm, bool is_string)
   : rep (0)
 {
   if (is_string)
     rep = new octave_char_matrix_str (chm);
   else
     rep = new octave_char_matrix (chm);
 
   rep->count = 1;
+  maybe_mutate ();
 }
 
 octave_value::octave_value (double base, double limit, double inc)
-  : rep (new octave_range (base, limit, inc)) { rep->count = 1; }
+  : rep (new octave_range (base, limit, inc))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const Range& r)
-  : rep (new octave_range (r)) { rep->count = 1; }
+  : rep (new octave_range (r))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
 
 octave_value::octave_value (const Octave_map& m)
   : rep (new octave_struct (m)) { rep->count = 1; }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ()) { rep->count = 1; }
 
 octave_value::octave_value (octave_value::all_va_args)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -177,21 +177,17 @@ public:
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
   virtual octave_value index (const octave_value_list& idx) const
-    {
-      octave_value retval = rep->index (idx);
-      retval.maybe_mutate ();
-      return retval;
-    }
+    { return rep->index (idx); }
 
   octave_value& assign (const octave_value_list& idx, const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
   virtual octave_value
   struct_elt_val (const string& nm, bool silent = false) const
