# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449178805 18000
#      Thu Dec 03 16:40:05 2015 -0500
# Node ID c349d4c91ce286482cdbe1947d09ac4f4699020b
# Parent  bb585db6dee2921c17feb16970a71aed1174a62f
eliminate return statements after calls to print_usage

* symtab.cc, sysdep.cc, toplev.cc, tsearch.cc, urlwrite.cc,
variables.cc: Eliminate return statements after calls to print_usage.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1663,16 +1663,19 @@ unless their definitions are removed wit
 If set to @qcode{\"none\"}, Octave will always check time stamps on files to\n\
 determine whether functions defined in function files need to recompiled.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
+  if (nargin > 1)
+    print_usage ();
+
   if (nargout > 0 || nargin == 0)
     {
       switch (Vignore_function_time_stamp)
         {
         case 1:
           retval = "system";
           break;
 
@@ -1694,18 +1697,16 @@ determine whether functions defined in f
         Vignore_function_time_stamp = 2;
       else if (sval == "system")
         Vignore_function_time_stamp = 1;
       else if (sval == "none")
         Vignore_function_time_stamp = 0;
       else
         error ("ignore_function_time_stamp: argument must be one of \"all\", \"system\", or \"none\"");
     }
-  else if (nargin > 1)
-    print_usage ();
 
   return retval;
 }
 
 /*
 %!shared old_state
 %! old_state = ignore_function_time_stamp ();
 %!test
@@ -1747,29 +1748,32 @@ DEFUN (__dump_symtab_info__, args, ,
 Undocumented internal function.\n\
 @seealso{__current_scope__}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
+  if (nargin > 1)
+    print_usage ();
+
   if (nargin == 0)
     {
       symbol_table::dump_functions (octave_stdout);
 
       symbol_table::dump_global (octave_stdout);
 
       std::list<symbol_table::scope_id> lst = symbol_table::scopes ();
 
       for (std::list<symbol_table::scope_id>::const_iterator p = lst.begin ();
            p != lst.end (); p++)
         symbol_table::dump (octave_stdout, *p);
     }
-  else if (nargin == 1)
+  else
     {
       octave_value arg = args(0);
 
       if (arg.is_string ())
         {
           std::string s_arg = arg.string_value ();
 
           if (s_arg == "scopes")
@@ -1795,91 +1799,83 @@ Undocumented internal function.\n\
         }
       else
         {
           int s = arg.xint_value ("__dump_symtab_info__: first argument must be string or scope id");
 
           symbol_table::dump (octave_stdout, s);
         }
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 DEFUN (__get_cmdline_fcn_txt__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __get_cmdline_fcn_txt__ (@var{name})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () == 1)
-    {
-      std::string name = args(0).xstring_value ("__get_cmd_line_function_text__: first argument must be function name");
+  if (args.length () != 1)
+    print_usage ();
 
-      octave_value ov = symbol_table::find_cmdline_function (name);
+  std::string name = args(0).xstring_value ("__get_cmd_line_function_text__: first argument must be function name");
 
-      octave_user_function *f = ov.user_function_value ();
+  octave_value ov = symbol_table::find_cmdline_function (name);
+
+  octave_user_function *f = ov.user_function_value ();
 
-      if (f)
-        {
-          std::ostringstream buf;
-
-          tree_print_code tpc (buf);
+  if (f)
+    {
+      std::ostringstream buf;
 
-          f->accept (tpc);
+      tree_print_code tpc (buf);
 
-          retval = buf.str ();
-        }
+      f->accept (tpc);
+
+      retval = buf.str ();
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 #if 0
 
 // FIXME: should we have functions like this in Octave?
 
 DEFUN (set_variable, args, , "set_variable (NAME, VALUE)")
 {
   octave_value retval;
 
-  if (args.length () == 2)
-    {
-      std::string name = args(0).xstring_value ("set_variable: variable NAME must be a string");
+  if (args.length () != 2)
+    print_usage ();
 
-      symbol_table::assign (name, args(1));
-    }
-  else
-    print_usage ();
+  std::string name = args(0).xstring_value ("set_variable: variable NAME must be a string");
+
+  symbol_table::assign (name, args(1));
 
   return retval;
 }
 
 DEFUN (variable_value, args, , "VALUE = variable_value (NAME)")
 {
   octave_value retval;
 
-  if (args.length () == 1)
-    {
-      std::string name = args(0).xstring_value ("variable_value: variable NAME must be a string");
+  if (args.length () != 1)
+    print_usage ();
 
-      retval = symbol_table::varval (name);
+  std::string name = args(0).xstring_value ("variable_value: variable NAME must be a string");
 
-      if (retval.is_undefined ())
-        error ("variable_value: '%s' is not a variable in the current scope",
-               name.c_str ());
-    }
-  else
-    print_usage ();
+  retval = symbol_table::varval (name);
+
+  if (retval.is_undefined ())
+    error ("variable_value: '%s' is not a variable in the current scope",
+           name.c_str ());
 
   return retval;
 }
 #endif
 
 
 /*
 bug #34497: 'clear -f' does not work for command line functions
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -188,37 +188,35 @@ w32_shell_execute (const std::string& fi
 DEFUN (__open_with_system_app__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __open_with_system_app__ (@var{file})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () == 1)
-    {
-      std::string file = args(0).xstring_value ("__open_with_system_app__: argument must be a filename");
+  if (args.length () != 1)
+    print_usage ();
+
+  std::string file = args(0).xstring_value ("__open_with_system_app__: argument must be a filename");
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
-      HINSTANCE status = ShellExecute (0, 0, file.c_str (), 0, 0,
-                                       SW_SHOWNORMAL);
+  HINSTANCE status = ShellExecute (0, 0, file.c_str (), 0, 0,
+                                   SW_SHOWNORMAL);
 
-      // ShellExecute returns a value greater than 32 if successful.
-      retval = (reinterpret_cast<ptrdiff_t> (status) > 32);
+  // ShellExecute returns a value greater than 32 if successful.
+  retval = (reinterpret_cast<ptrdiff_t> (status) > 32);
 #else
-      octave_value_list tmp
-        = Fsystem (ovl ("xdg-open " + file + " 2> /dev/null",
-                        false, "async"),
-                   1);
+  octave_value_list tmp
+    = Fsystem (ovl ("xdg-open " + file + " 2> /dev/null",
+                    false, "async"),
+               1);
 
-      retval = (tmp(0).double_value () == 0);
+  retval = (tmp(0).double_value () == 0);
 #endif
-    }
-  else
-    print_usage ();
 
   return retval;
 }
 
 #if defined (__MINGW32__)
 static void
 MINGW_init (void)
 {
@@ -609,30 +607,24 @@ For example,\n\
 getenv (\"PATH\")\n\
 @end example\n\
 \n\
 @noindent\n\
 returns a string containing the value of your path.\n\
 @seealso{setenv, unsetenv}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
-  if (nargin == 1)
-    {
-      std::string name = args(0).string_value ();
-
-      retval = octave_env::getenv (name);
-    }
-  else
+  if (nargin != 1)
     print_usage ();
 
-  return retval;
+  std::string name = args(0).string_value ();
+
+  return octave_value (octave_env::getenv (name));
 }
 
 /*
 %!assert (ischar (getenv ("OCTAVE_HOME")))
 */
 
 DEFUN (setenv, args, ,
        "-*- texinfo -*-\n\
@@ -645,28 +637,26 @@ If no @var{value} is specified then the 
 string.\n\
 @seealso{unsetenv, getenv}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2 || nargin == 1)
-    {
-      std::string var = args(0).xstring_value ("setenv: VAR must be a string");
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+
+  std::string var = args(0).xstring_value ("setenv: VAR must be a string");
 
-      std::string val = (nargin == 2
-                         ? args(1).xstring_value ("setenv: VALUE must be a string")
-                         : std::string ());
+  std::string val = (nargin == 2
+                     ? args(1).xstring_value ("setenv: VALUE must be a string")
+                     : std::string ());
 
-      octave_env::putenv (var, val);
-    }
-  else
-    print_usage ();
+  octave_env::putenv (var, val);
 
   return retval;
 }
 
 DEFALIAS (putenv, setenv);
 
 /*
 %!test
@@ -681,30 +671,24 @@ DEFUN (unsetenv, args, ,
 @deftypefn {Built-in Function} {@var{status} =} unsetenv (@var{var})\n\
 Delete the environment variable @var{var}.\n\
 \n\
 Return 0 if the variable was deleted, or did not exist, and -1 if an error\n\
 occurred.\n\
 @seealso{setenv, getenv}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
-  if (nargin == 1)
-    {
-      std::string tmp = args(0).string_value ();
-
-      retval = gnulib::unsetenv (tmp.c_str ());
-    }
-  else
+  if (nargin != 1)
     print_usage ();
 
-  return retval;
+  std::string tmp = args(0).string_value ();
+
+  return octave_value (gnulib::unsetenv (tmp.c_str ()));
 }
 
 /*
 ## Test for unsetenv is in setenv test
 */
 
 // FIXME: perhaps kbhit should also be able to print a prompt?
 
@@ -780,21 +764,18 @@ clc;\n\
 @end example\n\
 @seealso{kbhit, sleep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (! (nargin == 0 || nargin == 1))
-    {
-      print_usage ();
-      return retval;
-    }
+  if (nargin > 1)
+    print_usage ();
 
   if (nargin == 1)
     {
       double dval = args(0).double_value ();
 
       if (! xisnan (dval))
         {
           Fdrawnow ();
@@ -831,30 +812,28 @@ DEFUN (sleep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sleep (@var{seconds})\n\
 Suspend the execution of the program for the given number of seconds.\n\
 @seealso{usleep, pause}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
-    {
-      double dval = args(0).double_value ();
+  if (args.length () != 1)
+    print_usage ();
+
+  double dval = args(0).double_value ();
 
-      if (xisnan (dval))
-        warning ("sleep: NaN is an invalid delay");
-      else
-        {
-          Fdrawnow ();
-          octave_sleep (dval);
-        }
+  if (xisnan (dval))
+    warning ("sleep: NaN is an invalid delay");
+  else
+    {
+      Fdrawnow ();
+      octave_sleep (dval);
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 /*
 %!test
 %! sleep (1);
 
@@ -871,34 +850,32 @@ microseconds.\n\
 On systems where it is not possible to sleep for periods of time less than\n\
 one second, @code{usleep} will pause the execution for @code{round\n\
 (@var{microseconds} / 1e6)} seconds.\n\
 @seealso{sleep, pause}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
-    {
-      double dval = args(0).double_value ();
+  if (args.length () != 1)
+    print_usage ();
+
+  double dval = args(0).double_value ();
 
-      if (xisnan (dval))
-        warning ("usleep: NaN is an invalid delay");
-      else
-        {
-          Fdrawnow ();
+  if (xisnan (dval))
+    warning ("usleep: NaN is an invalid delay");
+  else
+    {
+      Fdrawnow ();
 
-          int delay = NINT (dval);
+      int delay = NINT (dval);
 
-          if (delay > 0)
-            octave_usleep (delay);
-        }
+      if (delay > 0)
+        octave_usleep (delay);
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 /*
 %!test
 %! usleep (1000);
 
@@ -970,31 +947,29 @@ tilde_expand (\"~/bin\")\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1)
-    {
-      octave_value arg = args(0);
+  if (nargin != 1)
+    print_usage ();
 
-      string_vector sv = arg.xall_strings ("tilde_expand: argument must be char or cellstr object");
+  octave_value arg = args(0);
 
-      sv = file_ops::tilde_expand (sv);
+  string_vector sv = arg.xall_strings ("tilde_expand: argument must be char or cellstr object");
 
-      if (arg.is_cellstr ())
-        retval = Cell (arg.dims (), sv);
-      else
-        retval = sv;
-    }
+  sv = file_ops::tilde_expand (sv);
+
+  if (arg.is_cellstr ())
+    retval = Cell (arg.dims (), sv);
   else
-    print_usage ();
+    retval = sv;
 
   return retval;
 }
 
 /*
 %!test
 %! home = get_home_directory ();
 %! assert (tilde_expand ("~/foobar"), [home "/foobar"]);
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1024,122 +1024,120 @@ command shell that is started to run the
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   int nargin = args.length ();
 
-  if (nargin > 0 && nargin < 4)
-    {
-      bool return_output = (nargin == 1 && nargout > 1);
+  if (nargin == 0 || nargin > 3)
+    print_usage ();
 
-      system_exec_type type = et_sync;
+  bool return_output = (nargin == 1 && nargout > 1);
 
-      if (nargin == 3)
-        {
-          std::string type_str = args(2).xstring_value ("system: TYPE must be a string");
+  system_exec_type type = et_sync;
 
-          if (type_str == "sync")
-            type = et_sync;
-          else if (type_str == "async")
-            type = et_async;
-          else
-            {
-              error ("system: TYPE must be \"sync\" or \"async\"");
-              return retval;
-            }
-        }
+  if (nargin == 3)
+    {
+      std::string type_str = args(2).xstring_value ("system: TYPE must be a string");
 
-      if (nargin > 1)
+      if (type_str == "sync")
+        type = et_sync;
+      else if (type_str == "async")
+        type = et_async;
+      else
         {
-          try
-            {
-              return_output = args(1).is_true ();
-            }
-          catch (octave_execution_exception& e)
-            {
-              error (e, "system: RETURN_OUTPUT must be boolean value true or false");
-            }
-        }
-
-      if (return_output && type == et_async)
-        {
-          error ("system: can't return output from commands run asynchronously");
+          error ("system: TYPE must be \"sync\" or \"async\"");
           return retval;
         }
+    }
 
-      std::string cmd_str = args(0).xstring_value ("system: first argument must be a string");
+  if (nargin > 1)
+    {
+      try
+        {
+          return_output = args(1).is_true ();
+        }
+      catch (octave_execution_exception& e)
+        {
+          error (e, "system: RETURN_OUTPUT must be boolean value true or false");
+        }
+    }
+
+  if (return_output && type == et_async)
+    {
+      error ("system: can't return output from commands run asynchronously");
+      return retval;
+    }
+
+  std::string cmd_str = args(0).xstring_value ("system: first argument must be a string");
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
-      // Work around weird double-quote handling on Windows systems.
-      if (type == et_sync)
-        cmd_str = "\"" + cmd_str + "\"";
+  // Work around weird double-quote handling on Windows systems.
+  if (type == et_sync)
+    cmd_str = "\"" + cmd_str + "\"";
 #endif
 
-      if (type == et_async)
-        {
-          // FIXME: maybe this should go in sysdep.cc?
+  if (type == et_async)
+    {
+      // FIXME: maybe this should go in sysdep.cc?
 #ifdef HAVE_FORK
-          pid_t pid = fork ();
+      pid_t pid = fork ();
 
-          if (pid < 0)
-            error ("system: fork failed -- can't create child process");
-          else if (pid == 0)
-            {
-              // FIXME: should probably replace this
-              // call with something portable.
+      if (pid < 0)
+        error ("system: fork failed -- can't create child process");
+      else if (pid == 0)
+        {
+          // FIXME: should probably replace this
+          // call with something portable.
 
-              execl (SHELL_PATH, "sh", "-c", cmd_str.c_str (),
-                     static_cast<void *> (0));
+          execl (SHELL_PATH, "sh", "-c", cmd_str.c_str (),
+                 static_cast<void *> (0));
 
-              panic_impossible ();
-            }
-          else
-            retval(0) = pid;
+          panic_impossible ();
+        }
+      else
+        retval(0) = pid;
 #elif defined (__WIN32__)
-          STARTUPINFO si;
-          PROCESS_INFORMATION pi;
-          ZeroMemory (&si, sizeof (si));
-          ZeroMemory (&pi, sizeof (pi));
-          OCTAVE_LOCAL_BUFFER (char, xcmd_str, cmd_str.length ()+1);
-          strcpy (xcmd_str, cmd_str.c_str ());
+      STARTUPINFO si;
+      PROCESS_INFORMATION pi;
+      ZeroMemory (&si, sizeof (si));
+      ZeroMemory (&pi, sizeof (pi));
+      OCTAVE_LOCAL_BUFFER (char, xcmd_str, cmd_str.length ()+1);
+      strcpy (xcmd_str, cmd_str.c_str ());
 
-          if (! CreateProcess (0, xcmd_str, 0, 0, FALSE, 0, 0, 0, &si, &pi))
-            error ("system: CreateProcess failed -- can't create child process");
-          else
-            {
-              retval(0) = pi.dwProcessId;
-              CloseHandle (pi.hProcess);
-              CloseHandle (pi.hThread);
-            }
-#else
-          error ("system: asynchronous system calls are not supported");
-#endif
-        }
-      else if (return_output)
-        retval = run_command_and_return_output (cmd_str);
+      if (! CreateProcess (0, xcmd_str, 0, 0, FALSE, 0, 0, 0, &si, &pi))
+        error ("system: CreateProcess failed -- can't create child process");
       else
         {
-          int status = system (cmd_str.c_str ());
-
-          // The value in status is as returned by waitpid.  If
-          // the process exited normally, extract the actual exit
-          // status of the command.  Otherwise, return 127 as a
-          // failure code.
+          retval(0) = pi.dwProcessId;
+          CloseHandle (pi.hProcess);
+          CloseHandle (pi.hThread);
+        }
+#else
+      error ("system: asynchronous system calls are not supported");
+#endif
+    }
+  else if (return_output)
+    retval = run_command_and_return_output (cmd_str);
+  else
+    {
+      int status = system (cmd_str.c_str ());
 
-          if (octave_wait::ifexited (status))
-            status = octave_wait::exitstatus (status);
+      // The value in status is as returned by waitpid.  If
+      // the process exited normally, extract the actual exit
+      // status of the command.  Otherwise, return 127 as a
+      // failure code.
 
-          retval(0) = status;
-        }
+      if (octave_wait::ifexited (status))
+        status = octave_wait::exitstatus (status);
+
+      retval(0) = status;
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 /*
 %!test
 %! cmd = ls_command ();
 %! [status, output] = system (cmd);
@@ -1216,37 +1214,34 @@ from the list, so if a function was plac
 @code{atexit}, it must also be removed from the list multiple times.\n\
 @seealso{quit}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string arg = args(0).xstring_value ("atexit: FCN argument must be a string");
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
 
-      bool add_mode = true;
+  std::string arg = args(0).xstring_value ("atexit: FCN argument must be a string");
 
-      if (nargin == 2)
-        add_mode = args(1).xbool_value ("atexit: FLAG argument must be a logical value");
+  bool add_mode = (nargin == 2)
+    ? args(1).xbool_value ("atexit: FLAG argument must be a logical value")
+    : true;
 
-      if (add_mode)
-        octave_add_atexit_function (arg);
-      else
-        {
-          bool found = octave_remove_atexit_function (arg);
+  if (add_mode)
+    octave_add_atexit_function (arg);
+  else
+    {
+      bool found = octave_remove_atexit_function (arg);
 
-          if (nargout > 0)
-            retval(0) = found;
-        }
+      if (nargout > 0)
+        retval(0) = found;
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 DEFUN (octave_config_info, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} octave_config_info ()\n\
 @deftypefnx {Built-in Function} {} octave_config_info (@var{option})\n\
@@ -1516,36 +1511,37 @@ specified option.\n\
       m.assign ("mac", octave_value (mac_system));
       m.assign ("windows", octave_value (windows_system));
 
       initialized = true;
     }
 
   int nargin = args.length ();
 
+  if (nargin > 1)
+    print_usage ();
+
   if (nargin == 1)
     {
       std::string arg = args(0).string_value ();
 
       if (m.isfield (arg))
         {
           Cell c = m.contents (arg);
 
           if (c.is_empty ())
             error ("octave_config_info: no info for '%s'", arg.c_str ());
           else
             retval = c(0);
         }
       else
         error ("octave_config_info: invalid parameter '%s'", arg.c_str ());
     }
-  else if (nargin == 0)
+  else
     retval = m;
-  else
-    print_usage ();
 
   return retval;
 }
 
 /*
 %!assert (ischar (octave_config_info ("version")))
 %!test
 %! x = octave_config_info ();
diff --git a/libinterp/corefcn/tsearch.cc b/libinterp/corefcn/tsearch.cc
--- a/libinterp/corefcn/tsearch.cc
+++ b/libinterp/corefcn/tsearch.cc
@@ -65,25 +65,24 @@ DEFUN (tsearch, args, ,
 Search for the enclosing Delaunay convex hull.\n\
 \n\
 For @code{@var{t} = delaunay (@var{x}, @var{y})}, finds the index in @var{t}\n\
 containing the points @code{(@var{xi}, @var{yi})}.  For points outside the\n\
 convex hull, @var{idx} is NaN.\n\
 @seealso{delaunay, delaunayn}\n\
 @end deftypefn")
 {
-  const double eps=1.0e-12;
+  octave_value_list retval;
 
-  octave_value_list retval;
+  const double eps = 1.0e-12;
+
   const int nargin = args.length ();
+
   if (nargin != 5)
-    {
-      print_usage ();
-      return retval;
-    }
+    print_usage ();
 
   const ColumnVector x (args(0).vector_value ());
   const ColumnVector y (args(1).vector_value ());
   const Matrix elem (args(2).matrix_value ());
   const ColumnVector xi (args(3).vector_value ());
   const ColumnVector yi (args(4).vector_value ());
 
   const octave_idx_type nelem = elem.rows ();
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -335,20 +335,17 @@ urlwrite (\"http://www.google.com/search
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   // verify arguments
   if (nargin != 2 && nargin != 4)
-    {
-      print_usage ();
-      return retval;
-    }
+    print_usage ();
 
   std::string url = args(0).xstring_value ("urlwrite: URL must be a string");
 
   // name to store the file if download is succesful
   std::string filename = args(1).xstring_value ("urlwrite: LOCALFILE must be a string");
 
   std::string method;
   Array<std::string> param;
@@ -472,20 +469,17 @@ s = urlread (\"http://www.google.com/sea
 {
   // Octave's return value
   octave_value_list retval;
 
   int nargin = args.length ();
 
   // verify arguments
   if (nargin != 1 && nargin != 3)
-    {
-      print_usage ();
-      return retval;
-    }
+    print_usage ();
 
   std::string url = args(0).xstring_value ("urlread: URL must be a string");
 
   std::string method;
   Array<std::string> param;
 
   if (nargin == 3)
     {
@@ -533,45 +527,35 @@ s = urlread (\"http://www.google.com/sea
 
 DEFUN (__ftp__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{handle} =} __ftp__ (@var{host})\n\
 @deftypefnx {Loadable Function} {@var{handle} =} __ftp__ (@var{host}, @var{username}, @var{password})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
-  std::string host;
-  std::string user = "anonymous";
-  std::string passwd = "";
 
   if (nargin < 1 || nargin > 3)
-    {
-      print_usage ();
-      return retval;
-    }
-  else
-    {
-      host = args(0).xstring_value ("__ftp__: HOST must be a string");
+    print_usage ();
+
+  std::string host = args(0).xstring_value ("__ftp__: HOST must be a string");
 
-      if (nargin > 1)
-        user = args(1).xstring_value ("__ftp__: USER must be a string");
+  std::string user = (nargin > 1)
+    ? args(1).xstring_value ("__ftp__: USER must be a string")
+    : std::string ("anonymous");
 
-      if (nargin > 2)
-        passwd = args(2).xstring_value ("__ftp__: PASSWD must be a string");
+  std::string passwd = (nargin > 2)
+    ? args(2).xstring_value ("__ftp__: PASSWD must be a string")
+    : std::string ();
 
-      curl_handle ch
-        = ch_manager::make_curl_handle (host, user, passwd, octave_stdout);
+  curl_handle ch
+    = ch_manager::make_curl_handle (host, user, passwd, octave_stdout);
 
-      retval = ch.value ();
-    }
-
-  return retval;
+  return octave_value (ch.value ());
 }
 
 DEFUN (__ftp_pwd__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_pwd__ (@var{handle})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -326,20 +326,17 @@ looks_like_struct (const std::string& te
 static octave_value
 do_isglobal (const octave_value_list& args)
 {
   octave_value retval = false;
 
   int nargin = args.length ();
 
   if (nargin != 1)
-    {
-      print_usage ();
-      return retval;
-    }
+    print_usage ();
 
   if (! args(0).is_string ())
     {
       error ("isglobal: NAME must be a string");
       return retval;
     }
 
   std::string name = args(0).string_value ();
@@ -590,34 +587,32 @@ not on the search path you should use so
 \n\
 @seealso{file_in_loadpath, file_in_path, dir_in_loadpath, stat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   int nargin = args.length ();
 
-  if (nargin == 1 || nargin == 2)
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+
+  std::string name = args(0).xstring_value ("exist: NAME must be a string");
+
+  if (nargin == 2)
     {
-      std::string name = args(0).xstring_value ("exist: NAME must be a string");
-
-      if (nargin == 2)
-        {
-          std::string type = args(1).xstring_value ("exist: TYPE must be a string");
-
-          if (type == "class")
-            warning ("exist: \"class\" type argument is not implemented");
-
-          retval = symbol_exist (name, type);
-        }
-      else
-        retval = symbol_exist (name);
+      std::string type = args(1).xstring_value ("exist: TYPE must be a string");
+
+      if (type == "class")
+        warning ("exist: \"class\" type argument is not implemented");
+
+      retval = symbol_exist (name, type);
     }
   else
-    print_usage ();
+    retval = symbol_exist (name);
 
   return retval;
 }
 
 /*
 %!shared dirtmp, __var1
 %! dirtmp = P_tmpdir ();
 %! __var1 = 1;
@@ -946,16 +941,17 @@ set_internal_variable (int& var, const o
                        int nargout, const char *nm, const char **choices)
 {
   octave_value retval;
   int nchoices = 0;
   while (choices[nchoices] != 0)
     nchoices++;
 
   int nargin = args.length ();
+
   assert (var < nchoices);
 
   if (nargout > 0 || nargin == 0)
     retval = choices[var];
 
   if (wants_local_change (args, nargin))
     {
       if (! try_local_protect (var))
@@ -1841,28 +1837,24 @@ from a file.\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
 matching the given patterns.\n\
 @seealso{whos, isglobal, isvarname, exist, regexp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (nargout < 2)
-    {
-      int argc = args.length () + 1;
-
-      string_vector argv = args.make_argv ("who");
-
-      retval = do_who (argc, argv, nargout == 1);
-    }
-  else
+  if (nargout > 1)
     print_usage ();
 
-  return retval;
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("who");
+
+  return do_who (argc, argv, nargout == 1);
 }
 
 DEFUN (whos, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} whos\n\
 @deftypefnx {Command} {} whos pattern @dots{}\n\
 @deftypefnx {Command} {} whos option pattern @dots{}\n\
 @deftypefnx {Built-in Function} {S =} whos (\"pattern\", @dots{})\n\
@@ -1921,28 +1913,24 @@ If @code{whos} is called as a function, 
 variable names matching the given patterns.  Fields in the structure\n\
 describing each variable are: name, size, bytes, class, global, sparse,\n\
 complex, nesting, persistent.\n\
 @seealso{who, whos_line_format}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (nargout < 2)
-    {
-      int argc = args.length () + 1;
-
-      string_vector argv = args.make_argv ("whos");
-
-      retval = do_who (argc, argv, nargout == 1, true);
-    }
-  else
+  if (nargout > 1)
     print_usage ();
 
-  return retval;
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("whos");
+
+  return do_who (argc, argv, nargout == 1, true);
 }
 
 // Defining variables.
 
 void
 bind_ans (const octave_value& val, bool print)
 {
   static std::string ans = "ans";
@@ -2023,60 +2011,61 @@ DEFUN (mlock, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mlock ()\n\
 Lock the current function into memory so that it can't be cleared.\n\
 @seealso{munlock, mislocked, persistent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 0)
-    {
-      octave_function *fcn = octave_call_stack::caller ();
-
-      if (fcn)
-        fcn->lock ();
-      else
-        error ("mlock: invalid use outside a function");
-    }
+  if (args.length () != 0)
+    print_usage ();
+
+  octave_function *fcn = octave_call_stack::caller ();
+
+  if (fcn)
+    fcn->lock ();
   else
-    print_usage ();
+    error ("mlock: invalid use outside a function");
 
   return retval;
 }
 
 DEFUN (munlock, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} munlock ()\n\
 @deftypefnx {Built-in Function} {} munlock (@var{fcn})\n\
 Unlock the named function @var{fcn}.\n\
 \n\
 If no function is named then unlock the current function.\n\
 @seealso{mlock, mislocked, persistent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () == 1)
+  int nargin = args.length ();
+
+  if (nargin > 1)
+    print_usage ();
+
+  if (nargin == 1)
     {
       std::string name = args(0).xstring_value ("munlock: FCN must be a string");
 
       munlock (name);
     }
-  else if (args.length () == 0)
+  else
     {
       octave_function *fcn = octave_call_stack::caller ();
 
       if (fcn)
         fcn->unlock ();
       else
         error ("munlock: invalid use outside a function");
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 
 DEFUN (mislocked, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mislocked ()\n\
@@ -2084,33 +2073,36 @@ DEFUN (mislocked, args, ,
 Return true if the named function @var{fcn} is locked.\n\
 \n\
 If no function is named then return true if the current function is locked.\n\
 @seealso{mlock, munlock, persistent}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () == 1)
+  int nargin = args.length ();
+
+  if (nargin > 1)
+    print_usage ();
+
+  if (nargin == 1)
     {
       std::string name = args(0).xstring_value ("mislocked: FCN must be a string");
 
       retval = mislocked (name);
     }
-  else if (args.length () == 0)
+  else
     {
       octave_function *fcn = octave_call_stack::caller ();
 
       if (fcn)
         retval = fcn->islocked ();
       else
         error ("mislocked: invalid use outside a function");
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 // Deleting names from the symbol tables.
 
 static inline bool
 name_matches_any_pattern (const std::string& nm, const string_vector& argv,
@@ -2321,20 +2313,17 @@ do_matlab_compatible_clear (const string
         }
     }
 }
 
 #define CLEAR_OPTION_ERROR(cond) \
   do \
     { \
       if (cond) \
-        { \
-          print_usage (); \
-          return retval; \
-        } \
+        print_usage (); \
     } \
   while (0)
 
 DEFUN (clear, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} clear [options] pattern @dots{}\n\
 Delete the names matching the given patterns from the symbol table.\n\
 \n\
@@ -2659,26 +2648,22 @@ void maybe_missing_function_hook (const 
 }
 
 DEFUN (__varval__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __varval__ (@var{name})\n\
 Return the value of the variable @var{name} directly from the symbol table.\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 1)
     print_usage ();
 
   std::string name = args(0).xstring_value ("__varval__: first argument must be a variable name");
 
-  retval = symbol_table::varval (args(0).string_value ());
-
-  return retval;
+  return symbol_table::varval (args(0).string_value ());
 }
 
 static std::string Vmissing_component_hook;
 
 DEFUN (missing_component_hook, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} missing_component_hook ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} missing_component_hook (@var{new_val})\n\
