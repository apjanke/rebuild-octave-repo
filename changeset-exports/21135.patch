# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1453488321 18000
#      Fri Jan 22 13:45:21 2016 -0500
# Node ID 95da3bc8a281962c480640391cbc8581066f7cd9
# Parent  2e5c1f766ac95112ee6ea641447e3c3fce6cbcfe
supress deprecated function warnings in Octave code

* lo-array-gripes.cc, gripes.cc: Use GCC pragmas to suppress
deprecated function warnings.

diff --git a/libinterp/corefcn/gripes.cc b/libinterp/corefcn/gripes.cc
--- a/libinterp/corefcn/gripes.cc
+++ b/libinterp/corefcn/gripes.cc
@@ -194,17 +194,26 @@ gripe_user_returned_invalid (const char 
   error ("%s: user-supplied function returned invalid value", name);
 }
 
 void
 gripe_user_supplied_eval (const char *name)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_user_supplied_eval (e, name);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_user_supplied_eval (octave_execution_exception& e,
                           const char *name)
 {
   error (e, "%s: evaluation of user-supplied function failed", name);
 }
@@ -216,17 +225,26 @@ gripe_warn_complex_cmp (void)
                    "comparing complex numbers is not supported in Matlab");
 }
 
 void
 gripe_wrong_type_arg (const char *name, const char *s, bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, s, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const char *s, bool is_error)
 {
   if (is_error)
     error (e, "%s: wrong type argument '%s'", name, s);
@@ -234,68 +252,131 @@ gripe_wrong_type_arg (octave_execution_e
     warning ("%s: wrong type argument '%s'", name, s);
 }
 
 void
 gripe_wrong_type_arg (const char *name, const std::string& s, bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, s.c_str (), is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const std::string& s, bool is_error)
 {
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, s.c_str (), is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
                       bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, tc, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *name, const octave_value& tc,
                       bool is_error)
 {
   std::string type = tc.type_name ();
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, type, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
                       bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name, tc, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& name, const octave_value& tc,
                       bool is_error)
 {
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, name.c_str (), tc, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (const char *s, bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, s, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const char *s, bool is_error)
 {
   if (is_error)
     error (e, "wrong type argument '%s'", s);
@@ -303,41 +384,77 @@ gripe_wrong_type_arg (octave_execution_e
     warning ("wrong type argument '%s'", s);
 }
 
 void
 gripe_wrong_type_arg (const std::string& s, bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, s, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const std::string& s, bool is_error)
 {
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, s.c_str (), is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (const octave_value& tc, bool is_error)
 {
   octave_execution_exception e;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, tc, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc, bool is_error)
 {
   std::string type = tc.type_name ();
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_wrong_type_arg (e, type, is_error);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op)
 {
   std::string type = op.type_name ();
   error ("invalid operand '%s' for binary operator", type.c_str ());
 }
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -142,26 +142,46 @@ gripe_invalid_index (const std::string& 
 }
 
 void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd,
                      octave_idx_type dim, const std::string& var)
 {
   std::ostringstream buf;
   buf << n + 1;
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_invalid_index (buf.str (), nd, dim, var);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 gripe_invalid_index (double n, octave_idx_type nd, octave_idx_type dim,
                      const std::string& var)
 {
   std::ostringstream buf;
   buf << n + 1;
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   gripe_invalid_index (buf.str (), nd, dim, var);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 
 // Gripe and exception for read access beyond the bounds of an array.
 
 class out_of_range : public index_exception
 {
 public:
