# HG changeset patch
# User jwe
# Date 1095996144 0
#      Fri Sep 24 03:22:24 2004 +0000
# Node ID 160365410ad4b0e2d3045d226d2db897379bd167
# Parent  1ec26bdb120ccd2736007e498a79ba87cb77e4bb
[project @ 2004-09-24 03:22:23 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,31 @@
+2004-09-23  John W. Eaton  <jwe@octave.org>
+
+	* mx-ops: Include scalar zero value in type definitions.
+	Delete zero information from ops section.
+	* mk-ops.awk: Use type-specific zero info.
+
+	* mx-op-defs.h (MS_BOOL_OP, SM_BOOL_OP, MM_BOOL_OP, NDS_BOOL_OP,
+	SND_BOOL_OP, NDND_BOOL_OP): Args now include zero values for both
+	LHS and RHS.
+	(MS_BOOL_OPS2, SM_BOOL_OPS2, MM_BOOL_OPS2, NDS_BOOL_OPS2,
+	SND_BOOL_OPS2, NDND_BOOL_OPS2): New macros.
+	(MS_BOOL_OPS, SM_BOOL_OPS, MM_BOOL_OPS, NDS_BOOL_OPS,
+	SND_BOOL_OPS, NDND_BOOL_OPS): Define in terms of 2-zero versions.
+
+	* idx-vector.h (idx_vector::idx_vector_rep::idx_vector_rep (const
+	intNDArray<U>&)): Use explicit as_double () conversion in call to
+	tree_to_mat_idx.
+
+	* oct-inttypes.h (octave_int<T>::operator float): New conversion.
+	(pow): Instead of "if (b_val)", use "if (b_val != zero)".
+	Likewise for the "if (b_val & one)" test.
+	(operator <<, operator >>): Type of retval is octave_int<T1>, not T1.
+
 2004-09-23  David Bateman  <dbateman@free.fr>
 
 	* oct-inttypes.h (OCTAVE_INT_DOUBLE_CMP_OP, OCTAVE_DOUBLE_INT_CMP_OP):
 	New macros.  Use them to define mixed intX-double and double-intX ops.
 
 2004-09-22  Federico Zenith  <zenith@chemeng.ntnu.no>
 
 	* DASPK-opts.in, DASRT-opts.in, ODESSA-opts.in:
diff --git a/liboctave/mk-ops.awk b/liboctave/mk-ops.awk
--- a/liboctave/mk-ops.awk
+++ b/liboctave/mk-ops.awk
@@ -21,18 +21,19 @@ BEGIN {
       declare_types = 0;
     }
   next;
 } {
   if (declare_types)
     {
       ntypes++;
 
-      if (NF == 5)
+      if (NF == 6)
         {
+          scalar_zero_val[ntypes] = $6;
           fwd_decl_ok[ntypes] = $5 == "YES";
           header[ntypes] = $4 == "NONE" ? "" : $4;
           class[ntypes] = $3;
           type[ntypes] = $2;
           tag[ntypes] = $1;
           rev_tag[$1] = ntypes;
         }
       else
@@ -57,18 +58,16 @@ BEGIN {
           rhs_conv = cmp_ops ? $(++n) : "";
 
 	  if (lhs_conv == "NONE")
 	    lhs_conv = "";
 
 	  if (rhs_conv == "NONE")
 	    rhs_conv = "";
 
-	  zero_val = (NF > n) ? $(++n) : "";
-
 	  k = 0
 	  while (NF > n)
 	    bool_headers[k++] = $(++n);
 
 	  cc_file = sprintf ("%s-%s-%s.cc", prefix, lhs_tag, rhs_tag);
 	  h_file = sprintf ("%s-%s-%s.h", prefix, lhs_tag, rhs_tag);
 
 	  if (list_cc_files)
@@ -94,16 +93,20 @@ BEGIN {
 	  result_num = rev_tag[result_tag];
 	  lhs_num = rev_tag[lhs_tag];
 	  rhs_num = rev_tag[rhs_tag];
 
 	  result_type = type[result_num];
 	  lhs_type = type[lhs_num];
           rhs_type = type[rhs_num];
 
+	  result_scalar_zero_val = scalar_zero_val[result_num];
+          lhs_scalar_zero_val = scalar_zero_val[lhs_num];
+          rhs_scalar_zero_val = scalar_zero_val[rhs_num];
+
 	  result_header = header[result_num];
 	  lhs_header = header[lhs_num];
           rhs_header = header[rhs_num];
 
 	  lhs_class = class[lhs_num];
 	  rhs_class = class[rhs_num];
 
 	  print "// DO NOT EDIT -- generated by mk-ops" > h_file;
@@ -180,30 +183,31 @@ BEGIN {
           if (rhs_header && ! (rhs_header == lhs_header || rhs_header == result_header))
 	    printf ("#include \"%s\"\n", rhs_header) >> cc_file;
 
 	  if (bin_ops)
             {
               if ((lhs_class == "DM" && rhs_class == "M") || (lhs_class == "M" && rhs_class == "DM"))
                 printf ("%s%s_BIN_OPS (%s, %s, %s, %s)\n",
 		        lhs_class, rhs_class, result_type,
-			lhs_type, rhs_type, zero_val) >> cc_file
+		        lhs_type, rhs_type, result_scalar_zero_val) >> cc_file
               else
                 printf ("%s%s_BIN_OPS (%s, %s, %s)\n",
 		        lhs_class, rhs_class, result_type,
 			lhs_type, rhs_type) >> cc_file
             }
 
           if (cmp_ops)
             printf ("%s%s_CMP_OPS (%s, %s, %s, %s)\n", lhs_class, rhs_class,
 	            lhs_type, lhs_conv, rhs_type, rhs_conv) >> cc_file
 
           if (bool_ops)
-            printf ("%s%s_BOOL_OPS (%s, %s, %s)\n", lhs_class, rhs_class,
-	            lhs_type, rhs_type, zero_val) >> cc_file
+            printf ("%s%s_BOOL_OPS2 (%s, %s, %s, %s)\n", lhs_class, rhs_class,
+	            lhs_type, rhs_type, lhs_scalar_zero_val,
+	            rhs_scalar_zero_val) >> cc_file
 
 
           close (cc_file);
         }
       else
         printf ("skipping line %d: %s\n", NR, $0); 
     }
 }
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -209,40 +209,43 @@ class boolNDArray;
   MS_CMP_OP (mx_el_gt, >,  M, CM, S, CS) \
   MS_CMP_OP (mx_el_eq, ==, M,   , S,   ) \
   MS_CMP_OP (mx_el_ne, !=, M,   , S,   )
 
 #define MS_BOOL_OP_DECLS(M, S) \
   BOOL_OP_DECL (mx_el_and, M, S); \
   BOOL_OP_DECL (mx_el_or,  M, S); \
 
-#define MS_BOOL_OP(F, OP, M, S, ZERO) \
+#define MS_BOOL_OP(F, OP, M, S, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const M& m, const S& s) \
   { \
     boolMatrix r; \
  \
     int nr = m.rows (); \
     int nc = m.cols (); \
  \
     if (nr != 0 && nc != 0) \
       { \
         r.resize (nr, nc); \
  \
         for (int j = 0; j < nc; j++) \
           for (int i = 0; i < nr; i++) \
-	    r.elem(i, j) = (m.elem(i, j) != ZERO) OP (s != ZERO); \
+	    r.elem(i, j) = (m.elem(i, j) != LHS_ZERO) OP (s != RHS_ZERO); \
       } \
  \
     return r; \
   }
 
+#define MS_BOOL_OPS2(M, S, LHS_ZERO, RHS_ZERO) \
+  MS_BOOL_OP (mx_el_and, &&, M, S, LHS_ZERO, RHS_ZERO) \
+  MS_BOOL_OP (mx_el_or,  ||, M, S, LHS_ZERO, RHS_ZERO)
+
 #define MS_BOOL_OPS(M, S, ZERO) \
-  MS_BOOL_OP (mx_el_and, &&, M, S, ZERO) \
-  MS_BOOL_OP (mx_el_or,  ||, M, S, ZERO)
+  MS_BOOL_OPS2(M, S, ZERO, ZERO)
 
 #define MS_OP_DECLS(R, M, S) \
   MS_BIN_OP_DECLS (R, M, S) \
   MS_CMP_OP_DECLS (M, S) \
   MS_BOOL_OP_DECLS (M, S) \
 
 // scalar by matrix operations.
 
@@ -309,40 +312,43 @@ class boolNDArray;
   SM_CMP_OP (mx_el_gt, >,  S, CS, M, CM) \
   SM_CMP_OP (mx_el_eq, ==, S,   , M,   ) \
   SM_CMP_OP (mx_el_ne, !=, S,   , M,   )
 
 #define SM_BOOL_OP_DECLS(S, M) \
   BOOL_OP_DECL (mx_el_and, S, M); \
   BOOL_OP_DECL (mx_el_or,  S, M); \
 
-#define SM_BOOL_OP(F, OP, S, M, ZERO) \
+#define SM_BOOL_OP(F, OP, S, M, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const S& s, const M& m) \
   { \
     boolMatrix r; \
  \
     int nr = m.rows (); \
     int nc = m.cols (); \
  \
     if (nr != 0 && nc != 0) \
       { \
         r.resize (nr, nc); \
  \
         for (int j = 0; j < nc; j++) \
           for (int i = 0; i < nr; i++) \
-	    r.elem(i, j) = (s != ZERO) OP (m.elem(i, j) != ZERO); \
+	    r.elem(i, j) = (s != LHS_ZERO) OP (m.elem(i, j) != RHS_ZERO); \
       } \
  \
     return r; \
   }
 
+#define SM_BOOL_OPS2(S, M, LHS_ZERO, RHS_ZERO) \
+  SM_BOOL_OP (mx_el_and, &&, S, M, LHS_ZERO, RHS_ZERO) \
+  SM_BOOL_OP (mx_el_or,  ||, S, M, LHS_ZERO, RHS_ZERO)
+
 #define SM_BOOL_OPS(S, M, ZERO) \
-  SM_BOOL_OP (mx_el_and, &&, S, M, ZERO) \
-  SM_BOOL_OP (mx_el_or,  ||, S, M, ZERO)
+  SM_BOOL_OPS2(S, M, ZERO, ZERO)
 
 #define SM_OP_DECLS(R, S, M) \
   SM_BIN_OP_DECLS (R, S, M) \
   SM_CMP_OP_DECLS (S, M) \
   SM_BOOL_OP_DECLS (S, M) \
 
 // matrix by matrix operations.
 
@@ -424,17 +430,17 @@ class boolNDArray;
   MM_CMP_OP (mx_el_gt, >,  M1, C1, M2, C2) \
   MM_CMP_OP (mx_el_eq, ==, M1,   , M2,   ) \
   MM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
 
 #define MM_BOOL_OP_DECLS(M1, M2) \
   BOOL_OP_DECL (mx_el_and, M1, M2); \
   BOOL_OP_DECL (mx_el_or,  M1, M2);
 
-#define MM_BOOL_OP(F, OP, M1, M2, ZERO) \
+#define MM_BOOL_OP(F, OP, M1, M2, LHS_ZERO, RHS_ZERO) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
     boolMatrix r; \
  \
     int m1_nr = m1.rows (); \
     int m1_nc = m1.cols (); \
  \
@@ -444,32 +450,35 @@ class boolNDArray;
     if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
 	    r.resize (m1_nr, m1_nc); \
  \
 	    for (int j = 0; j < m1_nc; j++) \
 	      for (int i = 0; i < m1_nr; i++) \
-		r.elem(i, j) = (m1.elem(i, j) != ZERO) \
-                                OP (m2.elem(i, j) != ZERO); \
+		r.elem(i, j) = (m1.elem(i, j) != LHS_ZERO) \
+                                OP (m2.elem(i, j) != RHS_ZERO); \
 	  } \
       } \
     else \
       { \
 	if ((m1_nr != 0 || m1_nc != 0) && (m2_nr != 0 || m2_nc != 0)) \
 	  gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
       } \
  \
     return r; \
   }
 
+#define MM_BOOL_OPS2(M1, M2, LHS_ZERO, RHS_ZERO) \
+  MM_BOOL_OP (mx_el_and, &&, M1, M2, LHS_ZERO, RHS_ZERO) \
+  MM_BOOL_OP (mx_el_or,  ||, M1, M2, LHS_ZERO, RHS_ZERO)
+
 #define MM_BOOL_OPS(M1, M2, ZERO) \
-  MM_BOOL_OP (mx_el_and, &&, M1, M2, ZERO) \
-  MM_BOOL_OP (mx_el_or,  ||, M1, M2, ZERO)
+  MM_BOOL_OPS2(M1, M2, ZERO, ZERO)
 
 #define MM_OP_DECLS(R, M1, M2) \
   MM_BIN_OP_DECLS (R, M1, M2) \
   MM_CMP_OP_DECLS (M1, M2) \
   MM_BOOL_OP_DECLS (M1, M2)
 
 // N-d matrix by scalar operations.
 
@@ -530,38 +539,41 @@ class boolNDArray;
   NDS_CMP_OP (mx_el_gt, >,  ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_eq, ==, ND,    , S,   ) \
   NDS_CMP_OP (mx_el_ne, !=, ND,    , S,   )
 
 #define NDS_BOOL_OP_DECLS(ND, S) \
   NDBOOL_OP_DECL (mx_el_and, ND, S); \
   NDBOOL_OP_DECL (mx_el_or,  ND, S);
 
-#define NDS_BOOL_OP(F, OP, ND, S, ZERO) \
+#define NDS_BOOL_OP(F, OP, ND, S, LHS_ZERO, RHS_ZERO) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
     boolNDArray r; \
  \
     int len = m.length (); \
  \
     if (len > 0) \
       { \
         r.resize (m.dims ()); \
  \
         for (int i = 0; i < len; i++) \
-	  r.elem(i) = (m.elem(i) != ZERO) OP (s != ZERO); \
+	  r.elem(i) = (m.elem(i) != LHS_ZERO) OP (s != RHS_ZERO); \
       } \
  \
     return r; \
   }
 
+#define NDS_BOOL_OPS2(ND, S, LHS_ZERO, RHS_ZERO) \
+  NDS_BOOL_OP (mx_el_and, &&, ND, S, LHS_ZERO, RHS_ZERO) \
+  NDS_BOOL_OP (mx_el_or,  ||, ND, S, LHS_ZERO, RHS_ZERO)
+
 #define NDS_BOOL_OPS(ND, S, ZERO) \
-  NDS_BOOL_OP (mx_el_and, &&, ND, S, ZERO) \
-  NDS_BOOL_OP (mx_el_or,  ||, ND, S, ZERO)
+  NDS_BOOL_OPS2(ND, S, ZERO, ZERO)
 
 #define NDS_OP_DECLS(R, ND, S) \
   NDS_BIN_OP_DECLS (R, ND, S) \
   NDS_CMP_OP_DECLS (ND, S) \
   NDS_BOOL_OP_DECLS (ND, S)
 
 // scalar by N-d matrix operations.
 
@@ -622,38 +634,41 @@ class boolNDArray;
   SND_CMP_OP (mx_el_gt, >,  S, CS, ND, CND) \
   SND_CMP_OP (mx_el_eq, ==, S,   , ND,    ) \
   SND_CMP_OP (mx_el_ne, !=, S,   , ND,    )
 
 #define SND_BOOL_OP_DECLS(S, ND) \
   NDBOOL_OP_DECL (mx_el_and, S, ND); \
   NDBOOL_OP_DECL (mx_el_or,  S, ND);
 
-#define SND_BOOL_OP(F, OP, S, ND, ZERO) \
+#define SND_BOOL_OP(F, OP, S, ND, LHS_ZERO, RHS_ZERO) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
     boolNDArray r; \
  \
     int len = m.length (); \
  \
     if (len > 0) \
       { \
         r.resize (m.dims ()); \
  \
         for (int i = 0; i < len; i++) \
-	    r.elem(i) = (s != ZERO) OP (m.elem(i) != ZERO); \
+	    r.elem(i) = (s != LHS_ZERO) OP (m.elem(i) != RHS_ZERO); \
       } \
  \
     return r; \
   }
 
+#define SND_BOOL_OPS2(S, ND, LHS_ZERO, RHS_ZERO) \
+  SND_BOOL_OP (mx_el_and, &&, S, ND, LHS_ZERO, RHS_ZERO) \
+  SND_BOOL_OP (mx_el_or,  ||, S, ND, LHS_ZERO, RHS_ZERO)
+
 #define SND_BOOL_OPS(S, ND, ZERO) \
-  SND_BOOL_OP (mx_el_and, &&, S, ND, ZERO) \
-  SND_BOOL_OP (mx_el_or,  ||, S, ND, ZERO)
+  SND_BOOL_OPS2(S, ND, ZERO, ZERO)
 
 #define SND_OP_DECLS(R, S, ND) \
   SND_BIN_OP_DECLS (R, S, ND) \
   SND_CMP_OP_DECLS (S, ND) \
   SND_BOOL_OP_DECLS (S, ND)
 
 // N-d matrix by N-d matrix operations.
 
@@ -730,44 +745,47 @@ class boolNDArray;
   NDND_CMP_OP (mx_el_gt, >,  ND1, C1, ND2, C2) \
   NDND_CMP_OP (mx_el_eq, ==, ND1,   , ND2,   ) \
   NDND_CMP_OP (mx_el_ne, !=, ND1,   , ND2,   )
 
 #define NDND_BOOL_OP_DECLS(ND1, ND2) \
   NDBOOL_OP_DECL (mx_el_and, ND1, ND2); \
   NDBOOL_OP_DECL (mx_el_or,  ND1, ND2);
 
-#define NDND_BOOL_OP(F, OP, ND1, ND2, ZERO) \
+#define NDND_BOOL_OP(F, OP, ND1, ND2, LHS_ZERO, RHS_ZERO) \
   boolNDArray \
   F (const ND1& m1, const ND2& m2) \
   { \
     boolNDArray r; \
  \
     dim_vector m1_dims = m1.dims (); \
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims == m2_dims) \
       { \
 	if (! m1_dims.all_zero ()) \
 	  { \
 	    r.resize (m1_dims); \
  \
 	    for (int i = 0; i < m1.length (); i++) \
-	      r.elem(i) = (m1.elem(i) != ZERO) OP (m2.elem(i) != ZERO); \
+	      r.elem(i) = (m1.elem(i) != LHS_ZERO) OP (m2.elem(i) != RHS_ZERO); \
 	  } \
       } \
     else \
       gripe_nonconformant (#F, m1_dims, m2_dims); \
  \
     return r; \
   }
 
+#define NDND_BOOL_OPS2(ND1, ND2, LHS_ZERO, RHS_ZERO) \
+  NDND_BOOL_OP (mx_el_and, &&, ND1, ND2, LHS_ZERO, RHS_ZERO) \
+  NDND_BOOL_OP (mx_el_or,  ||, ND1, ND2, LHS_ZERO, RHS_ZERO)
+
 #define NDND_BOOL_OPS(ND1, ND2, ZERO) \
-  NDND_BOOL_OP (mx_el_and, &&, ND1, ND2, ZERO) \
-  NDND_BOOL_OP (mx_el_or,  ||, ND1, ND2, ZERO)
+  NDND_BOOL_OPS2(ND1, ND2, ZERO, ZERO)
 
 #define NDND_OP_DECLS(R, ND1, ND2) \
   NDND_BIN_OP_DECLS (R, ND1, ND2) \
   NDND_CMP_OP_DECLS (ND1, ND2) \
   NDND_BOOL_OP_DECLS (ND1, ND2)
 
 // scalar by diagonal matrix operations.
 
@@ -859,61 +877,61 @@ OP (const M& m, const DM& dm) \
 	  for (int i = 0; i < len; i++) \
 	    r.elem(i, i) OPEQ dm.elem(i, i); \
 	} \
     } \
  \
   return r; \
 }
 
-#define MDM_MULTIPLY_OP(R, M, DM, ZERO) \
+#define MDM_MULTIPLY_OP(R, M, DM, R_ZERO) \
 R \
 operator * (const M& m, const DM& dm) \
 { \
   R r; \
  \
   int m_nr = m.rows (); \
   int m_nc = m.cols (); \
  \
   int dm_nr = dm.rows (); \
   int dm_nc = dm.cols (); \
  \
   if (m_nc != dm_nr) \
     gripe_nonconformant ("operator *", m_nr, m_nc, dm_nr, dm_nc); \
   else \
     { \
-      r.resize (m_nr, dm_nc, ZERO); \
+      r.resize (m_nr, dm_nc, R_ZERO); \
  \
       if (m_nr > 0 && m_nc > 0 && dm_nc > 0) \
 	{ \
 	  int len = dm.length (); \
  \
 	  for (int j = 0; j < len; j++) \
 	    { \
 	      if (dm.elem(j, j) == 1.0) \
 		{ \
 		  for (int i = 0; i < m_nr; i++) \
 		    r.elem(i, j) = m.elem(i, j); \
 		} \
-	      else if (dm.elem(j, j) != ZERO) \
+	      else \
 		{ \
 		  for (int i = 0; i < m_nr; i++) \
 		    r.elem(i, j) = dm.elem(j, j) * m.elem(i, j); \
 		} \
 	    } \
 	} \
     } \
  \
   return r; \
 }
 
-#define MDM_BIN_OPS(R, M, DM, ZERO) \
+#define MDM_BIN_OPS(R, M, DM, R_ZERO) \
   MDM_BIN_OP (R, operator +, M, DM, +=) \
   MDM_BIN_OP (R, operator -, M, DM, -=) \
-  MDM_MULTIPLY_OP (R, M, DM, ZERO)
+  MDM_MULTIPLY_OP (R, M, DM, R_ZERO)
 
 #define MDM_OP_DECLS(R, M, DM) \
   MDM_BIN_OP_DECLS(R, M, DM)
 
 // diagonal matrix by matrix operations.
 
 #define DMM_BIN_OP_DECLS(R, DM, M) \
   BIN_OP_DECL (R, operator +, DM, M); \
@@ -947,61 +965,61 @@ OP (const DM& dm, const M& m) \
 	} \
       else \
 	r.resize (m_nr, m_nc); \
     } \
  \
   return r; \
 }
 
-#define DMM_MULTIPLY_OP(R, DM, M, ZERO) \
+#define DMM_MULTIPLY_OP(R, DM, M, R_ZERO) \
 R \
 operator * (const DM& dm, const M& m) \
 { \
   R r; \
  \
   int dm_nr = dm.rows (); \
   int dm_nc = dm.cols (); \
  \
   int m_nr = m.rows (); \
   int m_nc = m.cols (); \
  \
   if (dm_nc != m_nr) \
     gripe_nonconformant ("operator *", dm_nr, dm_nc, m_nr, m_nc); \
   else \
     { \
-      r.resize (dm_nr, m_nc, ZERO); \
+      r.resize (dm_nr, m_nc, R_ZERO); \
  \
       if (dm_nr > 0 && dm_nc > 0 && m_nc > 0) \
 	{ \
 	  int len = dm.length (); \
  \
 	  for (int i = 0; i < len; i++) \
 	    { \
 	      if (dm.elem(i, i) == 1.0) \
 		{ \
 		  for (int j = 0; j < m_nc; j++) \
 		    r.elem(i, j) = m.elem(i, j); \
 		} \
-	      else if (dm.elem(i, i) != ZERO) \
+	      else \
 		{ \
 		  for (int j = 0; j < m_nc; j++) \
 		    r.elem(i, j) = dm.elem(i, i) * m.elem(i, j); \
 		} \
 	    } \
 	} \
     } \
  \
   return r; \
 }
 
-#define DMM_BIN_OPS(R, DM, M, ZERO) \
+#define DMM_BIN_OPS(R, DM, M, R_ZERO) \
   DMM_BIN_OP (R, operator +, DM, M, +=, ) \
   DMM_BIN_OP (R, operator -, DM, M, +=, -) \
-  DMM_MULTIPLY_OP (R, DM, M, ZERO)
+  DMM_MULTIPLY_OP (R, DM, M, R_ZERO)
 
 #define DMM_OP_DECLS(R, DM, M) \
   DMM_BIN_OP_DECLS(R, DM, M)
 
 // diagonal matrix by diagonal matrix operations.
 
 #define DMDM_BIN_OP_DECLS(R, DM1, DM2) \
   BIN_OP_DECL (R, operator +, DM1, DM2); \
diff --git a/liboctave/mx-ops b/liboctave/mx-ops
--- a/liboctave/mx-ops
+++ b/liboctave/mx-ops
@@ -1,321 +1,321 @@
 # types
 #
-# key typename object-type header fwd-decl-ok
+# key typename object-type header fwd-decl-ok scalar-zero
 #
 # object-type is one of
 #
 #   S:  scalar
 #   M:  matrix
 #   DM: diagonal matrix
 #   ND: N-d array
 #
-x NONE NONE NONE NO
-b bool S NONE NO
-bm boolMatrix ND boolMatrix.h YES
-bnda boolNDArray ND boolNDArray.h YES
-cdm ComplexDiagMatrix DM CDiagMatrix.h YES
-cm ComplexMatrix M CMatrix.h YES
-cnda ComplexNDArray ND CNDArray.h YES
-cs Complex S oct-cmplx.h NO
-dm DiagMatrix DM dDiagMatrix.h YES
-m Matrix M dMatrix.h YES
-nda NDArray ND dNDArray.h YES
-s double S NONE NO
-i8 octave_int8 S oct-inttypes.h YES
-ui8 octave_uint8 S oct-inttypes.h YES
-i16 octave_int16 S oct-inttypes.h YES
-ui16 octave_uint16 S oct-inttypes.h YES
-i32 octave_int32 S oct-inttypes.h YES
-ui32 octave_uint32 S oct-inttypes.h YES
-i64 octave_int64 S oct-inttypes.h YES
-ui64 octave_uint64 S oct-inttypes.h YES
-i8nda int8NDArray ND int8NDArray.h YES
-ui8nda uint8NDArray ND uint8NDArray.h YES
-i16nda int16NDArray ND int16NDArray.h YES
-ui16nda uint16NDArray ND uint16NDArray.h YES
-i32nda int32NDArray ND int32NDArray.h YES
-ui32nda uint32NDArray ND uint32NDArray.h YES
-i64nda int64NDArray ND int64NDArray.h YES
-ui64nda uint64NDArray ND uint64NDArray.h YES
+x NONE NONE NONE NO 0
+b bool S NONE NO false
+bm boolMatrix ND boolMatrix.h YES false
+bnda boolNDArray ND boolNDArray.h YES false
+cdm ComplexDiagMatrix DM CDiagMatrix.h YES 0.0
+cm ComplexMatrix M CMatrix.h YES 0.0
+cnda ComplexNDArray ND CNDArray.h YES 0.0
+cs Complex S oct-cmplx.h NO 0.0
+dm DiagMatrix DM dDiagMatrix.h YES 0.0
+m Matrix M dMatrix.h YES 0.0
+nda NDArray ND dNDArray.h YES 0.0
+s double S NONE NO 0.0
+i8 octave_int8 S oct-inttypes.h YES octave_int8(0)
+ui8 octave_uint8 S oct-inttypes.h YES octave_uint8(0)
+i16 octave_int16 S oct-inttypes.h YES octave_int16(0)
+ui16 octave_uint16 S oct-inttypes.h YES octave_uint16(0)
+i32 octave_int32 S oct-inttypes.h YES octave_int32(0)
+ui32 octave_uint32 S oct-inttypes.h YES octave_uint32(0)
+i64 octave_int64 S oct-inttypes.h YES octave_int64(0)
+ui64 octave_uint64 S oct-inttypes.h YES octave_uint64(0)
+i8nda int8NDArray ND int8NDArray.h YES octave_int8(0)
+ui8nda uint8NDArray ND uint8NDArray.h YES octave_uint8(0)
+i16nda int16NDArray ND int16NDArray.h YES octave_int16(0)
+ui16nda uint16NDArray ND uint16NDArray.h YES octave_uint16(0)
+i32nda int32NDArray ND int32NDArray.h YES octave_int32(0)
+ui32nda uint32NDArray ND uint32NDArray.h YES octave_uint32(0)
+i64nda int64NDArray ND int64NDArray.h YES octave_int64(0)
+ui64nda uint64NDArray ND uint64NDArray.h YES octave_uint64(0)
 # ops
-# result_t lhs_t rhs_t op-type lhs_conv rhs_conv zero_val headers ...
+# result_t lhs_t rhs_t op-type lhs_conv rhs_conv headers ...
 #
 # op-type is one of
 #
 #  B: binary ops, + - * /
 #  C: comparison ops, < <= == != >= >
 #  L: logical ops, & |
 #
 cdm cdm dm B
 cdm dm cdm B
 cm cs cdm B
 cm cs dm B
-cm cs m BCL real NONE 0.0 boolMatrix.h
-cnda cs nda BCL real NONE 0.0 boolMatrix.h boolNDArray.h
+cm cs m BCL real NONE boolMatrix.h
+cnda cs nda BCL real NONE boolMatrix.h boolNDArray.h
 cm cdm cs B
-cm cdm cm B 0.0
-cm cdm m B 0.0
+cm cdm cm B
+cm cdm m B
 cm cdm s B
-cm cm cdm B 0.0
-cm cm dm B 0.0
-cm cm m BCL real NONE 0.0 boolMatrix.h
-cnda cnda nda BCL real NONE 0.0 boolMatrix.h boolNDArray.h
-cm cm s BCL real NONE 0.0 boolMatrix.h
-cnda cnda s BCL real NONE 0.0 boolMatrix.h boolNDArray.h
+cm cm cdm B
+cm cm dm B
+cm cm m BCL real NONE boolMatrix.h
+cnda cnda nda BCL real NONE boolMatrix.h boolNDArray.h
+cm cm s BCL real NONE boolMatrix.h
+cnda cnda s BCL real NONE boolMatrix.h boolNDArray.h
 cm dm cs B
-cm dm cm B 0.0
-cm m cs BCL NONE real 0.0 boolMatrix.h
-cnda nda cs BCL NONE real 0.0 boolMatrix.h boolNDArray.h
-cm m cdm B 0.0
-cm m cm BCL NONE real 0.0 boolMatrix.h
-cnda nda cnda BCL NONE real 0.0 boolMatrix.h boolNDArray.h
+cm dm cm B
+cm m cs BCL NONE real boolMatrix.h
+cnda nda cs BCL NONE real boolMatrix.h boolNDArray.h
+cm m cdm B
+cm m cm BCL NONE real boolMatrix.h
+cnda nda cnda BCL NONE real boolMatrix.h boolNDArray.h
 cm s cdm B
-cm s cm BCL NONE real 0.0 boolMatrix.h
-cnda s cnda BCL NONE real 0.0 boolMatrix.h boolNDArray.h
-m dm m B 0.0
+cm s cm BCL NONE real boolMatrix.h
+cnda s cnda BCL NONE real boolMatrix.h boolNDArray.h
+m dm m B
 m dm s B
-m m dm B 0.0
+m m dm B
 m s dm B
 #
-i8nda s i8nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i8nda i8nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui8nda s ui8nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui8nda ui8nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i16nda s i16nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i16nda i16nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui16nda s ui16nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui16nda ui16nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i32nda s i32nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i32nda i32nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui32nda s ui32nda BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui32nda ui32nda s BCL NONE NONE 0 boolMatrix.h boolNDArray.h
-i64nda s i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-i64nda i64nda s CL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui64nda s ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-ui64nda ui64nda s CL NONE NONE 0 boolMatrix.h boolNDArray.h
+i8nda s i8nda BCL NONE NONE boolMatrix.h boolNDArray.h
+i8nda i8nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+ui8nda s ui8nda BCL NONE NONE boolMatrix.h boolNDArray.h
+ui8nda ui8nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+i16nda s i16nda BCL NONE NONE boolMatrix.h boolNDArray.h
+i16nda i16nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+ui16nda s ui16nda BCL NONE NONE boolMatrix.h boolNDArray.h
+ui16nda ui16nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+i32nda s i32nda BCL NONE NONE boolMatrix.h boolNDArray.h
+i32nda i32nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+ui32nda s ui32nda BCL NONE NONE boolMatrix.h boolNDArray.h
+ui32nda ui32nda s BCL NONE NONE boolMatrix.h boolNDArray.h
+i64nda s i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+i64nda i64nda s CL NONE NONE boolMatrix.h boolNDArray.h
+ui64nda s ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+ui64nda ui64nda s CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda nda CL NONE NONE boolMatrix.h boolNDArray.h
+x nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i8nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i16nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i32nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i64nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui8nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui16nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui32nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui64nda i8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui8 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui16 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui32 CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i64 CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i8 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i16 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i32 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i64 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui8 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui16 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui32 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32 ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui64 i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64 i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i8nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i8nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i8nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i16nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i16nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i16nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i32nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i32nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i32nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x i64nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x i64nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x i64nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui8nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui8nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui8nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui16nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui16nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui16nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui32nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui32nda ui64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui32nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
 #
-x ui64nda i8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui8nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui16nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda ui32nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
-x ui64nda i64nda CL NONE NONE 0 boolMatrix.h boolNDArray.h
+x ui64nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -253,16 +253,18 @@ public:
     // what we should get with saturation semantics).
 
     return std::numeric_limits<T>::is_signed ?
       OCTAVE_INT_FIT_TO_RANGE (- static_cast<double> (ival), T) : 0;
   }
 
   operator double (void) const { return static_cast<double> (value ()); }
 
+  operator float (void) const { return static_cast<float> (value ()); }
+
   octave_int<T>& operator += (const octave_int<T>& x)
   {
     double t = static_cast<double> (value ());
     double tx = static_cast<double> (x.value ());
     ival = OCTAVE_INT_FIT_TO_RANGE (t + tx, T);
     return *this;
   }
 
@@ -334,19 +336,19 @@ pow (const octave_int<T>& a, const octav
     {
       octave_int<T> a_val = a;
       octave_int<T> b_val = b;
 
       retval = a;
 
       b_val -= 1;
 
-      while (b_val)
+      while (b_val != zero)
 	{
-	  if (b_val & one)
+	  if ((b_val & one) != zero)
 	    retval = retval * a_val;
 
 	  b_val = b_val >> 1;
 
 	  if (b_val > zero)
 	    a_val = a_val * a_val;
 	}
     }
@@ -463,33 +465,33 @@ OCTAVE_DOUBLE_INT_BIN_OP(*)
 OCTAVE_DOUBLE_INT_BIN_OP(/)
 
 #define OCTAVE_INT_DOUBLE_CMP_OP(OP) \
   template <class T> \
   bool \
   operator OP (const octave_int<T>& x, const double& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
-    return tx OP y.value (); \
+    return tx OP y; \
   }
 
 OCTAVE_INT_DOUBLE_CMP_OP (<)
 OCTAVE_INT_DOUBLE_CMP_OP (<=)
 OCTAVE_INT_DOUBLE_CMP_OP (>=)
 OCTAVE_INT_DOUBLE_CMP_OP (>)
 OCTAVE_INT_DOUBLE_CMP_OP (==)
 OCTAVE_INT_DOUBLE_CMP_OP (!=)
 
 #define OCTAVE_DOUBLE_INT_CMP_OP(OP) \
   template <class T> \
   bool \
   operator OP (const double& x, const octave_int<T>& y) \
   { \
     double ty = static_cast<double> (y.value ()); \
-    return y.value () OP ty; \
+    return x OP ty; \
   }
 
 OCTAVE_DOUBLE_INT_CMP_OP (<)
 OCTAVE_DOUBLE_INT_CMP_OP (<=)
 OCTAVE_DOUBLE_INT_CMP_OP (>=)
 OCTAVE_DOUBLE_INT_CMP_OP (>)
 OCTAVE_DOUBLE_INT_CMP_OP (==)
 OCTAVE_DOUBLE_INT_CMP_OP (!=)
@@ -506,25 +508,25 @@ OCTAVE_DOUBLE_INT_CMP_OP (!=)
 OCTAVE_INT_BITCMP_OP (&)
 OCTAVE_INT_BITCMP_OP (|)
 OCTAVE_INT_BITCMP_OP (^)
 
 template <class T1, class T2>
 octave_int<T1>
 operator << (const octave_int<T1>& x, const T2& y)
 {
-  T1 retval = x;
+  octave_int<T1> retval = x;
   return retval <<= y;
 }
 
 template <class T1, class T2>
 octave_int<T1>
 operator >> (const octave_int<T1>& x, const T2& y)
 {
-  T1 retval = x;
+  octave_int<T1> retval = x;
   return retval >>= y;
 }
 
 template <class T>
 octave_int<T>
 bitshift (const octave_int<T>& a, int n,
 	  const octave_int<T>& mask = std::numeric_limits<T>::max ())
 {
diff --git a/liboctave/vx-ops b/liboctave/vx-ops
--- a/liboctave/vx-ops
+++ b/liboctave/vx-ops
@@ -1,15 +1,15 @@
 # types
-ccv ComplexColumnVector V CColVector.h YES
-crv ComplexRowVector V CRowVector.h YES
-cs Complex S oct-cmplx.h NO
-cv ColumnVector V dColVector.h YES
-rv RowVector V dRowVector.h YES
-s double S NONE NO
+ccv ComplexColumnVector V CColVector.h YES 0.0
+crv ComplexRowVector V CRowVector.h YES 0.0
+cs Complex S oct-cmplx.h NO 0.0
+cv ColumnVector V dColVector.h YES 0.0
+rv RowVector V dRowVector.h YES 0.0
+s double S NONE NO 0.0
 # ops
 ccv ccv cv B
 ccv ccv s B
 crv crv rv B
 crv crv s B
 ccv cs cv B
 crv cs rv B
 ccv cv ccv B
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,29 @@
 2004-09-23  John W. Eaton  <jwe@octave.org>
 
+	* (OCTAVE_SS_INT_OPS2, OCTAVE_SM_INT_OPS2, OCTAVE_MM_INT_OPS2,
+	OCTAVE_INSTALL_SS_INT_OPS2, OCTAVE_INSTALL_SM_INT_OPS2,
+	OCTAVE_INSTALL_MS_INT_OPS2, OCTAVE_INSTALL_MM_INT_OPS2):
+	Delete unused macros.
+
+	* OPERATORS/op-int.h (OCTAVE_SS_INT_BOOL_OPS): New args Z1 and Z2.
+	(OCTAVE_SS_INT_OPS): Pass appropriately typed zero values to
+	OCTAVE_SS_INT_BOOL_OPS.
+	* OPERATORS/op-i64-i64.cc, OPERATORS/op-ui64-ui64.cc: Likewise.
+
+	* pr-output.cc (pr_plus_format): Now template.
+	Specialize for Complex.
+	(octave_print_internal): Lookup print_conv_type using
+	octave_int<T>, not just T.
+
 	* ov-struct.cc (octave_struct::subsref): Pass skip to next_subsref.
 
+	* oct-stream.cc	(do_read): Hitting EOF should not be an error.
+
 2004-09-22  John W. Eaton  <jwe@octave.org>
 
 	* pt-plot.cc (send_to_plot_stream): Skip automatic replot if in
 	multiplot mode.
 
 	* variables.cc (get_global_value): New arg, silent.
 	* variables.h (get_global_value): Default value for silent arg is
 	false.
diff --git a/src/OPERATORS/op-i64-i64.cc b/src/OPERATORS/op-i64-i64.cc
--- a/src/OPERATORS/op-i64-i64.cc
+++ b/src/OPERATORS/op-i64-i64.cc
@@ -80,17 +80,17 @@ Software Foundation, 59 Temple Place - S
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 #include "op-int.h"
 
 OCTAVE_S_INT_UNOPS (int64)
 OCTAVE_SS_INT_CMP_OPS (ss, int64_, int64_)
-OCTAVE_SS_INT_BOOL_OPS (ss, int64_, int64_)
+OCTAVE_SS_INT_BOOL_OPS (ss, int64_, int64_, octave_int64 (0), octave_int64 (0))
 
 OCTAVE_SM_INT_CMP_OPS (sm, int64_, int64_)
 OCTAVE_SM_INT_BOOL_OPS (sm, int64_, int64_)
 
 OCTAVE_MS_INT_CMP_OPS (ms, int64_, int64_)
 OCTAVE_MS_INT_BOOL_OPS (ms, int64_, int64_)
 OCTAVE_MS_INT_ASSIGN_OPS (ms, int64_, int64_, int64_)
 OCTAVE_MS_INT_ASSIGN_OPS (mx, int64_, , )
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -94,29 +94,29 @@ Software Foundation, 59 Temple Place - S
     CAST_BINOP_ARGS (const octave_ ## T1 ## scalar&, const octave_ ## T2 ## scalar&); \
  \
     if (! v1.T1 ## scalar_value ()) \
       gripe_divide_by_zero (); \
  \
     return octave_value (v2.T2 ## scalar_value () / v1.T1 ## scalar_value ()); \
   } \
 
-#define OCTAVE_SS_INT_BOOL_OPS(PFX, T1, T2) \
+#define OCTAVE_SS_INT_BOOL_OPS(PFX, T1, T2, Z1, Z2) \
   DEFBINOP (PFX ## _el_and, T2, T2) \
   { \
     CAST_BINOP_ARGS (const octave_ ## T1 ## scalar&, const octave_ ## T2 ## scalar&); \
  \
-    return v1.T1 ## scalar_value () != 0 && v2.T2 ## scalar_value () != 0; \
+    return v1.T1 ## scalar_value () != Z1 && v2.T2 ## scalar_value () != Z2; \
   } \
  \
   DEFBINOP (PFX ## _el_or, T1, T2) \
   { \
     CAST_BINOP_ARGS (const octave_ ## T1 ## scalar&, const octave_ ## T2 ## scalar&); \
  \
-    return v1.T1 ## scalar_value () != 0 || v2.T2 ## scalar_value () != 0; \
+    return v1.T1 ## scalar_value () != Z1 || v2.T2 ## scalar_value () != Z2; \
   }
 
 #define OCTAVE_SS_INT_CMP_OPS(PFX, T1, T2) \
   DEFBINOP_OP (PFX ## _lt, T1 ## scalar, T2 ## scalar, <) \
   DEFBINOP_OP (PFX ## _le, T1 ## scalar, T2 ## scalar, <=) \
   DEFBINOP_OP (PFX ## _eq, T1 ## scalar, T2 ## scalar, ==) \
   DEFBINOP_OP (PFX ## _ge, T1 ## scalar, T2 ## scalar, >=) \
   DEFBINOP_OP (PFX ## _gt, T1 ## scalar, T2 ## scalar, >) \
@@ -145,24 +145,19 @@ Software Foundation, 59 Temple Place - S
   OCTAVE_S_INT_UNOPS (TYPE) \
   OCTAVE_SS_POW_OPS (TYPE, TYPE) \
   OCTAVE_SS_INT_ARITH_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_SS_INT_ARITH_OPS (sx, TYPE ## _, ) \
   OCTAVE_SS_INT_ARITH_OPS (xs, , TYPE ## _) \
   OCTAVE_SS_INT_CMP_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_SS_INT_CMP_OPS (sx, TYPE ## _, ) \
   OCTAVE_SS_INT_CMP_OPS (xs, , TYPE ## _) \
-  OCTAVE_SS_INT_BOOL_OPS (ss, TYPE ## _, TYPE ## _) \
-  OCTAVE_SS_INT_BOOL_OPS (sx, TYPE ## _, ) \
-  OCTAVE_SS_INT_BOOL_OPS (xs, , TYPE ## _)
-
-#define OCTAVE_SS_INT_OPS2(T1, T2) \
-  OCTAVE_SS_INT_ARITH_OPS (ss, T1, T2) \
-  OCTAVE_SS_INT_CMP_OPS (ss, T1, T2) \
-  OCTAVE_SS_INT_BOOL_OPS (ss, T1, T2)
+  OCTAVE_SS_INT_BOOL_OPS (ss, TYPE ## _, TYPE ## _, octave_ ## TYPE (0), octave_ ## TYPE (0)) \
+  OCTAVE_SS_INT_BOOL_OPS (sx, TYPE ## _, , octave_ ## TYPE (0), 0) \
+  OCTAVE_SS_INT_BOOL_OPS (xs, , TYPE ## _, 0, octave_ ## TYPE (0))
 
 #define OCTAVE_SM_INT_ARITH_OPS(PFX, TS, TM) \
   /* scalar by matrix ops. */ \
  \
   DEFNDBINOP_OP (PFX ## _add, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, +) \
   DEFNDBINOP_OP (PFX ## _sub, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, -) \
   DEFNDBINOP_OP (PFX ## _mul, TS ## scalar, TM ## matrix, TS ## scalar, TM ## array, *) \
  \
@@ -243,21 +238,16 @@ Software Foundation, 59 Temple Place - S
   OCTAVE_SM_INT_CMP_OPS (xm, , TYPE ## _) \
   OCTAVE_SM_INT_CMP_OPS (smx, TYPE ## _, ) \
   OCTAVE_SM_INT_BOOL_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_SM_INT_BOOL_OPS (xm, , TYPE ## _) \
   OCTAVE_SM_INT_BOOL_OPS (smx, TYPE ## _, ) \
   OCTAVE_SM_CONV (TYPE ## _, TYPE ## _) \
   OCTAVE_SM_CONV (TYPE ## _, complex_)
 
-#define OCTAVE_SM_INT_OPS2(TS, TM) \
-  OCTAVE_SM_INT_ARITH_OPS (sm, TS, TM) \
-  OCTAVE_SM_INT_CMP_OPS (sm, TS, TM) \
-  OCTAVE_SM_INT_BOOL_OPS (sm, TS, TM)
-
 #define OCTAVE_MS_INT_ARITH_OPS(PFX, TM, TS) \
   /* matrix by scalar ops. */ \
  \
   DEFNDBINOP_OP (PFX ## _add, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, +) \
   DEFNDBINOP_OP (PFX ## _sub, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, -) \
   DEFNDBINOP_OP (PFX ## _mul, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, *) \
  \
   DEFBINOP (PFX ## _div, TM ## matrix, TS ## scalar) \
@@ -446,21 +436,16 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_MM_INT_CMP_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_MM_INT_CMP_OPS (mmx, TYPE ## _, ) \
   OCTAVE_MM_INT_BOOL_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_MM_INT_BOOL_OPS (mmx, TYPE ## _, ) \
   OCTAVE_MM_INT_ASSIGN_OPS (mm, TYPE ## _, TYPE ## _, TYPE ## _) \
   OCTAVE_MM_INT_ASSIGN_OPS (mmx, TYPE ## _, , ) \
   OCTAVE_MM_CONV(TYPE ## _, complex_)
 
-#define OCTAVE_MM_INT_OPS2(T1, T2) \
-  OCTAVE_MM_INT_ARITH_OPS (mm, T1, T2) \
-  OCTAVE_MM_INT_CMP_OPS (mm, T1, T2) \
-  OCTAVE_MM_INT_BOOL_OPS (mm, T1, T2)
-
 #define OCTAVE_RE_INT_ASSIGN_OPS(TYPE) \
   DEFNDASSIGNOP_FN (TYPE ## ms_assign, matrix, TYPE ## _scalar, array, assign) \
   DEFNDASSIGNOP_FN (TYPE ## mm_assign, matrix, TYPE ## _matrix, array, assign)
 
 #define OCTAVE_CX_INT_ASSIGN_OPS(TYPE) \
   DEFNDASSIGNOP_FN (TYPE ## cms_assign, complex_matrix, TYPE ## _scalar, complex_array, assign) \
   DEFNDASSIGNOP_FN (TYPE ## cmm_assign, complex_matrix, TYPE ## _matrix, complex_array, assign)
 
@@ -517,21 +502,16 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_INSTALL_SS_INT_CMP_OPS (xs, , TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (sx, TYPE ## _, ) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (xs, , TYPE ## _) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_scalar, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_complex_scalar, octave_complex_matrix)
 
-#define OCTAVE_INSTALL_SS_INT_OPS2(T1, T2) \
-  OCTAVE_INSTALL_SS_INT_ARITH_OPS (ss, T1, T2) \
-  OCTAVE_INSTALL_SS_INT_CMP_OPS (ss, T1, T2) \
-  OCTAVE_INSTALL_SS_INT_BOOL_OPS (ss, T1, T2)
-
 #define OCTAVE_INSTALL_SM_INT_ARITH_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _sub); \
   INSTALL_BINOP (op_mul, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _mul); \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _div); */ \
   /* INSTALL_BINOP (op_pow, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _pow); */ \
   INSTALL_BINOP (op_ldiv, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _ldiv); \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_mul); \
@@ -561,21 +541,16 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (xm, , TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (smx, TYPE ## _, ) \
   INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, TYPE ## _s_ ## TYPE ## _m_conv) \
   INSTALL_WIDENOP (octave_ ## TYPE ## _scalar, octave_complex_matrix, TYPE ## _s_complex_m_conv) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_matrix, octave_ ## TYPE ## _matrix) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _scalar, octave_complex_matrix, octave_complex_matrix)
 
-#define OCTAVE_INSTALL_SM_INT_OPS2(T1, T2) \
-  OCTAVE_INSTALL_SM_INT_ARITH_OPS (sm, T1, T2) \
-  OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, T1, T2) \
-  OCTAVE_INSTALL_SM_INT_BOOL_OPS (sm, T1, T2)
-
 #define OCTAVE_INSTALL_MS_INT_ARITH_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _sub); \
   INSTALL_BINOP (op_mul, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _mul); \
   INSTALL_BINOP (op_div, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _div); \
   /* INSTALL_BINOP (op_pow, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _pow); */ \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## matrix, octave_ ## T2 ## scalar, PFX ## _ldiv); */ \
  \
@@ -607,21 +582,16 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (mx, TYPE ## _, ) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ASSIGN_OPS (mx, TYPE ## _, ) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _matrix, octave_complex_scalar, octave_complex_matrix)
 
-#define OCTAVE_INSTALL_MS_INT_OPS2(T1, T2) \
-  OCTAVE_INSTALL_MS_INT_ARITH_OPS (ms, T1, T2) \
-  OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, T1, T2) \
-  OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, T1, T2)
-
 #define OCTAVE_INSTALL_M_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _matrix, m_not); \
   INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _matrix, m_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _matrix, m_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _matrix, m_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _matrix, m_transpose); \
  \
   /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); */ \
@@ -661,21 +631,16 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mmx, TYPE ## _, ) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (mmx, TYPE ## _, ) \
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_ASSIGN_OPS (mmx, TYPE ## _, ) \
   INSTALL_WIDENOP (octave_ ## TYPE ## _matrix, octave_complex_matrix, TYPE ## _m_complex_m_conv) \
   INSTALL_ASSIGNCONV (octave_ ## TYPE ## _matrix, octave_complex_matrix, octave_complex_matrix)
 
-#define OCTAVE_INSTALL_MM_INT_OPS2(T1, T2) \
-  OCTAVE_INSTALL_MM_INT_ARITH_OPS (T1, T2) \
-  OCTAVE_INSTALL_MM_INT_CMP_OPS (T1, T2) \
-  OCTAVE_INSTALL_MM_INT_BOOL_OPS (T1, T2)
-
 #define OCTAVE_INSTALL_RE_INT_ASSIGN_OPS(TYPE) \
   INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_ ## TYPE ## _scalar, TYPE ## ms_assign) \
   INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_ ## TYPE ## _matrix, TYPE ## mm_assign) \
   INSTALL_ASSIGNCONV (octave_scalar, octave_ ## TYPE ## _scalar, octave_matrix) \
   INSTALL_ASSIGNCONV (octave_scalar, octave_ ## TYPE ## _matrix, octave_matrix)
 
 #define OCTAVE_INSTALL_CX_INT_ASSIGN_OPS(TYPE) \
   INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_ ## TYPE ## _scalar, TYPE ## cms_assign) \
diff --git a/src/OPERATORS/op-ui64-ui64.cc b/src/OPERATORS/op-ui64-ui64.cc
--- a/src/OPERATORS/op-ui64-ui64.cc
+++ b/src/OPERATORS/op-ui64-ui64.cc
@@ -80,17 +80,17 @@ Software Foundation, 59 Temple Place - S
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 #include "op-int.h"
 
 OCTAVE_S_INT_UNOPS (uint64)
 OCTAVE_SS_INT_CMP_OPS (ss, uint64_, uint64_)
-OCTAVE_SS_INT_BOOL_OPS (ss, uint64_, uint64_)
+OCTAVE_SS_INT_BOOL_OPS (ss, uint64_, uint64_, octave_uint64 (0), octave_uint64 (0))
 
 OCTAVE_SM_INT_CMP_OPS (sm, uint64_, uint64_)
 OCTAVE_SM_INT_BOOL_OPS (sm, uint64_, uint64_)
 
 OCTAVE_MS_INT_CMP_OPS (ms, uint64_, uint64_)
 OCTAVE_MS_INT_BOOL_OPS (ms, uint64_, uint64_)
 OCTAVE_MS_INT_ASSIGN_OPS (ms, uint64_, uint64_, uint64_)
 OCTAVE_MS_INT_ASSIGN_OPS (mx, uint64_, , )
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2775,29 +2775,27 @@ octave_value
 do_read (octave_stream& strm, int nr, int nc, int block_size,
 	 int skip, bool do_float_fmt_conv,
 	 oct_mach_info::float_format from_flt_fmt, int& count)
 {
   octave_value retval;
 
   RET_T nda;
 
-  bool ok = true;
-
   count = 0;
 
   typename octave_array_type_traits<RET_T>::element_type elt_zero
     = typename octave_array_type_traits<RET_T>::element_type ();
 
   typename octave_array_type_traits<RET_T>::element_type *dat = 0;
 
   int max_size = 0;
 
   int final_nr = 0;
-  int final_nc = 0;
+  int final_nc = 1;
 
   if (nr > 0)
     {
       if (nc > 0)
 	{
 	  nda.resize (dim_vector (nr, nc), elt_zero);
 	  dat = nda.fortran_vec ();
 	  max_size = nr * nc;
@@ -2868,88 +2866,74 @@ do_read (octave_stream& strm, int nr, in
 		do_float_format_conversion
 		  (u.buf,
 		   sizeof (typename octave_type_traits<READ_T>::val_type),
 		   1, from_flt_fmt, oct_mach_info::float_format ());
 
 	      typename octave_array_type_traits<RET_T>::element_type tmp
 		= static_cast <typename octave_array_type_traits<RET_T>::element_type> (u.val);
 
-	      if (ok)
+	      if (is)
 		{
-		  if (is)
+		  if (count == max_size)
 		    {
-		      if (count == max_size)
-			{
-			  max_size *= 2;
-
-			  if (nr > 0)
-			    nda.resize (dim_vector (nr, max_size / nr),
-					elt_zero);
-			  else
-			    nda.resize (dim_vector (max_size, 1), elt_zero);
-
-			  dat = nda.fortran_vec ();
-			}
-
-		      dat[count++] = tmp;
-
-		      elts_read++;
+		      max_size *= 2;
+
+		      if (nr > 0)
+			nda.resize (dim_vector (nr, max_size / nr),
+				    elt_zero);
+		      else
+			nda.resize (dim_vector (max_size, 1), elt_zero);
+
+		      dat = nda.fortran_vec ();
 		    }
 
-		  if (skip != 0 && elts_read == block_size)
+		  dat[count++] = tmp;
+
+		  elts_read++;
+		}
+
+	      if (skip != 0 && elts_read == block_size)
+		{
+		  strm.seek (skip, SEEK_CUR);
+		  elts_read = 0;
+		}
+
+	      if (is.eof ())
+		{
+		  if (nr > 0)
 		    {
-		      strm.seek (skip, SEEK_CUR);
-		      elts_read = 0;
-		    }
-
-		  if (is.eof ())
-		    {
-		      if (nr > 0)
+		      if (count > nr)
 			{
-			  if (count > nr)
-			    {
-			      final_nr = nr;
-			      final_nc = (count - 1) / nr + 1;
-			    }
-			  else
-			    {
-			      final_nr = count;
-			      final_nc = 1;
-			    }
+			  final_nr = nr;
+			  final_nc = (count - 1) / nr + 1;
 			}
 		      else
 			{
 			  final_nr = count;
 			  final_nc = 1;
 			}
-
-		      break;
 		    }
-		}
-	      else
-		{
-		  ok = false;
+		  else
+		    {
+		      final_nr = count;
+		      final_nc = 1;
+		    }
+
 		  break;
 		}
 	    }
-	  else
-	    {
-	      ok = false;
-	      break;
-	    }
+	  else if (is.eof ())
+	    break;
 	}
     }
 
-  if (ok)
-    {
-      nda.resize (dim_vector (final_nr, final_nc), elt_zero);
-
-      retval = nda;
-    }
+  nda.resize (dim_vector (final_nr, final_nc), elt_zero);
+
+  retval = nda;
 
   return retval;
 }
 
 #define DO_READ_VAL_TEMPLATE(RET_T, READ_T) \
   template octave_value \
   do_read<RET_T, READ_T> (octave_stream&, int, int, int, int, bool, \
 			  oct_mach_info::float_format, int&)
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -67,17 +67,17 @@ public:
       double retval = lo_ieee_nan_value ();
 
       if (numel () > 0)
 	{
 	  // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
 	  if (Vwarn_fortran_indexing)
 	    gripe_implicit_conversion (type_name (), "real scalar");
 
-	  retval = double (matrix (0, 0));
+	  retval = double (matrix(0));
 	}
       else
 	gripe_invalid_conversion (type_name (), "real scalar");
 
       return retval;
       
     }
 
@@ -94,17 +94,17 @@ public:
     }
 
   ComplexNDArray
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (matrix.dims ()); 
       int nel = matrix.numel ();
       for (int i = 0; i < nel; i++)
-        retval(i) = Complex (matrix(i));
+        retval(i) = Complex (double (matrix(i)));
       return retval;
     }
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
@@ -192,17 +192,17 @@ public:
       retval(0) = double (scalar);
       return retval;
     }
 
   ComplexNDArray
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (dim_vector (1,1)); 
-      retval(0) = Complex (scalar);
+      retval(0) = Complex (double (scalar));
       return retval;
     }
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1342,22 +1342,23 @@ pr_col_num_header (std::ostream& os, int
       else
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
+template <class T>
 static inline void
-pr_plus_format (std::ostream& os, double d)
+pr_plus_format (std::ostream& os, const T& val)
 {
-  if (d > 0.0)
+  if (val > T (0))
     os << plus_format_chars[0];
-  else if (d < 0.0)
+  else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
 void
 octave_print_internal (std::ostream& os, double d,
 		       bool /* pr_as_read_syntax */)
@@ -1594,16 +1595,17 @@ octave_print_internal (std::ostream& os,
       break;
 
     default:
       PRINT_ND_ARRAY (os, nda, NDArray, double, Matrix);
       break;
     }
 }
 
+template <>
 static inline void
 pr_plus_format (std::ostream& os, const Complex& c)
 {
   double rp = c.real ();
   double ip = c.imag ();
 
   if (rp == 0.0)
     {
@@ -2463,17 +2465,17 @@ octave_print_internal (std::ostream& os,
 {
   if (plus_format)
     {
       pr_plus_format (os, val);
     }
   else
     {
       if (free_format)
-	os << typename octave_print_conv<T>::print_conv_type (val);
+	os << typename octave_print_conv<octave_int<T> >::print_conv_type (val);
       else
 	pr_int (os, val);
     }
 }
 
 // XXX FIXME XXX -- this is not the right spot for this...
 
 template void
