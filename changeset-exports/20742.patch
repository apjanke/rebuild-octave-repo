# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448330414 18000
#      Mon Nov 23 21:00:14 2015 -0500
# Node ID 5e2da9a66510b5347f119b7de8ecbb2a37950b7f
# Parent  a5ab31b52ae84ad05a8dae326f0766097f5b4600
# Parent  ab0d9d7f479c5f3cf7f150d326f5debbbf05bda6
maint: periodic merge of stable to default

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10967,20 +10967,28 @@ undocumented.\n\
           debug_file = (args.length () > 3 ? args(3).xstring_value ("drawnow: DEBUG_FILE must be a string") : "");
 
           graphics_handle h = gcf ();
 
           if (h.ok ())
             {
               graphics_object go = gh_manager::get_object (h);
 
+              // FIXME: when using qt toolkit the print_figure method
+              // returns immediately and Canvas::print doesn't have
+              // enough time to lock the mutex before we lock it here
+              // again.  We thus wait 50 ms (which may not be enough) to
+              // give it a chance: see http://octave.1599824.n4.nabble.com/Printing-issues-with-Qt-toolkit-tp4673270.html
+
               gh_manager::unlock ();
 
-              go.get_toolkit ().print_figure (go, term, file,
-                                              mono, debug_file);
+              go.get_toolkit ().print_figure (go, term, file, mono,
+                                              debug_file);
+
+              Fsleep (octave_value (0.05));
 
               gh_manager::lock ();
             }
           else
             error ("drawnow: nothing to draw");
         }
       else
         print_usage ();
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -166,16 +166,19 @@ function varargout = textread (filename,
     return;
   endif
 
   endofline = find (strcmpi (varargin, "endofline"), 1);
   if (! isempty (endofline))
     ## 'endofline' option set by user.
     if (ischar (varargin{endofline + 1}))
       eol_char = varargin{endofline + 1};
+      if (strcmp (typeinfo (eol_char), "sq_string"))
+        eol_char = do_string_escapes (eol_char);
+      endif
       if (! any (strcmp (eol_char, {"", "\n", "\r", "\r\n"})))
         error ("textread: invalid EndOfLine character value specified");
       endif
     else
       error ("textread: character value required for EndOfLine");
     endif
   else
     ## Determine EOL from file.
@@ -481,16 +484,26 @@ endfunction
 %! ## Test EOL detection
 %! d = textread (f, "%s");
 %! assert (d, {"a";"b";"c"});
 %! ## Test explicit EOL specification (bug #45046)
 %! d = textread (f, "%s", "endofline", "\r");
 %! assert (d, {"a"; "b"; "c"});
 %! unlink (f);
 
+## Properly process single-quoted EOL args (bug #46477)
+%!test
+%! f = tempname ();
+%! fid = fopen (f, "w");
+%! fprintf (fid, "hello, world!");
+%! fclose (fid);
+%! [a, b] = textread (f, "%s%s", "endofline", '\n');
+%! assert (a{1}, "hello,");
+%! assert (b{1}, "world!");
+
 ## Test input validation
 %!error textread ()
 %!error textread (1)
 %!error <arguments must be strings> textread (1, "%f")
 %!error <arguments must be strings> textread ("fname", 1)
 %!error <missing or invalid value for> textread (file_in_loadpath ("textread.m"), "", "headerlines")
 %!error <missing or invalid value for> textread (file_in_loadpath ("textread.m"), "", "headerlines", 'hh')
 %!error <character value required for> textread (file_in_loadpath ("textread.m"), "%s", "endofline", true)
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -219,16 +219,19 @@ function [C, position] = textscan (fid, 
     return;
   endif
 
   ## Check value of 'endofline'.  String or file doesn't seem to matter
   endofline = find (strcmpi (args, "endofline"), 1);
   if (! isempty (endofline))
     if (ischar (args{endofline + 1}))
       eol_char = args{endofline + 1};
+      if (strcmp (typeinfo (eol_char), "sq_string"))
+        eol_char = do_string_escapes (eol_char);
+      endif
       if (! any (strcmp (eol_char, {"", "\n", "\r", "\r\n"})))
         error ("textscan: illegal EndOfLine character value specified");
       endif
     else
       error ("textscan: character value required for EndOfLine");
     endif
   else
     if (! ischar (fid))
@@ -691,8 +694,15 @@ endfunction
 ## Bug #42528
 %!test
 %! assert (textscan ("1i", ""){1},  0+1i);
 %! assert (cell2mat (textscan ("3, 2-4i, NaN\n -i, 1, 23.4+2.2i", "")), [3+0i, 2-4i, NaN+0i; 0-i,  1+0i, 23.4+2.2i]);
 
 ## Illegal format specifiers
 %!test
 %!error <no valid format conversion specifiers> textscan ("1.0", "%z");
+
+## Properly process single-quoted EOL args (bug #46477)
+%!test
+%! C = textscan ("hello, world!", "%s%s", "endofline", '\n');
+%! assert (C{1}{1}, "hello,");
+%! assert (C{2}{1}, "world!");
+
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -61,17 +61,17 @@ function [gs_cmd, cleanup_cmd] = __ghost
   endfor
 
   if (isempty (opts.papersize))
     format_for_printer = false;
   else
     format_for_printer = true;
   endif
 
-  gs_opts = ["-dQUIET -dNOPAUSE -dBATCH -dSAFER -sDEVICE=" opts.device];
+  gs_opts = ["-dQUIET -dNOPAUSE -dBATCH -dSAFER -dAutoRotatePages=/None -sDEVICE=" opts.device];
 
   if (! isempty (opts.level) && ismember (opts.level, [1, 2, 3]))
     gs_opts = sprintf ("%s -dLanguageLevel=%d", gs_opts, opts.level);
   endif
 
   if (opts.antialiasing && isempty (strfind (opts.device, "write")))
     ## Apply anti-aliasing to all bitmap formats/devices
     gs_opts = sprintf ("%s -dTextAlphaBits=%d -dGraphicsAlphaBits=%d",
