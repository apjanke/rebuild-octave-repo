# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532126283 14400
#      Fri Jul 20 18:38:03 2018 -0400
# Node ID b3d357990b520728c07ac50f21f26420ca1f2a7f
# Parent  b400ad33d92d5c060afd5925f51b51226bd44ec1
better use of templates for action_container and derived classes

It should now be possible to add arbitrary lambda functions or
std::function objects to the unwind_protect objects and octave_link
event queues, and to add functions (including member functions) with
any number of parameters.

* action-container.h (action_container::fcn_elem): Define using
variadic template, std::bind, and std::function for more flexibility
and to eliminate code duplication.
(action_container::method_elem, action_container::method_arg_elem,
action_container::method_crefarg_elem,
action_container::method_arg2_elem,
action_container::method_arg3_elem,
action_container::method_arg4_elem): Delete.
(action_container::add_action): Rename from add.  Now protected.
(action_container::add): New generic function for adding functions.
(action_container::add_fcn, action_container::add_method): Define
using variadic template for more flexibility and to eliminate code
duplication.

* event-queue.h (event_queue::add_action): Rename from add.
Now protected.
* unwind-prot.h (unwind_protect::add_action): Likewise.

* variable-editor-model.cc: Eliminate template parameters for calls to
octave_link::post_event fucntions.

* octave-link.h (octave_link::post_event, octave_link::do_post_event):
Define using variadic template for more flexibility and to eliminate
code duplication.

* pt-eval.h, pt-eval.cc (tree_evaluator::uwp_set_echo_state):
New function.
(tree_evaluator::set_echo_state, tree_evaluator::set_echo_file_name,
tree_evaluator::set_echo_file_pos): Delete.
(tree_evaluator::push_echo_state_cleanup): Use uwp_set_echo_state
instead of set_echo_state, set_echo_file_name, and set_echo_file_pos.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -1004,17 +1004,17 @@ namespace octave
 
     os << user_input.toStdString ();
 
     if (qc)
       os << qc;
 
     std::string expr = os.str ();
 
-    octave_link::post_event<variable_editor_model, std::string, std::string, QModelIndex>
+    octave_link::post_event
       (this, &variable_editor_model::set_data_oct, nm, expr, idx);
 
     return true;
   }
 
   bool
   variable_editor_model::clear_content (const QModelIndex& idx)
   {
@@ -1041,17 +1041,17 @@ namespace octave
     return retval;
   }
 
   bool
   variable_editor_model::insertRows (int row, int count, const QModelIndex&)
   {
     // FIXME: cells?
 
-    octave_link::post_event <variable_editor_model, std::string, std::string>
+    octave_link::post_event
       (this, &variable_editor_model::eval_oct, name (),
        QString ("%1 = [ %1(1:%2,:) ; zeros(%3, columns(%1)) ; %1(%2+%3:end,:) ]")
        .arg (QString::fromStdString (name ()))
        .arg (row)
        .arg (count)
        .toStdString ());
 
     return true;
@@ -1063,31 +1063,31 @@ namespace octave
     if (row + count > data_rows ())
       {
         qDebug () << "Tried to remove too many rows "
                   << data_rows () << " "
                   << count << " (" << row << ")";
         return false;
       }
 
-    octave_link::post_event <variable_editor_model, std::string, std::string>
+    octave_link::post_event
       (this, &variable_editor_model::eval_oct, name (),
        QString ("%1(%2:%3, :) = []")
        .arg (QString::fromStdString (name ()))
        .arg (row)
        .arg (row + count)
        .toStdString ());
 
     return true;
   }
 
   bool
   variable_editor_model::insertColumns (int col, int count, const QModelIndex&)
   {
-    octave_link::post_event <variable_editor_model, std::string, std::string>
+    octave_link::post_event
       (this, &variable_editor_model::eval_oct, name (),
        QString ("%1 = [ %1(:,1:%2) ; zeros(rows(%1), %3) %1(:,%2+%3:end) ]")
        .arg (QString::fromStdString (name ()))
        .arg (col)
        .arg (count)
        .toStdString ());
 
     return true;
@@ -1099,17 +1099,17 @@ namespace octave
     if (col + count > data_columns ())
       {
         qDebug () << "Tried to remove too many cols "
                   << data_columns () << " "
                   << count << " (" << col << ")";
         return false;
       }
 
-    octave_link::post_event <variable_editor_model, std::string, std::string>
+    octave_link::post_event
       (this, &variable_editor_model::eval_oct, name (),
        QString ("%1(:, %2:%3) = []")
        .arg (QString::fromStdString (name ()))
        .arg (col)
        .arg (col + count)
        .toStdString ());
 
     return true;
diff --git a/libinterp/corefcn/event-queue.h b/libinterp/corefcn/event-queue.h
--- a/libinterp/corefcn/event-queue.h
+++ b/libinterp/corefcn/event-queue.h
@@ -46,21 +46,16 @@ namespace octave
     event_queue& operator = (const event_queue&) = delete;
 
     // Destructor should not raise an exception, so all actions
     // registered should be exception-safe.  If you're not sure, see
     // event_queue_safe.
 
     ~event_queue (void) { run (); }
 
-    void add (elem *new_elem)
-    {
-      fifo.push (new_elem);
-    }
-
     void run_first (void)
     {
       if (! empty ())
         {
           // No leak on exception!
           std::unique_ptr<elem> ptr (fifo.front ());
           fifo.pop ();
           ptr->run ();
@@ -76,16 +71,21 @@ namespace octave
           delete ptr;
         }
     }
 
     size_t size (void) const { return fifo.size (); }
 
   protected:
 
+    void add_action (elem *new_elem)
+    {
+      fifo.push (new_elem);
+    }
+
     std::queue<elem *> fifo;
   };
 
   // Like event_queue, but this one will guard against the
   // possibility of seeing an exception (or interrupt) in the cleanup actions.
   // Not that we can do much about it, but at least we won't crash.
 
   class
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -98,63 +98,22 @@ public:
     bool retval = true;
 
     if (enabled ())
       retval = instance->do_confirm_shutdown ();
 
     return retval;
   }
 
-  template <typename T>
-  static void post_event (T *obj, void (T::*method) (void))
-  {
-    if (enabled ())
-      instance->do_post_event (obj, method);
-  }
-
-  template <typename T, typename A>
-  static void post_event (T *obj, void (T::*method) (A), A arg)
-  {
-    if (enabled ())
-      instance->do_post_event (obj, method, arg);
-  }
-
-  template <typename T, typename A>
-  static void post_event (T *obj, void (T::*method) (const A&), const A& arg)
+  template <typename T, typename... Params, typename... Args>
+  static void
+  post_event (T *obj, void (T::*method) (Params...), Args&&... args)
   {
     if (enabled ())
-      instance->do_post_event (obj, method, arg);
-  }
-
-  template <class T, class A, class B>
-  static void post_event (T *obj, void (T::*method) (const A&, const B&),
-                          const A& arg_a, const B& arg_b)
-  {
-    if (enabled ())
-      instance->do_post_event<T, A, B> (obj, method, arg_a, arg_b);
-  }
-
-  template <class T, class A, class B, class C>
-  static void post_event (T *obj,
-                          void (T::*method) (const A&, const B&, const C&),
-                          const A& arg_a, const B& arg_b, const C& arg_c)
-  {
-    if (enabled ())
-      instance->do_post_event<T, A, B, C> (obj, method, arg_a, arg_b, arg_c);
-  }
-
-  template <class T, class A, class B, class C, class D>
-  static void
-  post_event (T *obj,
-              void (T::*method) (const A&, const B&, const C&, const D&),
-              const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
-  {
-    if (enabled ())
-      instance->do_post_event<T, A, B, C, D>
-        (obj, method, arg_a, arg_b, arg_c, arg_d);
+      instance->do_post_event (obj, method, std::forward<Args> (args)...);
   }
 
   static void
   post_exception (const std::exception_ptr &p)
   {
     if (enabled ())
       instance->do_post_exception (p);
   }
@@ -486,59 +445,20 @@ protected:
 
   bool debugging;
   bool link_enabled;
 
   void do_generate_events (void);
   void do_process_events (void);
   void do_discard_events (void);
 
-  template <typename T>
-  void do_post_event (T *obj, void (T::*method) (void))
-  {
-    gui_event_queue.add_method (obj, method);
-  }
-
-  template <typename T, typename A>
-  void do_post_event (T *obj, void (T::*method) (A), A arg)
-  {
-    gui_event_queue.add_method (obj, method, arg);
-  }
-
-  template <typename T, typename A>
-  void do_post_event (T *obj, void (T::*method) (const A&), const A& arg)
-  {
-    gui_event_queue.add_method (obj, method, arg);
-  }
-
-  template <class T, class A, class B>
-  void do_post_event (T *obj, void (T::*method) (const A&, const B&),
-                      const A& arg_a, const B& arg_b)
+  template <typename T, typename... Params, typename... Args>
+  void do_post_event (T *obj, void (T::*method) (Params...), Args&&... args)
   {
-    gui_event_queue.add_method<T, A, B>
-      (obj, method, arg_a, arg_b);
-  }
-
-  template <class T, class A, class B, class C>
-  void do_post_event (T *obj,
-                      void (T::*method) (const A&, const B&, const C&),
-                      const A& arg_a, const B& arg_b, const C& arg_c)
-  {
-    gui_event_queue.add_method<T, A, B, C>
-      (obj, method, arg_a, arg_b, arg_c);
-  }
-
-  template <class T, class A, class B, class C, class D>
-  void
-  do_post_event (T *obj,
-                 void (T::*method) (const A&, const B&, const C&, const D&),
-                 const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
-  {
-    gui_event_queue.add_method<T, A, B, C, D>
-      (obj, method, arg_a, arg_b, arg_c, arg_d);
+    gui_event_queue.add_method (obj, method, std::forward<Args> (args)...);
   }
 
   void
   rethrow_exception_callback (const std::exception_ptr &p)
   {
     std::rethrow_exception (p);
   }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -3325,16 +3325,25 @@ namespace octave
                                   size_t pos)
   {
     m_echo_state = echo_this_file (file_name, type);
     m_echo_file_name = file_name;
     m_echo_file_pos = pos;
   }
 
   void
+  tree_evaluator::uwp_set_echo_state (bool state, const std::string& file_name,
+                                      size_t pos)
+  {
+    m_echo_state = state;
+    m_echo_file_name = file_name;
+    m_echo_file_pos = pos;
+  }
+
+  void
   tree_evaluator::maybe_set_echo_state (void)
   {
     octave_function *caller = m_call_stack.caller ();
 
     if (caller && caller->is_user_code ())
       {
         octave_user_code *fcn = dynamic_cast<octave_user_code *> (caller);
 
@@ -3346,24 +3355,18 @@ namespace octave
 
         set_echo_state (type, file_name, pos);
       }
   }
 
   void
   tree_evaluator::push_echo_state_cleanup (unwind_protect& frame)
   {
-    frame.add_method (*this, &tree_evaluator::set_echo_state,
-                      m_echo_state);
-
-    frame.add_method (*this, &tree_evaluator::set_echo_file_name,
-                      m_echo_file_name);
-
-    frame.add_method (*this, &tree_evaluator::set_echo_file_pos,
-                      m_echo_file_pos);
+    frame.add_method (this, &tree_evaluator::uwp_set_echo_state,
+                      m_echo_state, m_echo_file_name, m_echo_file_pos);
   }
 
   bool tree_evaluator::maybe_push_echo_state_cleanup (void)
   {
     // This function is expected to be called from ECHO, which would be
     // the top of the call stack.  If the caller of ECHO is a
     // user-defined function or script, then set up unwind-protect
     // elements to restore echo state.
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -533,29 +533,18 @@ namespace octave
     octave_value_list
     make_value_list (tree_argument_list *args,
                      const string_vector& arg_nm,
                      const octave_value *object, bool rvalue = true);
 
     std::list<octave_lvalue> make_lvalue_list (tree_argument_list *);
 
     // For unwind-protect.
-    void set_echo_state (bool val) { m_echo_state = val; }
-
-    // For unwind-protect.
-    void set_echo_file_name (const std::string& file_name)
-    {
-      m_echo_file_name = file_name;
-    }
-
-    // For unwind-protect.
-    void set_echo_file_pos (const size_t& file_pos)
-    {
-      m_echo_file_pos = file_pos;
-    }
+    void uwp_set_echo_state (bool state, const std::string& file_name,
+                             size_t pos);
 
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
     void final_index_error (index_exception& e, const tree_expression *expr);
 
     bool quit_loop_now (void);
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -21,27 +21,24 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_action_container_h)
 #define octave_action_container_h 1
 
 #include "octave-config.h"
 
-#include <cstddef>
+#include <functional>
 
 // This class allows registering actions in a list for later
 // execution, either explicitly or when the container goes out of
 // scope.
 
 // FIXME: is there a better name for this class?
 
-// FIXME: we should probably be using std::function, std::bind, and
-// related c++11 features to implement this functionality.
-
 namespace octave
 {
   class
   action_container
   {
   public:
 
     // A generic unwind_protect element.  Knows how to run itself and
@@ -66,248 +63,26 @@ namespace octave
     };
 
     // An element that merely runs a void (*)(void) function.
 
     class fcn_elem : public elem
     {
     public:
 
-      fcn_elem (void (*fptr) (void))
-        : e_fptr (fptr) { }
-
-      void run (void) { e_fptr (); }
-
-    private:
-
-      void (*e_fptr) (void);
-    };
-
-    // An element that stores a variable of type T along with a void (*) (T)
-    // function pointer, and calls the function with the parameter.
-
-    template <typename T>
-    class fcn_arg_elem : public elem
-    {
-    public:
-
-      fcn_arg_elem (void (*fcn) (T), T arg)
-        : e_fcn (fcn), e_arg (arg) { }
-
-      // No copying!
-
-      fcn_arg_elem (const fcn_arg_elem&) = delete;
-
-      fcn_arg_elem& operator = (const fcn_arg_elem&) = delete;
-
-      void run (void) { e_fcn (e_arg); }
-
-    private:
-
-      void (*e_fcn) (T);
-
-      T e_arg;
-    };
-
-    // An element that stores a variable of type T along with a
-    // void (*) (const T&) function pointer, and calls the function with
-    // the parameter.
-
-    template <typename T>
-    class fcn_crefarg_elem : public elem
-    {
-    public:
-
-      fcn_crefarg_elem (void (*fcn) (const T&), const T& arg)
-        : e_fcn (fcn), e_arg (arg) { }
-
-      void run (void) { e_fcn (e_arg); }
-
-    private:
+      template <typename F, typename... Args>
+      fcn_elem (F&& fcn, Args&&... args)
+        : m_fcn (std::bind (fcn, args...))
+      { }
 
-      void (*e_fcn) (const T&);
-
-      T e_arg;
-    };
-
-    // An element for calling a member function.
-
-    template <typename T>
-    class method_elem : public elem
-    {
-    public:
-
-      method_elem (T *obj, void (T::*method) (void))
-        : e_obj (obj), e_method (method) { }
-
-      method_elem (T& obj, void (T::*method) (void))
-        : e_obj (&obj), e_method (method) { }
-
-      // No copying!
-
-      method_elem (const method_elem&) = delete;
-
-      method_elem operator = (const method_elem&) = delete;
-
-      void run (void) { (e_obj->*e_method) (); }
-
-    private:
-
-      T *e_obj;
-
-      void (T::*e_method) (void);
-    };
-
-    // An element for calling a member function with a single argument
-
-    template <typename T, typename A>
-    class method_arg_elem : public elem
-    {
-    public:
-
-      method_arg_elem (T *obj, void (T::*method) (A), A arg)
-        : e_obj (obj), e_method (method), e_arg (arg) { }
-
-      method_arg_elem (T& obj, void (T::*method) (A), A arg)
-        : e_obj (&obj), e_method (method), e_arg (arg) { }
-
-      // No copying!
-
-      method_arg_elem (const method_arg_elem&) = delete;
-
-      method_arg_elem operator = (const method_arg_elem&) = delete;
-
-      void run (void) { (e_obj->*e_method) (e_arg); }
+      void run (void) { m_fcn (); }
 
     private:
 
-      T *e_obj;
-
-      void (T::*e_method) (A);
-
-      A e_arg;
-    };
-
-    // An element for calling a member function with a single argument
-
-    template <typename T, typename A>
-    class method_crefarg_elem : public elem
-    {
-    public:
-
-      method_crefarg_elem (T *obj, void (T::*method) (const A&), const A& arg)
-        : e_obj (obj), e_method (method), e_arg (arg) { }
-
-      method_crefarg_elem (T& obj, void (T::*method) (const A&), const A& arg)
-        : e_obj (&obj), e_method (method), e_arg (arg) { }
-
-      // No copying!
-
-      method_crefarg_elem (const method_crefarg_elem&) = delete;
-
-      method_crefarg_elem operator = (const method_crefarg_elem&) = delete;
-
-      void run (void) { (e_obj->*e_method) (e_arg); }
-
-    private:
-
-      T *e_obj;
-
-      void (T::*e_method) (const A&);
-
-      A e_arg;
-    };
-
-    /// An element for calling a member function with two arguments
-    template <class T, class A, class B>
-    class method_arg2_elem : public elem
-    {
-    public:
-      method_arg2_elem (T *obj, void (T::*method) (const A&, const B&),
-                        const A& arg_a, const B& arg_b)
-        : e_obj (obj), e_method (method),
-          e_arg_a (arg_a), e_arg_b (arg_b) { }
-
-      void run (void) { (e_obj->*e_method) (e_arg_a, e_arg_b); }
-
-    private:
-
-      T *e_obj;
-      void (T::*e_method) (const A&, const B&);
-      A e_arg_a;
-      B e_arg_b;
-
-      // No copying!
-
-      method_arg2_elem (const method_arg2_elem&);
-
-      method_arg2_elem operator = (const method_arg2_elem&);
-    };
-
-    /// An element for calling a member function with three arguments
-    template <class T, class A, class B, class C>
-    class method_arg3_elem : public elem
-    {
-    public:
-      method_arg3_elem (T *obj,
-                        void (T::*method) (const A&, const B&, const C&),
-                        const A& arg_a, const B& arg_b, const C& arg_c)
-        : e_obj (obj), e_method (method),
-          e_arg_a (arg_a), e_arg_b (arg_b), e_arg_c (arg_c)
-      { }
-
-      void run (void) { (e_obj->*e_method) (e_arg_a, e_arg_b, e_arg_c); }
-
-    private:
-
-      T *e_obj;
-      void (T::*e_method) (const A&, const B&, const C&);
-      A e_arg_a;
-      B e_arg_b;
-      C e_arg_c;
-
-      // No copying!
-
-      method_arg3_elem (const method_arg3_elem&);
-
-      method_arg3_elem operator = (const method_arg3_elem&);
-    };
-
-    /// An element for calling a member function with three arguments
-    template <class T, class A, class B, class C, class D>
-    class method_arg4_elem : public elem
-    {
-    public:
-      method_arg4_elem (T *obj,
-                        void (T::*method) (const A&, const B&, const C&, const D&),
-                        const A& arg_a, const B& arg_b, const C& arg_c,
-                        const D& arg_d)
-        : e_obj (obj), e_method (method),
-          e_arg_a (arg_a), e_arg_b (arg_b), e_arg_c (arg_c), e_arg_d (arg_d)
-      { }
-
-      void run (void)
-      {
-        (e_obj->*e_method) (e_arg_a, e_arg_b, e_arg_c, e_arg_d);
-      }
-
-    private:
-
-      T *e_obj;
-      void (T::*e_method) (const A&, const B&, const C&, const D&);
-      A e_arg_a;
-      B e_arg_b;
-      C e_arg_c;
-      D e_arg_d;
-
-      // No copying!
-
-      method_arg4_elem (const method_arg4_elem&);
-
-      method_arg4_elem operator = (const method_arg4_elem&);
+      std::function<void (void)> m_fcn;
     };
 
     // An element that stores arbitrary variable, and restores it.
 
     template <typename T>
     class restore_var_elem : public elem
     {
     public:
@@ -356,126 +131,65 @@ namespace octave
     // No copying!
 
     action_container (const action_container&) = delete;
 
     action_container& operator = (const action_container&) = delete;
 
     virtual ~action_container (void) = default;
 
-    virtual void add (elem *new_elem) = 0;
-
-    // Call to void func (void).
-    void add_fcn (void (*fcn) (void))
-    {
-      add (new fcn_elem (fcn));
-    }
-
-    // Call to void func (T).
-    template <typename T>
-    void add_fcn (void (*action) (T), T val)
-    {
-      add (new fcn_arg_elem<T> (action, val));
-    }
-
-    // Call to void func (const T&).
-    template <typename T>
-    void add_fcn (void (*action) (const T&), const T& val)
+    template <typename F, typename... Args>
+    void add (F&& fcn, Args&&... args)
     {
-      add (new fcn_crefarg_elem<T> (action, val));
-    }
-
-    // Call to T::method (void).
-    template <typename T>
-    void add_method (T *obj, void (T::*method) (void))
-    {
-      add (new method_elem<T> (obj, method));
-    }
-
-    template <typename T>
-    void add_method (T& obj, void (T::*method) (void))
-    {
-      add (new method_elem<T> (obj, method));
-    }
-
-    // Call to T::method (A).
-    template <typename T, typename A>
-    void add_method (T *obj, void (T::*method) (A), A arg)
-    {
-      add (new method_arg_elem<T, A> (obj, method, arg));
+      add_action (new fcn_elem (std::forward<F> (fcn),
+                                std::forward<Args> (args)...));
     }
 
-    template <typename T, typename A>
-    void add_method (T& obj, void (T::*method) (A), A arg)
-    {
-      add (new method_arg_elem<T, A> (obj, method, arg));
-    }
+    // Use separate template types for function pointer parameter
+    // declarations and captured arguments so that differences in
+    // const are handled properly.
 
-    // Call to T::method (const A&).
-    template <typename T, typename A>
-    void add_method (T *obj, void (T::*method) (const A&), const A& arg)
+    template <typename... Params, typename... Args>
+    void add_fcn (void (*fcn) (Params...), Args&&... args)
     {
-      add (new method_crefarg_elem<T, A> (obj, method, arg));
-    }
-
-    template <typename T, typename A>
-    void add_method (T& obj, void (T::*method) (const A&), const A& arg)
-    {
-      add (new method_crefarg_elem<T, A> (obj, method, arg));
+      add_action (new fcn_elem (fcn, std::forward<Args> (args)...));
     }
 
-    // Call to T::method (A, B).
-    template <class T, class A, class B>
-    void add_method (T *obj, void (T::*method) (const A&, const B&),
-                     const A& arg_a, const B& arg_b)
+    template <typename T, typename... Params, typename... Args>
+    void add_method (T *obj, void (T::*method) (Params...), Args&&... args)
     {
-      add (new method_arg2_elem<T, A, B> (obj, method, arg_a, arg_b));
+      add_action (new fcn_elem (method, obj, std::forward<Args> (args)...));
     }
 
-    // Call to T::method (A, B, C).
-    template <class T, class A, class B, class C>
-    void add_method (T *obj,
-                     void (T::*method) (const A&, const B&, const C&),
-                     const A& arg_a, const B& arg_b, const C& arg_c)
+    template <typename T, typename... Params, typename... Args>
+    void add_method (T& obj, void (T::*method) (Params...), Args&&... args)
     {
-      add (new method_arg3_elem<T, A, B, C> (obj, method, arg_a,
-                                             arg_b, arg_c));
-    }
-
-    // Call to T::method (A, B, C, D).
-    template <class T, class A, class B, class C, class D>
-    void add_method (T *obj,
-                     void (T::*method) (const A&, const B&, const C&, const D&),
-                     const A& arg_a, const B& arg_b,
-                     const C& arg_c, const D& arg_d)
-    {
-      add (new method_arg4_elem<T, A, B, C, D> (obj, method, arg_a,
-                                                arg_b, arg_c, arg_d));
+      add_action (new fcn_elem (method, &obj, std::forward<Args> (args)...));
     }
 
     // Call to delete (T*).
 
     template <typename T>
     void add_delete (T *obj)
     {
-      add (new delete_ptr_elem<T> (obj));
+      add_action (new delete_ptr_elem<T> (obj));
     }
 
     // Protect any variable.
     template <typename T>
     void protect_var (T& var)
     {
-      add (new restore_var_elem<T> (var, var));
+      add_action (new restore_var_elem<T> (var, var));
     }
 
     // Protect any variable, value given.
     template <typename T>
     void protect_var (T& var, const T& val)
     {
-      add (new restore_var_elem<T> (var, val));
+      add_action (new restore_var_elem<T> (var, val));
     }
 
     operator bool (void) const { return ! empty (); }
 
     virtual void run_first (void) = 0;
 
     void run (size_t num)
     {
@@ -499,16 +213,20 @@ namespace octave
         discard_first ();
     }
 
     void discard (void) { discard (size ()); }
 
     virtual size_t size (void) const = 0;
 
     bool empty (void) const { return size () == 0; }
+
+  protected:
+
+    virtual void add_action (elem *new_elem) = 0;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::action_container' instead")
 typedef octave::action_container action_container;
 
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -50,21 +50,16 @@ namespace octave
     unwind_protect& operator = (const unwind_protect&) = delete;
 
     // Destructor should not raise an exception, so all actions
     // registered should be exception-safe.  If you're not sure, see
     // unwind_protect_safe.
 
     ~unwind_protect (void) { run (); }
 
-    virtual void add (elem *new_elem)
-    {
-      lifo.push (new_elem);
-    }
-
     operator bool (void) const { return ! empty (); }
 
     void run_first (void)
     {
       if (! empty ())
         {
           // No leak on exception!
           std::unique_ptr<elem> ptr (lifo.top ());
@@ -82,16 +77,21 @@ namespace octave
           delete ptr;
         }
     }
 
     size_t size (void) const { return lifo.size (); }
 
   protected:
 
+    virtual void add_action (elem *new_elem)
+    {
+      lifo.push (new_elem);
+    }
+
     std::stack<elem *> lifo;
   };
 
   // Like unwind_protect, but this one will guard against the possibility
   // of seeing an exception (or interrupt) in the cleanup actions.
   // Not that we can do much about it, but at least we won't crash.
 
   class
