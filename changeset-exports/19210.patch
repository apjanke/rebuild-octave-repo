# HG changeset patch
# User Rik <rik@octave.org>
# Date 1412448486 25200
#      Sat Oct 04 11:48:06 2014 -0700
# Node ID 841d8f606bcd68a249f77127d134d9722935d73b
# Parent  827ac8b5ae07a3da0ddd87f8dd40e40086588134
doc: Improve docstrings for tempname, tempdir family of functions.

* file-io.cc (Ftmpnam): Redo docstring to add note about using tmpfile.
Add note that tmpnam and tempname are aliases.  Redo seealso links.
* file-io.cc (Ftmpfile): Redo seealso links.
* file-io.cc (Fmkstemp): Redo docstring and seealso links.

* tempdir.m: Redo docstring to note that TMPDIR environment variable
is used in preference to P_tmpdir.  Use unsetenv in BIST tests to
delete temporary environment variable.

* tempname.m: Redo docstring to match tmpnam for which tempname is an alias.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1930,28 +1930,32 @@ The function @code{fclose} may also be u
   return retval;
 }
 
 DEFUNX ("tmpnam", Ftmpnam, args, ,
         "-*- texinfo -*-\n\
 @c List other forms of function in documentation index\n\
 @findex octave_tmp_file_name\n\
 \n\
-@deftypefn  {Built-in Function} {} tmpnam ()\n\
-@deftypefnx {Built-in Function} {} tmpnam (@var{dir})\n\
-@deftypefnx {Built-in Function} {} tmpnam (@var{dir}, @var{prefix})\n\
+@deftypefn  {Built-in Function} {@var{fname} =} tmpnam ()\n\
+@deftypefnx {Built-in Function} {@var{fname} =} tmpnam (@var{dir})\n\
+@deftypefnx {Built-in Function} {@var{fname} =} tmpnam (@var{dir}, @var{prefix})\n\
 Return a unique temporary file name as a string.\n\
 \n\
 If @var{prefix} is omitted, a value of @qcode{\"oct-\"} is used.\n\
 If @var{dir} is also omitted, the default directory for temporary files\n\
-is used.  If @var{dir} is provided, it must exist, otherwise the default\n\
-directory for temporary files is used.  Since the named file is not\n\
-opened, by @code{tmpnam}, it is possible (though relatively unlikely)\n\
-that it will not be available by the time your program attempts to open it.\n\
-@seealso{tmpfile, mkstemp, P_tmpdir}\n\
+(@code{P_tmpdir} is used.  If @var{dir} is provided, it must exist,\n\
+otherwise the default directory for temporary files is used.\n\
+\n\
+Programming Note: Because the named file is not opened by @code{tmpnam},\n\
+it is possible, though relatively unlikely, that it will not be available\n\
+by the time your program attempts to open it.  If this is a concern,\n\
+see @code{tmpfile}.  The functions @code{tmpnam} and @code{tempname} are\n\
+equivalent with the latter provided for @sc{matlab} compatibility.\n\
+@seealso{tempname, mkstemp, tempdir, P_tmpdir, tmpfile}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int len = args.length ();
 
   if (len < 3)
     {
@@ -1985,17 +1989,17 @@ Return the file ID corresponding to a ne
 name.\n\
 \n\
 The file is opened in binary read/write (@qcode{\"w+b\"}) mode and will be\n\
 deleted automatically when it is closed or when Octave exits.\n\
 \n\
 If successful, @var{fid} is a valid file ID and @var{msg} is an empty\n\
 string.  Otherwise, @var{fid} is -1 and @var{msg} contains a\n\
 system-dependent error message.\n\
-@seealso{tmpnam, mkstemp, P_tmpdir}\n\
+@seealso{tempname, tmpnam, mkstemp, tempdir, P_tmpdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
@@ -2027,34 +2031,35 @@ system-dependent error message.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (mkstemp, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (@var{template}, @var{delete})\n\
-Return the file ID corresponding to a new temporary file with a unique\n\
-name created from @var{template}.\n\
+@deftypefn  {Built-in Function} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (\"@var{template}\")\n\
+@deftypefnx {Built-in Function} {[@var{fid}, @var{name}, @var{msg}] =} mkstemp (\"@var{template}\", @var{delete})\n\
+Return the file descriptor @var{fid} corresponding to a new temporary file\n\
+with a unique name created from @var{template}.\n\
 \n\
-The last six characters of @var{template} must be @code{XXXXXX} and these\n\
-are replaced with a string that makes the filename unique.  The file is then\n\
-created with mode read/write and permissions that are system dependent\n\
-(on GNU/Linux systems, the permissions will be 0600 for versions of glibc\n\
-2.0.7 and later).  The file is opened in binary mode and with the\n\
+The last six characters of @var{template} must be @qcode{\"XXXXXX\"} and\n\
+these are replaced with a string that makes the filename unique.  The file\n\
+is then created with mode read/write and permissions that are system\n\
+dependent (on GNU/Linux systems, the permissions will be 0600 for versions of\n\
+glibc\ 2.0.7 and later).  The file is opened in binary mode and with the\n\
 @w{@code{O_EXCL}} flag.\n\
 \n\
 If the optional argument @var{delete} is supplied and is true, the file will\n\
 be deleted automatically when Octave exits.\n\
 \n\
 If successful, @var{fid} is a valid file ID, @var{name} is the name of the\n\
 file, and @var{msg} is an empty string.  Otherwise, @var{fid} is -1,\n\
 @var{name} is empty, and @var{msg} contains a system-dependent error message.\n\
-@seealso{tmpfile, tmpnam, P_tmpdir}\n\
+@seealso{tempname, tmpnam, tempdir, P_tmpdir, tmpfile, fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -2208,20 +2213,24 @@ const_value (const char *, const octave_
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("P_tmpdir", FP_tmpdir, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} P_tmpdir ()\n\
-Return the default name of the directory for temporary files.\n\
+Return the name of the host system's @strong{default} directory for\n\
+temporary files.\n\
 \n\
-The name of this directory is system dependent.\n\
-@seealso{tmpnam}\n\
+Programming Note: The value returned by @code{P_tmpdir} is always the\n\
+default location.  This value may not agree with that returned from\n\
+@code{tempdir} if the user has overriden the default with the @env{TMPDIR}\n\
+environment variable.\n\
+@seealso{tempdir, tempname, tmpnam, mkstemp, tmpfile}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = get_P_tmpdir ();
diff --git a/scripts/miscellaneous/tempdir.m b/scripts/miscellaneous/tempdir.m
--- a/scripts/miscellaneous/tempdir.m
+++ b/scripts/miscellaneous/tempdir.m
@@ -13,17 +13,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{dir} =} tempdir ()
-## Return the name of the system's directory for temporary files.
+## Return the name of the host system's directory for temporary files.
+##
+## The directory name is taken first from the environment variable
+## @env{TMPDIR}.  If that does not exist the system default returned by
+## @code{P_tmpdir} is used.
+## @seealso{P_tmpdir, tempname, mkstemp, tmpfile}
 ## @end deftypefn
 
 function dirname = tempdir ()
 
   dirname = getenv ("TMPDIR");
   if (isempty (dirname))
     dirname = P_tmpdir;
   endif
@@ -44,12 +49,16 @@ endfunction
 %!test
 %! old_wstate = warning ("query");
 %! warning ("off");
 %! old_tmpdir = getenv ("TMPDIR");
 %! unwind_protect
 %!   setenv ("TMPDIR", "__MY_TMP_DIR__");
 %!   assert (tempdir (), ["__MY_TMP_DIR__" filesep()]);
 %! unwind_protect_cleanup
-%!   setenv ("TMPDIR", old_tmpdir);
+%!   if (! isempty (old_tmpdir))
+%!     setenv ("TMPDIR", old_tmpdir);
+%!   else
+%!     unsetenv ("TMPDIR");
+%!   endif
 %!   warning (old_wstate);
 %! end_unwind_protect
 
diff --git a/scripts/miscellaneous/tempname.m b/scripts/miscellaneous/tempname.m
--- a/scripts/miscellaneous/tempname.m
+++ b/scripts/miscellaneous/tempname.m
@@ -12,25 +12,36 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} tempname ()
-## @deftypefnx {Function File} {} tempname (@var{dir})
-## @deftypefnx {Function File} {} tempname (@var{dir}, @var{prefix})
-## This function is an alias for @code{tmpnam}.
-## @seealso{tmpnam}
+## @deftypefn  {Built-in Function} {@var{fname} =} tempname ()
+## @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir})
+## @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir}, @var{prefix})
+## Return a unique temporary file name as a string.
+## 
+## If @var{prefix} is omitted, a value of @qcode{"oct-"} is used.
+## If @var{dir} is also omitted, the default directory for temporary files
+## (@code{P_tmpdir} is used.  If @var{dir} is provided, it must exist,
+## otherwise the default directory for temporary files is used.
+##
+## Programming Note: Because the named file is not opened by @code{tempname},
+## it is possible, though relatively unlikely, that it will not be available
+## by the time your program attempts to open it.  If this is a concern,
+## see @code{tmpfile}.  The functions @code{tmpnam} and @code{tempname} are
+## equivalent with the latter provided for @sc{matlab} compatibility.
+## @seealso{tmpnam, mkstemp, tempdir, P_tmpdir, tmpfile}
 ## @end deftypefn
 
 function filename = tempname (varargin)
 
   filename = tmpnam (varargin{:});
 
 endfunction
 
 
-%% No tests needed for alias.
+## No tests needed for alias.
 %!assert (1)
 
