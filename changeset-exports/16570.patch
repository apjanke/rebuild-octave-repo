# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366927075 14400
#      Thu Apr 25 17:57:55 2013 -0400
# Node ID d5ae5aa80d42bf47e6c2e5578fa2c3cddae00ef8
# Parent  ab1df81adaa06e278d0b235fbfc46f22440346d4
preserve pending command line input when running commands from GUI actions

* QTerminal.h, QTerminal.cc (QTerminal::relay_command): Delete.

* file-editor-tab.cc (file_editor_tab::run_file_callback): New
argument, bp_info.  Save pending command line input and execute
command.
(file_editor_tab::run_file): Use octave_link to execute file.

* main-window.h, main-window.cc
(main_window::execute_command_in_terminal): Rename from
main_window::handle_command_double_clicked.  Post event through
octave_link to execute command.
(main_window::construct_octave_qt_link): Connect
_octave_qt_link::execute_command_in_terminal_signal to
main_window::execute_command_in_terminal.
(main_window::execute_command_callback): New function.
(main_window::relay_command_signal): Delete signal. Remove all uses.

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_execute_command_in_terminal): New function.
(octave_qt_link::execute_command_in_terminal_signal): New signal.

* terminal-dock-widget.h, terminal-dock-widget.cc
(terminal_dock_widget::relay_command_signal): Delete signal.  Remove
all uses.

* octave-link.h (octave_link::execute_command_in_terminal,
octave_link::do_execute_command_in_terminal): New functions.

* cmd-edit.h, cmd-edit.cc
(command_editor::pre_input_hook_set): New variable.
(gnu_readline::previous_pre_input_hook,
command_editor::intial_input): New member variables.
(command_editor::restore_pre_input_hook,
command_editor::do_get_current_line,
command_editor::do_replace_line, command_editor::set_pre_input_hook,
gnu_readline::do_get_current_line, gnu_readline::do_replace_line,
gnu_readline::set_pre_input_hook, command_editor::set_initial_input,
gnu_readline::restore_pre_input_hook,
default_command_editor::do_get_current_line,
default_command_editor::do_replace_line,
command_editor::insert_initial_input,
command_editor::pre_input_handler, command_editor::get_current_line,
command_editor::replace_line, command_editor::add_pre_input_hook,
command_editor::do_insert_initial_input,
command_editor::set_pre_input_hook,
command_editor::restore_pre_input_hook): New functions.
(command_editor::readline): Handle initial input.
(command_editor::interrupt): Give argument a default value.

* oct-rl-edit.h, oct-rl-edit.c (octave_rl_copy_line,
octave_rl_replace_line, octave_rl_set_pre_input_hook,
octave_rl_get_pre_input_hook): New functions.
(rl_pre_input_hook_fcn_ptr): New typedef.

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -37,14 +37,8 @@ QTerminal::notice_settings (const QSetti
   bool cursorBlinking = settings->value ("terminal/cursorBlinking",true).toBool ();
   if (cursorType == "ibeam")
     setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
   else if (cursorType == "block")
     setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
     setCursorType(QTerminalInterface::UnderlineCursor, cursorBlinking);
 }
-
-void
-QTerminal::relay_command (const QString& command)
-{
-  sendText (command);
-}
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -33,27 +33,25 @@ along with Foobar.  If not, see <http://
         Q_OBJECT
     public:
         QTerminal(QWidget *xparent = 0)
             : QWinTerminalImpl(xparent) { }
         ~QTerminal() { }
 
     public slots:
         void notice_settings (const QSettings *settings);
-        void relay_command (const QString& text);
     };
 #else
     #include "unix/QUnixTerminalImpl.h"
     class QTerminal : public QUnixTerminalImpl
     {
         Q_OBJECT
     public:
         QTerminal(QWidget *xparent = 0)
             : QUnixTerminalImpl(xparent) { }
         ~QTerminal() { }
 
     public slots:
         void notice_settings (const QSettings *settings);
-        void relay_command (const QString& command);
     };
 #endif
 
 #endif // QTERMINAL_H
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -172,17 +172,17 @@ files_dock_widget::files_dock_widget (QW
 
   connect (_current_directory->lineEdit(), SIGNAL (returnPressed ()),
             this, SLOT (accept_directory_line_edit ()));
 
   connect (_current_directory, SIGNAL (activated (const QString &)),
            this, SLOT (set_current_directory (const QString &)));
 
   connect (this, SIGNAL (run_file_signal (const QString&)),
-           parent (), SLOT (handle_command_double_clicked (const QString&)));
+           parent (), SLOT (execute_command_in_terminal (const QString&)));
 
   QCompleter *completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
   setFocusProxy (_current_directory);
   
   _sync_octave_dir = true;   // default, overwirtten with notice_settings ()
   _octave_dir = "";
diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -43,17 +43,17 @@ history_dock_widget::history_dock_widget
 
   connect (this, SIGNAL (command_create_script (const QString&)),
            p, SLOT (new_file (const QString&)));
 
   connect (this, SIGNAL (information (const QString&)),
            p, SLOT (report_status_message (const QString&)));
 
   connect (this, SIGNAL (command_double_clicked (const QString&)),
-           p, SLOT (handle_command_double_clicked (const QString&)));
+           p, SLOT (execute_command_in_terminal (const QString&)));
 
   construct ();
 }
 
 void
 history_dock_widget::construct ()
 {
   _history_model = new QStringListModel ();
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -43,16 +43,18 @@ along with Octave; see the file COPYING.
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <QInputDialog>
 #include <QPrintDialog>
 
 #include "file-editor-tab.h"
 #include "file-editor.h"
 
+#include "cmd-edit.h"
+
 #include "builtin-defun-decls.h"
 #include "debug.h"
 #include "load-path.h"
 #include "octave-link.h"
 #include "oct-env.h"
 #include "utils.h"
 
 // Make parent null for the file editor tab so that warning
@@ -350,42 +352,50 @@ file_editor_tab::print_file (const QWidg
   if (printDlg.exec () == QDialog::Accepted)
     printer->printRange (_edit_area);
 
   delete printer;
 }
 
 
 void
-file_editor_tab::run_file_callback (void)
+file_editor_tab::run_file_callback (const bp_info& info)
 {
-  // Maybe someday we will do something here?
+  if (file_in_path (info.file, info.dir))
+    {
+      std::string pending_input = command_editor::get_current_line ();
+
+      command_editor::set_initial_input (pending_input);
+
+      command_editor::replace_line (info.function_name);
+      command_editor::redisplay ();
+
+      // We are executing inside the command editor event loop.  Force
+      // the current line to be returned for processing.
+      command_editor::interrupt ();
+    }
 }
 
 void
 file_editor_tab::run_file (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   if (_edit_area->isModified ())
     save_file (_file_name);
 
   QFileInfo file_info (_file_name);
   QString dir = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
+  function_name.chop (file_info.suffix ().length () + 1);
 
-  // We have to cut off the suffix, because octave appends it.
-  function_name.chop (file_info.suffix ().length () + 1);
-  emit process_octave_code (QString ("cd \'%1\'\n%2\n")
-                            .arg (dir).arg (function_name));
- 
-  // TODO: Sending a run event crashes for long scripts. Find out why.
-  // octave_link::post_event
-  //   (this, &file_editor_tab::run_file_callback, _file_name.toStdString ()));
+  bp_info info (_file_name, dir, function_name, 1);
+
+  octave_link::post_event (this, &file_editor_tab::run_file_callback, info);
 }
 
 void
 file_editor_tab::toggle_bookmark (const QWidget *ID)
 {
   if (ID != this)
     return;
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -165,17 +165,17 @@ private:
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
 
-  void run_file_callback (void);
+  void run_file_callback (const bp_info& info);
 
   bool file_in_path (const std::string& file, const std::string& dir);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1035,17 +1035,17 @@ file_editor::add_file_editor_tab (file_e
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
 
   connect (f, SIGNAL (mru_add_file (const QString&)),
            this, SLOT (handle_mru_add_file (const QString&)));
 
   connect (f, SIGNAL (process_octave_code (const QString&)),
-           parent (), SLOT (handle_command_double_clicked (const QString&)));
+           parent (), SLOT (execute_command_in_terminal (const QString&)));
   
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
            f, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (fetab_close_request (const QWidget*)),
            f, SLOT (conditional_close (const QWidget*)));
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -183,21 +183,22 @@ main_window::handle_clear_command_window
 
 void
 main_window::handle_clear_history_request (void)
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
-main_window::handle_command_double_clicked (const QString& command)
+main_window::execute_command_in_terminal (const QString& command)
 {
-  emit relay_command_signal (command);
+  octave_link::post_event (this, &main_window::execute_command_callback,
+                           command.toStdString ());
 
-  command_window->focus ();
+  focus_command_window ();
 }
 
 void
 main_window::handle_new_figure_request (void)
 {
   octave_link::post_event (this, &main_window::new_figure_callback);
 }
 
@@ -759,16 +760,20 @@ main_window::construct_octave_qt_link (v
 
   connect (_octave_qt_link, SIGNAL (clear_workspace_signal ()),
            _workspace_model, SLOT (clear_workspace ()));
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
+           SIGNAL (execute_command_in_terminal_signal (QString)),
+           this, SLOT (execute_command_in_terminal (QString)));
+
+  connect (_octave_qt_link,
            SIGNAL (set_history_signal (const QStringList&)),
            history_window, SLOT (set_history (const QStringList&)));
 
   connect (_octave_qt_link,
            SIGNAL (append_history_signal (const QString&)),
            history_window, SLOT (append_history (const QString&)));
 
   connect (_octave_qt_link,
@@ -1332,16 +1337,31 @@ main_window::resize_command_window_callb
 
 void
 main_window::clear_history_callback (void)
 {
   Fhistory (ovl ("-c"));
 }
 
 void
+main_window::execute_command_callback (const std::string& command)
+{
+  std::string pending_input = command_editor::get_current_line ();
+
+  command_editor::set_initial_input (pending_input);
+
+  command_editor::replace_line (command);
+  command_editor::redisplay ();
+
+  // We are executing inside the command editor event loop.  Force
+  // the current line to be returned for processing.
+  command_editor::interrupt ();
+}
+
+void
 main_window::new_figure_callback (void)
 {
   Fbuiltin (ovl ("figure"));
   Fdrawnow ();
 }
 
 void
 main_window::change_directory_callback (const std::string& directory)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -71,17 +71,16 @@ public:
   main_window (QWidget *parent = 0);
 
   ~main_window (void);
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
-  void relay_command_signal (const QString&);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
@@ -104,17 +103,17 @@ public slots:
   void reset_windows (void);
 
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
-  void handle_command_double_clicked (const QString& command);
+  void execute_command_in_terminal(const QString& dir);
 
   void handle_new_figure_request (void);
 
   void handle_new_variable_request (void);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
@@ -190,16 +189,18 @@ private:
   void clear_command_window_callback (void);
 
   void resize_command_window_callback (void);
 
   void clear_workspace_callback (void);
 
   void clear_history_callback (void);
 
+  void execute_command_callback (const std::string& command);
+
   void new_figure_callback (void);
 
   void change_directory_callback (const std::string& directory);
 
   void debug_continue_callback (void);
 
   void debug_step_into_callback (void);
 
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -238,16 +238,22 @@ octave_qt_link::do_debug_cd_or_addpath_e
 
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
   emit change_directory_signal (QString::fromStdString (dir));
 }
 
 void
+octave_qt_link::do_execute_command_in_terminal (const std::string& command)
+{
+  emit execute_command_in_terminal_signal (QString::fromStdString (command));
+}
+
+void
 octave_qt_link::do_set_workspace (bool top_level,
                                   const std::list<workspace_element>& ws)
 {
   QString scopes;
   QStringList symbols;
   QStringList class_names;
   QStringList dimensions;
   QStringList values;
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -86,16 +86,18 @@ public:
 
   int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option);
 
   void do_change_directory (const std::string& dir);
 
+  void do_execute_command_in_terminal (const std::string& command);
+
   void do_set_workspace (bool top_level,
                          const std::list<workspace_element>& ws);
 
   void do_clear_workspace (void);
 
   void do_set_history (const string_vector& hist);
   void do_append_history (const std::string& hist_entry);
   void do_clear_history (void);
@@ -129,16 +131,18 @@ private:
 signals:
 
   void exit_signal (int status);
 
   void edit_file_signal (const QString& file);
 
   void change_directory_signal (const QString& dir);
 
+  void execute_command_in_terminal_signal (const QString& command);
+
   void set_workspace_signal (bool top_level,
                              const QString& scopes,
                              const QStringList& symbols,
                              const QStringList& class_names,
                              const QStringList& dimensions,
                              const QStringList& values);
 
   void clear_workspace_signal (void);
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -39,47 +39,35 @@ terminal_dock_widget::terminal_dock_widg
   setWidget (terminal);
 
   connect (parent (), SIGNAL (settings_changed (const QSettings *)),
            this, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_visibility (bool)));
 
-  connect (parent (), SIGNAL (relay_command_signal (const QString&)),
-           this, SLOT (relay_command (const QString&)));
-
   // Forward signals to QTerminal widget.
 
   connect (this, SIGNAL (notice_settings_signal (const QSettings *)),
            terminal, SLOT (notice_settings (const QSettings *)));
 
-  connect (this, SIGNAL (relay_command_signal (const QString&)),
-           terminal, SLOT (relay_command (const QString&)));
-
   connect (this, SIGNAL (copyClipboard_signal (void)),
            terminal, SLOT (copyClipboard (void)));
 
   connect (this, SIGNAL (pasteClipboard_signal (void)),
            terminal, SLOT (pasteClipboard (void)));
 }
 
 void
 terminal_dock_widget::notice_settings (const QSettings *settings)
 {
   emit notice_settings_signal (settings);
 }
 
 void
-terminal_dock_widget::relay_command (const QString& command)
-{
-  emit relay_command_signal (command);
-}
-
-void
 terminal_dock_widget::copyClipboard (void)
 {
   emit copyClipboard_signal ();
 }
 
 void
 terminal_dock_widget::pasteClipboard (void)
 {
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -38,30 +38,26 @@ public:
   terminal_dock_widget (QWidget *parent = 0);
 
 signals:
 
 public slots:
 
   void notice_settings (const QSettings *settings);
 
-  void relay_command (const QString& command);
-
   void copyClipboard (void);
 
   void pasteClipboard (void);
 
   void focus (void);
 
 signals:
 
   void notice_settings_signal (const QSettings *settings); 
 
-  void relay_command_signal (const QString& command);
-
   void copyClipboard_signal (void);
 
   void pasteClipboard_signal (void);
 
 private:
 
   QTerminal *terminal;
 };
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -70,17 +70,17 @@ workspace_view::workspace_view (QWidget 
   view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
 
   // Connect signals and slots.
 
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT(contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
-           p, SLOT (handle_command_double_clicked (const QString&)));
+           p, SLOT (execute_command_in_terminal (const QString&)));
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue("workspaceview/column_state",
                      view->horizontalHeader ()->saveState ());
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -188,16 +188,23 @@ public:
   }
 
   static void change_directory (const std::string& dir)
   {
     if (enabled ())
       instance->do_change_directory (dir);
   }
 
+  // Preserves pending input.
+  static void execute_command_in_terminal (const std::string& command)
+  {
+    if (enabled ())
+      instance->do_execute_command_in_terminal (command);
+  }
+
   static void set_workspace (void);
 
   static void set_workspace (bool top_level,
                              const std::list<workspace_element>& ws)
   {
     if (enabled ())
       instance->do_set_workspace (top_level, ws);
   }
@@ -365,16 +372,18 @@ protected:
 
   virtual int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option) = 0;
 
   virtual void do_change_directory (const std::string& dir) = 0;
 
+  virtual void do_execute_command_in_terminal (const std::string& command) = 0;
+
   virtual void
   do_set_workspace (bool top_level,
                     const std::list<workspace_element>& ws) = 0;
 
   virtual void do_clear_workspace (void) = 0;
 
   virtual void do_set_history (const string_vector& hist) = 0;
   virtual void do_append_history (const std::string& hist_entry) = 0;
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -43,16 +43,18 @@ along with Octave; see the file COPYING.
 #include "oct-mutex.h"
 #include "oct-time.h"
 #include "singleton-cleanup.h"
 
 command_editor *command_editor::instance = 0;
 
 std::set<command_editor::startup_hook_fcn> command_editor::startup_hook_set;
 
+std::set<command_editor::pre_input_hook_fcn> command_editor::pre_input_hook_set;
+
 std::set<command_editor::event_hook_fcn> command_editor::event_hook_set;
 
 static octave_mutex event_hook_lock;
 
 #if defined (USE_READLINE)
 
 #include <cstdio>
 #include <cstdlib>
@@ -61,16 +63,18 @@ static octave_mutex event_hook_lock;
 
 class
 gnu_readline : public command_editor
 {
 public:
 
   typedef command_editor::startup_hook_fcn startup_hook_fcn;
 
+  typedef command_editor::pre_input_hook_fcn pre_input_hook_fcn;
+
   typedef command_editor::event_hook_fcn event_hook_fcn;
 
   typedef command_editor::completion_fcn completion_fcn;
 
   gnu_readline (void);
 
   ~gnu_readline (void) { }
 
@@ -134,30 +138,38 @@ public:
 
   user_accept_line_fcn do_get_user_accept_line_function (void) const;
 
   string_vector
   do_generate_filename_completions (const std::string& text);
 
   std::string do_get_line_buffer (void) const;
 
+  std::string do_get_current_line (void) const;
+
+  void do_replace_line (const std::string& text, bool clear_undo);
+
   void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_accept_line (void);
 
   bool do_undo (void);
 
   void do_clear_undo_list (void);
 
   void set_startup_hook (startup_hook_fcn f);
 
   void restore_startup_hook (void);
 
+  void set_pre_input_hook (pre_input_hook_fcn f);
+
+  void restore_pre_input_hook (void);
+
   void set_event_hook (event_hook_fcn f);
 
   void restore_event_hook (void);
 
   void do_restore_event_hook (void);
 
   void do_read_init_file (const std::string& file);
 
@@ -174,16 +186,18 @@ public:
   static int history_search_backward (int, int);
 
   static int history_search_forward (int, int);
 
 private:
 
   startup_hook_fcn previous_startup_hook;
 
+  pre_input_hook_fcn previous_pre_input_hook;
+
   event_hook_fcn previous_event_hook;
 
   completion_fcn completion_function;
 
   quoting_fcn quoting_function;
 
   dequoting_fcn dequoting_function;
 
@@ -200,16 +214,17 @@ private:
 
   static int command_accept_line (int count, int key);
 
   static char **command_completer (const char *text, int start, int end);
 };
 
 gnu_readline::gnu_readline ()
   : command_editor (), previous_startup_hook (0),
+    previous_pre_input_hook (0),
     previous_event_hook (0), completion_function (0),
     quoting_function (0), dequoting_function (0),
     char_is_quoted_function (0), user_accept_line_function (0)
 {
   // FIXME -- need interface to rl_add_defun, rl_initialize, and
   // a function to set rl_terminal_name
 
   std::string term = octave_env::getenv ("TERM");
@@ -517,16 +532,32 @@ gnu_readline::do_generate_filename_compl
 }
 
 std::string
 gnu_readline::do_get_line_buffer (void) const
 {
   return ::octave_rl_line_buffer ();
 }
 
+std::string
+gnu_readline::do_get_current_line (void) const
+{
+  std::string retval;
+  char *buf = ::octave_rl_copy_line ();
+  retval = buf;
+  free (buf);
+  return retval;
+}
+
+void
+gnu_readline::do_replace_line (const std::string& text, bool clear_undo)
+{
+  ::octave_rl_replace_line (text.c_str (), clear_undo);
+}
+
 void
 gnu_readline::do_insert_text (const std::string& text)
 {
   ::octave_rl_insert_text (text.c_str ());
 }
 
 void
 gnu_readline::do_newline (void)
@@ -563,16 +594,31 @@ gnu_readline::set_startup_hook (startup_
 
 void
 gnu_readline::restore_startup_hook (void)
 {
   ::octave_rl_set_startup_hook (previous_startup_hook);
 }
 
 void
+gnu_readline::set_pre_input_hook (pre_input_hook_fcn f)
+{
+  previous_pre_input_hook = ::octave_rl_get_pre_input_hook ();
+
+  if (f != previous_pre_input_hook)
+    ::octave_rl_set_pre_input_hook (f);
+}
+
+void
+gnu_readline::restore_pre_input_hook (void)
+{
+  ::octave_rl_set_pre_input_hook (previous_pre_input_hook);
+}
+
+void
 gnu_readline::set_event_hook (event_hook_fcn f)
 {
   previous_event_hook = octave_rl_get_event_hook ();
 
   ::octave_rl_set_event_hook (f);
 }
 
 void
@@ -762,17 +808,21 @@ public:
   void do_set_output_stream (FILE *f);
 
   FILE *do_get_output_stream (void);
 
   string_vector do_generate_filename_completions (const std::string& text);
 
   std::string do_get_line_buffer (void) const;
 
-  void do_insert_text (const std::string&);
+  std::string do_get_current_line (void) const;
+
+  void do_replace_line (const std::string& text, bool clear_undo);
+
+  void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_accept_line (void);
 
 private:
 
   FILE *input_stream;
@@ -827,16 +877,29 @@ default_command_editor::do_generate_file
 }
 
 std::string
 default_command_editor::do_get_line_buffer (void) const
 {
   return "";
 }
 
+std::string
+default_command_editor::do_get_current_line (void) const
+{
+  // FIXME
+  return std::string ();
+}
+
+void
+default_command_editor::do_replace_line (const std::string&, bool)
+{
+  // FIXME
+}
+
 void
 default_command_editor::do_insert_text (const std::string&)
 {
   // FIXME
 }
 
 void
 default_command_editor::do_newline (void)
@@ -886,32 +949,60 @@ command_editor::make_command_editor (voi
 
 void
 command_editor::force_default_editor (void)
 {
   delete instance;
   instance = new default_command_editor ();
 }
 
+void
+command_editor::set_initial_input (const std::string& text)
+{
+  if (instance_ok ())
+    instance->initial_input = text;
+}
+
+int
+command_editor::insert_initial_input (void)
+{
+  return instance_ok () ? instance->do_insert_initial_input () : 0;
+}
+
 int
 command_editor::startup_handler (void)
 {
   for (startup_hook_set_iterator p = startup_hook_set.begin ();
        p != startup_hook_set.end (); p++)
     {
       startup_hook_fcn f = *p;
 
       if (f)
         f ();
     }
 
   return 0;
 }
 
 int
+command_editor::pre_input_handler (void)
+{
+  for (pre_input_hook_set_iterator p = pre_input_hook_set.begin ();
+       p != pre_input_hook_set.end (); p++)
+    {
+      pre_input_hook_fcn f = *p;
+
+      if (f)
+        f ();
+    }
+
+  return 0;
+}
+
+int
 command_editor::event_handler (void)
 {
   event_hook_lock.lock ();
 
   std::set<event_hook_fcn> hook_set (event_hook_set);
 
   event_hook_lock.unlock ();
 
@@ -940,18 +1031,27 @@ command_editor::readline (const std::str
   bool eof;
 
   return readline (prompt, eof);
 }
 
 std::string
 command_editor::readline (const std::string& prompt, bool& eof)
 {
-  return (instance_ok ())
-    ? instance->do_readline (prompt, eof) : std::string ();
+  std::string retval;
+
+  if (instance_ok ())
+    {
+      if (! instance->initial_input.empty ())
+        add_pre_input_hook (command_editor::insert_initial_input);
+
+      retval = instance->do_readline (prompt, eof);
+    }
+
+  return retval;
 }
 
 void
 command_editor::set_input_stream (FILE *f)
 {
   if (instance_ok ())
     instance->do_set_input_stream (f);
 }
@@ -1174,16 +1274,29 @@ command_editor::generate_filename_comple
 }
 
 std::string
 command_editor::get_line_buffer (void)
 {
   return (instance_ok ()) ? instance->do_get_line_buffer () : "";
 }
 
+std::string
+command_editor::get_current_line (void)
+{
+  return (instance_ok ()) ? instance->do_get_current_line () : "";
+}
+
+void
+command_editor::replace_line (const std::string& text, bool clear_undo)
+{
+  if (instance_ok ())
+    instance->do_replace_line (text, clear_undo);
+}
+
 void
 command_editor::insert_text (const std::string& text)
 {
   if (instance_ok ())
     instance->do_insert_text (text);
 }
 
 void
@@ -1235,16 +1348,42 @@ command_editor::remove_startup_hook (sta
         startup_hook_set.erase (p);
 
       if (startup_hook_set.empty ())
         instance->restore_startup_hook ();
     }
 }
 
 void
+command_editor::add_pre_input_hook (pre_input_hook_fcn f)
+{
+  if (instance_ok ())
+    {
+      pre_input_hook_set.insert (f);
+
+      instance->set_pre_input_hook (pre_input_handler);
+    }
+}
+
+void
+command_editor::remove_pre_input_hook (pre_input_hook_fcn f)
+{
+  if (instance_ok ())
+    {
+      pre_input_hook_set_iterator p = pre_input_hook_set.find (f);
+
+      if (p != pre_input_hook_set.end ())
+        pre_input_hook_set.erase (p);
+
+      if (pre_input_hook_set.empty ())
+        instance->restore_pre_input_hook ();
+    }
+}
+
+void
 command_editor::add_event_hook (event_hook_fcn f)
 {
   octave_autolock guard (event_hook_lock);
 
   if (instance_ok ())
     {
       event_hook_set.insert (f);
 
@@ -1581,16 +1720,31 @@ command_editor::do_decode_prompt_string 
         }
       else
         result += c;
     }
 
   return result;
 }
 
+int
+command_editor::do_insert_initial_input (void)
+{
+  std::string input = initial_input;
+
+  initial_input = "";
+
+  do_insert_text (input);
+
+  // Is it really right to redisplay here?
+  do_redisplay ();
+
+  return 0;
+}
+
 // Return the octal number parsed from STRING, or -1 to indicate that
 // the string contained a bad number.
 
 int
 command_editor::read_octal (const std::string& s)
 {
   int result = 0;
   int digits = 0;
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -32,22 +32,24 @@ along with Octave; see the file COPYING.
 
 class
 OCTAVE_API
 command_editor
 {
 protected:
 
   command_editor (void)
-    : command_number (0), interrupted (false) { }
+    : command_number (0), interrupted (false), initial_input () { }
 
 public:
 
   typedef int (*startup_hook_fcn) (void);
 
+  typedef int (*pre_input_hook_fcn) (void);
+
   typedef int (*event_hook_fcn) (void);
 
   typedef std::string (*completion_fcn) (const std::string&, int);
 
   typedef std::string (*quoting_fcn) (const std::string&, int, char);
 
   typedef std::string (*dequoting_fcn) (const std::string&, int);
 
@@ -118,77 +120,96 @@ public:
   static char_is_quoted_fcn get_char_is_quoted_function (void);
 
   static user_accept_line_fcn get_user_accept_line_function (void);
 
   static string_vector generate_filename_completions (const std::string& text);
 
   static std::string get_line_buffer (void);
 
+  static std::string get_current_line (void);
+
+  static void replace_line (const std::string& text, bool clear_undo = true);
+
   static void insert_text (const std::string& text);
 
   static void newline (void);
 
   static void accept_line (void);
 
   static bool undo (void);
 
   static void clear_undo_list (void);
 
   static void add_startup_hook (startup_hook_fcn f);
 
   static void remove_startup_hook (startup_hook_fcn f);
 
+  static void add_pre_input_hook (pre_input_hook_fcn f);
+
+  static void remove_pre_input_hook (pre_input_hook_fcn f);
+
   static void add_event_hook (event_hook_fcn f);
 
   static void remove_event_hook (event_hook_fcn f);
 
   static void run_event_hooks (void);
 
   static void read_init_file (const std::string& file = std::string ());
 
   static void re_read_init_file (void);
 
   static bool filename_completion_desired (bool);
 
   static bool filename_quoting_desired (bool);
 
-  static bool interrupt (bool);
+  static bool interrupt (bool = true);
 
   static int current_command_number (void);
 
   static void reset_current_command_number (int n);
 
   static void increment_current_command_number (void);
 
   static void force_default_editor (void);
 
+  static void set_initial_input (const std::string& text);
+
+  static int insert_initial_input (void);
+
 private:
 
   // No copying!
 
   command_editor (const command_editor&);
 
   command_editor& operator = (const command_editor&);
 
   static bool instance_ok (void);
 
   static void make_command_editor (void);
 
   static int startup_handler (void);
 
+  static int pre_input_handler (void);
+
   static int event_handler (void);
 
   static std::set<startup_hook_fcn> startup_hook_set;
 
+  static std::set<pre_input_hook_fcn> pre_input_hook_set;
+
   static std::set<event_hook_fcn> event_hook_set;
 
   typedef std::set<startup_hook_fcn>::iterator startup_hook_set_iterator;
   typedef std::set<startup_hook_fcn>::const_iterator startup_hook_set_const_iterator;
 
+  typedef std::set<pre_input_hook_fcn>::iterator pre_input_hook_set_iterator;
+  typedef std::set<pre_input_hook_fcn>::const_iterator pre_input_hook_set_const_iterator;
+
   typedef std::set<event_hook_fcn>::iterator event_hook_set_iterator;
   typedef std::set<event_hook_fcn>::const_iterator event_hook_set_const_iterator;
 
   // The real thing.
   static command_editor *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
@@ -266,49 +287,61 @@ protected:
   virtual char_is_quoted_fcn do_get_char_is_quoted_function (void) const { return 0; }
 
   virtual user_accept_line_fcn do_get_user_accept_line_function (void) const { return 0; }
 
   virtual string_vector do_generate_filename_completions (const std::string& text) = 0;
 
   virtual std::string do_get_line_buffer (void) const = 0;
 
-  virtual void do_insert_text (const std::string&) = 0;
+  virtual std::string do_get_current_line (void) const = 0;
+
+  virtual void do_replace_line (const std::string& text, bool clear_undo) = 0;
+
+  virtual void do_insert_text (const std::string& text) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_accept_line (void) = 0;
 
   virtual bool do_undo (void) { return false; }
 
   virtual void do_clear_undo_list (void) { }
 
   virtual void set_startup_hook (startup_hook_fcn) { }
 
   virtual void restore_startup_hook (void) { }
 
-  virtual void set_event_hook (startup_hook_fcn) { }
+  virtual void set_pre_input_hook (pre_input_hook_fcn) { }
+
+  virtual void restore_pre_input_hook (void) { }
+
+  virtual void set_event_hook (event_hook_fcn) { }
 
   virtual void restore_event_hook (void) { }
 
   virtual void do_read_init_file (const std::string&) { }
 
   virtual void do_re_read_init_file (void) { }
 
   virtual bool do_filename_completion_desired (bool) { return false; }
 
   virtual bool do_filename_quoting_desired (bool) { return false; }
 
   virtual void do_interrupt (bool) { }
 
+  int do_insert_initial_input (void);
+
   int read_octal (const std::string& s);
 
   void error (int);
 
   void error (const std::string&);
 
   // The current command number.
   int command_number;
 
   bool interrupted;
+
+  std::string initial_input;
 };
 
 #endif
diff --git a/liboctave/util/oct-rl-edit.c b/liboctave/util/oct-rl-edit.c
--- a/liboctave/util/oct-rl-edit.c
+++ b/liboctave/util/oct-rl-edit.c
@@ -118,16 +118,28 @@ octave_rl_resize_terminal (void)
 
 void
 octave_rl_restore_terminal_state ()
 {
   if (rl_deprep_term_function)
     rl_deprep_term_function ();
 }
 
+char *
+octave_rl_copy_line (void)
+{
+  return rl_copy_text (0, rl_end);
+}
+
+void
+octave_rl_replace_line (const char *s, int clear_undo)
+{
+  rl_replace_line (s, clear_undo);
+}
+
 void
 octave_rl_insert_text (const char *s)
 {
   rl_insert_text (s);
 }
 
 int
 octave_rl_newline (int count, int key)
@@ -320,16 +332,28 @@ octave_rl_set_startup_hook (rl_startup_h
 
 rl_startup_hook_fcn_ptr
 octave_rl_get_startup_hook (void)
 {
   return rl_startup_hook;
 }
 
 void
+octave_rl_set_pre_input_hook (rl_pre_input_hook_fcn_ptr f)
+{
+  rl_pre_input_hook = f;
+}
+
+rl_pre_input_hook_fcn_ptr
+octave_rl_get_pre_input_hook (void)
+{
+  return rl_pre_input_hook;
+}
+
+void
 octave_rl_set_event_hook (rl_event_hook_fcn_ptr f)
 {
   rl_event_hook = f;
 }
 
 rl_event_hook_fcn_ptr
 octave_rl_get_event_hook (void)
 {
diff --git a/liboctave/util/oct-rl-edit.h b/liboctave/util/oct-rl-edit.h
--- a/liboctave/util/oct-rl-edit.h
+++ b/liboctave/util/oct-rl-edit.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_rl_edit_h)
 #define octave_rl_edit_h 1
 
 typedef int (*rl_startup_hook_fcn_ptr) (void);
 
+typedef int (*rl_pre_input_hook_fcn_ptr) (void);
+
 typedef int (*rl_event_hook_fcn_ptr) (void);
 
 typedef int (*rl_fcn_ptr) (int, int);
 
 typedef char ** (*rl_attempted_completion_fcn_ptr) (const char *, int, int);
 
 typedef char * (*rl_completer_fcn_ptr) (const char *, int);
 
@@ -57,16 +59,20 @@ extern void octave_rl_enable_paren_match
 extern void octave_rl_init (void);
 
 extern void octave_rl_clear_screen (int skip_redisplay);
 
 extern void octave_rl_resize_terminal (void);
 
 extern void octave_rl_restore_terminal_state (void);
 
+extern char *octave_rl_copy_line (void);
+
+extern void octave_rl_replace_line (const char *s, int clear_undo);
+
 extern void octave_rl_insert_text (const char *);
 
 extern int octave_rl_newline (int, int);
 
 extern const char *octave_rl_line_buffer (void);
 
 extern int octave_rl_do_undo (void);
 
@@ -118,16 +124,20 @@ extern void
 octave_rl_set_dequoting_function (rl_dequoting_fcn_ptr);
 
 extern void octave_rl_set_char_is_quoted_function (rl_char_is_quoted_fcn_ptr);
 
 extern void octave_rl_set_startup_hook (rl_startup_hook_fcn_ptr);
 
 extern rl_startup_hook_fcn_ptr octave_rl_get_startup_hook (void);
 
+extern void octave_rl_set_pre_input_hook (rl_startup_hook_fcn_ptr);
+
+extern rl_pre_input_hook_fcn_ptr octave_rl_get_pre_input_hook (void);
+
 extern void octave_rl_set_event_hook (rl_event_hook_fcn_ptr f);
 
 extern rl_event_hook_fcn_ptr octave_rl_get_event_hook (void);
 
 extern char **
 octave_rl_completion_matches (const char *, rl_completer_fcn_ptr);
 
 extern char octave_rl_prompt_start_ignore (void);
