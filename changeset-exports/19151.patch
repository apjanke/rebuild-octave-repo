# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411442721 25200
#      Mon Sep 22 20:25:21 2014 -0700
# Node ID e09318118fd6190cd9e3f2be99dcf5d1462f8e4c
# Parent  adb102face2d7446ce229b1b2751d2809266e381
doc: Add note to gamma docstring about using gammaln when input is large.

* gammainc.cc (Fgammainc): Change seealso link to gammaln from lgamma.

* mappers.cc (Fgamma): Add note to docstring about using gammaln to preserve
precision when input to gamma is large.

* mappers.cc (Flgamma): Put gammaln first in docstring.

diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -68,17 +68,17 @@ If neither @var{x} nor @var{a} is scalar
 \n\
 By default the incomplete gamma function integrated from 0 to @var{x} is\n\
 computed.  If @qcode{\"upper\"} is given then the complementary function\n\
 integrated from @var{x} to infinity is calculated.  It should be noted that\n\
 \n\
 @example\n\
 gammainc (@var{x}, @var{a}) @equiv{} 1 - gammainc (@var{x}, @var{a}, \"upper\")\n\
 @end example\n\
-@seealso{gamma, lgamma}\n\
+@seealso{gamma, gammaln}\n\
 @end deftypefn")
 {
   octave_value retval;
   bool lower = true;
 
   int nargin = args.length ();
 
   if (nargin == 3)
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1019,17 +1019,23 @@ Compute the Gamma function,\n\
             /\n\
 gamma (z) = | t^(z-1) exp (-t) dt.\n\
             /\n\
          t=0\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
-@seealso{gammainc, lgamma}\n\
+\n\
+Programming Note: The gamma function can grow quite large even for small\n\
+input values.  In many cases it may be preferable to use the natural\n\
+logarithm of the gamma function (@code{gammaln}) in calculations to minimize\n\
+loss of precision.  The final result is then\n\
+@code{exp (@var{result_using_gammaln}).}\n\
+@seealso{gammainc, gammaln, factorial}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).gamma ();
   else
     print_usage ();
 
@@ -1569,18 +1575,18 @@ hexadecimal digits (0-9 and @nospell{a-f
 %! assert (isxdigit (charset), result);
 
 %!error isxdigit ()
 %!error isxdigit (1, 2)
 */
 
 DEFUN (lgamma, args, ,
        "-*- texinfo -*-\n\
-@deftypefn  {Mapping Function} {} lgamma (@var{x})\n\
-@deftypefnx {Mapping Function} {} gammaln (@var{x})\n\
+@deftypefn  {Mapping Function} {} gammaln (@var{x})\n\
+@deftypefnx {Mapping Function} {} lgamma (@var{x})\n\
 Return the natural logarithm of the gamma function of @var{x}.\n\
 @seealso{gamma, gammainc}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).lgamma ();
   else
