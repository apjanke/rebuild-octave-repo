# HG changeset patch
# User Rik <rik@octave.org>
# Date 1472246534 25200
#      Fri Aug 26 14:22:14 2016 -0700
# Node ID 52c205a0ad888552a7c62c23e8c47495679edafe
# Parent  c5b9c202e637d7e0cf071d5d5b5eaf303ad2ccb6
Make linestyles compatible at larger linewidths (bug #48884).

* gl-render.h (set_linestyle): Change prototype to have a linewidth input.
* gl-render.h (render_grid): Change prototype to have a linewidth input.

* gl-render.cc (render_grid): Change function to have linewidth input.
Call set_linestyle with additional linewidth input.
* gl-render.cc (draw_axes_boxes, draw_axes_x_grid, draw_axes_y_grid,
                draw_axes_z_grid, draw_line, draw_surface, draw_patch):
Get linewidth from axes properties.
Call set_linestyle with additional linewidth input.
* gl-render.cc (set_linestyle): Use linewdith as repetition factor in
glLineStipple.  Update binary stipple patterns to get better visual results.

* gl2ps-print.cc (set_linestyle): Change function to have linewidth input.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -822,26 +822,27 @@ namespace octave
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
   void
-  opengl_renderer::render_grid (const std::string& gridstyle,
+  opengl_renderer::render_grid (const double linewidth,
+                                const std::string& gridstyle,
                                 const Matrix& gridcolor, const double gridalpha,
                                 const Matrix& ticks, double lim1, double lim2,
                                 double p1, double p1N, double p2, double p2N,
                                 int xyz, bool is_3D)
   {
 #if defined (HAVE_OPENGL)
 
     glColor4d (gridcolor(0), gridcolor(1), gridcolor(2), gridalpha);
-    set_linestyle (gridstyle, true);
+    set_linestyle (gridstyle, true, linewidth);
     glBegin (GL_LINES);
     for (int i = 0; i < ticks.numel (); i++)
       {
         double val = ticks(i);
         if (lim1 <= val && val <= lim2)
           {
             if (xyz == X_AXIS)
               {
@@ -868,17 +869,17 @@ namespace octave
                 glVertex3d (p1N, p2, val);
                 glVertex3d (p1, p2, val);
                 glVertex3d (p1, p2N, val);
                 glVertex3d (p1, p2, val);
               }
           }
       }
     glEnd ();
-    set_linestyle ("-", true);
+    set_linestyle ("-");  // Disable LineStipple
     double black[3] = {0, 0, 0};
     glColor3dv (black);
 
 #else
 
     octave_unused_parameter (gridstyle);
     octave_unused_parameter (gridcolor);
     octave_unused_parameter (gridalpha);
@@ -1181,16 +1182,17 @@ namespace octave
 
     if (! props.is_visible ())
       return;
 
     bool xySym = props.get_xySym ();
     bool layer2Dtop = props.get_layer2Dtop ();
     bool is2d = props.get_is2D ();
     bool boxFull = (props.get_boxstyle () == "full");
+    double linewidth = props.get_linewidth ();
     double xPlane = props.get_xPlane ();
     double yPlane = props.get_yPlane ();
     double zPlane = props.get_zPlane ();
     double xPlaneN = props.get_xPlaneN ();
     double yPlaneN = props.get_yPlaneN ();
     double zPlaneN = props.get_zPlaneN ();
     double xpTick = props.get_xpTick ();
     double ypTick = props.get_ypTick ();
@@ -1198,17 +1200,17 @@ namespace octave
     double xpTickN = props.get_xpTickN ();
     double ypTickN = props.get_ypTickN ();
     double zpTickN = props.get_zpTickN ();
 
     bool plotyy = (props.has_property ("__plotyy_axes__"));
 
     // Axes box
 
-    set_linestyle ("-", true);
+    set_linestyle ("-", true, linewidth);
 
     glBegin (GL_LINES);
 
     if (layer2Dtop)
       std::swap (zpTick, zpTickN);
 
     // X box
     set_color (props.get_xcolor_rgb ());
@@ -1331,16 +1333,17 @@ namespace octave
         double ypTickN = props.get_ypTickN ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
         // X grid
 
+        double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
@@ -1360,26 +1363,29 @@ namespace octave
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_xgrid = true;
           }
 
         // minor grid lines
         if (do_xminorgrid)
-          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+          render_grid (linewidth,
+                       minorgridstyle, minorgridcolor, minorgridalpha,
                        xmticks, x_min, x_max,
-                       yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane,
-                       zPlaneN, 0, (zstate != AXE_DEPTH_DIR));
+                       yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
+                       0, (zstate != AXE_DEPTH_DIR));
 
         // grid lines
         if (do_xgrid)
-          render_grid (gridstyle, gridcolor, gridalpha, xticks, x_min, x_max,
-                       yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane,
-                       zPlaneN, 0, (zstate != AXE_DEPTH_DIR));
+          render_grid (linewidth,
+                       gridstyle, gridcolor, gridalpha,
+                       xticks, x_min, x_max,
+                       yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
+                       0, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_xcolor_rgb ());
 
         // minor tick marks
         if (do_xminortick)
           {
             if (tick_along_z)
               render_tickmarks (xmticks, x_min, x_max, ypTick, ypTick,
@@ -1455,16 +1461,17 @@ namespace octave
         double y_max = props.get_y_max ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
         // Y grid
 
+        double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
@@ -1485,26 +1492,29 @@ namespace octave
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_ygrid = true;
           }
 
         // minor grid lines
         if (do_yminorgrid)
-          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+          render_grid (linewidth,
+                       minorgridstyle, minorgridcolor, minorgridalpha,
                        ymticks, y_min, y_max,
-                       xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane,
-                       zPlaneN, 1, (zstate != AXE_DEPTH_DIR));
+                       xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
+                       1, (zstate != AXE_DEPTH_DIR));
 
         // grid lines
         if (do_ygrid)
-          render_grid (gridstyle, gridcolor, gridalpha, yticks, y_min, y_max,
-                       xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane,
-                       zPlaneN, 1, (zstate != AXE_DEPTH_DIR));
+          render_grid (linewidth,
+                       gridstyle, gridcolor, gridalpha,
+                       yticks, y_min, y_max,
+                       xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
+                       1, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_ycolor_rgb ());
 
         // minor tick marks
         if (do_yminortick)
           {
             if (tick_along_z)
               render_tickmarks (ymticks, y_min, y_max, xpTick, xpTick,
@@ -1570,16 +1580,17 @@ namespace octave
         double xPlaneN = props.get_xPlaneN ();
         double yPlane = props.get_yPlane ();
         double yPlaneN = props.get_yPlaneN ();
         double z_min = props.get_z_min ();
         double z_max = props.get_z_max ();
 
         // Z Grid
 
+        double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
         bool do_zminorgrid = (props.is_zminorgrid ()
@@ -1598,23 +1609,26 @@ namespace octave
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_zgrid = true;
           }
 
         // minor grid lines
         if (do_zminorgrid)
-          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+          render_grid (linewidth,
+                       minorgridstyle, minorgridcolor, minorgridalpha,
                        zmticks, z_min, z_max,
                        xPlane, xPlaneN, yPlane, yPlaneN, 2, true);
 
         // grid lines
         if (do_zgrid)
-          render_grid (gridstyle, gridcolor, gridalpha, zticks, z_min, z_max,
+          render_grid (linewidth,
+                       gridstyle, gridcolor, gridalpha,
+                       zticks, z_min, z_max,
                        xPlane, xPlaneN, yPlane, yPlaneN, 2, true);
 
         set_color (props.get_zcolor_rgb ());
 
         // minor tick marks
         if (do_zminortick)
           {
             if (xySym)
@@ -1884,17 +1898,17 @@ namespace octave
 
     draw_axes_x_grid (props);
     draw_axes_y_grid (props);
     draw_axes_z_grid (props);
 
     if (props.get_tag () != "legend" || props.get_box () != "off")
       draw_axes_boxes (props);
 
-    set_linestyle ("-");
+    set_linestyle ("-");  // Disable LineStipple
 
     set_clipbox (x_min, x_max, y_min, y_max, z_min, z_max);
 
     // Re-enable line smoothing for children
     if (antialias == GL_TRUE)
       glEnable (GL_LINE_SMOOTH);
 
     draw_axes_children (props);
@@ -1937,17 +1951,17 @@ namespace octave
 
         for (int i = 0; i < n; i++)
           clip[i] = (clip_code (x(i), y(i), z_mid) & clip_mask);
       }
 
     if (! props.linestyle_is ("none") && ! props.color_is ("none"))
       {
         set_color (props.get_color_rgb ());
-        set_linestyle (props.get_linestyle (), false);
+        set_linestyle (props.get_linestyle (), false, props.get_linewidth ());
         set_linewidth (props.get_linewidth ());
 
         if (has_z)
           {
             bool flag = false;
 
             for (int i = 1; i < n; i++)
               {
@@ -2363,17 +2377,18 @@ namespace octave
                   }
               }
 
             if ((el_mode > 0) && (num_lights > 0))
               glEnable (GL_LIGHTING);
             glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD) ? GL_SMOOTH
                           : GL_FLAT);
 
-            set_linestyle (props.get_linestyle (), false);
+            set_linestyle (props.get_linestyle (), false,
+                           props.get_linewidth ());
             set_linewidth (props.get_linewidth ());
 
             // Mesh along Y-axis
 
             if (props.meshstyle_is ("both") || props.meshstyle_is ("column"))
               {
                 for (int i = 0; i < zc; i++)
                   {
@@ -2560,17 +2575,17 @@ namespace octave
 
                         glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                         glEnd ();
                       }
                   }
               }
 
-            set_linestyle ("-");
+            set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
             if ((el_mode > 0) && (num_lights > 0))
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement transparency
@@ -2944,18 +2959,19 @@ namespace octave
                       cb[i] = ss * (scr + (1-scr) * ecolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
             if ((el_mode > 0) && (num_lights > 0) && has_normals)
               glEnable (GL_LIGHTING);
 
-            set_linestyle (props.get_linestyle (), false);
-            set_linewidth (props.get_linewidth ());
+            double linewidth = props.get_linewidth ();
+            set_linestyle (props.get_linestyle (), false, linewidth);
+            set_linewidth (linewidth);
 
             // NOTE: patch contour cannot be offset.  Offset must occur with the
             // filled portion of the patch above.  The tesselator uses
             // GLU_TESS_BOUNDARY_ONLY to get the outline of the patch and OpenGL
             // automatically sets the glType to GL_LINE_LOOP.  This primitive is
             // not supported by glPolygonOffset which is used to do Z offsets.
             patch_tesselator tess (this, ec_mode, el_mode);
 
@@ -3030,17 +3046,17 @@ namespace octave
                         tess.add_vertex (vv->coords.fortran_vec (), vv);
                       }
 
                     tess.end_contour ();
                     tess.end_polygon ();
                   }
               }
 
-            set_linestyle ("-");
+            set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
             if ((el_mode > 0) && (num_lights > 0) && has_normals)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement transparency
@@ -3565,33 +3581,34 @@ namespace octave
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
   void
-  opengl_renderer::set_linestyle (const std::string& s, bool use_stipple)
+  opengl_renderer::set_linestyle (const std::string& s, bool use_stipple,
+                                  double linewidth)
   {
 #if defined (HAVE_OPENGL)
 
     bool solid = false;
 
     if (s == "-")
       {
         glLineStipple (1, static_cast<unsigned short> (0xFFFF));
         solid = true;
       }
     else if (s == ":")
-      glLineStipple (1, static_cast<unsigned short> (0x8888));
+      glLineStipple (linewidth, static_cast<unsigned short> (0x5555));
     else if (s == "--")
-      glLineStipple (1, static_cast<unsigned short> (0xF0F0));
+      glLineStipple (linewidth, static_cast<unsigned short> (0x0F0F));
     else if (s == "-.")
-      glLineStipple (1, static_cast<unsigned short> (0x020F));
+      glLineStipple (linewidth, static_cast<unsigned short> (0x6F6F));
     else
       glLineStipple (1, static_cast<unsigned short> (0x0000));
 
     if (solid && ! use_stipple)
       glDisable (GL_LINE_STIPPLE);
     else
       glEnable (GL_LINE_STIPPLE);
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -75,17 +75,18 @@ namespace octave
     virtual void draw_uibuttongroup (const uibuttongroup::properties& props,
                                      const graphics_object& go);
     virtual void init_gl_context (bool enhanced, const Matrix& backgroundColor);
     virtual void setup_opengl_transformation (const axes::properties& props);
 
     virtual void set_color (const Matrix& c);
     virtual void set_polygon_offset (bool on, float offset = 0.0f);
     virtual void set_linewidth (float w);
-    virtual void set_linestyle (const std::string& s, bool stipple = false);
+    virtual void set_linestyle (const std::string& s, bool stipple = false,
+                                double linewidth = 0.5);
     virtual void set_clipbox (double x1, double x2, double y1, double y2,
                               double z1, double z2);
     virtual void set_clipping (bool on);
     virtual void set_font (const base_properties& props);
     virtual void set_interpreter (const caseless_str& interp)
     {
       interpreter = interp;
     }
@@ -110,17 +111,18 @@ namespace octave
     virtual Matrix render_text (const std::string& txt,
                                 double x, double y, double z,
                                 int halign, int valign, double rotation = 0.0);
 
     virtual void draw_pixels (int w, int h, const float *data);
     virtual void draw_pixels (int w, int h, const uint8_t *data);
     virtual void draw_pixels (int w, int h, const uint16_t *data);
 
-    virtual void render_grid (const std::string& gridstyle,
+    virtual void render_grid (const double linewidth,
+                              const std::string& gridstyle,
                               const Matrix& gridcolor, const double gridalpha,
                               const Matrix& ticks, double lim1, double lim2,
                               double p1, double p1N, double p2, double p2N,
                               int xyz, bool is_3D);
 
     virtual void render_tickmarks (const Matrix& ticks, double lim1, double lim2,
                                    double p1, double p1N, double p2, double p2N,
                                    double dx, double dy, double dz,
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -108,19 +108,20 @@ namespace octave
     }
 
     void draw_text (const text::properties& props);
 
     void draw_pixels (int w, int h, const float *data);
     void draw_pixels (int w, int h, const uint8_t *data);
     void draw_pixels (int w, int h, const uint16_t *data);
 
-    void set_linestyle (const std::string& s, bool use_stipple = false)
+    void set_linestyle (const std::string& s, bool use_stipple = false,
+                        double linewidth = 0.5)
     {
-      octave::opengl_renderer::set_linestyle (s, use_stipple);
+      octave::opengl_renderer::set_linestyle (s, use_stipple, linewidth);
 
       if (s == "-" && ! use_stipple)
         gl2psDisable (GL2PS_LINE_STIPPLE);
       else
         gl2psEnable (GL2PS_LINE_STIPPLE);
     }
 
     void set_polygon_offset (bool on, float offset = 0.0f)
