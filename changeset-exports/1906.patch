# HG changeset patch
# User jwe
# Date 823914508 0
#      Sat Feb 10 01:08:28 1996 +0000
# Node ID fb2b7ebf77e4744ef41f7a48777e161d050079af
# Parent  39717752e3a28f9b0f1e69a12142af99a6a1ccf4
[project @ 1996-02-10 01:08:28 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -16,32 +16,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
-#include "error.h"
+#include "Array-flags.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 
-#if defined (OCTAVE_SOURCE)
-extern int& dfi_flag;
-extern int& pcv_flag;
-extern int& pzo_flag;
-extern int& rre_flag;
-#else
-extern int dfi_flag;
-extern int pcv_flag;
-extern int pzo_flag;
-extern int rre_flag;
-#endif
-
 template <class T>
 void
 Array<T>::clear_index (void)
 {
   delete [] idx;
   idx = 0;
   idx_count = 0;
 }
@@ -72,17 +60,17 @@ Array<T>::value (void)
 {
   Array<T> retval;
 
   idx_vector *tmp = get_idx ();
   idx_vector idx = tmp[0];
 
   int len = length ();
 
-  int n = idx.freeze (len, "vector", pzo_flag);
+  int n = idx.freeze (len, "vector", liboctave_pzo_flag);
 
   if (idx)
     {
       if (idx.is_colon_equiv (len))
 	{
 	  retval = *this;
 	}
       else if (n == 0)
@@ -173,21 +161,22 @@ assign (Array<LT>& lhs, const Array<RT>&
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx = tmp[0];
 
   int lhs_len = lhs.length ();
   int rhs_len = rhs.length ();
 
-  int n = idx.freeze (lhs_len, "vector", pzo_flag, rre_flag);
+  int n = idx.freeze (lhs_len, "vector", liboctave_pzo_flag,
+		      liboctave_rre_flag);
 
   if (n != 0)
     {
-      if (rre_flag)
+      if (liboctave_rre_flag)
 	{
 	  int max_idx = idx.max () + 1;
 	  if (max_idx > lhs_len)
 	    lhs.resize (max_idx, 0.0);
 	}
 
       if (rhs_len == n)
 	{
@@ -240,18 +229,18 @@ Array2<T>::value (void)
   int nc = d2;
 
   if (n_idx == 2)
     {
       idx_vector *tmp = get_idx ();
       idx_vector idx_i = tmp[0];
       idx_vector idx_j = tmp[1];
 
-      int n = idx_i.freeze (nr, "row", pzo_flag);
-      int m = idx_j.freeze (nc, "column", pzo_flag);
+      int n = idx_i.freeze (nr, "row", liboctave_pzo_flag);
+      int m = idx_j.freeze (nc, "column", liboctave_pzo_flag);
 
       if (idx_i && idx_j)
 	{
 	  if (n == 0)
 	    {
 	      if (m == 0 || idx_j.is_colon_equiv (nc, 1))
 		retval.resize (0, 0);
 	      else
@@ -294,27 +283,27 @@ Array2<T>::value (void)
 	  Array<T> tmp = Array<T>::value ();
 
 	  int len = tmp.length ();
 
 	  if (len == 0)
 	    retval = Array2<T> (0, 0);
 	  else
 	    {
-	      if (pcv_flag)
+	      if (liboctave_pcv_flag)
 		retval = Array2<T> (tmp, len, 1);
 	      else
 		retval = Array2<T> (tmp, 1, len);
 	    }
 	}
       else if (nr == 1 || nc == 1)
 	{
 	  int result_is_column_vector = (nc == 1);
 
-	  if (dfi_flag)
+	  if (liboctave_dfi_flag)
 	    {
 	      idx_vector *tmp = get_idx ();
 	      idx_vector idx = tmp[0];
 
 	      if (idx.is_colon ())
 		result_is_column_vector = 1;
 	    }
 
@@ -327,25 +316,25 @@ Array2<T>::value (void)
 	  else
 	    {
 	      if (result_is_column_vector)
 		retval = Array2<T> (tmp, len, 1);
 	      else
 		retval = Array2<T> (tmp, 1, len);
 	    }
 	}
-      else if (dfi_flag)
+      else if (liboctave_dfi_flag)
 	{
 	  // This code is only for indexing matrices.  The vector
 	  // cases are handled above.
 
 	  idx_vector *tmp = get_idx ();
 	  idx_vector idx = tmp[0];
 
-	  idx.freeze (nr * nc, "matrix", pzo_flag);
+	  idx.freeze (nr * nc, "matrix", liboctave_pzo_flag);
 
 	  if (idx)
 	    {
 	      int result_nr = idx.orig_rows ();
 	      int result_nc = idx.orig_columns ();
 
 	      if (idx.is_colon ())
 		{
@@ -513,18 +502,21 @@ assign (Array2<LT>& lhs, const Array2<RT
 
   if (n_idx == 2)
     {
       idx_vector *tmp = lhs.get_idx ();
 
       idx_vector idx_i = tmp[0];
       idx_vector idx_j = tmp[1];
 
-      int n = idx_i.freeze (lhs_nr, "row", pzo_flag, rre_flag);
-      int m = idx_j.freeze (lhs_nc, "column", pzo_flag, rre_flag);
+      int n = idx_i.freeze (lhs_nr, "row", liboctave_pzo_flag,
+			    liboctave_rre_flag);
+
+      int m = idx_j.freeze (lhs_nc, "column", liboctave_pzo_flag,
+			    liboctave_rre_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
 	n = rhs_nr;
 
       if (idx_j_is_colon)
@@ -533,17 +525,17 @@ assign (Array2<LT>& lhs, const Array2<RT
       if (idx_i && idx_j)
 	{
 	  if (rhs_nr == 0 && rhs_nc == 0)
 	    {
 	      lhs.maybe_delete_elements (idx_i, idx_j);
 	    }
 	  else
 	    {
-	      if (rre_flag)
+	      if (liboctave_rre_flag)
 		{
 		  int max_row_idx = idx_i_is_colon ? rhs_nr : idx_i.max () + 1;
 		  int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1;
 
 		  int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr;
 		  int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc;
 
 		  lhs.resize (new_nr, new_nc, 0.0);
@@ -596,17 +588,18 @@ assign (Array2<LT>& lhs, const Array2<RT
 	  || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
 	  int lhs_len = lhs.length ();
 
-	  int n = idx.freeze (lhs_len, 0, pzo_flag, rre_flag);
+	  int n = idx.freeze (lhs_len, 0, liboctave_pzo_flag,
+			      liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
 		    {
 		      idx_vector tmp (':');
@@ -619,19 +612,20 @@ assign (Array2<LT>& lhs, const Array2<RT
 		    {
 		      int len = lhs.length ();
 
 		      if (len > 0)
 			{
 			  int idx_nr = idx.orig_rows ();
 			  int idx_nc = idx.orig_columns ();
 
-			  if (dfi_flag || (idx_nr == 1 && idx_nc == 1))
+			  if (liboctave_dfi_flag
+			      || (idx_nr == 1 && idx_nc == 1))
 			    {
-			      if (pcv_flag)
+			      if (liboctave_pcv_flag)
 				{
 				  lhs.d1 = lhs.length ();
 				  lhs.d2 = 1;
 				}
 			      else
 				{
 				  lhs.d1 = 1;
 				  lhs.d2 = lhs.length ();
@@ -664,17 +658,18 @@ assign (Array2<LT>& lhs, const Array2<RT
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
-	  idx.freeze (lhs_nc, "vector", pzo_flag, rre_flag);
+	  idx.freeze (lhs_nc, "vector", liboctave_pzo_flag,
+		      liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  idx_vector tmp (':');
 		  lhs.maybe_delete_elements (tmp, idx);
 		}
@@ -689,17 +684,18 @@ assign (Array2<LT>& lhs, const Array2<RT
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 
 	  idx_vector idx = tmp[0];
 
-	  idx.freeze (lhs_nr, "vector", pzo_flag, rre_flag);
+	  idx.freeze (lhs_nr, "vector", liboctave_pzo_flag,
+		      liboctave_rre_flag);
 
 	  if (idx)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  idx_vector tmp (':');
 		  lhs.maybe_delete_elements (idx, tmp);
 		}
@@ -708,22 +704,23 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
 		    lhs.d1 = lhs.length ();
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
-      else if (dfi_flag)
+      else if (liboctave_dfi_flag)
 	{
 	  idx_vector *tmp = lhs.get_idx ();
 	  idx_vector idx = tmp[0];
 
-	  int len = idx.freeze (lhs_nr * lhs_nc, "matrix", pzo_flag);
+	  int len = idx.freeze (lhs_nr * lhs_nc, "matrix",
+				liboctave_pzo_flag);
 
 	  if (idx)
 	    {
 	      if (len == rhs_nr * rhs_nc)
 		{
 		  int k = 0;
 		  for (int j = 0; j < rhs_nc; j++)
 		    {
