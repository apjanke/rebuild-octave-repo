# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233144117 -3600
#      Wed Jan 28 13:01:57 2009 +0100
# Node ID 3d75d717cbe05ebb3c83a4a560465ed58f4d3916
# Parent  7baacb6a8a65283d401eda522513934a34fea28d
do not pivot by default in fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Don't use pivoting at all (for the time
+	being).
+
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Use more adaptive rescaling.
 	Put back the default tolerances based on machine eps respecting
 	the used precision. Partially reflect this in the default optimset
 	values.
 
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -149,28 +149,22 @@ function [x, fvec, info, output, fjac] =
     ## For square and overdetermined systems, we update a (pivoted) QR
     ## factorization of the jacobian to avoid solving a full system in each
     ## step. In this case, we pass a triangular matrix to __dogleg__.
     ## Pivoted QR is used for slightly better robustness and invariance
     ## w.r.t. permutations of variables.
     useqr = updating && m >= n && n > 10;
 
     if (useqr)
-      ## Get QR factorization of the jacobian, optionally with column pivoting.
-      ## TODO: pivoting is only done in the first step, to get invariance
-      ## w.r.t. permutations of variables. Maybe it could be beneficial to
-      ## repivot occassionally?
-      if (niter == 1)
-        [q, r, p] = qr (fjac, 0);
-        ## p is a column vector. Blame Matlab for the inconsistency.
-        ## Octave can handle permutation matrices gracefully.
-        p = eye (n)(:, p);
-      else
-        [q, r] = qr (fjac*p, 0);
-      endif
+      ## FIXME: Currently, pivoting is mostly useless because the \ operator
+      ## cannot exploit the resulting props of the triangular factor.
+      ## Unpivoted QR is significantly faster so it doesn't seem right to pivot
+      ## just to get invariance. Original MINPACK didn't pivot either, at least
+      ## when qr updating was used.
+      [q, r] = qr (fjac, 0);
     endif
 
     ## Get column norms, use them as scaling factors.
     jcn = norm (fjac, 'columns').';
     if (niter == 1)
       if (autodg)
         dg = jcn;
         dg(dg == 0) = 1;
@@ -322,17 +316,16 @@ function [x, fvec, info, output, fjac] =
       if (! updating || nfail == 2)
         break;
       endif
 
       ## Compute the scaled Broyden update.
       if (useqr)
         u = (fvec1 - q*w) / sn; 
         v = dg .* ((dg .* s) / sn);
-        v = p' * v;
 
         ## Update the QR factorization.
         [q, r] = qrupdate (q, r, u, v);
       else
         u = (fvec1 - w);
         v = dg .* ((dg .* s) / sn);
 
         ## update the jacobian
