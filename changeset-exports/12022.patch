# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1245904602 -7200
#      Thu Jun 25 06:36:42 2009 +0200
# Branch release-3-2-x
# Node ID bf661469a0394e38af59e8d2ac6ec815f8ad9b43
# Parent  2e4cec91015a002ee9b6d91cda26bdd14049fe29
Add tests for preservation of key order

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-06-24  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* oct-map.cc (Octave_map::squeeze, Octave_map::permute,
+	Octave_map::transpose, Octave_map::reshape, Octave_map::concat,
+	Octave_map::index): Add tests for preservation of key order in
+	struct arrays.
+
 2009-06-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-mat.cc (get_concat_class): Use empty string as zero value.
 	(tm_row_const_rep::tm_row_const_rep): Initialize class_nm to empty
 	string.
 	(tm_const::tm_const): Ditto.
 
 2009-06-24  John W. Eaton  <jwe@octave.org>
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -65,16 +65,23 @@ Octave_map::squeeze (void) const
     }
 
   // Preserve order of keys.
   retval.key_list = key_list;
 
   return retval;
 }
 
+/*
+%!# test preservation of keys by squeeze
+%!test
+%!  x(1,1,1,1).d = 10; x(3,5,1,7).a = "b"; x(2,4,1,7).f = 27;
+%!  assert (fieldnames (squeeze (x)), {"d"; "a"; "f"});
+*/
+
 Octave_map
 Octave_map::permute (const Array<int>& vec, bool inv) const
 {
   Octave_map retval (dims ());
 
   for (const_iterator pa = begin (); pa != end (); pa++)
     {
       Cell tmp = contents (pa).permute (vec, inv);
@@ -86,16 +93,23 @@ Octave_map::permute (const Array<int>& v
     }
 
   // Preserve order of keys.
   retval.key_list = key_list;
 
   return retval;
 }
 
+/*
+%!# test preservation of key order by permute
+%!test
+%!  x(1,1,1,1).d = 10; x(3,5,1,7).a = "b"; x(2,4,1,7).f = 27;
+%!  assert (fieldnames (permute (x, [3, 4, 1, 2])), {"d"; "a"; "f"});
+*/
+
 Cell&
 Octave_map::contents (const std::string& k)
 {
   maybe_add_to_key_list (k);
 
   return map[k];
 }
 
@@ -160,16 +174,25 @@ Octave_map::transpose (void) const
     retval.assign (key(p), Cell (contents(p).transpose ()));
 
   // Preserve order of keys.
   retval.key_list = key_list;
 
   return retval;
 }
 
+/*
+%!# test preservation of key order by transpose
+%!test
+%!  x(1,1).d = 10; x(3,5).a = "b"; x(2,4).f = 27;
+%!  assert (fieldnames (transpose (x)), {"d"; "a"; "f"});
+%!  assert (fieldnames (x'), {"d"; "a"; "f"});
+%!  assert (fieldnames (x.'), {"d"; "a"; "f"});
+*/
+
 Octave_map
 Octave_map::reshape (const dim_vector& new_dims) const
 {
   Octave_map retval;
 
   if (new_dims != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
@@ -181,16 +204,23 @@ Octave_map::reshape (const dim_vector& n
       retval.key_list = key_list;
     }
   else
     retval = *this;
 
   return retval;
 }
 
+/*
+%!# test preservation of key order by reshape
+%!test
+%!  x(1,1).d = 10; x(4,6).a = "b"; x(2,4).f = 27;
+%!  assert (fieldnames (reshape (x, 3, 8)), {"d"; "a"; "f"});
+*/
+
 void
 Octave_map::resize (const dim_vector& dv, bool fill)
 {
   if (dv != dims ())
     {
       if (nfields () == 0)
 	dimensions = dv;
       else
@@ -251,16 +281,24 @@ Octave_map::concat (const Octave_map& rb
 	  else
 	    error ("invalid structure concatenation");
 	}
     }
 
   return retval;
 }
 
+/*
+%!# test preservation of key order by concatenation
+%!test
+%!  x(1, 1).d = 10; x(4, 6).a = "b"; x(2, 4).f = 27;
+%!  y(1, 6).f = 11; y(1, 6).a = "c"; y(1, 6).d = 33;
+%!  assert (fieldnames ([x; y]), {"d"; "a"; "f"});
+*/
+
 static bool
 keys_ok (const Octave_map& a, const Octave_map& b, string_vector& keys)
 {
   bool retval = false;
 
   keys = string_vector ();
 
   if (a.nfields () == 0)
@@ -485,12 +523,19 @@ Octave_map::index (const octave_value_li
     }
   else
     retval = *this;
 
   return retval;
 }
 
 /*
+%!# test preservation of key order by indexing
+%!test
+%!  x(1, 1).d = 10; x(4, 6).a = "b"; x(2, 4).f = 27;
+%!  assert (fieldnames (x([1, 2], [2:5])), {"d"; "a"; "f"});
+*/
+
+/*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
