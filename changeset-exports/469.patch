# HG changeset patch
# User jwe
# Date 770880541 0
#      Mon Jun 06 05:29:01 1994 +0000
# Node ID 12c3914275a05468fc533e98445bf088bbe1c402
# Parent  c35a1ee8d272085859d63f54b90954e512ac70d9
[project @ 1994-06-06 05:26:09 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -300,25 +300,25 @@ where x, xdot, and res are vectors, and 
     "expm (X): matrix exponential, e^A", },
 
   { "eye", 3, 1, builtin_eye,
     "eye (n), eye (n, m), eye (X): create an identity matrix", },
 
   { "fclose", 2, 1, builtin_fclose,
     "fclose (\"filename\" or filenum): close a file", },
 
-  { "feof", 3, 1, builtin_feof,
-    "eof = feof (filenum)\n\n\
- Returns a non zero eof for an end of file condition for the\n\
- file specified by \"filenum\" from fopen", },
+  { "feof", 2, 1, builtin_feof,
+    "error = feof (\"filename\" or filenum)\n\n\
+ Returns a non zero value for an end of file condition for the\n\
+ file specified by \"filename\" filenum from fopen", },
 
-  { "ferror", 3, 1, builtin_ferror,
-    "error = ferror (filenum)\n\n\
- Returns a non zero \"error\" for an error condition on the\n\
- file specified by \"filenum\" from fopen", },
+  { "ferror", 2, 1, builtin_ferror,
+    "error = ferror (\"filename\" or filenum)\n\n\
+ Returns a non zero value for an error condition on the\n\
+ file specified by \"filename\" or filenum from fopen", },
 
   { "feval", -1, 1, builtin_feval,
     "feval (\"name\", args, ...): evaluate first argument as function", },
 
   { "fflush", 2, 1, builtin_fflush,
     "fflush (\"filename\" or filenum): flush buffered data to output file", },
 
   { "fft", 2, 1, builtin_fft,
@@ -342,17 +342,17 @@ where x, xdot, and res are vectors, and 
    r+ : open text file for update (i.e., reading and writing)\n\
    w+ : create text file for update; discard previous contents if any\n\
    a+ : append; open or create text file for update, writing at end\n\n\
  Update mode permits reading from and writing to the same file.\n", },
 
   { "fprintf", -1, 1, builtin_fprintf,
     "fprintf (\"file\", \"fmt\", ...)", },
 
-  { "fread", 3, 1, builtin_fread,
+  { "fread", 4, 2, builtin_fread,
     "[data, count] = fread (filenum, size, \"precision\")\n\n\
  Reads data in binary form of type \"precision\" from a file.\n\n\
  filenum   : file number from fopen\n\
  size      : size specification for the Data matrix\n\
  precision : type of data to read, valid types are\n\n\
                'char',   'schar', 'short',  'int',  'long', 'float'\n\
                'double', 'uchar', 'ushort', 'uint', 'ulong'\n\n\
  data      : matrix in which the data is stored\n\
@@ -407,17 +407,17 @@ where y and x are vectors.", },
     "fsqp_options (keyword, value)\n\n\
        Set or show options for fsqp.  Keywords may be abbreviated\n\
        to the shortest match.", },
 #endif
 
   { "ftell", 2, 1, builtin_ftell,
     "position = ftell (\"filename\" or filenum): returns the current file position", },
 
-  { "fwrite", 3, 1, builtin_fwrite,
+  { "fwrite", 4, 1, builtin_fwrite,
     "count = fwrite (filenum, Data, \"precision\")\n\n\
  Writes data to a file in binary form of size \"precision\"\n\n\
  filenum   : file number from fopen\n\
  Data      : matrix of elements to be written\n\
  precision : type of data to read, valid types are\n\n\
                'char',   'schar', 'short',  'int',  'long', 'float'\n\
                'double', 'uchar', 'ushort', 'uint', 'ulong'\n\n\
  count     : number of elements written", },
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -584,33 +584,33 @@ builtin_fclose (const tree_constant *arg
 /*
  * Check file for EOF condition.
  */
 tree_constant *
 builtin_feof (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin < 1)
+  if (nargin != 2)
     print_usage ("feof");
   else
     retval = feof_internal (args, nargin, nargout);
 
   return retval;
 }
 
 /*
  * Check file for error condition.
  */
 tree_constant *
 builtin_ferror (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin < 1)
+  if (nargin != 2)
     print_usage ("ferror");
   else
     retval = ferror_internal (args, nargin, nargout);
 
   return retval;
 }
 
 /*
@@ -755,17 +755,17 @@ builtin_fprintf (const tree_constant *ar
 /*
  * Read binary data from a file.
  */
 tree_constant *
 builtin_fread (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin < 2)
+  if (nargin < 2 || nargin > 4)
     print_usage ("fread");
   else
     retval = fread_internal (args, nargin, nargout);
 
   return retval;
 }
 
 /*
@@ -917,17 +917,17 @@ builtin_ftell (const tree_constant *args
 /*
  * Write binary data to a file.
  */
 tree_constant *
 builtin_fwrite (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin < 3)
+  if (nargin < 3 || nargin > 4)
     print_usage ("fwrite");
   else
     retval = fwrite_internal (args, nargin, nargout);
 
   return retval;
 }
 
 /*
