# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228989858 -3600
#      Thu Dec 11 11:04:18 2008 +0100
# Node ID c1bada868690320b88ca28adccce44d419a585a0
# Parent  d95282fa057941c06d2299cede744b32a34d9547
alow single/double conversion of diag & perm matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* ov-re-mat.cc (Fdouble): Handle diagonal & perm matrices. 
+	* ov-flt-re-mat.cc (Fsingle): Handle diagonal & perm matrices. 
+
 2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.cc (octave_base_diag<DMT,MT>::subsasgn): New method.
 	* ov-base-diag.h (octave_base_diag<DMT,MT>::subsasgn): Declare it.
 	(octave_base_diag<DMT,MT>::chk_valid_scalar): New method decl.
 
 	* ov-re-diag.cc (octave_diag_matrix::chk_valid_scalar): New method
 	override.
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -51,16 +51,19 @@ along with Octave; see the file COPYING.
 #include "ov-base-mat.cc"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "ov-flt-complex.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-sparse.h"
+#include "ov-flt-re-diag.h"
+#include "ov-flt-cx-diag.h"
+#include "ov-flt-perm.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 #include "ops.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
@@ -799,17 +802,32 @@ Convert @var{x} to single precision type
 @end deftypefn")
 {
   // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
   // inside their own scopes, and we don't declare retval here to
   // avoid a shadowed declaration warning.
 
   if (args.length () == 1)
     {
-      if (args(0).is_sparse_type ())
+      if (args(0).is_perm_matrix ())
+        {
+          OCTAVE_TYPE_CONV_BODY3 (single, octave_float_perm_matrix, octave_float_scalar);
+        }
+      else if (args(0).is_diag_matrix ())
+        {
+	  if (args(0).is_complex_type ())
+	    {
+	      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_complex_diag_matrix, octave_float_complex);
+	    }
+	  else
+	    {
+	      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_diag_matrix, octave_float_scalar);
+	    }
+        }
+      else if (args(0).is_sparse_type ())
 	{
 	  error ("single: sparse type do not support single precision");
 	}
       else if (args(0).is_complex_type ())
 	{
 	  OCTAVE_TYPE_CONV_BODY3 (single, octave_float_complex_matrix, octave_float_complex);
 	}
       else
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -50,16 +50,19 @@ along with Octave; see the file COPYING.
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
+#include "ov-re-diag.h"
+#include "ov-cx-diag.h"
+#include "ov-perm.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
@@ -824,19 +827,34 @@ DEFUN (double, args, ,
 @deftypefn {Built-in Function} {} double (@var{x})\n\
 Convert @var{x} to double precision type.\n\
 @end deftypefn")
 {
   // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
   // inside their own scopes, and we don't declare retval here to
   // avoid a shadowed declaration warning.
 
-  if (args.length () == 1)
+  if (args(0).is_perm_matrix ())
+    {
+      OCTAVE_TYPE_CONV_BODY3 (double, octave_perm_matrix, octave_scalar);
+    }
+  else if (args.length () == 1)
     {
-      if (args(0).is_sparse_type ())
+      if (args(0).is_diag_matrix ())
+        {
+	  if (args(0).is_complex_type ())
+	    {
+	      OCTAVE_TYPE_CONV_BODY3 (double, octave_complex_diag_matrix, octave_complex);
+	    }
+	  else
+	    {
+	      OCTAVE_TYPE_CONV_BODY3 (double, octave_diag_matrix, octave_scalar);
+	    }
+        }
+      else if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      OCTAVE_TYPE_CONV_BODY3 (double, octave_sparse_complex_matrix, octave_complex);
 	    }
 	  else
 	    {
 	      OCTAVE_TYPE_CONV_BODY3 (double, octave_sparse_matrix, octave_scalar);
