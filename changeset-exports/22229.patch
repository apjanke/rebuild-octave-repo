# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470712495 -3600
#      Tue Aug 09 04:14:55 2016 +0100
# Node ID 22c2bd4405441a0c5be66b65f23b2b9578240add
# Parent  4afe3705ea753511669b015220a42c3354353080
chol: return permutation vector as row vector instead of column vector.

* libinterp/dldfcn/chol.cc: add tests for the vector option.  Also error
if there's a "vector" option but input was not sparse.  Existing test
for case sensitivity was also useless, since change is on the 3rd argument.
* liboctave/numeric/sparse-chol.cc, liboctave/numeric/sparse-chol.h: use
RowVector instead of ColumnVector for permutation vector, for Matlab
compatibility.

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -244,16 +244,18 @@ sparse matrices.
           else
             error ("chol: input matrix must be positive definite");
         }
       else
         err_wrong_type_arg ("chol", arg);
     }
   else if (arg.is_single_type ())
     {
+      if (vecout)
+        error ("chol: A must be sparse for the \"vector\" option");
       if (arg.is_real_type ())
         {
           FloatMatrix m = arg.float_matrix_value ();
 
           octave_idx_type info;
 
           chol<FloatMatrix> fact (m, info, LLt != true);
 
@@ -275,16 +277,18 @@ sparse matrices.
           else
             error ("chol: input matrix must be positive definite");
         }
       else
         err_wrong_type_arg ("chol", arg);
     }
   else
     {
+      if (vecout)
+        error ("chol: A must be sparse for the \"vector\" option");
       if (arg.is_real_type ())
         {
           Matrix m = arg.matrix_value ();
 
           octave_idx_type info;
 
           chol<Matrix> fact (m, info, LLt != true);
 
@@ -319,30 +323,49 @@ sparse matrices.
 
 %!assert (chol ([2, 1; 1, 1], "upper"), [sqrt(2), 1/sqrt(2); 0, 1/sqrt(2)],
 %!        sqrt (eps))
 %!assert (chol ([2, 1; 1, 1], "lower"), [sqrt(2), 0; 1/sqrt(2), 1/sqrt(2)],
 %!        sqrt (eps))
 
 %!assert (chol ([2, 1; 1, 1], "lower"), chol ([2, 1; 1, 1], "LoweR"))
 %!assert (chol ([2, 1; 1, 1], "upper"), chol ([2, 1; 1, 1], "Upper"))
-%!assert (chol ([2, 1; 1, 1], "vector"), chol ([2, 1; 1, 1], "VECTOR"))
+
+## Check the "vector" option which only affects the 3rd argument and
+## is only valid for sparse input.
+%!test
+%! a = sparse ([2 1; 1 1]);
+%! r = sparse ([sqrt(2), 1/sqrt(2); 0, 1/sqrt(2)]);
+%! [rd, pd, qd] = chol (a);
+%! [rv, pv, qv] = chol (a, "vector");
+%! assert (r, rd, eps)
+%! assert (r, rv, eps)
+%! assert (pd, 0)
+%! assert (pd, pv)
+%! assert (qd, sparse (eye (2)))
+%! assert (qv, [1 2])
+%!
+%! [rv, pv, qv] = chol (a, "Vector"); # check case sensitivity
+%! assert (r, rv, eps)
+%! assert (pd, pv)
+%! assert (qv, [1 2])
 
 %!testif HAVE_CHOLMOD
 %! ## Bug #42587
 %! A = sparse ([1 0 8;0 1 8;8 8 1]);
 %! [Q, p] = chol (A);
 %! assert (p != 0);
 
 %!error chol ()
 %!error <matrix must be positive definite> chol ([1, 2; 3, 4])
 %!error <requires square matrix> chol ([1, 2; 3, 4; 5, 6])
 %!error <optional arguments must be strings> chol (1, 2)
 %!error <optional argument must be one of "vector", "lower"> chol (1, "foobar")
 %!error <matrix A must be sparse> [L,p,Q] = chol ([1, 2; 3, 4])
+%!error <A must be sparse> [L, p] = chol ([1, 2; 3, 4], "vector")
 */
 
 DEFUN_DLD (cholinv, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} cholinv (@var{A})
 Compute the inverse of the symmetric positive definite matrix @var{A} using
 the Cholesky@tie{}factorization.
 @seealso{chol, chol2inv, inv}
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -87,33 +87,33 @@ public:
 #if defined (HAVE_CHOLMOD)
     return (minor_p == static_cast<octave_idx_type>(Lsparse->ncol) ?
             0 : minor_p + 1);
 #else
     return 0;
 #endif
   }
 
-  ColumnVector perm (void) const { return perms + 1; }
+  RowVector perm (void) const { return perms + 1; }
 
   SparseMatrix Q (void) const;
 
   bool is_positive_definite (void) const { return is_pd; }
 
   double rcond (void) const { return cond; }
 
   octave_refcount<int> count;
 
 private:
 
   bool is_pd;
 
   octave_idx_type minor_p;
 
-  ColumnVector perms;
+  RowVector perms;
 
   double cond;
 
 #if defined (HAVE_CHOLMOD)
   cholmod_sparse *Lsparse;
 
   cholmod_common Common;
 
@@ -469,17 +469,17 @@ sparse_chol<chol_type>::L (void) const
 template <typename chol_type>
 octave_idx_type
 sparse_chol<chol_type>::P (void) const
 {
   return rep->P ();
 }
 
 template <typename chol_type>
-ColumnVector
+RowVector
 sparse_chol<chol_type>::perm (void) const
 {
   return rep->perm ();
 }
 
 template <typename chol_type>
 SparseMatrix
 sparse_chol<chol_type>::Q (void) const
@@ -506,17 +506,17 @@ chol_type
 sparse_chol<chol_type>::inverse (void) const
 {
   chol_type retval;
 
 #if defined (HAVE_CHOLMOD)
 
   cholmod_sparse *m = rep->L ();
   octave_idx_type n = m->ncol;
-  ColumnVector perms = rep->perm ();
+  RowVector perms = rep->perm ();
   double rcond2;
   octave_idx_type info;
   MatrixType mattype (MatrixType::Upper);
   chol_type linv = L ().hermitian ().inverse (mattype, info, rcond2, 1, 0);
 
   if (perms.numel () == n)
     {
       SparseMatrix Qc = Q ();
diff --git a/liboctave/numeric/sparse-chol.h b/liboctave/numeric/sparse-chol.h
--- a/liboctave/numeric/sparse-chol.h
+++ b/liboctave/numeric/sparse-chol.h
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_sparse_chol_h)
 #define octave_sparse_chol_h 1
 
 #include "octave-config.h"
 
 #include "CSparse.h"
-#include "dColVector.h"
+#include "dRowVector.h"
 #include "dSparse.h"
 
 // If the sparse matrix classes become templated on the element type
 // (i.e., sparse_matrix<double>), then it might be best to make the
 // template parameter of this class also be the element type instead
 // of the matrix type.
 
 template <typename chol_type>
@@ -60,17 +60,17 @@ public:
   sparse_chol& operator = (const sparse_chol& a);
 
   chol_type L (void) const;
 
   chol_type R (void) const { return L ().hermitian (); }
 
   octave_idx_type P (void) const;
 
-  ColumnVector perm (void) const;
+  RowVector perm (void) const;
 
   SparseMatrix Q (void) const;
 
   bool is_positive_definite (void) const;
 
   double rcond (void) const;
 
   chol_type inverse (void) const;
