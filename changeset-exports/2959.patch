# HG changeset patch
# User jwe
# Date 863391193 0
#      Sun May 11 22:53:13 1997 +0000
# Node ID 5d1b71cd39f721c2ef241a193c7e719491a8d227
# Parent  da62d3b91fa3c5a9ed4352253a82c2051dc86deb
[project @ 1997-05-11 22:53:12 by jwe]

diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -48,36 +48,22 @@ tree_identifier::name (void) const
 {
   string retval;
   if (sym)
     retval = sym->name ();
   return retval;
 }
 
 tree_identifier *
-tree_identifier::define (octave_symbol *s, unsigned int sym_type)
-{
-  int status = sym->define (s, sym_type);
-  return status ? this : 0;
-}
-
-tree_identifier *
 tree_identifier::define (octave_function *f, unsigned int sym_type)
 {
   int status = sym->define (f, sym_type);
   return status ? this : 0;
 }
 
-tree_identifier *
-tree_identifier::define (const octave_value& v)
-{
-  int status = sym->define (v);
-  return status ? this : 0;
-}
-
 void
 tree_identifier::document (const string& s)
 {
   if (sym)
     sym->document (s);
 }
 
 bool
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -58,22 +58,18 @@ public:
 
   ~tree_identifier (void) { }
 
   bool is_identifier (void) const
     { return true; }
 
   string name (void) const;
 
-  tree_identifier *define (octave_symbol *s, unsigned int sym_type);
-
   tree_identifier *define (octave_function *f, unsigned int sym_type);
 
-  tree_identifier *define (const octave_value& v);
-
   void document (const string& s);
 
   bool is_defined (void);
 
   void increment (void);
 
   void decrement (void);
 
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -383,28 +383,30 @@ tree_parameter_list::define_from_arg_vec
   int expected_nargin = length ();
 
   Pix p = first ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
       tree_identifier *elt = this->operator () (p);
 
+      octave_variable_reference ref = elt->reference ();
+
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
 	      ::error ("invalid use of colon in function argument list");
 	      return;
 	    }
 
-	  elt->define (args(i));
+	  ref.assign (octave_value::asn_eq, args(i));
 	}
       else
-	elt->define (octave_value ());
+	ref.assign (octave_value::asn_eq, octave_value ());
 
       next (p);
     }
 }
 
 octave_value_list
 tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
 {
