# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485533627 18000
#      Fri Jan 27 11:13:47 2017 -0500
# Node ID 373771419d5149984194687a9afb8538e1636295
# Parent  86376c04cb661348124b262a8b619ebe45c26811
refactor interpreter::execute

* octave.h, octave.cc (application::m_have_eval_option_code):
New data member.
(application::have_eval_option_code): New function.
(application::init): Initialize m_have_eval_option_code.

* interpreter.h, interpreter.cc: Use const reference symbol to refer
to application options.
(interpreter::execute_eval_option_code,
interpreter::execute_command_line_file): Now private.  Eliminate
arguments.
(interpreter::execute_startup_files): Make member function from file
scope static function.  Eliminate arguments.
(display_startup_message): New function.
(execute_internal): Refactor.
(execute_command_line_file): Use unwind_protect to restore application
arguments.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -412,123 +412,27 @@ initialize_load_path (bool set_initial_p
 
   frame.add_fcn (load_path::set_add_hook, load_path::get_add_hook ());
 
   load_path::set_add_hook (execute_pkg_add);
 
   load_path::initialize (set_initial_path);
 }
 
-// Initialize by reading startup files.  Return non-zero if an exception
-// occurs when reading any of them, but don't exit early because of an
-// exception.
-
-static int
-execute_startup_files (bool read_site_files, bool read_init_files,
-                       bool verbose_flag, bool inhibit_startup_message)
-{
-  octave::unwind_protect frame;
-
-  std::string context;
-
-  bool verbose = (verbose_flag && ! inhibit_startup_message);
-
-  bool require_file = false;
-
-  int exit_status = 0;
-
-  if (read_site_files)
-    {
-      // Execute commands from the site-wide configuration file.
-      // First from the file $(prefix)/lib/octave/site/m/octaverc
-      // (if it exists), then from the file
-      // $(prefix)/share/octave/$(version)/m/octaverc (if it exists).
-
-      int status = safe_source_file (Vlocal_site_defaults_file, context,
-                                     verbose, require_file);
-
-      if (status)
-        exit_status = status;
-
-      status = safe_source_file (Vsite_defaults_file, context, verbose,
-                                 require_file);
-
-      if (status)
-        exit_status = status;
-    }
-
-  if (read_init_files)
-    {
-      // Try to execute commands from $HOME/$OCTAVE_INITFILE and
-      // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set,
-      // .octaverc is assumed.
-
-      bool home_rc_already_executed = false;
-
-      std::string initfile = octave::sys::env::getenv ("OCTAVE_INITFILE");
-
-      if (initfile.empty ())
-        initfile = ".octaverc";
-
-      std::string home_dir = octave::sys::env::get_home_directory ();
-
-      std::string home_rc = octave::sys::env::make_absolute (initfile, home_dir);
-
-      std::string local_rc;
-
-      if (! home_rc.empty ())
-        {
-          int status = safe_source_file (home_rc, context, verbose,
-                                         require_file);
-
-          if (status)
-            exit_status = status;
-
-          // Names alone are not enough.
-
-          octave::sys::file_stat fs_home_rc (home_rc);
-
-          if (fs_home_rc)
-            {
-              // We want to check for curr_dir after executing home_rc
-              // because doing that may change the working directory.
-
-              local_rc = octave::sys::env::make_absolute (initfile);
-
-              home_rc_already_executed = same_file (home_rc, local_rc);
-            }
-        }
-
-      if (! home_rc_already_executed)
-        {
-          if (local_rc.empty ())
-            local_rc = octave::sys::env::make_absolute (initfile);
-
-          int status = safe_source_file (local_rc, context, verbose,
-                                         require_file);
-
-          if (status)
-            exit_status = status;
-        }
-    }
-
-  return exit_status;
-}
-
 namespace octave
 {
   tree_evaluator *current_evaluator = 0;
 
   interpreter::interpreter (application *app_context, bool embedded)
     : m_app_context (app_context), m_evaluator (new tree_evaluator (this)),
       m_embedded (embedded), m_interactive (false)
   {
     current_evaluator = m_evaluator;
 
-    cmdline_options options = m_app_context->options ();
+    const cmdline_options& options = m_app_context->options ();
 
     // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
     setlocale (LC_NUMERIC, "C");
     setlocale (LC_TIME, "C");
     octave::sys::env::putenv ("LC_NUMERIC", "C");
     octave::sys::env::putenv ("LC_TIME", "C");
 
     // Initialize the default floating point unit control state.
@@ -659,74 +563,53 @@ namespace octave
 
     cleanup ();
 
     return exit_status;
   }
 
   int interpreter::execute_internal (void)
   {
-    cmdline_options options = m_app_context->options ();
-
-    if (m_interactive && ! options.inhibit_startup_message ())
-      std::cout << octave_startup_message () << "\n" << std::endl;
+    display_startup_message ();
 
     octave_prepare_hdf5 ();
 
     // Don't fail, but return non-zero if there is an error in a startup
     // file.
 
     int exit_status = 0;
 
-    int status = execute_startup_files (options.read_site_files (),
-                                        options.read_init_files (),
-                                        options.verbose_flag (),
-                                        options.inhibit_startup_message ());
+    int status = execute_startup_files ();
 
     if (status)
       exit_status = status;
 
-    if (m_interactive && ! options.inhibit_startup_message ()
-        && options.verbose_flag ())
-      std::cout << std::endl;
+    const cmdline_options& options = m_app_context->options ();
 
-    // Execute any code specified with --eval 'CODE'
-    std::string code_to_eval = options.code_to_eval ();
+    if (m_app_context->have_eval_option_code ())
+      {
+        status = execute_eval_option_code ();
 
-    if (! code_to_eval.empty ())
-      {
-        status = execute_eval_option_code (code_to_eval);
-
-        if (status)
+        if (status )
           exit_status = status;
 
         if (! options.persist ())
           return exit_status;
       }
 
     // If there is an extra argument, see if it names a file to read.
     // Additional arguments are taken as command line options for the script.
 
     if (m_app_context->have_script_file ())
       {
-        // If we are running an executable script (#! /bin/octave) then
-        // we should only see the args passed to the script.
-
-        string_vector script_args = options.remaining_args ();
-
-        m_app_context->intern_argv (script_args);
-
-        status = execute_command_line_file (script_args[0]);
+        status = execute_command_line_file ();
 
         if (status)
           exit_status = status;
 
-        // Restore full set of args.
-        m_app_context->intern_argv (options.all_args ());
-
         if (! options.persist ())
           return exit_status;
       }
 
     // Avoid counting commands executed from startup or script files.
 
     octave::command_editor::reset_current_command_number (1);
 
@@ -736,30 +619,138 @@ namespace octave
     if (options.forced_interactive ())
       {
         octave::command_editor::blink_matching_paren (false);
 
         // FIXME: is this the right thing to do?
         Fecho_executing_commands (octave_value (ECHO_CMD_LINE));
       }
 
-    if (m_embedded)
+    return m_embedded ? main_loop () : 1;
+  }
+
+  void interpreter::display_startup_message (void) const
+  {
+    const cmdline_options& options = m_app_context->options ();
+
+    if (m_interactive && ! options.inhibit_startup_message ())
+      std::cout << octave_startup_message () << "\n" << std::endl;
+  }
+
+  // Initialize by reading startup files.  Return non-zero if an exception
+  // occurs when reading any of them, but don't exit early because of an
+  // exception.
+
+  int interpreter::execute_startup_files (void) const
+  {
+    const cmdline_options& options = m_app_context->options ();
+
+    bool read_site_files = options.read_site_files ();
+    bool read_init_files = options.read_init_files ();
+    bool verbose_flag = options.verbose_flag ();
+    bool inhibit_startup_message = options.inhibit_startup_message ();
+
+    bool verbose = (verbose_flag && ! inhibit_startup_message);
+
+    bool require_file = false;
+
+    std::string context;
+
+    int exit_status = 0;
+
+    if (read_site_files)
       {
-        // FIXME: Do we need to do any cleanup here before returning?
-        // If we don't, what will happen to Octave functions that have been
-        // registered to execute with atexit, for example?
+        // Execute commands from the site-wide configuration file.
+        // First from the file $(prefix)/lib/octave/site/m/octaverc
+        // (if it exists), then from the file
+        // $(prefix)/share/octave/$(version)/m/octaverc (if it exists).
+
+        int status = safe_source_file (Vlocal_site_defaults_file, context,
+                                       verbose, require_file);
 
-        return 1;
+        if (status)
+          exit_status = status;
+
+        status = safe_source_file (Vsite_defaults_file, context, verbose,
+                                   require_file);
+
+        if (status)
+          exit_status = status;
       }
 
-    return main_loop ();
+    if (read_init_files)
+      {
+        // Try to execute commands from $HOME/$OCTAVE_INITFILE and
+        // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set,
+        // .octaverc is assumed.
+
+        bool home_rc_already_executed = false;
+
+        std::string initfile = octave::sys::env::getenv ("OCTAVE_INITFILE");
+
+        if (initfile.empty ())
+          initfile = ".octaverc";
+
+        std::string home_dir = octave::sys::env::get_home_directory ();
+
+        std::string home_rc = octave::sys::env::make_absolute (initfile, home_dir);
+
+        std::string local_rc;
+
+        if (! home_rc.empty ())
+          {
+            int status = safe_source_file (home_rc, context, verbose,
+                                           require_file);
+
+            if (status)
+              exit_status = status;
+
+            // Names alone are not enough.
+
+            octave::sys::file_stat fs_home_rc (home_rc);
+
+            if (fs_home_rc)
+              {
+                // We want to check for curr_dir after executing home_rc
+                // because doing that may change the working directory.
+
+                local_rc = octave::sys::env::make_absolute (initfile);
+
+                home_rc_already_executed = same_file (home_rc, local_rc);
+              }
+          }
+
+        if (! home_rc_already_executed)
+          {
+            if (local_rc.empty ())
+              local_rc = octave::sys::env::make_absolute (initfile);
+
+            int status = safe_source_file (local_rc, context, verbose,
+                                           require_file);
+
+            if (status)
+              exit_status = status;
+          }
+      }
+
+    if (m_interactive && ! options.inhibit_startup_message ()
+        && options.verbose_flag ())
+      std::cout << std::endl;
+
+    return exit_status;
   }
 
-  int interpreter::execute_eval_option_code (const std::string& code)
+  // Execute any code specified with --eval 'CODE'
+
+  int interpreter::execute_eval_option_code (void)
   {
+    const cmdline_options& options = m_app_context->options ();
+
+    std::string code_to_eval = options.code_to_eval ();
+
     octave::unwind_protect frame;
 
     octave_save_signal_mask ();
 
     octave::can_interrupt = true;
 
     octave_signal_hook = octave::signal_handler;
     octave_interrupt_hook = 0;
@@ -772,17 +763,17 @@ namespace octave
     frame.add_method (this, &interpreter::interactive, m_interactive);
 
     m_interactive = false;
 
     int parse_status = 0;
 
     try
       {
-        eval_string (code, false, parse_status, 0);
+        eval_string (code_to_eval, false, parse_status, 0);
       }
     catch (const octave::interrupt_exception&)
       {
         recover_from_exception ();
 
         return 1;
       }
     catch (const octave::execution_exception&)
@@ -790,18 +781,20 @@ namespace octave
         recover_from_exception ();
 
         return 1;
       }
 
     return parse_status;
   }
 
-  int interpreter::execute_command_line_file (const std::string& fname)
+  int interpreter::execute_command_line_file (void)
   {
+    const cmdline_options& options = m_app_context->options ();
+
     octave::unwind_protect frame;
 
     octave_save_signal_mask ();
 
     octave::can_interrupt = true;
 
     octave_signal_hook = octave::signal_handler;
     octave_interrupt_hook = 0;
@@ -809,25 +802,38 @@ namespace octave
 
     octave::catch_interrupts ();
 
     octave_initialized = true;
 
     frame.add_method (this, &interpreter::interactive, m_interactive);
 
     frame.add_method (m_app_context,
+                      &application::intern_argv,
+                      options.all_args ());
+
+    frame.add_method (m_app_context,
                       &application::program_invocation_name,
                       application::program_invocation_name ());
 
     frame.add_method (m_app_context,
                       &application::program_name,
                       application::program_name ());
 
     m_interactive = false;
 
+    // If we are running an executable script (#! /bin/octave) then
+    // we should only see the args passed to the script.
+
+    string_vector script_args = options.remaining_args ();
+
+    m_app_context->intern_argv (script_args);
+
+    std::string fname = script_args[0];
+
     m_app_context->set_program_names (fname);
 
     std::string context;
     bool verbose = false;
     bool require_file = true;
 
     return safe_source_file (fname, context, verbose, require_file, "octave");
   }
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -104,27 +104,31 @@ namespace octave
     interpreter (const interpreter&) = delete;
 
     interpreter& operator = (const interpreter&) = delete;
 
     ~interpreter (void);
 
     int execute (void);
 
-    int execute_eval_option_code (const std::string& code);
-
-    int execute_command_line_file (const std::string& fname);
-
     bool interactive (void) const { return m_interactive; }
     void interactive (bool arg) { m_interactive = arg; }
 
   private:
 
     int execute_internal (void);
 
+    void display_startup_message (void) const;
+
+    int execute_startup_files (void) const;
+
+    int execute_eval_option_code (void);
+
+    int execute_command_line_file (void);
+
     int main_loop (void);
 
     void cleanup (void);
 
     application *m_app_context;
 
     tree_evaluator *m_evaluator;
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -394,24 +394,26 @@ namespace octave
     set_program_names (all_args[0]);
 
     string_vector remaining_args = m_options.remaining_args ();
 
     std::string code_to_eval = m_options.code_to_eval ();
 
     m_have_script_file = ! remaining_args.empty ();
 
-    if (! code_to_eval.empty () && m_have_script_file)
+    m_have_eval_option_code = ! code_to_eval.empty ();
+
+    if (m_have_eval_option_code && m_have_script_file)
       {
         warning ("--eval \"CODE\" and script file are mutually exclusive options");
 
         octave_print_terse_usage_and_exit ();
       }
 
-    m_is_octave_program = ((m_have_script_file || ! code_to_eval.empty ())
+    m_is_octave_program = ((m_have_script_file || m_have_eval_option_code)
                            && ! m_options.persist ()
                            && ! m_options.traditional ());
 
     // This should probably happen early.
     sysdep_init ();
 
     // Need to have global Vfoo variables defined early.
     install_defaults ();
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -197,16 +197,18 @@ namespace octave
     virtual ~application (void);
 
     void set_program_names (const std::string& pname);
 
     void intern_argv (const string_vector& args);
 
     cmdline_options options (void) const { return m_options; }
 
+    bool have_eval_option_code (void) const { return m_have_eval_option_code; }
+
     bool have_script_file (void) const { return m_have_script_file; }
 
     bool is_octave_program (void) const { return m_is_octave_program; }
 
     virtual void create_interpreter (void);
 
     virtual int execute_interpreter (void);
 
@@ -259,16 +261,19 @@ namespace octave
     // The current argument vector (may change if we are running a
     // script with --persist because after the script is done, the
     // arguments revert to the full list given to the octave
     // interpreter at startup.
     string_vector m_argv;
 
     cmdline_options m_options;
 
+    // TRUE means we have --eval CODE
+    bool m_have_eval_option_code = false;
+
     // TRUE if there is a command line argument that looks like the
     // name of a file to execute.
     bool m_have_script_file = false;
 
     // TRUE if this is a program and no interpreter and interaction is
     // needed.  For example, an octave program with shebang line, or code
     // from eval without persist.
     bool m_is_octave_program = false;
