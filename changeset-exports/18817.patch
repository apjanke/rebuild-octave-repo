# HG changeset patch
# User Rik <rik@octave.org>
# Date 1402416513 25200
#      Tue Jun 10 09:08:33 2014 -0700
# Node ID 096b1a159d1fddf227b466c8b74fbfc05ab0a385
# Parent  e275d15c27b5705fad82b65e6a0236f305149803
Correctly render unclosed contour of a patch object.

* gl-render.cc (draw_patch): Use GL_LINE_STRIP for an unclosed contour rather
than tesselator.  Add vertices in reverse order to match Matlab coloring.
Add implementation for per vertex colors to support "flat" and "interp" edgecolor
modes.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2210,17 +2210,16 @@ opengl_renderer::draw_patch (const patch
 {
   const Matrix f = props.get_faces ().matrix_value ();
   const Matrix v = xform.scale (props.get_vertices ().matrix_value ());
   Matrix c;
   const Matrix n = props.get_vertexnormals ().matrix_value ();
   Matrix a;
 
   int nv = v.rows ();
-  // int vmax = v.columns ();
   int nf = f.rows ();
   int fcmax = f.columns ();
 
   bool has_z = (v.columns () > 2);
   bool has_facecolor = false;
   bool has_facealpha = false;
 
   int fc_mode = ((props.facecolor_is ("none")
@@ -2472,44 +2471,72 @@ opengl_renderer::draw_patch (const patch
           // automatically sets the glType to GL_LINE_LOOP.  This primitive is
           // not supported by glPolygonOffset which is used to do Z offsets. 
           patch_tesselator tess (this, ec_mode, el_mode);
 
           for (int i = 0; i < nf; i++)
             {
               if (clip_f(i))
                 {
-                  // This is an unclosed contour. Draw it as a line.
+                  // This is an unclosed contour.  Draw it as a line.
                   bool flag = false;
 
-                  for (int j = 0; j < count_f(i); j++)
+                  glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD)
+                                ? GL_SMOOTH : GL_FLAT);
+
+                  // Add vertices in reverse order for Matlab compatibility
+                  for (int j = count_f(i)-1; j >= 0; j--)
                     {
                       if (! clip(int (f(i,j) - 1)))
                         {
                           vertex_data::vertex_data_rep *vv
                             = vdata[i+j*fr].get_rep ();
                           const Matrix m = vv->coords;
                           if (! flag)
                             {
                               flag = true;
                               glBegin (GL_LINE_STRIP);
                             }
+                          if (ec_mode != UNIFORM)
+                            {
+                              Matrix col = vv->color;
+
+                              if (col.numel () == 3)
+                                glColor3dv (col.data ());
+                            }
                           glVertex3d (m(0), m(1), m(2));
                         }
                       else if (flag)
                         {
                           flag = false;
                           glEnd ();
                         }
                     }
+                  // Do loop body with vertex N to "close" GL_LINE_STRIP
+                  // from vertex 0 to vertex N.
+                  int j = count_f(i)-1;
+                  if (flag && ! clip(int (f(i,j) - 1)))
+                    {
+                      vertex_data::vertex_data_rep *vv
+                        = vdata[i+j*fr].get_rep ();
+                      const Matrix m = vv->coords;
+                      if (ec_mode != UNIFORM)
+                        {
+                          Matrix col = vv->color;
+
+                          if (col.numel () == 3)
+                            glColor3dv (col.data ());
+                        }
+                      glVertex3d (m(0), m(1), m(2));
+                    }
 
                   if (flag)
                     glEnd ();
                 }
-              else
+              else  // Normal edge contour drawn with tesselator
                 {
                   tess.begin_polygon (false);
                   tess.begin_contour ();
 
                   for (int j = count_f(i)-1; j >= 0; j--)
                     {
                       vertex_data::vertex_data_rep *vv
                         = vdata[i+j*fr].get_rep ();
