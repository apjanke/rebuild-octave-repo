# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1317654220 14400
#      Mon Oct 03 11:03:40 2011 -0400
# Node ID c053740eb2aa3bcd350f0a416f0a21bd7d0194a9
# Parent  89789bc755a180990b71770d19fda74829991c7e
improve memory use for the pager and diary streams (bug #34431)

* pager.h, pager.cc (octave_pager_stream::reset,
octave_pager_stream::do_reset): New functions.
(octave_diary_stream::reset, octave_diary_stream::do_reset):
New functions.
* input.cc (octave_gets, get_user_input): Call
octave_pager_stream::reset and octave_diary_stream::reset prior to
printing prompt and getting input.

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -270,16 +270,19 @@ octave_gets (void)
       std::string ps = (promptflag > 0) ? VPS1 : VPS2;
 
       std::string prompt = command_editor::decode_prompt_string (ps);
 
       pipe_handler_error_count = 0;
 
       flush_octave_stdout ();
 
+      octave_pager_stream::reset ();
+      octave_diary_stream::reset ();
+
       octave_diary << prompt;
 
       retval = interactive_input (prompt);
 
       // There is no need to update the load_path cache if there is no
       // user input.
       if (! retval.empty ()
           && retval.find_first_not_of (" \t\n\r") != std::string::npos)
@@ -789,16 +792,19 @@ get_user_input (const octave_value_list&
   if (error_state)
     {
       error ("input: unrecognized argument");
       return retval;
     }
 
   flush_octave_stdout ();
 
+  octave_pager_stream::reset ();
+  octave_diary_stream::reset ();
+
   octave_diary << prompt;
 
   std::string input_buf = interactive_input (prompt.c_str (), true);
 
   if (! (error_state || input_buf.empty ()))
     {
       if (! input_from_startup_file)
         command_history::add (input_buf);
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -329,16 +329,39 @@ octave_pager_stream::flush_current_conte
 
 void
 octave_pager_stream::set_diary_skip (void)
 {
   if (pb)
     pb->set_diary_skip ();
 }
 
+// Reinitialize the pager buffer to avoid hanging on to large internal
+// buffers when they might not be needed.  This function should only be
+// called when the pager is not in use.  For example, just before
+// getting command-line input.
+
+void
+octave_pager_stream::reset (void)
+{
+  if (! instance)
+    instance = new octave_pager_stream ();
+
+  instance->do_reset ();
+}
+
+void
+octave_pager_stream::do_reset (void)
+{
+  delete pb;
+  pb = new octave_pager_buf ();
+  rdbuf (pb);
+  setf (unitbuf);
+}
+
 octave_diary_stream *octave_diary_stream::instance = 0;
 
 octave_diary_stream::octave_diary_stream (void) : std::ostream (0), db (0)
 {
   db = new octave_diary_buf ();
   rdbuf (db);
   setf (unitbuf);
 }
@@ -353,16 +376,39 @@ octave_diary_stream&
 octave_diary_stream::stream (void)
 {
   if (! instance)
     instance = new octave_diary_stream ();
 
   return *instance;
 }
 
+// Reinitialize the diary buffer to avoid hanging on to large internal
+// buffers when they might not be needed.  This function should only be
+// called when the pager is not in use.  For example, just before
+// getting command-line input.
+
+void
+octave_diary_stream::reset (void)
+{
+  if (! instance)
+    instance = new octave_diary_stream ();
+
+  instance->do_reset ();
+}
+
+void
+octave_diary_stream::do_reset (void)
+{
+  delete db;
+  db = new octave_diary_buf ();
+  rdbuf (db);
+  setf (unitbuf);
+}
+
 void
 flush_octave_stdout (void)
 {
   if (! flushing_output_to_pager)
     {
       unwind_protect frame;
 
       frame.protect_var (really_flush_to_pager);
diff --git a/src/pager.h b/src/pager.h
--- a/src/pager.h
+++ b/src/pager.h
@@ -63,18 +63,22 @@ public:
   ~octave_pager_stream (void);
 
   void flush_current_contents_to_diary (void);
 
   void set_diary_skip (void);
 
   static octave_pager_stream& stream (void);
 
+  static void reset (void);
+
 private:
 
+  void do_reset (void);
+
   static octave_pager_stream *instance;
 
   octave_pager_buf *pb;
 
   // No copying!
 
   octave_pager_stream (const octave_pager_stream&);
 
@@ -103,18 +107,22 @@ protected:
   octave_diary_stream (void);
 
 public:
 
   ~octave_diary_stream (void);
 
   static octave_diary_stream& stream (void);
 
+  static void reset (void);
+
 private:
 
+  void do_reset (void);
+
   static octave_diary_stream *instance;
 
   octave_diary_buf *db;
 
   // No copying!
 
   octave_diary_stream (const octave_diary_stream&);
 
