# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363897800 14400
#      Thu Mar 21 16:30:00 2013 -0400
# Node ID fb27f1e082976df3b9b002cd9bd8c05b98f6727c
# Parent  ca395af72d8871804f86325b86f122736b8e79b4
track line and column info directly in call stack (bug #38556)

* toplev.h, toplev.cc (octave_call_stack::call_stack_elt::line,
octave_call_stack::call_stack_elt::column): New data members.
(octave_call_stack::call_stack_elt::stmt): Delete.
Change all uses.
(octave_call_stack::set_location, octave_call_stack::do_set_location,
(octave_call_stack::set_line, octave_call_stack::do_set_line,
(octave_call_stack::set_column, octave_call_stack::do_set_column):
New functions.
(octave_call_stack::set_statement,
octave_call_stack::do_set_statement):
Delete.  Change all callers to use set_location or set_line and
set_column.

* pt-eval.cc (tree_evaluator::visit_if_command): Never call
do_breakpoint here.
(tree_evaluator::visit_if_command_list): Set call stack location for
each if/elseif clause.
(tree_evaluator::visit_switch_command): Don't call do_breakpoint for
individual cases.

diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -113,27 +113,39 @@ octave_call_stack::create_instance (void
 
       singleton_cleanup_list::add (cleanup_instance);
     }
 }
 
 int
 octave_call_stack::do_current_line (void) const
 {
-  tree_statement *stmt = do_current_statement ();
+  int retval = -1;
 
-  return stmt ? stmt->line () : -1;
+  if (! cs.empty ())
+    {
+      const call_stack_elt& elt = cs[curr_frame];
+      retval = elt.line;
+    }
+
+  return retval;
 }
 
 int
 octave_call_stack::do_current_column (void) const
 {
-  tree_statement *stmt = do_current_statement ();
+  int retval = -1;
 
-  return stmt ? stmt->column () : -1;
+  if (! cs.empty ())
+    {
+      const call_stack_elt& elt = cs[curr_frame];
+      retval = elt.column;
+    }
+
+  return retval;
 }
 
 int
 octave_call_stack::do_caller_user_code_line (void) const
 {
   int retval = -1;
 
   const_iterator p = cs.end ();
@@ -141,21 +153,19 @@ octave_call_stack::do_caller_user_code_l
   while (p != cs.begin ())
     {
       const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
         {
-          tree_statement *stmt = elt.stmt;
-
-          if (stmt)
+          if (elt.line > 0)
             {
-              retval = stmt->line ();
+              retval = elt.line;
               break;
             }
         }
     }
 
   return retval;
 }
 
@@ -169,21 +179,19 @@ octave_call_stack::do_caller_user_code_c
   while (p != cs.begin ())
     {
       const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
         {
-          tree_statement *stmt = elt.stmt;
-
-          if (stmt)
+          if (elt.column)
             {
-              retval = stmt->column ();
+              retval = elt.column;
               break;
             }
         }
     }
 
   return retval;
 }
 
@@ -305,28 +313,18 @@ octave_call_stack::do_backtrace (size_t 
 
                   file(k) = f->fcn_file_name ();
                   std::string parent_fcn_name = f->parent_fcn_name ();
                   if (parent_fcn_name == std::string ())
                     name(k) = f->name ();
                   else
                     name(k) = f->parent_fcn_name () + Vfilemarker + f->name ();
 
-                  tree_statement *stmt = elt.stmt;
-
-                  if (stmt)
-                    {
-                      line(k) = stmt->line ();
-                      column(k) = stmt->column ();
-                    }
-                  else
-                    {
-                      line(k) = -1;
-                      column(k) = -1;
-                    }
+                  line(k) = elt.line;
+                  column(k) = elt.column;
 
                   k++;
                 }
             }
         }
     }
 
   return retval;
@@ -347,27 +345,19 @@ octave_call_stack::do_goto_frame (size_t
 
       symbol_table::set_scope_and_context (elt.scope, elt.context);
 
       if (verbose)
         {
           octave_function *f = elt.fcn;
           std::string nm = f ? f->name () : std::string ("<unknown>");
 
-          tree_statement *s = elt.stmt;
-          int l = -1;
-          int c = -1;
-          if (s)
-            {
-              l = s->line ();
-              c = s->column ();
-            }
-
           octave_stdout << "stopped in " << nm
-                        << " at line " << l << " column " << c
+                        << " at line " << elt.line
+                        << " column " << elt.column
                         << " (" << elt.scope << "[" << elt.context << "])"
                         << std::endl;
         }
     }
 
   return retval;
 }
 
@@ -411,24 +401,18 @@ octave_call_stack::do_goto_frame_relativ
 
               symbol_table::set_scope_and_context (elt.scope, elt.context);
 
               if (verbose)
                 {
                   std::ostringstream buf;
 
                   if (f)
-                    {
-                      tree_statement *s = elt.stmt;
-
-                      int l = s ? s->line () : -1;
-
-                      buf << "stopped in " << f->name ()
-                          << " at line " << l << std::endl;
-                    }
+                    buf << "stopped in " << f->name ()
+                        << " at line " << elt.line << std::endl;
                   else
                     buf << "at top level" << std::endl;
 
                   octave_stdout << buf.str ();
                 }
 
               retval = true;
               break;
@@ -504,33 +488,29 @@ octave_call_stack::do_backtrace_error_me
       error ("called from:");
     }
 
   if (! cs.empty ())
     {
       const call_stack_elt& elt = cs.back ();
 
       octave_function *fcn = elt.fcn;
-      tree_statement *stmt = elt.stmt;
 
       std::string fcn_name = "?unknown?";
 
       if (fcn)
         {
           fcn_name = fcn->fcn_file_name ();
 
           if (fcn_name.empty ())
             fcn_name = fcn->name ();
         }
 
-      int line = stmt ? stmt->line () : -1;
-      int column = stmt ? stmt->column () : -1;
-
       error ("  %s at line %d, column %d",
-             fcn_name.c_str (), line, column);
+             fcn_name.c_str (), elt.line, elt.column);
     }
 }
 
 void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
diff --git a/libinterp/interpfcn/toplev.h b/libinterp/interpfcn/toplev.h
--- a/libinterp/interpfcn/toplev.h
+++ b/libinterp/interpfcn/toplev.h
@@ -79,24 +79,27 @@ OCTINTERP_API
 octave_call_stack
 {
 private:
 
   struct call_stack_elt
   {
     call_stack_elt (octave_function *f, symbol_table::scope_id s,
                     symbol_table::context_id c, size_t p = 0)
-      : fcn (f), stmt (0), scope (s), context (c), prev (p) { }
+      : fcn (f), line (-1), column (-1), scope (s), context (c), prev (p)
+    { }
 
     call_stack_elt (const call_stack_elt& elt)
-      : fcn (elt.fcn), stmt (elt.stmt), scope (elt.scope),
-        context (elt.context), prev (elt.prev) { }
+      : fcn (elt.fcn), line (elt.line), column (elt.column),
+        scope (elt.scope), context (elt.context), prev (elt.prev)
+    { }
 
     octave_function *fcn;
-    tree_statement *stmt;
+    int line;
+    int column;
     symbol_table::scope_id scope;
     symbol_table::context_id context;
     size_t prev;
   };
 
 protected:
 
   octave_call_stack (void) : cs (), curr_frame (0) { }
@@ -129,22 +132,16 @@ public:
   }
 
   // Current function (top of stack).
   static octave_function *current (void)
   {
     return instance_ok () ? instance->do_current () : 0;
   }
 
-  // Current statement (top of stack).
-  static tree_statement *current_statement (void)
-  {
-    return instance_ok () ? instance->do_current_statement () : 0;
-  }
-
   // Current line in current function.
   static int current_line (void)
   {
     return instance_ok () ? instance->do_current_line () : -1;
   }
 
   // Current column in current function.
   static int current_column (void)
@@ -221,20 +218,32 @@ public:
   static void
   push (symbol_table::scope_id scope = symbol_table::current_scope (),
         symbol_table::context_id context = symbol_table::current_context ())
   {
     if (instance_ok ())
       instance->do_push (0, scope, context);
   }
 
-  static void set_statement (tree_statement *s)
+  static void set_location (int l, int c)
   {
     if (instance_ok ())
-      instance->do_set_statement (s);
+      instance->do_set_location (l, c);
+  }
+
+  static void set_line (int l)
+  {
+    if (instance_ok ())
+      instance->do_set_line (l);
+  }
+
+  static void set_column (int c)
+  {
+    if (instance_ok ())
+      instance->do_set_column (c);
   }
 
   static bool goto_frame (size_t n = 0, bool verbose = false)
   {
     return instance_ok () ? instance->do_goto_frame (n, verbose) : false;
   }
 
   static void restore_frame (size_t n)
@@ -360,35 +369,44 @@ private:
       {
         const call_stack_elt& elt = cs[curr_frame];
         retval = elt.fcn;
       }
 
     return retval;
   }
 
-  tree_statement *do_current_statement (void) const
-  {
-    tree_statement *retval = 0;
-
-    if (! cs.empty ())
-      {
-        const call_stack_elt& elt = cs[curr_frame];
-        retval = elt.stmt;
-      }
-
-    return retval;
-  }
-
-  void do_set_statement (tree_statement *s)
+  void do_set_location (int l, int c)
   {
     if (! cs.empty ())
       {
         call_stack_elt& elt = cs.back ();
-        elt.stmt = s;
+
+        elt.line = l;
+        elt.column = c;
+      }
+  }
+
+  void do_set_line (int l)
+  {
+    if (! cs.empty ())
+      {
+        call_stack_elt& elt = cs.back ();
+
+        elt.line = l;
+      }
+  }
+
+  void do_set_column (int c)
+  {
+    if (! cs.empty ())
+      {
+        call_stack_elt& elt = cs.back ();
+
+        elt.column = c;
       }
   }
 
   octave_map do_backtrace (size_t nskip,
                            octave_idx_type& curr_user_frame) const;
 
   bool do_goto_frame (size_t n, bool verbose);
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -552,34 +552,34 @@ void
 tree_evaluator::visit_if_clause (tree_if_clause&)
 {
   panic_impossible ();
 }
 
 void
 tree_evaluator::visit_if_command (tree_if_command& cmd)
 {
-  if (debug_mode)
-    do_breakpoint (cmd.is_breakpoint ());
-
   tree_if_command_list *lst = cmd.cmd_list ();
 
   if (lst)
     lst->accept (*this);
 }
 
 void
 tree_evaluator::visit_if_command_list (tree_if_command_list& lst)
 {
   for (tree_if_command_list::iterator p = lst.begin (); p != lst.end (); p++)
     {
       tree_if_clause *tic = *p;
 
       tree_expression *expr = tic->condition ();
 
+      if (statement_context == function || statement_context == script)
+        octave_call_stack::set_location (tic->line (), tic->column ());
+
       if (debug_mode && ! tic->is_else_clause ())
         do_breakpoint (tic->is_breakpoint ());
 
       if (tic->is_else_clause () || expr->is_logically_true ("if"))
         {
           if (! error_state)
             {
               tree_statement_list *stmt_lst = tic->commands ();
@@ -698,17 +698,17 @@ tree_evaluator::visit_statement (tree_st
   if (cmd || expr)
     {
       if (statement_context == function || statement_context == script)
         {
           // Skip commands issued at a debug> prompt to avoid disturbing
           // the state of the program we are debugging.
 
           if (! Vdebugging)
-            octave_call_stack::set_statement (&stmt);
+            octave_call_stack::set_location (stmt.line (), stmt.column ());
 
           // FIXME -- we need to distinguish functions from scripts to
           // get this right.
           if ((statement_context == script
                && ((Vecho_executing_commands & ECHO_SCRIPTS)
                    || (Vecho_executing_commands & ECHO_FUNCTIONS)))
               || (statement_context == function
                   && (Vecho_executing_commands & ECHO_FUNCTIONS)))
@@ -860,19 +860,16 @@ tree_evaluator::visit_switch_command (tr
 
       if (! error_state && lst)
         {
           for (tree_switch_case_list::iterator p = lst->begin ();
                p != lst->end (); p++)
             {
               tree_switch_case *t = *p;
 
-              if (debug_mode && ! t->is_default_case ())
-                do_breakpoint (t->is_breakpoint ());
-
               if (t->is_default_case () || t->label_matches (val))
                 {
                   if (error_state)
                     break;
 
                   tree_statement_list *stmt_lst = t->commands ();
 
                   if (stmt_lst)
@@ -941,20 +938,22 @@ tree_evaluator::do_unwind_protect_cleanu
   // We want to run the cleanup code without error_state being set,
   // but we need to restore its value, so that any errors encountered
   // in the first part of the unwind_protect are not completely
   // ignored.
 
   frame.protect_var (error_state);
   error_state = 0;
 
-  // We want to preserve the last statement indicator for possible
+  // We want to preserve the last location info for possible
   // backtracking.
-  frame.add_fcn (octave_call_stack::set_statement,
-                 octave_call_stack::current_statement ());
+  frame.add_fcn (octave_call_stack::set_line,
+                 octave_call_stack::current_line ());
+  frame.add_fcn (octave_call_stack::set_column,
+                 octave_call_stack::current_column ());
 
   // Similarly, if we have seen a return or break statement, allow all
   // the cleanup code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
   frame.protect_var (tree_return_command::returning);
   tree_return_command::returning = 0;
