# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551640850 0
#      Sun Mar 03 19:20:50 2019 +0000
# Node ID 20881d195d205c7e3cac2d99fc7357dd9c1ce805
# Parent  6e9034836239b537b090eae27a11f9f21bdb3fcc
fix handling of SIGTSTP (bug #51903)

* interpreter.cc (interpreter::interpreter): Unblock SIGTSTP signal in
interpreter thread.
* toplev.cc (Fsystem): Unblock SIGTSTP before creating a subprocess.
* main.in.cc (main): Block SIGTSTP when starting Octave process so it
is blocked in all threads.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -412,17 +412,20 @@ namespace octave
 
     octave_ieee_init ();
 
     initialize_xerbla_error_handler ();
 
     initialize_error_handlers ();
 
     if (m_app_context)
-      install_signal_handlers ();
+      {
+        install_signal_handlers ();
+        octave_unblock_signal_by_name ("SIGTSTP");
+      }
     else
       quit_allowed = false;
 
     bool line_editing = false;
     bool traditional = false;
 
     if (m_app_context)
       {
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -280,16 +280,17 @@ systems.
     cmd_str = '"' + cmd_str + '"';
 #endif
 
   octave::unwind_protect frame;
 
   frame.add_fcn (restore_signal_mask, get_signal_mask ());
 
   octave_unblock_async_signals ();
+  octave_unblock_signal_by_name ("SIGTSTP");
 
   if (type == et_async)
     retval(0) = octave_async_system_wrapper (cmd_str.c_str ());
   else if (return_output)
     retval = run_command_and_return_output (cmd_str);
   else
     {
       int status = system (cmd_str.c_str ());
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -364,16 +364,17 @@ main (int argc, char **argv)
   // ensure that signals are delivered to the main interpreter thread
   // and no others by blocking signals before we exec the Octave
   // interpreter executable.  When that process starts, it will unblock
   // signals in the main interpreter thread.  When running the GUI as a
   // subprocess, we also unblock signals that the parent process handles
   // so we can forward them to the child.
 
   octave_block_async_signals ();
+  octave_block_signal_by_name ("SIGTSTP");
 
 #if defined (HAVE_OCTAVE_QT_GUI) && ! defined (OCTAVE_USE_WINDOWS_API)
 
   if (gui_libs && start_gui)
     {
       // Fork and exec when starting the GUI so that we will call
       // setsid to give up the controlling terminal (if any) and so that
       // the GUI process will be in a separate process group.
@@ -407,16 +408,17 @@ main (int argc, char **argv)
         }
       else
         {
           // Parent.  Forward signals to child while waiting for it to exit.
 
           install_signal_handlers ();
 
           octave_unblock_async_signals ();
+          octave_unblock_signal_by_name ("SIGTSTP");
 
           int status;
 
           while (true)
             {
               octave_waitpid_wrapper (gui_pid, &status, 0);
 
               if (caught_signal > 0)
