# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532612490 14400
#      Thu Jul 26 09:41:30 2018 -0400
# Node ID 20aa564402c441b85748d0464dd814d8d1781365
# Parent  31c0bb386bcd3bdf21c437787ed02d7c5d8035e2
# Parent  a8b0fb44ed944d58455211dca1d0aa3e190d72be
maint: Merge stable to default.

diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -820,28 +820,28 @@ INSTANTIATE_INTTYPE (uint64_t);
 %! a = int64 (-2**60) + 2; assert (1.25*a == (5*a)/4);
 %!test
 %! a = uint64 (2**61) + 2; assert (1.25*a == (5*a)/4);
 %!assert (int32 (2**31+0.5), intmax ("int32"))
 %!assert (int32 (-2**31-0.5), intmin ("int32"))
 %!assert ((int64 (2**62)+1)**1, int64 (2**62)+1)
 %!assert ((int64 (2**30)+1)**2, int64 (2**60+2**31) + 1)
 
-%!assert (uint8 (char (128)), uint8 (128))
-%!assert (uint8 (char (255)), uint8 (255))
-%!assert (int8 (char (128)), int8 (128))
-%!assert (int8 (char (255)), int8 (255))
+%!assert <54382> (uint8 (char (128)), uint8 (128))
+%!assert <54382> (uint8 (char (255)), uint8 (255))
+%!assert <54382> (int8 (char (128)), int8 (128))
+%!assert <54382> (int8 (char (255)), int8 (255))
 
-%!assert (uint16 (char (128)), uint16 (128))
-%!assert (uint16 (char (255)), uint16 (255))
-%!assert (int16 (char (128)), int16 (128))
-%!assert (int16 (char (255)), int16 (255))
+%!assert <54382> (uint16 (char (128)), uint16 (128))
+%!assert <54382> (uint16 (char (255)), uint16 (255))
+%!assert <54382> (int16 (char (128)), int16 (128))
+%!assert <54382> (int16 (char (255)), int16 (255))
 
-%!assert (uint32 (char (128)), uint32 (128))
-%!assert (uint32 (char (255)), uint32 (255))
-%!assert (int32 (char (128)), int32 (128))
-%!assert (int32 (char (255)), int32 (255))
+%!assert <54382> (uint32 (char (128)), uint32 (128))
+%!assert <54382> (uint32 (char (255)), uint32 (255))
+%!assert <54382> (int32 (char (128)), int32 (128))
+%!assert <54382> (int32 (char (255)), int32 (255))
 
-%!assert (uint64 (char (128)), uint64 (128))
-%!assert (uint64 (char (255)), uint64 (255))
-%!assert (int64 (char (128)), int64 (128))
-%!assert (int64 (char (255)), int64 (255))
+%!assert <54382> (uint64 (char (128)), uint64 (128))
+%!assert <54382> (uint64 (char (255)), uint64 (255))
+%!assert <54382> (int64 (char (128)), int64 (128))
+%!assert <54382> (int64 (char (255)), int64 (255))
 */
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -196,17 +196,17 @@ endfunction
 
 %!test <51157>
 %! y = betainc ([0.00780;0.00782;0.00784],250.005,49750.995);
 %! y_ex = [0.999999999999989; 0.999999999999992; 0.999999999999995];
 %! assert (y, y_ex, -1e-14);
 
 %!assert (betainc (0.001, 20, 30), 2.750687665855991e-47, -3e-14);
 %!assert (betainc (0.0001, 20, 30), 2.819953178893307e-67, -7e-14);
-%!assert (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -5e-14);
+%!assert <54383> (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -5e-14);
 %!assert (betainc (0.999, 20, 30, "upper"), 1.850806276141535e-77, -7e-14);
 %!assert (betainc (0.5, 200, 300), 0.9999964565197356, -1e-15);
 %!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -3e-13);
 
 ## Test trivial values
 %!test
 %! [a,b] = ndgrid (linspace (1e-4, 100, 20), linspace (1e-4, 100, 20));
 %! assert (betainc (0, a, b), zeros (20));
diff --git a/scripts/strings/native2unicode.m b/scripts/strings/native2unicode.m
--- a/scripts/strings/native2unicode.m
+++ b/scripts/strings/native2unicode.m
@@ -68,24 +68,24 @@ function utf8_str = native2unicode (nati
   if (iscolumn (native_bytes))
     utf8_str = utf8_str';
   endif
 
 endfunction
 
 
 ## "ЄЅІЇЈЉЊ"
-%!assert (double (native2unicode (164:170, 'ISO-8859-5')),
+%!assert <54384> (double (native2unicode (164:170, 'ISO-8859-5')),
 %!        [208 132 208 133 208 134 208 135 208 136 208 137 208 138]);
 ## ["ЄЅІ" 0 "ЇЈЉЊ"]
-%!assert (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
+%!assert <54384> (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
 %!        [208 132 208 133 208 134 0 208 135 208 136 208 137 208 138]);
 
 %!assert (native2unicode ("foobar"), "foobar");
-%!assert (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
+%!assert <54384> (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
 %!        [0 0 120 0 0 123 0 0]);
 
 %!error <Invalid call> native2unicode ()
 %!error <Invalid call> native2unicode (1, 'ISO-8859-1', 'test')
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ([1 2; 3 4])
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ({1 2 3 4})
 %!error <CODEPAGE must be a string> native2unicode (164:170, 123)
 %!error <converting from codepage 'foo' to UTF-8> native2unicode (234, 'foo')
diff --git a/scripts/strings/unicode2native.m b/scripts/strings/unicode2native.m
--- a/scripts/strings/unicode2native.m
+++ b/scripts/strings/unicode2native.m
@@ -54,17 +54,17 @@ function native_bytes = unicode2native (
 
   if (iscolumn (utf8_str))
     native_bytes = native_bytes';
   endif
 
 endfunction
 
 
-%!assert (unicode2native ("ЄЅІЇЈЉЊ", "ISO-8859-5"), uint8 (164:170));
-%!assert (unicode2native (["ЄЅІ" 0 "ЇЈЉЊ"], "ISO-8859-5"), uint8 ([164:166 0 167:170]));
+%!assert <54384> (unicode2native ("ЄЅІЇЈЉЊ", "ISO-8859-5"), uint8 (164:170));
+%!assert <54384> (unicode2native (["ЄЅІ" 0 "ЇЈЉЊ"], "ISO-8859-5"), uint8 ([164:166 0 167:170]));
 
 %!error <Invalid call> unicode2native ()
 %!error <Invalid call> unicode2native ('a', 'ISO-8859-1', 'test')
 %!error <UTF8_STR must be a character vector> unicode2native (['ab'; 'cd'])
 %!error <UTF8_STR must be a character vector> unicode2native ({1 2 3 4})
 %!error <CODEPAGE must be a string> unicode2native ('ЄЅІЇЈЉЊ', 123)
 %!error <converting from UTF-8 to codepage 'foo'> unicode2native ('a', 'foo')
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -569,34 +569,34 @@
 %!       assert (m_in, m_out);
 %!     endfor
 %!   unwind_protect_cleanup
 %!     fclose (id);
 %!   end_unwind_protect
 %!   unlink (nm);
 %! endif
 
-%!test
+%!test <54386>
 %! x = char (128:255)';
 %! nm = tempname ();
 %! mode = "wb";
 %! [id, err] = fopen (nm, mode);
 %! if (id < 0)
 %!   __printf_assert__ ("open failed: %s (%s): %s\n", nm, mode, err);
 %! else
 %!   fwrite (id, x);
 %!   fclose (id);
 %!   mode = "rb";
 %!   [id, err] = fopen (nm, mode);
 %!   if (id < 0)
 %!     __printf_assert__ ("open failed: %s (%s): %s\n", nm, mode, err);
 %!   else
 %!     y = fread (id, Inf, "uchar=>char");
 %!     fclose (id);
-%!     assert (x, y);
+%!     assert (y, x);
 %!     unlink (nm);
 %!   endif
 %! endif
 
 %!test
 %! nm = tempname ();
 %! id = fopen (nm, "wb");
 %! if (id > 0)
