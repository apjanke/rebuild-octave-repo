# HG changeset patch
# User jwe
# Date 1180461097 0
#      Tue May 29 17:51:37 2007 +0000
# Node ID 14992092ab06e781a70108c78ae0273def995317
# Parent  39d76485706abb612b6fdf28b7a068f719832f79
[project @ 2007-05-29 17:51:37 by jwe]

diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -276,29 +276,29 @@ options      MATH_EMULATE
 @noindent
 in the kernel configuration files (typically found in the directory
 @file{/sys/i386/conf}.  After making this change, you'll need to rebuild
 the kernel, install it, and reboot.
 
 @item
 If you encounter errors like
 
-@smallexample
+@example
 @group
 passing `void (*)()' as argument 2 of
   `octave_set_signal_handler(int, void (*)(int))'
 @end group
-@end smallexample
+@end example
 
 @noindent
 or
 
-@smallexample
+@example
 warning: ANSI C++ prohibits conversion from `(int)' to `(...)'
-@end smallexample
+@end example
 
 @noindent
 while compiling @file{sighandlers.cc}, you may need to edit some files
 in the @code{gcc} include subdirectory to add proper prototypes for functions
 there.  For example, Ultrix 4.2 needs proper declarations for the
 @code{signal} function and the @code{SIG_IGN} macro in the file
 @file{signal.h}.
 
@@ -336,31 +336,31 @@ gcc -print-libgcc-file-name
 @noindent
 The directory of @code{gcc} include files normally begins in the same directory
 that contains the file @file{libgcc.a}.
 
 @item
 Some of the Fortran subroutines may fail to compile with older versions
 of the Sun Fortran compiler.  If you get errors like
 
-@smallexample
+@example
 zgemm.f:
 	zgemm:
 warning: unexpected parent of complex expression subtree
 zgemm.f, line 245: warning: unexpected parent of complex
   expression subtree
 warning: unexpected parent of complex expression subtree
 zgemm.f, line 304: warning: unexpected parent of complex
   expression subtree
 warning: unexpected parent of complex expression subtree
 zgemm.f, line 327: warning: unexpected parent of complex
   expression subtree
 pcc_binval: missing IR_CONV in complex op
 make[2]: *** [zgemm.o] Error 1
-@end smallexample
+@end example
 
 @noindent
 when compiling the Fortran subroutines in the @file{libcruft}
 subdirectory, you should either upgrade your compiler or try compiling
 with optimization turned off.
 
 @item
 On NeXT systems, if you get errors like this:
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -347,30 +347,30 @@ information not only about the number of
 about their types and what style should be used for printing them.
 
 Ordinary characters in the template string are simply written to the
 output stream as-is, while @dfn{conversion specifications} introduced by
 a @samp{%} character in the template cause subsequent arguments to be
 formatted and written to the output stream.  For example,
 @cindex conversion specifications (@code{printf})
 
-@smallexample
+@example
 pct = 37;
 filename = "foo.txt";
 printf ("Processing of `%s' is %d%% finished.\nPlease be patient.\n",
         filename, pct);
-@end smallexample
+@end example
 
 @noindent
 produces output like
 
-@smallexample
+@example
 Processing of `foo.txt' is 37% finished.
 Please be patient.
-@end smallexample
+@end example
 
 This example shows the use of the @samp{%d} conversion to specify that a
 scalar argument should be printed in decimal notation, the @samp{%s}
 conversion to specify printing of a string argument, and the @samp{%%}
 conversion to print a literal @samp{%} character.
 
 There are also conversions for printing an integer argument as an
 unsigned value in octal, decimal, or hexadecimal radix (@samp{%o},
@@ -436,19 +436,19 @@ specifications that can appear in a @cod
 string.
 
 Characters in the template string that are not part of a
 conversion specification are printed as-is to the output stream.
 
 The conversion specifications in a @code{printf} template string have
 the general form:
 
-@smallexample
+@example
 % @var{flags} @var{width} @r{[} . @var{precision} @r{]} @var{type} @var{conversion}
-@end smallexample
+@end example
 
 For example, in the conversion specifier @samp{%-10.8ld}, the @samp{-}
 is a flag, @samp{10} specifies the field width, the precision is
 @samp{8}, the letter @samp{l} is a type modifier, and @samp{d} specifies
 the conversion style.  (This particular type specifier says to print a
 numeric argument in decimal notation, with a minimum of 8 digits
 left-justified in a field at least 10 characters wide.)
 
@@ -685,34 +685,34 @@ the value is rounded to the nearest numb
 
 This section describes miscellaneous conversions for @code{printf}.
 
 The @samp{%c} conversion prints a single character.  The @samp{-} 
 flag can be used to specify left-justification in the field, but no
 other flags are defined, and no precision or type modifier can be given.
 For example:
 
-@smallexample
+@example
 printf ("%c%c%c%c%c", "h", "e", "l", "l", "o");
-@end smallexample
+@end example
 
 @noindent
 prints @samp{hello}.
 
 The @samp{%s} conversion prints a string.  The corresponding argument
 must be a string.  A precision can be specified to indicate the maximum
 number of characters to write; otherwise characters in the string up to
 but not including the terminating null character are written to the
 output stream.  The @samp{-} flag can be used to specify
 left-justification in the field, but no other flags or type modifiers
 are defined for this conversion.  For example:
 
-@smallexample
+@example
 printf ("%3s%-6s", "no", "where");
-@end smallexample
+@end example
 
 @noindent
 prints @samp{ nowhere } (note the leading and trailing spaces).
 
 @node Formatted Input
 @subsection Formatted Input
 
 Octave provides the @code{scanf}, @code{fscanf}, and @code{sscanf}
@@ -765,19 +765,19 @@ before and after.
 
 Other characters in the template string that are not part of conversion
 specifications must match characters in the input stream exactly; if
 this is not the case, a matching failure occurs.
 
 The conversion specifications in a @code{scanf} template string
 have the general form:
 
-@smallexample
+@example
 % @var{flags} @var{width} @var{type} @var{conversion}
-@end smallexample
+@end example
 
 In more detail, an input conversion specification consists of an initial
 @samp{%} character followed in sequence by:
 
 @itemize @bullet
 @item
 An optional @dfn{flag character} @samp{*}, which says to ignore the text
 read for this specification.  When @code{scanf} finds a conversion
@@ -904,19 +904,19 @@ precisely the next @var{n} characters, a
 many.
 
 The @samp{%s} conversion matches a string of non-whitespace characters.
 It skips and discards initial whitespace, but stops when it encounters
 more whitespace after having read something.
 
 For example, reading the input:
 
-@smallexample
+@example
  hello, world
-@end smallexample
+@end example
 
 @noindent
 with the conversion @samp{%10c} produces @code{" hello, wo"}, but
 reading the same input with the conversion @samp{%10s} produces
 @code{"hello,"}.
 
 @node Binary I/O
 @subsection Binary I/O
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -222,19 +222,19 @@ example,
 
 Here is a table of the conventional possibilities for @var{header-name}:
 
 @table @samp
 @item Author
 This line states the name and net address of at least the principal
 author of the library.
 
-@smallexample
+@example
 ## Author: John W. Eaton <jwe@@bevo.che.wisc.edu>
-@end smallexample
+@end example
 
 @item Maintainer
 This line should contain a single name/address as in the Author line, or
 an address only, or the string @samp{jwe}.  If there is no maintainer
 line, the person(s) in the Author field are presumed to be the
 maintainers.  The example above is mildly bogus because the maintainer
 line is redundant.
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -3070,32 +3070,32 @@ DEFUN (split_long_rows, args, nargout,
 @deftypefnx {Built-in Function} {@var{old_val} =} split_long_rows (@var{new_val})\n\
 Query or set the internal variable that controls whether rows of a matrix\n\
 may be split when displayed to a terminal window.  If the rows are split,\n\
 Octave will display the matrix in a series of smaller pieces, each of\n\
 which can fit within the limits of your terminal width and each set of\n\
 rows is labeled so that you can easily see which columns are currently\n\
 being displayed.  For example:\n\
 \n\
-@smallexample\n\
+@example\n\
 @group\n\
 octave:13> rand (2,10)\n\
 ans =\n\
 \n\
  Columns 1 through 6:\n\
 \n\
   0.75883  0.93290  0.40064  0.43818  0.94958  0.16467\n\
   0.75697  0.51942  0.40031  0.61784  0.92309  0.40201\n\
 \n\
  Columns 7 through 10:\n\
 \n\
   0.90174  0.11854  0.72313  0.73326\n\
   0.44672  0.94303  0.56564  0.82150\n\
 @end group\n\
-@end smallexample\n\
+@end example\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (split_long_rows);
 }
 
 DEFUN (output_max_field_width, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} output_max_field_width ()\n\
