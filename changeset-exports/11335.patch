# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1291939163 18000
#      Thu Dec 09 18:59:23 2010 -0500
# Node ID db091f68798c76535ccee1245af17524560454f0
# Parent  703f51c2beb72c524bdd51ee9738f158d014a14b
allow kolmogorov_smirnov_test to work with either DIST_cdf or DISTcdf functions

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-12-09  John W. Eaton  <jwe@octave.org>
+
+	* statistics/tests/kolmogorov_smirnov_test.m: Try both DIST_cdf
+	and DISTcdf functions.  Always use feval to call CDF function.
+	Bug #31838.
+
 2010-12-09  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Set major and grid linewidths from
 	axis linewidth property.
 
 2010-12-09  Rik  <octave@nomad.inbox5.com>
 
 	* plot/__print_parse_opts__.m: Convert print resolution from char to
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test.m b/scripts/statistics/tests/kolmogorov_smirnov_test.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test.m
@@ -24,17 +24,17 @@
 ## if F and G are the CDFs corresponding to the sample and dist,
 ## respectively, then the null is that F == G.
 ##
 ## The optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, to test whether a sample @var{x} comes from
 ## a uniform distribution on [2,4], use
 ##
 ## @example
-## kolmogorov_smirnov_test(x, "uniform", 2, 4)
+## kolmogorov_smirnov_test(x, "unif", 2, 4)
 ## @end example
 ##
 ## @noindent
 ## @var{dist} can be any string for which a function @var{dist_cdf}
 ## that calculates the CDF of distribution @var{dist} exists.
 ##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
@@ -61,35 +61,41 @@ function [pval, ks] = kolmogorov_smirnov
   endif
 
   if (! isvector (x))
     error ("kolmogorov_smirnov_test: x must be a vector");
   endif
 
   n = length (x);
   s = sort (x);
-  f = str2func (sprintf ("%s_cdf", dist));
+  try
+    f = str2func (sprintf ("%scdf", dist));
+  catch
+    try
+      f = str2func (sprintf ("%s_cdf", dist));
+    catch
+      error ("kolmogorov_smirnov_test: no %scdf or %s_cdf function found",
+             dist, dist);
+    end_try_catch
+  end_try_catch
 
   alt  = "!=";
 
-  if (nargin == 2)
-    z = reshape (feval (f, s), 1, n);
-  else
-    args = "";
-    for k = 1 : (nargin-2);
-      tmp  = varargin{k};
-      if ischar (tmp)
-        alt = tmp;
-      else
-        args = sprintf ("%s, %g", args, tmp);
-      endif
-    endfor
-    z = reshape (eval (sprintf ("%s(s%s);", func2str (f), args)), 1, n);
+  args{1} = s;
+  nvargs = numel (varargin);
+  if (nvargs > 0)
+    if (ischar (varargin{end}))
+      args(2:nvargs) = varargin(1:end-1);
+    else
+      args(2:nvargs+1) = varargin;
+    endif
   endif
 
+  z = reshape (feval (f, args{:}), 1, n);
+
   if (strcmp (alt, "!=") || strcmp (alt, "<>"))
     ks   = sqrt (n) * max (max ([abs(z - (0:(n-1))/n); abs(z - (1:n)/n)]));
     pval = 1 - kolmogorov_smirnov_cdf (ks);
   elseif (strcmp (alt, ">"))
     ks   = sqrt (n) * max (max ([z - (0:(n-1))/n; z - (1:n)/n]));
     pval = exp (- 2 * ks^2);
   elseif (strcmp (alt, "<"))
     ks   = - sqrt (n) * min (min ([z - (0:(n-1))/n; z - (1:n)/n]));
