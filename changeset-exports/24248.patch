# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1506187669 -7200
#      Sat Sep 23 19:27:49 2017 +0200
# Node ID af23baa0a9da061562af82b11f8e9c106759d1dc
# Parent  4e045a47659889210900220ef89ff5a73fef193b
jit: Move join() outside of class jit_typeinfo, renamed to jit_type_join()

diff --git a/libinterp/parse-tree/jit-ir.cc b/libinterp/parse-tree/jit-ir.cc
--- a/libinterp/parse-tree/jit-ir.cc
+++ b/libinterp/parse-tree/jit-ir.cc
@@ -646,17 +646,17 @@ namespace octave
     if (! p->alive ())
       return false;
 
     jit_type *infered = nullptr;
     for (size_t i = 0; i < argument_count (); ++i)
       {
         jit_block *inc = incomming (i);
         if (inc->branch_alive (p))
-          infered = jit_typeinfo::join (infered, argument_type (i));
+          infered = jit_type_join (infered, argument_type (i));
       }
 
     if (infered != type ())
       {
         stash_type (infered);
         return true;
       }
 
diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -521,16 +521,47 @@ namespace octave
   }
 
   llvm::Type *
   jit_type::to_llvm_arg (void) const
   {
     return llvm_type ? llvm_type->getPointerTo () : nullptr;
   }
 
+jit_type*
+jit_type_join (jit_type *lhs, jit_type *rhs)
+{
+  // empty case
+  if (! lhs)
+    return rhs;
+
+  if (! rhs)
+    return lhs;
+
+  // check for a shared parent
+  while (lhs != rhs)
+    {
+      if (lhs->depth () > rhs->depth ())
+        lhs = lhs->parent ();
+      else if (lhs->depth () < rhs->depth ())
+        rhs = rhs->parent ();
+      else
+        {
+          // we MUST have depth > 0 as any is the base type of everything
+          do
+            {
+              lhs = lhs->parent ();
+              rhs = rhs->parent ();
+            }
+          while (lhs != rhs);
+        }
+    }
+  return lhs;
+}
+
   // -------------------- jit_function --------------------
   jit_function::jit_function () : module (0), llvm_function (0), mresult (0),
                                   call_conv (jit_convention::length),
                                   mcan_error (false)
   { }
 
   jit_function::jit_function (llvm::Module *amodule,
                               jit_convention::type acall_conv,
diff --git a/libinterp/parse-tree/jit-typeinfo.h b/libinterp/parse-tree/jit-typeinfo.h
--- a/libinterp/parse-tree/jit-typeinfo.h
+++ b/libinterp/parse-tree/jit-typeinfo.h
@@ -214,16 +214,20 @@ namespace octave
     convert_fn munpack[jit_convention::length];
 
     llvm::Type *mpacked_type[jit_convention::length];
   };
 
   // seperate print function to allow easy printing if type is null
   std::ostream& jit_print (std::ostream& os, jit_type *atype);
 
+// Find common type
+jit_type* jit_type_join (jit_type *lhs, jit_type *rhs);
+
+
   class jit_value;
 
   // An abstraction for calling llvm functions with jit_values.  Deals with
   // calling convention details.
   class
   jit_function
   {
     friend std::ostream& operator << (std::ostream& os, const jit_function& fn);
@@ -478,20 +482,16 @@ namespace octave
   // A singleton class which handles the construction of jit_types and
   // jit_operations.
   class
   jit_typeinfo
   {
   public:
     static void initialize (llvm::Module *m, llvm::ExecutionEngine *e);
 
-    static jit_type * join (jit_type *lhs, jit_type *rhs)
-    {
-      return instance->do_join (lhs, rhs);
-    }
 
     static jit_type * get_any (void) { return instance->any; }
 
     static jit_type * get_matrix (void) { return instance->matrix; }
 
     static jit_type * get_scalar (void) { return instance->scalar; }
 
     static llvm::Type * get_scalar_llvm (void)
@@ -630,48 +630,16 @@ namespace octave
 
     static llvm::Value * create_complex (llvm::Value *real, llvm::Value *imag)
     {
       return instance->complex_new (real, imag);
     }
   private:
     jit_typeinfo (llvm::Module *m, llvm::ExecutionEngine *e);
 
-    // FIXME: Do these methods really need to be in jit_typeinfo?
-    jit_type * do_join (jit_type *lhs, jit_type *rhs)
-    {
-      // empty case
-      if (! lhs)
-        return rhs;
-
-      if (! rhs)
-        return lhs;
-
-      // check for a shared parent
-      while (lhs != rhs)
-        {
-          if (lhs->depth () > rhs->depth ())
-            lhs = lhs->parent ();
-          else if (lhs->depth () < rhs->depth ())
-            rhs = rhs->parent ();
-          else
-            {
-              // we MUST have depth > 0 as any is the base type of everything
-              do
-                {
-                  lhs = lhs->parent ();
-                  rhs = rhs->parent ();
-                }
-              while (lhs != rhs);
-            }
-        }
-
-      return lhs;
-    }
-
     jit_type * do_difference (jit_type *lhs, jit_type *)
     {
       // FIXME: Maybe we can do something smarter?
       return lhs;
     }
 
     jit_type * do_type_of (const octave_value& ov) const;
 
