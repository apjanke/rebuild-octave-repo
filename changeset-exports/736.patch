# HG changeset patch
# User jwe
# Date 780377378 0
#      Sat Sep 24 03:29:38 1994 +0000
# Node ID c8f88bd3202b9a7baafd18d034c4ea80d2e48e0b
# Parent  7455048010b9a051452262940b4a2d317ae9fa90
[project @ 1994-09-24 03:28:05 by jwe]

diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -1,9 +1,9 @@
-# Copyright (C) 1993 John W. Eaton
+# Copyright (C) 1993, 1994 John W. Eaton
 # 
 # This file is part of Octave.
 # 
 # Octave is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by the
 # Free Software Foundation; either version 2, or (at your option) any
 # later version.
 # 
@@ -38,50 +38,50 @@ function [xb, yb] = bar (x, y)
 # are equivalent.
 #
 # See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 #           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
   if (nargin == 1)
     if (is_vector (x))
       len = 3 * length (x) + 1;
-      xb = yb = zeros (len, 1);
-      xb(1) = 0.5;
-      yb(1) = 0;
+      tmp_xb = tmp_yb = zeros (len, 1);
+      tmp_xb(1) = 0.5;
+      tmp_yb(1) = 0;
       k = 1;
       for i = 2:3:len
-        xb(i) = k-0.5;
-        xb(i+1) = k+0.5;
-        xb(i+2) = k+0.5;
-        yb(i) = x(k);
-        yb(i+1) = x(k);
-        yb(i+2) = 0.0;
+        tmp_xb(i) = k-0.5;
+        tmp_xb(i+1) = k+0.5;
+        tmp_xb(i+2) = k+0.5;
+        tmp_yb(i) = x(k);
+        tmp_yb(i+1) = x(k);
+        tmp_yb(i+2) = 0.0;
         k++;
       endfor
     else
       error ("bar: argument must be a vector");
     endif
   elseif (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       if (xlen == ylen)
         len = 3 * xlen + 1;
-        xb = yb = zeros (len, 1);
+        tmp_xb = tmp_yb = zeros (len, 1);
         delta = (x(2) - x(1)) / 2.0;
-        xb(1) = x(1) - delta;
-        yb(1) = 0.0;
+        tmp_xb(1) = x(1) - delta;
+        tmp_yb(1) = 0.0;
 	k = 1;
         for i = 2:3:len
-          xb(i) = xb(i-1);
-          xb(i+1) = xb(i) + 2.0 * delta;
-          xb(i+2) = xb(i+1);
-	  yb(i) = y(k);
-	  yb(i+1) = y(k);
-	  yb(i+2) = 0.0;
+          tmp_xb(i) = tmp_xb(i-1);
+          tmp_xb(i+1) = tmp_xb(i) + 2.0 * delta;
+          tmp_xb(i+2) = tmp_xb(i+1);
+	  tmp_yb(i) = y(k);
+	  tmp_yb(i+1) = y(k);
+	  tmp_yb(i+2) = 0.0;
           if (k < xlen)
             delta = (x(k+1) - x(k)) / 2.0;
             if (x(k+1) < x(k))
               error ("bar: x vector values must be in ascending order");
             endif
           endif
           k++;
 	endfor
@@ -90,13 +90,16 @@ function [xb, yb] = bar (x, y)
       endif
     else
       error ("bar: arguments must be vectors");
     endif
   else
     error ("usage: [xb, yb] = bar (x, y)");
   endif
 
-  if (nargout == 1)
-    plot (xb, yb);
+  if (nargout == 0)
+    plot (tmp_xb, tmp_yb);
+  else
+    xb = tmp_xb;
+    yb = tmp_yb;
   endif
 
 endfunction
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -82,26 +82,16 @@ function [nn, xx] = hist (y, x)
 
   freq = zeros (1, n);
   freq (1) = sum (y < cutoff (1));
   for i = 2:n-1
     freq (i) = sum (y >= cutoff (i-1) & y < cutoff (i));
   endfor
   freq (n) = sum (y >= cutoff (n-1));
 
-# With Octave 1.0, nargout is never zero, so we have to do this: 
-
-  nn = freq;
-  xx = x;
-  if (nargout != 2)
-    bar (xx, nn);
+  if (nargout == 2)
+    nn = freq;
+    xx = x;
+  else
+    bar (x, freq);
   endif
 
-# Once 1.1 is released, we can do this instead:
-#
-#  if (nargout == 2)
-#    nn = freq;
-#    xx = x;
-#  else
-#    bar (x, freq);
-#  endif
-
 endfunction
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -1,9 +1,9 @@
-# Copyright (C) 1993 John W. Eaton
+# Copyright (C) 1993, 1994 John W. Eaton
 # 
 # This file is part of Octave.
 # 
 # Octave is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by the
 # Free Software Foundation; either version 2, or (at your option) any
 # later version.
 # 
@@ -39,58 +39,61 @@ function [xs, ys] = stairs (x, y)
 #
 # See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 #           bar, gplot, gsplot, replot, xlabel, ylabel, title 
 
 
   if (nargin == 1)
     if (is_vector (x))
       len = 2 * length (x);
-      xs = ys = zeros (len, 1);
+      tmp_xs = tmp_ys = zeros (len, 1);
       k = 0;
       for i = 1:2:len
-        xs(i) = k++;
-        ys(i) = x(k);
-        ys(i+1) = x(k);
-        xs(i+1) = k;
+        tmp_xs(i) = k++;
+        tmp_ys(i) = x(k);
+        tmp_ys(i+1) = x(k);
+        tmp_xs(i+1) = k;
       endfor
     else
       error ("stairs: argument must be a vector");
     endif
   elseif (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       if (xlen == ylen)
         len = 2 * xlen;
-        xs = ys = zeros (len, 1);
+        tmp_xs = tmp_ys = zeros (len, 1);
 	k = 1;
         len_m2 = len - 2;
 	for i = 1:2:len_m2
-	  xs(i) = x(k);
-	  ys(i) = y(k);
-	  ys(i+1) = y(k);
+	  tmp_xs(i) = x(k);
+	  tmp_ys(i) = y(k);
+	  tmp_ys(i+1) = y(k);
           k++;
-	  xs(i+1) = x(k);
+	  tmp_xs(i+1) = x(k);
           if (x(k) < x(k-1))
             error ("stairs: x vector values must be in ascending order");
           endif
 	endfor
-        xs(len-1) = x(xlen);
+        tmp_xs(len-1) = x(xlen);
         delta = x(xlen) - x(xlen-1);
-        xs(len) = x(xlen) + delta;
-        ys(len-1) = y(ylen);
-        ys(len) = y(ylen);
+        tmp_xs(len) = x(xlen) + delta;
+        tmp_ys(len-1) = y(ylen);
+        tmp_ys(len) = y(ylen);
       else
         error ("stairs: arguments must be the same length");
       endif
     else
       error ("stairs: arguments must be vectors");
     endif
   else
     error ("usage: [xs, ys] = stairs (x, y)");
   endif
 
-  if (nargout == 1)
-    plot (xs, ys);
+  if (nargout == 0)
+    plot (tmp_xs, tmp_ys);
+  else
+    xs = tmp_xs;
+    ys = tmp_ys;
   endif
 
 endfunction
