# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480352608 28800
#      Mon Nov 28 09:03:28 2016 -0800
# Node ID 296d9b0eec8d972dbb02dcb83c03a6dd01a2910a
# Parent  b824691fa4016bb3a13751d13001445240739399
Code cleanup for cset 96228c17a66a.

* graphics.cc: Use C++11 for : map structure to simplify foor loop.
Use single quotes in BIST test strings to avoid having to escape
double quotes.  Add semicolons to end of statements in BIST tests.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1584,20 +1584,18 @@ handle_property::do_set (const octave_va
 
   // Check the object type if necessary
   bool type_ok = true;
   if (gh.ok () && ! type_constraints.empty ())
     {
       type_ok = false;
       graphics_object obj = gh_manager::get_object (gh);
 
-      for (std::set<std::string>::const_iterator
-           p = type_constraints.begin ();
-           p != type_constraints.end (); p++)
-        if (obj.isa (*p))
+      for (const auto& type : type_constraints)
+        if (obj.isa (type))
           {
             type_ok = true;
             break;
           }
     }
 
   if (! octave::math::isnan (gh.value ()) && ! (gh.ok () && type_ok))
     {
@@ -1625,19 +1623,19 @@ handle_property::do_set (const octave_va
 %! unwind_protect
 %!   hax = axes ("parent", hf);
 %!   hpa = patch ("parent", hax);
 %!   try 
 %!     set (hax, "uicontextmenu", hpa);
 %!   catch
 %!     err = lasterr ();
 %!   end_try_catch
-%!   assert (err, "set: invalid graphics object type for property \"uicontextmenu\"");
+%!   assert (err, 'set: invalid graphics object type for property "uicontextmenu"');
 %! unwind_protect_cleanup
-%!   delete (hf)
+%!   delete (hf);
 %! end_unwind_protect   
 */
 
 Matrix
 children_property::do_get_children (bool return_hidden) const
 {
   Matrix retval (children_list.size (), 1);
   octave_idx_type k = 0;
@@ -4620,31 +4618,31 @@ axes::properties::init (void)
   looseinset = tlooseinset;
 }
 
 /*
 ## Test validation of axes double properties range 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
-%!   hax =  axes ("parent", hf);
+%!   hax = axes ("parent", hf);
 %!   try 
 %!     set (hax, "linewidth", -1);
 %!   catch
 %!     err = lasterr ();
 %!   end_try_catch
-%!   assert (err, "set: \"linewidth\" must be greater than 0")
+%!   assert (err, 'set: "linewidth" must be greater than 0');
 %!   try 
 %!     set (hax, "minorgridalpha", 1.5);
 %!   catch
 %!     err = lasterr ();
 %!   end_try_catch
-%!   assert (err, "set: \"minorgridalpha\" must be less than or equal to 1")
+%!   assert (err, 'set: "minorgridalpha" must be less than or equal to 1');
 %! unwind_protect_cleanup
-%!   delete (hf)
+%!   delete (hf);
 %! end_unwind_protect   
 */
 
 Matrix
 axes::properties::calc_tightbox (const Matrix& init_pos)
 {
   Matrix pos = init_pos;
   graphics_object go = gh_manager::get_object (get_parent ());
