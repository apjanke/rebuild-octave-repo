# HG changeset patch
# User jwe
# Date 1069182433 0
#      Tue Nov 18 19:07:13 2003 +0000
# Node ID 0e28461651f2d3c8dc25ca80e4eabbcfd9f03714
# Parent  cae0b7c46842dc48e150f68743b50d2a21281b52
[project @ 2003-11-18 19:07:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2003-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pr-output.cc (octave_print_internal): Don't indent rows for
+	plus_format.  Use pr_plus_format for Range type with plus_format.
+	(plus_format_chars): New static variable.
+	(set_format_style): Allow optional arg for plus format to set it.
+	(pr_plus_format): Use it.
+
 	* ov-bool.h (octave_bool::array_value,
 	octave_bool::complex_array_value): New functions.
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op):
 	Ensure correct number of indices for Array indexing code.
 
 2003-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -77,16 +77,19 @@ static bool Vprint_empty_dimensions;
 static bool Vsplit_long_rows;
 
 // TRUE means don't do any fancy formatting.
 static bool free_format = false;
 
 // TRUE means print plus sign for nonzero, blank for zero.
 static bool plus_format = false;
 
+// First char for > 0, second for < 0, third for == 0.
+static std::string plus_format_chars = "+  ";
+
 // TRUE means always print like dollars and cents.
 static bool bank_format = false;
 
 // TRUE means print data in hexadecimal format.
 static int hex_format = 0;
 
 // TRUE means print data in binary-bit-pattern format.
 static int bit_format = 0;
@@ -1336,22 +1339,22 @@ pr_col_num_header (std::ostream& os, int
       if (! compact_format)
 	os << "\n";
     }
 }
 
 static inline void
 pr_plus_format (std::ostream& os, double d)
 {
-  if (d == 0.0)
-    os << " ";
+  if (d > 0.0)
+    os << plus_format_chars[0];
   else if (d < 0.0)
-    os << "-";
+    os << plus_format_chars[1];
   else
-    os << "+";
+    os << plus_format_chars[2];
 }
 
 void
 octave_print_internal (std::ostream& os, double d, bool pr_as_read_syntax)
 {
   if (plus_format)
     {
       pr_plus_format (os, d);
@@ -1378,19 +1381,16 @@ octave_print_internal (std::ostream& os,
   else if (plus_format && ! pr_as_read_syntax)
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      OCTAVE_QUIT;
 
-	      if (j == 0)
-		os << "  ";
-
 	      pr_plus_format (os, m(i,j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
@@ -1639,19 +1639,16 @@ octave_print_internal (std::ostream& os,
   else if (plus_format && ! pr_as_read_syntax)
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      OCTAVE_QUIT;
 
-	      if (j == 0)
-		os << "  ";
-
 	      pr_plus_format (os, cm(i,j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
@@ -1789,26 +1786,23 @@ octave_print_internal (std::ostream& os,
 {
   double base = r.base ();
   double increment = r.inc ();
   double limit = r.limit ();
   int num_elem = r.nelem ();
 
   if (plus_format && ! pr_as_read_syntax)
     {
-      os << "  ";
       for (int i = 0; i < num_elem; i++)
 	{
 	  OCTAVE_QUIT;
 
 	  double val = base + i * increment;
-	  if (val == 0.0)
-	    os << " ";
-	  else
-	    os << "+";
+
+	  pr_plus_format (os, val);
 	}
     }
   else
     {
       int fw;
       double scale = 1.0;
       set_format (r, fw, scale);
 
@@ -2205,16 +2199,31 @@ set_format_style (int argc, const string
 	}
       else if (arg == "native-bit")
 	{
 	  init_format_state ();
 	  bit_format = 2;
 	}
       else if (arg == "+" || arg == "plus")
 	{
+	  if (--argc > 0)
+	    {
+	      arg = argv[idx++];
+
+	      if (arg.length () == 3)
+		plus_format_chars = arg;
+	      else
+		{
+		  error ("format: invalid option for plus format");
+		  return;
+		}
+	    }
+	  else
+	    plus_format_chars = "+  ";
+
 	  init_format_state ();
 	  plus_format = true;
 	}
       else if (arg == "bank")
 	{
 	  init_format_state ();
 	  bank_format = true;
 	}
@@ -2331,20 +2340,37 @@ matrices on the decimal point.  This als
 formatted like this @samp{(0.604194, 0.607088)} instead of like this\n\
 @samp{0.60419 + 0.60709i}.\n\
 \n\
 @item bank\n\
 Print in a fixed format with two places to the right of the decimal\n\
 point.\n\
 \n\
 @item +\n\
+@itemx + @var{chars}\n\
+@itemx plus\n\
+@itemx plus @var{chars}\n\
 Print a @samp{+} symbol for nonzero matrix elements and a space for zero\n\
 matrix elements.  This format can be very useful for examining the\n\
 structure of a large matrix.\n\
 \n\
+The optional argument @var{chars} specifies a list of 3 characters to use\n\
+for printing values greater than zero, less than zero and equal to zero.\n\
+For example, with the @samp{+ \"+-.\"} format, @code{[1, 0, -1; -1, 0, 1]}\n\
+is displayed as\n\
+\n\
+@example\n\
+@group\n\
+ans =\n\
+\n\
++.-\n\
+-.+\n\
+@end group\n\
+@end example\n\
+\n\
 @item hex\n\
 Print the hexadecimal representation numbers as they are stored in\n\
 memory.  For example, on a workstation which stores 8 byte real values\n\
 in IEEE format with the least significant byte first, the value of\n\
 @code{pi} when printed in @code{hex} format is @code{400921fb54442d18}.\n\
 This format only works for numeric values.\n\
 \n\
 @item bit\n\
