# HG changeset patch
# User jwe
# Date 790204271 0
#      Sun Jan 15 21:11:11 1995 +0000
# Node ID 59f5eb2d5eb307cc08bb2fc5184d5003ff691002
# Parent  cfa5473c5f96a483d08c9cc1fdba84a5393118d3
[project @ 1995-01-15 21:11:11 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -587,41 +587,61 @@ DEFUN ("prod", Fprod, Sprod, 1, 1,
 	}
     }
   else
     print_usage ("prod");
 
   return retval;
 }
 
-DEFUN ("size", Fsize, Ssize, 1, 1,
-  "[m, n] = size (x): return rows and columns of X")
+DEFUN ("size", Fsize, Ssize, 2, 1,
+[m, n] = size (x): return rows and columns of X\n\
+\n\
+d = size (x): return number of rows and columns of x as a row vector\n\
+\n\
+m = size (x, 1): return number of rows in x\n\
+m = size (x, 2): return number of columns in x")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_defined ())
+  if (nargin == 1 && nargout < 3)
     {
       int nr = args(0).rows ();
       int nc = args(0).columns ();
+
       if (nargout == 0 || nargout == 1)
 	{
 	  Matrix m (1, 2);
 	  m.elem (0, 0) = nr;
 	  m.elem (0, 1) = nc;
 	  retval = m;
 	}
       else if (nargout == 2)
 	{
 	  retval(1) = (double) nc;
 	  retval(0) = (double) nr;
 	}
+    }
+  else if (nargin == 2 && nargout < 2)
+    {
+      int nd = NINT (args(1).double_value ());
+
+      if (error_state)
+	error ("size: expecting scalar as second argument");
       else
-	print_usage ("size");
+	{
+	  if (nd == 1)
+	    retval(0) = (double) (args(0).rows ());
+	  else if (nd == 2)
+	    retval(0) = (double) (args(0).columns ());
+	  else
+	    error ("size: invalid second argument -- expecting 1 or 2");
+	}
     }
   else
     print_usage ("size");
 
   return retval;
 }
 
 DEFUN ("sum", Fsum, Ssum, 1, 1,
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1521,41 +1521,42 @@ eat_continuation (void)
 }
 
 static int
 handle_string (char delim, int text_style)
 {
   ostrstream buf;
 
   int c;
-  int prev = 0;
+  int escape_pending = 0;
 
   while ((c = yyinput ()) != EOF)
     {
       current_input_column++;
 
       if (c == '\\')
 	{
 	  if (! have_continuation ())
 	    buf << (char) c;
-	  goto next;
+
+	  escape_pending = ! escape_pending;
+	  continue;
 	}
       else if (c == '.')
 	{
 	  if (! have_ellipsis_continuation ())
 	    buf << (char) c;
-	  goto next;
 	}
       else if (c == '\n')
 	{
 	  break;
 	}
       else if (c == delim)
 	{
-	  if (prev == '\\')
+	  if (escape_pending)
 	    buf << (char) c;
 	  else
 	    {
 	      c = yyinput ();
 	      if (c == delim)
 		buf << (char) c;
 	      else
 		{
@@ -1592,18 +1593,17 @@ handle_string (char delim, int text_styl
 		}
 	    }
 	}
       else
 	{
 	  buf << (char) c;
 	}
 
-    next:
-      prev = c;
+      escape_pending = 0;
     }
 
   return LEXICAL_ERROR;
 }
 
 static int
 handle_close_brace (int spc_gobbled)
 {
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -2651,18 +2651,17 @@ tree_constant
 tree_function::eval (int print)
 {
   tree_constant retval;
 
   if (error_state || ! cmd_list)
     return retval;
 
   Octave_object tmp_args;
-  tmp_args.resize (1);
-  Octave_object tmp = eval (print, 1, tmp_args);
+  Octave_object tmp = eval (print, 0, tmp_args);
 
   if (! error_state && tmp.length () > 0)
     retval = tmp(0);
 
   return retval;
 }
 
 // For unwind protect.
