# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482968014 28800
#      Wed Dec 28 15:33:34 2016 -0800
# Node ID 750c8b4b71641e3a14b10241feaeb2a83490d2ad
# Parent  d152c5e7df5a005d9475726aa69ffbdeeb4497bc
Switch svd_driver to gesdd for performance (bug #49940).

* svd.cc (Vsvd_driver): Change static variable initialization to "gesdd".
* svd.cc (Fsvd): Add note to docstring about choice of algorithms and point to
svd_driver for more documentation.
* svd.cc (Fsvd_driver): Add discussion to docstring about choice of algorithms.
Change BIST test so that the original svd_driver is always restored even if the
test fails.

diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
-static std::string Vsvd_driver = "gesvd";
+static std::string Vsvd_driver = "gesdd";
 
 template <typename T>
 static typename octave::math::svd<T>::Type
 svd_type (int nargin, int nargout, const octave_value_list & args, const T & A)
 {
   if (nargout == 0 || nargout == 1)
     return octave::math::svd<T>::Type::sigma_only;
   else if (nargin == 1)
@@ -149,16 +149,23 @@ v =
 When given a second argument that is not 0, @code{svd} returns an economy-sized
 decomposition, eliminating the unnecessary rows or columns of @var{U} or
 @var{V}.
 
 If the second argument is exactly 0, then the choice of decomposition is based
 on the matrix @var{A}.  If @var{A} has more rows than columns then an
 economy-sized decomposition is returned, otherwise a regular decomposition
 is calculated.
+
+Algorithm Notes: When calculating the full decomposition (left and right
+singular matrices in addition to singular values) there is a choice of two
+routines in @sc{lapack}.  The default routine used by Octave is @code{gesdd}
+which is 5X faster than the alternative @code{gesvd}, but may use more memory
+and may be less accurate for some matrices.  See the documentation for
+@code{svd_driver} for more information.
 @seealso{svd_driver, svds, eig, lu, chol, hess, qr, qz}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     print_usage ();
 
@@ -358,35 +365,62 @@ assert (a, u * s * v', 128 * eps);
 
 DEFUN (svd_driver, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} svd_driver ()
 @deftypefnx {} {@var{old_val} =} svd_driver (@var{new_val})
 @deftypefnx {} {} svd_driver (@var{new_val}, "local")
 Query or set the underlying @sc{lapack} driver used by @code{svd}.
 
-Currently recognized values are @qcode{"gesvd"} and @qcode{"gesdd"}.
-The default is @qcode{"gesvd"}.
+Currently recognized values are @qcode{"gesdd"} and @qcode{"gesvd"}.
+The default is @qcode{"gesdd"}.
 
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
+
+Algorithm Notes: The @sc{lapack} library provides two routines for calculating
+the full singular value decomposition (left and right singular matrices as
+well as singular values).  When calculating just the singular values the
+following discussion is not relevant.
+
+The default routine use by Octave is the newer @code{gesdd} which is based on a
+Divide-and-Conquer algorithm that is 5X faster than the alternative
+@code{gesvd}, which is based on QR factorization.  However, the new algorithm
+can use significantly more memory.  For an MxN input matrix the memory usage is
+of order O(min(M,N) ^ 2), whereas the alternative is of order O(max(M,N)).  In
+general, modern computers have abundant memory so Octave has chosen to
+prioritize speed.
+
+In addition, there have been instances in the past where some input matrices
+were not accurately decomposed by @code{gesdd}.  This appears to have been
+resolved with modern versions of @sc{lapack}.  However, if certainty is
+required the accuracy of the decomposition can always be tested after the fact
+with
+
+@example
+@group
+[@var{u}, @var{s}, @var{v}] = svd (@var{x});
+norm (@var{x} - @var{u}*@var{s}*@var{v'}, "fro")
+@end group
+@end example
+
 @seealso{svd}
 @end deftypefn */)
 {
   static const char *driver_names[] = { "gesvd", "gesdd", 0 };
 
   return SET_INTERNAL_VARIABLE_CHOICES (svd_driver, driver_names);
 }
 
 /*
 %!test
 %! A = [1+1i, 1-1i, 0; 0, 2, 0; 1i, 1i, 1+2i];
 %! old_driver = svd_driver ("gesvd");
 %! [U1, S1, V1] = svd (A);
 %! svd_driver ("gesdd");
 %! [U2, S2, V2] = svd (A);
+%! svd_driver (old_driver);
 %! assert (U1, U2, 5*eps);
 %! assert (S1, S2, 5*eps);
 %! assert (V1, V2, 5*eps);
-%! svd_driver (old_driver);
 */
 
