# HG changeset patch
# User Carlo de Falco <kingcrimson@tiscali.it>
# Date 1314602143 -7200
#      Mon Aug 29 09:15:43 2011 +0200
# Branch stable
# Node ID 58d704d3283c9c7951cc9f2ac1f5b93963f14b7f
# Parent  1653d3a86fca2cecb0ad9690d0a5ed7a83b60454
Fix ambigous call to int pow (int, unsigned int&)

* __magick_read__.cc: Use bitshift rather than pow
to compute integer powers of two.

diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -658,18 +658,17 @@ encode_uint_image (std::vector<Magick::I
 
   bool is_color = ((dsizes.length () > 2) && (dsizes(2) > 2));
   bool has_alpha = (dsizes.length () > 2 && (dsizes(2) == 2 || dsizes(2) == 4));
 
   Array<octave_idx_type> idx (dim_vector (dsizes.length (), 1));
   octave_idx_type rows = m.rows ();
   octave_idx_type columns = m.columns ();
 
-  // FIXME -- maybe simply using bit shifting would be better?
-  unsigned int div_factor = pow (2.0, static_cast<int> (bitdepth)) - 1;
+  unsigned int div_factor = (1 << bitdepth) - 1;
 
   for (unsigned int ii = 0; ii < nframes; ii++)
     {
       Magick::Image im (Magick::Geometry (columns, rows), "black");
 
       im.depth (bitdepth);
 
       if (has_map)
@@ -748,17 +747,17 @@ encode_uint_image (std::vector<Magick::I
 
                   c.shade (static_cast<double>(m(idx)) / div_factor);
 
                   im.pixelColor (y, x, c);
                 }
             }
 
           im.quantizeColorSpace (Magick::GRAYColorspace);
-          im.quantizeColors (pow (2, bitdepth));
+          im.quantizeColors (1 << bitdepth);
           im.quantize ();
         }
 
       imvec.push_back (im);
     }
 }
 
 static void
