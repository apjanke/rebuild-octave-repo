# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1224727420 14400
#      Wed Oct 22 22:03:40 2008 -0400
# Node ID f2f1d07a7f0fae8cd75251255b11867bd50a4130
# Parent  81b124f463f93f0b7902b2dada3a7686d3b6d818
fltk_backend.cc (class figure_manager): implement in way consistent with other singleton classes in Octave

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,31 @@
 2008-10-22  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/fltk_backend.cc (figure_manager::do_close_all):
+	Rename from close_all.  Now private.
+	(figure_manager::do_new_window): Rename from new_window.
+	Now private.
+	(figure_manager::do_delete_window): Rename from delete_window.
+	Now private.
+	(figure_manager::do_mark_modified): Rename from mark_modified.
+	Now private.
+	(figure_manager::do_get_size): Rename from get_size.  Now private.
+	(figure_manager::close_all, figure_manager::do_new_window, 
+	figure_manager::do_delete_window,
+	figure_manager::do_mark_modified, figure_manager::do_get_size):
+	New static functions.
+	(figure_manager::instance_ok): New function.
+	(figure_manager::Instance): Delete.  Eliminate all uses in favor
+	of static methods that call instance_ok and forward to private
+	member functions.
+	(figure_manager::instance): New static data member.
+	(figure_manager::hnd2idx, figure_manager::figprops2idx,
+	figure_manager::figprops2idx, figure_manager::str2idx): Now static.
+
 	* graphics.cc (figure::properties::remove_child): New function.
 	* graphics.h.in: Provide decl.
 
 	* gl-render.cc (opengl_renderer::draw): Get all children.
 
 	* DLD-FUNCTIONS/fltk_backend.cc (__fltk_redraw__):
 	Check for "root" object, not "root_figure".
 
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -524,118 +524,164 @@ private:
     return retval;
   }
 };
 
 class figure_manager
 {
 public:
 
-  static figure_manager& Instance (void)
+  static bool instance_ok (void)
   {
-    static figure_manager fm;
-    return fm;
+    bool retval = true;
+
+    if (! instance)
+      instance = new figure_manager ();
+
+    if (! instance)
+      {
+	::error ("unable to create figure_manager object!");
+
+	retval = false;
+      }
+
+    return retval;
   }
 
   ~figure_manager (void)
   {
     close_all ();
   }
 
-  void close_all (void)
+  static void close_all (void)
   {
-    wm_iterator win;
-    for (win = windows.begin (); win != windows.end (); win++)
-      delete (*win).second;
-    windows.clear ();
+    if (instance_ok ())
+      instance->do_close_all ();
   }
 
-  void new_window (figure::properties& fp)
+  static void new_window (figure::properties& fp)
   {
-    int x, y, w, h;
-
-    int idx = figprops2idx (fp);
-    if (idx >= 0 && windows.find (idx) == windows.end ())
-      {
-	default_size(x,y,w,h);
-	idx2figprops (curr_index , fp);
-	windows[curr_index++] = new plot_window (x, y, w, h, fp);
-      }
+    if (instance_ok ())
+      instance->do_new_window (fp);
   }
 
-  void delete_window (int idx)
+  static void delete_window (int idx)
   {
-    wm_iterator win;
-    if ((win = windows.find (idx)) != windows.end ())
-      {
-	delete (*win).second;
-	windows.erase (win);
-      }
+    if (instance_ok ())
+      instance->do_delete_window (idx);
   }
 
-  void delete_window (std::string idx_str)
+  static void delete_window (std::string idx_str)
   {
     delete_window (str2idx (idx_str));
   }
 
-  void mark_modified (int idx)
+  static void mark_modified (int idx)
   {
-    wm_iterator win;
-    if ((win=windows.find (idx)) != windows.end ())
-      {
-	(*win).second->mark_modified ();
-      }
+    if (instance_ok ())
+      instance->do_mark_modified (idx);
   }
 
-  void mark_modified (const graphics_handle& gh)
+  static void mark_modified (const graphics_handle& gh)
   {
     mark_modified (hnd2idx (gh));
   }
 
-  Matrix get_size (int idx)
+  static Matrix get_size (int idx)
   {
-    Matrix sz (1, 2, 0.0);
-
-    wm_iterator win;
-    if ((win = windows.find (idx)) != windows.end ())
-      {
-	sz(0) = (*win).second->w ();
-	sz(1) = (*win).second->h ();
-      }
-
-    return sz;
+    return instance_ok () ? instance->do_get_size (idx) : Matrix ();
   }
 
-  Matrix get_size (const graphics_handle& gh)
+  static Matrix get_size (const graphics_handle& gh)
   {
     return get_size (hnd2idx (gh));
   }
 
 private:
+
+  static figure_manager *instance;
+
   figure_manager (void) { }
-  figure_manager (const figure_manager&) { }
-  figure_manager& operator = (const figure_manager&) { return *this; }
+
+  // No copying!
+  figure_manager (const figure_manager&);
+  figure_manager& operator = (const figure_manager&);
+
   // singelton -- hide all of the above
 
   static int curr_index;
   typedef std::map<int, plot_window*> window_map;
   typedef window_map::iterator wm_iterator;;
   window_map windows;
 
   static std::string fltk_idx_header;
 
+  void do_close_all (void)
+  {
+    wm_iterator win;
+    for (win = windows.begin (); win != windows.end (); win++)
+      delete win->second;
+    windows.clear ();
+  }
+
+  void do_new_window (figure::properties& fp)
+  {
+    int x, y, w, h;
+
+    int idx = figprops2idx (fp);
+    if (idx >= 0 && windows.find (idx) == windows.end ())
+      {
+	default_size (x, y, w, h);
+	idx2figprops (curr_index , fp);
+	windows[curr_index++] = new plot_window (x, y, w, h, fp);
+      }
+  }
+
+  void do_delete_window (int idx)
+  {
+    wm_iterator win;
+    if ((win = windows.find (idx)) != windows.end ())
+      {
+	delete win->second;
+	windows.erase (win);
+      }
+  }
+
+  void do_mark_modified (int idx)
+  {
+    wm_iterator win;
+    if ((win = windows.find (idx)) != windows.end ())
+      {
+	win->second->mark_modified ();
+      }
+  }
+
+  Matrix do_get_size (int idx)
+  {
+    Matrix sz (1, 2, 0.0);
+
+    wm_iterator win;
+    if ((win = windows.find (idx)) != windows.end ())
+      {
+	sz(0) = win->second->w ();
+	sz(1) = win->second->h ();
+      }
+
+    return sz;
+  }
+
   void default_size (int& x, int& y, int& w, int& h)
   {
     x = 10;
     y = 10;
     w = 400;
     h = 300;
   }
 
-  int str2idx (const caseless_str clstr)
+  static int str2idx (const caseless_str clstr)
   {
     int ind;
     if (clstr.find (fltk_idx_header,0) == 0)
       {
 	std::istringstream istr (clstr.substr (fltk_idx_header.size ()));
 	if (istr >> ind)
 	  return ind;
       }
@@ -645,49 +691,51 @@ private:
 
   void idx2figprops (int idx, figure::properties& fp)
   {
     std::ostringstream ind_str;
     ind_str << fltk_idx_header << idx;
     fp.set___plot_stream__ (ind_str.str ());
   }
 
-  int figprops2idx (const figure::properties& fp)
+  static int figprops2idx (const figure::properties& fp)
   {
     if (fp.get___backend__ () == FLTK_BACKEND_NAME)
       {
 	octave_value ps = fp.get___plot_stream__ ();
 	if (ps.is_string ())
 	  return str2idx (ps.string_value ());
 	else
 	  return 0;
       }
     error ("fltk_backend:: figure is not fltk");
     return -1;
   }
 
-  int hnd2idx (const graphics_handle& fh)
-  {
-    return hnd2idx (fh.value ());
-  }
-
-  int hnd2idx (const double h)
+  static int hnd2idx (const double h)
   {
     graphics_object fobj = gh_manager::get_object (h);
     if (fobj &&  fobj.isa ("figure"))
       {
 	figure::properties& fp =
 	  dynamic_cast<figure::properties&> (fobj.get_properties ());
 	return figprops2idx (fp);
       }
     error ("fltk_backend:: not a figure");
     return -1;
   }
+
+  static int hnd2idx (const graphics_handle& fh)
+  {
+    return hnd2idx (fh.value ());
+  }
 };
 
+figure_manager *figure_manager::instance = 0;
+
 std::string figure_manager::fltk_idx_header="fltk index=";
 int figure_manager::curr_index = 1;
 
 class fltk_backend : public base_graphics_backend
 {
 public:
   fltk_backend (void)
     : base_graphics_backend (FLTK_BACKEND_NAME) { }
@@ -696,17 +744,17 @@ public:
 
   bool is_valid (void) const { return true; }
 
   void object_destroyed (const graphics_object& go)
   {
     if (go.isa ("figure"))
       {
 	octave_value ov = go.get (caseless_str ("__plot_stream__"));
-	figure_manager::Instance ().delete_window (ov.string_value ());
+	figure_manager::delete_window (ov.string_value ());
       }
   }
 
   void property_changed (const graphics_object& go, int id)
   {
     if (go.isa ("figure"))
       {
 	octave_value ov = go.get (caseless_str ("__plot_stream__"));
@@ -720,27 +768,27 @@ public:
 		break;
 	      }
 	  }
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
-    figure_manager::Instance ().mark_modified (go.get_handle ());
+    figure_manager::mark_modified (go.get_handle ());
   }
 
   void print_figure (const graphics_object& /*go*/,
 		     const std::string& /*term*/,
 		     const std::string& /*file*/, bool /*mono*/,
 		     const std::string& /*debug_file*/) const { }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
-    return figure_manager::Instance ().get_size (fh);
+    return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
   {
     // FLTK doesn't give this info
     return 72.0;
   }
 
@@ -772,17 +820,17 @@ static int
 	  for (octave_idx_type n = 0; n < children.numel (); n++)
 	    {
 	      graphics_object fobj = gh_manager::get_object (children (n));
 	      if (fobj && fobj.isa ("figure"))
 		{
 		  figure::properties& fp =
 		      dynamic_cast<figure::properties&> (fobj.get_properties ());
 		  if (fp.get___backend__ () == FLTK_BACKEND_NAME)
-		    figure_manager::Instance ().new_window (fp);
+		    figure_manager::new_window (fp);
 		}
 	    }
 	}
 
       Fl::wait (fltk_maxtime);
     }
 
   return 0;
@@ -804,17 +852,17 @@ DEFUN_DLD (__init_fltk__, , , "")
 }
 
 
 // call this to delete the fltk backend
 DEFUN_DLD (__remove_fltk__, , , "")
 {
   if (backend_registered)
     {
-      figure_manager::Instance ().close_all ();
+      figure_manager::close_all ();
       graphics_backend::unregister_backend (FLTK_BACKEND_NAME);
       backend_registered = false;
 
       command_editor::remove_event_hook (__fltk_redraw__);
 
       // FIXME ???
       // give FLTK 10 seconds to wrap it up
       Fl::wait(10);
