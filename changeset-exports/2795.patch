# HG changeset patch
# User jwe
# Date 857701297 0
#      Fri Mar 07 02:21:37 1997 +0000
# Node ID 14d07e4a0265524188e2fc7f6a73a64a371f7591
# Parent  b836945228ccabe26cfd7053b1a9edcef327f7ce
[project @ 1997-03-07 02:18:49 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3755,17 +3755,17 @@ operator >> (istream& is, ComplexMatrix&
       Complex tmp;
       for (int i = 0; i < nr; i++)
 	for (int j = 0; j < nc; j++)
 	  {
 	    is >> tmp;
 	    if (is)
 	      a.elem (i, j) = tmp;
 	    else
-	      break;
+	      return;
 	  }
     }
 
   return is;
 }
 
 ComplexMatrix
 Givens (const Complex& x, const Complex& y)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+Thu Mar  6 20:20:01 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (operator >>): Return if an error occurs instead of
+	just breaking out of the innermost loop.
+	* CMatrix.cc (operator >>): Likewise.
+
 Sat Mar  1 15:23:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.5 released.
 
 Fri Feb 28 20:11:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CmplxQR.cc (ComplexQR::init): New function.
 	(ComplexQR::ComplexQR): Use it.  Use initializer list too.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2621,20 +2621,22 @@ operator >> (istream& is, Matrix& a)
       double tmp;
       for (int i = 0; i < nr; i++)
 	for (int j = 0; j < nc; j++)
 	  {
 	    is >> tmp;
 	    if (is)
 	      a.elem (i, j) = tmp;
 	    else
-	      break;
+	      goto done;
 	  }
     }
 
+ done:
+
   return is;
 }
 
 template <class T>
 static void
 read_int (istream& is, bool swap_bytes, T& val)
 {
   is.read ((char *) &val, sizeof (T));
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Thu Mar  6 12:36:30 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* statistics/corrcoef.m: Don't fail if single argument is a vector.
+
 Sat Mar  1 15:23:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.5 released.
 
 Wed Feb 26 01:48:28 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (maintainer-clean): Also remove configure.
 
diff --git a/scripts/statistics/corrcoef.m b/scripts/statistics/corrcoef.m
--- a/scripts/statistics/corrcoef.m
+++ b/scripts/statistics/corrcoef.m
@@ -12,36 +12,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: corrcoef (X [, Y])
+## usage: corrcoef (x, y)
 ##
-## If each row of X and Y is an observation and each column is a variable,
-## the (i,j)-th entry of corrcoef(X, Y) is the correlation between the
-## i-th variable in X and the j-th variable in Y.
-## corrcoef(X) is corrcoef(X, X).
+## The (i,j)-th entry of corrcoef (x, y) is the correlation between the
+## i-th variable in x and the j-th variable in y.
+## For matrices, each row is an observation and each column a variable;
+## vectors are always observations and may be row or column vectors.
+## corrcoef (x) is corrcoef (x, x).
 
 ## Author: Kurt Hornik <hornik@ci.tuwien.ac.at>
 ## Created: March 1993
 ## Adapted-By: jwe
 
-function retval = corrcoef (X, Y)
+function retval = corrcoef (x, y)
 
   if (nargin < 1 || nargin > 2)
-    usage ("corrcoef (X [, Y])");
+    usage ("corrcoef (x, y)");
   endif
 
   if (nargin == 2)
-    C = cov (X, Y);
-    S = std (X)' * std (Y);
-    retval = C ./ S;
+    c = cov (x, y);
+    s = std (x)' * std (y);
+    retval = c ./ s;
   elseif (nargin == 1)
-    C = cov (X);
-    s = diag (C);
-    retval = C ./ sqrt (s*s');
+    c = cov (x);
+    s = reshape (sqrt (diag (c)), 1, columns (c));
+    retval = c ./ sqrt (s * s');
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+Thu Mar  6 20:07:24 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (my_friendly_exit, octave_new_handler,
+	sigfpe_handler, sigpipe_handler): Don't all error() or warning().
+
+	* pager.cc (pager_death_handler): Don't try to clear pager, just
+	print message to cerr.
+	(do_sync): If the status of the pager is bad or it looks like it
+	is dead, restore the interrupt handler.
+
+	* load-save.cc (extract_keyword (istream&, char*, int&)):
+	Move declaration of buf inside loop, to avoid deleting its guts
+	and then trying to reuse it.
+	(extract_keyword (istream&, char*)): Likewise.
+
 Tue Mar  4 20:36:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-fcn.cc (tree_function::eval): Protect function from being
 	redefined while it is being evaluated.
 	(unprotect_function): New function, for use with unwind_protect stuff.
 	* pt-fcn.h (tree_function::symtab_entry): New data member.
 	(tree_function::init): Initialize it to 0.
 	(tree_function::stash_symtab_ptr): New function.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -248,25 +248,25 @@ skip_comments (istream& is)
 //
 // Input should look something like:
 //
 //  #[ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
 static char *
 extract_keyword (istream& is, char *keyword)
 {
-  ostrstream buf;
-
   char *retval = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '#')
 	{
+	  ostrstream buf;
+	
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
@@ -315,26 +315,26 @@ extract_keyword (istream& is, char *keyw
 //
 // Input should look something like:
 //
 //  [ \t]*keyword[ \t]*int-value.*\n
 
 static int
 extract_keyword (istream& is, char *keyword, int& value)
 {
-  ostrstream buf;
-
   int status = 0;
   value = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '#')
 	{
+	  ostrstream buf;
+
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
 	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
 	    buf << c;
@@ -905,80 +905,59 @@ read_binary_data (istream& is, int swap,
       delete [] name;
       name = 0;
       break;
     }
 
   return name;
 }
 
-// Get a complete line of input.
-
-static string
-get_complete_line (istream& is)
-{
-  string retval;
-
-  ostrstream buf;
-
-  char c;
-
-  while (is.get (c))
-    {
-      if (c == '\n')
-	break;
-
-      buf << c;
-    }
-
-  buf << ends;
-
-  char *tmp = buf.str ();
-
-  retval = tmp;
-
-  delete [] tmp;
-
-  return retval;
-}
-
 static void
 get_lines_and_columns (istream& is, const string& filename, int& nr, int& nc)
 {
   streampos pos = is.tellg ();
 
   int file_line_number = 0;
 
   nr = 0;
   nc = 0;
 
-  while (! (is.eof () || error_state))
+  while (is && ! error_state)
     {
-      string line = get_complete_line (is);
+      string buf;
+
+      char c;
+      while (is.get (c))
+	{
+	  if (c == '\n')
+	    break;
+
+	  buf += c;
+	}
 
       file_line_number++;
 
-      size_t beg = line.find_first_not_of (" \t");
-
-      if (beg != NPOS)
+      size_t beg = buf.find_first_not_of (" \t");
+
+      int tmp_nc = 0;
+
+      while (beg != NPOS)
 	{
-	  int tmp_nc = 0;
-
-	  while (beg != NPOS)
-	    {
-	      tmp_nc++;
-
-	      size_t end = line.find_first_of (" \t", beg);
-
-	      if (end != NPOS)
-		beg = line.find_first_not_of (" \t", end);
-	      else
-		break;
-	    }
-
+	  tmp_nc++;
+
+	  size_t end = buf.find_first_of (" \t", beg);
+
+	  if (end != NPOS)
+	    beg = buf.find_first_not_of (" \t", end);
+	  else
+	    break;
+	}
+
+      if (tmp_nc > 0)
+	{
 	  if (nc == 0)
 	    {
 	      nc = tmp_nc;
 	      nr++;
 	    }
 	  else if (nc == tmp_nc)
 	    nr++;
 	  else
@@ -1022,20 +1001,18 @@ read_mat_ascii_data (istream& is, const 
 
   if (valid_identifier (varname.c_str ()))
     {
       int nr = 0;
       int nc = 0;
 
       get_lines_and_columns (is, filename, nr, nc);
 
-      if (! error_state)
+      if (! error_state && nr > 0 && nc > 0)
 	{
-	  // NR and NC must be greater than zero if we end up here.
-
 	  Matrix tmp (nr, nc);
 
 	  is >> tmp;
 
 	  if (is)
 	    {
 	      tc = tmp;
 
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -100,31 +100,22 @@ clear_external_pager (void)
 
 static void
 pager_death_handler (pid_t pid, int status)
 {
   if (pid > 0)
     {
       if (WIFEXITED (status) || WIFSIGNALLED (status))
 	{
-	  if (external_pager)
-	    clear_external_pager ();
-
-	  // Don't call error() here because we don't want to set
-	  // the error state.
+	  // Avoid warning() or error(), since that will put us back in
+	  // the pager, which would be bad news.
 
-	  // XXX FIXME XXX -- something is wrong with the way that
-	  // we are cleaning up the pager in the event of a SIGCHLD.
-	  // If this message is printed with warning(), we eventually
-	  // crash.
-
-	  cout << "warning: connection to external pager (pid = "
-	       << pid << ") lost --" << endl
-	       << "warning: pending computations and output may be lost"
-	       << endl;
+	  cerr << "warning: connection to external pager (pid = "
+	       << pid << ") lost --\n"
+	       << "warning: attempting to finish pending computations...\n";
 	}
     }
 }
 
 static void
 do_sync (const char *msg, bool bypass_pager)
 {
   if (msg && *msg)
@@ -167,16 +158,28 @@ do_sync (const char *msg, bool bypass_pa
 		  // invoked since the last set of checks attempts
 		  // to flush output and then returns
 
 		  if (octave_pager_pid > 0
 		      && external_pager
 		      && external_pager->good ())
 		    external_pager->flush ();
 		}
+	      else
+		{
+		  // We had a pager, but it must have died.  Restore
+		  // the interrupt state so we can escape back to the
+		  // prompt if there are lots of computations pending.
+
+		  if (interrupt_handler_saved)
+		    {
+		      octave_set_interrupt_handler (saved_interrupt_handler);
+		      interrupt_handler_saved = false;
+		    }
+		}
 	    }
 	  else
 	    {
 	      cout << msg;
 	      cout.flush ();
 	    }
 	}
     }
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -109,38 +109,38 @@ my_friendly_exit (const char *sig_name, 
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
 #if defined (SIGABRT)
       octave_set_signal_handler (SIGABRT, SIG_DFL);
 #endif
 
-      error ("attempted clean up seems to have failed -- aborting...");
+      cerr << "error: attempted clean up apparently failed -- aborting...\n";
 
       abort ();
     }
   else
     {
       been_there_done_that = true;
 
-      error ("%s -- stopping myself...", sig_name);
+      cerr << "error: " << sig_name << " -- stopping myself...\n";
 
       save_user_variables ();
 
       clean_up_and_exit (sig_number);
     }
 }
 
 // I know, not really a signal handler.
 
 static void
 octave_new_handler (void)
 {
-  error ("memory exhausted -- trying to return to prompt");
+  cerr << "error: memory exhausted -- trying to return to prompt\n";
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
   else
     my_friendly_exit ("operator new", 1);
@@ -242,17 +242,17 @@ sigchld_handler (int /* sig */)
 #if defined (__alpha__)
 static RETSIGTYPE
 sigfpe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGFPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
-  error ("floating point exception -- trying to return to prompt");
+  cerr << "error: floating point exception -- trying to return to prompt\n";
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
 
   SIGHANDLER_RETURN (0);
@@ -284,17 +284,17 @@ sigint_handler (int sig)
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGPIPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
-    warning ("broken pipe");
+    cerr << "warning: broken pipe\n";
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
 
   SIGHANDLER_RETURN (0);
 }
