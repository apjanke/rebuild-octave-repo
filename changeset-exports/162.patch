# HG changeset patch
# User jwe
# Date 750972361 0
#      Mon Oct 18 19:26:01 1993 +0000
# Node ID d1c5e5edbf1e6630629831f74b3647124c1b7ac1
# Parent  21b5993707285a1fddad5fe462a776545119efb7
[project @ 1993-10-18 19:26:01 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -32,24 +32,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-balance.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_balance_2 (tree_constant *args, int nargin, int nargout)
+builtin_balance_2 (const tree_constant *args, int nargin, int nargout)
 {
   return balance (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-balance (tree_constant *args, int nargin, int nargout)
+balance (const tree_constant *args, int nargin, int nargout)
 {
   char *bal_job;
   int my_nargin;		// # args w/o optional string arg
   tree_constant *retval = NULL_TREE_CONST;
 
   // determine if balancing option is listed
   // set my_nargin to the number of matrix inputs
   if (args[nargin-1].const_type () == tree_constant_rep::string_constant ){
diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -29,24 +29,24 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "error.h"
 #include "utils.h"
 #include "f-colloc.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_colloc_2 (tree_constant *args, int nargin, int nargout)
+builtin_colloc_2 (const tree_constant *args, int nargin, int nargout)
 {
   return collocation_weights (args, nargin);
 }
 #endif
 
 tree_constant *
-collocation_weights (tree_constant *args, int nargin)
+collocation_weights (const tree_constant *args, int nargin)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (args[1].const_type () != tree_constant_rep::complex_scalar_constant
       && args[1].const_type () != tree_constant_rep::scalar_constant)
     {
       message ("colloc", "first argument must be a scalar");
       return retval;
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -34,17 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "utils.h"
 #include "f-dassl.h"
 
 // Global pointer for user defined function required by dassl.
 static tree *dassl_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_dassl_2 (tree_constant *args, int nargin, int nargout)
+builtin_dassl_2 (const tree_constant *args, int nargin, int nargout)
 {
   return dassl (args, nargin, nargout);
 }
 #endif
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
 {
@@ -99,17 +99,17 @@ dassl_user_function (const ColumnVector&
 	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
-dassl (tree_constant *args, int nargin, int nargout)
+dassl (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   dassl_fcn = is_valid_function (args[1], "dassl", 1);
   if (dassl_fcn == NULL_TREE
       || takes_correct_nargs (dassl_fcn, 4, "dassl", 1) != 1)
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -34,17 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-expm.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_matrix_exp_2 (tree_constant *args, int nargin, int nargout)
+builtin_matrix_exp_2 (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = new tree_constant [2];
   retval[0] = matrix_exp (args[1]);
   return retval;
 }
 #endif
 
 extern "C"
@@ -52,17 +52,17 @@ extern "C"
   double F77_FCN (dlange) (const char*, const int*, const int*,
 			   const double*, const int*, double*);
 
   double F77_FCN (zlange) (const char*, const int*, const int*,
 			   const Complex*, const int*, double*);
 }
 
 tree_constant
-matrix_exp (tree_constant& a)
+matrix_exp (const tree_constant& a)
 {
   tree_constant retval;
   tree_constant tmp = a.make_numeric ();
 
 // Constants for matrix exponential calculation.
 
   static double padec[] =
     {
diff --git a/src/fft.cc b/src/fft.cc
--- a/src/fft.cc
+++ b/src/fft.cc
@@ -30,26 +30,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-fft.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_fft_2 (tree_constant *args, int nargin, int nargout)
+builtin_fft_2 (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = new tree_constant [2];
   retval[0] = fft (args[1]);
   return retval;
 }
 #endif
 
 tree_constant
-fft (tree_constant& a)
+fft (const tree_constant& a)
 {
   tree_constant retval;
 
   tree_constant tmp = a.make_numeric ();;
     
   if (tmp.rows () == 0 || tmp.columns () == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -34,17 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "utils.h"
 #include "f-fsolve.h"
 
 // Global pointer for user defined function required by hybrd1.
 static tree *fsolve_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_fsolve (tree_constant *args, int nargin, int nargout)
+builtin_fsolve (const tree_constant *args, int nargin, int nargout)
 {
   return fsolve (args, nargin, nargout);
 }
 #endif
 
 int
 hybrd_info_to_fsolve_info (int info)
 {
@@ -66,17 +66,17 @@ hybrd_info_to_fsolve_info (int info)
     default:
       panic_impossible ();
       break;
     }
   return info;
 }
 
 ColumnVector
-fsolve_user_function (ColumnVector& x)
+fsolve_user_function (const ColumnVector& x)
 {
   ColumnVector retval;
 
   int n = x.capacity ();
 
 //  tree_constant name = tree_constant (fsolve_fcn->name ());
   tree_constant *args = new tree_constant [2];
 //  args[0] = name;
@@ -112,17 +112,17 @@ fsolve_user_function (ColumnVector& x)
 	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
-fsolve (tree_constant *args, int nargin, int nargout)
+fsolve (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   fsolve_fcn = is_valid_function (args[1], "fsolve", 1);
   if (fsolve_fcn == NULL_TREE
       || takes_correct_nargs (fsolve_fcn, 2, "fsolve", 1) != 1)
diff --git a/src/fsqp.cc b/src/fsqp.cc
--- a/src/fsqp.cc
+++ b/src/fsqp.cc
@@ -34,37 +34,37 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "f-fsqp.h"
 
 // Global pointers for user defined functions required by fsqp.
 static tree *fsqp_objective;
 static tree *fsqp_constraints;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_fsqp_2 (tree_constant *args, int nargin, int nargout)
+builtin_fsqp_2 (const tree_constant *args, int nargin, int nargout)
 {
   return fsqp (args, nargin, nargout);
 }
 #endif
 
 double
-fsqp_objective_function (ColumnVector& x)
+fsqp_objective_function (const ColumnVector& x)
 {
   return 0.0;
 }
 
 ColumnVector
-fsqp_constraint_function (ColumnVector& x)
+fsqp_constraint_function (const ColumnVector& x)
 {
   ColumnVector retval;
   return retval;
 }
 
 tree_constant *
-fsqp (tree_constant *args, int nargin, int nargout)
+fsqp (const tree_constant *args, int nargin, int nargout)
 {
 /*
 
 Handle all of the following:
 
   1. fsqp (x, phi)
   2. fsqp (x, phi, lb, ub)
   3. fsqp (x, phi, lb, ub, llb, c, lub)
diff --git a/src/givens.cc b/src/givens.cc
--- a/src/givens.cc
+++ b/src/givens.cc
@@ -51,24 +51,24 @@ int F77_FCN (dorgqr) (const int*, const 
   
 int F77_FCN (zunghr) (const int*, const int*, const int*, Complex*,
 		      const int*, Complex*, Complex*, const int*,
 		      int*, long, long);
 #endif
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_givens_2 (tree_constant *args, int nargin, int nargout)
+builtin_givens_2 (const tree_constant *args, int nargin, int nargout)
 {
   return givens (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-givens (tree_constant *args, int nargin, int nargout)
+givens (const tree_constant *args, int nargin, int nargout)
 {
 
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arga = args[1].make_numeric ();
   tree_constant argb = args[2].make_numeric ();
 
   if (! arga.is_scalar_type () && argb.is_scalar_type ())
diff --git a/src/hess.cc b/src/hess.cc
--- a/src/hess.cc
+++ b/src/hess.cc
@@ -30,24 +30,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "error.h"
 #include "gripes.h"
 #include "f-hess.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_hess_2 (tree_constant *args, int nargin, int nargout)
+builtin_hess_2 (const tree_constant *args, int nargin, int nargout)
 {
   return hess (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-hess (tree_constant *args, int nargin, int nargout)
+hess (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arg = args[1].make_numeric ();
 
   int a_nr = arg.rows ();
   int a_nc = arg.columns ();
 
diff --git a/src/ifft.cc b/src/ifft.cc
--- a/src/ifft.cc
+++ b/src/ifft.cc
@@ -30,26 +30,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-ifft.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_ifft_2 (tree_constant *args, int nargin, int nargout)
+builtin_ifft_2 (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = new tree_constant [2];
   retval[0] = ifft (args[1]);
   return retval;
 }
 #endif
 
 tree_constant
-ifft (tree_constant& a)
+ifft (const tree_constant& a)
 {
   tree_constant retval;
 
   tree_constant tmp = a.make_numeric ();;
     
   if (tmp.rows () == 0 || tmp.columns () == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -30,26 +30,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-inv.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_inv (tree_constant *args, int nargin, int nargout)
+builtin_inv (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = new tree_constant [2];
   retval[0] = inverse (args[1]);
   return retval;
 }
 #endif
 
 tree_constant
-inverse (tree_constant& a)
+inverse (const tree_constant& a)
 {
   tree_constant retval;
 
   tree_constant tmp = a.make_numeric ();
 
   int nr = tmp.rows ();
   int nc = tmp.columns ();
   if (nr == 0 || nc == 0)
diff --git a/src/lpsolve.cc b/src/lpsolve.cc
--- a/src/lpsolve.cc
+++ b/src/lpsolve.cc
@@ -28,24 +28,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "LPsolve.h"
 
 #include "tree-const.h"
 #include "error.h"
 #include "f-lpsolve.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_lpsolve_2 (tree_constant *args, int nargin, int nargout)
+builtin_lpsolve_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lpsolve (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-lpsolve (tree_constant *args, int nargin, int nargout)
+lpsolve (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
   message ("lpsolve", "sorry, not implemented yet");
   return retval;
 }
 
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -34,17 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "utils.h"
 #include "f-lsode.h"
 
 // Global pointer for user defined function required by lsode.
 static tree *lsode_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_lsode_2 (tree_constant *args, int nargin, int nargout)
+builtin_lsode_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lsode (args, nargin, nargout);
 }
 #endif
 
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
@@ -88,17 +88,17 @@ lsode_user_function (const ColumnVector&
 	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
-lsode (tree_constant *args, int nargin, int nargout)
+lsode (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   lsode_fcn = is_valid_function (args[1], "lsode", 1);
   if (lsode_fcn == NULL_TREE
       || takes_correct_nargs (lsode_fcn, 3, "lsode", 1) != 1)
diff --git a/src/lu.cc b/src/lu.cc
--- a/src/lu.cc
+++ b/src/lu.cc
@@ -29,24 +29,24 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "f-lu.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_lu_2 (tree_constant *args, int nargin, int nargout)
+builtin_lu_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lu (args[1], nargout);
 }
 #endif
 
 tree_constant *
-lu (tree_constant& a, int nargout)
+lu (const tree_constant& a, int nargout)
 {
   tree_constant *retval = new tree_constant [4];
 
   tree_constant tmp = a.make_numeric ();;
     
   if (tmp.rows () == 0 || tmp.columns () == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -37,24 +37,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "f-npsol.h"
 
 // Global pointers for user defined functions required by npsol.
 static tree *npsol_objective;
 static tree *npsol_constraints;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_npsol_2 (tree_constant *args, int nargin, int nargout)
+builtin_npsol_2 (const tree_constant *args, int nargin, int nargout)
 {
   return npsol (args, nargin, nargout);
 }
 #endif
 
 double
-npsol_objective_function (ColumnVector& x)
+npsol_objective_function (const ColumnVector& x)
 {
   int n = x.capacity ();
 
   tree_constant decision_vars;
   if (n > 1)
     {
       Matrix m (n, 1);
       for (int i = 0; i < n; i++)
@@ -111,17 +111,17 @@ npsol_objective_function (ColumnVector& 
       gripe_user_returned_invalid ("npsol_objective");
       break;
     }
 
   return retval;
 }
 
 ColumnVector
-npsol_constraint_function (ColumnVector& x)
+npsol_constraint_function (const ColumnVector& x)
 {
   ColumnVector retval;
 
   int n = x.capacity ();
 
   tree_constant decision_vars;
   if (n > 1)
     {
@@ -209,25 +209,25 @@ nonlinear_constraints_ok (const ColumnVe
 	{
 	  ok = 0;
 	  error ("%s: nonlinear constraints have nonzero dimensions",
 		 warn_for);
 	}
       else if (nllb_len != nlub_len || nllb_len != c_len)
 	{
 	  ok = 0;
-	  error ("%s: nonlinear constraints have inconsistent dimensions"
-		 warn_for,);
+	  error ("%s: nonlinear constraints have inconsistent dimensions",
+		 warn_for);
 	}
     }
   return ok;
 }
 
 tree_constant *
-npsol (tree_constant *args, int nargin, int nargout)
+npsol (const tree_constant *args, int nargin, int nargout)
 {
 /*
 
 Handle all of the following:
 
   1. npsol (x, phi)
   2. npsol (x, phi, lb, ub)
   3. npsol (x, phi, lb, ub, llb, c, lub)
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -40,24 +40,24 @@ Software Foundation, 675 Mass Ave, Cambr
 // a header file...
 extern int linear_constraints_ok (const ColumnVector& x,
 				  const ColumnVector& llb, const Matrix& c,
 				  const ColumnVector& lub, char *warn_for,
 				  int warn);
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_qpsol_2 (tree_constant *args, int nargin, int nargout)
+builtin_qpsol_2 (const tree_constant *args, int nargin, int nargout)
 {
   return qpsol (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-qpsol (tree_constant *args, int nargin, int nargout)
+qpsol (const tree_constant *args, int nargin, int nargout)
 {
 /*
 
 Handle all of the following:
 
   1. qpsol (x, H, c)
   2. qpsol (x, H, c, lb, ub)
   3. qpsol (x, H, c, lb, ub, llb, A, lub)
diff --git a/src/qr.cc b/src/qr.cc
--- a/src/qr.cc
+++ b/src/qr.cc
@@ -29,24 +29,24 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "f-qr.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_qr_2 (tree_constant *args, int nargin, int nargout)
+builtin_qr_2 (const tree_constant *args, int nargin, int nargout)
 {
   return qr (args[1], nargout);
 }
 #endif
 
 tree_constant *
-qr (tree_constant& a, int nargout)
+qr (const tree_constant& a, int nargout)
 {
   tree_constant *retval = new tree_constant [3];
 
   tree_constant tmp = a.make_numeric ();;
     
   int nr = tmp.rows ();
   int nc = tmp.columns ();
 
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -35,17 +35,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "utils.h"
 #include "f-quad.h"
 
 // Global pointer for user defined function required by quadrature functions.
 static tree *quad_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_quad_2 (tree_constant *args, int nargin, int nargout)
+builtin_quad_2 (const tree_constant *args, int nargin, int nargout)
 {
   return do_quad (args, nargin, nargout);
 }
 #endif
 
 double
 quad_user_function (double x)
 {
@@ -72,17 +72,17 @@ quad_user_function (double x)
 	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
-do_quad (tree_constant *args, int nargin, int nargout)
+do_quad (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   quad_fcn = is_valid_function (args[1], "fsolve", 1);
   if (quad_fcn == NULL_TREE
       || takes_correct_nargs (quad_fcn, 2, "fsolve", 1) != 1)
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -46,24 +46,24 @@ extern "C"
 		      double*, const long*, double*, int*);
  
   int F77_FCN (qzval) (const int*, const int*, double*, double*,
 		       double*, double*, double*, const long*, double*);
 }
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_qzvalue_2 (tree_constant *args, int nargin, int nargout)
+builtin_qzvalue_2 (const tree_constant *args, int nargin, int nargout)
 {
   return qzvalue (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-qzvalue (tree_constant *args, int nargin, int nargout)
+qzvalue (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arga = args[1].make_numeric ();
   tree_constant argb = args[2].make_numeric();
 
   if (arga.is_empty () || argb.is_empty ())
     retval = vector_of_empties (nargout, "qzvalue");
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -42,17 +42,17 @@ extern "C"
   int *F77_FCN (dgennor) (double*, double*, double*);
   int *F77_FCN (dgenunf) (double*, double*, double*);
   int *F77_FCN (setall) (int*, int*);
   int *F77_FCN (getsd) (int*, int*);
 }
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_rand_2 (tree_constant *args, int nargin, int nargout)
+builtin_rand_2 (const tree_constant *args, int nargin, int nargout)
 {
   return rand_internal (args, nargin, nargout);
 }
 #endif
 
 static double
 curr_rand_seed (void)
 {
@@ -98,17 +98,17 @@ curr_rand_dist (void)
   else
     {
       panic_impossible ();
       return (char *) NULL;
     }
 }
 
 tree_constant *
-rand_internal (tree_constant *args, int nargin, int nargout)
+rand_internal (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
 
   static int initialized = 0;
   if (! initialized)
     {
diff --git a/src/schur.cc b/src/schur.cc
--- a/src/schur.cc
+++ b/src/schur.cc
@@ -30,24 +30,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "error.h"
 #include "gripes.h"
 #include "f-schur.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_schur_2 (tree_constant *args, int nargin, int nargout)
+builtin_schur_2 (const tree_constant *args, int nargin, int nargout)
 {
   return schur (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-schur (tree_constant *args, int nargin, int nargout)
+schur (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arg = args[1].make_numeric ();
 
   char *ord;
   if (nargin != 3)
     ord = "U";
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -30,24 +30,24 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "f-svd.h"
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_svd_2 (tree_constant *args, int nargin, int nargout)
+builtin_svd_2 (const tree_constant *args, int nargin, int nargout)
 {
   return svd (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-svd (tree_constant *args, int nargin, int nargout)
+svd (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arg = args[1].make_numeric ();
 
   if (arg.rows () == 0 || arg.columns () == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -47,24 +47,24 @@ extern "C"
 			const int*, const int*, const Complex*,
 			const int*, const Complex*, const int*,
 			const Complex*, const int*, double*, int*,
 			long, long);
 }
 
 #ifdef WITH_DLD
 tree_constant *
-builtin_syl_2 (tree_constant *args, int nargin, int nargout)
+builtin_syl_2 (const tree_constant *args, int nargin, int nargout)
 {
   return syl (args, nargin, nargout);
 }
 #endif
 
 tree_constant *
-syl (tree_constant *args, int nargin, int nargout)
+syl (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   tree_constant arga = args[1].make_numeric ();
   tree_constant argb = args[2].make_numeric ();
   tree_constant argc = args[3].make_numeric ();
 
   if (arga.is_empty () || argb.is_empty () || argc.is_empty ())
