# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1279634404 25200
#      Tue Jul 20 07:00:04 2010 -0700
# Node ID bdde9c59f77ae2455e6a1aa6957aea43b4500ae0
# Parent  7c542263a92a0b2b17b04af7414cc31f96b040c0
typecast: Combine two @seealso macro uses to one.

diff --git a/src/DLD-FUNCTIONS/typecast.cc b/src/DLD-FUNCTIONS/typecast.cc
--- a/src/DLD-FUNCTIONS/typecast.cc
+++ b/src/DLD-FUNCTIONS/typecast.cc
@@ -115,28 +115,27 @@ of @var{x} and @var{class} must be one o
 the last two are reserved for @var{class}; they indicate that a complex-valued result\n\
 is requested.  Complex arrays are stored in memory as consecutive pairs of real numbers.\n\
 The sizes of integer types are given by their bit counts.  Both logical and char are typically\n\
 one byte wide; however, this is not guaranteed by C++.  If your system is IEEE conformant,\n\
 single and double should be 4 bytes and 8 bytes wide, respectively.\n\
 \"logical\" is not allowed for @var{class}.\n\
 If the input is a row vector, the return value is a row vector, otherwise it is a column vector.\n\
 If the bit length of @var{x} is not divisible by that of @var{class}, an error occurs.\n\
-@seealso{bitunpack,bitpack}\n\
 \n\
 An example of the use of typecast on a little-endian machine is\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = uint16 ([1, 65535]);\n\
 typecast (@var{x}, 'uint8')\n\
 @result{} [   0,   1, 255, 255]\n\
 @end group\n\
 @end example\n\
-@seealso{cast, swapbytes}\n\
+@seealso{cast, bitunpack, bitpack, swapbytes}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 2)
     {
       unwind_protect frame;
       const void *data = 0;
