# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1246533975 -7200
#      Thu Jul 02 13:26:15 2009 +0200
# Node ID 2cc47338e4276a24ff71725f56e49371affab17a
# Parent  f16079069972093f2bdba71f51f5562ee8c65a9d
allow which look for files on path

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-07-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* help.cc (do_which): Also look for files.
+
 2009-07-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Cell.cc (Cell::index): Use proper resize_fill_value.
 
 2009-07-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (symbol_table::get_fcn_info): New private static method.
 	(symbol_record_rep::finfo): New field.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -816,43 +816,57 @@ static std::string
 do_which (const std::string& name, std::string& type)
 {
   std::string file;
 
   type = std::string ();
 
   octave_value val = symbol_table::find_function (name);
 
-  if (val.is_defined ())
+  if (name.find_first_of ('.') == std::string::npos)
     {
-      octave_function *fcn = val.function_value ();
+      if (val.is_defined ())
+        {
+          octave_function *fcn = val.function_value ();
 
-      if (fcn)
-	{
-	  file = fcn->fcn_file_name ();
+          if (fcn)
+            {
+              file = fcn->fcn_file_name ();
 
-	  if (file.empty ())
-	    {
-	      if (fcn->is_user_function ())
-		type = "command-line function";
-	      else
-		type = "built-in function";
-	    }
-	  else
-	    type = val.is_user_script ()
-	      ? std::string ("script") : std::string ("function");
-	}
+              if (file.empty ())
+                {
+                  if (fcn->is_user_function ())
+                    type = "command-line function";
+                  else
+                    type = "built-in function";
+                }
+              else
+                type = val.is_user_script ()
+                  ? std::string ("script") : std::string ("function");
+            }
+        }
+      else
+        {
+          // We might find a file that contains only a doc string.
+
+          file = load_path::find_fcn_file (name);
+        }
     }
   else
     {
-      // We might find a file that contains only a doc string.
+      // File query.
 
-      file = load_path::find_fcn_file (name);
+      // For compatibility: "file." queries "file".
+      if (name.size () > 1 && name[name.size () - 1] == '.')
+        file = load_path::find_file (name.substr (0, name.size () - 1));
+      else
+        file = load_path::find_file (name);
     }
 
+
   return file;
 }
 
 std::string
 do_which (const std::string& name)
 {
   std::string retval;
 
