# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518759759 18000
#      Fri Feb 16 00:42:39 2018 -0500
# Node ID e574b957b01b44e717a8edb0871cbe5695744f8d
# Parent  11cc3973381b75f5d2560cd55e174114fcb45332
don't print extra newline after matrices with format free (bug #53168)

* pr-output.cc (octave_print_free): New static template function.
(octave_print_internal): Use octave_print_free to handle free format
printing for Matrix, ComplexMatrix, DiagMatrix, ComplexDiagMatrix, and
PermMatrix objects.  Handle Range objects as a special case.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1741,16 +1741,39 @@ octave_print_internal (std::ostream& os,
     {
       if (free_format)
         os << d;
       else
         pr_float (os, fmt, d);
     }
 }
 
+template <typename MT>
+static void
+octave_print_free (std::ostream& os, const MT& m, bool pr_as_read_syntax)
+{
+  octave_idx_type nr = m.rows ();
+  octave_idx_type nc = m.columns ();
+
+  if (pr_as_read_syntax)
+    os << "[\n";
+
+  for (octave_idx_type i = 0; i < nr; i++)
+    {
+      for (octave_idx_type j = 0; j < nc; j++)
+        os << ' ' << m.elem(i,j);
+
+      if (i < nr - 1)
+        os << "\n";
+    }
+
+  if (pr_as_read_syntax)
+    os << ']';
+}
+
 void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
@@ -1784,24 +1807,17 @@ octave_print_internal (std::ostream& os,
       else
         max_width -= extra_indent;
 
       if (max_width < 0)
         max_width = 0;
 
       if (free_format)
         {
-          if (pr_as_read_syntax)
-            os << "[\n";
-
-          os << m;
-
-          if (pr_as_read_syntax)
-            os << ']';
-
+          octave_print_free (os, m, pr_as_read_syntax);
           return;
         }
 
       octave_idx_type inc = nc;
       if (total_width > max_width && Vsplit_long_rows)
         {
           inc = max_width / column_width;
           if (inc == 0)
@@ -1920,24 +1936,17 @@ octave_print_internal (std::ostream& os,
       else
         max_width -= extra_indent;
 
       if (max_width < 0)
         max_width = 0;
 
       if (free_format)
         {
-          if (pr_as_read_syntax)
-            os << "[\n";
-
-          os << Matrix (m);
-
-          if (pr_as_read_syntax)
-            os << ']';
-
+          octave_print_free (os, m, pr_as_read_syntax);
           return;
         }
 
       octave_idx_type inc = nc;
       if (total_width > max_width && Vsplit_long_rows)
         {
           inc = max_width / column_width;
           if (inc == 0)
@@ -2200,24 +2209,17 @@ octave_print_internal (std::ostream& os,
       else
         max_width -= extra_indent;
 
       if (max_width < 0)
         max_width = 0;
 
       if (free_format)
         {
-          if (pr_as_read_syntax)
-            os << "[\n";
-
-          os << cm;
-
-          if (pr_as_read_syntax)
-            os << ']';
-
+          octave_print_free (os, cm, pr_as_read_syntax);
           return;
         }
 
       octave_idx_type inc = nc;
       if (total_width > max_width && Vsplit_long_rows)
         {
           inc = max_width / column_width;
           if (inc == 0)
@@ -2339,24 +2341,17 @@ octave_print_internal (std::ostream& os,
       else
         max_width -= extra_indent;
 
       if (max_width < 0)
         max_width = 0;
 
       if (free_format)
         {
-          if (pr_as_read_syntax)
-            os << "[\n";
-
-          os << ComplexMatrix (cm);
-
-          if (pr_as_read_syntax)
-            os << ']';
-
+          octave_print_free (os, cm, pr_as_read_syntax);
           return;
         }
 
       octave_idx_type inc = nc;
       if (total_width > max_width && Vsplit_long_rows)
         {
           inc = max_width / column_width;
           if (inc == 0)
@@ -2483,24 +2478,17 @@ octave_print_internal (std::ostream& os,
       else
         max_width -= extra_indent;
 
       if (max_width < 0)
         max_width = 0;
 
       if (free_format)
         {
-          if (pr_as_read_syntax)
-            os << "[\n";
-
-          os << Matrix (m);
-
-          if (pr_as_read_syntax)
-            os << ']';
-
+          octave_print_free (os, m, pr_as_read_syntax);
           return;
         }
 
       octave_idx_type inc = nc;
       if (total_width > max_width && Vsplit_long_rows)
         {
           inc = max_width / column_width;
           if (inc == 0)
@@ -2699,17 +2687,19 @@ octave_print_internal (std::ostream& os,
           octave::preserve_stream_state stream_state (os);
 
           int column_width = fw + 2;
           octave_idx_type total_width = num_elem * column_width;
           octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
           if (free_format)
             {
-              os << r;
+              os << ' ';
+              for (octave_idx_type i = 0; i < num_elem; i++)
+                os << ' ' << r.elem(i);
               return;
             }
 
           octave_idx_type inc = num_elem;
           if (total_width > max_width && Vsplit_long_rows)
             {
               inc = max_width / column_width;
               if (inc == 0)
