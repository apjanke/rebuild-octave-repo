# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450628196 28800
#      Sun Dec 20 08:16:36 2015 -0800
# Node ID 758b71e964ce2b048dba62e89a08758944812146
# Parent  072559bd31f23a861538bfdafe6a4fe881ad39a9
maint: Eliminate more useless statements after error().

* ov-base-diag.cc, ov-base-int.cc, ov-base-sparse.cc, ov-fcn-handle.cc,
ov-perm.cc, ov-str-mat.cc:
maint: Eliminate more useless statements after error().

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -505,20 +505,17 @@ octave_base_diag<DMT, MT>::load_ascii (s
   if (extract_keyword (is, "rows", r, true)
       && extract_keyword (is, "columns", c, true))
     {
       octave_idx_type l = r < c ? r : c;
       MT tmp (l, 1);
       is >> tmp;
 
       if (!is)
-        {
-          error ("load: failed to load diagonal matrix constant");
-          success = false;
-        }
+        error ("load: failed to load diagonal matrix constant");
       else
         {
           // This is a little tricky, as we have the Matrix type, but
           // not ColumnVector type. We need to help the compiler get
           // through the inheritance tree.
           typedef typename DMT::element_type el_type;
           matrix = DMT (MDiagArray2<el_type> (MArray<el_type> (tmp)));
           matrix.resize (r, c);
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -217,20 +217,17 @@ octave_base_int_matrix<T>::load_ascii (s
           for (int i = 0; i < mdims; i++)
             is >> dv(i);
 
           T tmp(dv);
 
           is >> tmp;
 
           if (!is)
-            {
-              error ("load: failed to load matrix constant");
-              success = false;
-            }
+            error ("load: failed to load matrix constant");
 
           this->matrix = tmp;
         }
       else
         error ("load: failed to extract number of rows and columns");
     }
   else
     error ("load: failed to extract number of dimensions");
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -451,20 +451,17 @@ octave_base_sparse<T>::load_ascii (std::
       && extract_keyword (is, "rows", nr, true)
       && extract_keyword (is, "columns", nc, true))
     {
       T tmp (nr, nc, nz);
 
       is >> tmp;
 
       if (!is)
-        {
-          error ("load: failed to load matrix constant");
-          success = false;
-        }
+        error ("load: failed to load matrix constant");
 
       matrix = tmp;
     }
   else
     error ("load: failed to extract number of rows and columns");
 
   return success;
 }
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -328,20 +328,17 @@ octave_fcn_handle::set_fcn (const std::s
           else
             error ("function handle points to non-existent function");
         }
       else
         {
           fcn = symbol_table::find_function (nm);
 
           if (! fcn.is_function ())
-            {
-              error ("function handle points to non-existent function");
-              success = false;
-            }
+            error ("function handle points to non-existent function");
         }
     }
 
   return success;
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os)
@@ -1140,20 +1137,17 @@ octave_fcn_handle::load_hdf5 (octave_hdf
           data_hid = H5Gopen (group_hid, "symbol table", H5P_DEFAULT);
 #else
           data_hid = H5Gopen (group_hid, "symbol table");
 #endif
           H5Gget_num_objs (data_hid, &num_obj);
           H5Gclose (data_hid);
 
           if (num_obj != static_cast<hsize_t>(len))
-            {
-              error ("load: failed to load anonymous function handle");
-              success = false;
-            }
+            error ("load: failed to load anonymous function handle");
 
           hdf5_callback_data dsub;
           int current_item = 0;
           for (octave_idx_type i = 0; i < len; i++)
             {
               if (H5Giterate (group_hid, "symbol table", &current_item,
                               hdf5_read_next_data, &dsub) <= 0)
                 {
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -288,20 +288,17 @@ octave_perm_matrix::load_ascii (std::ist
 
   if (extract_keyword (is, "size", n, true)
       && extract_keyword (is, "orient", orient, true))
     {
       bool colp = orient == 'c';
       ColumnVector tmp (n);
       is >> tmp;
       if (!is)
-        {
-          error ("load: failed to load permutation matrix constant");
-          success = false;
-        }
+        error ("load: failed to load permutation matrix constant");
       else
         {
           Array<octave_idx_type> pvec (dim_vector (n, 1));
           for (octave_idx_type i = 0; i < n; i++) pvec(i) = tmp(i) - 1;
           matrix = PermMatrix (pvec, colp);
 
           // Invalidate cache. Probably not necessary, but safe.
           dense_cache = octave_value ();
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -366,20 +366,17 @@ octave_char_matrix_str::load_ascii (std:
                     matrix = tmp;
                   else
                     {
                       char *ftmp = tmp.fortran_vec ();
 
                       skip_preceeding_newline (is);
 
                       if (! is.read (ftmp, dv.numel ()) || !is)
-                        {
-                          error ("load: failed to load string constant");
-                          success = false;
-                        }
+                        error ("load: failed to load string constant");
                       else
                         matrix = tmp;
                     }
                 }
               else
                 {
                   error ("load: failed to read dimensions");
                   success = false;
