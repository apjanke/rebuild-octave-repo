# HG changeset patch
# User jwe
# Date 944715515 0
#      Thu Dec 09 04:58:35 1999 +0000
# Node ID 1cdb3ab4180a6a3a1f5bf42263b3694f3fdaf576
# Parent  89405d9a9b0bac9f041610a7d78596b0cba53b53
[project @ 1999-12-09 04:58:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+1999-12-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dbleLU.cc (LU::LU): Call DGETRF directly instead of calling DGESV.
+	* CmplxLU.cc (ComplexLU::ComplexLU): Likewise, call ZGETRF
+	directly, instead of calling ZGESV.
+
 1999-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data-conv.cc (init_sized_type_lookup_table): New function.
 	(string_to_data_type): Use it to improve lookup of data types.
 
 1999-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (is_symmetric): Move here from Array2.cc.
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -38,19 +38,18 @@ Software Foundation, 59 Temple Place - S
 #include <base-lu.cc>
 
 template class base_lu <ComplexMatrix, Complex, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
-  int F77_FCN (zgesv, ZGESV) (const int&, const int&, Complex*,
-			      const int&, int*, Complex*, const int&,
-			      int&);
+  int F77_FCN (zgetrf, ZGETRF) (const int&, const int&, Complex*,
+				const int&, int*, int&);
 }
 
 ComplexLU::ComplexLU (const ComplexMatrix& a)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
@@ -63,19 +62,18 @@ ComplexLU::ComplexLU (const ComplexMatri
 
   ipvt.resize (n);
   int *pipvt = ipvt.fortran_vec ();
 
   a_fact = a;
   Complex *tmp_data = a_fact.fortran_vec ();
 
   int info = 0;
-  Complex *dummy = 0;
 
-  F77_XFCN (zgesv, ZGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
+  F77_XFCN (zgetrf, ZGETRF, (n, n, tmp_data, n, pipvt, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgesv");
   else
     ipvt -= 1;
 }
 
 /*
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -38,19 +38,18 @@ Software Foundation, 59 Temple Place - S
 #include <base-lu.cc>
 
 template class base_lu <Matrix, double, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
-  int F77_FCN (dgesv, DGESV) (const int&, const int&, double*,
-			      const int&, int*, double&, const int&,
-			      int&);
+  int F77_FCN (dgetrf, DGETRF) (const int&, const int&, double*,
+				const int&, int*, int&);
 }
 
 LU::LU (const Matrix& a)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
@@ -63,19 +62,18 @@ LU::LU (const Matrix& a)
 
   ipvt.resize (n);
   int *pipvt = ipvt.fortran_vec ();
 
   a_fact = a;
   double *tmp_data = a_fact.fortran_vec ();
 
   int info = 0;
-  double dummy = 0;
 
-  F77_XFCN (dgesv, DGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
+  F77_XFCN (dgetrf, DGETRF, (n, n, tmp_data, n, pipvt, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgesv");
   else
     ipvt -= 1;
 }
 
 /*
