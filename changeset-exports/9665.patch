# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253954467 -7200
#      Sat Sep 26 10:41:07 2009 +0200
# Node ID 1dba57e9d08d1baa85701ddd9dc96bac0e5d5e1e
# Parent  2c516903403558417a456f58edb50b5c344d7944
use blas_trans_type for xgemm

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3779,61 +3779,60 @@ get_blas_trans_arg (bool trans, bool con
 {
   static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
   return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
 }
 
 // the general GEMM operation
 
 ComplexMatrix
-xgemm (bool transa, bool conja, const ComplexMatrix& a, 
-       bool transb, bool conjb, const ComplexMatrix& b)
+xgemm (const ComplexMatrix& a, const ComplexMatrix& b, 
+       blas_trans_type transa, blas_trans_type transb)
 {
   ComplexMatrix retval;
 
-  // conjugacy is ignored if no transpose
-  conja = conja && transa;
-  conjb = conjb && transb;
-
-  octave_idx_type a_nr = transa ? a.cols () : a.rows ();
-  octave_idx_type a_nc = transa ? a.rows () : a.cols ();
-
-  octave_idx_type b_nr = transb ? b.cols () : b.rows ();
-  octave_idx_type b_nc = transb ? b.rows () : b.cols ();
+  bool tra = transa != blas_no_trans, trb = transb != blas_no_trans;
+  bool cja = transa == blas_conj_trans, cjb = transb == blas_conj_trans;
+
+  octave_idx_type a_nr = tra ? a.cols () : a.rows ();
+  octave_idx_type a_nc = tra ? a.rows () : a.cols ();
+
+  octave_idx_type b_nr = trb ? b.cols () : b.rows ();
+  octave_idx_type b_nc = trb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
 	retval = ComplexMatrix (a_nr, b_nc, 0.0);
-      else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
+      else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
 	  octave_idx_type lda = a.rows ();
 
           retval = ComplexMatrix (a_nr, b_nc);
 	  Complex *c = retval.fortran_vec ();
 
-          const char *ctransa = get_blas_trans_arg (transa, conja);
-          if (conja || conjb)
+          const char *ctra = get_blas_trans_arg (tra, cja);
+          if (cja || cjb)
             {
               F77_XFCN (zherk, ZHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                       F77_CONST_CHAR_ARG2 (ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (int j = 0; j < a_nr; j++)
                 for (int i = 0; i < j; i++)
                   retval.xelem (j,i) = std::conj (retval.xelem (i,j));
             }
           else
             {
               F77_XFCN (zsyrk, ZSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                       F77_CONST_CHAR_ARG2 (ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (int j = 0; j < a_nr; j++)
                 for (int i = 0; i < j; i++)
                   retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3845,63 +3844,63 @@ xgemm (bool transa, bool conja, const Co
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
 	  retval = ComplexMatrix (a_nr, b_nc);
 	  Complex *c = retval.fortran_vec ();
 
 	  if (b_nc == 1 && a_nr == 1)
 	    {
-              if (conja == conjb)
+              if (cja == cjb)
                 {
                   F77_FUNC (xzdotu, XZDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
-                  if (conja) *c = std::conj (*c);
+                  if (cja) *c = std::conj (*c);
                 }
-              else if (conja)
+              else if (cja)
                   F77_FUNC (xzdotc, XZDOTC) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                   F77_FUNC (xzdotc, XZDOTC) (a_nc, b.data (), 1, a.data (), 1, *c);
             }
-          else if (b_nc == 1 && ! conjb)
+          else if (b_nc == 1 && ! cjb)
             {
-              const char *ctransa = get_blas_trans_arg (transa, conja);
-              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
+              const char *ctra = get_blas_trans_arg (tra, cja);
+              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
-          else if (a_nr == 1 && ! conja && ! conjb)
+          else if (a_nr == 1 && ! cja && ! cjb)
             {
-              const char *crevtransb = get_blas_trans_arg (! transb, conjb);
-              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
+              const char *crevtrb = get_blas_trans_arg (! trb, cjb);
+              F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
 	    {
-              const char *ctransa = get_blas_trans_arg (transa, conja);
-              const char *ctransb = get_blas_trans_arg (transb, conjb);
-	      F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 (ctransa, 1),
-				       F77_CONST_CHAR_ARG2 (ctransb, 1),
+              const char *ctra = get_blas_trans_arg (tra, cja);
+              const char *ctrb = get_blas_trans_arg (trb, cjb);
+	      F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
+				       F77_CONST_CHAR_ARG2 (ctrb, 1),
 				       a_nr, b_nc, a_nc, 1.0, a.data (),
 				       lda, b.data (), ldb, 0.0, c, a_nr
 				       F77_CHAR_ARG_LEN (1)
 				       F77_CHAR_ARG_LEN (1)));
 	    }
 	}
     }
 
   return retval;
 }
 
 ComplexMatrix
 operator * (const ComplexMatrix& a, const ComplexMatrix& b)
 {
-  return xgemm (false, false, a, false, false, b);
+  return xgemm (a, b);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -401,18 +401,19 @@ operator * (const ComplexColumnVector& a
 
 extern OCTAVE_API ComplexMatrix
 Givens (const Complex&, const Complex&);
 
 extern OCTAVE_API ComplexMatrix
 Sylvester (const ComplexMatrix&, const ComplexMatrix&, const ComplexMatrix&);
 
 extern OCTAVE_API ComplexMatrix 
-xgemm (bool transa, bool conja, const ComplexMatrix& a, 
-       bool transb, bool conjb, const ComplexMatrix& b);
+xgemm (const ComplexMatrix& a, const ComplexMatrix& b,
+       blas_trans_type transa = blas_no_trans, 
+       blas_trans_type transb = blas_no_trans);
 
 extern OCTAVE_API ComplexMatrix operator * (const Matrix&,        const ComplexMatrix&);
 extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, const Matrix&);
 extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, const ComplexMatrix&);
 
 extern OCTAVE_API ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
 extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
 extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2009-09-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
+	(operator *(const Matrix&, const Matrix&)): Update.
+	* fMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
+	(operator *(const FloatMatrix&, const FloatMatrix&)): Update.
+	* CMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
+	(operator *(const ComplexMatrix&, const ComplexMatrix&)): Update.
+	* fCMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
+	(operator *(const FloatComplexMatrix&, const FloatComplexMatrix&)): Update.
+	* dMatrix.h: Update decl.
+	* fMatrix.h: Update decl.
+	* CMatrix.h: Update decl.
+	* fCMatrix.h: Update decl.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* CMatrix.cc (ComplexMatrix::ComplexMatrix (const Matrix&, const
 	Matrix&)): New constructor.
 	(operator * (Matrix, ComplexMatrix), operator * (ComplexMatrix,
 	Matrix)): Optimize.
 	* fCMatrix.cc (FloatComplexMatrix::FloatComplexMatrix (const FloatMatrix&, const
 	FloatMatrix&)): New constructor.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3199,42 +3199,45 @@ get_blas_trans_arg (bool trans)
 {
   static char blas_notrans = 'N', blas_trans = 'T';
   return (trans) ? &blas_trans : &blas_notrans;
 }
 
 // the general GEMM operation
 
 Matrix 
-xgemm (bool transa, const Matrix& a, bool transb, const Matrix& b)
+xgemm (const Matrix& a, const Matrix& b, 
+       blas_trans_type transa, blas_trans_type transb)
 {
   Matrix retval;
 
-  octave_idx_type a_nr = transa ? a.cols () : a.rows ();
-  octave_idx_type a_nc = transa ? a.rows () : a.cols ();
-
-  octave_idx_type b_nr = transb ? b.cols () : b.rows ();
-  octave_idx_type b_nc = transb ? b.rows () : b.cols ();
+  bool tra = transa != blas_no_trans, trb = transb != blas_no_trans;
+
+  octave_idx_type a_nr = tra ? a.cols () : a.rows ();
+  octave_idx_type a_nc = tra ? a.rows () : a.cols ();
+
+  octave_idx_type b_nr = trb ? b.cols () : b.rows ();
+  octave_idx_type b_nc = trb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
 	retval = Matrix (a_nr, b_nc, 0.0);
-      else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
+      else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
 	  octave_idx_type lda = a.rows ();
 
           retval = Matrix (a_nr, b_nc);
 	  double *c = retval.fortran_vec ();
 
-          const char *ctransa = get_blas_trans_arg (transa);
+          const char *ctra = get_blas_trans_arg (tra);
           F77_XFCN (dsyrk, DSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                   F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                   F77_CONST_CHAR_ARG2 (ctra, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
                                    F77_CHAR_ARG_LEN (1)));
           for (int j = 0; j < a_nr; j++)
             for (int i = 0; i < j; i++)
               retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3248,52 +3251,52 @@ xgemm (bool transa, const Matrix& a, boo
 	  double *c = retval.fortran_vec ();
 
 	  if (b_nc == 1)
 	    {
 	      if (a_nr == 1)
 		F77_FUNC (xddot, XDDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
 	      else
 		{
-                  const char *ctransa = get_blas_trans_arg (transa);
-		  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
+                  const char *ctra = get_blas_trans_arg (tra);
+		  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
 					   lda, tda, 1.0,  a.data (), lda,
 					   b.data (), 1, 0.0, c, 1
 					   F77_CHAR_ARG_LEN (1)));
 		}
             }
           else if (a_nr == 1)
             {
-              const char *crevtransb = get_blas_trans_arg (! transb);
-              F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
+              const char *crevtrb = get_blas_trans_arg (! trb);
+              F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
 	    {
-              const char *ctransa = get_blas_trans_arg (transa);
-              const char *ctransb = get_blas_trans_arg (transb);
-	      F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 (ctransa, 1),
-				       F77_CONST_CHAR_ARG2 (ctransb, 1),
+              const char *ctra = get_blas_trans_arg (tra);
+              const char *ctrb = get_blas_trans_arg (trb);
+	      F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
+				       F77_CONST_CHAR_ARG2 (ctrb, 1),
 				       a_nr, b_nc, a_nc, 1.0, a.data (),
 				       lda, b.data (), ldb, 0.0, c, a_nr
 				       F77_CHAR_ARG_LEN (1)
 				       F77_CHAR_ARG_LEN (1)));
 	    }
 	}
     }
 
   return retval;
 }
 
 Matrix
 operator * (const Matrix& a, const Matrix& b)
 {
-  return xgemm (false, a, false, b);
+  return xgemm (a, b);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -349,17 +349,19 @@ extern OCTAVE_API Matrix imag (const Com
 extern OCTAVE_API Matrix operator * (const ColumnVector& a, const RowVector& b);
 
 // Other functions.
 
 extern OCTAVE_API Matrix Givens (double, double);
 
 extern OCTAVE_API Matrix Sylvester (const Matrix&, const Matrix&, const Matrix&);
 
-extern OCTAVE_API Matrix xgemm (bool transa, const Matrix& a, bool transb, const Matrix& b);
+extern OCTAVE_API Matrix xgemm (const Matrix& a, const Matrix& b,
+                                blas_trans_type transa = blas_no_trans, 
+                                blas_trans_type transb = blas_no_trans);
 
 extern OCTAVE_API Matrix operator * (const Matrix& a, const Matrix& b);
 
 extern OCTAVE_API Matrix min (double d, const Matrix& m);
 extern OCTAVE_API Matrix min (const Matrix& m, double d);
 extern OCTAVE_API Matrix min (const Matrix& a, const Matrix& b);
 
 extern OCTAVE_API Matrix max (double d, const Matrix& m);
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3772,61 +3772,60 @@ get_blas_trans_arg (bool trans, bool con
 {
   static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
   return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
 }
 
 // the general GEMM operation
 
 FloatComplexMatrix
-xgemm (bool transa, bool conja, const FloatComplexMatrix& a, 
-       bool transb, bool conjb, const FloatComplexMatrix& b)
+xgemm (const FloatComplexMatrix& a, const FloatComplexMatrix& b, 
+       blas_trans_type transa, blas_trans_type transb)
 {
   FloatComplexMatrix retval;
 
-  // conjugacy is ignored if no transpose
-  conja = conja && transa;
-  conjb = conjb && transb;
-
-  octave_idx_type a_nr = transa ? a.cols () : a.rows ();
-  octave_idx_type a_nc = transa ? a.rows () : a.cols ();
-
-  octave_idx_type b_nr = transb ? b.cols () : b.rows ();
-  octave_idx_type b_nc = transb ? b.rows () : b.cols ();
+  bool tra = transa != blas_no_trans, trb = transb != blas_no_trans;
+  bool cja = transa == blas_conj_trans, cjb = transb == blas_conj_trans;
+
+  octave_idx_type a_nr = tra ? a.cols () : a.rows ();
+  octave_idx_type a_nc = tra ? a.rows () : a.cols ();
+
+  octave_idx_type b_nr = trb ? b.cols () : b.rows ();
+  octave_idx_type b_nc = trb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
 	retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
-      else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
+      else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
 	  octave_idx_type lda = a.rows ();
 
           retval = FloatComplexMatrix (a_nr, b_nc);
 	  FloatComplex *c = retval.fortran_vec ();
 
-          const char *ctransa = get_blas_trans_arg (transa, conja);
-          if (conja || conjb)
+          const char *ctra = get_blas_trans_arg (tra, cja);
+          if (cja || cjb)
             {
               F77_XFCN (cherk, CHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                       F77_CONST_CHAR_ARG2 (ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (int j = 0; j < a_nr; j++)
                 for (int i = 0; i < j; i++)
                   retval.xelem (j,i) = std::conj (retval.xelem (i,j));
             }
           else
             {
               F77_XFCN (csyrk, CSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                       F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                       F77_CONST_CHAR_ARG2 (ctra, 1),
                                        a_nr, a_nc, 1.0,
                                        a.data (), lda, 0.0, c, a_nr
                                        F77_CHAR_ARG_LEN (1)
                                        F77_CHAR_ARG_LEN (1)));
               for (int j = 0; j < a_nr; j++)
                 for (int i = 0; i < j; i++)
                   retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3838,63 +3837,63 @@ xgemm (bool transa, bool conja, const Fl
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
 	  retval = FloatComplexMatrix (a_nr, b_nc);
 	  FloatComplex *c = retval.fortran_vec ();
 
 	  if (b_nc == 1 && a_nr == 1)
 	    {
-              if (conja == conjb)
+              if (cja == cjb)
                 {
                   F77_FUNC (xcdotu, XCDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
-                  if (conja) *c = std::conj (*c);
+                  if (cja) *c = std::conj (*c);
                 }
-              else if (conja)
+              else if (cja)
                   F77_FUNC (xcdotc, XCDOTC) (a_nc, a.data (), 1, b.data (), 1, *c);
               else
                   F77_FUNC (xcdotc, XCDOTC) (a_nc, b.data (), 1, a.data (), 1, *c);
             }
-          else if (b_nc == 1 && ! conjb)
+          else if (b_nc == 1 && ! cjb)
             {
-              const char *ctransa = get_blas_trans_arg (transa, conja);
-              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
+              const char *ctra = get_blas_trans_arg (tra, cja);
+              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
                                        lda, tda, 1.0,  a.data (), lda,
                                        b.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
-          else if (a_nr == 1 && ! conja && ! conjb)
+          else if (a_nr == 1 && ! cja && ! cjb)
             {
-              const char *crevtransb = get_blas_trans_arg (! transb, conjb);
-              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
+              const char *crevtrb = get_blas_trans_arg (! trb, cjb);
+              F77_XFCN (cgemv, CGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
 	    {
-              const char *ctransa = get_blas_trans_arg (transa, conja);
-              const char *ctransb = get_blas_trans_arg (transb, conjb);
-	      F77_XFCN (cgemm, CGEMM, (F77_CONST_CHAR_ARG2 (ctransa, 1),
-				       F77_CONST_CHAR_ARG2 (ctransb, 1),
+              const char *ctra = get_blas_trans_arg (tra, cja);
+              const char *ctrb = get_blas_trans_arg (trb, cjb);
+	      F77_XFCN (cgemm, CGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
+				       F77_CONST_CHAR_ARG2 (ctrb, 1),
 				       a_nr, b_nc, a_nc, 1.0, a.data (),
 				       lda, b.data (), ldb, 0.0, c, a_nr
 				       F77_CHAR_ARG_LEN (1)
 				       F77_CHAR_ARG_LEN (1)));
 	    }
 	}
     }
 
   return retval;
 }
 
 FloatComplexMatrix
 operator * (const FloatComplexMatrix& a, const FloatComplexMatrix& b)
 {
-  return xgemm (false, false, a, false, false, b);
+  return xgemm (a, b);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -401,18 +401,19 @@ operator * (const FloatComplexColumnVect
 
 extern OCTAVE_API FloatComplexMatrix
 Givens (const FloatComplex&, const FloatComplex&);
 
 extern OCTAVE_API FloatComplexMatrix
 Sylvester (const FloatComplexMatrix&, const FloatComplexMatrix&, const FloatComplexMatrix&);
 
 extern OCTAVE_API FloatComplexMatrix 
-xgemm (bool transa, bool conja, const FloatComplexMatrix& a, 
-       bool transb, bool conjb, const FloatComplexMatrix& b);
+xgemm (const FloatComplexMatrix& a, const FloatComplexMatrix& b,
+       blas_trans_type transa = blas_no_trans, 
+       blas_trans_type transb = blas_no_trans);
 
 extern OCTAVE_API FloatComplexMatrix operator * (const FloatMatrix&,        const FloatComplexMatrix&);
 extern OCTAVE_API FloatComplexMatrix operator * (const FloatComplexMatrix&, const FloatMatrix&);
 extern OCTAVE_API FloatComplexMatrix operator * (const FloatComplexMatrix&, const FloatComplexMatrix&);
 
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplex& c, const FloatComplexMatrix& m);
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplexMatrix& m, const FloatComplex& c);
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplexMatrix& a, const FloatComplexMatrix& b);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3198,42 +3198,45 @@ get_blas_trans_arg (bool trans)
 {
   static char blas_notrans = 'N', blas_trans = 'T';
   return (trans) ? &blas_trans : &blas_notrans;
 }
 
 // the general GEMM operation
 
 FloatMatrix 
-xgemm (bool transa, const FloatMatrix& a, bool transb, const FloatMatrix& b)
+xgemm (const FloatMatrix& a, const FloatMatrix& b, 
+       blas_trans_type transa, blas_trans_type transb)
 {
   FloatMatrix retval;
 
-  octave_idx_type a_nr = transa ? a.cols () : a.rows ();
-  octave_idx_type a_nc = transa ? a.rows () : a.cols ();
-
-  octave_idx_type b_nr = transb ? b.cols () : b.rows ();
-  octave_idx_type b_nc = transb ? b.rows () : b.cols ();
+  bool tra = transa != blas_no_trans, trb = transb != blas_no_trans;
+
+  octave_idx_type a_nr = tra ? a.cols () : a.rows ();
+  octave_idx_type a_nc = tra ? a.rows () : a.cols ();
+
+  octave_idx_type b_nr = trb ? b.cols () : b.rows ();
+  octave_idx_type b_nc = trb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
 	retval = FloatMatrix (a_nr, b_nc, 0.0);
-      else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
+      else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
 	  octave_idx_type lda = a.rows ();
 
           retval = FloatMatrix (a_nr, b_nc);
 	  float *c = retval.fortran_vec ();
 
-          const char *ctransa = get_blas_trans_arg (transa);
+          const char *ctra = get_blas_trans_arg (tra);
           F77_XFCN (ssyrk, SSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
-                                   F77_CONST_CHAR_ARG2 (ctransa, 1),
+                                   F77_CONST_CHAR_ARG2 (ctra, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
                                    F77_CHAR_ARG_LEN (1)));
           for (int j = 0; j < a_nr; j++)
             for (int i = 0; i < j; i++)
               retval.xelem (j,i) = retval.xelem (i,j);
 
@@ -3247,52 +3250,52 @@ xgemm (bool transa, const FloatMatrix& a
 	  float *c = retval.fortran_vec ();
 
 	  if (b_nc == 1)
 	    {
 	      if (a_nr == 1)
 		F77_FUNC (xsdot, XSDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
 	      else
 		{
-                  const char *ctransa = get_blas_trans_arg (transa);
-		  F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (ctransa, 1),
+                  const char *ctra = get_blas_trans_arg (tra);
+		  F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (ctra, 1),
 					   lda, tda, 1.0,  a.data (), lda,
 					   b.data (), 1, 0.0, c, 1
 					   F77_CHAR_ARG_LEN (1)));
 		}
             }
           else if (a_nr == 1)
             {
-              const char *crevtransb = get_blas_trans_arg (! transb);
-              F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (crevtransb, 1),
+              const char *crevtrb = get_blas_trans_arg (! trb);
+              F77_XFCN (sgemv, SGEMV, (F77_CONST_CHAR_ARG2 (crevtrb, 1),
                                        ldb, tdb, 1.0,  b.data (), ldb,
                                        a.data (), 1, 0.0, c, 1
                                        F77_CHAR_ARG_LEN (1)));
             }
 	  else
 	    {
-              const char *ctransa = get_blas_trans_arg (transa);
-              const char *ctransb = get_blas_trans_arg (transb);
-	      F77_XFCN (sgemm, SGEMM, (F77_CONST_CHAR_ARG2 (ctransa, 1),
-				       F77_CONST_CHAR_ARG2 (ctransb, 1),
+              const char *ctra = get_blas_trans_arg (tra);
+              const char *ctrb = get_blas_trans_arg (trb);
+	      F77_XFCN (sgemm, SGEMM, (F77_CONST_CHAR_ARG2 (ctra, 1),
+				       F77_CONST_CHAR_ARG2 (ctrb, 1),
 				       a_nr, b_nc, a_nc, 1.0, a.data (),
 				       lda, b.data (), ldb, 0.0, c, a_nr
 				       F77_CHAR_ARG_LEN (1)
 				       F77_CHAR_ARG_LEN (1)));
 	    }
 	}
     }
 
   return retval;
 }
 
 FloatMatrix
 operator * (const FloatMatrix& a, const FloatMatrix& b)
 {
-  return xgemm (false, a, false, b);
+  return xgemm (a, b);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -349,17 +349,19 @@ extern OCTAVE_API FloatMatrix imag (cons
 extern OCTAVE_API FloatMatrix operator * (const FloatColumnVector& a, const FloatRowVector& b);
 
 // Other functions.
 
 extern OCTAVE_API FloatMatrix Givens (float, float);
 
 extern OCTAVE_API FloatMatrix Sylvester (const FloatMatrix&, const FloatMatrix&, const FloatMatrix&);
 
-extern OCTAVE_API FloatMatrix xgemm (bool transa, const FloatMatrix& a, bool transb, const FloatMatrix& b);
+extern OCTAVE_API FloatMatrix xgemm (const FloatMatrix& a, const FloatMatrix& b,
+                                     blas_trans_type transa = blas_no_trans, 
+                                     blas_trans_type transb = blas_no_trans);
 
 extern OCTAVE_API FloatMatrix operator * (const FloatMatrix& a, const FloatMatrix& b);
 
 extern OCTAVE_API FloatMatrix min (float d, const FloatMatrix& m);
 extern OCTAVE_API FloatMatrix min (const FloatMatrix& m, float d);
 extern OCTAVE_API FloatMatrix min (const FloatMatrix& a, const FloatMatrix& b);
 
 extern OCTAVE_API FloatMatrix max (float d, const FloatMatrix& m);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-09-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-m-m.cc (trans_mul, mul_trans): Update.
+	* OPERATORS/op-fm-fm.cc (trans_mul, mul_trans): Update.
+	* OPERATORS/op-cm-cm.cc (trans_mul, mul_trans, herm_mul, mul_herm): Update.
+	* OPERATORS/op-fcm-fcm.cc (trans_mul, mul_trans, herm_mul, mul_herm): Update.
+	* OPERATORS/op-m-cm.cc (trans_mul): Update.
+	* OPERATORS/op-cm-m.cc (mul_trans): Update.
+	* OPERATORS/op-fm-fcm.cc (trans_mul): Update.
+	* OPERATORS/op-fcm-fm.cc (mul_trans): Update.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-m-cm.cc: Declare and install trans_mul operator.
 	* OPERATORS/op-fm-fcm.cc: Ditto.
 	* OPERATORS/op-cm-m.cc: Declare and install mul_trans operator.
 	* OPERATORS/op-fcm-fm.cc: Ditto.
 
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -107,39 +107,43 @@ DEFBINOP (ldiv, complex_matrix, complex_
 
   v1.matrix_type (typ);
   return ret;
 }
 
 DEFBINOP (trans_mul, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
-  return octave_value(xgemm (true, false, v1.complex_matrix_value (), 
-                             false, false, v2.complex_matrix_value ()));
+  return octave_value(xgemm (v1.complex_matrix_value (), 
+                             v2.complex_matrix_value (),
+                             blas_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_trans, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
-  return octave_value(xgemm (false, false, v1.complex_matrix_value (), 
-                             true, false, v2.complex_matrix_value ()));
+  return octave_value(xgemm (v1.complex_matrix_value (), 
+                             v2.complex_matrix_value (),
+                             blas_no_trans, blas_trans));
 }
 
 DEFBINOP (herm_mul, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
-  return octave_value(xgemm (true, true, v1.complex_matrix_value (), 
-                             false, false, v2.complex_matrix_value ()));
+  return octave_value(xgemm (v1.complex_matrix_value (), 
+                             v2.complex_matrix_value (),
+                             blas_conj_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_herm, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
-  return octave_value(xgemm (false, false, v1.complex_matrix_value (), 
-                             true, true, v2.complex_matrix_value ()));
+  return octave_value(xgemm (v1.complex_matrix_value (), 
+                             v2.complex_matrix_value (),
+                             blas_no_trans, blas_conj_trans));
 }
 
 DEFBINOP (trans_ldiv, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
   MatrixType typ = v1.matrix_type ();
   
   ComplexMatrix ret = xleftdiv (v1.complex_matrix_value (), 
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -49,18 +49,18 @@ DEFBINOP_OP (mul, complex_matrix, matrix
 
 DEFBINOP (mul_trans, complex_matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
 
   ComplexMatrix m1 = v1.complex_matrix_value ();
   Matrix m2 = v2.matrix_value ();
 
-  return ComplexMatrix (xgemm (false, real (m1), true, m2),
-                        xgemm (false, imag (m1), true, m2));
+  return ComplexMatrix (xgemm (real (m1), m2, blas_no_trans, blas_trans),
+                        xgemm (imag (m1), m2, blas_no_trans, blas_trans));
 }
 
 DEFBINOP (div, complex_matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   ComplexMatrix ret = xdiv (v1.complex_matrix_value (), 
diff --git a/src/OPERATORS/op-fcm-fcm.cc b/src/OPERATORS/op-fcm-fcm.cc
--- a/src/OPERATORS/op-fcm-fcm.cc
+++ b/src/OPERATORS/op-fcm-fcm.cc
@@ -111,39 +111,43 @@ DEFBINOP (ldiv, float_complex_matrix, fl
 
   v1.matrix_type (typ);
   return ret;
 }
 
 DEFBINOP (trans_mul, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_complex_matrix&);
-  return octave_value(xgemm (true, false, v1.float_complex_matrix_value (), 
-                             false, false, v2.float_complex_matrix_value ()));
+  return octave_value(xgemm (v1.float_complex_matrix_value (), 
+                             v2.float_complex_matrix_value (),
+                             blas_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_trans, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_complex_matrix&);
-  return octave_value(xgemm (false, false, v1.float_complex_matrix_value (), 
-                             true, false, v2.float_complex_matrix_value ()));
+  return octave_value(xgemm (v1.float_complex_matrix_value (), 
+                             v2.float_complex_matrix_value (),
+                             blas_no_trans, blas_trans));
 }
 
 DEFBINOP (herm_mul, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_complex_matrix&);
-  return octave_value(xgemm (true, true, v1.float_complex_matrix_value (), 
-                             false, false, v2.float_complex_matrix_value ()));
+  return octave_value(xgemm (v1.float_complex_matrix_value (), 
+                             v2.float_complex_matrix_value (),
+                             blas_conj_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_herm, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_complex_matrix&);
-  return octave_value(xgemm (false, false, v1.float_complex_matrix_value (), 
-                             true, true, v2.float_complex_matrix_value ()));
+  return octave_value(xgemm (v1.float_complex_matrix_value (), 
+                             v2.float_complex_matrix_value (),
+                             blas_no_trans, blas_conj_trans));
 }
 
 DEFBINOP (trans_ldiv, float_complex_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, 
 		   const octave_float_complex_matrix&);
   MatrixType typ = v1.matrix_type ();
   
diff --git a/src/OPERATORS/op-fcm-fm.cc b/src/OPERATORS/op-fcm-fm.cc
--- a/src/OPERATORS/op-fcm-fm.cc
+++ b/src/OPERATORS/op-fcm-fm.cc
@@ -51,18 +51,18 @@ DEFBINOP_OP (mul, float_complex_matrix, 
 
 DEFBINOP (mul_trans, float_complex_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_matrix&);
 
   FloatComplexMatrix m1 = v1.float_complex_matrix_value ();
   FloatMatrix m2 = v2.float_matrix_value ();
 
-  return FloatComplexMatrix (xgemm (false, real (m1), true, m2),
-                             xgemm (false, imag (m1), true, m2));
+  return FloatComplexMatrix (xgemm (real (m1), m2, blas_no_trans, blas_trans),
+                             xgemm (imag (m1), m2, blas_no_trans, blas_trans));
 }
 
 DEFBINOP (div, float_complex_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, 
 		   const octave_float_matrix&);
   MatrixType typ = v2.matrix_type ();
   
diff --git a/src/OPERATORS/op-fm-fcm.cc b/src/OPERATORS/op-fm-fcm.cc
--- a/src/OPERATORS/op-fm-fcm.cc
+++ b/src/OPERATORS/op-fm-fcm.cc
@@ -53,18 +53,18 @@ DEFBINOP_OP (mul, float_matrix, float_co
 
 DEFBINOP (trans_mul, float_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_complex_matrix&);
 
   FloatMatrix m1 = v1.float_matrix_value ();
   FloatComplexMatrix m2 = v2.float_complex_matrix_value ();
 
-  return FloatComplexMatrix (xgemm (true, m1, false, real (m2)),
-                             xgemm (true, m1, false, imag (m2)));
+  return FloatComplexMatrix (xgemm (m1, real (m2), blas_trans, blas_no_trans),
+                             xgemm (m1, imag (m2), blas_trans, blas_no_trans));
 }
 
 DEFBINOP (div, float_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, 
 		   const octave_float_complex_matrix&);
   MatrixType typ = v2.matrix_type ();
   
diff --git a/src/OPERATORS/op-fm-fm.cc b/src/OPERATORS/op-fm-fm.cc
--- a/src/OPERATORS/op-fm-fm.cc
+++ b/src/OPERATORS/op-fm-fm.cc
@@ -94,25 +94,27 @@ DEFBINOP (ldiv, float_matrix, float_matr
 
   v1.matrix_type (typ);
   return ret;
 }
 
 DEFBINOP (trans_mul, float_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_matrix&);
-  return octave_value(xgemm (true, v1.float_matrix_value (), 
-                             false, v2.float_matrix_value ()));
+  return octave_value(xgemm (v1.float_matrix_value (), 
+                             v2.float_matrix_value (),
+                             blas_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_trans, float_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_matrix&);
-  return octave_value(xgemm (false, v1.float_matrix_value (), 
-                             true, v2.float_matrix_value ()));
+  return octave_value(xgemm (v1.float_matrix_value (), 
+                             v2.float_matrix_value (),
+                             blas_no_trans, blas_trans));
 }
 
 DEFBINOP (trans_ldiv, float_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_matrix&);
   MatrixType typ = v1.matrix_type ();
   
   FloatMatrix ret = xleftdiv (v1.float_matrix_value (), 
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -51,18 +51,18 @@ DEFBINOP_OP (mul, matrix, complex_matrix
 
 DEFBINOP (trans_mul, matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
 
   Matrix m1 = v1.matrix_value ();
   ComplexMatrix m2 = v2.complex_matrix_value ();
 
-  return ComplexMatrix (xgemm (true, m1, false, real (m2)),
-                        xgemm (true, m1, false, imag (m2)));
+  return ComplexMatrix (xgemm (m1, real (m2), blas_trans, blas_no_trans),
+                        xgemm (m1, imag (m2), blas_trans, blas_no_trans));
 }
 
 DEFBINOP (div, matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   ComplexMatrix ret = xdiv (v1.matrix_value (), 
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -92,23 +92,25 @@ DEFBINOP (ldiv, matrix, matrix)
 
   v1.matrix_type (typ);
   return ret;
 }
 
 DEFBINOP (trans_mul, matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
-  return octave_value(xgemm (true, v1.matrix_value (), false, v2.matrix_value ()));
+  return octave_value(xgemm (v1.matrix_value (), v2.matrix_value (),
+                             blas_trans, blas_no_trans));
 }
 
 DEFBINOP (mul_trans, matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
-  return octave_value(xgemm (false, v1.matrix_value (), true, v2.matrix_value ()));
+  return octave_value(xgemm (v1.matrix_value (), v2.matrix_value (),
+                             blas_no_trans, blas_trans));
 }
 
 DEFBINOP (trans_ldiv, matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
   MatrixType typ = v1.matrix_type ();
   
   Matrix ret = xleftdiv (v1.matrix_value (), v2.matrix_value (), typ, blas_trans);
