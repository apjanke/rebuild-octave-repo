# HG changeset patch
# User Rik <rik@octave.org>
# Date 1416716363 28800
#      Sat Nov 22 20:19:23 2014 -0800
# Branch gui-release
# Node ID 2a790328fc509e329969dc7e08a17dfe542701d7
# Parent  cd2a75e5cd6ebc4953bc16a56e7fe207d084e811
# Parent  88847d5d1a9614893de9c6e570da47caa3ca0e2b
maint: Periodic merge of stable to gui-release.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -923,40 +923,45 @@ LIBS="$save_LIBS"
 OCTAVE_CHECK_LIB(fftw3, FFTW3,
   [FFTW3 library not found.  The slower FFTPACK library will be used instead.],
   [fftw3.h], [fftw_plan_dft_1d])
 
 OCTAVE_CHECK_LIB(fftw3f, FFTW3F,
   [FFTW3F library not found.  The slower FFTPACK library will be used instead.],
   [fftw3.h], [fftwf_plan_dft_1d])
 
-## Check for the multithreaded FFTW library.
-## Fallback to singlethreaded if not found or disabled
+## Check command line for the option to disable multi-threaded FFTW
 build_fftw_threads=yes
 AC_ARG_ENABLE([fftw-threads],
   [AS_HELP_STRING([--disable-fftw-threads],
     [disable Multi-threaded FFTW])],
   [if test "$enableval" = no; then
      build_fftw_threads=no
    fi],
   [])
 
-if test $build_fftw_threads = yes; then
-  OCTAVE_CHECK_FFTW_THREADS(fftw3, fftw_plan_with_nthreads)
-  OCTAVE_CHECK_FFTW_THREADS(fftw3f, fftwf_plan_with_nthreads)
-fi
-
-## Octave is currently unable to use FFTW unless both float
-## and double versions are available.
+## Octave is currently unable to use FFTW unless
+## both float and double versions are available.
 
 AM_CONDITIONAL([AMCOND_HAVE_FFTW],
   [test -n "$FFTW3_LIBS" && test -n "$FFTW3F_LIBS"])
 
 if test -n "$FFTW3_LIBS" && test -n "$FFTW3F_LIBS"; then
   AC_DEFINE(HAVE_FFTW, 1, [Define if you have both FFTW3 and FFTW3F libraries.])
+else
+  ## --without-fftw3 given, or one of the FFTW3 libs not installed.
+  ## Don't check for FFTW threads as this is now pointless.
+  build_fftw_threads=no
+fi
+
+## Check for the multithreaded FFTW library.
+## Fallback to singlethreaded if not found or disabled
+if test $build_fftw_threads = yes; then
+  OCTAVE_CHECK_FFTW_THREADS(fftw3, fftw_plan_with_nthreads)
+  OCTAVE_CHECK_FFTW_THREADS(fftw3f, fftwf_plan_with_nthreads)
 fi
 
 ## Subdirectory of liboctave/cruft to build if FFTW is not found.
 FFT_DIR="fftpack"
 AC_SUBST(FFT_DIR)
 
 ### Check for GLPK library and header.
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1024,17 +1024,17 @@ Format the optional arguments under the 
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{error: }.\n\
 \n\
 Calling @code{error} also sets Octave's internal error state such that\n\
 control will return to the top level without evaluating any more\n\
 commands.  This is useful for aborting from functions or scripts.\n\
 \n\
-If the error message does not end with a new line character, Octave will\n\
+If the error message does not end with a newline character, Octave will\n\
 print a traceback of all the function calls leading to the error.  For\n\
 example, given the following function definitions:\n\
 \n\
 @example\n\
 @group\n\
 function f () g (); end\n\
 function g () h (); end\n\
 function h () nargin == 1 || error (\"nargin != 1\"); end\n\
@@ -1052,20 +1052,20 @@ error: nargin != 1\n\
 error: called from:\n\
 error:   error at line -1, column -1\n\
 error:   h at line 1, column 27\n\
 error:   g at line 1, column 15\n\
 error:   f at line 1, column 15\n\
 @end group\n\
 @end example\n\
 \n\
-If the error message ends in a new line character, Octave will print the\n\
+If the error message ends in a newline character, Octave will print the\n\
 message but will not display any traceback messages as it returns\n\
 control to the top level.  For example, modifying the error message\n\
-in the previous example to end in a new line causes Octave to only print\n\
+in the previous example to end in a newline causes Octave to only print\n\
 a single message:\n\
 \n\
 @example\n\
 @group\n\
 function h () nargin == 1 || error (\"nargin != 1\\n\"); end\n\
 f ()\n\
 error: nargin != 1\n\
 @end group\n\
@@ -1088,17 +1088,17 @@ endif\n\
 error (err_msg);\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 which will only stop execution if an error has been found.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences (e.g., @qcode{\"\\n\"} => newline) are processed in @var{template}\n\
+sequences (e.g., \"\\n\" => newline) are processed in @var{template}\n\
 regardless of whether @var{template} has been defined within single quotes\n\
 as long as there are two or more input arguments.\n\
 Use a second backslash to stop interpolation of the escape sequence (e.g.,\n\
 \"\\\\n\") or use the @code{regexptranslate} function.\n\
 @seealso{warning, lasterror}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1266,17 +1266,17 @@ and the third argument is @qcode{\"local
 will be set temporarily, until the end of the current function.\n\
 Changes to warning states that are set locally affect the current\n\
 function and all functions called from the current scope.  The\n\
 previous warning state is restored on return from the current\n\
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences (e.g., @qcode{\"\\n\"} => newline) are processed in @var{template}\n\
+sequences (e.g., \"\\n\" => newline) are processed in @var{template}\n\
 regardless of whether @var{template} has been defined within single quotes\n\
 as long as there are two or more input arguments.\n\
 Use a second backslash to stop interpolation of the escape sequence (e.g.,\n\
 \"\\\\n\") or use the @code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3325,16 +3325,18 @@ octave_stream::read (const Array<double>
                 {
                   nr = 0;
                   nc = 0;
                 }
               else if (count != nr * nc)
                 {
                   if (count % nr != 0)
                     nc = count / nr + 1;
+                  else
+                    nc = count / nr;
 
                   if (count < nr)
                     nr = count;
                 }
 
               retval = finalize_read (input_buf_list, input_buf_elts, count,
                                       nr, nc, input_type, output_type, ffmt);
             }
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -604,8 +604,17 @@
 %!test
 %! id = tmpfile ();
 %! fwrite (id, char (0:15));
 %! frewind (id);
 %! [data, count] = fread (id, [3, Inf], "4*uint16", 3);
 %! assert (data, [256, 1798; 770, 3083; 1284, 3597]);
 %! assert (count, 6);
 %! fclose (id);
+
+%!test
+%! id = tmpfile ();
+%! fwrite (id, "abcd");
+%! frewind (id);
+%! [data, count] = fread (id, [2, 3], "char");
+%! assert (data, [97, 99; 98, 100]);
+%! assert (count, 4);
+%! fclose (id);
