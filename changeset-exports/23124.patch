# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1484944811 -3600
#      Fri Jan 20 21:40:11 2017 +0100
# Node ID 9e54152e382bc1c44de4e70c09dad37b2c637ade
# Parent  c6ca5fe1505cc050962c87c4c476a964d89b4139
Add new types of constraints for graphics properties (bug #50041).

* graphics.in.h, graphics.cc: Add new type of constraint (finite_type)
to double, row_vector and array properties. Extend support of range
constraints to row_vector and array properties. Add these constraints to
axes and figure properties.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1456,16 +1456,64 @@ array_property::validate (const octave_v
                     }
                   else if (v.is_empty ())
                     break;
                 }
             }
         }
     }
 
+  if (xok)
+    {
+      Matrix v_mat = v.matrix_value ();
+      // Check min and max
+      if (! octave::math::isnan (minval.first))
+        {
+          for (octave_idx_type i = 0; i < v_mat.numel (); i++)
+            if (minval.second && minval.first > v_mat(i))
+              error ("set: \"%s\" must be greater than or equal to %g",
+                     get_name ().c_str (), minval.first);
+            else if (! minval.second && minval.first >= v_mat(i))
+              error ("set: \"%s\" must be greater than %g",
+                     get_name ().c_str (), minval.first);
+        }
+
+      if (! octave::math::isnan (maxval.first))
+        {
+          for (octave_idx_type i = 0; i < v_mat.numel (); i++)
+            if (maxval.second && maxval.first < v_mat(i))
+              error ("set: \"%s\" must be less than or equal to %g",
+                     get_name ().c_str (), maxval.first);
+            else if (! maxval.second && maxval.first <= v_mat(i))
+              error ("set: \"%s\" must be less than %g",
+                     get_name ().c_str (), maxval.first);
+        }
+
+      if (finite_constraint == NO_CHECK) { /* do nothing */ }
+      else if (finite_constraint == FINITE)
+        {
+          for (octave_idx_type i = 0; i < v_mat.numel (); i++)
+            if (! octave::math::finite (v_mat(i)))
+              error ("set: \"%s\" must be finite", get_name ().c_str ());
+        }
+      else if (finite_constraint == NOT_NAN)
+        {
+          for (octave_idx_type i = 0; i < v_mat.numel (); i++)
+            if (octave::math::isnan (v_mat(i)))
+              error ("set: \"%s\" must not be nan", get_name ().c_str ());
+        }
+      else if (finite_constraint == NOT_INF)
+        {
+          for (octave_idx_type i = 0; i < v_mat.numel (); i++)
+            if (octave::math::isinf (v_mat(i)))
+              error ("set: \"%s\" must not be infinite", get_name ().c_str ());
+        }
+
+    }
+
   return xok;
 }
 
 bool
 array_property::is_equal (const octave_value& v) const
 {
   if (data.type_name () == v.type_name ())
     {
@@ -4515,38 +4563,54 @@ void
 axes::properties::init (void)
 {
   position.add_constraint (dim_vector (1, 4));
   outerposition.add_constraint (dim_vector (1, 4));
   tightinset.add_constraint (dim_vector (1, 4));
   looseinset.add_constraint (dim_vector (1, 4));
   colororder.add_constraint (dim_vector (-1, 3));
   dataaspectratio.add_constraint (3);
+  dataaspectratio.add_constraint ("min", 0, false);
+  dataaspectratio.add_constraint (FINITE);
   plotboxaspectratio.add_constraint (3);
+  plotboxaspectratio.add_constraint ("min", 0, false);
+  plotboxaspectratio.add_constraint (FINITE);
   // FIXME: Should these use dimension vectors?  Currently can set 'xlim' to
   // any matrix size, but only first two elements are used.
   alim.add_constraint (2);
+  alim.add_constraint (NOT_NAN);
   clim.add_constraint (2);
+  clim.add_constraint (NOT_NAN);
   xlim.add_constraint (2);
+  xlim.add_constraint (NOT_NAN);
   ylim.add_constraint (2);
+  ylim.add_constraint (NOT_NAN);
   zlim.add_constraint (2);
+  zlim.add_constraint (NOT_NAN);
   xtick.add_constraint (dim_vector (1, -1));
+  xtick.add_constraint (FINITE);
   ytick.add_constraint (dim_vector (1, -1));
+  ytick.add_constraint (FINITE);
   ztick.add_constraint (dim_vector (1, -1));
+  ztick.add_constraint (FINITE);
   ticklength.add_constraint (dim_vector (1, 2));
   Matrix vw (1, 2, 0);
   vw(1) = 90;
   view = vw;
   view.add_constraint (dim_vector (1, 2));
   cameraposition.add_constraint (3);
+  cameraposition.add_constraint (FINITE);
   cameratarget.add_constraint (3);
+  cameratarget.add_constraint (FINITE);
   Matrix upv (1, 3, 0.0);
   upv(2) = 1.0;
   cameraupvector = upv;
   cameraupvector.add_constraint (3);
+  cameraupvector.add_constraint (FINITE);
+  cameraviewangle.add_constraint (FINITE);
   currentpoint.add_constraint (dim_vector (2, 3));
 
   // Range constraints for double properties
   fontsize.add_constraint ("min", 0.0, false);
   gridalpha.add_constraint ("min", 0.0, true);
   gridalpha.add_constraint ("max", 1.0, true);
   labelfontsizemultiplier.add_constraint ("min", 0.0, false);
   linewidth.add_constraint ("min", 0.0, false);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1144,51 +1144,71 @@ private:
   enum current_enum { color_t, radio_t } current_type;
   color_values color_val;
   radio_values radio_val;
   std::string current_val;
 };
 
 // ---------------------------------------------------------------------
 
+enum finite_type
+{
+  NO_CHECK,
+  FINITE,
+  NOT_NAN,
+  NOT_INF
+};
 class double_property : public base_property
 {
 public:
   double_property (const std::string& nm, const graphics_handle& h,
                    double d = 0)
     : base_property (nm, h),
-      current_val (d),
+      current_val (d), finite_constraint (NO_CHECK),
       minval (std::pair<double, bool> (octave_NaN, true)),
       maxval (std::pair<double, bool> (octave_NaN, true)) { }
 
   double_property (const double_property& p)
     : base_property (p), current_val (p.current_val),
+      finite_constraint (NO_CHECK),
       minval (std::pair<double, bool> (octave_NaN, true)),
       maxval (std::pair<double, bool> (octave_NaN, true)) { }
 
   octave_value get (void) const { return octave_value (current_val); }
 
   double double_value (void) const { return current_val; }
 
   double_property& operator = (const octave_value& val)
   {
     set (val);
     return *this;
   }
 
-  base_property* clone (void) const { return new double_property (*this); }
+  base_property* clone (void) const
+  {
+    double_property *p = new double_property (*this);
+
+    p->finite_constraint = finite_constraint;
+    p->minval = minval;
+    p->maxval = maxval;
+
+    return p;
+  }
 
   void add_constraint (const std::string& type, double val, bool inclusive)
   {
     if (type == "min")
       minval = std::pair<double, bool> (val, inclusive);
     else if (type == "max")
       maxval = std::pair<double, bool> (val, inclusive);
   }
 
+  void add_constraint (const finite_type finite)
+  { finite_constraint = finite; }
+
 protected:
   bool do_set (const octave_value& v)
   {
     if (! v.is_scalar_type () || ! v.is_real_type ())
       error ("set: invalid value for double property \"%s\"",
              get_name ().c_str ());
 
     double new_val = v.double_value ();
@@ -1209,27 +1229,45 @@ protected:
         if (maxval.second && maxval.first < new_val)
           error ("set: \"%s\" must be less than or equal to %g",
                  get_name ().c_str (), maxval.first);
         else if (! maxval.second && maxval.first <= new_val)
           error ("set: \"%s\" must be less than %g",
                  get_name ().c_str (), maxval.first);
       }
 
+      if (finite_constraint == NO_CHECK) { /* do nothing */ }
+      else if (finite_constraint == FINITE)
+        {
+          if (! octave::math::finite (new_val))
+            error ("set: \"%s\" must be finite", get_name ().c_str ());
+        }
+      else if (finite_constraint == NOT_NAN)
+        {
+          if (octave::math::isnan (new_val))
+            error ("set: \"%s\" must not be nan", get_name ().c_str ());
+        }
+      else if (finite_constraint == NOT_INF)
+        {
+          if (octave::math::isinf (new_val))
+            error ("set: \"%s\" must not be infinite", get_name ().c_str ());
+        }
+
     if (new_val != current_val)
       {
         current_val = new_val;
         return true;
       }
 
     return false;
   }
 
 private:
   double current_val;
+  finite_type finite_constraint;
   std::pair<double, bool> minval, maxval;
 };
 
 // ---------------------------------------------------------------------
 
 class double_radio_property : public base_property
 {
 public:
@@ -1313,47 +1351,64 @@ private:
 // ---------------------------------------------------------------------
 
 class array_property : public base_property
 {
 public:
   array_property (void)
     : base_property ("", graphics_handle ()), data (Matrix ()),
       xmin (), xmax (), xminp (), xmaxp (),
-      type_constraints (), size_constraints ()
+      type_constraints (), size_constraints (), finite_constraint (NO_CHECK),
+      minval (std::pair<double, bool> (octave_NaN, true)),
+      maxval (std::pair<double, bool> (octave_NaN, true))
   {
     get_data_limits ();
   }
 
   array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
     : base_property (nm, h), data (m.is_sparse_type () ? m.full_value () : m),
       xmin (), xmax (), xminp (), xmaxp (),
-      type_constraints (), size_constraints ()
+      type_constraints (), size_constraints (), finite_constraint (NO_CHECK),
+      minval (std::pair<double, bool> (octave_NaN, true)),
+      maxval (std::pair<double, bool> (octave_NaN, true))
   {
     get_data_limits ();
   }
 
   // This copy constructor is only intended to be used
   // internally to access min/max values; no need to
   // copy constraints.
   array_property (const array_property& p)
     : base_property (p), data (p.data),
       xmin (p.xmin), xmax (p.xmax), xminp (p.xminp), xmaxp (p.xmaxp),
-      type_constraints (), size_constraints ()
+      type_constraints (), size_constraints (), finite_constraint (NO_CHECK),
+      minval (std::pair<double, bool> (octave_NaN, true)),
+      maxval (std::pair<double, bool> (octave_NaN, true))
   { }
 
   octave_value get (void) const { return data; }
 
   void add_constraint (const std::string& type)
   { type_constraints.insert (type); }
 
   void add_constraint (const dim_vector& dims)
   { size_constraints.push_back (dims); }
 
+  void add_constraint (const finite_type finite)
+  { finite_constraint = finite; }
+
+  void add_constraint (const std::string& type, double val, bool inclusive)
+  {
+    if (type == "min")
+      minval = std::pair<double, bool> (val, inclusive);
+    else if (type == "max")
+      maxval = std::pair<double, bool> (val, inclusive);
+  }
+
   double min_val (void) const { return xmin; }
   double max_val (void) const { return xmax; }
   double min_pos (void) const { return xminp; }
   double max_neg (void) const { return xmaxp; }
 
   Matrix get_limits (void) const
   {
     Matrix m (1, 4);
@@ -1373,16 +1428,19 @@ public:
   }
 
   base_property* clone (void) const
   {
     array_property *p = new array_property (*this);
 
     p->type_constraints = type_constraints;
     p->size_constraints = size_constraints;
+    p->finite_constraint = finite_constraint;
+    p->minval = minval;
+    p->maxval = maxval;
 
     return p;
   }
 
 protected:
   bool do_set (const octave_value& v)
   {
     octave_value tmp = v.is_sparse_type () ? v.full_value () : v;
@@ -1414,16 +1472,18 @@ private:
 protected:
   octave_value data;
   double xmin;
   double xmax;
   double xminp;
   double xmaxp;
   std::set<std::string> type_constraints;
   std::list<dim_vector> size_constraints;
+  finite_type finite_constraint;
+  std::pair<double, bool> minval, maxval;
 };
 
 class row_vector_property : public array_property
 {
 public:
   row_vector_property (const std::string& nm, const graphics_handle& h,
                        const octave_value& m)
     : array_property (nm, h, m)
@@ -1446,16 +1506,26 @@ public:
     array_property::add_constraint (type);
   }
 
   void add_constraint (const dim_vector& dims)
   {
     array_property::add_constraint (dims);
   }
 
+  void add_constraint (const finite_type finite)
+  {
+    array_property::add_constraint (finite);
+  }
+
+  void add_constraint (const std::string& type, double val, bool inclusive)
+  {
+    array_property::add_constraint (type, val, inclusive);
+  }
+
   void add_constraint (octave_idx_type len)
   {
     size_constraints.remove (dim_vector (1, -1));
     size_constraints.remove (dim_vector (-1, 1));
     size_constraints.remove (dim_vector (0, 0));
 
     add_constraint (dim_vector (1, len));
     add_constraint (dim_vector (len, 1));
@@ -3488,21 +3558,25 @@ public:
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       alphamap.add_constraint (dim_vector (-1, 1));
       colormap.add_constraint (dim_vector (-1, 3));
       outerposition.add_constraint (dim_vector (1, 4));
+      outerposition.add_constraint (FINITE);
       paperposition.add_constraint (dim_vector (1, 4));
+      paperposition.add_constraint (FINITE);
       papersize.add_constraint (dim_vector (1, 2));
+      papersize.add_constraint (FINITE);
       pointershapecdata.add_constraint (dim_vector (16, 16));
       pointershapehotspot.add_constraint (dim_vector (1, 2));
       position.add_constraint (dim_vector (1, 4));
+      position.add_constraint (FINITE);
     }
 
   private:
     Matrix get_auto_paperposition (void);
 
     void update_paperpositionmode (void)
     {
       if (paperpositionmode.is ("auto"))
