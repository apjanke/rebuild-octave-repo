# HG changeset patch
# User jwe
# Date 951364533 0
#      Thu Feb 24 03:55:33 2000 +0000
# Node ID c11d138d654aa644da93548ad68c532d7f77d101
# Parent  b8fa63b7ea79e44a02c5dcf1f2dd134d8a63ed58
[project @ 2000-02-24 03:55:32 by jwe]

diff --git a/doc/interpreter/bugs.txi b/doc/interpreter/bugs.txi
--- a/doc/interpreter/bugs.txi
+++ b/doc/interpreter/bugs.txi
@@ -74,17 +74,17 @@ to turn the pager off.
 @item
 If you get messages like
 
 @example
 Input line too long
 @end example
 
 when trying to plot many lines on one graph, you have probably generated
-a plot command that is too larger for @code{gnuplot}'s fixed-length
+a plot command that is too large for @code{gnuplot}'s fixed-length
 buffer for commands.  Splitting up the plot command doesn't help because
 replot is implemented in gnuplot by simply appending the new plotting
 commands to the old command line and then evaluating it again.
 
 You can demonstrate this `feature' by running gnuplot and doing
 something like
 
 @example
diff --git a/scripts/linear-algebra/rank.m b/scripts/linear-algebra/rank.m
--- a/scripts/linear-algebra/rank.m
+++ b/scripts/linear-algebra/rank.m
@@ -20,21 +20,21 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rank (@var{a}, @var{tol})
 ## Compute the rank of @var{a}, using the singular value decomposition.
 ## The rank is taken to be the number  of singular values of @var{a} that
 ## are greater than the specified tolerance @var{tol}.  If the second
 ## argument is omitted, it is taken to be
 ##
 ## @example
-## tol = max (size (@var{a})) * sigma (1) * eps;
+## tol = max (size (@var{a})) * sigma(1) * eps;
 ## @end example
 ##
 ## @noindent
-## where @code{eps} is machine precision and @code{sigma} is the largest
+## where @code{eps} is machine precision and @code{sigma(1)} is the largest
 ## singular value of @var{a}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = rank (A, tol)
 
   if (nargin == 1)
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mesh (@var{x}, @var{y}, @var{z})
-## Plot a mesh given matrices @code{x}, and @var{y} from @code{meshdom} and
+## Plot a mesh given matrices @var{x}, and @var{y} from @code{meshdom} and
 ## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ## @end deftypefn
 ## @seealso{plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom,
 ## contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
diff --git a/scripts/plot/meshdom.m b/scripts/plot/meshdom.m
--- a/scripts/plot/meshdom.m
+++ b/scripts/plot/meshdom.m
@@ -17,19 +17,16 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} meshdom (@var{x}, @var{y})
 ## Given vectors of @var{x} and @var{y} coordinates, return two matrices
 ## corresponding to the @var{x} and @var{y} coordinates of the mesh.
 ##
-## See the file @file{sombrero.m} for an example of using @code{mesh} and
-## @code{meshdom}.
-##
 ## Note: this function is provided for compatibility with older versions
 ## of @sc{Matlab}.  You should use @code{meshgrid} instead.
 ## @end deftypefn
 
 ## Author: jwe
 
 function [xx, yy] = meshdom (x, y)
 
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -115,17 +115,17 @@ upper triangular.\n\
 @end ifinfo\n\
 \n\
 The permuted QR factorization @code{[@var{q}, @var{r}, @var{p}] =\n\
 qr (@var{a})} forms the QR factorization such that the diagonal\n\
 entries of @code{r} are decreasing in magnitude order.  For example,\n\
 given the matrix @code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
-[q, r, pi] = qr(a)\n\
+[q, r, p] = qr(a)\n\
 @end example\n\
 \n\
 @noindent\n\
 returns\n\
 \n\
 @example\n\
 q = \n\
 \n\
diff --git a/src/DLD-FUNCTIONS/schur.cc b/src/DLD-FUNCTIONS/schur.cc
--- a/src/DLD-FUNCTIONS/schur.cc
+++ b/src/DLD-FUNCTIONS/schur.cc
@@ -130,17 +130,17 @@ with blocks of size at most\n\
 @iftex\n\
 @tex\n\
 $2\\times 2$\n\
 @end tex\n\
 @end iftex\n\
 @ifinfo\n\
 @code{2 x 2}\n\
 @end ifinfo\n\
-blocks along the diagonal.  The diagonal elements of\n\
+along the diagonal.  The diagonal elements of\n\
 @iftex\n\
 @tex\n\
 $S$\n\
 @end tex\n\
 @end iftex\n\
 @ifinfo\n\
 @code{s}\n\
 @end ifinfo\n\
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -349,19 +349,19 @@ error: nargin != 1\n\
   return handle_message (error, "unspecified error", args);
 }
 
 DEFUN (warning, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} warning (@var{msg})\n\
 Print a warning message @var{msg} prefixed by the string @samp{warning: }.  \n\
 After printing the warning message, Octave will continue to execute\n\
-commands.  You should use this function should when you want to notify\n\
-the user of an unusual condition, but only when it makes sense for your\n\
-program to go on.\n\
+commands.  You should use this function when you want to notify the user\n\
+of an unusual condition, but only when it makes sense for your program\n\
+to go on.\n\
 @end deftypefn")
 {
   return handle_message (warning, "unspecified warning", args);
 }
 
 DEFUN (usage, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usage (@var{msg})\n\
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -326,17 +326,17 @@ Computes the complementary error functio
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute the exponential of @var{x}.  To compute the matrix exponential,\n\
 see @ref{Linear Algebra}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (finite, 0, xfinite, xfinite, 0, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} finite (@var{x})\n\
-Return 1 for elements of @var{x} that are NaN values and zero\n\
+Return 1 for elements of @var{x} that are finite values and zero\n\
 otherwise. For example,\n\
 \n\
 @example\n\
 @group\n\
 finite ([13, Inf, NaN])\n\
      @result{} [ 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
