# HG changeset patch
# User jwe
# Date 987712503 0
#      Thu Apr 19 20:35:03 2001 +0000
# Node ID 7d053641164ef783340f5e72d69d5dbb5464afb7
# Parent  8cb594807664a14c6acafbcc0183cd0903eb6672
[project @ 2001-04-19 20:35:02 by jwe]

diff --git a/readline/CHANGELOG b/readline/CHANGELOG
--- a/readline/CHANGELOG
+++ b/readline/CHANGELOG
@@ -449,8 +449,17 @@ doc/Makefile.in
 				    3/6
 				    ---
 doc/history.{0,3}, doc/history_3.ps
 	- new manual page for history library
 
 doc/Makefile.in
 	- rules to install and uninstall history.3 in ${man3dir}
 	- rules to build history.0 and history_3.ps
+
+				    4/2
+				    ---
+configure.in
+	- changed LIBVERSION to `4.2'
+
+				    4/5
+				    ---
+[readline-4.2 frozen]
diff --git a/readline/CHANGES b/readline/CHANGES
--- a/readline/CHANGES
+++ b/readline/CHANGES
@@ -90,19 +90,24 @@ bb. rl_get_keymap_by_name now finds keym
     `set keymap EMACS' works.
 
 cc. The history file writing and truncation functions now return a useful
     status on error.
 
 dd. Fixed a bug that could cause applications to dereference a NULL pointer
     if a NULL second argument was passed to history_expand().
 
+ee. If a hook function assigned to rl_event_hook sets rl_done to a non-zero
+    value, rl_read_key() now immediately returns '\n' (which is assumed to   
+    be bound to accept-line).
+
 2.  New Features in Readline
 
-a.  The blink timeout for paren matching is now settable by applications.
+a.  The blink timeout for paren matching is now settable by applications,
+    via the rl_set_paren_blink_timeout() function.
 
 b.  _rl_executing_macro has been renamed to rl_executing_macro, which means
     it's now part of the public interface.
 
 c.  Readline has a new variable, rl_readline_state, which is a bitmap that
     encapsulates the current state of the library; intended for use by
     callbacks and hook functions.
 
diff --git a/readline/ChangeLog b/readline/ChangeLog
--- a/readline/ChangeLog
+++ b/readline/ChangeLog
@@ -1,8 +1,12 @@
+2001-04-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Update to readline-4.2.
+
 2001-03-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install, uninstall): For Octave, do nothing.
 
 	* Update to readline-4.2-beta2.
 
 2001-02-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/readline/README b/readline/README
--- a/readline/README
+++ b/readline/README
@@ -32,16 +32,19 @@ may work:
         env CC=cc ./configure
 
 Read the file INSTALL in this directory for more information about how
 to customize and control the build process.
 
 The file rlconf.h contains C preprocessor defines that enable and disable
 certain Readline features.
 
+The special make target `everything' will build the static and shared
+libraries (if the target platform supports them) and the examples.
+
 Examples
 ========
 
 There are several example programs that use Readline features in the
 examples directory.  The `rl' program is of particular interest.  It
 is a command-line interface to Readline, suitable for use in shell
 scripts in place of `read'.
 
@@ -59,18 +62,18 @@ not shared library creation is supported
 of variables that are substituted into shlib/Makefile.  If you
 try to build shared libraries on an unsupported platform, `make'
 will display a message asking you to update support/shobj-conf for
 your platform.
 
 If you need to update support/shobj-conf, you will need to create
 a `stanza' for your operating system and compiler.  The script uses
 the value of host_os and ${CC} as determined by configure.  For
-instance, FreeBSD 2.2.5 with any version of gcc is identified as
-`freebsd2.2.5-gcc*'.
+instance, FreeBSD 4.2 using the ELF object file format  with any
+version of gcc is identified as `freebsdelf4.2-gcc*'.
 
 In the stanza for your operating system-compiler pair, you will need to
 define several variables.  They are:
 
 SHOBJ_CC	The C compiler used to compile source files into shareable
 		object files.  This is normally set to the value of ${CC}
 		by configure, and should not need to be changed.
 
@@ -139,17 +142,17 @@ Reporting Bugs
 ==============
 
 Bug reports for Readline should be sent to:
 
         bug-readline@gnu.org
 
 When reporting a bug, please include the following information:
 
-        * the version number and release status of Readline (e.g., 4.0-release)
+        * the version number and release status of Readline (e.g., 4.2-release)
         * the machine and OS that it is running on
         * a list of the compilation flags or the contents of `config.h', if
           appropriate
         * a description of the bug
         * a recipe for recreating the bug reliably
         * a fix for the bug if you have one!
 
 If you would like to contact the Readline maintainer directly, send mail
diff --git a/readline/configure.in b/readline/configure.in
--- a/readline/configure.in
+++ b/readline/configure.in
@@ -1,16 +1,16 @@
 dnl
 dnl Configure script for readline library
 dnl
 dnl report bugs to chet@po.cwru.edu
 dnl
 dnl Process this file with autoconf to produce a configure script.
-AC_REVISION([for Readline 4.2, version 2.25, from autoconf version] AC_ACVERSION)
-LIBVERSION=4.2-beta
+AC_REVISION([for Readline 4.2, version 2.26, from autoconf version] AC_ACVERSION)
+LIBVERSION=4.2
 
 AC_INIT(readline.h)
 AC_CONFIG_HEADER(config.h)
 
 dnl make sure we are using a recent autoconf version
 AC_PREREQ(2.10)
 
 AC_CONFIG_AUX_DIR(./support)
diff --git a/readline/doc/hstech.texinfo b/readline/doc/hstech.texinfo
--- a/readline/doc/hstech.texinfo
+++ b/readline/doc/hstech.texinfo
@@ -418,17 +418,17 @@ a line.  The default is @samp{^}.
 During tokenization, if this character is seen as the first character
 of a word, then it and all subsequent characters up to a newline are
 ignored, suppressing history expansion for the remainder of the line.
 This is disabled by default.
 @end deftypevar
 
 @deftypevar {char *} history_word_delimiters
 The characters that separate tokens for \fBhistory_tokenize()\fP.
-The default value is @code{" \t\n()<>;&|$"}.
+The default value is @code{" \t\n()<>;&|"}.
 @end deftypevar
 
 @deftypevar {char *} history_no_expand_chars
 The list of characters which inhibit history expansion if found immediately
 following @var{history_expansion_char}.  The default is space, tab, newline,
 carriage return, and @samp{=}.
 @end deftypevar
 
diff --git a/readline/doc/manvers.texinfo b/readline/doc/manvers.texinfo
--- a/readline/doc/manvers.texinfo
+++ b/readline/doc/manvers.texinfo
@@ -1,6 +1,6 @@
-@set EDITION 4.2-beta
-@set VERSION 4.2-beta
-@set UPDATED 2001 Mar 6
-@set UPDATE-MONTH Mar 2001
+@set EDITION 4.2
+@set VERSION 4.2
+@set UPDATED 2001 Apr 16
+@set UPDATE-MONTH Apr 2001
 
-@set LASTCHANGE Tue Mar  6 13:25:07 EST 2001
+@set LASTCHANGE Mon Apr 16 10:53:58 EDT 2001
diff --git a/readline/doc/rltech.texinfo b/readline/doc/rltech.texinfo
--- a/readline/doc/rltech.texinfo
+++ b/readline/doc/rltech.texinfo
@@ -500,17 +500,17 @@ the user.  Only valid in a bindable comm
 @deftypevar {int} rl_numeric_arg
 Set to the value of any numeric argument explicitly specified by the user
 before executing the current Readline function.  Only valid in a bindable
 command function.
 @end deftypevar
 
 @deftypevar {int} rl_editing_mode
 Set to a value denoting Readline's current editing mode.  A value of
-@var{emacs_mode} means Readline is currently in emacs mode; @var{vi_mode}
+@var{1} means Readline is currently in emacs mode; @var{0}
 means that vi mode is active.
 @end deftypevar
 
 
 @node Readline Convenience Functions
 @section Readline Convenience Functions
 
 @menu
@@ -522,16 +522,17 @@ means that vi mode is active.
 * Allowing Undoing::	How to make your functions undoable.
 * Redisplay::		Functions to control line display.
 * Modifying Text::	Functions to modify @code{rl_line_buffer}.
 * Character Input::	Functions to read keyboard input.
 * Terminal Management::	Functions to manage terminal settings.
 * Utility Functions::	Generally useful functions and hooks.
 * Miscellaneous Functions::	Functions that don't fall into any category.
 * Alternate Interface::	Using Readline in a `callback' fashion.
+* A Readline Example::		An example Readline function.
 @end menu
 
 @node Function Naming
 @subsection Naming a Function
 
 The user can dynamically change the bindings of keys while using
 Readline.  This is done by representing the function with a descriptive
 name.  The user is able to type the descriptive name when referring to
@@ -911,16 +912,18 @@ by a key bound to a macro.  Not especial
 @node Character Input
 @subsection Character Input
 
 @deftypefun int rl_read_key (void)
 Return the next character available from Readline's current input stream.
 This handles input inserted into
 the input stream via @var{rl_pending_input} (@pxref{Readline Variables})
 and @code{rl_stuff_char()}, macros, and characters read from the keyboard.
+While waiting for input, this function will call any function assigned to
+the @code{rl_event_hook} variable.
 @end deftypefun
 
 @deftypefun int rl_getc (FILE *stream)
 Return the next character available from @var{stream}, which is assumed to
 be the keyboard.
 @end deftypefun
 
 @deftypefun int rl_stuff_char (int c)
@@ -935,16 +938,23 @@ is called.  This sets @var{rl_pending_in
 @end deftypefun
 
 @deftypefun int rl_clear_pending_input (void)
 Unset @var{rl_pending_input}, effectively negating the effect of any
 previous call to @code{rl_execute_next()}.  This works only if the
 pending input has not already been read with @code{rl_read_key()}.
 @end deftypefun
 
+@deftypefun int rl_set_keyboard_input_timeout (int u)
+While waiting for keyboard input in @code{rl_read_key()}, Readline will
+wait for @var{u} microseconds for input before calling any function
+assigned to @code{rl_event_hook}.  The default waiting period is
+one-tenth of a second.  Returns the old timeout value.
+@end deftypefun
+
 @node Terminal Management
 @subsection Terminal Management
 
 @deftypefun void rl_prep_terminal (int meta_flag)
 Modify the terminal settings for Readline's use, so @code{readline()}
 can read a single character at a time from the keyboard.
 The @var{meta_flag} argument should be non-zero if Readline should
 read eight-bit input.
@@ -1056,16 +1066,21 @@ file (@pxref{Readline Init File Syntax})
 
 @deftypefun void rl_variable_dumper (int readable)
 Print the readline variable names and their current values
 to @code{rl_outstream}.
 If @var{readable} is non-zero, the list is formatted in such a way
 that it can be made part of an @code{inputrc} file and re-read.
 @end deftypefun
 
+@deftypefun int rl_set_paren_blink_timeout (int u)
+Set the time interval (in microseconds) that Readline waits when showing
+a balancing character when @code{blink-matching-paren} has been enabled.
+@end deftypefun
+
 @node Alternate Interface
 @subsection Alternate Interface
 
 An alternate interface is available to plain @code{readline()}.  Some
 applications need to interleave keyboard I/O with file, device, or
 window system I/O, typically by using a main loop to @code{select()}
 on various file descriptors.  To accomodate this need, readline can
 also be invoked as a `callback' function from an event loop.  There
@@ -1088,17 +1103,18 @@ line.  @code{EOF} is  indicated by calli
 @code{NULL} line.
 @end deftypefun
 
 @deftypefun void rl_callback_handler_remove (void)
 Restore the terminal to its initial state and remove the line handler.
 This may be called from within a callback as well as independently.
 @end deftypefun
 
-@subsection An Example
+@node A Readline Example
+@subsection A Readline Example
 
 Here is a function which changes lowercase characters to their uppercase
 equivalents, and uppercase characters to lowercase.  If
 this function was bound to @samp{M-c}, then typing @samp{M-c} would
 change the case of the character under point.  Typing @samp{M-1 0 M-c}
 would change the case of the following 10 characters, leaving the cursor on
 the last character changed.
 
diff --git a/readline/examples/Makefile.in b/readline/examples/Makefile.in
--- a/readline/examples/Makefile.in
+++ b/readline/examples/Makefile.in
@@ -65,16 +65,17 @@ rlversion: rlversion.o $(READLINE_LIB)
 	$(CC) $(LDFLAGS) -o $@ rlversion.o -lreadline $(TERMCAP_LIB)
 
 histexamp: histexamp.o $(HISTORY_LIB)
 	$(CC) $(LDFLAGS) -o $@ histexamp.o -lhistory $(TERMCAP_LIB)
 
 clean mostlyclean:
 	$(RM) $(OBJECTS)
 	$(RM) $(EXECUTABLES) *.exe
+	$(RM) rlfe.o rlfe
 
 distclean maintainer-clean: clean
 	$(RM) Makefile
 
 fileman.o: fileman.c
 rltest.o: rltest.c
 rl.o: rl.c
 rlversion.o: rlversion.c
diff --git a/readline/input.c b/readline/input.c
--- a/readline/input.c
+++ b/readline/input.c
@@ -361,16 +361,18 @@ rl_read_key ()
 	return (c);
 
       /* If the user has an event function, then call it periodically. */
       if (rl_event_hook)
 	{
 	  while (rl_event_hook && rl_get_char (&c) == 0)
 	    {
 	      (*rl_event_hook) ();
+	      if (rl_done)		/* XXX - experimental */
+		return ('\n');
 	      rl_gather_tyi ();
 	    }
 	}
       else
 	{
 	  if (rl_get_char (&c) == 0)
 	    c = (*rl_getc_function) (rl_instream);
 	}
diff --git a/readline/readline.c b/readline/readline.c
--- a/readline/readline.c
+++ b/readline/readline.c
@@ -62,17 +62,17 @@
 #include "readline.h"
 #include "history.h"
 
 #include "rlprivate.h"
 #include "rlshell.h"
 #include "xmalloc.h"
 
 #ifndef RL_LIBRARY_VERSION
-#  define RL_LIBRARY_VERSION "4.2-beta"
+#  define RL_LIBRARY_VERSION "4.2"
 #endif
 
 /* Evaluates its arguments multiple times. */
 #define SWAP(s, e)  do { int t; t = s; s = e; e = t; } while (0)
 
 /* Forward declarations used in this file. */
 void _rl_free_history_entry __P((HIST_ENTRY *));
 
diff --git a/readline/readline.h b/readline/readline.h
--- a/readline/readline.h
+++ b/readline/readline.h
@@ -345,18 +345,19 @@ extern int rl_reset_line_state __P((void
 extern int rl_crlf __P((void));
 
 #if (defined (__STDC__) || defined (__cplusplus)) && defined (USE_VARARGS) && defined (PREFER_STDARG)
 extern int rl_message (const char *, ...);
 #else
 extern int rl_message ();
 #endif
 
+extern int rl_show_char __P((int));
+
 /* Undocumented in texinfo manual. */
-extern int rl_show_char __P((int));
 extern int rl_character_len __P((int, int));
 
 /* Save and restore internal prompt redisplay information. */
 extern void rl_save_prompt __P((void));
 extern void rl_restore_prompt __P((void));
 
 /* Modifying text. */
 extern int rl_insert_text __P((const char *));
