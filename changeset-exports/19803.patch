# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1424522008 -3600
#      Sat Feb 21 13:33:28 2015 +0100
# Node ID 415864f5b85f0f16e4fc0c9fdc517e76c3bc1583
# Parent  e195d8408ce8177414138daae801fdd257edc8c1
communicating actual working directory to the editor (#44298)

* file-editor-tab.cc (file-editor-tab.cc): init new _ced variable storing
  current editor directory, do not store directory in _file_name;
  (set_current_directory): new slot for setting current editor directory;
  (handle_context_menu_edit): use _ced for current directory;
  (valid_file_name): just check whether name is empty;
  (save_file_as): set directory to current edit directory;

* file-editor-tab.h: new variable _ced; new slot for setting _ced,

* file-editor.cc (update_octave_directory): new slot for setting current
  editor directory to wirking directory;
  (handle_editor_state_changed): do not ced from current file name;
  (add_file_editor_tab) connect new signal for setting directory to related
  slot in file_editor_tab

* file-editor.h: new slot and new signal updating directory

* main-window.cc (change_directory): do not call update directory function in
  file_browser_window because the latter is notified by a signal now;
  (construct_octave_qt_link): connect change_directory_signal from
  octave_qt_link to appropriate slots in editor and file browser

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -64,26 +64,22 @@ along with Octave; see the file COPYING.
 #include <oct-map.h>
 
 bool file_editor_tab::_cancelled = false;
 
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
 file_editor_tab::file_editor_tab (const QString& directory_arg)
 {
-  QString directory = directory_arg;
   _lexer_apis = 0;
   _is_octave_file = true;
 
-  // Make sure there is a slash at the end of the directory name
-  // for identification when saved later.
-  if (directory.count () && directory.at (directory.count () - 1) != '/')
-    directory.append ("/");
+  _ced = directory_arg;
 
-  _file_name = directory;
+  _file_name = "";
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
 
   connect (_edit_area, SIGNAL (cursorPositionChanged (int, int)),
            this, SLOT (handle_cursor_moved (int,int)));
 
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
@@ -195,16 +191,22 @@ file_editor_tab::closeEvent (QCloseEvent
   else
     {
       e->accept ();
       emit tab_remove_request ();
     }
 }
 
 void
+file_editor_tab::set_current_directory (const QString& dir)
+{
+  _ced = dir;
+}
+
+void
 file_editor_tab::handle_context_menu_edit (const QString& word_at_cursor)
 {
   // search for a subfunction in actual file (this is done at first because
   // octave finds this function before other with same name in the search path
   QRegExp rxfun1 ("^[\t ]*function[^=]+=[\t ]*"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
@@ -250,18 +252,25 @@ file_editor_tab::handle_context_menu_edi
 
   if (type == QString("built-in function"))
     { // built in function: can't edit
       message = tr ("%1 is a built-in function");
     }
   else if (type.isEmpty ())
     {
       // function not known to octave -> try directory of edited file
-      QFileInfo file = QFileInfo (_file_name);
-      file = QFileInfo (QDir (file.canonicalPath ()), word_at_cursor + ".m");
+      // get directory
+      QDir dir;
+      if (_file_name.isEmpty ())
+        dir = _ced;
+      else
+        dir = QDir (QFileInfo (_file_name).canonicalPath ());
+
+      // function not known to octave -> try directory of edited file
+      QFileInfo file = QFileInfo (dir, word_at_cursor + ".m");
 
       if (file.exists ())
         {
           filename = file.canonicalFilePath (); // local file exists
         }
       else
         { // local file does not exist -> try private directory
           file = QFileInfo (_file_name);
@@ -313,34 +322,36 @@ file_editor_tab::set_file_name (const QS
   if (!fileName.isEmpty ())
     _file_system_watcher.addPath (fileName);
   _file_name = fileName;
 
   // update lexer after _file_name change
   update_lexer ();
 
   // update the file editor with current editing directory
-  emit editor_state_changed (_copy_available, _file_name, _is_octave_file);
+  emit editor_state_changed (_copy_available, _is_octave_file);
 
   // add the new file to the mru list
   emit mru_add_file (_file_name);
 }
 
 // valid_file_name (file): checks whether "file" names a file
 // by default, "file" is empty, then _file_name is checked
 bool
 file_editor_tab::valid_file_name (const QString& file)
 {
-  QString file_name;
   if (file.isEmpty ())
-    file_name = _file_name;
-  else
-    file_name = file;
-  return (! file_name.isEmpty ()
-          && file_name.at (file_name.count () - 1) != '/');
+    {
+      if (_file_name.isEmpty ())
+        return false;
+      else
+        return true;
+    }
+
+  return true;
 }
 
 void
 file_editor_tab::handle_margin_clicked (int margin, int line,
                                         Qt::KeyboardModifiers state)
 {
   if (margin == 1)
     {
@@ -1208,18 +1219,17 @@ file_editor_tab::update_window_title (bo
   else
     emit file_name_changed (title, tooltip);
 }
 
 void
 file_editor_tab::handle_copy_available (bool enableCopy)
 {
   _copy_available = enableCopy;
-  emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name),
-                             _is_octave_file);
+  emit editor_state_changed (_copy_available, _is_octave_file);
 }
 
 // show_dialog: shows a modal or non modal dialog depending on input arg
 void
 file_editor_tab::show_dialog (QDialog *dlg, bool modal)
 {
   dlg->setAttribute (Qt::WA_DeleteOnClose);
   if (modal)
@@ -1585,25 +1595,17 @@ file_editor_tab::save_file_as (bool remo
         { // it is not an octave file
           fileDialog->selectNameFilter (filters.at (1));  // "All Files"
           fileDialog->setDefaultSuffix ("");              // no default suffix
         }
     }
   else
     {
       fileDialog->selectFile ("");
-
-      if (_file_name.isEmpty ())
-        fileDialog->setDirectory (QDir::currentPath ());
-      else
-        {
-          // The file name is actually the directory name from the
-          // constructor argument.
-          fileDialog->setDirectory (_file_name);
-        }
+      fileDialog->setDirectory (_ced);
 
       // propose a name corresponding to the function name
       QString fname = get_function_name ();
       if (! fname.isEmpty ())
         fileDialog->selectFile (fname + ".m");
     }
 
   fileDialog->setAcceptMode (QFileDialog::AcceptSave);
@@ -1940,18 +1942,17 @@ file_editor_tab::change_editor_state (co
   if (_find_dialog && _find_dialog_is_visible)
     {
       _find_dialog->setGeometry (_find_dialog_geometry);
       QPoint p = _find_dialog->pos ();
       _find_dialog->move(p.x ()+10, p.y ()+10);
       _find_dialog->show ();
     }
 
-  emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name),
-                             _is_octave_file);
+  emit editor_state_changed (_copy_available, _is_octave_file);
 }
 
 void
 file_editor_tab::file_name_query (const QWidget *ID)
 {
   // A zero (null pointer) means that all file editor tabs
   // should respond, otherwise just the desired file editor tab.
   if (ID != this && ID != 0)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -69,16 +69,17 @@ public slots:
 
   // Change to a different editor tab by identifier tag.
   void change_editor_state (const QWidget *ID);
 
   // Simply transmit file name.
   void file_name_query (const QWidget *ID);
 
   void set_focus (const QWidget *ID);
+  void set_current_directory (const QString& dir);
   void context_help (const QWidget *ID, bool);
   void context_edit (const QWidget *ID);
   void check_modified_file (void);
   void save_file (const QWidget *ID);
   void save_file (const QWidget *ID, const QString& fileName,
                   bool remove_on_success);
   void save_file_as (const QWidget *ID);
   void print_file (const QWidget *ID);
@@ -124,18 +125,17 @@ public slots:
 
   void file_has_changed (const QString& fileName);
 
   void handle_context_menu_edit (const QString&);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
-  void editor_state_changed (bool copy_available, const QString& fileName,
-                             bool is_octave_file);
+  void editor_state_changed (bool copy_available, bool is_octave_file);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, QWidget *);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void set_global_edit_shortcuts_signal (bool);
   void request_open_file (const QString&);
@@ -225,16 +225,17 @@ private:
   QLabel *_row_indicator;
   QLabel *_col_indicator;
   QLabel *_eol_indicator;
 
   QsciScintilla::EolMode _save_as_desired_eol;
 
   QString _file_name;
   QString _file_name_short;
+  QString _ced;
 
   bool _long_title;
   bool _copy_available;
   bool _is_octave_file;
   bool _always_reload_changed_files;
 
   QFileSystemWatcher _file_system_watcher;
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -113,16 +113,23 @@ file_editor::focus (void)
   octave_dock_widget::focus ();
 
   // set focus to current tab
   QWidget *fileEditorTab = _tab_widget->currentWidget ();
   if (fileEditorTab)
     emit fetab_set_focus (fileEditorTab);
 }
 
+void
+file_editor::update_octave_directory (const QString& dir)
+{
+  ced = dir;
+  emit fetab_set_directory (ced);  // for save dialog
+}
+
 QMenu *
 file_editor::debug_menu (void)
 {
   return _debug_menu;
 }
 
 QToolBar *
 file_editor::toolbar (void)
@@ -1096,39 +1103,27 @@ void
 file_editor::edit_status_update (bool undo, bool redo)
 {
   _undo_action->setEnabled (undo);
   _redo_action->setEnabled (redo);
 }
 
 void
 file_editor::handle_editor_state_changed (bool copy_available,
-                                          const QString& file_name,
                                           bool is_octave_file)
 {
   // In case there is some scenario where traffic could be coming from
   // all the file editor tabs, just process info from the current active tab.
   if (sender () == _tab_widget->currentWidget ())
     {
       _copy_action->setEnabled (copy_available);
       _cut_action->setEnabled (copy_available);
       _run_selection_action->setEnabled (copy_available);
       _run_action->setEnabled (is_octave_file);
 
-      if (!file_name.isEmpty ())
-        {
-          ced = QDir::cleanPath (file_name);
-          int lastslash = ced.lastIndexOf ('/');
-
-          // Test against > 0 because if somehow the directory is "/" the
-          // slash should be retained.  Otherwise, last slash is removed.
-          if (lastslash > 0 && lastslash != ced.count ())
-            ced = ced.left (lastslash);
-        }
-
       setFocusProxy (_tab_widget->currentWidget ());
     }
 }
 
 void
 file_editor::notice_settings (const QSettings *settings)
 {
   int icon_size = settings->value ("toolbar_icon_size", 16).toInt ();
@@ -1609,18 +1604,18 @@ file_editor::add_file_editor_tab (file_e
   connect (f->qsci_edit_area (), SIGNAL (execute_command_in_terminal_signal (const QString&)),
            main_win (), SLOT (execute_command_in_terminal (const QString&)));
 
   // Signals from the file editor_tab
   connect (f, SIGNAL (file_name_changed (const QString&, const QString&)),
            this, SLOT (handle_file_name_changed (const QString&,
                                                  const QString&)));
 
-  connect (f, SIGNAL (editor_state_changed (bool, const QString&, bool)),
-           this, SLOT (handle_editor_state_changed (bool, const QString&, bool)));
+  connect (f, SIGNAL (editor_state_changed (bool, bool)),
+           this, SLOT (handle_editor_state_changed (bool, bool)));
 
   connect (f, SIGNAL (tab_remove_request ()),
            this, SLOT (handle_tab_remove_request ()));
 
   connect (f, SIGNAL (add_filename_to_list (const QString&, QWidget*)),
            this, SLOT (handle_add_filename_to_list (const QString&, QWidget*)));
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
@@ -1651,16 +1646,19 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_save_file (const QWidget*, const QString&,
                                           bool)),
            f, SLOT (save_file (const QWidget*, const QString&, bool)));
 
   connect (this, SIGNAL (fetab_check_modified_file (void)),
            f, SLOT (check_modified_file (void)));
 
   // Signals from the file_editor trivial operations
+  connect (this, SIGNAL (fetab_set_directory (const QString&)),
+           f, SLOT (set_current_directory (const QString&)));
+
   connect (this, SIGNAL (fetab_zoom_in (const QWidget*)),
            f, SLOT (zoom_in (const QWidget*)));
   connect (this, SIGNAL (fetab_zoom_out (const QWidget*)),
            f, SLOT (zoom_out (const QWidget*)));
   connect (this, SIGNAL (fetab_zoom_normal (const QWidget*)),
            f, SLOT (zoom_normal (const QWidget*)));
 
   connect (this, SIGNAL (fetab_context_help (const QWidget*, bool)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -105,16 +105,18 @@ signals:
                                    int line = -1);
   void fetab_set_focus (const QWidget* ID);
   void fetab_scintilla_command (const QWidget* ID, unsigned int sci_msg);
 
   void fetab_zoom_in (const QWidget* ID);
   void fetab_zoom_out (const QWidget* ID);
   void fetab_zoom_normal (const QWidget* ID);
 
+  void fetab_set_directory (const QString& dir);
+
   void request_settings_dialog (const QString&);
   void execute_command_in_terminal_signal (const QString&);
   void file_loaded_signal ();
 
 public slots:
 
   void focus (void);
   void enable_menu_shortcuts (bool);
@@ -182,18 +184,17 @@ public slots:
   void request_completion (bool);
 
   void handle_file_name_changed (const QString& fileName,
                                  const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request (void);
   void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
   void active_tab_changed (int index);
-  void handle_editor_state_changed (bool enableCopy, const QString& fileName,
-                                    bool is_octave_file);
+  void handle_editor_state_changed (bool enableCopy, bool is_octave_file);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
@@ -201,16 +202,17 @@ public slots:
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
   void handle_visibility (bool visible);
 
+  void update_octave_directory (const QString& dir);
 
 protected slots:
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
 
 private slots:
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -808,18 +808,16 @@ main_window::change_directory (const QSt
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index >= 0)
     _current_directory_combo_box->removeItem (index);
 
   _current_directory_combo_box->insertItem (0, dir);
   _current_directory_combo_box->setCurrentIndex (0);
-
-  file_browser_window->update_octave_directory (dir);
 }
 
 void
 main_window::browse_for_directory (void)
 {
   QString dir
     = QFileDialog::getExistingDirectory (this, tr ("Browse directories"), 0,
                                          QFileDialog::ShowDirsOnly |
@@ -1452,16 +1450,20 @@ main_window::construct_octave_qt_link (v
                   const QStringList&, const QStringList&,
                   const QStringList&, const QIntList&)));
 
   connect (_octave_qt_link, SIGNAL (clear_workspace_signal ()),
            _workspace_model, SLOT (clear_workspace ()));
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
+  connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+           file_browser_window, SLOT (update_octave_directory (QString)));
+  connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+           editor_window, SLOT (update_octave_directory (QString)));
 
   connect (_octave_qt_link,
            SIGNAL (execute_command_in_terminal_signal (QString)),
            this, SLOT (execute_command_in_terminal (QString)));
 
   connect (_octave_qt_link,
            SIGNAL (set_history_signal (const QStringList&)),
            history_window, SLOT (set_history (const QStringList&)));
