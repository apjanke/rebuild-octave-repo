# HG changeset patch
# User jwe
# Date 1045730155 0
#      Thu Feb 20 08:35:55 2003 +0000
# Node ID 813effe14ee185c5e4ba8267cdce43890b8ae318
# Parent  de9b588bf0029d7b1f8754f9c471f7a676ada730
[project @ 2003-02-20 08:35:55 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,34 @@
+2003-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.cc (octave_value (const octave_fcn_handle&)): New constructor.
+	* parse.y (get_feval_args): New function.
+	(feval (octave_function *, const octave_value_list&, int)): Likewise.
+	(feval (const octave_value_list&, int)): Allow the first arg to be
+	a function handle as well as a string.
+	* variables.cc (load_function): New function.
+	* pt-walk.h, pt-pr-code.h, pt-pr-code.cc, pt-check.h, pt-check.cc,
+	pt-bp.h, pt-bp.cc: Handle new tree_fcn_handle class.
+	* pt-all.h: Include pt-fcn-handle.h.
+	* pt-fcn-handle.h, pt-fcn-handle.cc, ov-fcn-handle.h,
+	ov-fcn-handle.cc: New files.
+
 2003-02-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (FCN_HANDLE): New token type.
+	(fcn_handle): New non-terminal.
+	(primary_expr): Also accept fcn_handle.
+	(tree_fcn_handle_type): New %type.
+	(union): New field, tree_fcn_handle_type.
+	(make_fcn_handle): New function.
+
+	* lex.l (@{IDENT}): Recognize function handle syntax.
+	(@): Don't recognize "@" as a single token.
+
 	* load-save.cc (struct hdf5_callback_data): Provide constructor.
 	(hdf5_callback_data::name, hdf5_callback_data::doc): Now
 	std::string instead of char*.  Change all uses.
 
 2003-02-18  Roger Banks <rbanks@colsa.com>
 
 	* load-save.cc (read_ascii_data, read_ascii_data,
 	read_mat5_binary_element, save_mat5_binary_element,
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -66,21 +66,21 @@ else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov-cell.h ov.h \
 	ov-fcn.h ov-builtin.h ov-dld-fcn.h ov-mapper.h ov-usr-fcn.h \
-	ov-base-nd-array.h ov-re-nd-array.h ov-typeinfo.h
+	ov-base-nd-array.h ov-re-nd-array.h ov-fcn-handle.h ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
         pt-bp.h	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h \
-	pt-decl.h pt-except.h pt-exp.h pt-id.h pt-idx.h \
+	pt-decl.h pt-except.h pt-exp.h pt-fcn-handle.h pt-id.h pt-idx.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h pt-plot.h \
 	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h \
 
 INCLUDES := Cell.h base-list.h c-file-ptr-stream.h comment-list.h \
 	defun-dld.h defun-int.h defun.h dirfns.h dynamic-ld.h \
 	error.h file-io.h fn-cache.h gripes.h help.h input.h \
 	lex.h load-save.h oct-fstrm.h oct-hist.h oct-iostrm.h \
 	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h oct-stdstrm.h \
@@ -106,23 +106,23 @@ OP_SRC := $(addprefix OPERATORS/, $(OP_X
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
 	ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-base-nd-array.cc ov-re-nd-array.cc \
-	ov-typeinfo.cc
+	ov-fcn-handle.cc ov-typeinfo.cc
 
-PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc pt-cell.cc \
-	pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc \
-	pt-except.cc pt-exp.cc pt-id.cc pt-idx.cc pt-jump.cc \
-	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
-	pt-select.cc pt-stmt.cc pt-unop.cc
+PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
+	pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc \
+	pt-decl.cc pt-except.cc pt-exp.cc pt-fcn-handle.cc pt-id.cc \
+	pt-idx.cc pt-jump.cc pt-loop.cc pt-mat.cc pt-misc.cc \
+	pt-plot.cc pt-pr-code.cc pt-select.cc pt-stmt.cc pt-unop.cc
 
 DIST_SRC := Cell.cc c-file-ptr-stream.cc comment-list.cc \
 	cutils.c data.cc debug.cc defaults.cc defun.cc dirfns.cc \
 	dynamic-ld.cc error.cc file-io.cc fn-cache.cc gripes.cc \
 	help.cc input.cc lex.l load-save.cc main.c mappers.cc \
 	matherr.c oct-fstrm.cc oct-hist.cc oct-iostrm.cc \
 	oct-map.cc oct-obj.cc oct-prcstrm.cc oct-procbuf.cc \
 	oct-stdstrm.cc oct-stream.cc \
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -550,16 +550,24 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 {IDENT}{S}* {
     int id_tok = handle_identifier ();
 
     if (id_tok >= 0)
       return id_tok;
   }
 
 %{
+// Function handles.
+%}
+
+@{IDENT} {
+    TOK_PUSH_AND_RETURN (&yytext[1], FCN_HANDLE);
+  }
+
+%{
 // A new line character.  New line characters inside matrix constants
 // are handled by the <MATRIX_START> start state code above.  If closest
 // nesting is inside parentheses, don't return a row separator.
 %}
 
 {NL} {
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
@@ -741,24 +749,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     do_comma_insert_check ();
     return ')';
   }
 
 "." {
     TOK_RETURN ('.');
   }
 
-"@" {
-    current_input_column++;
-    lexer_flags.cant_be_identifier = false;
-    lexer_flags.quote_is_transpose = false;
-    lexer_flags.convert_spaces_to_comma = false;
-    return '@';
-  }
-
 "+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
 "-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
 "*="	{ XBIN_OP_RETURN (MUL_EQ, false); }
 "/="	{ XBIN_OP_RETURN (DIV_EQ, false); }
 "\\="	{ XBIN_OP_RETURN (LEFTDIV_EQ, false); }
 ".+="	{ XBIN_OP_RETURN (ADD_EQ, false); }
 ".-="	{ XBIN_OP_RETURN (SUB_EQ, false); }
 ".*="	{ XBIN_OP_RETURN (EMUL_EQ, false); }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -49,16 +49,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-file.h"
 #include "ov-list.h"
 #include "ov-cs-list.h"
 #include "ov-colon.h"
 #include "ov-va-args.h"
 #include "ov-builtin.h"
 #include "ov-mapper.h"
 #include "ov-usr-fcn.h"
+#include "ov-fcn-handle.h"
 #include "ov-typeinfo.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "pager.h"
 #include "parse.h"
 #include "pr-output.h"
@@ -544,16 +545,22 @@ octave_value::octave_value (const octave
 }
 
 octave_value::octave_value (octave_function *f)
   : rep (f)
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (const octave_fcn_handle& fh)
+  : rep (new octave_fcn_handle (fh))
+{
+  rep->count = 1;
+}
+
 octave_value::octave_value (const octave_value_list& l, bool is_cs_list)
   : rep (0)
 {
   rep = is_cs_list ? new octave_cs_list (l) : new octave_list (l);
 
   rep->count = 1;
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -39,16 +39,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
 class Octave_map;
 class octave_stream;
 class octave_function;
+class octave_fcn_handle;
 class octave_value_list;
 class octave_lvalue;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
 
@@ -183,16 +184,17 @@ public:
   octave_value (const std::string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const octave_stream& s, int n);
   octave_value (octave_function *f);
+  octave_value (const octave_fcn_handle& fh);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep, int count = 1);
 
   // Copy constructor.
 
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 
 extern void reset_parser (void);
 extern int yylex (void);
 extern int yyparse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
+class octaev_function;
 class symbol_record;
 class symbol_table;
 
 #include "oct-obj.h"
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 extern symbol_table *tmp_local_sym_tab;
 
@@ -98,16 +99,21 @@ extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0);
 
 extern octave_value_list
+feval (octave_function *fcn,
+       const octave_value_list& args = octave_value_list (),
+       int nargout = 0);
+
+extern octave_value_list
 feval (const octave_value_list& args, int nargout = 0);
 
 extern octave_value_list
 eval_string (const std::string&, bool silent, int& parse_status, int hargout);
 
 extern octave_value
 eval_string (const std::string&, bool silent, int& parse_status);
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -177,16 +177,20 @@ make_plot_command (token *tok, plot_limi
 // Finish building a range.
 static tree_expression *
 finish_colon_expression (tree_colon_expression *e);
 
 // Build a constant.
 static tree_constant *
 make_constant (int op, token *tok_val);
 
+// Build a function handle.
+static tree_fcn_handle *
+make_fcn_handle (token *tok_val);
+
 // Build a binary expression.
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2);
 
 // Build a boolean expression.
 static tree_expression *
 make_boolean_op (int op, tree_expression *op1, token *tok_val,
@@ -357,16 +361,17 @@ set_stmt_print_flag (tree_statement_list
 
   // Types for the nonterminals we generate.
   char sep_type;
   tree *tree_type;
   tree_matrix *tree_matrix_type;
   tree_cell *tree_cell_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
+  tree_fcn_handle *tree_fcn_handle_type;
   tree_identifier *tree_identifier_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
   tree_command *tree_command_type;
   tree_if_command *tree_if_command_type;
   tree_if_clause *tree_if_clause_type;
@@ -409,27 +414,29 @@ set_stmt_print_flag (tree_statement_list
 %token <tok_val> STRING STYLE AXES_TAG
 %token <tok_val> FOR WHILE DO UNTIL
 %token <tok_val> IF ELSEIF ELSE
 %token <tok_val> SWITCH CASE OTHERWISE
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL STATIC
+%token <tok_val> FCN_HANDLE
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN VARARGIN VARARGOUT ALL_VA_ARGS
 %token USING TITLE WITH AXES COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> constant magic_colon
+%type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> title matrix cell
 %type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier fcn_name
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> word_list_cmd
@@ -658,20 +665,26 @@ cell_rows1	: cell_or_matrix_row
 
 cell_or_matrix_row
 		: arg_list
 		  { $$ = $1; }
 		| arg_list ','	// Ignore trailing comma.
 		  { $$ = $1; }
 		;
 
+fcn_handle	: FCN_HANDLE
+		  { $$ = make_fcn_handle ($1); }
+		;
+
 primary_expr	: identifier
 		  { $$ = $1; }
 		| constant
 		  { $$ = $1; }
+		| fcn_handle
+		  { $$ = $1; }
 		| matrix
 		  { $$ = $1; }
 		| cell
 		  { $$ = $1; }
 		| '(' expression ')'
 		  { $$ = $2->mark_in_parens (); }
 		;
 
@@ -1907,16 +1920,29 @@ make_constant (int op, token *tok_val)
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
 }
 
+// Make a function handle.
+
+static tree_fcn_handle *
+make_fcn_handle (token *tok_val)
+{
+  int l = tok_val->line ();
+  int c = tok_val->column ();
+
+  tree_fcn_handle *retval = new tree_fcn_handle (tok_val->text (), l, c);
+
+  return retval;
+}
+
 // Build a binary expression.
 
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
 {
   octave_value::binary_op t = octave_value::unknown_binary_op;
 
@@ -3473,60 +3499,98 @@ feval (const std::string& name, const oc
   octave_function *fcn = is_valid_function (name, "feval", 1);
 
   if (fcn)
     retval = fcn->do_multi_index_op (nargout, args);
 
   return retval;
 }
 
+octave_value_list
+feval (octave_function *fcn, const octave_value_list& args, int nargout)
+{
+  octave_value_list retval;
+
+  if (fcn)
+    retval = fcn->do_multi_index_op (nargout, args);
+
+  return retval;
+}
+
+static octave_value_list
+get_feval_args (const octave_value_list& args)
+{
+  int tmp_nargin = args.length () - 1;
+
+  octave_value_list retval (tmp_nargin, octave_value ());
+
+  for (int i = 0; i < tmp_nargin; i++)
+    retval(i) = args(i+1);
+
+  string_vector arg_names = args.name_tags ();
+
+  if (! arg_names.empty ())
+    {
+      // tmp_nargin and arg_names.length () - 1 may differ if
+      // we are passed all_va_args.
+
+      int n = arg_names.length () - 1;
+
+      int len = n > tmp_nargin ? tmp_nargin : n;
+
+      string_vector tmp_arg_names (len);
+
+      for (int i = 0; i < len; i++)
+	tmp_arg_names(i) = arg_names(i+1);
+
+      retval.stash_name_tags (tmp_arg_names);
+    }
+
+  return retval;
+}
+
+
 // Evaluate an Octave function (built-in or interpreted) and return
 // the list of result values.  The first element of ARGS should be a
 // string containing the name of the function to call, then the rest
 // are the actual arguments to the function.  NARGOUT is the number of
 // output arguments expected.
 
 octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
-  if (args.length () > 0)
+  int nargin = args.length ();
+
+  if (nargin > 0)
     {
-      std::string name = args(0).string_value ();
-
-      if (! error_state)
-	{
-	  int tmp_nargin = args.length () - 1;
-
-	  octave_value_list tmp_args (tmp_nargin, octave_value ());
-
-	  for (int i = 0; i < tmp_nargin; i++)
-	    tmp_args(i) = args(i+1);
-
-	  string_vector arg_names = args.name_tags ();
-
-	  if (! arg_names.empty ())
+      octave_value f_arg = args(0);
+
+      if (f_arg.is_string ())
+        {
+	  std::string name = f_arg.string_value ();
+
+	  if (! error_state)
 	    {
-	      // tmp_nargin and arg_names.length () - 1 may differ if
-	      // we are passed all_va_args.
-
-	      int n = arg_names.length () - 1;
-
-	      int len = n > tmp_nargin ? tmp_nargin : n;
-
-	      string_vector tmp_arg_names (len);
-
-	      for (int i = 0; i < len; i++)
-		tmp_arg_names(i) = arg_names(i+1);
-
-	      tmp_args.stash_name_tags (tmp_arg_names);
+	      octave_value_list tmp_args = get_feval_args (args);
+
+	      retval = feval (name, tmp_args, nargout);
 	    }
-
-	  retval = feval (name, tmp_args, nargout);
+	}
+      else
+	{
+	  octave_function *fcn = f_arg.function_value ();
+
+	  if (fcn)
+	    {
+	      octave_value_list tmp_args = get_feval_args (args);
+
+	      retval = feval (fcn, tmp_args, nargout);
+	    }
 	}
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "-*- texinfo -*-\n\
diff --git a/src/pt-all.h b/src/pt-all.h
--- a/src/pt-all.h
+++ b/src/pt-all.h
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-binop.h"
 #include "pt-check.h"
 #include "pt-cmd.h"
 #include "pt-colon.h"
 #include "pt-const.h"
 #include "pt-decl.h"
 #include "pt-except.h"
 #include "pt-exp.h"
+#include "pt-fcn-handle.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-jump.h"
 #include "pt-loop.h"
 #include "pt-mat.h"
 #include "pt-cell.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -437,16 +437,26 @@ tree_breakpoint::visit_constant (tree_co
   if (found)
     return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 }
 
 void 
+tree_breakpoint::visit_fcn_handle (tree_fcn_handle& fh)
+{
+  if (found)
+    return;
+
+  if (fh.line () >= line)
+    take_action (fh);
+}
+
+void 
 tree_breakpoint::visit_parameter_list (tree_parameter_list& lst)
 {
   if (found)
     return;
 
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -94,16 +94,18 @@ tree_breakpoint : public tree_walker
   void visit_cell (tree_cell&);
 
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
+  void visit_fcn_handle (tree_fcn_handle&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_plot_command (tree_plot_command&);
 
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -309,16 +309,21 @@ tree_checker::visit_no_op_command (tree_
 }
 
 void
 tree_checker::visit_constant (tree_constant& /* val */)
 {
 }
 
 void
+tree_checker::visit_fcn_handle (tree_fcn_handle& /* fh */)
+{
+}
+
+void
 tree_checker::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_identifier *elt = *p++;
 
diff --git a/src/pt-check.h b/src/pt-check.h
--- a/src/pt-check.h
+++ b/src/pt-check.h
@@ -78,16 +78,18 @@ public:
   void visit_cell (tree_cell&);
 
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
+  void visit_fcn_handle (tree_fcn_handle&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_plot_command (tree_plot_command&);
 
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -637,16 +637,28 @@ tree_print_code::visit_constant (tree_co
   print_parens (val, "(");
 
   val.print_raw (os, true, print_original_text);
 
   print_parens (val, ")");
 }
 
 void
+tree_print_code::visit_fcn_handle (tree_fcn_handle& fh)
+{
+  indent ();
+
+  print_parens (fh, "(");
+
+  fh.print_raw (os, true, print_original_text);
+
+  print_parens (fh, ")");
+}
+
+void
 tree_print_code::visit_parameter_list (tree_parameter_list& lst)
 {
   tree_parameter_list::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_identifier *elt = *p++;
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -90,16 +90,18 @@ public:
   void visit_cell (tree_cell&);
 
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
+  void visit_fcn_handle (tree_fcn_handle&);
+
   void visit_parameter_list (tree_parameter_list&);
 
   void visit_plot_command (tree_plot_command&);
 
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -42,16 +42,17 @@ class tree_switch_case;
 class tree_switch_case_list;
 class tree_switch_command;
 class tree_index_expression;
 class tree_matrix;
 class tree_cell;
 class tree_multi_assignment;
 class tree_no_op_command;
 class tree_constant;
+class tree_fcn_handle;
 class tree_parameter_list;
 class tree_plot_command;
 class plot_limits;
 class plot_range;
 class tree_postfix_expression;
 class tree_prefix_expression;
 class tree_return_command;
 class tree_return_list;
@@ -141,16 +142,19 @@ public:
 
   virtual void
   visit_no_op_command (tree_no_op_command&) = 0;
 
   virtual void
   visit_constant (tree_constant&) = 0;
 
   virtual void
+  visit_fcn_handle (tree_fcn_handle&) = 0;
+
+  virtual void
   visit_parameter_list (tree_parameter_list&) = 0;
 
   virtual void
   visit_plot_command (tree_plot_command&) = 0;
 
   virtual void
   visit_plot_limits (plot_limits&) = 0;
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -785,16 +785,49 @@ lookup_by_name (const std::string& nm, b
 {
   symbol_record *sym_rec = curr_sym_tab->lookup (nm, true);
 
   lookup (sym_rec, exec_script);
 
   return sym_rec;
 }
 
+octave_function *
+lookup_function (const std::string& nm)
+{
+  octave_function *retval = 0;
+
+  symbol_record *sr = 0;
+
+  if (curr_parent_function)
+    {
+      std::string parent = curr_parent_function->function_name ();
+
+      sr = fbi_sym_tab->lookup (parent + ":" + nm);
+    }
+
+  if (! sr || ! sr->is_function ())
+    {
+      sr = fbi_sym_tab->lookup (nm, true);
+
+      if (sr && ! sr->is_function ())
+	load_fcn_from_file (sr, false);
+    }
+
+  if (sr)
+    {
+      octave_value v = sr->def ();
+
+      if (v.is_function ())
+	retval = v.function_value ();
+    }
+
+  return retval;
+}
+
 octave_value
 get_global_value (const std::string& nm)
 {
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (nm);
 
   if (sr)
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -75,16 +75,19 @@ extern int
 symbol_exist (const std::string& name,
 	      const std::string& type = std::string ());
 
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
+extern octave_function *
+lookup_function (const std::string& nm);
+
 extern octave_value get_global_value (const std::string& nm);
 
 extern void set_global_value (const std::string& nm, const octave_value& val);
 
 extern std::string builtin_string_variable (const std::string&);
 extern int builtin_real_scalar_variable (const std::string&, double&);
 extern octave_value builtin_any_variable (const std::string&);
 
