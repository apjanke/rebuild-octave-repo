# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1460671044 -3600
#      Thu Apr 14 22:57:24 2016 +0100
# Node ID 6da01de4dd8aa443464dac96823bff5cd8dada84
# Parent  c46e2532d4218b6fd3ebeb284b64c1cb48f60b8b
pkg: drop special usage of 'all' in load, unload, and describe (bug #40674)

* pkg.m: special use of the word 'all' in place of package name creates an
an arbitrary limit on package names.  So remove the use of the word 'all'
instead of package names when choosing all packages.  Update documentation.
* pkg/private/load_packages.m, pkg/private/unload_packages.m: remove support
to load and unload all packages.  Loading all packages unconditionally is a
bad idea.  This type of action should be done selectively and explicit.
* scripts/pkg/private/describe.m: default to describe all packages in the
absence of a named package, i.e., 'pkg describe' now describes all packages
while 'pkg describe all' will describe a package named all.

diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -96,32 +96,21 @@
 ## Add named packages to the path.  After loading a package it is
 ## possible to use the functions provided by the package.  For example,
 ##
 ## @example
 ## pkg load image
 ## @end example
 ##
 ## @noindent
-## adds the @code{image} package to the path.  It is possible to load all
-## installed packages at once with the keyword @samp{all}.  Usage:
-##
-## @example
-## pkg load all
-## @end example
+## adds the @code{image} package to the path.
 ##
 ## @item unload
 ## Remove named packages from the path.  After unloading a package it is
-## no longer possible to use the functions provided by the package.  It is
-## possible to unload all installed packages at once with the keyword
-## @samp{all}.  Usage:
-##
-## @example
-## pkg unload all
-## @end example
+## no longer possible to use the functions provided by the package.
 ##
 ## @item list
 ## Show the list of currently installed packages.  For example,
 ##
 ## @example
 ## pkg list
 ## @end example
 ##
@@ -154,26 +143,32 @@
 ## repository.  This requires an internet connection and the cURL library.
 ## For example:
 ##
 ## @example
 ## oct_forge_pkgs = pkg ("list", "-forge")
 ## @end example
 ##
 ## @item describe
-## Show a short description of the named installed packages, with the option
+## Show a short description of installed packages.  With the option
 ## @qcode{"-verbose"} also list functions provided by the package.  For
 ## example,
 ##
 ## @example
-## pkg describe -verbose all
+## pkg describe -verbose
 ## @end example
 ##
 ## @noindent
 ## will describe all installed packages and the functions they provide.
+## Display can be limited to a set of packages:
+##
+## @example
+## pkg describe control signal # describe control and signal packages
+## @end example
+##
 ## If one output is requested a cell of structure containing the
 ## description and list of functions of each package is returned as
 ## output rather than printed on screen:
 ##
 ## @example
 ## desc = pkg ("describe", "secs1d", "image")
 ## @end example
 ##
@@ -404,23 +399,23 @@ function [local_packages, global_package
     case "uninstall"
       if (isempty (files))
         error ("pkg: uninstall action requires at least one package name");
       endif
       uninstall (files, deps, verbose, local_list, global_list, global_install);
 
     case "load"
       if (isempty (files))
-        error ("pkg: load action requires at least one package or 'all'");
+        error ("pkg: load action requires at least one package name");
       endif
       load_packages (files, deps, local_list, global_list);
 
     case "unload"
       if (isempty (files))
-        error ("pkg: unload action requires at least one package or 'all'");
+        error ("pkg: unload action requires at least one package name");
       endif
       unload_packages (files, deps, local_list, global_list);
 
     case "prefix"
       if (isempty (files) && ! nargout)
         printf ("Installation prefix:             %s\n", prefix);
         printf ("Architecture dependent prefix:   %s\n", archprefix);
       elseif (isempty (files) && nargout)
@@ -513,19 +508,16 @@ function [local_packages, global_package
 
     case "build"
       if (numel (files) < 2)
         error ("pkg: build action requires build directory and at least one filename");
       endif
       build (files{1}, files(2:end), verbose);
 
     case "describe"
-      if (isempty (files))
-        error ("pkg: describe action requires at least one package or 'all'");
-      endif
       ## FIXME: name of the output variables is inconsistent with their content
       if (nargout)
         [local_packages, global_packages] = describe (files, verbose,
                                                       local_list, global_list);
       else
         describe (files, verbose, local_list, global_list);
       endif
 
diff --git a/scripts/pkg/private/describe.m b/scripts/pkg/private/describe.m
--- a/scripts/pkg/private/describe.m
+++ b/scripts/pkg/private/describe.m
@@ -24,22 +24,22 @@
 
 function [pkg_desc_list, flag] = describe (pkgnames, verbose,
                                            local_list, global_list)
 
   ## Get the list of installed packages.
   installed_pkgs_lst = installed_packages(local_list, global_list);
   num_packages = length (installed_pkgs_lst);
 
-  describe_all = false;
-  if (any (strcmp ("all", pkgnames)))
+  if (isempty (pkgnames))
     describe_all = true;
     flag(1:num_packages) = {"Not Loaded"};
     num_pkgnames = num_packages;
   else
+    describe_all = false;
     num_pkgnames = length (pkgnames);
     flag(1:num_pkgnames) = {"Not installed"};
   endif
 
   for i = 1:num_packages
     curr_name = installed_pkgs_lst{i}.name;
     if (describe_all)
       name_pos = i;
diff --git a/scripts/pkg/private/load_packages.m b/scripts/pkg/private/load_packages.m
--- a/scripts/pkg/private/load_packages.m
+++ b/scripts/pkg/private/load_packages.m
@@ -29,27 +29,21 @@ function load_packages (files, handle_de
 
   ## Read package names and installdirs into a more convenient format.
   pnames = pdirs = cell (1, num_packages);
   for i = 1:num_packages
     pnames{i} = installed_pkgs_lst{i}.name;
     pdirs{i} = installed_pkgs_lst{i}.dir;
   endfor
 
-  ## Load all.
-  if (length (files) == 1 && strcmp (files{1}, "all"))
-    idx = [1:length(installed_pkgs_lst)];
-  else
-    idx = [];
-    for i = 1:length (files)
-      idx2 = find (strcmp (pnames, files{i}));
-      if (! any (idx2))
-          error ("package %s is not installed", files{i});
-      endif
-      idx(end + 1) = idx2;
-    endfor
-  endif
+  idx = [];
+  for i = 1:length (files)
+    idx2 = find (strcmp (pnames, files{i}));
+    if (! any (idx2))
+      error ("package %s is not installed", files{i});
+    endif
+    idx(end + 1) = idx2;
+  endfor
 
   ## Load the packages, but take care of the ordering of dependencies.
   load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst, true);
 
 endfunction
-
diff --git a/scripts/pkg/private/unload_packages.m b/scripts/pkg/private/unload_packages.m
--- a/scripts/pkg/private/unload_packages.m
+++ b/scripts/pkg/private/unload_packages.m
@@ -33,33 +33,27 @@ function unload_packages (files, handle_
     pnames{i} = installed_pkgs_lst{i}.name;
     pdirs{i} = installed_pkgs_lst{i}.dir;
     pdeps{i} = installed_pkgs_lst{i}.depends;
   endfor
 
   ## Get the current octave path.
   p = strtrim (ostrsplit (path (), pathsep ()));
 
-  if (length (files) == 1 && strcmp (files{1}, "all"))
-    ## Unload all.
-    dirs = pdirs;
-    desc = installed_pkgs_lst;
-  else
-    ## Unload package_name1 ...
-    dirs = {};
-    desc = {};
-    for i = 1:length (files)
-      idx = strcmp (pnames, files{i});
-      if (! any (idx))
-        error ("package %s is not installed", files{i});
-      endif
-        dirs{end+1} = pdirs{idx};
-        desc{end+1} = installed_pkgs_lst{idx};
-      endfor
-  endif
+  ## Unload package_name1 ...
+  dirs = {};
+  desc = {};
+  for i = 1:length (files)
+    idx = strcmp (pnames, files{i});
+    if (! any (idx))
+      error ("package %s is not installed", files{i});
+    endif
+    dirs{end+1} = pdirs{idx};
+    desc{end+1} = installed_pkgs_lst{idx};
+  endfor
 
   ## Check for architecture dependent directories.
   archdirs = {};
   for i = 1:length (dirs)
     tmpdir = getarchdir (desc{i});
     if (exist (tmpdir, "dir"))
       archdirs{end+1} = dirs{i};
       archdirs{end+1} = tmpdir;
@@ -74,9 +68,8 @@ function unload_packages (files, handle_
     idx = strcmp (p, d);
     if (any (idx))
       rmpath (d);
       ## FIXME: We should also check if we need to remove items from EXEC_PATH.
     endif
   endfor
 
 endfunction
-
