# HG changeset patch
# User Rik <rik@octave.org>
# Date 1504657453 25200
#      Tue Sep 05 17:24:13 2017 -0700
# Node ID 584971932defc89b879c37e2a861fa5e1d350492
# Parent  eef8c31ffe97c8325b585d2708d2877c369a6e9f
Improve performance of Sparse constructors (bug #51880).

* Sparse.cc: Use std::fill_n to initialize cidx > c(0) with nz.
Move Sparse constructor from PermMatrix to occur in the same order in the file
as in Sparse.h

* Sparse.h: Adjust spacing to follow Octave coding conventions.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -55,34 +55,16 @@ template <typename T>
 typename Sparse<T>::SparseRep *
 Sparse<T>::nil_rep (void)
 {
   static typename Sparse<T>::SparseRep nr;
   return &nr;
 }
 
 template <typename T>
-Sparse<T>::Sparse (const PermMatrix& a)
-  : rep (new typename Sparse<T>::SparseRep (a.rows (), a.cols (), a.rows ())),
-    dimensions (dim_vector (a.rows (), a.cols ()))
-{
-  octave_idx_type n = a.rows ();
-  for (octave_idx_type i = 0; i <= n; i++)
-    cidx (i) = i;
-
-  const Array<octave_idx_type> pv = a.col_perm_vec ();
-
-  for (octave_idx_type i = 0; i < n; i++)
-    ridx (i) = pv(i);
-
-  for (octave_idx_type i = 0; i < n; i++)
-    data (i) = 1.0;
-}
-
-template <typename T>
 T&
 Sparse<T>::SparseRep::elem (octave_idx_type _r, octave_idx_type _c)
 {
   octave_idx_type i;
 
   if (nzmx <= 0)
     (*current_liboctave_error_handler)
       ("Sparse::SparseRep::elem (octave_idx_type, octave_idx_type): sparse matrix filled");
@@ -155,18 +137,17 @@ Sparse<T>::SparseRep::maybe_compress (bo
 
 template <typename T>
 void
 Sparse<T>::SparseRep::change_length (octave_idx_type nz)
 {
   for (octave_idx_type j = ncols; j > 0 && c[j] > nz; j--)
     c[j] = nz;
 
-  // We shall skip reallocation if we have less than 1/frac extra elements to
-  // discard.
+  // Skip reallocation if we have less than 1/frac extra elements to discard.
   static const int frac = 5;
   if (nz > nzmx || nz < nzmx - nzmx/frac)
     {
       // Reallocate.
       octave_idx_type min_nzmx = std::min (nz, nzmx);
 
       octave_idx_type *new_ridx = new octave_idx_type [nz];
       std::copy_n (r, min_nzmx, new_ridx);
@@ -228,16 +209,34 @@ Sparse<T>::Sparse (octave_idx_type nr, o
     {
       rep = new typename Sparse<T>::SparseRep (nr, nc, 0);
       for (octave_idx_type j = 0; j < nc+1; j++)
         xcidx (j) = 0;
     }
 }
 
 template <typename T>
+Sparse<T>::Sparse (const PermMatrix& a)
+  : rep (new typename Sparse<T>::SparseRep (a.rows (), a.cols (), a.rows ())),
+    dimensions (dim_vector (a.rows (), a.cols ()))
+{
+  octave_idx_type n = a.rows ();
+  for (octave_idx_type i = 0; i <= n; i++)
+    cidx (i) = i;
+
+  const Array<octave_idx_type> pv = a.col_perm_vec ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    ridx (i) = pv(i);
+
+  for (octave_idx_type i = 0; i < n; i++)
+    data (i) = 1.0;
+}
+
+template <typename T>
 Sparse<T>::Sparse (const dim_vector& dv)
   : rep (nullptr), dimensions (dv)
 {
   if (dv.ndims () != 2)
     (*current_liboctave_error_handler)
       ("Sparse::Sparse (const dim_vector&): dimension mismatch");
 
   rep = new typename Sparse<T>::SparseRep (dv(0), dv(1), 0);
@@ -324,22 +323,19 @@ Sparse<T>::Sparse (const Array<T>& a, co
   // Only create rep after input validation to avoid memory leak.
   rep = new typename Sparse<T>::SparseRep (nr, nc, (nzm > 0 ? nzm : 0));
 
   if (rl <= 1 && cl <= 1)
     {
       if (n == 1 && a(0) != T ())
         {
           change_capacity (nzm > 1 ? nzm : 1);
-          xcidx (0) = 0;
           xridx (0) = r(0);
           xdata (0) = a(0);
-
-          for (octave_idx_type j = 0; j < nc; j++)
-            xcidx (j+1) = j >= c(0);
+          std::fill_n (xcidx () + c(0) + 1, nc - c(0), 1);
         }
     }
   else if (a_scalar)
     {
       // This is completely specialized, because the sorts can be simplified.
       T a0 = a(0);
       if (a0 == T ())
         {
@@ -352,21 +348,21 @@ Sparse<T>::Sparse (const Array<T>& a, co
 
           octave_quit ();
 
           const octave_idx_type *rd = rs.raw ();
           // Count unique indices.
           octave_idx_type new_nz = 1;
           for (octave_idx_type i = 1; i < n; i++)
             new_nz += rd[i-1] != rd[i];
+
           // Allocate result.
           change_capacity (nzm > new_nz ? nzm : new_nz);
-          xcidx (0) = 0;
-          for (octave_idx_type j = 0; j < nc; j++)
-            xcidx (j+1) = j >= c(0) ? new_nz : 0;
+          std::fill_n (xcidx () + c(0) + 1, nc - c(0), new_nz);
+
           octave_idx_type *rri = ridx ();
           T *rrd = data ();
 
           octave_quit ();
 
           octave_idx_type k = -1;
           octave_idx_type l = -1;
 
@@ -501,21 +497,21 @@ Sparse<T>::Sparse (const Array<T>& a, co
       octave_quit ();
 
       const octave_idx_type *rd = rs.raw ();
       const octave_idx_type *rdi = rsi.data ();
       // Count unique indices.
       octave_idx_type new_nz = 1;
       for (octave_idx_type i = 1; i < n; i++)
         new_nz += rd[i-1] != rd[i];
+
       // Allocate result.
       change_capacity (nzm > new_nz ? nzm : new_nz);
-      xcidx (0) = 0;
-      for (octave_idx_type j = 0; j < nc; j++)
-        xcidx (j+1) = j >= c(0) ? new_nz : 0;
+      std::fill_n (xcidx () + c(0) + 1, nc - c(0), new_nz);
+
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       octave_quit ();
 
       octave_idx_type k = 0;
       rri[k] = rd[0];
       rrd[k] = a(rdi[0]);
@@ -859,17 +855,16 @@ Sparse<T>::reshape (const dim_vector& ne
                 {
                   octave_idx_type ii, jj;
                   ii = (i_old_rm + ridx (j)) % new_nr;
                   jj = i_old_qu + (i_old_rm + ridx (j)) / new_nr;
 
                   // Original calculation subject to overflow
                   // ii = (i*old_nr + ridx (j)) % new_nr
                   // jj = (i*old_nr + ridx (j)) / new_nr
-
                   for (octave_idx_type k = kk; k < jj; k++)
                     retval.xcidx (k+1) = j;
                   kk = jj;
                   retval.xdata (j) = data (j);
                   retval.xridx (j) = ii;
                 }
             }
           for (octave_idx_type k = kk; k < new_nc; k++)
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -158,17 +158,17 @@ public:
 
 private:
 
   static typename Sparse<T>::SparseRep *nil_rep (void);
 
 public:
 
   Sparse (void)
-    : rep (nil_rep ()), dimensions (dim_vector(0,0))
+    : rep (nil_rep ()), dimensions (dim_vector (0,0))
   {
     rep->count++;
   }
 
   explicit Sparse (octave_idx_type n)
     : rep (new typename Sparse<T>::SparseRep (n)),
       dimensions (dim_vector (n, n)) { }
 
@@ -185,22 +185,22 @@ public:
   Sparse (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz)
     : rep (new typename Sparse<T>::SparseRep (nr, nc, nz)),
       dimensions (dim_vector (nr, nc)) { }
 
   // Both SparseMatrix and SparseBoolMatrix need this ctor, and this
   // is their only common ancestor.
   explicit Sparse (const PermMatrix& a);
 
-  // Type conversion case.  Preserves capacity ().
+  // Type conversion case.  Preserves nzmax.
   template <typename U>
   Sparse (const Sparse<U>& a)
     : rep (new typename Sparse<T>::SparseRep (a.rep->nrows, a.rep->ncols,
-           a.rep->nzmx)),
-    dimensions (a.dimensions)
+                                              a.rep->nzmx)),
+      dimensions (a.dimensions)
   {
     octave_idx_type nz = a.nnz ();
     std::copy_n (a.rep->d, nz, rep->d);
     std::copy_n (a.rep->r, nz, rep->r);
     std::copy_n (a.rep->c, rep->ncols + 1, rep->c);
   }
 
   // No type conversion case.
@@ -265,27 +265,29 @@ public:
     octave_idx_type ret = 0;
     while (cidx (ret+1) < k)
       ret++;
     return ret;
   }
 
   size_t byte_size (void) const
   {
-    return (static_cast<size_t>(cols () + 1) * sizeof (octave_idx_type)
+    return (static_cast<size_t> (cols () + 1) * sizeof (octave_idx_type)
             + static_cast<size_t> (nzmax ())
             * (sizeof (T) + sizeof (octave_idx_type)));
   }
 
   dim_vector dims (void) const { return dimensions; }
 
   Sparse<T> squeeze (void) const { return *this; }
 
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
+  // FIXME: Functions are marked as NORETURN, but they are used with
+  //        a return statement in following code.  Shouldn't that be fixed?
   OCTAVE_NORETURN T range_error (const char *fcn, octave_idx_type n) const;
   OCTAVE_NORETURN T& range_error (const char *fcn, octave_idx_type n);
 
   OCTAVE_NORETURN T range_error (const char *fcn,
                                  octave_idx_type i, octave_idx_type j) const;
   OCTAVE_NORETURN T& range_error (const char *fcn,
                                   octave_idx_type i, octave_idx_type j);
 
@@ -317,23 +319,23 @@ public:
   }
 
   T& xelem (const Array<octave_idx_type>& ra_idx)
   { return xelem (compute_index (ra_idx)); }
 
   T xelem (const Array<octave_idx_type>& ra_idx) const
   { return xelem (compute_index (ra_idx)); }
 
-  // FIXME: would be nice to fix this so that we don't
-  // unnecessarily force a copy, but that is not so easy, and I see no
-  // clean way to do it.
+  // FIXME: would be nice to fix this so that we don't unnecessarily force a
+  // copy, but that is not so easy, and I see no clean way to do it.
 
   T& checkelem (octave_idx_type n)
   {
     if (n < 0 || n >= numel ())
+      // FIXME: Why should we "return" when range_error is OCTAVE_NORETURN? 
       return range_error ("T& Sparse<T>::checkelem", n);
     else
       {
         make_unique ();
         return xelem (n);
       }
   }
 
@@ -431,17 +433,17 @@ public:
   T operator () (const Array<octave_idx_type>& ra_idx) const
   {
     return elem (ra_idx);
   }
 
   Sparse<T> maybe_compress (bool remove_zeros = false)
   {
     if (remove_zeros)
-      make_unique (); // Needs to unshare because elements are removed.
+      make_unique ();  // Need to unshare because elements are removed.
 
     rep->maybe_compress (remove_zeros);
     return (*this);
   }
 
   Sparse<T> reshape (const dim_vector& new_dims) const;
 
   Sparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
@@ -455,17 +457,17 @@ public:
 
   void resize (octave_idx_type r, octave_idx_type c);
 
   void resize (const dim_vector& dv);
 
   void change_capacity (octave_idx_type nz)
   {
     if (nz < nnz ())
-      make_unique (); // Unshare now because elements will be truncated.
+      make_unique ();  // Unshare now because elements will be truncated.
     rep->change_length (nz);
   }
 
   Sparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c);
   Sparse<T>& insert (const Sparse<T>& a, const Array<octave_idx_type>& idx);
 
   bool issquare (void) const { return (dim1 () == dim2 ()); }
 
@@ -590,19 +592,19 @@ public:
   bool test_all (bool (&fcn) (const T&)) const
   { return test<bool (&) (const T&), true> (fcn); }
 
   template <typename U, typename F>
   Sparse<U>
   map (F fcn) const
   {
     Sparse<U> result;
-    U f_zero = fcn (0.);
+    U f_zero = fcn (0.0);
 
-    if (f_zero != 0.)
+    if (f_zero != 0.0)
       {
         octave_idx_type nr = rows ();
         octave_idx_type nc = cols ();
 
         result = Sparse<U> (nr, nc, f_zero);
 
         for (octave_idx_type j = 0; j < nc; j++)
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
