# HG changeset patch
# User Rik <rik@octave.org>
# Date 1460459150 -36000
#      Tue Apr 12 21:05:50 2016 +1000
# Node ID 3cadca91e390dc59bbafd27e806a5691a32edfe7
# Parent  cf227735d5fd3f9aac176c02559c4b90ec55347a
Clean up BIST tests for textscan.

* file-io.cc (Ftextscan): Clean up BIST tests.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1511,60 +1511,59 @@ as the name of the function when reporti
   return textscan_internal (args(0).string_value (), args.splice (0, 1));
 }
 
 /*
 %!test
 %! str = "1,  2,  3,  4\n 5,  ,  ,  8\n 9, 10, 11, 12";
 %! fmtstr = "%f %d %f %s";
 %! c = textscan (str, fmtstr, 2, "delimiter", ",", "emptyvalue", -Inf);
-%! assert (isequal (c{1}, [1;5]));
-%! assert (length (c{1}), 2);
+%! assert (c{1}, [1;5]);
+%! assert (c{3}, [3; -Inf]);
 %! assert (iscellstr (c{4}));
-%! assert (isequal (c{3}, [3; -Inf]));
 
 %!test
 %! b = [10:10:100];
 %! b = [b; 8*b/5];
 %! str = sprintf ("%g miles/hr = %g kilometers/hr\n", b);
 %! fmt = "%f miles/hr = %f kilometers/hr";
 %! c = textscan (str, fmt);
 %! assert (c{1}, b(1,:)', 1e-5);
 %! assert (c{2}, b(2,:)', 1e-5);
 
 %!test
 %! str = "13, -, NA, str1, -25\r\n// Middle line\r\n36, na, 05, str3, 6";
-%! a = textscan (str, "%d %n %f %s %n", "delimiter", ",",
-%!                "treatAsEmpty", {"NA", "na", "-"},"commentStyle", "//");
-%! assert (a{1}, int32 ([13; 36]));
-%! assert (a{2}, [NaN; NaN]);
-%! assert (a{3}, [NaN; 5]);
-%! assert (a{4}, {"str1"; "str3"});
-%! assert (a{5}, [-25; 6]);
+%! c = textscan (str, "%d %n %f %s %n", "delimiter", ",",
+%!                    "treatAsEmpty", {"NA", "na", "-"}, "commentStyle", "//");
+%! assert (c{1}, int32 ([13; 36]));
+%! assert (c{2}, [NaN; NaN]);
+%! assert (c{3}, [NaN; 5]);
+%! assert (c{4}, {"str1"; "str3"});
+%! assert (c{5}, [-25; 6]);
 
 %!test
 %! str = "Km:10 = hhhBjjj miles16hour\r\n";
 %! str = [str "Km:15 = hhhJjjj miles241hour\r\n"];
 %! str = [str "Km:2 = hhhRjjj miles3hour\r\n"];
 %! str = [str "Km:25 = hhhZ\r\n"];
 %! fmt = "Km:%d = hhh%1sjjj miles%dhour";
-%! a = textscan (str, fmt, "delimiter", " ");
-%! assert (a{1}', int32 ([10 15 2 25]));
-%! assert (a{2}', {'B' 'J' 'R' 'Z'});
-%! assert (a{3}', int32 ([16 241 3 0]));
-
-## Test with default endofline parameter
+%! c = textscan (str, fmt, "delimiter", " ");
+%! assert (c{1}', int32 ([10, 15, 2, 25]));
+%! assert (c{2}', {'B' 'J' 'R' 'Z'});
+%! assert (c{3}', int32 ([16, 241, 3, 0]));
+
+## Test with default EndOfLine parameter
 %!test
 %! c = textscan ("L1\nL2", "%s");
 %! assert (c{:}, {"L1"; "L2"});
 
-## Test with endofline parameter set to "" (empty) - newline should be in word
+## Test with EndofLine parameter set to "" (empty) - newline should be in word
 %!test
 %! c = textscan ("L1\nL2", "%s", "endofline", "");
-%! assert (int8 ([c{:}{:}]), int8 ([ 76,  49,  10,  76,  50 ]));
+%! assert (int8 ([c{:}{:}]), int8 ([76, 49, 10, 76, 50]));
 
 ###  Matlab fails this test.  A literal after a conversion is not a delimiter
 #%!test
 #%! ## No delimiters at all besides EOL.  Skip fields, even empty fields
 #%! str = "Text1Text2Text\nTextText4Text\nText57Text";
 #%! c = textscan (str, "Text%*dText%dText");
 #%! assert (c{1}, int32 ([2; 4; 0]));
 
@@ -1597,424 +1596,426 @@ as the name of the function when reporti
 %!test
 %! str = 'First    "the second called ""the middle""" third';
 %! fmt = "%q";
 %! c = textscan (str, fmt);
 %! assert (c{1}, {"First"; 'the second called "the middle"'; "third"});
 
 ## Arbitrary character
 %!test
-%! c = textscan ("a first, \n second, third", "%s %c %11c", 'delimiter', ' ,');
+%! c = textscan ("a first, \n second, third", "%s %c %11c", "delimiter", " ,");
 %! assert (c{1}, {"a"; "ond"});
 %! assert (c{2}, {"f"; "t"});
 %! assert (c{3}, {"irst, \n sec"; "hird"});
 
 ## Field width and non-standard delimiters
 %!test
 %! str = "12;34;123456789;7";
 %! c = textscan (str, "%4d %4d", "delimiter", ";", "collectOutput", 1);
-%! assert (c, {[12 34; 1234 5678; 9 7]});
-
-## Field width and non-standard delimiters
+%! assert (c, {[12, 34; 1234, 5678; 9, 7]});
+
+## Field width and non-standard delimiters (2)
 %!test
 %! str = "12;34;123456789;7";
 %! c = textscan (str, "%4f %f", "delimiter", ";", "collectOutput", 1);
-%! assert (c, {[12 34; 1234 56789; 7 NaN]});
+%! assert (c, {[12, 34; 1234, 56789; 7, NaN]});
 
 ## Ignore trailing delimiter, but use leading one
 %!test
 %! str = "12.234e+2,34, \n12345.789-9876j,78\n,10|3";
 %! c = textscan (str, "%10.2f %f", "delimiter", ",", "collectOutput", 1,
-%!                "expChars", "e|");
-%! assert (c, {[1223 34; 12345.79-9876j 78; NaN 10000]}, 1e-6);
-
+%!                    "expChars", "e|");
+%! assert (c, {[1223, 34; 12345.79-9876j, 78; NaN, 10000]}, 1e-6);
+
+## Multi-character delimiter
 %!test
-%! ## Multi-character delimiter
 %! str = "99end2 space88gap 4564";
 %! c = textscan (str, "%d %s", "delimiter", {"end", "gap", "space"});
 %! assert (c{1}, int32 ([99; 88]));
 %! assert (c{2}, {"2 "; "4564"});
 
+## FIXME: Following two tests still fail (4/13/2016)?
 ### Delimiters as part of literals, and following literals
 #%!test
 #%! str = "12 R&D & 7";
-#%! c = textscan (str, "%f R&D %f", "delimiter", "&", "collectOutput", 1, "EmptyValue", -99);
-#%! assert (c, {[12 -99; 7 -99]});
+#%! c = textscan (str, "%f R&D %f", "delimiter", "&", "collectOutput", 1,
+#%!                    "EmptyValue", -99);
+#%! assert (c, {[12, -99; 7, -99]});
 #
 ### Delimiters as part of literals, and before literals
 #%!test
 #%! str = "12 & R&D 7";
 #%! c = textscan (str, "%f R&D %f", "delimiter", "&", "collectOutput", 1);
 #%! assert (c, {[12 7]});
 
+## Check number of lines read, not number of passes through format string
 %!test
-%! ## Check number of lines read, not number of passes through format string
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1\n2\n3\n4\n5\n6");
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "%f %f", 2);
 %! E = feof (fid);
 %! fclose (fid);
 %! unlink (f);
 %! assert (c, {1, 2});
-%! assert (!E);
-
+%! assert (! E);
+
+## Check number of lines read, not number of passes through format string
 %!test
-%! ## Check number of lines read, not number of passes through format string
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1\r\n2\r3\n4\r\n5\n6");
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "%f %f", 4);
 %! fclose (fid);
 %! unlink (f);
 %! assert (c, {[1;3], [2;4]});
 
+## Check number of lines read, with multiple delimiters
 %!test
-%! ## Check number of lines read, with multiple delimiters
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1-\r\n-2\r3-\n-4\r\n5\n6");
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "%f %f", 4, "delimiter", "-", "multipleDelimsAsOne", 1);
 %! fclose (fid);
 %! unlink (f);
 %! assert (c, {[1;3], [2;4]});
 
+## Check ReturnOnError
 %!test
-%! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! str = "1 2 3\n4 s 6";
 %! fprintf (fid, str);
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "%f %f %f", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
 %! u = textscan (str, "%f %f %f", "ReturnOnError", 1);
 %! assert (c, {[1;4], [2], [3]});
 %! assert (u, {[1;4], [2], [3]});
 
+%! ## Check ReturnOnError (2)
 %!test
-%! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! str = "1 2 3\n4 s 6\n";
 %! fprintf (fid, str);
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "%f %f %f", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
 %! u = textscan (str, "%f %f %f", "ReturnOnError", 1);
 %! assert (c, {[1;4], 2, 3});
 %! assert (u, {[1;4], 2, 3});
 
-%!error <Read error in field 2 of row 2> textscan ("1 2 3\n4 s 6", "%f %f %f", "ReturnOnError", 0)
-
+%!error <Read error in field 2 of row 2>
+%! textscan ("1 2 3\n4 s 6", "%f %f %f", "ReturnOnError", 0);
+
+## Check ReturnOnError (3)
 %!test
-%! ## Check ReturnOnError
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1 s 3\n4 5 6");
 %! fseek (fid, 0, "bof");
 %! c = textscan (fid, "", "ReturnOnError", 1);
 %! fseek (fid, 0, "bof");
 %! fclose (fid);
 %! unlink (f);
 %! assert (c, {1});
 
+## Check ReturnOnError with empty fields
 %!test
-%! ## Check ReturnOnError with empty fields
 %! c = textscan ("1,,3\n4,5,6", "", "Delimiter", ",", "ReturnOnError", 1);
 %! assert (c, {[1;4], [NaN;5], [3;6]});
 
+## Check ReturnOnError with empty fields (2)
 %!test
-%! ## Check ReturnOnError with empty fields
-%! c = textscan ("1,,3\n4,5,6", "%f %f %f", "Delimiter", ",", "ReturnOnError", 1);
+%! c = textscan ("1,,3\n4,5,6", "%f %f %f", "Delimiter", ",",
+%!               "ReturnOnError", 1);
 %! assert (c, {[1;4], [NaN;5], [3;6]});
 
+## Check ReturnOnError in first column
 %!test
-%! ## Check ReturnOnError in first column
 %! c = textscan ("1 2 3\ns 5 6", "", "ReturnOnError", 1);
 %! assert (c, {1, 2, 3});
 
-## Test input validation
-%!error textscan ()
-%!error textscan (single (40))
-%!error textscan ({40})
-%!error <must be a string> textscan ("Hello World", 2)
-#%!error <cannot provide position information> [C, pos] = textscan ("Hello World")
-%!error <at most one character or> textscan ("Hello World", '%s', 'EndOfLine', 3)
-%!error <'%z' is not a valid format specifier> textscan ("1.0", "%z")
-%!error <no valid format conversion specifiers> textscan ("1.0", "foo")
-
-## Test incomplete first data line
-%! R = textscan (['Empty1' char(10)], 'Empty%d %f');
-%! assert (R{1}, int32 (1));
-%! assert (isempty (R{2}), true);
+## FIXME: This test fails (4/14/16)
+### Test incomplete first data line
+#%!test
+#%! R = textscan (['Empty1' char(10)], 'Empty%d %f');
+#%! assert (R{1}, int32 (1));
+#%! assert (isempty (R{2}), true);
 
 ## bug #37023
 %!test
 %! data = textscan ("   1. 1 \n 2 3\n", '%f %f');
 %! assert (data{1}, [1; 2], 1e-15);
 %! assert (data{2}, [1; 3], 1e-15);
 
 ## Whitespace test (bug #37333) using delimiter ";"
 %!test
-%! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = "C:/code/meas;";
 %! tc{1, end+1} = " C:/code/sim;";
 %! tc{1, end+1} = "C:/code/utils;";
 %! string = [tc{:}];
 %! c = textscan (string, "%s", "delimiter", ";");
 %! for k = 1:max (numel (c{1}), numel (tc))
 %!   lh = c{1}{k};
 %!   rh = tc{k};
 %!   rh(rh == ";") = "";
 %!   rh = strtrim (rh);
 %!   assert (strcmp (lh, rh));
-%! end
+%! endfor
 
 ## Whitespace test (bug #37333), adding multipleDelimsAsOne true arg
 %!test
-%! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = " C:/code/meas;";
 %! tc{1, end+1} = "C:/code/sim;;";
 %! tc{1, end+1} = "C:/code/utils;";
 %! string = [tc{:}];
 %! c = textscan (string, "%s", "delimiter", ";", "multipleDelimsAsOne", 1);
 %! for k = 1:max (numel (c{1}), numel (tc))
 %!   lh = c{1}{k};
 %!   rh = tc{k};
 %!   rh(rh == ";") = "";
 %!   rh = strtrim (rh);
 %!   assert (strcmp (lh, rh));
-%! end
+%! endfor
 
 ## Whitespace test (bug #37333), adding multipleDelimsAsOne false arg
 %!test
-%! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = " C:/code/meas;";
 %! tc{1, end+1} = "C:/code/sim;;";
 %! tc{1, end+1} = "";
 %! tc{1, end+1} = "C:/code/utils;";
 %! string = [tc{:}];
 %! c = textscan (string, "%s", "delimiter", ";", "multipleDelimsAsOne", 0);
 %! for k = 1:max (numel (c{1}), numel (tc))
 %!   lh = c{1}{k};
 %!   rh = tc{k};
 %!   rh(rh == ";") = "";
 %!   rh = strtrim (rh);
 %!   assert (strcmp (lh, rh));
-%! end
+%! endfor
 
 ## Whitespace test (bug #37333) whitespace "" arg
 %!test
-%! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = " C:/code/meas;";
 %! tc{1, end+1} = "C:/code/sim;";
 %! tc{1, end+1} = "C:/code/utils;";
 %! string = [tc{:}];
 %! c = textscan (string, "%s", "delimiter", ";", "whitespace", "");
 %! for k = 1:max (numel (c{1}), numel (tc))
 %!   lh = c{1}{k};
 %!   rh = tc{k};
 %!   rh(rh == ";") = "";
 %!   assert (strcmp (lh, rh));
-%! end
+%! endfor
 
 ## Whitespace test (bug #37333), whitespace " " arg
 %!test
-%! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = " C:/code/meas;";
 %! tc{1, end+1} = "C:/code/sim;";
 %! tc{1, end+1} = "C:/code/utils;";
 %! string = [tc{:}];
 %! c = textscan (string, "%s", "delimiter", ";", "whitespace", " ");
 %! for k = 1:max (numel (c{1}), numel (tc))
 %!   lh = c{1}{k};
 %!   rh = tc{k};
 %!   rh(rh == ";") = "";
 %!   rh = strtrim (rh);
 %!   assert (strcmp (lh, rh));
-%! end
+%! endfor
 
 ## Tests reading with empty format, should return proper nr of columns
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, " 1 2 3 4\n5 6 7 8");
 %! fseek (fid, 0, "bof");
-%! A = textscan (fid, "");
+%! C = textscan (fid, "");
 %! E = feof (fid);
 %! fclose (fid);
 %! unlink (f);
-%! assert (A{1}, [1 ; 5], 1e-6);
-%! assert (A{2}, [2 ; 6], 1e-6);
-%! assert (A{3}, [3 ; 7], 1e-6);
-%! assert (A{4}, [4 ; 8], 1e-6);
+%! assert (C{1}, [1 ; 5], 1e-6);
+%! assert (C{2}, [2 ; 6], 1e-6);
+%! assert (C{3}, [3 ; 7], 1e-6);
+%! assert (C{4}, [4 ; 8], 1e-6);
 %! assert (E);
 
 ## Test leaving the file at the correct position on exit
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, "1,2\n3,4\n");
 %! fseek (fid, 0, "bof");
-%! A = textscan (fid, "%s %f", 2, "Delimiter", ",");
+%! C = textscan (fid, "%s %f", 2, "Delimiter", ",");
 %! E = ftell (fid);
 %! fclose (fid);
 %! unlink (f);
 %! assert (E, 8);
 
 ## Tests reading with empty format; empty fields & incomplete lower row
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid, " ,2,,4\n5,6");
 %! fseek (fid, 0, "bof");
-%! A = textscan (fid, "", "delimiter", ",", "EmptyValue", 999, "CollectOutput" , 1);
+%! C = textscan (fid, "", "delimiter", ",", "EmptyValue", 999,
+%!                    "CollectOutput" , 1);
 %! fclose (fid);
 %! unlink (f);
-%! assert (A{1}, [999, 2, 999, 4; 5, 6, 999, 999], 1e-6);
+%! assert (C{1}, [999, 2, 999, 4; 5, 6, 999, 999], 1e-6);
 
 ## Error message tests
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! msg1 = "textscan: 1 parameters given, but only 0 values";
 %! try
-%! A = textscan (fid, "", "headerlines");
+%!   C = textscan (fid, "", "headerlines");
 %! end_try_catch;
 %! assert (!feof (fid));
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! msg1 = "textscan: HeaderLines must be numeric";
 %! try
-%! A = textscan (fid, "", "headerlines", "hh");
+%!   C = textscan (fid, "", "headerlines", "hh");
 %! end_try_catch;
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
+## Skip headerlines
 %!test
-%! ## Skip headerlines
-%! A = textscan ("field 1  field2\n 1 2\n3 4", "", "headerlines", 1, "collectOutput", 1);
-%! assert (A, {[1 2; 3 4]});
-
+%! C = textscan ("field 1  field2\n 1 2\n3 4", "", "headerlines", 1,
+%!               "collectOutput", 1);
+%! assert (C, {[1 2; 3 4]});
+
+## Skip headerlines with non-default EOL
 %!test
-%! ## Skip headerlines with non-default EOL
-%! A = textscan ("field 1  field2\r 1 2\r3 4", "", "headerlines", 2, "collectOutput", 1, "EndOfLine", '\r');
-%! assert (A, {[3 4]});
+%! C = textscan ("field 1  field2\r 1 2\r3 4", "", "headerlines", 2,
+%!               "collectOutput", 1, "EndOfLine", '\r');
+%! assert (C, {[3 4]});
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"some_string");
 %! fseek (fid, 0, "bof");
 %! msg1 = "textscan: EndOfLine must be at most one character or '\\r\\n'";
 %! try
-%! A = textscan (fid, "%f", "EndOfLine", "\n\r");
+%!   C = textscan (fid, "%f", "EndOfLine", "\n\r");
 %! end_try_catch;
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"some_string");
 %! fseek (fid, 0, "bof");
 %! msg1 = "textscan: EndOfLine must be at most one character or '\\r\\n'";
 %! try
-%! A = textscan (fid, "%f", "EndOfLine", 33);
+%!   C = textscan (fid, "%f", "EndOfLine", 33);
 %! end_try_catch;
 %! fclose (fid);
 %! unlink (f);
 %! assert (msg1, lasterr);
 
 ## Bug #41824
-%!test
-%! assert (textscan ("123", "", "whitespace", " "){:}, 123);
+%!assert (textscan ("123", "", "whitespace", " "){:}, 123);
 
 ## Bug #42343-1, just test supplied emptyvalue
-%!test
-%! assert (textscan (",NaN", "", "delimiter", "," ,"emptyValue" ,Inf), {Inf, NaN});
+%!assert (textscan (",NaN", "", "delimiter", "," ,"emptyValue" ,Inf),
+%!        {Inf, NaN})
 
 ## Bug #42343-2, test padding with supplied emptyvalue
 %!test
-%! a = textscan (",1,,4\nInf,  ,NaN\n", "", "delimiter", ",", "emptyvalue", -10);
-%! assert (cell2mat (a), [-10, 1, -10, 4; Inf, -10, NaN, -10]);
+%! c = textscan (",1,,4\nInf,  ,NaN\n", "", "delimiter", ",",
+%!               "emptyvalue", -10);
+%! assert (cell2mat (c), [-10, 1, -10, 4; Inf, -10, NaN, -10]);
 
 ## Bug #42528
 %!test
 %! assert (textscan ("1i", ""){1},  0+1i);
-%! assert (cell2mat (textscan ("3, 2-4i, NaN\n -i, 1, 23.4+2.2i\n 1+1 1+1j", "", "delimiter", ",")), [3+0i, 2-4i, NaN+0i; 0-i,  1+0i, 23.4+2.2i; 1 1 1+1i]);
+%! C = textscan ("3, 2-4i, NaN\n -i, 1, 23.4+2.2i\n 1+1 1+1j", "",
+%!               "delimiter", ",");
+%! assert (cell2mat (C), [3+0i, 2-4i, NaN+0i; 0-i,  1+0i, 23.4+2.2i; 1 1 1+1i]);
 
 %!test
 %! ## TreatAsEmpty
-%! C = textscan ("1,2,3,NN,5,6\n", "%d%d%d%f", "delimiter", ",", "TreatAsEmpty", "NN");
+%! C = textscan ("1,2,3,NN,5,6\n", "%d%d%d%f", "delimiter", ",",
+%!               "TreatAsEmpty", "NN");
 %! assert (C{3}(1), int32 (3));
 %! assert (C{4}(1), NaN);
 
 ## MultipleDelimsAsOne
 %!test
 %! str = "11, 12, 13,, 15\n21,, 23, 24, 25\n,, 33, 34, 35\n";
-%! C = textscan (str, "%f %f %f %f", "delimiter", ",", "multipledelimsasone", 1, "endofline", "\n");
+%! C = textscan (str, "%f %f %f %f", "delimiter", ",",
+%!                    "multipledelimsasone", 1, "endofline", "\n");
 %! assert (C{1}', [11, 21, 33]);
 %! assert (C{2}', [12, 23, 34]);
 %! assert (C{3}', [13, 24, 35]);
 %! assert (C{4}', [15, 25, NaN]);
 
 ## Single-quoted escape sequences
 %!test
 %! str = "11\t12\t13\r21\t22\t23";
 %! c = textscan (str, "", "delimiter", '\t', "EndOfLine", '\r');
 %! assert (c{1}', [11, 21]);
 %! assert (c{2}', [12, 22]);
 %! assert (c{3}', [13, 23]);
 
 ## Bug #44750
 %!test
-%! assert (textscan ("/home/foo/", "%s", "delimiter", "/", "MultipleDelimsAsOne", 1){1}, ...
-%!         {"home"; "foo"});
-
-### Allow cuddling %sliteral but warn it is ambiguous
+%! c = textscan ("/home/foo/", "%s", "delimiter", "/",
+%!               "MultipleDelimsAsOne", 1);
+%! assert (c{1}, {"home"; "foo"});
+
+## FIXME: Test still fails (4/13/2016)?
+## Allow cuddling %sliteral, but warn it is ambiguous
 #%!test
 #%! C = textscan ("abcxyz51\nxyz83\n##xyz101", "%s xyz %d");
 #%! assert (C{1}([1 3]), {"abc"; "##"});
 #%! assert (isempty (C{1}{2}), true);
 #%! assert (C{2}, int32 ([51; 83; 101]));
 ### Literals are not delimiters.
 
 ## Test for false positives in check for non-supported format specifiers
 %!test
-%! assert (textscan ("Total: 32.5 % (of cm values)", "Total: %f %% (of cm values)"){1}, 32.5, 1e-5);
+%! c = textscan ("Total: 32.5 % (of cm values)",
+%!               "Total: %f %% (of cm values)");
+%! assert (c{1}, 32.5, 1e-5);
 
 ## Test various forms of string format specifiers (bug #45712)
 %!test
 %! str = "14 :1 z:2 z:3 z:5 z:11";
 %! C = textscan (str, "%f %s %*s %3s %*3s %f", "delimiter", ":");
 %! assert (C, {14, {"1 z"}, {"3 z"}, 11});
 
-%% Bit width, fixed width conv. specifiers
+## Bit width, fixed width conversion specifiers
 %!test
 %! str2 = "123456789012345 ";
 %! str2 = [str2 str2 str2 str2 str2 str2 str2 str2];
 %! str2 = [str2 "123456789.01234 1234567890.1234 12345.678901234 12345.678901234"];
 %! pttrn = "%3u8%*s %5u16%*s %10u32%*s %15u64 %3d8%*s %5d16%*s %10d32%*s %15d64 %9f32%*s %14f64%*s %10.2f32%*s %12.2f64%*s";
 %! C = textscan (str2, pttrn, "delimiter", " ");
 %! assert (C{1}, uint8 (123));
 %! assert (C{2}, uint16 (12345));
@@ -2024,17 +2025,17 @@ as the name of the function when reporti
 %! assert (C{6}, int16 (12345));
 %! assert (C{7}, int32 (1234567890));
 %! assert (C{8}, int64 (123456789012345));
 %! assert (C{9}, single (123456789), 1e-12);
 %! assert (C{10}, double (1234567890.123), 1e-15);
 %! assert (C{11}, single (12345.68), 1e-5);
 %! assert (C{12}, double (12345.68), 1e-11);
 
-%% Bit width, fixed width conv. specifiers -- check the right amount is left
+## Bit width, fixed width conv. specifiers -- check the right amount is left
 %!test
 %! str2 = "123456789012345 ";
 %! str2 = [str2 str2 "123456789.01234"];
 %! pttrn = "%3u8 %5u16 %10u32 %3d8 %5d16 %10d32 %9f32 %9f";
 %! C = textscan (str2, pttrn, "delimiter", " ");
 %! assert (C{1}, uint8 (123));
 %! assert (C{2}, uint16 (45678));
 %! assert (C{3}, uint32 (9012345));
@@ -2056,92 +2057,92 @@ as the name of the function when reporti
 %! assert (C{2}, 0.12, 1e-11);
 %! assert (C{3}, 3);
 
 %!test
 %! C = textscan ("123.123", "%4f %3f");
 %! assert (C{1}, 123);
 %! assert (C{2}, 123);
 
-%% field width interrupts exponent.  (Matlab incorrectly gives [12, 2e12])
+## field width interrupts exponent.  (Matlab incorrectly gives [12, 2e12])
 %!test
 %! assert (textscan ("12e12",  "%4f"), {[120;  2]});
 %! assert (textscan ("12e+12", "%5f"), {[120;  2]});
 %! assert (textscan ("125e-12","%6f"), {[12.5; 2]});
 
-%% %[] tests
-%% Plain [..] and *[..]
+## %[] tests
+## Plain [..] and *[..]
 %!test
 %! ar = "abcdefguvwxAny\nacegxyzTrailing\nJunk";
 %! C = textscan (ar, "%[abcdefg] %*[uvwxyz] %s");
 %! assert (C{1}, {"abcdefg"; "aceg"; ""});
 %! assert (C{2}, {"Any"; "Trailing"; "Junk"});
 
 %!test
 %! assert (textscan ("A2 B2 C3", "%*[ABC]%d", 3), {int32([2; 2; 3])});
 
-%% [^..] and *[^..]
+## [^..] and *[^..]
 %!test
 %! br = "abcdefguvwx1Any\nacegxyz2Trailing\n3Junk";
 %! C = textscan (br, "%[abcdefg] %*[^0123456789] %s");
 %! assert (C{1}, {"abcdefg"; "aceg"; ""});
 %! assert (C{2}, {"1Any"; "2Trailing"; "3Junk"});
 
-%% [..] and [^..] containing delimiters
+## [..] and [^..] containing delimiters
 %!test
 %! cr = "ab cd efguv wx1Any\na ce gx yz2Trailing\n   3Junk";
-%! C = textscan (cr, "%[ abcdefg] %*[^0123456789] %s", "delimiter", " \n", "whitespace", "");
+%! C = textscan (cr, "%[ abcdefg] %*[^0123456789] %s", "delimiter", " \n",
+%!                   "whitespace", "");
 %! assert (C{1}, {"ab cd efg"; "a ce g"; "   "});
 %! assert (C{2}, {"1Any"; "2Trailing"; "3Junk"});
 
-%% Bug #36464
+## Bug #36464
+%!assert (textscan ("1 2 3 4 5 6", "%*n%n%*[^\n]"){1}, 2);
+
+## test %[]] and %[^]]
 %!test
-%! assert (textscan ('1 2 3 4 5 6', "%*n%n%*[^\n]"){1}, 2);
-
-%% test %[]] and %[^]]
-%!test
-%! assert (textscan ('345]', "%*[123456]%[]]"){1}{1}, "]");
-%! assert (textscan ('345]', "%*[^]]%s"){1}{1}, "]");
-
-%% Test that "-i" checks the next two characters
+%! assert (textscan ("345]", "%*[123456]%[]]"){1}{1}, "]");
+%! assert (textscan ("345]", "%*[^]]%s"){1}{1}, "]");
+
+## Test that "-i" checks the next two characters
 %!test
 %! C = textscan ("-i -in -inf -infinity", "%f %f%s %f %f %s");
 %! assert (C, {-i, -i, {"n"}, -Inf, -Inf, {"inity"}});
 
-%% Again for "+i", this time with custom parser
+## Again for "+i", this time with custom parser
 %!test
 %! C = textscan ("+i +in +inf +infinity", "%f %f%s %f %f %s", "ExpChars", "eE");
 %! assert (C, {i, i, {"n"}, Inf, Inf, {"inity"}});
 
-%% Check single quoted format interprets control sequences
+## Check single quoted format interprets control sequences
 %!test
 %! C = textscan ("1 2\t3 4", '%f %[^\t] %f %f');
 %! assert (C, {1, {"2"}, 3, 4});
 
 %% Check a non-empty line with no valid conversion registers empytValue
 %!test
 %! C = textscan ("Empty\n", "Empty%f %f");
 %! assert (C, { NaN, NaN });
 
-%% Check overflow and underflow of integer types
+## Check overflow and underflow of integer types
 %!test
 %! a = "-1e90 ";
 %! b = "1e90 ";
 %! fmt = "%d8 %d16 %d32 %d64 %u8 %u16 %u32 %u64 ";
 %! C = textscan ([a a a a a a a a b b b b b b b b], fmt);
 %! assert (C{1}, int8 ([-128; 127]));
 %! assert (C{2}, int16 ([-32768; 32767]));
 %! assert (C{3}, int32 ([-2147483648; 2147483647]));
 %! assert (C{4}, int64 ([-9223372036854775808; 9223372036854775807]));
 %! assert (C{5}, uint8 ([0; 255]));
 %! assert (C{6}, uint16 ([0; 65535]));
 %! assert (C{7}, uint32 ([0; 4294967295]));
 %! assert (C{8}, uint64 ([0; 18446744073709551615]));
 
-%% Tests from Matlab (does The MathWorks have any copyright over the input?)
+## Tests from Matlab (does The MathWorks have any copyright over the input?)
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"09/12/2005 Level1 12.34 45 1.23e10 inf Nan Yes 5.1+3i\n");
 %! fprintf (fid,"10/12/2005 Level2 23.54 60 9e19 -inf  0.001 No 2.2-.5i\n");
 %! fprintf (fid,"11/12/2005 Level3 34.90 12 2e5   10  100   No 3.1+.1i\n");
 %! fseek (fid, 0, "bof");
 %! C = textscan (fid,"%s %s %f32 %d8 %u %f %f %s %f");
@@ -2154,17 +2155,17 @@ as the name of the function when reporti
 %! assert (C{7}, [NaN;0.001;100], eps);
 %! assert (C{8}, {"Yes";"No";"No"});
 %! assert (C{9}, [5.1+3i;2.2-0.5i;3.1+0.1i]);
 %! fseek (fid, 0, "bof");
 %! C = textscan (fid,"%s Level%d %f32 %d8 %u %f %f %s %f");
 %! assert (C{2}, [int32(1);int32(2);int32(3)]);
 %! assert (C{3}, [single(12.34);single(23.54);single(34.90)]);
 %! fseek (fid, 0, "bof");
-%! C = textscan (fid,'%s %*[^\n]');
+%! C = textscan (fid, '%s %*[^\n]');
 %! fclose (fid);
 %! unlink (f);
 %! assert (C, {{"09/12/2005";"10/12/2005";"11/12/2005"}});
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"1,  2,  3,  4,   ,  6\n");
@@ -2178,40 +2179,42 @@ as the name of the function when reporti
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"abc, 2, NA, 3, 4\n");
 %! fprintf (fid,"// Comment Here\n");
 %! fprintf (fid,"def, na, 5, 6, 7\n");
 %! fseek (fid, 0, "bof");
-%! C = textscan (fid,"%s %n %n %n %n","Delimiter",",","TreatAsEmpty",{"NA","na"},"CommentStyle","//");
+%! C = textscan (fid, "%s %n %n %n %n", "Delimiter", ",",
+%!                    "TreatAsEmpty", {"NA","na"}, "CommentStyle", "//");
 %! fclose (fid);
 %! unlink (f);
 %! assert (C{1}, {"abc";"def"});
 %! assert (C{2}, [2; NaN]);
 %! assert (C{3}, [NaN; 5]);
 %! assert (C{4}, [3; 6]);
 %! assert (C{5}, [4; 7]);
 
-%!test
-%!## Test start of comment as string
-%! c = textscan ("1 / 2 // 3", "%n %s %u8", "CommentStyle", {"//"});
-%! assert (c, {1, "/", 2});
+## FIXME: Almost passes.  Second return value is {"/"}.  Tested 4/14/16.
+### Test start of comment as string
+#%!test
+#%! c = textscan ("1 / 2 // 3", "%n %s %u8", "CommentStyle", {"//"});
+#%! assert (c(1), {1, "/", 2});
 
 %!assert (textscan (["1 2 3 4"; "5 6 7 8"], "%f"), {[15; 26; 37; 48]})
 
-%% Check for delimiter after exponent
+## Check for delimiter after exponent
 %!assert (textscan ("1e-3|42", "%f", "delimiter", "|"), {[1e-3; 42]})
 */
 
 // These tests have end-comment sequences, so can't just be in a comment
 #if 0
+## Test unfinished comment
 %!test
-%!## Test unfinished comment
 %! c = textscan ("1 2 /* half comment", "%n %u8", "CommentStyle", {"/*", "*/"});
 %! assert (c, {1, 2});
 
 ## Test reading from a real file
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! d = rand (1, 4);
@@ -2221,16 +2224,28 @@ as the name of the function when reporti
 %! E = feof (fid);
 %! fclose (fid);
 %! unlink (f);
 %! assert (A{1}, [d(1); d(3)], 1e-6);
 %! assert (A{2}, [d(2); d(4)], 1e-6);
 %! assert (E);
 #endif
 
+/*
+## Test input validation
+%!error textscan ()
+%!error textscan (single (40))
+%!error textscan ({40})
+%!error <must be a string> textscan ("Hello World", 2)
+%!error <at most one character or>
+%! textscan ("Hello World", "%s", "EndOfLine", 3);
+%!error <'%z' is not a valid format specifier> textscan ("1.0", "%z")
+%!error <no valid format conversion specifiers> textscan ("1.0", "foo")
+*/
+
 static octave_value
 do_fread (octave_stream& os, const octave_value& size_arg,
           const octave_value& prec_arg, const octave_value& skip_arg,
           const octave_value& arch_arg, octave_idx_type& count)
 {
   count = -1;
 
   Array<double> size = size_arg.xvector_value ("fread: invalid SIZE specified");
