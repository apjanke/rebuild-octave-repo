# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1290220022 18000
#      Fri Nov 19 21:27:02 2010 -0500
# Node ID 7d5351fc575a850973934534263d9210b4be564d
# Parent  475e90eb4ff12fdd2001fbc9fcb073eede3710e5
mex.cc: convert mxArray_octave_value to matlab style representation when duplicating

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-11-19  John W. Eaton  <jwe@octave.org>
+
+	Bug #31706.
+
+	* mex.h, mex.cc (mxArray::dup): Rename from clone.  Change all
+	uses and derived classes.
+	(mxArray_octave_value::dup): Convert to mxArray object here.
+
 2010-11-19  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mex::free): Don't warn about skipping memory not
 	allocated by mxMalloc, mxCalloc, or mxRealloc.
 
 2010-11-18  Daisuke TAKAGO  <takago@neptune.kanazawa-it.ac.jp>
 
 	* gl-render.cc (opengl_renderer::draw_line):
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -110,17 +110,17 @@ valid_key (const char *key)
 class mxArray_base : public mxArray
 {
 protected:
 
   mxArray_base (void) : mxArray (xmxArray ()) { }
 
 public:
 
-  mxArray *clone (void) const = 0;
+  mxArray *dup (void) const = 0;
 
   ~mxArray_base (void) { }
 
   bool is_octave_value (void) const { return false; }
 
   int is_cell (void) const = 0;
 
   int is_char (void) const = 0;
@@ -322,17 +322,17 @@ static inline void *maybe_mark_foreign (
 class mxArray_octave_value : public mxArray_base
 {
 public:
 
   mxArray_octave_value (const octave_value& ov)
     : mxArray_base (), val (ov), mutate_flag (false),
       id (mxUNKNOWN_CLASS), class_name (0), ndims (-1), dims (0) { }
 
-  mxArray *clone (void) const { return new mxArray_octave_value (*this); }
+  mxArray *dup (void) const { return val.as_mxArray (); }
 
   ~mxArray_octave_value (void)
   {
     mxFree (class_name);
     mxFree (dims);
   }
 
   bool is_octave_value (void) const { return true; }
@@ -1170,17 +1170,17 @@ public:
         for (size_t i = 0; i < tmp_len; i++)
           cpr[m*i+j] = static_cast<mxChar> (ptr[i]);
 
         for (size_t i = tmp_len; i < nc; i++)
           cpr[m*i+j] = static_cast<mxChar> (' ');
       } 
   }
 
-  mxArray_number *clone (void) const { return new mxArray_number (*this); }
+  mxArray_number *dup (void) const { return new mxArray_number (*this); }
 
   ~mxArray_number (void)
   {
     mxFree (pr);
     mxFree (pi);
   }
 
   int is_complex (void) const { return pi != 0; }
@@ -1489,17 +1489,17 @@ public:
     : mxArray_matlab (id_arg, m, n), nzmax (nzmax_arg)
   {
     pr = (calloc (nzmax, get_element_size ()));
     pi = (flag == mxCOMPLEX ? calloc (nzmax, get_element_size ()) : 0);
     ir = static_cast<mwIndex *> (calloc (nzmax, sizeof (mwIndex)));
     jc = static_cast<mwIndex *> (calloc (n + 1, sizeof (mwIndex)));
   }
 
-  mxArray_sparse *clone (void) const { return new mxArray_sparse (*this); }
+  mxArray_sparse *dup (void) const { return new mxArray_sparse (*this); }
 
   ~mxArray_sparse (void)
   {
     mxFree (pr);
     mxFree (pi);
     mxFree (ir);
     mxFree (jc);
   }
@@ -1675,17 +1675,17 @@ public:
   }
 
   void init (const char **keys)
   {
     for (int i = 0; i < nfields; i++)
       fields[i] = strsave (keys[i]);
   }
 
-  mxArray_struct *clone (void) const { return new mxArray_struct (*this); }
+  mxArray_struct *dup (void) const { return new mxArray_struct (*this); }
 
   ~mxArray_struct (void)
   {
     for (int i = 0; i < nfields; i++)
       mxFree (fields[i]);
 
     mxFree (fields);
 
@@ -1873,17 +1873,17 @@ private:
     for (int i = 0; i < nfields; i++)
       fields[i] = strsave (val.fields[i]);
 
     mwSize nel = get_number_of_elements ();
 
     for (mwIndex i = 0; i < nel * nfields; i++)
       {
         mxArray *ptr = val.data[i];
-        data[i] = ptr ? ptr->clone () : 0;
+        data[i] = ptr ? ptr->dup () : 0;
       }
   }
 };
 
 // Matlab-style cell arrays.
 
 class mxArray_cell : public mxArray_matlab
 {
@@ -1896,17 +1896,17 @@ public:
   mxArray_cell (const dim_vector& dv)
     : mxArray_matlab (mxCELL_CLASS, dv),
       data (static_cast<mxArray **> (calloc (get_number_of_elements (), sizeof (mxArray *)))) { }
 
   mxArray_cell (mwSize m, mwSize n)
     : mxArray_matlab (mxCELL_CLASS, m, n),
       data (static_cast<mxArray **> (calloc (get_number_of_elements (), sizeof (mxArray *)))) { }
 
-  mxArray_cell *clone (void) const { return new mxArray_cell (*this); }
+  mxArray_cell *dup (void) const { return new mxArray_cell (*this); }
 
   ~mxArray_cell (void)
   {
     mwSize nel = get_number_of_elements ();
 
     for  (mwIndex i = 0; i < nel; i++)
       delete data[i];
 
@@ -1950,17 +1950,17 @@ private:
     : mxArray_matlab (val),
       data (static_cast<mxArray **> (malloc (get_number_of_elements () * sizeof (mxArray *))))
   {
     mwSize nel = get_number_of_elements ();
 
     for (mwIndex i = 0; i < nel; i++)
       {
         mxArray *ptr = val.data[i];
-        data[i] = ptr ? ptr->clone () : 0;
+        data[i] = ptr ? ptr->dup () : 0;
       }
   }
 };
 
 // ------------------------------------------------------------------
 
 mxArray::mxArray (const octave_value& ov)
   : rep (new mxArray_octave_value (ov)), name (0) { }
@@ -2609,17 +2609,17 @@ mxCreateStructMatrix (mwSize m, mwSize n
 {
   return maybe_mark_array (new mxArray (m, n, num_keys, keys));
 }
 
 // Copy constructor.
 mxArray *
 mxDuplicateArray (const mxArray *ptr)
 {
-  return maybe_mark_array (ptr->clone ());
+  return maybe_mark_array (ptr->dup ());
 }
 
 // Destructor.
 void
 mxDestroyArray (mxArray *ptr)
 {
   if (! (mex_context && mex_context->free_value (ptr)))
     delete ptr;
diff --git a/src/mxarray.h.in b/src/mxarray.h.in
--- a/src/mxarray.h.in
+++ b/src/mxarray.h.in
@@ -158,19 +158,19 @@ public:
   mxArray (mwSize m, mwSize n, int num_keys, const char **keys);
 
   mxArray (mwSize ndims, const mwSize *dims);
 
   mxArray (const dim_vector& dv);
 
   mxArray (mwSize m, mwSize n);
 
-  virtual mxArray *clone (void) const
+  virtual mxArray *dup (void) const
   {
-    mxArray *new_rep = rep->clone ();
+    mxArray *new_rep = rep->dup ();
 
     return new mxArray (new_rep, name);
   }
 
   virtual ~mxArray (void);
 
   virtual bool is_octave_value (void) const { return rep->is_octave_value (); }
 
