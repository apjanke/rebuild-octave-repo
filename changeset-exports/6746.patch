# HG changeset patch
# User dbateman
# Date 1182241114 0
#      Tue Jun 19 08:18:34 2007 +0000
# Node ID a8105a726e68442a4184c95626fadcba6ed75a9d
# Parent  ca6668e475182a2bec8b77a0a5eb62c24312e4b6
[project @ 2007-06-19 08:18:34 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-06-19  David Bateman  <dbateman@free.fr>
+
+	* plot/axis.m: Prefer to use legend rather than the older Octave
+	only ";;" legend syntax.
+	* polynomial/mkpp.m: ditto.
+	* polynomial/pchip.m: ditto.
+	* signal/freqz_plot.m: ditto.
+	* sparse/gplot.m: ditto.
+	* sparse/treeplot.m: ditto.
+
 2007-06-19  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m (do_tics, do_tics_1): New functions.
 	(__go_draw_axes__): Call do_tics to handle tic marks.
 
 2007-06-18  Søren Hauberg  <hauberg@gmail.com>
 
         * general/interp1.m, general/interp2.m, general/interp3.m,
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -257,84 +257,84 @@ function curr_axis = axis (ax, varargin)
   endif
 
 endfunction
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(221);    title("normal plot");
-%! plot(t, x, ";;");
+%! plot(t, x);
 %!
 %! subplot(222);    title("square plot");
-%! axis("square");  plot(t, x, ";;");
+%! axis("square");  plot(t, x);
 %!
 %! subplot(223);    title("equal plot");
-%! axis("equal");   plot(t, x, ";;");
+%! axis("equal");   plot(t, x);
 %! 
 %! subplot(224);    title("normal plot again");
-%! axis("normal");  plot(t, x, ";;");
+%! axis("normal");  plot(t, x);
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(121);   title("ij plot");
-%! axis("ij");     plot(t, x, ";;");
+%! axis("ij");     plot(t, x);
 %!
 %! subplot(122);   title("xy plot");
-%! axis("xy");     plot(t, x, ";;");
+%! axis("xy");     plot(t, x);
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(331);   title("x tics & labels");
-%! axis("ticx");   plot(t, x, ";;");
+%! axis("ticx");   plot(t, x);
 %!
 %! subplot(332);   title("y tics & labels");
-%! axis("ticy");   plot(t, x, ";;");
+%! axis("ticy");   plot(t, x);
 %!
 %! subplot(334);     title("x & y tics, x labels");
-%! axis("labelx","tic");   plot(t, x, ";;");
+%! axis("labelx","tic");   plot(t, x);
 %!
 %! subplot(335);     title("x & y tics, y labels");
-%! axis("labely","tic");   plot(t, x, ";;");
+%! axis("labely","tic");   plot(t, x);
 %!
 %! subplot(337);     title("x tics, no labels");
-%! axis("nolabel","ticx");   plot(t, x, ";;");
+%! axis("nolabel","ticx");   plot(t, x);
 %!
 %! subplot(338);     title("y tics, no labels");
-%! axis("nolabel","ticy");   plot(t, x, ";;");
+%! axis("nolabel","ticy");   plot(t, x);
 %!
 %! subplot(333);     title("no tics or labels");
-%! axis("off");    plot(t, x, ";;");
+%! axis("off");    plot(t, x);
 %!
 %! subplot(336);     title("all tics but no labels");
-%! axis("nolabel","tic");    plot(t, x, ";;");
+%! axis("nolabel","tic");    plot(t, x);
 %!
 %! subplot(339);     title("all tics & labels");
-%! axis("on");       plot(t, x, ";;");
+%! axis("on");       plot(t, x);
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(321);    title("axes at [0 3 0 1]")
-%! axis([0,3,0,1]); plot(t, x, ";;");
+%! axis([0,3,0,1]); plot(t, x);
 %!
 %! subplot(322);    title("auto");
-%! axis("auto");    plot(t, x, ";;");
+%! axis("auto");    plot(t, x);
 %!
 %! subplot(323);    title("manual");
 %! plot(t, x, ";sine [0:2pi];"); hold on;
 %! axis("manual");
 %! plot(-3:3,-3:3, ";line (-3,-3)->(3,3);"); hold off;
 %!
 %! subplot(324);    title("axes at [0 3 0 1], then autox");
 %! axis([0,3,0,1]); axis("autox");
 %! plot(t, x, ";sine [0:2pi];");
 %!
 %! subplot(325);    title("axes at [3 6 0 1], then autoy");
 %! axis([3,6,0,1]); axis("autoy");
 %! plot(t, x, ";sine [0:2p];");
 %!
 %! subplot(326);    title("tight");
-%! axis("tight");   plot(t, x, ";;");
+%! axis("tight");   plot(t, x);
 %! % The last plot should not have any whitespace outside the data
 %! % limits, but "tight" isn't implemented yet.
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -59,9 +59,10 @@ endfunction
 
 %!demo # linear interpolation
 %! x=linspace(0,pi,5)'; 
 %! t=[sin(x),cos(x)];
 %! m=diff(t)./(x(2)-x(1)); 
 %! b=t(1:4,:);
 %! pp = mkpp(x, [m(:),b(:)]);
 %! xi=linspace(0,pi,50);
-%! plot(x,t,"x;control;",xi,ppval(pp,xi),";interp;");
+%! plot(x,t,"x",xi,ppval(pp,xi));
+%! legend("control","interp");
diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -134,19 +134,18 @@ endfunction
 
 %!demo
 %! x = 0:8; 
 %! y = [1, 1, 1, 1, 0.5, 0, 0, 0, 0];
 %! xi = 0:0.01:8; 
 %! yspline = spline(x,y,xi);
 %! ypchip = pchip(x,y,xi);
 %! title("pchip and spline fit to discontinuous function");
-%! plot(xi,yspline,";spline;",...
-%!      xi,ypchip,"-;pchip;",...
-%!      x,y,"+;data;");
+%! plot(xi,yspline,xi,ypchip,"-",x,y,"+");
+%! legend ("spline","pchip","data");
 %! %-------------------------------------------------------------------
 %! % confirm that pchip agreed better to discontinuous data than spline
 
 %!shared x,y
 %! x = 0:8; 
 %! y = [1, 1, 1, 1, 0.5, 0, 0, 0, 0];
 %!assert (pchip(x,y,x), y);
 %!assert (pchip(x,y,x'), y');
diff --git a/scripts/signal/freqz_plot.m b/scripts/signal/freqz_plot.m
--- a/scripts/signal/freqz_plot.m
+++ b/scripts/signal/freqz_plot.m
@@ -33,28 +33,31 @@ function freqz_plot (w, h)
     ## w = w (2 : length (w));
     ## n = n-1;
 
     mag = 20 * log10 (abs (h));
     phase = unwrap (arg (h));
     maxmag = max (mag);
 
     subplot (3, 1, 1);
-    plot (w, mag, ";Pass band (dB);");
+    plot (w, mag);
     grid ("on");
+    legend("Pass band (dB)");
     axis ([w(1), w(n), maxmag-3, maxmag], "labely");
 
     subplot (3, 1, 2);
-    plot (w, mag, ";Stop band (dB);");
+    plot (w, mag);
     grid ("on");
+    legend ("Stop band (dB)");
     if (maxmag - min (mag) > 100)
       axis ([w(1), w(n), maxmag-100, maxmag], "labely");
     else
       axis ("autoy", "labely");
     endif
 
     subplot (3, 1, 3);
-    plot (w, phase*360/(2*pi), ";Phase (degrees);");
+    plot (w, phase*360/(2*pi));
     grid ("on");
+    legend ("Phase (degrees)");
     xlabel ("Frequency");
     axis ([w(1), w(n)], "autoy", "label");
 
 endfunction
diff --git a/scripts/sparse/gplot.m b/scripts/sparse/gplot.m
--- a/scripts/sparse/gplot.m
+++ b/scripts/sparse/gplot.m
@@ -33,17 +33,17 @@
 
 function [x, y] = gplot (A, xy, line_style)
 
   if (nargin < 2 || nargin > 3 || nargout > 2)
     print_usage ();
   endif
 
   if (nargin == 2)
-    line_style = "-;;";
+    line_style = "-";
   endif
 
   [i, j] = find (A);
   xcoord = [xy(i,1), xy(j,1), NaN * ones(length(i),1)]'(:);
   ycoord = [xy(i,2), xy(j,2), NaN * ones(length(i),1)]'(:);
 
   if (nargout == 0)
     plot (xcoord, ycoord, line_style); 
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -30,18 +30,18 @@ function treeplot (Tree, NodeS, EdgeS)
   if (nargin < 1 || nargin > 3 || nargout > 0)
     print_usage ();
   else
     if (! ismatrix (Tree) || rows (Tree) != 1 || ! isnumeric (Tree) 
         || ! isvector (Tree) || any (Tree > length (Tree)))
       error ("treeplot: the first input argument must be a vector of predecessors");
     else
       ## the inicialization of node end edge style
-      NodeStyle = "0*;;";
-      EdgeStyle = "1;;";      
+      NodeStyle = "k*";
+      EdgeStyle = "r";      
       if (nargin > 2)
         EdgeStyle = EdgeS;
         if (nargin > 1) 
 	  if (length (findstr (NodeS, "*")) == 0
 	      && length (findstr (NodeS, "+")) == 0
 	      && length (findstr (NodeS, "x")) == 0)
 	    NodeStyle = [NodeS, "o"];
 	  else
