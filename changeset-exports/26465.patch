# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1546783529 -3600
#      Sun Jan 06 15:05:29 2019 +0100
# Branch stable
# Node ID dd40f9650821ec269b9735cf9bce652e198bbb6e
# Parent  a8b8b0726b083680e0750857950c9506de1b3f1f
Avoid heap-buffer-overflow with facenormals on surface edges (bug #48519).

* gl-render.cc (opengl_renderer::draw_surface): Use facenormals of pen-ultimate
  grid row and column for last grid row and column.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2391,23 +2391,23 @@ namespace octave
     const Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     int zr = z.rows ();
     int zc = z.columns ();
 
     NDArray c;
     const NDArray vn = props.get_vertexnormals ().array_value ();
     dim_vector vn_dims = vn.dims ();
-    bool has_vertex_normals = ((vn_dims(0) == z.rows ()) &&
-                               (vn_dims(1) == z.columns ()) &&
+    bool has_vertex_normals = ((vn_dims(0) == zr) &&
+                               (vn_dims(1) == zc) &&
                                (vn_dims(2) == 3));
     const NDArray fn = props.get_facenormals ().array_value ();
     dim_vector fn_dims = fn.dims ();
-    bool has_face_normals = ((fn_dims(0) == z.rows () - 1) &&
-                             (fn_dims(1) == z.columns () - 1) &&
+    bool has_face_normals = ((fn_dims(0) == zr - 1) &&
+                             (fn_dims(1) == zc - 1) &&
                              (fn_dims(2) == 3));
 
     // FIXME: handle transparency
     Matrix a;
 
     int fc_mode = (props.facecolor_is_rgb () ? 0 :
                    (props.facecolor_is ("flat") ? 1 :
                     (props.facecolor_is ("interp") ? 2 :
@@ -2784,18 +2784,22 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
-                                      j-1, i);
+                          {
+                            if (el_mode == GOURAUD)
+                              set_normal (bfl_mode, vn, j-1, i);
+                            else
+                              set_normal (bfl_mode, fn, j-1, std::min (i, zc-2));
+                          }
 
                         m_glfcns.glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
@@ -2882,18 +2886,22 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
-                                      j, i-1);
+                          {
+                            if (el_mode == GOURAUD)
+                              set_normal (bfl_mode, vn, j, i-1);
+                            else
+                              set_normal (bfl_mode, fn, std::min (j, zr-2), i-1);
+                          }
 
                         m_glfcns.glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
