# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273228806 -7200
#      Fri May 07 12:40:06 2010 +0200
# Node ID 9f0a264d2f602862a2c7fb7c84515e0698067175
# Parent  773566827bcf24b91fc7e275f163e75858f36d63
mark sqrtm(triangular) as triangular

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/sqrtm.cc (do_sqrtm): Mark the result as triangular
+	where applicable.
+
 2010-05-10  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/qr.cc: Split qrdelete test into high precision test 
         when QRUPDATE is present and low precision when it is not.
 
 2010-05-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/schur.cc (Fschur): Mark triangular matrices on output.
diff --git a/src/DLD-FUNCTIONS/sqrtm.cc b/src/DLD-FUNCTIONS/sqrtm.cc
--- a/src/DLD-FUNCTIONS/sqrtm.cc
+++ b/src/DLD-FUNCTIONS/sqrtm.cc
@@ -117,29 +117,31 @@ do_sqrtm (const octave_value& arg)
         case MatrixType::Upper:
         case MatrixType::Diagonal:
             {
               if (! x.diag ().any_element_is_negative ())
                 {
                   // Do it in real arithmetic.
                   sqrtm_utri_inplace (x);
                   retval = x;
+                  retval.matrix_type (mt);
                 }
               else
                 iscomplex = true;
 
               break;
             }
         case MatrixType::Lower:
             {
               if (! x.diag ().any_element_is_negative ())
                 {
                   x = x.transpose ();
                   sqrtm_utri_inplace (x);
                   retval = x.transpose ();
+                  retval.matrix_type (mt);
                 }
               else
                 iscomplex = true;
 
               break;
             }
         default:
           {
@@ -161,24 +163,26 @@ do_sqrtm (const octave_value& arg)
 
       switch (mt.type ())
         {
         case MatrixType::Upper:
         case MatrixType::Diagonal:
             {
               sqrtm_utri_inplace (x);
               retval = x;
+              retval.matrix_type (mt);
 
               break;
             }
         case MatrixType::Lower:
             {
               x = x.transpose ();
               sqrtm_utri_inplace (x);
               retval = x.transpose ();
+              retval.matrix_type (mt);
 
               break;
             }
         default:
             {
               ComplexMatrix u;
 
               do
