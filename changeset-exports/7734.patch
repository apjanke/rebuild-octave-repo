# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209140202 14400
#      Fri Apr 25 12:16:42 2008 -0400
# Node ID 2dee19385d32f869a2bd0a2b6cd3de5a108850c9
# Parent  bb614b3883a9d4e1ff9439ee468f2569576c72f7
eliminate tree_statement_stack; handle current statement info in octave_call_stack

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,36 @@
+2008-04-25  John W. Eaton  <jwe@octave.org>
+
+	* error.cc (verror, pr_where): Use octave_call_stack instead of
+	tree_statement stack to get line and column information.
+	(pr_where): Use octave_call_stack instead of tree_statement stack
+	to get current statement.
+	* input.cc (get_user_input): Extract current line number from
+	octave_call_stack instead of tree_statement_stack.
+	* pt-stmt.cc (tree_statement::eval): Put current statement on
+	octave_call_stack instead of tree_statement_stack.
+	* pt-stmt.h, pt-stmt.cc (class tree_statement_stack): Delete.
+
+	* toplev.h, toplev.cc (octave_call_stack::call_stack_elt):
+	New nested struct.
+	(octave_call_stack::cs): Now a deque of call_stack_elts.
+	Change all uses.
+	(octave_call_stack::current_statement,
+	octave_call_stack::current_line,
+	octave_call_stack::current_column,
+	octave_call_stack::top_statement,
+	octave_call_stack::set_statement, octave_call_stack::backtrace):
+	New static functions.
+	(octave_call_stack::do_current_line,
+	octave_call_stack::do_current_column,
+	octave_call_stack::do_top_statement,
+	octave_call_stack::do_set_statement,
+	octave_call_stack::do_backtrace): New member functions.
+
 2008-04-24  John W. Eaton  <jwe@octave.org>
 
 	* toplev.h, toplev.cc (octave_call_stack::unwind_pop_script):
 	Delete unused function.
 
 	* ov-usr-fcn.cc: Move constructor definitions here, from ov-usr-fcn.h.
 	* ov-usr-fcn.h (octave_user_script::octave_user_script): 
 	Also Initialize t_parsed and t_checked.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -227,26 +227,26 @@ verror (bool save_last_error, std::ostre
       Vlast_error_id = id;
       Vlast_error_message = msg_string;
 
       Vlast_error_line = -1;
       Vlast_error_column = -1;
       Vlast_error_name = std::string ();
       Vlast_error_file = std::string ();
 
-      if (tree_statement_stack::current ())
+      if (octave_call_stack::current_statement ())
 	{
 	  octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
 	  if (fcn)
 	    {
 	      Vlast_error_file = fcn->fcn_file_name ();
 	      Vlast_error_name = fcn->name();
-	      Vlast_error_line = tree_statement_stack::current_line ();
-	      Vlast_error_column = tree_statement_stack::current_column ();
+	      Vlast_error_line = octave_call_stack::current_line ();
+	      Vlast_error_column = octave_call_stack::current_column ();
 	    }
 	}
     }
 
   if (buffer_error_messages)
     {
       std::string tmp = msg_string;
 
@@ -416,34 +416,34 @@ pr_where_1 (const char *fmt, ...)
   va_start (args, fmt);
   pr_where_2 (fmt, args);
   va_end (args);
 }
 
 static void
 pr_where (const char *name, bool print_code = true)
 {
-  if (tree_statement_stack::current ())
+  if (octave_call_stack::current_statement ())
     {
       std::string nm;
 
       int l = -1;
       int c = -1;
 
       octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
       if (fcn)
 	{
 	  nm = fcn->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = fcn->name ();
 
-	  l = tree_statement_stack::current_line ();
-	  c = tree_statement_stack::current_column ();
+	  l = octave_call_stack::current_line ();
+	  c = octave_call_stack::current_column ();
 	}
 
       if (nm.empty ())
 	{
 	  if (l > 0 && c > 0)
 	    pr_where_1 ("%s: near line %d, column %d:", name, l, c);
 	}
       else
@@ -464,17 +464,17 @@ pr_where (const char *name, bool print_c
 	  // the original source line.
 
 	  std::ostringstream output_buf;
 
 	  output_buf << std::endl;
 
 	  tree_print_code tpc (output_buf, ">>> ");
 
-	  tree_statement *curr_stmt = tree_statement_stack::current ();
+	  tree_statement *curr_stmt = octave_call_stack::current_statement ();
 
 	  if (curr_stmt)
 	    curr_stmt->accept (tpc);
 
 	  output_buf << std::endl;
 
 	  std::string msg = output_buf.str ();
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -602,17 +602,17 @@ get_user_input (const octave_value_list&
 
       if (caller)
 	{
 	  nm = caller->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = caller->name ();
 
-	  line = tree_statement_stack::current_line ();
+	  line = octave_call_stack::current_line ();
 	}
     }
 
   std::ostringstream buf;
 
   if (! nm.empty ())
     {
       if (Vgud_mode)
@@ -694,17 +694,17 @@ get_user_input (const octave_value_list&
 	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	  else if (match_sans_spaces_semi ("dbnext", input_buf))
 	    {
 	      tree::break_next = true;
 
-	      tree::last_line = tree_statement_stack::current_line ();
+	      tree::last_line = octave_call_stack::current_line ();
 
 	      tree::break_function = octave_call_stack::current ();
 
 	      return retval;
 	    }
 	}
 
       if (read_as_string)
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -82,18 +82,17 @@ octave_value_list
 tree_statement::eval (bool silent, int nargout, bool in_function_body)
 {
   octave_value_list retval;
 
   bool pf = silent ? false : print_flag;
 
   if (cmd || expr)
     {
-      unwind_protect::add (tree_statement_stack::unwind_pop, 0);
-      tree_statement_stack::push (this);
+      octave_call_stack::set_statement (this);
 
       maybe_echo_code (in_function_body);
 
       try
 	{
 	  if (cmd)
 	    cmd->eval ();
 	  else
@@ -126,18 +125,16 @@ tree_statement::eval (bool silent, int n
 		bind_ans (retval(0), pf);
 	    }
 	}
       catch (octave_execution_exception)
 	{
 	  octave_exception_state = octave_no_exception;
 	  error ("caught execution error in library function");
 	}
-
-      unwind_protect::run ();
     }
 
   return retval;
 }
 
 tree_statement *
 tree_statement::dup (symbol_table::scope_id scope)
 {
@@ -280,15 +277,13 @@ tree_statement_list::dup (symbol_table::
 }
 
 void
 tree_statement_list::accept (tree_walker& tw)
 {
   tw.visit_statement_list (*this);
 }
 
-tree_statement_stack *tree_statement_stack::instance = 0;
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -155,115 +155,15 @@ private:
 
   // No copying!
 
   tree_statement_list (const tree_statement_list&);
 
   tree_statement_list& operator = (const tree_statement_list&);
 };
 
-class tree_statement_stack
-{
-protected:
-
-  tree_statement_stack (void) : tss () { }
-
-public:
-
-  typedef std::deque<tree_statement *>::iterator iterator ;
-
-  static bool instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      instance = new tree_statement_stack ();
-
-    if (! instance)
-      {
-	::error ("unable to create stmt stack object!");
-
-	retval = false;
-      }
-
-    return retval;
-  }
-
-  // Current statement (top of stack).
-  static tree_statement *current (void) { return top (); }
-
-  static int current_line (void)
-  {
-    tree_statement *s = current ();
-    return s ? s->line () : -1;
-  }
-
-  static int current_column (void)
-  {
-    tree_statement *s = current ();
-    return s ? s->column () : -1;
-  }
-
-  // Statement at position N on the call stack (N == 0 is current).
-  static tree_statement *element (size_t n)
-  {
-    return instance_ok () ? instance->do_element (n) : 0;
-  }
-
-  // Caller statement
-  static tree_statement *caller (void) { return element (1); }
-
-  static void push (tree_statement *f)
-  {
-    if (instance_ok ())
-      instance->do_push (f);
-  }
-
-  static tree_statement *top (void)
-  {
-    return instance_ok () ? instance->do_top (): 0;
-  }
-
-  static void pop (void)
-  {
-    if (instance_ok ())
-      instance->do_pop ();
-  }
-  
-  // A function for popping the top of the call stack that is suitable
-  // for use as an unwind_protect handler.
-  static void unwind_pop (void *) { pop (); }
-
-  static void clear (void)
-  {
-    if (instance_ok ())
-      instance->do_clear ();
-  }
-
-private:
-
-  // The current stmt stack.
-  std::deque<tree_statement *> tss;
-
-  static tree_statement_stack *instance;
-
-  tree_statement *do_element (size_t n) { return tss.size () > n ? tss[n] : 0; }
-
-  void do_push (tree_statement *f) { tss.push_front (f); }
-
-  tree_statement *do_top (void) { return tss.empty () ? 0 : tss.front (); }
-
-  void do_pop (void)
-  {
-    if (! tss.empty ())
-      tss.pop_front ();
-  }
-
-  void do_clear (void) { tss.clear (); }
-};
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -90,73 +90,166 @@ bool octave_initialized = false;
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to parent function that is currently being evaluated.
 octave_function *curr_parent_function = 0;
 
 octave_call_stack *octave_call_stack::instance = 0;
 
+int
+octave_call_stack::do_current_line (void) const
+{
+  tree_statement *stmt = do_top_statement ();
+
+  return stmt ? stmt->line () : -1;
+}
+
+int
+octave_call_stack::do_current_column (void) const
+{
+  tree_statement *stmt = do_top_statement ();
+
+  return stmt ? stmt->column () : -1;
+}
+
 octave_user_script *
-octave_call_stack::do_caller_user_script (void)
+octave_call_stack::do_caller_user_script (void) const
 {
   octave_user_script *retval = 0;
 
-  for (iterator p = cs.begin (); p != cs.end (); p++)
+  for (const_iterator p = cs.begin (); p != cs.end (); p++)
     {
-      octave_function *f = *p;
+      const call_stack_elt& elt = *p;
+
+      octave_function *f = elt.fcn;
 
       if (f && f->is_user_script ())
 	{
 	  retval = dynamic_cast<octave_user_script *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
 octave_user_function *
-octave_call_stack::do_caller_user_function (void)
+octave_call_stack::do_caller_user_function (void) const
 {
   octave_user_function *retval = 0;
 
-  for (iterator p = cs.begin (); p != cs.end (); p++)
+  for (const_iterator p = cs.begin (); p != cs.end (); p++)
     {
-      octave_function *f = *p;
+      const call_stack_elt& elt = *p;
+
+      octave_function *f = elt.fcn;
 
       if (f && f->is_user_function ())
 	{
 	  retval = dynamic_cast<octave_user_function *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
 octave_user_code *
-octave_call_stack::do_caller_user_code (void)
+octave_call_stack::do_caller_user_code (void) const
 {
   octave_user_code *retval = 0;
 
-  for (iterator p = cs.begin (); p != cs.end (); p++)
+  for (const_iterator p = cs.begin (); p != cs.end (); p++)
     {
-      octave_function *f = *p;
+      const call_stack_elt& elt = *p;
+
+      octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
 	{
 	  retval = dynamic_cast<octave_user_code *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
+Octave_map
+octave_call_stack::do_backtrace (void) const
+{
+  Octave_map retval;
+
+  size_t nframes = cs.size () - 1;
+
+  Cell keys (4, 1);
+
+  keys(0) = "file";
+  keys(1) = "name";
+  keys(2) = "line";
+  keys(3) = "column";
+
+  Cell file (nframes, 1);
+  Cell name (nframes, 1);
+  Cell line (nframes, 1);
+  Cell column (nframes, 1);
+
+  const_iterator p = cs.begin ();
+  
+  // Skip innermost function as it will be the dbstatus function
+  // itself.  FIXME -- Is it best to do this here?
+  p++;
+
+  octave_idx_type k = 0;
+
+  while (p != cs.end ())
+    {
+      const call_stack_elt& elt = *p;
+
+      octave_function *f = elt.fcn;
+
+      if (f)
+	{
+	  file(k) = f->fcn_file_name ();
+	  name(k) = f->name ();
+
+	  tree_statement *stmt = elt.stmt;
+
+	  if (stmt)
+	    {
+	      line(k) = stmt->line ();
+	      column(k) = stmt->column ();
+	    }
+	  else
+	    {
+	      line(k) = -1;
+	      column(k) = -1;
+	    }
+	}
+      else
+	{
+	  file(k) = "<unknown>";
+	  name(k) = "<unknown>";
+	  line(k) = -1;
+	  column(k) = -1;
+	}
+
+      k++;
+      p++;
+    }
+
+  retval.assign ("file", file);
+  retval.assign ("name", name);
+  retval.assign ("line", line);
+  retval.assign ("column", column);
+
+  return retval;
+}
+
 void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_signal_caught = 0;
   octave_exception_state = octave_no_exception;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -28,19 +28,22 @@ along with Octave; see the file COPYING.
 
 #include <deque>
 #include <string>
 
 class octave_value;
 class octave_value_list;
 class octave_function;
 class octave_user_script;
+class tree_statement;
 class tree_statement_list;
 class charMatrix;
 
+#include "oct-map.h"
+
 extern OCTINTERP_API void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern OCTINTERP_API void recover_from_exception (void);
 
 extern int main_loop (void);
 
 extern OCTINTERP_API void
@@ -63,23 +66,34 @@ extern OCTINTERP_API octave_function *cu
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 class
 octave_call_stack
 {
+private:
+
+  struct call_stack_elt
+  {
+    call_stack_elt (octave_function *f) : fcn (f), stmt (0) { }
+
+    octave_function *fcn;
+    tree_statement *stmt;
+  };
+
 protected:
 
   octave_call_stack (void) : cs () { }
 
 public:
 
-  typedef std::deque<octave_function *>::iterator iterator ;
+  typedef std::deque<call_stack_elt>::iterator iterator;
+  typedef std::deque<call_stack_elt>::const_iterator const_iterator;
 
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
       instance = new octave_call_stack ();
 
@@ -91,16 +105,31 @@ public:
       }
 
     return retval;
   }
 
   // Current function (top of stack).
   static octave_function *current (void) { return top (); }
 
+  // Current statement (top of stack).
+  static tree_statement *current_statement (void) { return top_statement (); }
+
+  // Current line in current function.
+  static int current_line (void)
+  {
+    return instance_ok () ? instance->do_current_line () : 0;
+  }
+
+  // Current column in current function.
+  static int current_column (void)
+  {
+    return instance_ok () ? instance->do_current_column () : 0;
+  }
+
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
     return element (1);
   }
 
   // Function at location N on the call stack (N == 0 is current), may
   // be built-in.
@@ -133,16 +162,32 @@ public:
       instance->do_push (f);
   }
 
   static octave_function *top (void)
   {
     return instance_ok () ? instance->do_top (): 0;
   }
 
+  static tree_statement *top_statement (void)
+  {
+    return instance_ok () ? instance->do_top_statement (): 0;
+  }
+
+  static void set_statement (tree_statement *s)
+  {
+    if (instance_ok ())
+      instance->do_set_statement (s);
+  }
+
+  static Octave_map backtrace (void)
+  {
+    return instance_ok () ? instance->do_backtrace () : Octave_map ();
+  }
+
   static void pop (void)
   {
     if (instance_ok ())
       instance->do_pop ();
   }
   
   // A function for popping the top of the call stack that is suitable
   // for use as an unwind_protect handler.
@@ -152,31 +197,84 @@ public:
   {
     if (instance_ok ())
       instance->do_clear ();
   }
 
 private:
 
   // The current call stack.
-  std::deque<octave_function *> cs;
+  std::deque<call_stack_elt> cs;
 
   static octave_call_stack *instance;
 
-  octave_function *do_element (size_t n) { return cs.size () > n ? cs[n] : 0; }
+  int do_current_line (void) const;
+
+  int do_current_column (void) const;
+
+  octave_function *do_element (size_t n)
+  {
+    octave_function *retval = 0;
+
+    if (cs.size () > n)
+      {
+	call_stack_elt& elt = cs[n];
+	retval = elt.fcn;
+      }
 
-  octave_user_script *do_caller_user_script (void);
+    return retval;
+  }
+
+  octave_user_script *do_caller_user_script (void) const;
+
+  octave_user_function *do_caller_user_function (void) const;
+
+  octave_user_code *do_caller_user_code (void) const;
 
-  octave_user_function *do_caller_user_function (void);
+  void do_push (octave_function *f)
+  {
+    cs.push_front (call_stack_elt (f));
+  }
+
+  octave_function *do_top (void) const
+  {
+    octave_function *retval = 0;
 
-  octave_user_code *do_caller_user_code (void);
+    if (! cs.empty ())
+      {
+	const call_stack_elt& elt = cs.front ();
+	retval = elt.fcn;
+      }
+
+    return retval;
+  }
+
+  tree_statement *do_top_statement (void) const
+  {
+    tree_statement *retval = 0;
 
-  void do_push (octave_function *f) { cs.push_front (f); }
+    if (! cs.empty ())
+      {
+	const call_stack_elt& elt = cs.front ();
+	retval = elt.stmt;
+      }
+
+    return retval;
+  }
 
-  octave_function *do_top (void) { return cs.empty () ? 0 : cs.front (); }
+  void do_set_statement (tree_statement *s)
+  {
+    if (! cs.empty ())
+      {
+	call_stack_elt& elt = cs.front ();
+	elt.stmt = s;
+      }
+  }
+
+  Octave_map do_backtrace (void) const;
 
   void do_pop (void)
   {
     if (! cs.empty ())
       cs.pop_front ();
   }
 
   void do_clear (void) { cs.clear (); }
