# HG changeset patch
# User jwe
# Date 854142906 0
#      Fri Jan 24 21:55:06 1997 +0000
# Node ID 337a09dd1c0659837c300697476aecf7da8f7151
# Parent  5c773d4745d6c7a5f3f89d3d20a840921364f674
[project @ 1997-01-24 21:49:41 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+Wed Jan 22 11:14:07 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4 (ld_run_path): Anchor search at beginning of line to
+	avoid GNU sed bug on HP-UX systems.  Use just one sed command.
+
+	* emacs/octave-hlp.el, emacs/octave-inf.el, emacs/octave-mod.el:
+	New files from Kurt Hornik.
+	* emacs/octave.el: Delete.
+
 Mon Jan 20 11:16:21 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkoctfile.in (ALL_CXXFLAGS): Delete reference to -lg++.
 
 	* configure.in (RLD_FLAG): For sparc-sun-sunos4*, remove space
 	between -L and $(libdir).
 	(FPICFLAG): If using g77, set it to -fPIC.
 
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,19 @@
 Summary of changes for version 2.0.2:
 ------------------------------------
 
+  * Octave now stops executing commands from a script file if an error
+    is encountered.
+
+  * The return, and break commands now cause Octave to quit executing
+    commands from script files.  When used in invalid contexts, the
+    break, continue, and return commands are now simply ignored
+    instead of producing parse errors.
+
   * size ("") is now [0, 0].
 
 Summary of changes for version 2.0:
 ----------------------------------
 
   * The set and show commands for setting and displaying gnuplot
     parameters have been replaced by gset and gshow.  This change will
     probably break lots of things, but it is necessary to allow for
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -389,20 +389,16 @@ Interpreter:
     must be zero...
 
   * Eliminate force_numeric and make_numeric functions.
 
   * Is Matrix::fortran_vec() really necessary?
 
   * print_usage() should set error_state in most cases?
 
-  * Add an option to make Octave quit executing a script when error() is
-    called.  Also make it possible for `return' or `break' to exit a
-    script.
-
   * Make statements like this
 
       foo bar baz
 
     turn into function calls like this:
 
       foo ("bar", "baz")
 
diff --git a/README.Linux b/README.Linux
--- a/README.Linux
+++ b/README.Linux
@@ -36,16 +36,18 @@ I know from experience that the versions
 well together.  But if you have a newer version of the kernel, you may
 need a newer version of the C library.  I don't have time to keep up
 with all the various library versions (life is much too short for
 that), nor do I know which combinations are supposed to work together.
 That sort of information should be clearly stated in the release notes
 for the libraries.  If it is not, please ask the maintainers of the
 libraries to clarify the documentation.
 
+Please note that I am NOT
+
 Octave won't even compile
 -------------------------
 
 If you can't compile Octave, you should first check to see that your
 compiler and header files are properly installed.  Do you have
 multiple versions of the g++ include files on your system?  Are you
 sure that your copy of g++ is finding the right set?  You can find out
 by compiling a simple C++ program with -v:
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -121,18 +121,17 @@ dnl with spaces.  Try to only do that if
 dnl since doing that causes problems on other systems.
 dnl
 xlf_p=`echo $foutput | grep xlfentry`
 if test -n "$xlf_p"; then
   foutput=`echo $foutput | sed 's/,/ /g'`
 fi
 dnl
 ld_run_path=`echo $foutput | \
-  sed -n -e 's/.*\(LD_RUN_PATH *= *[^ ]*\).*/\1/p' | \
-  sed -e 's/LD_RUN_PATH *= *//'`
+  sed -n -e 's/^.*\(LD_RUN_PATH *= *\([^ ]*\).*/\1/p'`
 dnl
 dnl We are only supposed to find this on Solaris systems, and this
 dnl substitution is probably only going to work with gcc on those
 dnl systems...
 dnl
 if test -n "$ld_run_path"; then
   if test "$ac_cv_prog_gcc" = yes; then
     ld_run_path="-Xlinker -R -Xlinker $ld_run_path"
diff --git a/doc/interpreter/emacs.texi b/doc/interpreter/emacs.texi
--- a/doc/interpreter/emacs.texi
+++ b/doc/interpreter/emacs.texi
@@ -1,11 +1,11 @@
-@c Copyright (C) 1996 John W. Eaton
-@c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/17
-@c Updated for octave.el version 0.8.3 by KH on 1996/07/02
+@c Copyright (C) 1996, 1997 John W. Eaton
+@c Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/17.
+@c Last updated by KH on 1997/01/22.
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Emacs, Installation, Amusements, Top
 @chapter Using Emacs With Octave
 
 The development of Octave code can greatly be facilitated using Emacs
 with Octave mode, a major mode for editing Octave files which can e.g.@:
@@ -23,49 +23,55 @@ Finally, you can convince Octave to use 
 
 All functionality is provided by the Emacs Lisp package @file{octave}.
 This chapter describes how to set up and use this package.
 
 Please contact <Kurt.Hornik@@ci.tuwien.ac.at> if you have any questions
 or suggestions on using Emacs with Octave.
 
 @menu
-* Setting Up Octave Mode::      
+* Installing the Emacs Octave Package::  
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
 
-@node Setting Up Octave Mode, Using Octave Mode, Emacs, Emacs
-@section Setting Up Octave Mode
+@node Installing the Emacs Octave Package, Using Octave Mode, Emacs, Emacs
+@section Installing the Emacs Octave Package
+
+The Emacs package @file{octave} consists of the three files
+@file{octave-mod.el}, @file{octave-inf.el}, and @file{octave-hlp.el}.
+These files, or better yet their byte-compiled versions, should be
+somewhere in your Emacs load-path.
+
+If you have GNU Emacs with a version number at least as high as 19.35,
+you are all set up, because the package is respectively will be part of
+GNU Emacs as of version 19.35.
+
+Otherwise, copy the three files from the @file{emacs} subdirectory of
+the Octave distribution to a place where Emacs can find them (this
+depends on how your Emacs was installed).  Byte-compile them for speed
+if you want.
+
+@node Using Octave Mode, Running Octave From Within Emacs, Installing the Emacs Octave Package, Emacs
+@section Using Octave Mode
 
 If you are lucky, your sysadmins have already arranged everything so
 that Emacs automatically goes into Octave mode whenever you visit an
 Octave code file as characterized by its extension @file{.m}.  If not,
 proceed as follows.
 
 @enumerate
 @item
-Make sure that the file @file{octave.el} (or better, its byte-compiled
-version @file{octave.elc}) from the Octave distribution is somewhere in
-your load-path.
-
-@quotation
-@strong{Note:} The current version of @file{octave.el} was developed,
-tested and byte-compiled under GNU Emacs 19.31.  It may not work under
-other Emacs versions, in particular under XEmacs.
-@end quotation
-
-@item
 To begin using Octave mode for all @file{.m} files you visit, add the
 following lines to a file loaded by Emacs at startup time, typically
 your @file{~/.emacs} file:
 
 @lisp
-(autoload 'octave-mode "octave" nil t)
+(autoload 'octave-mode "octave-mod" nil t)
 (setq auto-mode-alist
       (cons '(\"\\\\.m$\" . octave-mode) auto-mode-alist))
 @end lisp
 
 @item
 Finally, to turn on the abbrevs, auto-fill and font-lock features
 automatically, also add the following lines to one of the Emacs startup
 files:
@@ -76,19 +82,16 @@ files:
             (auto-fill-mode 1)
             (if (eq window-system 'x)
                 (font-lock-mode 1))))
 @end lisp
 See the Emacs manual for more information about how to customize
 Font-lock mode.
 @end enumerate
 
-@node Using Octave Mode, Running Octave From Within Emacs, Setting Up Octave Mode, Emacs
-@section Using Octave Mode
-
 In Octave mode, the following special Emacs commands can be used in
 addition to the standard Emacs commands.
 
 @table @kbd
 @item C-h m
 Describe the features of Octave mode.
 
 @item LFD
@@ -97,24 +100,25 @@ line (@code{octave-reindent-then-newline
 point is expanded if @code{abbrev-mode} is non-@code{nil}.
 
 @item TAB
 Indents current Octave line based on its contents and on previous
 lines (@code{indent-according-to-mode}). 
 
 @item ;
 Insert an ``electric'' semicolon (@code{octave-electric-semi}).  If
-@code{octave-auto-indent} is non-@code{nil}, typing a @samp{;}
+@code{octave-auto-newline} is non-@code{nil}, typing a @samp{;}
 automatically reindents the current line, inserts a newline and indents
 the new line.
 
 @item `
 Start entering an abbreviation (@code{octave-abbrev-start}).  If Abbrev
 mode is turned on, typing @kbd{`C-h} or @kbd{`?} lists all abbrevs.
-Any other key combination is executed normally.
+Any other key combination is executed normally.  Note that all Octave
+abbrevs start with a grave accent.
 
 @item M-LFD
 Break line at point and insert continuation marker and alignment
 (@code{octave-split-line}).
 
 @item M-TAB
 Perform completion on Octave symbol preceding point, comparing that
 symbol against Octave's reserved words and builtin variables
@@ -137,21 +141,29 @@ function.
 Puts point at beginning and mark at the end of the current Octave
 function, i.e., the one containing point or following point
 (@code{octave-mark-defun}).
 
 @item M-C-q
 Properly indents the Octave function which contains point
 (@code{octave-indent-defun}).
 
+@item M-;
+If there is no comment already on this line, create a code-level comment
+(started by two comment characters) if the line is empty, or an in-line
+comment (started by one comment character) otherwise
+(@code{octave-indent-for-comment}).
+Point is left after the start of the comment which is properly aligned.
+
 @item C-c ;
-Puts the first character of @code{octave-comment-start} (usually
-@samp{#}) at the beginning of every line in the region
-(@code{octave-comment-region}).  With just @kbd{C-u} prefix argument,
-uncomment each line in the region.
+Puts the comment character @samp{#} (more precisely, the string value of
+@code{octave-comment-start}) at the beginning of every line in the
+region (@code{octave-comment-region}).  With just @kbd{C-u} prefix
+argument, uncomment each line in the region.  A numeric prefix argument
+@var{N} means use @var{N} comment characters.
 
 @item C-c :
 Uncomments every line in the region (@code{octave-uncomment-region}).
 
 @item C-c C-p
 Move one line of Octave code backward, skipping empty and comment lines
 (@code{octave-previous-code-line}).  With numeric prefix argument
 @var{N}, move that many code lines backward (forward if @var{N} is
@@ -219,18 +231,18 @@ and return values which have to be enter
 Search the function, operator and variable indices of all info files
 with documentation for Octave for entries (@code{octave-help}).  If used
 interactively, the entry is prompted for with completion.  If multiple
 matches are found, one can cycle through them using the standard
 @samp{,} (@code{Info-index-next}) command of the Info reader.
 
 The variable @code{octave-help-files} is a list of files to search
 through and defaults to @code{'("octave")}.  If there is also an Octave
-Local Guide with corresponding info file @file{octave-LG} (for example),
-you can have @code{octave-help} search both files by
+Local Guide with corresponding info file, say, @file{octave-LG}, you can
+have @code{octave-help} search both files by 
 @lisp
 (setq octave-help-files '("octave" "octave-LG"))
 @end lisp
 @noindent
 in one of your Emacs startup files.
 
 @end table
 
@@ -277,41 +289,27 @@ Non-@code{nil} means show matching begin
 newline or @samp{;} after an else or end keyword.  Default is @code{t}.
 This is an extremely useful feature for automatically verifying that the
 keywords match---if they don't, an error message is displayed.
 
 @item octave-block-offset
 Extra indentation applied to statements in block structures.
 Default is 2.
 
-@item octave-comment-column
-Column to indent right-margin comments to.
-Default is 32.
-(Such comments are created using @key{M-;} (@code{indent-for-comment}).)
-
-@item octave-comment-start
-Delimiter inserted to start new comment.
-Default value is @samp{# }.
-
 @item octave-continuation-offset
 Extra indentation applied to Octave continuation lines.
 Default is 4. 
 
 @item octave-continuation-string
 String used for Octave continuation lines.
 Normally @samp{\}.
 
-@item octave-fill-column
-Column beyond which automatic line-wrapping should happen.
-Default is 72.
-
-@item octave-inhibit-startup-message
-If @code{t}, no startup message is displayed when Octave mode is
-called. 
-Default is @code{nil}.
+@item octave-mode-startup-message
+If @code{t} (default), a startup message is displayed when Octave mode
+is called.
 
 @end table
 
 If Font Lock mode is enabled, Octave mode will display
 @itemize @bullet
 @item
 strings in @code{font-lock-string-face}
 @item
@@ -351,26 +349,30 @@ The package @file{octave} provides comma
 Octave process in a special Emacs buffer.  Use 
 @lisp
 M-x run-octave
 @end lisp
 @noindent
 to directly start an inferior Octave process.  If Emacs does not know
 about this command, add the line
 @lisp
-(autoload 'run-octave "octave" nil t)
+(autoload 'run-octave "octave-inf" nil t)
 @end lisp
 @noindent
 to your @file{.emacs} file.
 
 This will start Octave in a special buffer the name of which is
 specified by the variable @code{inferior-octave-buffer} and defaults to
-@code{"*Octave Interaction*"}.  From within this buffer, you can
+@code{"*Inferior Octave*"}.  From within this buffer, you can
 interact with the inferior Octave process `as usual', i.e., by entering
-Octave commands at the prompt.
+Octave commands at the prompt.  The buffer is in Inferior Octave mode,
+which is derived from the standard Comint mode, a major mode for
+interacting with an inferior interpreter.  See the documentation for
+@code{comint-mode} for more details, and use @kbd{C-h b} to find out
+about available special keybindings.
 
 You can also communicate with an inferior Octave process from within
 files with Octave code (i.e., buffers in Octave mode), using the
 following commands.
 
 @table @kbd
 @item C-c i l
 Send the current line to the inferior Octave process
@@ -386,17 +388,17 @@ Send the current function to the inferio
 (@code{octave-send-defun}).
 @item C-c i r
 Send the region to the inferior Octave process
 (@code{octave-send-region}).
 @item C-c i s
 Make sure that `inferior-octave-buffer' is displayed
 (@code{octave-show-process-buffer}).
 @item C-c i h
-Delete all windows that display @file{inferior-octave-buffer}
+Delete all windows that display the inferior Octave buffer
 (@code{octave-hide-process-buffer}).
 @item C-c i k
 Kill the inferior Octave process and its buffer
 (@code{octave-kill-process}).
 @end table
 
 The effect of the commands which send code to the Octave process can be
 customized by the following variables.
@@ -418,17 +420,17 @@ The startup of the inferior Octave proce
 The variable @code{inferior-octave-startup-args} can be used for
 specifying command lines arguments to be passed to Octave on startup
 as a list of strings.  For example, to suppress the startup message and
 use `traditional' mode, set this to @code{'("-q" "--traditional")}.
 You can also specify a startup file of Octave commands to be loaded on
 startup;  note that these commands will not produce any visible output
 in the process buffer.  Which file to use is controlled by the variable
 @code{inferior-octave-startup-file}.  If this is @code{nil}, the file
-@file{~/.emacs_octave} is used if it exists.
+@file{~/.emacs-octave} is used if it exists.
 
 And finally, @code{inferior-octave-mode-hook} is run after starting the
 process and putting its buffer into Inferior Octave mode.  Hence, if you
 like the up and down arrow keys to behave in the interaction buffer as
 in the shell, and you want this buffer to use nice colors, add
 @lisp
 (add-hook 'inferior-octave-mode-hook
           (lambda ()
@@ -451,39 +453,40 @@ Otherwise, @emph{nothing} will work, bec
 when Octave is waiting for input, or done sending output.
 @end quotation
 
 @node Using the Emacs Info Reader for Octave,  , Running Octave From Within Emacs, Emacs
 @section Using the Emacs Info Reader for Octave
 
 You can also set up the Emacs Info reader for dealing with the results
 of Octave's @samp{help -i}.  For this, the package @file{gnuserv} needs
-to be installed.  The @file{gnuserv} package is not distributed with GNU
-Emacs, but it can be retrieved from any GNU Emacs Lisp Code Directory
-archive, e.g.@:
+to be installed, which unfortunately still does not come with GNU Emacs
+(it does with XEmacs).  It can be retrieved from any GNU Emacs Lisp Code
+Directory archive, e.g.@:
 @file{ftp://ftp.cis.ohio-state.edu/pub/gnu/emacs/elisp-archive},
-in the @file{packages} subdirectory.  There is also a newer version
-around (use archie to look for @file{gnuserv-2.1alpha.tar.gz}).
+in the @file{packages} subdirectory.  The alpha version of an enhanced
+version of gnuserv is available at 
+@file{ftp://ftp.wellfleet.com/netman/psmith/emacs/gnuserv-2.1alpha.tar.gz}.
 
 If @file{gnuserv} is installed, add the lines
 @lisp
-(autoload 'octave-help "octave" nil t)
+(autoload 'octave-help "octave-hlp" nil t)
 (require 'gnuserv)
 (gnuserv-start)
 @end lisp
 @noindent
 to your @file{.emacs} file.
 
 You can use either `plain' Emacs Info or the function @code{octave-help}
 as your Octave info reader (for @samp{help -i}).  In the former case,
 set the Octave variable @code{INFO_PROGRAM} to @code{"info-emacs-info"}.
 The latter is perhaps more attractive because it allows to look up keys
 in the indices of @emph{several} info files related to Octave (provided
 that the Emacs variable @code{octave-help-files} is set correctly).  In
 this case, set @code{INFO_PROGRAM} to @code{"info-emacs-octave-help"}.
 
-If you use Octave from within Emacs, it is probably best to put these
-settings in the @file{~/.emacs_octave} startup file (or in the file
-named by the Emacs variable @code{inferior-octave-startup-file}).
+If you use Octave from within Emacs, these settings are best done in the
+@file{~/.emacs-octave} startup file (or the file pointed to by the Emacs
+variable @code{inferior-octave-startup-file}).
 
 @c Local Variables:
 @c TeX-command-default: "Texinfo"
 @c End:
diff --git a/doc/interpreter/install.texi b/doc/interpreter/install.texi
--- a/doc/interpreter/install.texi
+++ b/doc/interpreter/install.texi
@@ -178,41 +178,72 @@ the definition from @file{info/config.h}
 If @code{configure} finds @code{dlopen}, @code{dlsym}, @code{dlclose},
 and @code{dlerror}, but not the header file @file{dlfcn.h}, you need to
 find the source for the header file and install it in the directory
 @file{usr/include}.  This is reportedly a problem with Slackware 3.1.
 For Linux/GNU systems, the source for @file{dlfcn.h} is in the
 @samp{ldso} package.
 
 @item
-You may need to edit some files in the gcc include subdirectory to add
-prototypes for functions there.  For example, Ultrix 4.2 needs proper
-declarations for the @code{signal()} and the @code{SIG_IGN} macro in the
-file @file{signal.h}.
+If you encounter errors like
+
+@smallexample
+@group
+passing `void (*)()' as argument 2 of
+  `octave_set_signal_handler(int, void (*)(int))'
+@end group
+@end smallexample
+
+@noindent
+or
+
+@smallexample
+warning: ANSI C++ prohibits conversion from `(int)' to `(...)'
+@end smallexample
+
+@noindent
+while compiling @file{sighandlers.cc}, you may need to edit some files
+in the gcc include subdirectory to add proper prototypes for functions
+there.  For example, Ultrix 4.2 needs proper declarations for the
+@code{signal()} and the @code{SIG_IGN} macro in the file @file{signal.h}.
 
 On some systems the @code{SIG_IGN} macro is defined to be something like
 this:
 
 @example
 #define  SIG_IGN  (void (*)())1
 @end example
 
 @noindent
 when it should really be something like:
 
 @example
 #define  SIG_IGN  (void (*)(int))1
 @end example
 
 @noindent
-to match the prototype declaration for @code{signal()}.
+to match the prototype declaration for @code{signal()}.  This change
+should also be made for the @code{SIG_DFL} and @code{SIG_ERR} symbols.
+It may be necessary to change the definitions in @file{sys/signal.h} as
+well.
+
+The gcc fixincludes/fixproto script should probably fix these problems
+when gcc installs its modified set of header files, but I don't think
+that's been done yet.
 
-The gcc fixincludes/fixproto script should probably fix this when gcc
-installs its modified set of header files, but I don't think that's
-been done yet.
+@strong{You should not change the files in @file{/usr/include}}.  You
+can find the gcc include directory tree by running the command
+
+@example
+gcc -print-libgcc-file-name
+@end example
+
+@noindent
+The directory of gcc include files normally begins in the same directory
+that contains the file @file{libgcc.a}.
 
 @item
 There is a bug with the makeinfo program that is distributed with
 Texinfo (through version 3.9) that causes the indices in Octave's
 on-line manual to be generated incorrectly.  If you need to recreate the
 on-line documentation, you should get the makeinfo program that is
 distributed with texinfo-3.9 and apply the patch for makeinfo that is
 distributed with Octave.  See the file @file{MAKEINFO.PATCH} for more
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -318,17 +318,17 @@ System Utilities
 
 Programming Utilities
 
 * Evaluating Strings as Commands::  
 * Miscellaneous Utilities::     
 
 Using Emacs With Octave
 
-* Setting Up Octave Mode::      
+* Installing the Emacs Octave Package::  
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 
 Installing Octave
 
 * Installation Problems::       
 * Binary Distributions::        
diff --git a/doc/interpreter/program.texi b/doc/interpreter/program.texi
--- a/doc/interpreter/program.texi
+++ b/doc/interpreter/program.texi
@@ -278,52 +278,67 @@ The command @code{whos} is equivalent to
 @end deffn
 
 @deftypefn {Built-in Function} {} exist (@var{name})
 Return 1 if the name exists as a variable, and 2 if the name (after
 appending @samp{.m}) is a function file in the path.  Otherwise, return
 0.
 @end deftypefn
 
-@deftypefn {Built-in Function} {} error (@var{msg})
-Print the message @var{msg}, prefixed by the string @samp{error: }, and
-set Octave's internal error state such that control will return to the
-top level without evaluating any more commands.  This is useful for
-aborting from functions.
+@deftypefn {Built-in Function} {} error (@var{template}, @dots{})
+The @code{error} function formats the optional arguments under the
+control of the template string @var{template} using the same rules as
+the @code{printf} family of functions (@pxref{Formatted Output}).
+The resulting message is prefixed by the string @samp{error: } and
+printed on the @code{stderr} stream.
 
-If @var{msg} does not end with a new line character, Octave will print a
-traceback of all the function calls leading to the error.  For example,
+Calling @code{error} also sets Octave's internal error state such that
+control will return to the top level without evaluating any more
+commands.  This is useful for aborting from functions or scripts.
+
+If the error message does not end with a new line character, Octave will
+print a traceback of all the function calls leading to the error.  For
+example, given the following function definitions:
 
 @example
+@group
 function f () g () end
 function g () h () end
 function h () nargin == 1 || error ("nargin != 1"); end
+@end group
+@end example
+
+@noindent
+calling the function @code{f()} will result in a list of messages that
+can help you to quickly locate the exact location of the error:
+
+@example
+@group
 f ()
 error: nargin != 1
 error: evaluating index expression near line 1, column 30
 error: evaluating binary operator `||' near line 1, column 27
 error: called from `h'
 error: called from `g'
 error: called from `f'
+@end group
 @end example
 
-@noindent
-produces a list of messages that can help you to quickly locate the
-exact location of the error.
-
-If @var{msg} ends in a new line character, Octave will only print
-@var{msg} and will not display any traceback messages as it returns
+If the error message ends in a new line character, Octave will print the
+message but will not display any traceback messages as it returns
 control to the top level.  For example, modifying the error message
 in the previous example to end in a new line causes Octave to only print
 a single message:
 
 @example
+@group
 function h () nargin == 1 || error ("nargin != 1\n"); end
 f ()
 error: nargin != 1
+@end group
 @end example
 @end deftypefn
 
 @defvr {Built-in Variable} error_text
 @end defvr
 
 @defvr {Built-in Variable} beep_on_error
 If the value of @code{beep_on_error} is nonzero, Octave will try
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+Wed Jan 22 15:03:33 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/Makefile.in (pic/machar.o): Add $(CPICFLAG) for this target.
+
+	* misc/d1mach.f (d1mach): Move SAVE statement ahead of DATA statment.
+
 Wed Jan 15 21:04:29 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* blas/*.f: Update to latest version from Netlib.
 
 Tue Jan  7 00:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.1 released.
 
diff --git a/libcruft/misc/d1mach.f b/libcruft/misc/d1mach.f
--- a/libcruft/misc/d1mach.f
+++ b/libcruft/misc/d1mach.f
@@ -1,14 +1,14 @@
       double precision function d1mach (i)
       integer i
       logical init
       double precision dmach(5)
+      save init, dmach
       data init /.false./
-      save init, dmach
       if (.not. init) then
         call machar (dmach(1), dmach(2), dmach(3), dmach(4), dmach(5))
         init = .true.
       endif
       if (i .lt. 1  .or.  i .gt. 5) goto 999
       d1mach = dmach(i)
       return
   999 write(*,1999) i
diff --git a/libcruft/misc/machar.c b/libcruft/misc/machar.c
--- a/libcruft/misc/machar.c
+++ b/libcruft/misc/machar.c
@@ -14,25 +14,25 @@ August 3, 1988.
 
 #ifdef SP
 #define REAL float
 #define ZERO 0.0
 #define ONE 1.0
 #define PREC "Single "
 #define REALSIZE 1
 #endif
- 
+
 #ifdef DP
 #define REAL double
 #define ZERO 0.0e0
 #define ONE 1.0e0
 #define PREC "Double "
 #define REALSIZE 2
 #endif
- 
+
 #include <math.h>
 #include <stdio.h>
 
 #define ABS(xxx) ((xxx>ZERO)?(xxx):(-xxx))
 
 void
 rmachar(ibeta,it,irnd,ngrd,machep,negep,iexp,minexp,
         maxexp,eps,epsneg,xmin,xmax)
@@ -49,19 +49,19 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
     but not all, of the improvements suggested by M. Gentleman and S.
     Marovich, CACM 17 (1974), pp. 276-277.  An earlier version of this
     program was published in the book Software Manual for the
     Elementary Functions by W. J. Cody and W. Waite, Prentice-Hall,
     Englewood Cliffs, NJ, 1980.  The present program is a
     translation of the Fortran 77 program in W. J. Cody, "MACHAR:
     A subroutine to dynamically determine machine parameters".
     TOMS (14), 1988.
- 
+
    Parameter values reported are as follows:
- 
+
         ibeta   - the radix for the floating-point representation
         it      - the number of base ibeta digits in the floating-point
                   significand
         irnd    - 0 if floating-point addition chops
                   1 if floating-point addition rounds, but not in the
                     IEEE style
                   2 if floating-point addition rounds in the IEEE style
                   3 if floating-point addition chops, and there is
@@ -107,22 +107,22 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
         xmin    - the smallest non-vanishing normalized floating-point
                   power of the radix, i.e.,  xmin = FLOAT(ibeta)**minexp
         xmax    - the largest finite floating-point number.  In
                   particular  xmax = (1.0-epsneg)*FLOAT(ibeta)**maxexp
                   Note - on some machines  xmax  will be only the
                   second, or perhaps third, largest number, being
                   too small by 1 or 2 units in the last digit of
                   the significand.
- 
+
       Latest revision - August 4, 1988
- 
+
       Author - W. J. Cody
                Argonne National Laboratory
- 
+
 */
 
 {
       int i,iz,j,k;
       int mx,itmp,nxres;
       REAL a,b,beta,betain,one,y,z,zero;
       REAL betah,t,tmp,tmpa,tmp1,two;
 
@@ -184,21 +184,21 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
 
 /*
   determine negep, epsneg
 */
 
       (*negep) = (*it) + 3;
       betain = one / beta;
       a = one;
- 
+
       for (i = 1; i<=(*negep); i++) {
          a = a * betain;
       }
- 
+
       b = a;
       tmp = (one-a);
       tmp = tmp-one;
 
       while (tmp == zero) {
          a = a*beta;
          *negep = *negep-1;
          tmp1 = one-a;
@@ -218,17 +218,17 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
 
       while (tmp-one == zero) {
          a = a*beta;
          *machep = *machep+1;
          tmp = one+a;
       }
 
       *eps = a;
-      
+
 /*
   determine ngrd
 */
 
       (*ngrd) = 0;
       tmp = one+*eps;
       tmp = tmp*one;
       if (((*irnd) == 0) && (tmp-one) != zero) (*ngrd) = 1;
@@ -281,17 +281,17 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
          (*iexp) = 2;
          iz = *ibeta;
          while (k >= iz) {
             iz = iz * (*ibeta);
             (*iexp) = (*iexp) + 1;
          }
          mx = iz + iz - 1;
       }
- 
+
 /*
   loop to determine minexp, xmin.
     exit from loop is signaled by an underflow.
 */
 
       for (;;) {
          (*xmin) = y;
          y = y * betain;
@@ -347,24 +347,24 @@ rmachar(ibeta,it,irnd,ngrd,machep,negep,
       if (i > 20) (*maxexp) = (*maxexp) - 1;
       if (a != y) (*maxexp) = (*maxexp) - 2;
       (*xmax) = one - (*epsneg);
       tmp = (*xmax)*one;
       if (tmp != (*xmax)) (*xmax) = one - beta * (*epsneg);
       (*xmax) = (*xmax) / (beta * beta * beta * (*xmin));
       i = (*maxexp) + (*minexp) + 3;
       if (i > 0) {
- 
+
          for (j = 1; j<=i; j++ ) {
              if ((*ibeta) == 2) (*xmax) = (*xmax) + (*xmax);
              if ((*ibeta) != 2) (*xmax) = (*xmax) * beta;
          }
 
       }
- 
+
     return;
 
 }
 
 void
 #if defined (F77_APPEND_UNDERSCORE)
 machar_ (REAL *xmin, REAL *xmax, REAL *epsneg, REAL *eps, REAL *log10_ibeta)
 #else
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Wed Jan 22 16:18:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dbleSVD.cc (SVD::init): Work around apparent dgesvd() bug.
+	* CmplxSVD.cc (ComplexSVD::init): Work around apparent zgesvd() bug.
+
 Mon Jan 20 18:44:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* chMatrix.cc (charMatrix::charMatrix (const string&)):
 	If the number of columns is zero, also set the number of rows to zero.
 	(charMatrix::charMatrix (const char *)): Likewise.
 
 Tue Jan  7 00:16:57 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -94,35 +94,43 @@ ComplexSVD::init (const ComplexMatrix& a
   switch (svd_type)
     {
     case SVD::economy:
       jobu = jobv = 'S';
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
-      jobu = jobv = 'N';
+
+      // Note:  for this case, both jobu and jobv should be 'N', but
+      // there seems to be a bug in dgesvd from Lapack V2.0.  To
+      // demonstrate the bug, set both jobu and jobv to 'N' and find
+      // the singular values of [eye(3), eye(3)].  The result is
+      // [-sqrt(2), -sqrt(2), -sqrt(2)].
+
+      jobu = 'O';
+      jobv = 'N';
       ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  if (jobu != 'N')
+  if (! (jobu == 'N' || jobu == 'O'))
     left_sm.resize (m, ncol_u);
 
   Complex *u = left_sm.fortran_vec ();
 
   sigma.resize (nrow_s, ncol_s);
   double *s_vec = sigma.fortran_vec ();
 
-  if (jobv != 'N')
+  if (! (jobv == 'N' || jobv == 'O'))
     right_sm.resize (nrow_vt, n);
 
   Complex *vt = right_sm.fortran_vec ();
 
   int lwork = 2*min_mn + max_mn;
 
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
@@ -135,17 +143,17 @@ ComplexSVD::init (const ComplexMatrix& a
   F77_XFCN (zgesvd, ZGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec, u,
 			     m, vt, nrow_vt, pwork, lwork, prwork, info,
 			     1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgesvd");
   else
     {
-      if (jobv != 'N')
+      if (! (jobv == 'N' || jobv == 'O'))
 	right_sm = right_sm.hermitian ();
     }
 
   return info;
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -94,35 +94,43 @@ SVD::init (const Matrix& a, SVD::type sv
   switch (svd_type)
     {
     case SVD::economy:
       jobu = jobv = 'S';
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
-      jobu = jobv = 'N';
+
+      // Note:  for this case, both jobu and jobv should be 'N', but
+      // there seems to be a bug in dgesvd from Lapack V2.0.  To
+      // demonstrate the bug, set both jobu and jobv to 'N' and find
+      // the singular values of [eye(3), eye(3)].  The result is
+      // [-sqrt(2), -sqrt(2), -sqrt(2)].
+
+      jobu = 'O';
+      jobv = 'N';
       ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  if (jobu != 'N')
+  if (! (jobu == 'N' || jobu == 'O'))
     left_sm.resize (m, ncol_u);
 
   double *u = left_sm.fortran_vec ();
 
   sigma.resize (nrow_s, ncol_s);
   double *s_vec  = sigma.fortran_vec ();
 
-  if (jobv != 'N')
+  if (! (jobv == 'N' || jobv == 'O'))
     right_sm.resize (nrow_vt, n);
 
   double *vt = right_sm.fortran_vec ();
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
 
@@ -132,17 +140,17 @@ SVD::init (const Matrix& a, SVD::type sv
   F77_XFCN (dgesvd, DGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec,
 			     u, m, vt, nrow_vt, pwork, lwork, info,
 			     1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgesvd");
   else
     {
-      if (jobv != 'N')
+      if (! (jobv == 'N' || jobv == 'O'))
 	right_sm = right_sm.transpose ();
     }
 
   return info;
 }
 
 ostream&
 operator << (ostream& os, const SVD& a)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+Wed Jan 22 11:28:30 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* specfun/erfinv.m: Avoid A([]) = X, X != [] error.
+
+Tue Jan 21 11:16:40 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* miscellaneous/xor.m: Make it work.
+
 Mon Jan 20 12:28:34 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/sombrero.m: Doc fix.
 
 Tue Jan  7 00:16:52 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.1 released.
 
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -21,19 +21,19 @@
 ## or y is true.
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function z = xor (x, y)
 
-  if (nargin != 2)
+  if (nargin == 2)
+    if (is_scalar (x) || is_scalar (y) || size (x) == size (y))  
+      z = (x | y) - (x & y);
+    else
+      error ("xor: x and y must be of common size or scalars");
+    endif
+  else
     usage ("xor (x, y)");
   endif
 
-  if (is_scalar (x) || is_scalar (y) || size (x) == size (y))  
-    error ("xor: x and y must be of common size or scalars");
-  endif
-  
-  z = (x | y) - (x & y);
-  
 endfunction
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -32,18 +32,21 @@ function y = erfinv (x)
   x = reshape (x, m * n, 1);
   y = zeros (m * n, 1);
   
   i = find ((x < -1) | (x > 1));
   if any (i)
     y(i) = NaN * ones (length (i), 1);
   endif
 
-  y (find (x == -1)) = (-Inf) * ones (sum (x == -1), 1);
-  y (find (x == 1)) = Inf * ones (sum (x == 1), 1);
+  t = find (x == -1);
+  y (tmp) = (-Inf) * ones (size (t));
+
+  t = find (x == 1);
+  y (t) = Inf * ones (size (t));
   
   i = find ((x > -1) & (x < 1));
   if any (i)
     z_old = ones (length (i), 1);
     z_new = zeros (length (i), 1);
     while (any (any (abs (z_new - z_old) > eps)))
       z_old = z_new;
       z_new = z_old - (erf (z_old) - x(i)) .* exp (z_old.^2);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+Fri Jan 24 10:05:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mk-oct-links.in: New arg, -p, to just print list of files to link.
+
+	* lex.l (handle_number): Convert `D' or `d' exponents to `e'
+	before scanning.
+
 Thu Jan 23 10:00:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-pr-code.h, pt-pr-code.cc (tree_print_code::visit_no_op_command):
 	New function. 
 	* pt-cmd.h, pt-cmd.cc (tree_no_op_command): New class.
 	* parse.y (make_break_command, make_continue_command,
 	make_return_command): Where they don't really make sense, turn
 	these commands into no-ops.  Accept return and break if reading a
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1336,18 +1336,27 @@ eat_whitespace (void)
   yyunput (c, yytext);
   current_input_column--;
   return retval;
 }
 
 static void
 handle_number (char *yytext)
 {
+  char *tmp = strsave (yytext);
+
+  char *idx = strpbrk (tmp, "Dd");
+
+  if (idx)
+    *idx = 'e';
+
   double value;
-  int nread = sscanf (yytext, "%lf", &value);
+  int nread = sscanf (tmp, "%lf", &value);
+
+  delete [] tmp;
 
   // If yytext doesn't contain a valid number, we are in deep doo doo.
 
   assert (nread == 1);
 
   lexer_flags.quote_is_transpose = 1;
   lexer_flags.cant_be_identifier = 1;
   lexer_flags.convert_spaces_to_comma = 1;
diff --git a/src/mk-oct-links.in b/src/mk-oct-links.in
--- a/src/mk-oct-links.in
+++ b/src/mk-oct-links.in
@@ -1,32 +1,44 @@
 #! /bin/sh -e
 
 # Create additional links to .oct files that define more than one
 # function.
 
-# The first arg is taken as the directory where the .oct files are
-# installed.  The remaining arguments should be the list of source
-# files that were used to create the .oct files.
+# If the first arg is -p, only print the links we need to make.
+
+# The first non-option arg is taken as the directory where the .oct
+# files are installed.  The remaining arguments should be the list of
+# source files that were used to create the .oct files.
+
+print_only=false
+if [ $1 = "-p" ]; then
+  print_only=true
+  shift
+fi
 
 LN_S="%LN_S%"
 
 links_dir=$1
 shift
 
 for f in "$@"; do
   base=`basename $f | sed 's/\.cc$//'`
   fcns=`grep -h '^ *DEFUN_DLD' $f |\
         sed -e 's/DEFUN_DLD *( *//' -e 's/ *,.*$//' |\
         sort -u`
   if [ -n "$fcns" ]; then
     for n in $fcns; do
       if [ "$n" = "$base" ]; then
         true
       else
-	echo "creating link $n.oct -> $base.oct"
-        ( cd $links_dir; rm -f $n.oct; $LN_S $base.oct $n.oct )
+        if $print_only; then
+          echo $base.oct $n.oct
+        else
+          echo "creating link $n.oct -> $base.oct"
+          ( cd $links_dir; rm -f $n.oct; $LN_S $base.oct $n.oct )
+        fi
       fi
     done
   fi
 done
 
 exit $?
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,16 @@
+Thu Jan 23 13:48:19 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.test/unwind/unwind-2.m: Scripts now stop executing when
+	errors are encountered.
+
+	* octave.test/return/return.exp: Return at top level is no longer
+	an error.
+
 Tue Jan  7 00:16:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.1 released.
 
 Tue Dec 10 01:43:05 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0 released.
 
diff --git a/test/octave.test/return/return.exp b/test/octave.test/return/return.exp
--- a/test/octave.test/return/return.exp
+++ b/test/octave.test/return/return.exp
@@ -1,7 +1,7 @@
 set test return-1
 set prog_output "ans = 1"
 do_test return-1.m
 
 set test return-2
-set prog_output "parse error.*"
+set prog_output ""
 do_test return-2.m
diff --git a/test/octave.test/unwind/unwind-2.m b/test/octave.test/unwind/unwind-2.m
--- a/test/octave.test/unwind/unwind-2.m
+++ b/test/octave.test/unwind/unwind-2.m
@@ -2,13 +2,12 @@ global g = -1;
 function f (x)
   global g;
   save_g = g;
   unwind_protect
     g = 0
     [1,2;x];
     g = 1
   unwind_protect_cleanup
-    g = save_g;
+    g = save_g
   end_unwind_protect
 endfunction
 f (3)
-g
