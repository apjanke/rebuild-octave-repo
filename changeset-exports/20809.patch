# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449278244 28800
#      Fri Dec 04 17:17:24 2015 -0800
# Node ID 9e9892519a7c860e2d0092e1bd344692ad153120
# Parent  36cba8baf36e3575b6b9826d72227c70e2ae745e
Add more BIST tests for issorted.

* data.cc (Fissorted): Add more BIST tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6833,42 +6833,54 @@ This function does not support sparse ma
 }
 
 /*
 %!shared sm, um, sv, uv
 %! sm = [1, 2; 3, 4];
 %! um = [3, 1; 2, 4];
 %! sv = [1, 2, 3, 4];
 %! uv = [2, 1, 4, 3];
+
 %!assert (issorted (sm, "rows"))
-%!assert (!issorted (um, "rows"))
+%!assert (! issorted (um, "rows"))
 %!assert (issorted (sv))
-%!assert (!issorted (uv))
+%!assert (! issorted (uv))
 %!assert (issorted (sv'))
-%!assert (!issorted (uv'))
+%!assert (! issorted (uv'))
 %!assert (issorted (sm, "rows", "ascending"))
-%!assert (!issorted (um, "rows", "ascending"))
+%!assert (! issorted (um, "rows", "ascending"))
 %!assert (issorted (sv, "ascending"))
-%!assert (!issorted (uv, "ascending"))
+%!assert (! issorted (uv, "ascending"))
 %!assert (issorted (sv', "ascending"))
-%!assert (!issorted (uv', "ascending"))
-%!assert (!issorted (sm, "rows", "descending"))
+%!assert (! issorted (uv', "ascending"))
+%!assert (! issorted (sm, "rows", "descending"))
 %!assert (issorted (flipud (sm), "rows", "descending"))
-%!assert (!issorted (sv, "descending"))
+%!assert (! issorted (sv, "descending"))
 %!assert (issorted (fliplr (sv), "descending"))
-%!assert (!issorted (sv', "descending"))
+%!assert (! issorted (sv', "descending"))
 %!assert (issorted (fliplr (sv)', "descending"))
-%!assert (!issorted (um, "rows", "either"))
-%!assert (!issorted (uv, "either"))
+%!assert (! issorted (um, "rows", "either"))
+%!assert (! issorted (uv, "either"))
 %!assert (issorted (sm, "rows", "either"))
 %!assert (issorted (flipud (sm), "rows", "either"))
 %!assert (issorted (sv, "either"))
 %!assert (issorted (fliplr (sv), "either"))
 %!assert (issorted (sv', "either"))
 %!assert (issorted (fliplr (sv)', "either"))
+
+%!error <needs a vector> issorted ([])
+
+## Test input validation
+%!error issorted () 
+%!error issorted (1,2,3,4) 
+%!error <second argument must be a string> issorted (1, 2)
+%!error <second argument must be a string> issorted (1, {"rows"})
+%!error <sparse matrices not yet supported> issorted (sparse ([1 2 3]), "rows")
+%!error <A must be a 2-dimensional object> issorted (rand (2,2,2), "rows")
+%!error <needs a vector> issorted (ones (2,2))
 */
 
 DEFUN (nth_element, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} nth_element (@var{x}, @var{n})\n\
 @deftypefnx {Built-in Function} {} nth_element (@var{x}, @var{n}, @var{dim})\n\
 Select the n-th smallest element of a vector, using the ordering defined by\n\
 @code{sort}.\n\
