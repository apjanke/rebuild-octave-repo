# HG changeset patch
# User jwe
# Date 1026922925 0
#      Wed Jul 17 16:22:05 2002 +0000
# Node ID 98107d72871cc30ad8f78d5fc3e0847b3203165f
# Parent  ee0304212be0c3d258835d9c0206c745af511460
[project @ 2002-07-17 16:22:05 by jwe]

diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -284,17 +284,20 @@ DASPK::do_integrate (double tout)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TSTOP was successfully completed
 	        // (T=TSTOP) by stepping exactly to TSTOP.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
-
+	case 4: // The initial condition calculation, with
+                // INFO(11) > 0, was successful, and INFO(14) = 1.
+                // No integration steps were taken, and the solution
+                // is not considered to have been started.
 	  retval = x;
 	  t = tout;
 	  break;
 
 	case -1: // A large amount of work has been expended.  (~500 steps).
 	case -2: // The error tolerances are too stringent.
 	case -3: // The local error test cannot be satisfied because you
 	         // specified a zero component in ATOL and the
@@ -307,22 +310,32 @@ DASPK::do_integrate (double tout)
 	case -8: // The matrix of partial derivatives is singular.
 	case -9: // The corrector could not converge.  There were repeated
 		 // error test failures in this step.
 	case -10: // The corrector could not converge because IRES was
 		  // equal to minus one.
 	case -11: // IRES equal to -2 was encountered and control is being
 		  // returned to the calling program.
 	case -12: // DDASPK failed to compute the initial YPRIME.
+	case -13: // Unrecoverable error encountered inside user's
+                  // PSOL routine, and control is being returned to
+                  // the calling program.
+	case -14: // The Krylov linear system solver could not
+                  // achieve convergence.
 	case -33: // The code has encountered trouble from which it cannot
 		  // recover. A message is printed explaining the trouble
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
+	  integration_error = true;
+	  break;
+
 	default:
 	  integration_error = true;
+	  (*current_liboctave_error_handler)
+	    ("unrecognized value of idid (= %d) returned from ddaspk", idid);
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -478,16 +491,85 @@ DASPK::integrate (const ColumnVector& to
 
 std::string
 DASPK::error_message (void) const
 {
   std::string retval;
 
   switch (idid)
     {
+    case 1:
+      retval = "a step was successfully taken in intermediate-output mode.";
+      break;
+
+    case 2:
+      retval = "integration completed by stepping exactly to TOUT";
+      break;
+
+    case 3:
+      retval = "integration to tout completed by stepping past TOUT";
+      break;
+
+    case 4:
+      retval = "initial condition calculation completed successfully";
+      break;
+
+    case -1:
+      retval = "a large amount of work has been expended";
+      break;
+
+    case -2:
+      retval = "the error tolerances are too stringent";
+      break;
+
+    case -3:
+      retval = "error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -6:
+      retval = "repeated error test failures on the last attempted step";
+      break;
+
+    case -7:
+      retval = "the corrector could not converge";
+      break;
+
+    case -8:
+      retval = "the matrix of partial derivatives is singular";
+      break;
+
+    case -9:
+      retval = "the corrector could not converge (repeated test failures)";
+      break;
+
+    case -10:
+      retval = "corrector could not converge because IRES was -1";
+      break;
+
+    case -11:
+      retval = "return requested in user-supplied function";
+      break;
+
+    case -12:
+      retval = "failed to compute consistent initial conditions";
+      break;
+
+    case -13:
+      retval = "unrecoverable error encountered inside user's PSOL function";
+      break;
+
+    case -14:
+      retval = "the Krylov linear system solver failed to converge";
+      break;
+
+    case -33:
+      retval = "unrecoverable error (see printed message)";
+      break;
+
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -324,34 +324,31 @@ DASRT::integrate (double tout)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in dassl");
     }
   else
     {
       switch (idid)
 	{
-	case 0: // Initial conditions made consistent.
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping exactly to TOUT.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
-	case 5: // The integration to TSTOP was successfully completed
-	        // (T=TSTOP) by stepping to TSTOP within the
-	        // tolerance.  Must restart to continue.
 	  t = tout;
 	  break;
 
-	case 4: //  We've hit the stopping condition.
+	case 4: //  The integration was successfully completed
+	        // by finding one or more roots of G at T.
           break;
 
-	case -1: // A large amount of work has been expended.  (~500 steps).
+	case -1: // A large amount of work has been expended.
 	case -2: // The error tolerances are too stringent.
 	case -3: // The local error test cannot be satisfied because you
 	         // specified a zero component in ATOL and the
 		 // corresponding computed solution component is zero.
 		 // Thus, a pure relative error test is impossible for
 		 // this component.
 	case -6: // DDASRT had repeated error test failures on the last
 		 // attempted step.
@@ -363,20 +360,23 @@ DASRT::integrate (double tout)
 		  // equal to minus one.
 	case -11: // IRES equal to -2 was encountered and control is being
 		  // returned to the calling program.
 	case -12: // DASSL failed to compute the initial YPRIME.
 	case -33: // The code has encountered trouble from which it cannot
 		  // recover. A message is printed explaining the trouble
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
+	  integration_error = true;
+	  break;
+
 	default:
 	  integration_error = true;
 	  (*current_liboctave_error_handler)
-	    ("ddasrt failed with IDID = %d", idid);
+	    ("unrecognized value of idid (= %d) returned from ddasrt", idid);
 	  break;
 	}
     }
 }
 
 DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
@@ -555,16 +555,77 @@ DASRT::integrate (const ColumnVector& to
 
 std::string
 DASRT::error_message (void) const
 {
   std::string retval;
 
   switch (idid)
     {
+    case 1:
+      retval = "a step was successfully taken in intermediate-output mode.";
+      break;
+
+    case 2:
+      retval = "integration completed by stepping exactly to TOUT";
+      break;
+
+    case 3:
+      retval = "integration to tout completed by stepping past TOUT";
+      break;
+
+    case 4:
+      retval = "integration completed by finding one or more roots of G at T";
+      break;
+
+    case -1:
+      retval = "a large amount of work has been expended";
+      break;
+
+    case -2:
+      retval = "the error tolerances are too stringent";
+      break;
+
+    case -3:
+      retval = "error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -6:
+      retval = "repeated error test failures on the last attempted step";
+      break;
+
+    case -7:
+      retval = "the corrector could not converge";
+      break;
+
+    case -8:
+      retval = "the matrix of partial derivatives is singular";
+      break;
+
+    case -9:
+      retval = "the corrector could not converge (repeated test failures)";
+      break;
+
+    case -10:
+      retval = "corrector could not converge because IRES was -1";
+      break;
+
+    case -11:
+      retval = "return requested in user-supplied function";
+      break;
+
+    case -12:
+      retval = "failed to compute consistent initial conditions";
+      break;
+
+    case -33:
+      retval = "unrecoverable error (see printed message)";
+      break;
+
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
 
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -283,18 +283,23 @@ DASSL::do_integrate (double tout)
 		  // equal to minus one.
 	case -11: // IRES equal to -2 was encountered and control is being
 		  // returned to the calling program.
 	case -12: // DDASSL failed to compute the initial YPRIME.
 	case -33: // The code has encountered trouble from which it cannot
 		  // recover. A message is printed explaining the trouble
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
+	  integration_error = true;
+	  break;
+
 	default:
 	  integration_error = true;
+	  (*current_liboctave_error_handler)
+	    ("unrecognized value of idid (= %d) returned from ddassl", idid);
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -450,16 +455,73 @@ DASSL::integrate (const ColumnVector& to
 
 std::string
 DASSL::error_message (void) const
 {
   std::string retval;
 
   switch (idid)
     {
+    case 1:
+      retval = "a step was successfully taken in intermediate-output mode.";
+      break;
+
+    case 2:
+      retval = "integration completed by stepping exactly to TOUT";
+      break;
+
+    case 3:
+      retval = "integration to tout completed by stepping past TOUT";
+      break;
+
+    case -1:
+      retval = "a large amount of work has been expended";
+      break;
+
+    case -2:
+      retval = "the error tolerances are too stringent";
+      break;
+
+    case -3:
+      retval = "error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -6:
+      retval = "repeated error test failures on the last attempted step";
+      break;
+
+    case -7:
+      retval = "the corrector could not converge";
+      break;
+
+    case -8:
+      retval = "the matrix of partial derivatives is singular";
+      break;
+
+    case -9:
+      retval = "the corrector could not converge (repeated test failures)";
+      break;
+
+    case -10:
+      retval = "corrector could not converge because IRES was -1";
+      break;
+
+    case -11:
+      retval = "return requested in user-supplied function";
+      break;
+
+    case -12:
+      retval = "failed to compute consistent initial conditions";
+      break;
+
+    case -33:
+      retval = "unrecoverable error (see printed message)";
+      break;
+
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -272,92 +272,95 @@ LSODE::do_integrate (double tout)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in lsode");
     }
   else
     {
       switch (istate)
 	{
-	case -13: // return requested in user-supplied function.
-	case -6:  // error weight became zero during problem. (solution
-	          // component i vanished, and atol or atol(i) = 0.)
-	case -5:  // repeated convergence failures (perhaps bad jacobian
-	          // supplied or wrong choice of mf or tolerances).
-	case -4:  // repeated error test failures (check all inputs).
-	case -3:  // illegal input detected (see printed message).
-	case -2:  // excess accuracy requested (tolerances too small).
-	case -1:  // excess work done on this call (perhaps wrong mf).
-	  integration_error = true;
-	  break;
-
-	case 2:  // lsode was successful
+	case 1:  // prior to initial integration step.
+	case 2:  // lsode was successful.
 	  retval = x;
 	  t = tout;
 	  break;
 	  
-	default: // Error?
+	case -1:  // excess work done on this call (perhaps wrong mf).
+	case -2:  // excess accuracy requested (tolerances too small).
+	case -3:  // illegal input detected (see printed message).
+	case -4:  // repeated error test failures (check all inputs).
+	case -5:  // repeated convergence failures (perhaps bad jacobian
+	          // supplied or wrong choice of mf or tolerances).
+	case -6:  // error weight became zero during problem. (solution
+	          // component i vanished, and atol or atol(i) = 0.)
+	case -13: // return requested in user-supplied function.
+	  integration_error = true;
+	  break;
+
+	default:
+	  integration_error = true;
 	  (*current_liboctave_error_handler)
-	    ("unrecognized value of istate returned from lsode");
+	    ("unrecognized value of istate (= %d) returned from lsode",
+	     istate);
 	  break;
 	}
     }
 
   return retval;
 }
 
 std::string
 LSODE::error_message (void) const
 {
   std::string retval;
 
   switch (istate)
     {
-    case -13:
-      retval = "return requested in user-supplied function";
-      break;
-
-    case -6:
-      retval = "Error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
-      break;
-
-    case -5:
-      retval = "repeated convergence failures (perhaps bad jacobian\
- supplied or wrong choice of integration method or tolerances)";
-      break;
-
-    case -4:
-      retval = "repeated error test failures (check all inputs)";
-      break;
-
-    case -3:
-      retval = "invalid input detected (see printed message)";
-      break;
-
-    case -2:
-      retval = "excess accuracy requested (tolerances too small)";
-      break;
-
-    case -1:
-      retval = "excess work on this call (perhaps wrong integration method)";
-      break;
-
     case 1:
-      retval = "prior to initial call";
+      retval = "prior to initial integration step";
       break;
 
     case 2:
       retval = "successful exit";
       break;
 	  
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
 	  
+    case -1:
+      retval = "excess work on this call (perhaps wrong integration method)";
+      break;
+
+    case -2:
+      retval = "excess accuracy requested (tolerances too small)";
+      break;
+
+    case -3:
+      retval = "invalid input detected (see printed message)";
+      break;
+
+    case -4:
+      retval = "repeated error test failures (check all inputs)";
+      break;
+
+    case -5:
+      retval = "repeated convergence failures (perhaps bad jacobian\
+ supplied or wrong choice of integration method or tolerances)";
+      break;
+
+    case -6:
+      retval = "error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -13:
+      retval = "return requested in user-supplied function";
+      break;
+
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
 
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -385,17 +385,17 @@ ODESSA::integrate (double tout)
 
   if (abs_tol_len == 1)
     itol = 1;
   else if (abs_tol_len == n)
     itol = 2;
   else
     {
       (*current_liboctave_error_handler)
-        ("lsode: inconsistent sizes for state and absolute tolerance vectors");
+        ("odessa: inconsistent sizes for state and absolute tolerance vectors");
 
       integration_error = 1;
       return;
     }
 
   if (initial_step_size () >= 0.0)
     {
       rwork.elem (4) = initial_step_size ();
@@ -438,90 +438,92 @@ ODESSA::integrate (double tout)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in odessa");
     }
   else
     {
       switch (istate)
         {
-        case -13: // Return requested in user-supplied function.
-        case -6:  // error weight became zero during problem. (solution
-                  // component i vanished, and atol or atol(i) = 0.)
+	case 1:  // prior to initial integration step.
+        case 2:  // odessa was successful.
+          t = tout;
+          break;
+          
+        case -1:  // excess work done on this call (perhaps wrong mf).
+        case -2:  // excess accuracy requested (tolerances too small).
+        case -3:  // illegal input detected (see printed message).
+        case -4:  // repeated error test failures (check all inputs).
         case -5:  // repeated convergence failures (perhaps bad jacobian
                   // supplied or wrong choice of mf or tolerances).
-        case -4:  // repeated error test failures (check all inputs).
-        case -3:  // illegal input detected (see printed message).
-        case -2:  // excess accuracy requested (tolerances too small).
-        case -1:  // excess work done on this call (perhaps wrong mf).
+        case -6:  // error weight became zero during problem. (solution
+                  // component i vanished, and atol or atol(i) = 0.)
+        case -13: // Return requested in user-supplied function.
           integration_error = 1;
           break;
 	  
-	case 1:  // tout is same as t
-        case 2:  // lsode was successful
-          t = tout;
-          break;
-          
-        default: // Error?
+        default:
+          integration_error = 1;
           (*current_liboctave_error_handler)
-            ("unrecognized value of istate returned from lsode");
+            ("unrecognized value of istate (= %d) returned from odessa",
+	     istate);
           break;
         }
     }
 }
 
 std::string
 ODESSA::error_message (void) const
 {
   std::string retval;
 
   switch (istate)
     {
-    case -13:
-      retval = "return requested in user-supplied function";
-      break;
-
-    case -6:
-      retval = "Error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
-      break;
-
-    case -5:
-      retval = "repeated convergence failures (perhaps bad jacobian\
- supplied or wrong choice of integration method or tolerances)";
-      break;
-
-    case -4:
-      retval = "repeated error test failures (check all inputs)";
-      break;
-
-    case -3:
-      retval = "invalid input detected (see printed message)";
-      break;
-
-    case -2:
-      retval = "excess accuracy requested (tolerances too small)";
-      break;
-
-    case -1:
-      retval = "excess work on this call (perhaps wrong integration method)";
-      break;
-
     case 1:
-      retval = "prior to initial call";
+      retval = "prior to initial integration step";
       break;
 
     case 2:
       retval = "successful exit";
       break;
           
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
           
+    case -1:
+      retval = "excess work on this call (perhaps wrong integration method)";
+      break;
+
+    case -2:
+      retval = "excess accuracy requested (tolerances too small)";
+      break;
+
+    case -3:
+      retval = "invalid input detected (see printed message)";
+      break;
+
+    case -4:
+      retval = "repeated error test failures (check all inputs)";
+      break;
+
+    case -5:
+      retval = "repeated convergence failures (perhaps bad jacobian\
+ supplied or wrong choice of integration method or tolerances)";
+      break;
+
+    case -6:
+      retval = "Error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -13:
+      retval = "return requested in user-supplied function";
+      break;
+
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
 
