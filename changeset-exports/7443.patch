# HG changeset patch
# User jwe
# Date 1202072292 0
#      Sun Feb 03 20:58:12 2008 +0000
# Node ID d98dea7d16b0ec4711ac2166afc37e35589db19c
# Parent  da006c2fe55cd5ff68709e3b0b86a09c5a55da7f
[project @ 2008-02-03 20:58:12 by jwe]

diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -339,40 +339,40 @@ Array<double>::sort (Array<octave_idx_ty
 
   return m;
 }
 
 #else
 
 template <>
 bool
-Array<double>::ascending_compare (double a, double b) const
+ascending_compare (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-Array<double>::ascending_compare (vec_index<double> *a, 
-				  vec_index<double> *b) const
+ascending_compare (vec_index<double> *a, 
+		   vec_index<double> *b)
 {
   return (xisnan (b->vec) || (a->vec < b->vec));
 }
 
 template <>
 bool
-Array<double>::descending_compare (double a, double b) const
+descending_compare (double a, double b)
 {
   return (xisnan (a) || (a > b));
 }
 
 template <>
 bool
-Array<double>::descending_compare (vec_index<double> *a, 
-				   vec_index<double> *b) const
+descending_compare (vec_index<double> *a, 
+		    vec_index<double> *b)
 {
   return (xisnan (b->vec) || (a->vec > b->vec));
 }
 
 INSTANTIATE_ARRAY_SORT (double);
 
 #endif
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2624,16 +2624,35 @@ Array<T>::sort (Array<octave_idx_type> &
 	      sidx(i*stride+offset) = vi[i]->indx;
 	    }
 	}
     }
 
   return m;
 }
 
+#if defined (HAVE_IEEE754_DATA_FORMAT)
+
+template <>
+extern bool ascending_compare (double, double);
+template <>
+extern bool ascending_compare (vec_index<double>*, vec_index<double>*);
+template <>
+extern bool descending_compare (double, double);
+template <>
+extern bool descending_compare (vec_index<double>*, vec_index<double>*);
+
+template <>
+Array<double> Array<double>::sort (octave_idx_type dim, sortmode mode) const;
+template <>
+Array<double> Array<double>::sort (Array<octave_idx_type> &sidx,
+				   octave_idx_type dim, sortmode mode) const;
+
+#endif
+
 // FIXME -- this is a mess.
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv)
 {
   int n_idx = lhs.index_count ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-02-03  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* Array.cc (ascending_compare, descending_compare,
+	Array<T>::sort): Declare explicit specialization for T=double to
+	avoid symbol duplication error at link time.
+	* Array-d.cc (ascending_compare, descending_compare): Declare and
+	define as nonmember functions, not member functions of Array<T>.
+
 2008-02-03  John W. Eaton  <jwe@octave.org>
 
 	* Array-i.cc: Also instantiate Arrays for long long type if it exists.
 
 2008-02-03  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* Array.cc: Don't include Range.h.
 
