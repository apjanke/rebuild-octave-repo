# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1252920234 -7200
#      Mon Sep 14 11:23:54 2009 +0200
# Node ID 8d79f36ebdde886f148ec9f789019bf8b0e2390b
# Parent  5d49ff601e9bb9d340a582a67e79dc3caeb5f871
store scope->function pointer

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-09-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.h (symbol_table::curr_fcn): New member field.
+	(symbol_table::get_curr_fcn, symbol_table::set_curr_fcn): New member
+	funcs.
+	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::xfind): Use
+	symbol_table::get_curr_fcn.
+	(symbol_table::fcn_info::fcn_info_rep::x_builtin_find): Ditto.
+	* ov-usr-fcn.cc (octave_user_function::octave_user_function): Call
+	symbol_table::set_curr_fcn.
+
 2009-09-12  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 3.3.50+.
 	(OCTAVE_API_VERSION): Now api-v38+.
 
 2009-09-12  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 3.3.50.
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -186,16 +186,19 @@ octave_user_function::octave_user_functi
     system_fcn_file (false), call_depth (-1),
     num_named_args (param_list ? param_list->length () : 0),
     nested_function (false), inline_function (false),
     class_constructor (false), class_method (false),
     parent_scope (-1), local_scope (sid)
 {
   if (cmd_list)
     cmd_list->mark_as_function_body ();
+
+  if (local_scope >= 0)
+    symbol_table::set_curr_fcn (this, local_scope);
 }
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
   delete ret_list;
   delete cmd_list;
   delete lead_comm;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -36,17 +36,16 @@ along with Octave; see the file COPYING.
 #include "input.h"
 #include "load-path.h"
 #include "symtab.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-arg-list.h"
-#include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "debug.h"
 
 symbol_table *symbol_table::instance = 0;
 
 symbol_table::scope_id_cache *symbol_table::scope_id_cache::instance = 0;
 
@@ -530,28 +529,26 @@ symbol_table::fcn_info::fcn_info_rep::xf
   if (local_funcs)
     {
       // Subfunction.  I think it only makes sense to check for
       // subfunctions if we are currently executing a function defined
       // from a .m file.
 
       scope_val_iterator r = subfunctions.find (xcurrent_scope);
 
-      octave_function *curr_fcn = 0;
+      octave_user_function *curr_fcn = symbol_table::get_curr_fcn ();
 
       if (r != subfunctions.end ())
         {
           // FIXME -- out-of-date check here.
 
           return r->second;
         }
       else
         {
-          curr_fcn = octave_call_stack::current ();
-
           if (curr_fcn)
             {
               scope_id pscope = curr_fcn->parent_fcn_scope ();
 
               if (pscope > 0)
                 {
                   r = subfunctions.find (pscope);
 
@@ -562,19 +559,16 @@ symbol_table::fcn_info::fcn_info_rep::xf
                       return r->second;
                     }
                 }
             }
         }
 
       // Private function.
 
-      if (! curr_fcn)
-        curr_fcn = octave_call_stack::current ();
-
       if (curr_fcn)
         {
           std::string dir_name = curr_fcn->dir_name ();
 
           if (! dir_name.empty ())
             {
               str_val_iterator q = private_functions.find (dir_name);
 
@@ -760,17 +754,17 @@ symbol_table::fcn_info::fcn_info_rep::x_
 
   // Command-line function.
 
   if (cmdline_function.is_defined ())
     return cmdline_function;
 
   // Private function.
 
-  octave_function *curr_fcn = octave_call_stack::current ();
+  octave_user_function *curr_fcn = symbol_table::get_curr_fcn ();
 
   if (curr_fcn)
     {
       std::string dir_name = curr_fcn->dir_name ();
 
       if (! dir_name.empty ())
 	{
 	  str_val_iterator q = private_functions.find (dir_name);
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <map>
 #include <set>
 #include <string>
 
 #include "glob-match.h"
 #include "regex-match.h"
 
 class tree_argument_list;
+class octave_user_function;
 
 #include "oct-obj.h"
 #include "ov.h"
 
 class
 OCTINTERP_API
 symbol_table
 {
@@ -1788,16 +1789,34 @@ public:
 					       const std::string& dir_name);
 
   static void add_to_parent_map (const std::string& classname,
 				 const std::list<std::string>& parent_list)
   {
     parent_map[classname] = parent_list;
   }
 
+  static octave_user_function *get_curr_fcn (scope_id scope = xcurrent_scope)
+    {
+      symbol_table *inst = get_instance (scope);
+      return inst->curr_fcn;
+    }
+
+  static void set_curr_fcn (octave_user_function *curr_fcn,
+                            scope_id scope = xcurrent_scope)
+    {
+      assert (scope != xtop_scope && scope != xglobal_scope);
+      symbol_table *inst = get_instance (scope);
+      // FIXME: normally, functions should not usurp each other's scope.
+      // If for any incredible reason this is needed, call 
+      // set_user_function (0, scope) first.
+      assert (inst->curr_fcn == 0 || curr_fcn == 0);
+      inst->curr_fcn = curr_fcn;
+    }
+
 private:
 
   typedef std::map<std::string, symbol_record>::const_iterator table_const_iterator;
   typedef std::map<std::string, symbol_record>::iterator table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator global_table_const_iterator;
   typedef std::map<std::string, octave_value>::iterator global_table_iterator;
 
@@ -1812,16 +1831,19 @@ private:
 
   // Name for this table (usually the file name of the function
   // corresponding to the scope);
   std::string table_name;
 
   // Map from symbol names to symbol info.
   std::map<std::string, symbol_record> table;
 
+  // The associated user code (may be null).
+  octave_user_function *curr_fcn;
+
   // Map from names of global variables to values.
   static std::map<std::string, octave_value> global_table;
 
   // Map from names of persistent variables to values.
   std::map<std::string, octave_value> persistent_table;
 
   // Pointer to symbol table for current scope (variables only).
   static symbol_table *instance;
@@ -1849,17 +1871,17 @@ private:
   static const scope_id xglobal_scope;
   static const scope_id xtop_scope;
 
   static scope_id xcurrent_scope;
 
   static context_id xcurrent_context;
 
   symbol_table (void)
-    : table_name (), table () { }
+    : table_name (), table (), curr_fcn (0) { }
 
   ~symbol_table (void) { }
 
   static symbol_table *get_instance (scope_id scope, bool create = true)
   {
     symbol_table *retval = 0;
 
     bool ok = true;
