# HG changeset patch
# User hodelas
# Date 948302205 0
#      Wed Jan 19 17:16:45 2000 +0000
# Node ID 04aef7306dca14e1fcd0b333974f916243aa2dba
# Parent  1f2ce6b49c572e512602e0e519f6a06b0cf84342
[project @ 2000-01-19 17:16:43 by hodelas]
Updated to accept signal names or signal indices as inputs (calls to
either sysidx or listidx)

diff --git a/scripts/control/base/__bodquist__.m b/scripts/control/base/__bodquist__.m
--- a/scripts/control/base/__bodquist__.m
+++ b/scripts/control/base/__bodquist__.m
@@ -22,19 +22,18 @@
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## input system structure
 ## @item w
 ## range of frequencies; empty if user wants default
 ## @item out_idx
-## vector output indices or list of output signal names; empty if user wants all
-## @item in_idx
-## vector of input indices of list of input signal names; empty if user wants all
+## @itemx in_idx
+## names or indices of output/input signal names; empty if user wants all
 ## @item rname
 ## name of routine that called __bodquist__ ("bode", "nyquist", or "nichols")
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item w
 ## list of frequencies
 ## @item f
diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -60,16 +60,17 @@
 ##
 ## @end enumerate
 ## @item out_idx
 ## @itemx in_idx
 ##
 ## The names or indices of outputs and inputs to be used in the frequency
 ## response.  See @code{sysprune}.
 ##
+## @strong{Example}
 ## @example
 ## bode(sys,[],"y_3",list("u_1","u_4");
 ## @end example
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item mag
 ## @itemx phase
@@ -127,16 +128,18 @@ function [mag_r, phase_r, w_r] = bode (s
     do_db_plot = 1;
   elseif (strcmp (plot_style, "mag"))
     do_db_plot = 0;
   else
     error ("bode: invalid value of plot_style specified");
   endif
 
   [f, w, sys] = __bodquist__ (sys, w, outputs, inputs, "bode");
+  bode_nin = sysdimensions(sys,"in");
+  bode_nout = sysdimensions(sys,"out");
 
   [stname,inname,outname] = sysgetsignals(sys);
   systsam = sysgettsam(sys);
 
   ## Get the magnitude and phase of f.
   mag = abs(f);
   phase = arg(f)*180.0/pi;
 
diff --git a/scripts/control/base/lqg.m b/scripts/control/base/lqg.m
--- a/scripts/control/base/lqg.m
+++ b/scripts/control/base/lqg.m
@@ -35,17 +35,17 @@
 ## system data structure
 ## @item  Sigw
 ## @itemx  Sigv
 ## intensities of independent Gaussian noise processes (as above)
 ## @item  Q
 ## @itemx  R
 ## state, control weighting respectively.  Control ARE is
 ## @item  in_idx
-## indices of controlled inputs
+## names or indices of controlled inputs (see @code{sysidx}, @code{listidx})
 ##
 ## default: last dim(R) inputs are assumed to be controlled inputs, all
 ## others are assumed to be noise inputs.
 ## @end table
 ## @strong{Outputs}
 ## @table @var
 ## @item    K
 ## system data structure format LQG optimal controller (Obtain A,B,C
@@ -89,17 +89,24 @@ function [K, Q1, P1, Ee, Er] = lqg (sys,
 
   elseif(nin != columns(Sigw)+ columns(R))
     error(["lqg: sys has ",num2str(nin)," inputs, dim(Sigw)=", ...
           num2str(columns(Sigw)),", dim(u)=",num2str(columns(R))])
 
   elseif(nout != columns(Sigv))
     error(["lqg: sys has ",num2str(nout)," outputs, dim(Sigv)=", ...
           num2str(columns(Sigv)),")"])
-  elseif(length(input_list) != columns(R))
+  endif
+
+  ## check for names of signals
+  if(is_signal_list(input_list) | isstr(input_list))
+    input_list = sysidx(sys,"in",input_list);
+  endif
+
+  if(length(input_list) != columns(R))
     error(["lqg: length(input_list)=",num2str(length(input_list)), ...
           ", columns(R)=", num2str(columns(R))]);
   endif
 
   varname = list("Sigw","Sigv","Q","R");
   for kk=1:length(varname);
     eval(sprintf("chk = is_square(%s);",nth(varname,kk)));
     if(! chk ) error("lqg: %s is not square",nth(varname,kk)); endif
diff --git a/scripts/control/base/nyquist.m b/scripts/control/base/nyquist.m
--- a/scripts/control/base/nyquist.m
+++ b/scripts/control/base/nyquist.m
@@ -48,18 +48,18 @@
 ## @end ifinfo
 ## @iftex
 ## $[0,2p*\pi]$
 ## @end iftex
 ## @item A "smoothing" routine is used to ensure that the plot phase does
 ## not change excessively from point to point and that singular
 ## points (e.g., crossovers from +/- 180) are accurately shown.
 ## @end enumerate
-## outputs, inputs: the indices of the output(s) and input(s) to be used in
-## the frequency response; see sysprune.
+## outputs, inputs: names or indices of the output(s) and input(s) to be 
+## used in the frequency response; see sysprune.
 ##
 ## @strong{Inputs} (pass as empty to get default values)
 ## @table @var
 ## @item   atol
 ## for interactive nyquist plots: atol is a change-in-slope tolerance
 ## for the of asymptotes (default = 0; 1e-2 is a good choice).  This allows
 ## the user to ``zoom in'' on portions of the Nyquist plot too small to be
 ## seen with large asymptotes.
diff --git a/scripts/control/system/dmr2d.m b/scripts/control/system/dmr2d.m
--- a/scripts/control/system/dmr2d.m
+++ b/scripts/control/system/dmr2d.m
@@ -23,22 +23,21 @@
 ## others are assumed sampled at @var{Ts1} = @code{sysgettsam(@var{sys})}.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item   sys
 ## discrete time system;
 ## @code{dmr2d} exits with an error if @var{sys} is not discrete
 ## @item   idx
-## list of states with sampling time @code{sysgettsam(@var{sys})} (may
-## be empty)
+## indices or names of states with sampling time 
+## @code{sysgettsam(@var{sys})} (may be empty); see @code{listidx}
 ## @item   sprefix
 ## list of string prefixes of states with sampling time
-## @code{sysgettsam(@var{sys})}
-## (may be empty)
+## @code{sysgettsam(@var{sys})} (may be empty)
 ## @item   Ts2
 ## sampling time of states not specified by @var{idx}, @var{sprefix}
 ## must be an integer multiple of @code{sysgettsam(@var{sys})}
 ## @item   cuflg
 ## "constant u flag" if @var{cuflg} is nonzero then the system inputs are
 ## assumed to be constant over the revised sampling interval @var{Ts2}.
 ## Otherwise, since the inputs can change during the interval
 ## @var{t} in @math{[k Ts2, (k+1) Ts2]}, an additional set of inputs is
@@ -79,16 +78,21 @@ function [dsys, fidx] = dmr2d (sys, idx,
   if(nargin != 4 | nargout > 2)
     usage("[dsys,fidx] = dmr2d (sys, idx, sprefix, Ts2 {,cuflg})");
 
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
 
   elseif(!is_digital(sys))
     error("sys must be discrete-time; continuous time passed");
+  
+  endif
+
+  if(is_signal_list(idx) | isstr(idx))
+    idx = sysidx(sys,"st",idx);
 
   elseif (!(is_vector(idx) | isempty(idx)))
     error(["idx(",num2str(rows(idx)),"x",num2str(columns(idx)), ...
       ") must be a vector"]);
 
   elseif (any(idx <= 0))
     idv = find(idx <= 0);
     ii = idv(1);
@@ -112,17 +116,17 @@ function [dsys, fidx] = dmr2d (sys, idx,
     error(["cuflg = ",num2str(cuflg),", should be 0 or 1"]);
   endif
 
   ## extract  state space information
   [da,db,dc,dd,Ts1,nc,nz,stname,inname,outname,yd] = sys2ss(sys);
 
   ## compute number of steps
   if(Ts1 > Ts2)
-    error(["Current sampling time=",num2str(Ts1),"< Ts2=",num2str(Ts2)]);
+    error(["Current sampling time=",num2str(Ts1)," > Ts2=",num2str(Ts2)]);
   endif
   nstp = floor(Ts2/Ts1+0.5);
   if(abs((Ts2 - Ts1*nstp)/Ts1) > 1e-12)
     warning(["dmr2d: Ts1=",num2str(Ts1),", Ts2=",num2str(Ts2), ...
       ", selecting nsteps=",num2str(nstp),"; mismatch"]);
   endif
 
   if(isempty(sprefix) & isempty(idx))
@@ -167,17 +171,17 @@ function [dsys, fidx] = dmr2d (sys, idx,
 
   ## construct inverse permutation
   Inz = eye(nz);
   pvi = (Inz(pv,:)'*[1:nz]')';
 
   ## permute A, B (stname permuted for debugging only)
   da = da(pv,pv);
   db = db(pv,:);
-  stname = stname(pv,:);
+  stname = stname(pv);
 
   ## partition A, B:
   lfidx = length(fidx);
   bki = 1:lfidx;
   a11 = da(bki,bki);
   b1 = db(bki,:);
 
   if(lfidx < nz)
@@ -246,14 +250,14 @@ function [dsys, fidx] = dmr2d (sys, idx,
   da(bki,bki) = a11h;
   db(bki,1:columns(b1b)) = b1b;
   if(!isempty(bki2))
     da(bki,bki2) = a12b;
   endif
 
   da = da(pvi,pvi);
   db = db(pvi,:);
-  stname = stname(pvi,:);
+  stname = stname(pvi);
 
   ## construct new system and return
   dsys = ss2sys(da,db,dc,dd,Ts2,0,nz,stname,inname,outname,find(yd == 1));
 
 endfunction
diff --git a/scripts/control/system/sysconnect.m b/scripts/control/system/sysconnect.m
--- a/scripts/control/system/sysconnect.m
+++ b/scripts/control/system/sysconnect.m
@@ -21,18 +21,19 @@
 ## Close the loop from specified outputs to respective specified inputs
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item   sys
 ## system data structure
 ## @item   out_idx
 ## @itemx  in_idx
-## list of connections indices; @math{y(out_idx(ii))}
-## is connected to @math{u(in_idx(ii))}.
+## names or indices of signals to connect (see @code{sysidx}).
+## The output specified by @math{out_idx(ii)} is connected to the input
+## specified by @math{in_idx(ii)}.
 ## @item   order
 ## logical flag (default = 0)
 ## @table @code
 ## @item        0
 ## leave inputs and outputs in their original order
 ## @item        1
 ## permute inputs and outputs to the order shown in the diagram below
 ## @end table
@@ -84,16 +85,24 @@ function sys = sysconnect (sys, output_l
     tol = 200*eps;
   elseif( !is_sample(tol) )
     error("sysconnect: tol must be a positive scalar");
   elseif(tol > 1e2*sqrt(eps))
     warning(["sysconnect: tol set to large value=",num2str(tol), ...
         ", eps=",num2str(eps)])
   endif
 
+  ## convert signal names to indices
+  if(is_signal_list(input_list) | isstr(input_list))
+    input_list = sysidx(sys,"in",input_list);
+  endif
+  if(is_signal_list(output_list) | isstr(output_list))
+    output_list = sysidx(sys,"out",output_list);
+  endif
+
   ## verify sizes,format of input, output lists
   if( min(size(output_list))*min(size(input_list)) != 1)
     error("output_list and input_list must be vectors");
   else
     lo = length(output_list);
     li = length(input_list);
     if(lo != li)
       error("output_list and input_list must be of the same length")
diff --git a/scripts/control/system/sysdup.m b/scripts/control/system/sysdup.m
--- a/scripts/control/system/sysdup.m
+++ b/scripts/control/system/sysdup.m
@@ -21,17 +21,17 @@
 ## Duplicate specified input/output connections of a system
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item Asys
 ## system data structure
 ## @item out_idx
 ## @itemx in_idx
-## list of connections indices;
+## indices or names of desired signals (see @code{sigidx}).
 ## duplicates are made of @code{y(out_idx(ii))} and @code{u(in_idx(ii))}.
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{retsys}: resulting closed loop system:
 ## duplicated i/o names are appended with a @code{"+"} suffix.
 ##
 ##
@@ -64,16 +64,24 @@ function retsys = sysdup (Asys, output_l
   if( !is_struct(Asys))
     error("Asys must be a system data structure (see ss2sys, tf2sys, or zp2sys)")
   endif
 
   Asys = sysupdate(Asys,"ss");
   [nn,nz,mm,pp] = sysdimensions(Asys);
   [aa,bb,cc,dd] = sys2ss(Asys);
 
+  ## check for signal names
+  if(is_signal_list(input_list) | isstr(input_list))
+    input_list = sysidx(Asys,"in",input_list);
+  endif
+  if(is_signal_list(output_list) | isstr(output_list))
+    output_list = sysidx(Asys,"out",output_list);
+  endif
+
   ## first duplicate inputs
   if(is_vector(input_list))
     for ii=1:length(input_list);
       bb(:,mm+ii) = bb(:,input_list(ii));
       dd(:,mm+ii) = dd(:,input_list(ii));
     end
   elseif(!isempty(input_list))
     error("input_list must be a vector or empty");
diff --git a/scripts/control/system/sysgetsignals.m b/scripts/control/system/sysgetsignals.m
--- a/scripts/control/system/sysgetsignals.m
+++ b/scripts/control/system/sysgetsignals.m
@@ -36,26 +36,27 @@
 ## output signals
 ## @item "st"
 ## stage signals
 ## @item "yd"
 ## value of logical vector @var{yd}
 ## @end table
 ##
 ## @item signum
-## Index of signal (or indices of signals if signum is a vector)
+## index(indices) or name(s) or signals; see @code{sysidx}
 ##
 ## @item strflg
 ## flag to return a string instead of a list;  Values:
 ## @table @code
 ## @item 0
-## (default) return a list (even if signum is a scalar)
+## (default) return a list (even if signum specifies an individual signal)
 ##
 ## @item 1
-## return a string.  Exits with an error if signum is not a scalar.
+## return a string.  Exits with an error if signum does not specify an 
+## individual signal.
 ## @end table
 ##
 ## @end table
 ##
 ## @strong{Outputs}
 ## @table @bullet
 ## @item If @var{sigid} is not specified
 ## @table @var
@@ -161,17 +162,20 @@ function [stname, inname, outname, yd] =
     elseif(strcmp("in",sigid))     stname = sys.inname;
     elseif(strcmp("out",sigid))    stname = sys.outname;
     elseif(strcmp("yd",sigid))     stname = vec(sys.yd)';
     else
       error(sprintf("sigid=%s must be \"st\", \"in\", \"out\", or \"yd\"", ...
         sigid));
     endif
     if(nargin >= 3)
-      if(signum > length(stname))
+      if( is_signal_list(signum) | isstr(signum) )
+        signum = listidx(stname,signum);
+      end
+      if(max(signum) > length(stname))
         error(sprintf("sysgetsignals(sys,\"%s\",%d):only %d entries.\n", ...
           sigid,signum, rows(stname)));
       else
         if(!is_scalar(strflg))
           error("strflg must be a scalar");
         endif
         switch(strflg)
         case(0),
diff --git a/scripts/control/system/syssetsignals.m b/scripts/control/system/syssetsignals.m
--- a/scripts/control/system/syssetsignals.m
+++ b/scripts/control/system/syssetsignals.m
@@ -42,19 +42,19 @@
 ## @item names
 ## @table @code
 ## @item opt = "out", "in", or "st"
 ## string or string array containing desired signal names or values.
 ## @item opt = "yd"
 ## To desired output continuous/discrete flag.
 ## Set name to 0 for continuous, or 1 for discrete.
 ## @end table
-## @item list
-## vector of indices of outputs, yd, inputs, or
-## states whose respective names should be changed.
+## @item sig_idx
+## indices or names of outputs, yd, inputs, or
+## states whose respective names/values should be changed.
 ##
 ## Default: replace entire list of names/entire yd vector.
 ## @end table
 ## @strong{Outputs}
 ## @var{retsys=sys} with appropriate signal names changed
 ## (or yd values, where appropriate)
 ##
 ## @strong{Example}
@@ -96,16 +96,26 @@ function retsys = syssetsignals (sys, op
   elseif (isempty(opt))
     opt = "out";
   elseif( ! isstr(opt)  )
     error("opt must be a string");
   elseif( ! (strcmp(opt,"out") + strcmp(opt,"yd") + ...
     strcmp(opt,"in") + strcmp(opt,"st") ) )
     error("opt must be one of [], ""out"", ""yd"", ""in"", or ""st""");
   elseif(nargin == 4)
+    if(is_signal_list(sig_idx) | isstr(sig_idx))
+      ## convert to vector of indices
+      if(opt == "yd")
+        sig_idx = sysidx(sys,"out",sig_idx);
+      else
+        sig_idx = sysidx(sys,opt,sig_idx);
+      endif
+    endif
+
+    ## check index vector
     if(min(size(sig_idx)) > 1)
       disp("syssetsignals: sig_idx=")
       disp(sig_idx);
       error("sig_idx must be a vector")
     endif
   endif
 
   sig_vals = sysgetsignals(sys,opt);
