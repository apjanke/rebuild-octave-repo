# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295718918 18000
#      Sat Jan 22 12:55:18 2011 -0500
# Node ID 3229572cbe233283b82b235d2cc3db9b55ce072f
# Parent  80fc70a534003ed20de97635baecaa806ff083a0
symbol_table::parent_classes: also add parents of parents to the list

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-22  John W. Eaton  <jwe@octave.org>
+
+	* symtab.h (symbol_table::parent_classes):
+	Also add parents of parents to the list.  Bug #32210.
+
 2011-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (octave_class::subsasgn): Find appropriate unique base
 	before trying any indexed assignment.
 
 2011-01-22  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* graphics.h.in, graphics.cc (xmtick, ymtick, zmtick):
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1861,16 +1861,29 @@ public:
   {
     std::list<std::string> retval;
 
     const_parent_map_iterator it = parent_map.find (dispatch_type);
 
     if (it != parent_map.end ())
       retval = it->second;
 
+    for (std::list<std::string>::const_iterator lit = retval.begin ();
+         lit != retval.end (); lit++)
+      {
+        // Search for parents of parents and append them to the list.
+
+        // FIXME -- should we worry about a circular inheritance graph?
+
+        std::list<std::string> parents = parent_classes (*lit);
+
+        if (! parents.empty ())
+          retval.insert (retval.end (), parents.begin (), parents.end ());
+      }
+
     return retval;
   }
 
   static octave_user_function *get_curr_fcn (scope_id scope = xcurrent_scope)
     {
       symbol_table *inst = get_instance (scope);
       return inst->curr_fcn;
     }
