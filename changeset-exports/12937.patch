# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1312827549 25200
#      Mon Aug 08 11:19:09 2011 -0700
# Node ID 1eebae7ac5d2dcb4ad5d924ac9b87ed64ba18d8a
# Parent  b74cb659e757b205af5eb06ae41046afe06baa15
strmatch.m: Trim search pattern of spaces and nulls.

* strmatch.m: Trim search pattern of spaces and nulls

diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -246,18 +246,18 @@ endfunction
 %! k = 7;
 %! A = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),0.4*n*ones(1,n),ones(1,n-2)]);
 %! [u,s,v] = svd(full(A));
 %! s = diag(s);
 %! [~, idx] = sort(abs(s));
 %! s = s(idx);
 %! u = u(:,idx);
 %! v = v(:,idx);
-%! randn ('state', 43);      % Initialize to make normest function reproducible
-%! rand ('state', 43)
+%! randn ('state', 35);      % Initialize to make normest function reproducible
+%! rand ('state', 35)
 %! opts.v0 = rand (2*n,1); % Initialize eigs ARPACK starting vector
 %!                         % to guarantee reproducible results
 %!test
 %! [u2,s2,v2,flag] = svds(A,k);
 %! s2 = diag(s2);
 %! assert(flag,!1);
 %! assert(s2, s(end:-1:end-k+1), 1e-10);
 %!testif HAVE_UMFPACK
diff --git a/scripts/strings/strmatch.m b/scripts/strings/strmatch.m
--- a/scripts/strings/strmatch.m
+++ b/scripts/strings/strmatch.m
@@ -20,17 +20,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} strmatch (@var{s}, @var{A})
 ## @deftypefnx {Function File} {} strmatch (@var{s}, @var{A}, "exact")
 ## Return indices of entries of @var{A} which begin with the string @var{s}.
 ## The second argument @var{A} must be a string, character matrix, or a cell
 ## array of strings.  If the third argument @code{"exact"} is not given, then
 ## @var{s} only needs to match @var{A} up to the length of @var{s}.
-## Trailing spaces and nulls in @var{A} are ignored even with the @code{"exact"}
+## Trailing spaces and nulls in @var{s} and @var{A} are ignored when matching.
 ## option.
 ## 
 ## For example:
 ##
 ## @example
 ## @group
 ## strmatch ("apple", "apple juice")
 ##      @result{} 1
@@ -58,16 +58,18 @@ function idx = strmatch (s, A, exact)
   endif
 
   if (! ischar (s) || (! isempty (s) && ! isvector (s)))
     error ("strmatch: S must be a string");
   elseif (! (ischar (A) || iscellstr (A)))
     error ("strmatch: A must be a string or cell array of strings");
   endif
 
+  ## Trim blanks and nulls from search string
+  s = regexprep (s, "[ \\0]+$", '');
   len = length (s);
 
   exact = nargin == 3 && ischar (exact) && strcmp (exact, "exact");
 
   if (ischar (A))
     [nr, nc] = size (A);
     if (len > nc)
       idx = [];
@@ -95,17 +97,17 @@ function idx = strmatch (s, A, exact)
 endfunction
 
 
 %!assert (strmatch("a", {"aaa", "bab", "bbb"}), 1);
 %!assert (strmatch ("apple", "apple juice"), 1);
 %!assert (strmatch ("apple", ["apple pie"; "apple juice"; "an apple"]), [1; 2]);
 %!assert (strmatch ("apple", {"apple pie"; "apple juice"; "tomato"}), [1; 2]);
 %!assert (strmatch ("apple pie", "apple"), []);
-%!assert (strmatch ("a ", "a"), []);
+%!assert (strmatch ("a ", "a"), 1);
 %!assert (strmatch ("a", "a \0", "exact"), 1);
 %!assert (strmatch ("a b", {"a b", "a c", "c d"}), 1);
 %!assert (strmatch ("", {"", "foo", "bar", ""}), [1, 4]);
 %!assert (strmatch ('', { '', '% comment', 'var a = 5', ''}, 'exact'), [1,4]);
 
 %% Test input validation
 %!error <Invalid call to strmatch> strmatch();
 %!error <Invalid call to strmatch> strmatch("a");
