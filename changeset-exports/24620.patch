# HG changeset patch
# User Rik <rik@octave.org>
# Date 1516385856 28800
#      Fri Jan 19 10:17:36 2018 -0800
# Node ID f5ad5d6f16fd00844f6ffa9b4bffd36283152250
# Parent  c241918d4c9249bc0e7e4f3b8488502521d04fa7
Deprecate toascii function

* scripts/deprecated/toascii.m: New m-file to emit warning and
compute toascii which was previously a C++ function.

* scripts/deprecated/module.mk: Add toascii.m to build system.

* NEWS: Anounce deprecation and replacement functionality in double().

* strings.txi: Remove DOCSTRING entry.  Change instances of "toascii"
to "double" in manual.

* Cell.h (xtoascii): Delete.

* mappers.cc (Ftoascii): Delete function.  Replace all uses of toascii
with double in other string function BIST tests.

* ov-base-sparse.cc (map): Delete case for umap_xtoascii.

* ov-base.cc (get_umap_name): Remove "toascii" from list of umap names.

* ov-base.h (enum unary_mapper_t): Remove umap_xtoascii from enum.

* ov-cell.cc (map): Remove FORWARD_MAPPER (xtoascii).

* ov-ch-mat.cc (xtoascii): Delete function.

* ov-float.cc (map), ov-flt-re-mat.cc (map), ov-re-mat.cc (map),
ov-scalar.cc (map): Delete case for umap_xtoascii.

* ov.h: Remove MAPPER_FORWARD (xtoascii)

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -261,16 +261,17 @@ Summary of important user-visible change
     The following functions have been deprecated in Octave 4.4 and will
     be removed from Octave 4.8 (or whatever version is the second major
     release after 4.4):
 
       Function             | Replacement
       ---------------------|------------------
       chop                 | sprintf for visual results
       desktop              | isguirunning
+      toascii              | double
 
  ** The following functions were deprecated in Octave 4.0 and have been
     removed from Octave 4.4.
 
       allow_noninteger_range_as_index
       bicubic
       delaunay3
       do_braindead_shortcircuit_evaluation
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -69,19 +69,19 @@ Types}, for more information about creat
 In double-quoted strings, the backslash character is used to introduce
 @dfn{escape sequences} that represent other characters.  For example,
 @samp{\n} embeds a newline character in a double-quoted string and
 @samp{\"} embeds a double quote character.  In single-quoted strings, backslash
 is not a special character.  Here is an example showing the difference:
 
 @example
 @group
-toascii ("\n")
+double ("\n")
     @result{} 10
-toascii ('\n')
+double ('\n')
     @result{} [ 92 110 ]
 @end group
 @end example
 
 Here is a table of all the escape sequences used in Octave (within
 double quoted strings).  They are the same as those used in the C
 programming language.
 
@@ -499,18 +499,16 @@ hex2dec ("FF")
 @DOCSTRING(hex2num)
 
 @DOCSTRING(str2double)
 
 @DOCSTRING(strjust)
 
 @DOCSTRING(str2num)
 
-@DOCSTRING(toascii)
-
 @DOCSTRING(tolower)
 
 @DOCSTRING(toupper)
 
 @DOCSTRING(unicode2native)
 
 @DOCSTRING(native2unicode)
 
diff --git a/libinterp/corefcn/Cell.h b/libinterp/corefcn/Cell.h
--- a/libinterp/corefcn/Cell.h
+++ b/libinterp/corefcn/Cell.h
@@ -144,17 +144,16 @@ public:
   Cell xisdigit (void) const { return map (&octave_value::xisdigit); }
   Cell xisgraph (void) const { return map (&octave_value::xisgraph); }
   Cell xislower (void) const { return map (&octave_value::xislower); }
   Cell xisprint (void) const { return map (&octave_value::xisprint); }
   Cell xispunct (void) const { return map (&octave_value::xispunct); }
   Cell xisspace (void) const { return map (&octave_value::xisspace); }
   Cell xisupper (void) const { return map (&octave_value::xisupper); }
   Cell xisxdigit (void) const { return map (&octave_value::xisxdigit); }
-  Cell xtoascii (void) const { return map (&octave_value::xtoascii); }
   Cell xtolower (void) const { return map (&octave_value::xtolower); }
   Cell xtoupper (void) const { return map (&octave_value::xtoupper); }
 
 private:
 
   typedef octave_value (octave_value::*ctype_mapper) (void) const;
 
   Cell map (ctype_mapper) const;
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1205,19 +1205,19 @@ This is equivalent to (@code{isalpha (@v
 
   return ovl (args(0).xisalnum ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("A":"Z") + 1) = true;
-%! result(toascii ("0":"9") + 1) = true;
-%! result(toascii ("a":"z") + 1) = true;
+%! result(double ("A":"Z") + 1) = true;
+%! result(double ("0":"9") + 1) = true;
+%! result(double ("a":"z") + 1) = true;
 %! assert (isalnum (charset), result);
 
 %!error isalnum ()
 %!error isalnum (1, 2)
 */
 
 DEFUNX ("isalpha", Fisalpha, args, ,
         doc: /* -*- texinfo -*-
@@ -1234,18 +1234,18 @@ This is equivalent to (@code{islower (@v
 
   return ovl (args(0).xisalpha ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("A":"Z") + 1) = true;
-%! result(toascii ("a":"z") + 1) = true;
+%! result(double ("A":"Z") + 1) = true;
+%! result(double ("a":"z") + 1) = true;
 %! assert (isalpha (charset), result);
 
 %!error isalpha ()
 %!error isalpha (1, 2)
 */
 
 DEFUNX ("isascii", Fisascii, args, ,
         doc: /* -*- texinfo -*-
@@ -1310,17 +1310,17 @@ decimal digits (0-9) and false where the
 
   return ovl (args(0).xisdigit ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("0":"9") + 1) = true;
+%! result(double ("0":"9") + 1) = true;
 %! assert (isdigit (charset), result);
 
 %!error isdigit ()
 %!error isdigit (1, 2)
 */
 
 DEFUN (isinf, args, ,
        doc: /* -*- texinfo -*-
@@ -1401,17 +1401,17 @@ lowercase letters and false where they a
 
   return ovl (args(0).xislower ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("a":"z") + 1) = true;
+%! result(double ("a":"z") + 1) = true;
 %! assert (islower (charset), result);
 
 %!error islower ()
 %!error islower (1, 2)
 */
 
 DEFUN (isna, args, ,
        doc: /* -*- texinfo -*-
@@ -1561,17 +1561,17 @@ vertical tab) and false where they are n
 
   return ovl (args(0).xisspace ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii (" \f\n\r\t\v") + 1) = true;
+%! result(double (" \f\n\r\t\v") + 1) = true;
 %! assert (isspace (charset), result);
 
 %!error isspace ()
 %!error isspace (1, 2)
 */
 
 DEFUNX ("isupper", Fisupper, args, ,
         doc: /* -*- texinfo -*-
@@ -1586,17 +1586,17 @@ uppercase letters and false where they a
 
   return ovl (args(0).xisupper ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("A":"Z") + 1) = true;
+%! result(double ("A":"Z") + 1) = true;
 %! assert (isupper (charset), result);
 
 %!error isupper ()
 %!error isupper (1, 2)
 */
 
 DEFUNX ("isxdigit", Fisxdigit, args, ,
         doc: /* -*- texinfo -*-
@@ -1611,19 +1611,19 @@ hexadecimal digits (0-9 and @nospell{a-f
 
   return ovl (args(0).xisxdigit ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
-%! result(toascii ("A":"F") + 1) = true;
-%! result(toascii ("0":"9") + 1) = true;
-%! result(toascii ("a":"f") + 1) = true;
+%! result(double ("A":"F") + 1) = true;
+%! result(double ("0":"9") + 1) = true;
+%! result(double ("a":"f") + 1) = true;
 %! assert (isxdigit (charset), result);
 
 %!error isxdigit ()
 %!error isxdigit (1, 2)
 */
 
 DEFUN (lgamma, args, ,
        doc: /* -*- texinfo -*-
@@ -2101,51 +2101,16 @@ Compute hyperbolic tangent for each elem
 %! x = single ([0, pi*i]);
 %! v = single ([0, 0]);
 %! assert (tanh (x), v, sqrt (eps ("single")));
 
 %!error tanh ()
 %!error tanh (1, 2)
 */
 
-DEFUNX ("toascii", Ftoascii, args, ,
-        doc: /* -*- texinfo -*-
-@deftypefn {} {} toascii (@var{s})
-Return ASCII representation of @var{s} in a matrix.
-
-For example:
-
-@example
-@group
-toascii ("ASCII")
-     @result{} [ 65, 83, 67, 73, 73 ]
-@end group
-
-@end example
-@seealso{char}
-@end deftypefn */)
-{
-  if (args.length () != 1)
-    print_usage ();
-
-  return ovl (args(0).xtoascii ());
-}
-
-/*
-%!assert (toascii (char (0:127)), 0:127)
-%!assert (toascii (" ":"@"), 32:64)
-%!assert (toascii ("A":"Z"), 65:90)
-%!assert (toascii ("[":"`"), 91:96)
-%!assert (toascii ("a":"z"), 97:122)
-%!assert (toascii ("{":"~"), 123:126)
-
-%!error toascii ()
-%!error toascii (1, 2)
-*/
-
 DEFUNX ("tolower", Ftolower, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn  {} {} tolower (@var{s})
 @deftypefnx {} {} lower (@var{s})
 Return a copy of the string or cell string @var{s}, with each uppercase
 character replaced by the corresponding lowercase one; non-alphabetic
 characters are left unchanged.
 
@@ -2192,17 +2157,17 @@ DEFALIAS (lower, tolower);
 %! endfor
 %!test
 %! a(3,3,3,3) = "D";
 %! assert (tolower (a)(3,3,3,3), "d");
 
 %!test
 %! charset = char (0:127);
 %! result = charset;
-%! result (toascii ("A":"Z") + 1) = result (toascii ("a":"z") + 1);
+%! result (double ("A":"Z") + 1) = result (double ("a":"z") + 1);
 %! assert (tolower (charset), result);
 
 %!error <Invalid call to tolower> lower ()
 %!error <Invalid call to tolower> tolower ()
 %!error tolower (1, 2)
 */
 
 DEFUNX ("toupper", Ftoupper, args, ,
@@ -2256,17 +2221,17 @@ DEFALIAS (upper, toupper);
 %!   assert (class (toupper (cls ([98, 99]))), class (cls ([98, 99])));
 %! endfor
 %!test
 %! a(3,3,3,3) = "d";
 %! assert (toupper (a)(3,3,3,3), "D");
 %!test
 %! charset = char (0:127);
 %! result = charset;
-%! result (toascii  ("a":"z") + 1) = result (toascii  ("A":"Z") + 1);
+%! result (double  ("a":"z") + 1) = result (double  ("A":"Z") + 1);
 %! assert (toupper (charset), result);
 
 %!error <Invalid call to toupper> toupper ()
 %!error <Invalid call to toupper> upper ()
 %!error toupper (1, 2)
 */
 
 DEFALIAS (gammaln, lgamma);
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -506,17 +506,16 @@ octave_base_sparse<T>::map (octave_base_
     case umap_xisdigit:
     case umap_xisgraph:
     case umap_xislower:
     case umap_xisprint:
     case umap_xispunct:
     case umap_xisspace:
     case umap_xisupper:
     case umap_xisxdigit:
-    case umap_xtoascii:
       // FIXME: intentionally skip this step for string mappers.
       // Is this wanted?
       break;
 
     default:
       {
         switch (retval.builtin_type ())
           {
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1071,17 +1071,16 @@ octave_base_value::get_umap_name (unary_
     "isgraph",
     "islower",
     "isprint",
     "ispunct",
     "isspace",
     "isupper",
     "isxdigit",
     "signbit",
-    "toascii",
     "tolower",
     "toupper"
   };
 
   if (umap < 0 || umap >= num_unary_mappers)
     return "unknown";
   else
     return names[umap];
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -773,17 +773,16 @@ public:
     umap_xisgraph,
     umap_xislower,
     umap_xisprint,
     umap_xispunct,
     umap_xisspace,
     umap_xisupper,
     umap_xisxdigit,
     umap_xsignbit,
-    umap_xtoascii,
     umap_xtolower,
     umap_xtoupper,
     umap_unknown,
     num_unary_mappers = umap_unknown
   };
 
   virtual octave_value map (unary_mapper_t) const;
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1424,16 +1424,15 @@ octave_cell::map (unary_mapper_t umap) c
     FORWARD_MAPPER (xisdigit);
     FORWARD_MAPPER (xisgraph);
     FORWARD_MAPPER (xislower);
     FORWARD_MAPPER (xisprint);
     FORWARD_MAPPER (xispunct);
     FORWARD_MAPPER (xisspace);
     FORWARD_MAPPER (xisupper);
     FORWARD_MAPPER (xisxdigit);
-    FORWARD_MAPPER (xtoascii);
     FORWARD_MAPPER (xtolower);
     FORWARD_MAPPER (xtoupper);
 
     default:
       return octave_base_value::map (umap);
     }
 }
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -242,25 +242,16 @@ static inline int xisascii (int c)
 {
 #if defined (HAVE_ISASCII)
   return isascii (c);
 #else
   return (c >= 0x00 && c <= 0x7f);
 #endif
 }
 
-static inline int xtoascii (int c)
-{
-#if defined (HAVE_TOASCII)
-  return toascii (c);
-#else
-  return (c & 0x7F);
-#endif
-}
-
 octave_value
 octave_char_matrix::map (unary_mapper_t umap) const
 {
   octave_value retval;
 
   switch (umap)
     {
 #define STRING_MAPPER(UMAP,FCN,TYPE)                                  \
@@ -274,17 +265,16 @@ octave_char_matrix::map (unary_mapper_t 
     STRING_MAPPER (xisdigit, std::isdigit, bool);
     STRING_MAPPER (xisgraph, std::isgraph, bool);
     STRING_MAPPER (xislower, std::islower, bool);
     STRING_MAPPER (xisprint, std::isprint, bool);
     STRING_MAPPER (xispunct, std::ispunct, bool);
     STRING_MAPPER (xisspace, std::isspace, bool);
     STRING_MAPPER (xisupper, std::isupper, bool);
     STRING_MAPPER (xisxdigit, std::isxdigit, bool);
-    STRING_MAPPER (xtoascii, xtoascii, double);
     STRING_MAPPER (xtolower, std::tolower, char);
     STRING_MAPPER (xtoupper, std::toupper, char);
 
     // For Matlab compatibility, these should work on ASCII values
     // without error or warning.
     case umap_abs:
     case umap_ceil:
     case umap_fix:
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -414,17 +414,16 @@ octave_float_scalar::map (unary_mapper_t
     case umap_xisdigit:
     case umap_xisgraph:
     case umap_xislower:
     case umap_xisprint:
     case umap_xispunct:
     case umap_xisspace:
     case umap_xisupper:
     case umap_xisxdigit:
-    case umap_xtoascii:
       {
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -851,17 +851,16 @@ octave_float_matrix::map (unary_mapper_t
     case umap_xisdigit:
     case umap_xisgraph:
     case umap_xislower:
     case umap_xisprint:
     case umap_xispunct:
     case umap_xisspace:
     case umap_xisupper:
     case umap_xisxdigit:
-    case umap_xtoascii:
       {
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -977,17 +977,16 @@ octave_matrix::map (unary_mapper_t umap)
     case umap_xisdigit:
     case umap_xisgraph:
     case umap_xislower:
     case umap_xisprint:
     case umap_xispunct:
     case umap_xisspace:
     case umap_xisupper:
     case umap_xisxdigit:
-    case umap_xtoascii:
       {
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -435,17 +435,16 @@ octave_scalar::map (unary_mapper_t umap)
     case umap_xisdigit:
     case umap_xisgraph:
     case umap_xislower:
     case umap_xisprint:
     case umap_xispunct:
     case umap_xisspace:
     case umap_xisupper:
     case umap_xisxdigit:
-    case umap_xtoascii:
       {
         octave_value str_conv = convert_to_str (true, true);
         return str_conv.map (umap);
       }
 
     default:
       return octave_base_value::map (umap);
     }
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1451,17 +1451,16 @@ public:
   MAPPER_FORWARD (xisgraph)
   MAPPER_FORWARD (xislower)
   MAPPER_FORWARD (xisprint)
   MAPPER_FORWARD (xispunct)
   MAPPER_FORWARD (xisspace)
   MAPPER_FORWARD (xisupper)
   MAPPER_FORWARD (xisxdigit)
   MAPPER_FORWARD (xsignbit)
-  MAPPER_FORWARD (xtoascii)
   MAPPER_FORWARD (xtolower)
   MAPPER_FORWARD (xtoupper)
 
 #undef MAPPER_FORWARD
 
   octave_value map (octave_base_value::unary_mapper_t umap) const
   { return rep->map (umap); }
 
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -8,16 +8,17 @@ FCN_FILE_DIRS += scripts/deprecated
   %reldir%/isstr.m \
   %reldir%/mahalanobis.m \
   %reldir%/md5sum.m \
   %reldir%/octave_config_info.m \
   %reldir%/onenormest.m \
   %reldir%/paren.m \
   %reldir%/semicolon.m \
   %reldir%/sleep.m \
+  %reldir%/toascii.m \
   %reldir%/usleep.m \
   %reldir%/wavread.m \
   %reldir%/wavwrite.m
 
 %canon_reldir%dir = $(fcnfiledir)/deprecated
 
 %canon_reldir%_DATA = $(%canon_reldir%_FCN_FILES)
 
diff --git a/scripts/deprecated/toascii.m b/scripts/deprecated/toascii.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/toascii.m
@@ -0,0 +1,71 @@
+## Copyright (C) 2018 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {} toascii (@var{s})
+##
+## @code{toascii} is deprecated and will be removed in Octave version 4.8.
+## Use @code{double} instead.
+##
+## Return ASCII representation of @var{s} in a matrix.
+## 
+## For example:
+## 
+## @example
+## @group
+## toascii ("ASCII"
+##      @result{} [ 65, 83, 67, 73, 73 ]
+## @end group
+## 
+## @end example
+## @seealso{double, char}
+## @end deftypefn
+
+## Remove in version 4.8.
+
+function retval = toascii (str)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "toascii is obsolete and will be removed from a future version of Octave, please use double instead");
+  endif
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  if (iscell (str))
+    retval = cellfun (@(x) bitand (double (x), 0x7F), str, "uniformoutput", 0);
+  else
+    retval = bitand (double (str), 0x7F);  # Restrict to 7-bit ASCII
+  endif
+
+endfunction
+
+
+%!assert (toascii (char (0:127)), 0:127)
+%!assert (toascii (" ":"@"), 32:64)
+%!assert (toascii ("A":"Z"), 65:90)
+%!assert (toascii ("[":"`"), 91:96)
+%!assert (toascii ("a":"z"), 97:122)
+%!assert (toascii ("{":"~"), 123:126)
+
+%!error toascii ()
+%!error toascii (1, 2)
