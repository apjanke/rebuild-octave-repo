# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1320513388 0
#      Sat Nov 05 17:16:28 2011 +0000
# Node ID a03e96aa497757eaf88c3c2eee46c32dc78076c1
# Parent  b81e0b3fedabf8d1ef7627f31e34c0e11b186c16
NEWS file of packages now expected to be in the package root. Also support ONEWS file as per GNU the standards. Updated manual accordingly.

diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -174,37 +174,49 @@ using the @code{pkg global_list} command
 called without a new path, the current path will be returned.
 
 @node Creating Packages
 @section Creating Packages
 
 Internally a package is simply a gzipped tar file that contains a
 top level directory of any given name.  This directory will in the
 following be referred to as @code{package} and may contain the
-following files
+following files:
 
 @noindent
 @table @code
-@item package/DESCRIPTION
-This is a required file containing information about the package.
-@xref{The DESCRIPTION File}, for details on this file.
-
 @item package/COPYING
 This is a required file containing the license of the package.  No
 restrictions is made on the license in general.  If however the
 package contains dynamically linked functions the license must be
 compatible with the GNU General Public License.
 
+@item package/DESCRIPTION
+This is a required file containing information about the package.
+@xref{The DESCRIPTION File}, for details on this file.
+
+@item package/ChangeLog
+This is an optional file describing all the changes made to the
+package source files.
+
 @item package/INDEX
 This is an optional file describing the functions provided by the
 package.  If this file is not given then one with be created
 automatically from the functions in the package and the
-@code{Categories} keyword in the @code{DESCRIPTION} file.
+@code{Categories} keyword in the @file{DESCRIPTION} file.
 @xref{The INDEX File}, for details on this file.
 
+@item package/NEWS
+This is an optional file describing all user-visible changes worth
+mentioning. As this file increases on size, old entries can be moved
+into @file{package/ONEWS}.
+
+@item package/ONEWS
+This is an optional file describing old entries from the @file{NEWS} file.
+
 @anchor{doc-PKG_ADD}
 @item package/PKG_ADD
 An optional file that includes commands that are run when the package
 is added to the users path.  Note that @w{@code{PKG_ADD}} directives in the
 source code of the package will also be added to this file by the
 Octave package manager.  Note that symbolic links are to be avoided in
 packages, as symbolic links do not exist on some file systems, and so
 a typical use for this file is the replacement of the symbolic link
@@ -241,17 +253,17 @@ This is an optional script that is run a
 package. 
 
 @item package/on_uninstall.m
 This is an optional script that is run prior to the removal of a
 package. 
 @end table
 
 Besides the above mentioned files, a package can also contain on or
-more of the following directories
+more of the following directories:
 
 @noindent
 @table @code
 @item package/inst
 An optional directory containing any files that are directly installed
 by the package.  Typically this will include any @code{m}-files. 
 
 @item package/src
@@ -284,17 +296,17 @@ external scripts, etc., called by functi
 * The DESCRIPTION File::        
 * The INDEX File::              
 * PKG_ADD and PKG_DEL Directives::  
 @end menu
 
 @node The DESCRIPTION File
 @subsection The DESCRIPTION File
 
-The @code{DESCRIPTION} file contains various information about the
+The @file{DESCRIPTION} file contains various information about the
 package, such as its name, author, and version.  This file has a very
 simple format
 
 @noindent
 @itemize
 @item
 Lines starting with @samp{#} are comments.
 
@@ -302,17 +314,17 @@ Lines starting with @samp{#} are comment
 Lines starting with a blank character are continuations from the 
 previous line.
 
 @item
 Everything else is of the form @code{NameOfOption: ValueOfOption}.
 @end itemize
 
 @noindent
-The following is a simple example of a @code{DESCRIPTION} file
+The following is a simple example of a @file{DESCRIPTION} file
 
 @example
 @group
 Name: The name of my package
 Version: 1.0.0
 Date: 2007-18-04
 Author: The name (and possibly email) of the package author.
 Maintainer: The name (and possibly email) of the current
@@ -329,17 +341,18 @@ License: GPL version 3 or later
 The package manager currently recognizes the following keywords
 
 @noindent
 @table @code
 @item Name
 Name of the package.
 
 @item Version
-Version of the package.
+Version of the package.  A package version must be 3 numbers separated
+by a dot.
 
 @item Date
 Date of last update.
 
 @item Author
 Original author of the package.
 
 @item Maintainer
@@ -347,17 +360,17 @@ Maintainer of the package.
 
 @item Title
 A one line description of the package.
 
 @item Description
 A one paragraph description of the package.
 
 @item Categories
-Optional keyword describing the package (if no @code{INDEX} file is
+Optional keyword describing the package (if no @file{INDEX} file is
 given this is mandatory).
 
 @item Problems
 Optional list of known problems.
 
 @item Url
 Optional list of homepages related to the package.
 
@@ -380,17 +393,17 @@ Depends: package (>= 1.0.0)
 Possible operators are @code{<}, @code{<=}, @code{==}, @code{>=} or
 @code{>}.  If the part of the dependency in @code{()} is missing, any
 version of the package is acceptable.  Multiple dependencies can be
 defined either as a comma separated list or on separate @code{Depends}
 lines.
 
 @item License
 An optional short description of the used license (e.g., GPL version 3
-or newer).  This is optional since the file @code{COPYING} is mandatory.
+or newer).  This is optional since the file @file{COPYING} is mandatory.
 
 @item SystemRequirements
 These are the external install dependencies of the package and are not
 checked by the package manager.  This is here as a hint to the
 distribution packager.  They follow the same conventions as the
 @code{Depends} keyword.
 
 @item BuildRequires
@@ -402,17 +415,17 @@ as @code{rpm} or @code{deb} and autoprob
 from the build dependencies, and therefore the often a
 @code{BuildRequires} dependency removes the need for a
 @code{SystemRequirements} dependency.
 
 @end table
 
 @noindent
 The developer is free to add additional arguments to the 
-@code{DESCRIPTION} file for their own purposes.  One further detail to
+@file{DESCRIPTION} file for their own purposes.  One further detail to
 aid the packager is that the @code{SystemRequirements} and
 @code{BuildRequires} keywords can have a distribution dependent section,
 and the automatic build process will use these.  An example of the
 format of this is
 
 @example
 BuildRequires: libtermcap-devel [Mandriva] libtermcap2-devel
 @end example
@@ -420,17 +433,17 @@ BuildRequires: libtermcap-devel [Mandriv
 @noindent
 where the first package name will be used as a default and if the
 RPMs are built on a Mandriva distribution, then the second package
 name will be used instead. 
 
 @node The INDEX File
 @subsection The INDEX File
 
-The optional @code{INDEX} file provides a categorical view of the
+The optional @file{INDEX} file provides a categorical view of the
 functions in the package.  This file has a very simple format
 
 @noindent
 @itemize
 @item Lines beginning with @samp{#} are comments.
 
 @item The first non-comment line should look like this
 
diff --git a/scripts/miscellaneous/news.m b/scripts/miscellaneous/news.m
--- a/scripts/miscellaneous/news.m
+++ b/scripts/miscellaneous/news.m
@@ -34,17 +34,17 @@ function news (package)
   elseif (nargin == 1 && ischar (package))
     installed = pkg ("list");
     names     = cellfun (@(x) x.name, installed, "UniformOutput", false);
     ## we are nice and let the user use any case on the package name
     pos = strcmpi (names, package);
     if (!any (pos))
       error ("Package '%s' is not installed.", package);
     endif
-    newsfile = fullfile (installed{pos}.dir, "doc", "NEWS");
+    newsfile = fullfile (installed{pos}.dir, "packinfo", "NEWS");
 
   else
     print_usage;
   endif
 
   if (exist (newsfile, "file"))
     f = fopen (newsfile, "r");
     while (ischar (line = fgets (f)))
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1621,88 +1621,69 @@ function copy_files (desc, packdir, glob
   packinfo = fullfile (desc.dir, "packinfo");
   [status, msg] = mkdir (packinfo);
   if (status != 1)
     rm_rf (desc.dir);
     rm_rf (octfiledir);
     error ("couldn't create packinfo directory: %s", msg);
   endif
 
-  ## Copy DESCRIPTION.
-  [status, output] = copyfile (fullfile (packdir, "DESCRIPTION"), packinfo);
-  if (status != 1)
-    rm_rf (desc.dir);
-    rm_rf (octfiledir);
-    error ("couldn't copy DESCRIPTION: %s", output);
-  endif
+  packinfo_copy_file ("DESCRIPTION", "required", packdir, packinfo, desc, octfiledir);
+  packinfo_copy_file ("COPYING", "required", packdir, packinfo, desc, octfiledir);
 
-  ## Copy COPYING.
-  [status, output] = copyfile (fullfile (packdir, "COPYING"), packinfo);
-  if (status != 1)
-    rm_rf (desc.dir);
-    rm_rf (octfiledir);
-    error ("couldn't copy COPYING: %s", output);
-  endif
-
-  ## If the file ChangeLog exists, copy it.
-  changelog_file = fullfile (packdir, "ChangeLog");
-  if (exist (changelog_file, "file"))
-    [status, output] = copyfile (changelog_file, packinfo);
-    if (status != 1)
-      rm_rf (desc.dir);
-      rm_rf (octfiledir);
-      error ("couldn't copy ChangeLog file: %s", output);
-    endif
-  endif
+  packinfo_copy_file ("NEWS", "optional", packdir, packinfo, desc, octfiledir);
+  packinfo_copy_file ("ONEWS", "optional", packdir, packinfo, desc, octfiledir);
+  packinfo_copy_file ("ChangeLog", "optional", packdir, packinfo, desc, octfiledir);
 
   ## Is there an INDEX file to copy or should we generate one?
   index_file = fullfile (packdir, "INDEX");
   if (exist(index_file, "file"))
-    [status, output] = copyfile (index_file, packinfo);
-    if (status != 1)
-      rm_rf (desc.dir);
-      rm_rf (octfiledir);
-      error ("couldn't copy INDEX file: %s", output);
-    endif
+    packinfo_copy_file ("INDEX", "required", packdir, packinfo, desc, octfiledir);
   else
     try
       write_index (desc, fullfile (packdir, "inst"),
                    fullfile (packinfo, "INDEX"), global_install);
     catch
       rm_rf (desc.dir);
       rm_rf (octfiledir);
       rethrow (lasterror ());
     end_try_catch
   endif
 
   ## Is there an 'on_uninstall.m' to install?
-  fon_uninstall = fullfile (packdir, "on_uninstall.m");
-  if (exist (fon_uninstall, "file"))
-    [status, output] = copyfile (fon_uninstall, packinfo);
-    if (status != 1)
-      rm_rf (desc.dir);
-      rm_rf (octfiledir);
-      error ("couldn't copy on_uninstall.m: %s", output);
-    endif
-  endif
+  packinfo_copy_file ("on_uninstall.m", "optional", packdir, packinfo, desc, octfiledir);
 
   ## Is there a doc/ directory that needs to be installed?
   docdir = fullfile (packdir, "doc");
   if (exist (docdir, "dir") && ! dirempty (docdir))
     [status, output] = copyfile (docdir, desc.dir);
   endif
 
   ## Is there a bin/ directory that needs to be installed?
   ## FIXME: Need to treat architecture dependent files in bin/
   bindir = fullfile (packdir, "bin");
   if (exist (bindir, "dir") && ! dirempty (bindir))
     [status, output] = copyfile (bindir, desc.dir);
   endif
 endfunction
 
+function packinfo_copy_file (filename, requirement, packdir, packinfo, desc, octfiledir)
+  filepath = fullfile (packdir, filename);
+  if (!exist (filepath, "file") && strcmpi (requirement, "optional"))
+    ## do nothing, it's still OK
+  else
+    [status, output] = copyfile (filepath, packinfo);
+    if (status != 1)
+      rm_rf (desc.dir);
+      rm_rf (octfiledir);
+      error ("Couldn't copy %s file: %s", filename, output);
+    endif
+  endif
+endfunction
+
 function finish_installation (desc, packdir, global_install)
   ## Is there a post-install to call?
   if (exist (fullfile (packdir, "post_install.m"), "file"))
     wd = pwd ();
     try
       cd (packdir);
       post_install (desc);
       cd (wd);
