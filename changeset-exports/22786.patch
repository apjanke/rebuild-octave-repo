# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479405351 28800
#      Thu Nov 17 09:55:51 2016 -0800
# Node ID 13f3ec0f7c01cbfbef68bbac3eb33f5e6b42ae95
# Parent  9c666100416702b3b5d58ef93da54025250244fa
isocolors.m: Overhaul function.

* isocolors.m: Rewrite docstring.  Rename output to cdat, rather than
varargout, for clarity.  Rename variable "new_col" to "new_colors"
for clarity.  Verify that input handle is actually a handle to a patch
object.  Don't issue an error if there is more than one output variable.
Add input validation BIST tests.

* __interp_cube__.m: Change function prototype to accept accept a first
argument caller.  Prefix all error messages with the name caller.  Change
docstring to match new prototype.  Simplify input checking by testing that
only one of the input matrices has 3 dimensions, and then using size_equal
to verify that they all must have 3 dimensions.

* isonormals.m: Change calls to __interp_cube__ to use caller as first arg.

diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -12,46 +12,46 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {[@var{cd}] =} isocolors (@var{c}, @var{v})
-## @deftypefnx {} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{c}, @var{v})
-## @deftypefnx {} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{r}, @var{g}, @var{b}, @var{v})
-## @deftypefnx {} {[@var{cd}] =} isocolors (@var{r}, @var{g}, @var{b}, @var{v})
-## @deftypefnx {} {[@var{cd}] =} isocolors (@dots{}, @var{p})
+## @deftypefn  {} {@var{cdat} =} isocolors (@var{c}, @var{v})
+## @deftypefnx {} {@var{cdat} =} isocolors (@var{x}, @var{y}, @var{z}, @var{c}, @var{v})
+## @deftypefnx {} {@var{cdat} =} isocolors (@var{x}, @var{y}, @var{z}, @var{r}, @var{g}, @var{b}, @var{v})
+## @deftypefnx {} {@var{cdat} =} isocolors (@var{r}, @var{g}, @var{b}, @var{v})
+## @deftypefnx {} {@var{cdat} =} isocolors (@dots{}, @var{p})
 ## @deftypefnx {} {} isocolors (@dots{})
 ##
 ## Compute isosurface colors.
 ##
-## If called with one output argument and the first input argument
-## @var{c} is a three-dimensional array that contains color values and
-## the second input argument @var{v} keeps the vertices of a geometry
-## then return a matrix @var{cd} with color data information for the
-## geometry at computed points
-## @code{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
-## @var{cd} can be taken to manually set FaceVertexCData of a patch.
+## If called with one output argument, and the first input argument @var{c}
+## is a three-dimensional array that contains indexed color values, and the
+## second input argument @var{v} are the vertices of an isosurface geometry,
+## then return a matrix @var{cdat} with color data information for the geometry
+## at computed points @code{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output
+## argument @var{cdat} can be used to manually set the
+## @qcode{"FaceVertexCData"} property of an isosurface patch object.
 ##
-## If called with further input arguments @var{x}, @var{y} and @var{z}
-## which are three--dimensional arrays of the same size than @var{c}
-## then the color data is taken at those given points.  Instead of the
-## color data @var{c} this function can also be called with RGB values
-## @var{r}, @var{g}, @var{b}.  If input argumnets @var{x}, @var{y},
-## @var{z} are not given then again @code{meshgrid} computed values
-## are taken.
+## If called with additional input arguments @var{x}, @var{y} and @var{z} which
+## are three-dimensional arrays of the same size as @var{c} then the
+## color data is taken at those specified points.
 ##
-## Optionally, the patch handle @var{p} can be given as the last input
-## argument to all variations of function calls instead of the vertices
-## data @var{v}.  Finally, if no output argument is given then directly
-## change the colors of a patch that is given by the patch handle
-## @var{p}.
+## Instead of indexed color data @var{c}, @code{isocolors} can also be called
+## with RGB values @var{r}, @var{g}, @var{b}.  If input arguments @var{x},
+## @var{y}, @var{z} are not given then @code{meshgrid} computed values are
+## used.
+##
+## Optionally, a patch handle @var{p} can be given as the last input argument
+## to all function call variations and the vertex data will be extracted
+## from the isosurface patch object.  Finally, if no output argument is given
+## then the colors of the patch given by the patch handle @var{p} are changed.
 ##
 ## For example:
 ##
 ## @example
 ## function isofinish (p)
 ##   set (gca, "PlotBoxAspectRatioMode", "manual", ...
 ##             "PlotBoxAspectRatio", [1 1 1]);
 ##   set (p, "FaceColor", "interp");
@@ -61,50 +61,50 @@
 ##
 ## N = 15;    # Increase number of vertices in each direction
 ## iso = .4;  # Change isovalue to .1 to display a sphere
 ## lin = linspace (0, 2, N);
 ## [x, y, z] = meshgrid (lin, lin, lin);
 ## c = abs ((x-.5).^2 + (y-.5).^2 + (z-.5).^2);
 ## figure (); # Open another figure window
 ##
-## subplot (2,2,1); view (-38, 20);
+## subplot (2,2,1);  view (-38, 20);
 ## [f, v] = isosurface (x, y, z, c, iso);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
 ## cdat = rand (size (c));       # Compute random patch color data
 ## isocolors (x, y, z, cdat, p); # Directly set colors of patch
 ## isofinish (p);                # Call user function isofinish
 ##
-## subplot (2,2,2); view (-38, 20);
+## subplot (2,2,2);  view (-38, 20);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
 ## [r, g, b] = meshgrid (lin, 2-lin, 2-lin);
 ## cdat = isocolors (x, y, z, c, v); # Compute color data vertices
 ## set (p, "FaceVertexCData", cdat); # Set color data manually
 ## isofinish (p);
 ##
-## subplot (2,2,3); view (-38, 20);
+## subplot (2,2,3);  view (-38, 20);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
 ## cdat = isocolors (r, g, b, c, p); # Compute color data patch
 ## set (p, "FaceVertexCData", cdat); # Set color data manually
 ## isofinish (p);
 ##
-## subplot (2,2,4); view (-38, 20);
+## subplot (2,2,4);  view (-38, 20);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
 ## r = g = b = repmat ([1:N] / N, [N, 1, N]); # Black to white
 ## cdat = isocolors (x, y, z, r, g, b, v);
 ## set (p, "FaceVertexCData", cdat);
 ## isofinish (p);
 ## @end example
 ##
 ## @seealso{isosurface, isonormals}
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
-function varargout = isocolors (varargin)
+function cdat = isocolors (varargin)
 
   calc_rgb = false;
   switch (nargin)
     case 2
       c = varargin{1};
       vp = varargin{2};
       x = 1:size (c, 2);
       y = 1:size (c, 1);
@@ -135,47 +135,51 @@ function varargout = isocolors (varargin
       vp = varargin{7};
     otherwise
       print_usage ();
   endswitch
 
   if (isnumeric (vp) && columns (vp) == 3)
     pa = [];
     v = vp;
-  elseif ( ishandle (vp) )
+  elseif (ishandle (vp) && strcmp (get (vp, "type"), "patch"))
     pa = vp;
     v = get (pa, "Vertices");
   else
-    error ("isocolors: last argument is not a vertex list or patch handle");
+    error ("isocolors: last argument must be a vertex list or patch handle");
   endif
 
   if (calc_rgb)
-    new_col = zeros (rows (v), 3);
-    new_col(:,1) = __interp_cube__ (x, y, z, R, v, "values" );
-    new_col(:,2) = __interp_cube__ (x, y, z, G, v, "values" );
-    new_col(:,3) = __interp_cube__ (x, y, z, B, v, "values" );
+    new_colors = zeros (rows (v), 3);
+    new_colors(:,1) = __interp_cube__ ("isocolors", x, y, z, R, v, "values");
+    new_colors(:,2) = __interp_cube__ ("isocolors", x, y, z, G, v, "values");
+    new_colors(:,3) = __interp_cube__ ("isocolors", x, y, z, B, v, "values");
   else
-    new_col = __interp_cube__ (x, y, z, c, v, "values" );
+    new_colors = __interp_cube__ ("isocolors", x, y, z, c, v, "values");
   endif
 
-  ## FIXME: No reason to actually error out if an extra argout is used.
-  switch (nargout)
-    case 0
-      if (! isempty (pa))
-        set (pa, "FaceVertexCData", new_col);
-      endif
-    case 1
-      varargout = {new_col};
-    otherwise
-      print_usage ();
-  endswitch
+  if (nargout == 0)
+    if (! isempty (pa))
+      set (pa, "FaceVertexCData", new_colors);
+    endif
+  else
+    cdat = new_colors;
+  endif
 
 endfunction
 
 
 %!test
 %! [x, y, z] = meshgrid (0:.5:2, 0:.5:2, 0:.5:2);
 %! c = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 %! [f, v] = isosurface (x, y, z, c, .4);
 %! cdat = isocolors (x, y, z, c, v);
 %! assert (rows (cdat) == rows (v));
-## Can't create a patch handle for tests without a figure
 
+## Test input validation
+%!error isocolors ()
+%!error isocolors (1)
+%!error isocolors (1,2,3)
+%!error isocolors (1,2,3,4,5,6)
+%!error isocolors (1,2,3,4,5,6,7,8)
+%!error <last argument must be a vertex list> isocolors (1, {1})
+%!error <last argument must be a .*patch handle> isocolors (1, 0)
+
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -95,19 +95,19 @@ function varargout = isonormals (varargi
   elseif (ishghandle (vp, "patch"))
     pa = vp;
     v = get (pa, "Vertices");
   else
     error ("isonormals: input must be a list of vertices or a patch handle");
   endif
 
   if (negate)
-    normals = __interp_cube__ (x, y, z, val, v, "normals");
+    normals = __interp_cube__ ("isonormals", x, y, z, val, v, "normals");
   else
-    normals = -__interp_cube__ (x, y, z, val, v, "normals");
+    normals = -__interp_cube__ ("isonormals", x, y, z, val, v, "normals");
   endif
 
   switch (nargout)
     case 0
       if (! isempty (pa))
         set (pa, "VertexNormals", normals);
       endif
 
diff --git a/scripts/plot/draw/private/__interp_cube__.m b/scripts/plot/draw/private/__interp_cube__.m
--- a/scripts/plot/draw/private/__interp_cube__.m
+++ b/scripts/plot/draw/private/__interp_cube__.m
@@ -14,44 +14,42 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Author: Martin Helm <martin@mhelm.de>
 
 ## -*- texinfo -*-
-## @deftypefn {} {[@var{vxyz}, @var{idx}, @var{frac}] =} __interp_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{v})
+## @deftypefn {} {[@var{vxyz}, @var{idx}, @var{frac}] =} __interp_cube__ (@var{caller}, @var{x}, @var{y}, @var{z}, @var{val}, @var{v})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function [Vxyz, idx, frac] = __interp_cube__ (x, y, z, val, v, req = "values" )
+function [Vxyz, idx, frac] = __interp_cube__ (caller, x, y, z, val, v,
+                                              req = "values")
 
-  if (isnumeric (x) && ndims (x) == 3 && isnumeric (y) && ndims (y) == 3
-       && isnumeric (z) && ndims (z) == 3 && size_equal (x, y, z, val))
+  if (isnumeric (x) && ndims (x) == 3 && isnumeric (y) && isnumeric (z)
+      && size_equal (x, y, z, val))
     x = squeeze (x(1,:,1))(:);
     y = squeeze (y(:,1,1))(:);
     z = squeeze (z(1,1,:))(:);
   elseif (isvector (x) && isvector (y) && isvector (z))
     x = x(:);
     y = y(:);
     z = z(:);
   else
-    error ("__interp_cube__: X, Y, Z have wrong dimensions");
+    error ([caller ": X, Y, Z have unequal dimensions"]);
   endif
 
   if (size (val) != [length(x), length(y), length(z)])
-    error ("__interp_cube__: VAL has wrong dimensions");
+    error ([caller ": VAL dimensions must match those of X, Y, and Z"]);
   endif
   if (columns (v) != 3)
-    error ( "V has to be Nx3 matrix");
+    error ([caller ": V must be an Nx3 matrix"]);
   endif
-  ##if (! ischar (req))
-  ##  error ('__interp_cube__: Invalid request parameter use "values", "normals" or "normals8"');
-  ##endif
 
   if (isempty (v))
     Vxyz = idx = frac = [];
     return;
   endif
 
   switch (req)
     case "normals"
@@ -81,31 +79,35 @@ function [Vxyz, idx, frac] = __interp_cu
       v101 = interp_cube_trilin (x, y, z, val, p101);
       v110 = interp_cube_trilin (x, y, z, val, p110);
       v111 = interp_cube_trilin (x, y, z, val, p111);
 
       Dx = -v000 .+ v100 .- v010 .- v001 .- v011 .+ v101 .+ v110 .+ v111;
       Dy = -v000 .- v100 .+ v010 .- v001 .+ v011 .- v101 .+ v110 .+ v111;
       Dz = -v000 .- v100 .- v010 .+ v001 .+ v011 .+ v101 .- v110 .+ v111;
       Vxyz = 0.5 .* [Dx./dx, Dy./dy, Dz./dz];
+
     case "normals8"
       [idx, frac] = cube_idx (x, y, z, v);
 
       dx = x(2:end) - x(1:end-1);
       dy = y(2:end) - y(1:end-1);
       dz = z(2:end) - z(1:end-1);
       dx = [dx;dx(end)](idx(:,2));
       dy = [dy;dy(end)](idx(:,1));
       dz = [dz;dz(end)](idx(:,3));
       [Dx, Dy, Dz, idx, frac] = interp_cube_trilin_grad (x, y, z, val, v);
       Vxyz = [Dx./dx, Dy./dy, Dz./dz];
+
     case "values"
       [Vxyz, idx, frac] = interp_cube_trilin (x, y, z, val, v);
+
    otherwise
-     error ('__interp_cube__: Invalid request type "%s", use "values", "normals" or "normals8"', req);
+     error ([caller ': Invalid request type "%s", use "values", "normals" or "normals8"'], req);
+
   endswitch
 
 endfunction
 
 function [Vxyz, idx, frac] = interp_cube_trilin (x, y, z, val, v)
 
   [idx, frac] = cube_idx (x(:), y(:), z(:), v);
   sval = size (val);
