# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1415705496 -3600
#      Tue Nov 11 12:31:36 2014 +0100
# Node ID 1f4455ff2329509f6302889e951c03105f822a77
# Parent  cbc838b3020c1d301a37f0791fb63b3a3020cf83
Remove deprecated methods in liboctave.

* chNDArray.cc: Avoid using deprecated methods in constructors.

* Array.h: Documentation improved.  Deprecated methods removed.

* kron.cc (kron): Use undeprecated constructor.

diff --git a/libinterp/corefcn/kron.cc b/libinterp/corefcn/kron.cc
--- a/libinterp/corefcn/kron.cc
+++ b/libinterp/corefcn/kron.cc
@@ -133,17 +133,17 @@ kron (const MSparse<T>& A, const MSparse
 
 static PermMatrix
 kron (const PermMatrix& a, const PermMatrix& b)
 {
   octave_idx_type na = a.rows ();
   octave_idx_type nb = b.rows ();
   const Array<octave_idx_type>& pa = a.col_perm_vec ();
   const Array<octave_idx_type>& pb = b.col_perm_vec ();
-  Array<octave_idx_type> res_perm (na * nb);
+  Array<octave_idx_type> res_perm (dim_vector (1, na * nb));
   octave_idx_type rescol = 0;
   for (octave_idx_type i = 0; i < na; i++)
     {
       octave_idx_type a_add = pa(i) * nb;
       for (octave_idx_type j = 0; j < nb; j++)
         res_perm.xelem (rescol++) = a_add + pb(j);
     }
 
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -36,19 +36,17 @@ along with Octave; see the file COPYING.
 #include "idx-vector.h"
 #include "lo-traits.h"
 #include "lo-utils.h"
 #include "oct-sort.h"
 #include "quit.h"
 #include "oct-mem.h"
 #include "oct-refcount.h"
 
-//! One dimensional array class.  Handles the reference counting for
-//! all the derived classes.
-
+//!Handles the reference counting for all the derived classes.
 template <class T>
 class
 Array
 {
 protected:
 
   //! The real representation of all arrays.
   class ArrayRep
@@ -286,34 +284,34 @@ public:
     Array<T> retval (*this);
     if (dimensions.length () != 2)
       retval.dimensions = dimensions.redim (2);
 
     return retval;
   }
 
   //! @name First dimension
-  //! 
+  //!
   //! Get the first dimension of the array (number of rows)
   //@{
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type rows (void) const { return dim1 (); }
   //@}
 
   //! @name Second dimension
   //!
   //! Get the second dimension of the array (number of columns)
   //@{
   octave_idx_type dim2 (void) const { return dimensions(1); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
   //@}
 
   //! @name Third dimension
-  //! 
+  //!
   //! Get the third dimension of the array (number of pages)
   //@{
   octave_idx_type dim3 (void) const { return dimensions(2); }
   octave_idx_type pages (void) const { return dim3 (); }
   //@}
 
   size_t byte_size (void) const
   { return static_cast<size_t> (numel ()) * sizeof (T); }
@@ -479,32 +477,25 @@ public:
 
   Array<T> index (const Array<idx_vector>& ia) const;
   //@}
 
   virtual T resize_fill_value (void) const;
 
   //@{
   //! Resizing (with fill).
-  void resize1 (octave_idx_type n, const T& rfv);
-  void resize1 (octave_idx_type n) { resize1 (n, resize_fill_value ()); }
-
-  void resize (octave_idx_type n) GCC_ATTR_DEPRECATED { resize1 (n); }
-
-  void resize (octave_idx_type nr, octave_idx_type nc,
-               const T& rfv) GCC_ATTR_DEPRECATED
-  {
-    resize2 (nr, nc, rfv);
-  }
-
-  void resize (octave_idx_type nr, octave_idx_type nc) GCC_ATTR_DEPRECATED
+  void resize2 (octave_idx_type nr, octave_idx_type nc, const T& rfv);
+  void resize2 (octave_idx_type nr, octave_idx_type nc)
   {
     resize2 (nr, nc, resize_fill_value ());
   }
 
+  void resize1 (octave_idx_type n, const T& rfv);
+  void resize1 (octave_idx_type n) { resize1 (n, resize_fill_value ()); }
+
   void resize (const dim_vector& dv, const T& rfv);
   void resize (const dim_vector& dv) { resize (dv, resize_fill_value ()); }
   //@}
 
   //@{
   //! Indexing with possible resizing and fill
 
   // FIXME -- this is really a corner case, that should better be
@@ -725,34 +716,27 @@ public:
 
   //! Returns true if this->dims () == dv, and if so, replaces this->dimensions
   //! by a shallow copy of dv. This is useful for maintaining several arrays with
   //! supposedly equal dimensions (e.g. structs in the interpreter).
   bool optimize_dimensions (const dim_vector& dv);
 
   //@{
   //! WARNING: Only call these functions from jit
-  
+
   int *jit_ref_count (void) { return rep->count.get (); }
 
   T *jit_slice_data (void) const { return slice_data; }
 
   octave_idx_type *jit_dimensions (void) const { return dimensions.to_jit (); }
 
   void *jit_array_rep (void) const { return rep; }
   //@}
 
 private:
-
-  void resize2 (octave_idx_type nr, octave_idx_type nc, const T& rfv);
-  void resize2 (octave_idx_type nr, octave_idx_type nc)
-  {
-    resize2 (nr, nc, resize_fill_value ());
-  }
-
   static void instantiation_guard ();
 };
 
 //! This is a simple wrapper template that will subclass an Array<T>
 //! type or any later type derived from it and override the default
 //! non-const operator() to not check for the array's uniqueness. It
 //! is, however, the user's responsibility to ensure the array is
 //! actually unaliased whenever elements are accessed.
diff --git a/liboctave/array/chNDArray.cc b/liboctave/array/chNDArray.cc
--- a/liboctave/array/chNDArray.cc
+++ b/liboctave/array/chNDArray.cc
@@ -35,46 +35,43 @@ along with Octave; see the file COPYING.
 #include "mx-op-defs.h"
 #include "str-vec.h"
 
 #include "bsxfun-defs.cc"
 
 charNDArray::charNDArray (char c)
   : Array<char> ()
 {
-  octave_idx_type nc = 1;
-  octave_idx_type nr = 1;
+  octave_idx_type n = 1;
 
-  resize (nr, nc);
+  resize1 (n);
 
-  elem (0, 0) = c;
+  elem (0) = c;
 }
 
 charNDArray::charNDArray (const char *s)
   : Array<char> ()
 {
-  octave_idx_type nc = s ? strlen (s) : 0;
-  octave_idx_type nr = s && nc > 0 ? 1 : 0;
+  octave_idx_type n = s ? strlen (s) : 0;
 
-  resize (nr, nc);
+  resize1 (n);
 
-  for (octave_idx_type i = 0; i < nc; i++)
-    elem (0, i) = s[i];
+  for (octave_idx_type i = 0; i < n; i++)
+    elem (i) = s[i];
 }
 
 charNDArray::charNDArray (const std::string& s)
   : Array<char> ()
 {
-  octave_idx_type nc = s.length ();
-  octave_idx_type nr = nc > 0 ? 1 : 0;
+  octave_idx_type n = s.length ();
 
-  resize (nr, nc);
+  resize1 (n);
 
-  for (octave_idx_type i = 0; i < nc; i++)
-    elem (0, i) = s[i];
+  for (octave_idx_type i = 0; i < n; i++)
+    elem (i) = s[i];
 }
 
 charNDArray::charNDArray (const string_vector& s, char fill_value)
   : Array<char> (dim_vector (s.length (), s.max_length ()), fill_value)
 {
   octave_idx_type nr = rows ();
 
   for (octave_idx_type i = 0; i < nr; i++)
