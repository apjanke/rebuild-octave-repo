# HG changeset patch
# User jwe
# Date 824077839 0
#      Sun Feb 11 22:30:39 1996 +0000
# Node ID d20ab06301e8e7ace00858cda8860da8fb17c26b
# Parent  908f5b6676d721c2689ca8c60b4e4ffd245868aa
[project @ 1996-02-11 22:30:18 by jwe]

diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -65,30 +65,31 @@ ComplexSCHUR::init (const ComplexMatrix&
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
 	("ComplexSCHUR requires square matrix");
       return -1;
     }
 
-  char *jobvs = "V";
-  char *sense = "N";
-  char *sort = "N";
+  char jobvs = 'V';
+  char sense = 'N';
+  char sort = 'N';
 
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
-    sort = "S";
+    sort = 'S';
 
-  select_function selector= 0;
   if (ord_char == 'A' || ord_char == 'a')
     selector = select_ana;
   else if (ord_char == 'D' || ord_char == 'd')
     selector = select_dig;
+  else
+    selector = 0;
 
   int n = a_nc;
   int lwork = 8 * n;
   int info;
   int sdim;
   double rconde;
   double rcondv;
 
@@ -111,17 +112,17 @@ ComplexSCHUR::init (const ComplexMatrix&
 
   Array<int> bwork;
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     bwork.resize (n);
 
   int *pbwork = bwork.fortran_vec ();
 
-  F77_XFCN (zgeesx, ZGEESX, (jobvs, sort, selector, sense, n, s, n,
+  F77_XFCN (zgeesx, ZGEESX, (&jobvs, &sort, selector, &sense, n, s, n,
 			     sdim, pw, q, n, rconde, rcondv, pwork,
 			     lwork, prwork, pbwork, info, 1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeesx");
 
   return info;
 }
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -77,16 +77,18 @@ public:
 
   typedef int (*select_function) (const Complex&);
 
 private:
 
   ComplexMatrix schur_mat;
   ComplexMatrix unitary_mat;
 
+  select_function selector;
+
   int init (const ComplexMatrix& a, const string& ord);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -78,70 +78,77 @@ ComplexSVD::init (const ComplexMatrix& a
   int m = a.rows ();
   int n = a.cols ();
 
   Complex *tmp_data = dup (a.data (), a.length ());
 
   int min_mn = m < n ? m : n;
   int max_mn = m > n ? m : n;
 
-  char *jobu = "A";
-  char *jobv = "A";
+  char jobu = 'A';
+  char jobv = 'A';
 
   int ncol_u = m;
   int nrow_vt = n;
   int nrow_s = m;
   int ncol_s = n;
 
   switch (svd_type)
     {
     case SVD::economy:
-      jobu = jobv ="S";
+      jobu = jobv = 'S';
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
-      jobu = jobv ="N";
+      jobu = jobv = 'N';
       ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  Complex *u = (*jobu == 'N' ? 0 : new Complex[m * ncol_u]);
-  double *s_vec  = new double[min_mn];
-  Complex *vt = (*jobv == 'N' ? 0 : new Complex[nrow_vt * n]);
+  if (jobu != 'N')
+    left_sm.resize (m, ncol_u);
+
+  Complex *u = left_sm.fortran_vec ();
+
+  sigma.resize (nrow_s, ncol_s);
+  double *s_vec = sigma.fortran_vec ();
+
+  if (jobv != 'N')
+    right_sm.resize (nrow_vt, n);
+
+  Complex *vt = right_sm.fortran_vec ();
 
   int lwork = 2*min_mn + max_mn;
-  Complex *work = new Complex[lwork];
+
+  Array<Complex> work (lwork);
+  Complex *pwork = work.fortran_vec ();
 
   int lrwork = 5*max_mn;
-  double *rwork = new double[lrwork];
+
+  Array<double> rwork (lrwork);
+  double *prwork = rwork.fortran_vec ();
 
-  F77_FCN (zgesvd, ZGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
-			    m, vt, nrow_vt, work, lwork, rwork, info,
-			    1L, 1L);
-
-  if (*jobu != 'N')
-    left_sm = ComplexMatrix (u, m, ncol_u);
+  F77_XFCN (zgesvd, ZGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec, u,
+			     m, vt, nrow_vt, pwork, lwork, prwork, info,
+			     1L, 1L));
 
-  sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
-
-  if (*jobv != 'N')
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in zgesvd");
+  else
     {
-      ComplexMatrix vt_m (vt, nrow_vt, n);
-      right_sm = vt_m.hermitian ();
+      if (jobv != 'N')
+	right_sm = right_sm.hermitian ();
     }
 
-  delete [] tmp_data;
-  delete [] work;
-
   return info;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -61,16 +61,18 @@ public:
 	{
 	  sigma = a.sigma;
 	  left_sm = a.left_sm;
 	  right_sm = a.right_sm;
 	}
       return *this;
     }
 
+  ~ComplexSVD (void) { }
+
   DiagMatrix singular_values (void) const { return sigma; }
 
   ComplexMatrix left_singular_matrix (void) const;
 
   ComplexMatrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const ComplexSVD& a);
 
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -66,30 +66,31 @@ SCHUR::init (const Matrix& a, const stri
   int a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("SCHUR requires square matrix");
       return -1;
     }
 
-  char *jobvs = "V";
-  char *sense = "N";
-  char *sort = "N";
+  char jobvs = 'V';
+  char sense = 'N';
+  char sort = 'N';
 
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
-    sort = "S";
+    sort = 'S';
 
-  select_function selector = 0;
   if (ord_char == 'A' || ord_char == 'a')
     selector = select_ana;
   else if (ord_char == 'D' || ord_char == 'd')
     selector = select_dig;
+  else
+    selector = 0;
 
   int n = a_nc;
   int lwork = 8 * n;
   int liwork = 1;
   int info;
   int sdim;
   double rconde;
   double rcondv;
@@ -119,17 +120,17 @@ SCHUR::init (const Matrix& a, const stri
       bwork.resize (n);
       iwork.resize (liwork);
     }
 
   int *pbwork = bwork.fortran_vec ();
   int *piwork = iwork.fortran_vec ();
 
 
-  F77_XFCN (dgeesx, DGEESX, (jobvs, sort, selector, sense, n, s,
+  F77_XFCN (dgeesx, DGEESX, (&jobvs, &sort, selector, &sense, n, s,
 			     n, sdim, pwr, pwi, q, n, rconde, rcondv,
 			     pwork, lwork, piwork, liwork, pbwork,
 			     info, 1L, 1L));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeesx");
 
   return info;
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -77,16 +77,18 @@ public:
 
   typedef int (*select_function) (const double&, const double&);
 
 private:
 
   Matrix schur_mat;
   Matrix unitary_mat;
 
+  select_function selector;
+
   int init (const Matrix& a, const string& ord);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -73,74 +73,80 @@ SVD::right_singular_matrix (void) const
 int
 SVD::init (const Matrix& a, SVD::type svd_type)
 {
   int info;
 
   int m = a.rows ();
   int n = a.cols ();
 
-  double *tmp_data = dup (a.data (), a.length ());
+  Matrix atmp = a;
+  double *tmp_data = atmp.fortran_vec ();
 
   int min_mn = m < n ? m : n;
   int max_mn = m > n ? m : n;
 
-  char *jobu = "A";
-  char *jobv = "A";
+  char jobu = 'A';
+  char jobv = 'A';
 
   int ncol_u = m;
   int nrow_vt = n;
   int nrow_s = m;
   int ncol_s = n;
 
   switch (svd_type)
     {
     case SVD::economy:
-      jobu = jobv ="S";
+      jobu = jobv = 'S';
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
-      jobu = jobv ="N";
+      jobu = jobv = 'N';
       ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  double *u = (*jobu == 'N' ? 0 : new double[m * ncol_u]);
-  double *s_vec  = new double[min_mn];
-  double *vt = (*jobv == 'N' ? 0 : new double[nrow_vt * n]);
+  if (jobu != 'N')
+    left_sm.resize (n, ncol_u);
+
+  double *u = left_sm.fortran_vec ();
+
+  sigma.resize (nrow_s, ncol_s);
+  double *s_vec  = sigma.fortran_vec ();
+
+  if (jobv != 'N')
+    right_sm.resize (nrow_vt, n);
+
+  double *vt = right_sm.fortran_vec ();
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
-  double *work = new double[lwork];
+
+  Array<double> work (lwork);
+  double *pwork = work.fortran_vec ();
 
-  F77_FCN (dgesvd, DGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
-			    m, vt, nrow_vt, work, lwork, info, 1L,
-			    1L);
-
-  if (*jobu != 'N')
-    left_sm = Matrix (u, m, ncol_u);
+  F77_XFCN (dgesvd, DGESVD, (&jobu, &jobv, m, n, tmp_data, m, s_vec,
+			     u, m, vt, nrow_vt, pwork, lwork, info,
+			     1L, 1L));
 
-  sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
-
-  if (*jobv != 'N')
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in dgesvd");
+  else
     {
-      Matrix vt_m (vt, nrow_vt, n);
-      right_sm = vt_m.transpose ();
+      if (jobv != 'N')
+	right_sm = right_sm.transpose ();
     }
 
-  delete [] tmp_data;
-  delete [] work;
-
   return info;
 }
 
 ostream&
 operator << (ostream& os, const SVD& a)
 {
   os << a.left_singular_matrix () << "\n";
   os << a.singular_values () << "\n";
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -64,16 +64,18 @@ public:
 	  sigma = a.sigma;
 	  left_sm = a.left_sm;
 	  right_sm = a.right_sm;
 	}
 
       return *this;
     }
 
+  ~SVD (void) { }
+
   DiagMatrix singular_values (void) const { return sigma; }
 
   Matrix left_singular_matrix (void) const;
 
   Matrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const SVD& a);
 
