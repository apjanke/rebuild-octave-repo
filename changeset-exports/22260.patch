# HG changeset patch
# User Rik <rik@octave.org>
# Date 1470885459 25200
#      Wed Aug 10 20:17:39 2016 -0700
# Node ID 93d475551be2b1a538e327fca2d18f58f30c3372
# Parent  22f45a6b4693da0aeda320d790be561eda70bb5a
material.m: Stop creation of blank figures until after input validation.

* material.m: Don't call gca until after all input validation has occurred.

diff --git a/scripts/plot/appearance/material.m b/scripts/plot/appearance/material.m
--- a/scripts/plot/appearance/material.m
+++ b/scripts/plot/appearance/material.m
@@ -74,23 +74,22 @@
 function retval = material (varargin)
 
   if (! ((nargout == 0 && (nargin == 1 || nargin == 2)) ||
          (nargout == 1 && (nargin == 0 || nargin == 1))) )
     print_usage ();
   endif
 
   ## resolve input
+  h = [];
   if (nargout == 0)
     ## Check whether first argument is list of graphics handles.
     if (all (ishandle (varargin{1})))
       h = varargin{1};
       varargin(1) = [];
-    else
-      h = gca ();
     endif
 
     ## There must be one (additional) argument.
     if (numel (varargin) != 1)
       if (nargin == 2)
         error (["material: When called with two arguments, the first argument " ...
                 "must be a list of handles to graphics objects."]);
       else
@@ -168,16 +167,19 @@ function retval = material (varargin)
         scr = mtype(5);
       endif
     endif
 
   else
     error ("material: MTYPE must be a named material or a vector");
   endif
 
+  if (isempty (h))
+    h = gca ();
+  endif
   ## find all patch and surface objects in current axes
   hps = findobj (h, "Type", "patch", "-or", "Type", "surface");
 
   ## set properties
   set (hps,
        "ambientstrength", as, "diffusestrength", ds, "specularstrength", ss);
 
   if (! isempty (se))
@@ -291,58 +293,22 @@ endfunction
 ## Test input validation
 %!error <Invalid call to material> material ()
 %!error <Invalid call to material> material (-1, 2, 3)
 %!error <Invalid call to material> a = material (-1)
 %!error <Invalid call to material> a = material (-1, 2)
 %!error <Invalid call to material> a = material ({})
 %!error <Invalid call to material> a = material ([.3 .4 .5])
 %!error <Invalid call to material> [a, b] = material ()
-
-## Test error handling, all following errors require a figure
-%!error <first argument must be a list of handles>
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   material (-1, "metal")
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
-
-%!error <unknown material type 'foo'>
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   material foo
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
+%!error <first argument must be a list of handles> material (-1, "metal")
+%!error <unknown material type 'foo'> material foo
+%!error <incorrect number of elements in material vector> material (-1)
+%!error <incorrect number of elements in material vector> material ([1 2 3 4 5 6])
+%!error <MTYPE must be a named material or a vector> material ({})
 
-%!error <incorrect number of elements in material vector>
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   material (-1)
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
-
-%!error <incorrect number of elements in material vector>
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   material ([1 2 3 4 5 6])
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
-
-%!error <MTYPE must be a named material or a vector>
-%! hf = figure ("visible", "off");
-%! unwind_protect
-%!   material ({})
-%! unwind_protect_cleanup
-%!   close (hf);
-%! end_unwind_protect
-
-%!error <Invalid call to material.>
+%!error <Invalid call to material.> 
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   material (hf);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
