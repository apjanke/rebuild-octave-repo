# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231785132 18000
#      Mon Jan 12 13:32:12 2009 -0500
# Node ID 866492035ecf79b2435d1ca8d5ff98e13bce77d6
# Parent  77b8d4aa2743699cc3419cd480a78401262d48b1
fsolve.m, fzero.m: undo part of previous change

diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -114,17 +114,17 @@ function [x, fvec, info, output, fjac] =
       nfev += 1 + length (x);
     endif
     fsiz = size (fvec);
     fvec = fvec(:);
     fn = norm (fvec);
     m = length (fvec);
     n = length (x);
     if (m < n)
-      error ("fsolve: cannot solve underdetermined systems");
+      error ("fsolve:under", "cannot solve underdetermined systems");
     elseif (m > n && niter == 1)
       if (isempty (optimget (options, "TolFun")))
 	warning ("an overdetermined system cannot usually be solved exactly; consider specifying the TolFun option");
       endif
     endif
     
     ## get QR factorization of the jacobian
     if (pivoting)
@@ -277,19 +277,19 @@ function [x, fvec, info, output, fjac] =
 
 endfunction
 
 ## An assistant function that evaluates a function handle and checks for
 ## bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
   if (! all (isreal (fx)))
-    error ("fsolve: non-real value encountered"); 
+    error ("fsolve:notreal", "fsolve: non-real value encountered"); 
   elseif (any (isnan (fx)))
-    error ("fsolve: NaN value encountered"); 
+    error ("fsolve:isnan", "fsolve: NaN value encountered"); 
   endif
 endfunction
 
 %!function retval = f (p) 
 %!  x = p(1);
 %!  y = p(2);
 %!  z = p(3);
 %!  retval = zeros (3, 1);
@@ -356,9 +356,8 @@ endfunction
 %! 2.395931;
 %! 2.005014 ];
 %! tol = 1.0e-5;
 %! opt = optimset ("Pivoting", true);
 %! [x, fval, info] = fsolve (@f, [ 0.5; 2.0; 2.5 ], opt);
 %! assert (info > 0);
 %! assert (norm (x - x_opt, Inf) < tol);
 %! assert (norm (fval) < tol);
-
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -119,17 +119,17 @@ function [x, fval, info, output] = fzero
     b = u;
  
     fu = fa;
     fa = fb;
     fb = fu;
   endif
 
   if (! (sign (fa) * sign (fb) <= 0))
-    error ("fzero: not a valid initial bracketing");
+    error ("fzero:bracket", "fzero: not a valid initial bracketing");
   endif
 
   itype = 1;
 
   if (abs (fa) < abs (fb))
     u = a; fu = fa;
   else
     u = b; fu = fb;
@@ -237,17 +237,17 @@ function [x, fval, info, output] = fzero
       d = a; fd = fa;
       a = c; fa = fc;
     elseif (fc == 0)
       a = b = c; fa = fb = fc;
       info = 1;
       break;
     else
       ## this should never happen.
-      error ("fzero: zero point is not bracketed");
+      error ("fzero:bracket", "fzero: zero point is not bracketed");
     endif
 
     ## if there's an output function, use it now
     if (outfcn)
       optv.funccount = niter + 2;
       optv.fval = fval;
       optv.iteration = niter;
       if (outfcn (x, optv, "iter"))
@@ -283,16 +283,16 @@ function [x, fval, info, output] = fzero
 endfunction
 
 ## an assistant function that evaluates a function handle and checks for
 ## bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
   fx = fx(1);
   if (! isreal (fx))
-    error ("fzero: non-real value encountered"); 
+    error ("fzero:notreal", "fzero: non-real value encountered"); 
   elseif (isnan (fx))
-    error ("fzero: NaN value encountered"); 
+    error ("fzero:isnan", "fzero: NaN value encountered"); 
   endif
 endfunction
 
 %!assert(fzero(@cos, [0, 3]), pi/2, 10*eps)
 %!assert(fzero(@(x) x^(1/3) - 1e-8, [0,1]), 1e-24, 1e-22*eps)
