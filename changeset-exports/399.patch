# HG changeset patch
# User jwe
# Date 765932488 0
#      Sat Apr 09 23:01:28 1994 +0000
# Node ID e3228e053d063ce2293ff32faee0009be53c971d
# Parent  167ea9ebd5a092d2a837c69fd215716835aa3580
[project @ 1994-04-09 23:01:20 by jwe]

diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -72,31 +72,34 @@ class idx_vector;
 // nr, and nc must not be previously declared, and they must not be
 // expressions.  Since only one of the matrices will be defined after
 // this macro is used, only one set of dimesions is declared.
 
 // This macro only makes sense inside a friend or member function of
 // the tree_constant_rep class
 
 #define REP_RHS_MATRIX(tc,m,cm,nr,nc) \
-  int nr, nc; \
+  int nr = 0; \
+  int nc = 0; \
   Matrix m; \
   ComplexMatrix cm; \
   if ((tc).const_type () == tree_constant_rep::complex_matrix_constant) \
     { \
       cm = (tc).complex_matrix_value (); \
       nr = (cm).rows (); \
       nc = (cm).columns (); \
     } \
-  else \
+  else if ((tc).const_type () == tree_constant_rep::matrix_constant) \
     { \
       m = (tc).matrix_value (); \
       nr = (m).rows (); \
       nc = (m).columns (); \
-    }
+    } \
+  else \
+    abort ();
 
 // Assign a real or complex value to a tree_constant.
 //
 // This macro only makes sense inside a friend or member function of
 // the tree_constant_rep class.
 
 #define REP_ELEM_ASSIGN(i,j,rval,cval,real_type) \
   do \
@@ -124,27 +127,21 @@ class idx_vector;
 
 // This macro only makes sense inside a friend or member function of
 // the tree_constant_rep class.
 
 #define CRMATRIX(m,cm,nr,nc) \
   Matrix m; \
   ComplexMatrix cm; \
   if (type_tag == tree_constant_rep::matrix_constant) \
-    { \
-      (m).resize ((nr), (nc)); \
-    } \
+    (m).resize ((nr), (nc)); \
   else if (type_tag == complex_matrix_constant) \
-    { \
-      (cm).resize ((nr), (nc)); \
-    } \
+    (cm).resize ((nr), (nc)); \
   else \
-    { \
-      abort (); \
-    }
+    abort (); \
 
 // Assign a real or complex matrix to a tree constant.
 
 // This macro only makes sense inside a friend or member function of
 // the tree_constant_rep class.
 
 #define ASSIGN_CRMATRIX_TO(tc,m,cm) \
   do \
diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -1,12 +1,12 @@
 // tc-assign.cc                                         -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -279,30 +279,46 @@ tree_constant_rep::fortran_style_matrix_
 	Matrix mi = tmp_i.matrix_value ();
 	int len = nr * nc;
 	idx_vector ii (mi, 1, "", len);  // Always do fortran indexing here...
 	if (! ii)
 	  return;
 
 	if (nr <= 1 || nc <= 1)
 	  {
-	    maybe_resize (ii.max () - 1);
+	    maybe_resize (ii.max ());
 	    if (error_state)
 	      return;
 	  }
-	else if (range_max_check (ii.max () - 1, len) < 0)
+	else if (range_max_check (ii.max (), len) < 0)
 	  return;
 
-	if (ii.capacity () != rhs_nr * rhs_nc)
+	int ilen = ii.capacity ();
+
+	if (ilen != rhs_nr * rhs_nc)
 	  {
 	    ::error ("A(matrix) = X: X and matrix must have the same number");
 	    ::error ("of elements"); 
-	    return;
 	  }
-	fortran_style_matrix_assignment (rhs, ii);
+	else if (ilen == 1 && rhs.is_scalar_type ())
+	  {
+	    int nr = rows ();
+	    int idx = ii.elem (0);
+	    int ii = fortran_row (idx + 1, nr) - 1;
+	    int jj = fortran_column (idx + 1, nr) - 1;
+
+	    if (rhs.const_type () == scalar_constant)
+	      matrix->elem (ii, jj) = rhs.double_value ();
+	    else if (rhs.const_type () == complex_scalar_constant)
+	      complex_matrix->elem (ii, jj) = rhs.complex_value ();
+	    else
+	      panic_impossible ();
+	  }
+	else
+	  fortran_style_matrix_assignment (rhs, ii);
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       gripe_range_invalid ();
       break;
@@ -501,17 +517,55 @@ tree_constant_rep::do_vector_assign (tre
 
       if (nr == 1)
 	delete_columns (iv);
       else if (nc == 1)
 	delete_rows (iv);
       else
 	panic_impossible ();
     }
-  else
+  else if (rhs.is_scalar_type ())
+    {
+      int nr = rows ();
+      int nc = columns ();
+
+      if (iv.capacity () == 1)
+	{
+	  int idx = iv.elem (0);
+
+	  if (nr == 1)
+	    {
+	      REP_ELEM_ASSIGN (0, idx, rhs.double_value (),
+			       rhs.complex_value (), rhs.is_real_type ());
+	    }
+	  else if (nc == 1)
+	    {
+	      REP_ELEM_ASSIGN (idx, 0, rhs.double_value (),
+			       rhs.complex_value (), rhs.is_real_type ());
+	    }
+	  else
+	    panic_impossible ();
+	}
+      else
+	{
+	  if (nr == 1)
+	    {
+	      ::error ("A(matrix) = X: where A is a row vector, X must also be a");
+	      ::error ("row vector with the same number of elements as matrix");
+	    }
+	  else if (nc == 1)
+	    {
+	      ::error ("A(matrix) = X: where A is a column vector, X must also be a");
+	      ::error ("column vector with the same number of elements as matrix");
+	    }
+	  else
+	    panic_impossible ();
+	}
+    }
+  else if (rhs.is_matrix_type ())
     {
       REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
       int ilen = iv.capacity ();
       check_vector_assign (rhs_nr, rhs_nc, ilen, "matrix");
       if (error_state)
 	return;
 
@@ -538,16 +592,18 @@ tree_constant_rep::do_vector_assign (tre
 	{
 	  for (int i = 0; i < iv.capacity (); i++)
 	    REP_ELEM_ASSIGN (iv.elem (i), 0, rhs_m.elem (i, 0),
 			     rhs_cm.elem (i, 0), rhs.is_real_type ());
 	}
       else
 	panic_impossible ();
     }
+  else
+    panic_impossible ();
 }
 
 void
 tree_constant_rep::do_vector_assign (tree_constant& rhs, Range& ri)
 {
   if (rhs.is_zero_by_zero ())
     {
       int nr = rows ();
@@ -565,17 +621,35 @@ tree_constant_rep::do_vector_assign (tre
 
       if (nr == 1)
 	delete_columns (ri);
       else if (nc == 1)
 	delete_rows (ri);
       else
 	panic_impossible ();
     }
-  else
+  else if (rhs.is_scalar_type ())
+    {
+      int nr = rows ();
+      int nc = columns ();
+
+      if (nr == 1)
+	{
+	  ::error ("A(range) = X: where A is a row vector, X must also be a");
+	  ::error ("row vector with the same number of elements as range");
+	}
+      else if (nc == 1)
+	{
+	  ::error ("A(range) = X: where A is a column vector, X must also be a");
+	  ::error ("column vector with the same number of elements as range");
+	}
+      else
+	panic_impossible ();
+    }
+  else if (rhs.is_matrix_type ())
     {
       REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
       int ilen = ri.nelem ();
       check_vector_assign (rhs_nr, rhs_nc, ilen, "range");
       if (error_state)
 	return;
 
@@ -613,24 +687,25 @@ tree_constant_rep::do_vector_assign (tre
 	      int row = tree_to_mat_idx (tmp);
 	      REP_ELEM_ASSIGN (row, 0, rhs_m.elem (i, 0), rhs_cm.elem (i, 0),
 			       rhs.is_real_type ());
 	    }
 	}
       else
 	panic_impossible ();
     }
+  else
+    panic_impossible ();
 }
 
 void
 tree_constant_rep::fortran_style_matrix_assignment
   (tree_constant& rhs, tree_constant_rep::constant_type mci)
 {
-  assert (rhs.is_matrix_type ());
-  assert (mci == tree_constant_rep::magic_colon);
+  assert (rhs.is_matrix_type () && mci == tree_constant_rep::magic_colon);
 
   int nr = rows ();
   int nc = columns ();
 
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
   int rhs_size = rhs_nr * rhs_nc;
   if (rhs_size == 0)
@@ -1346,16 +1421,17 @@ tree_constant_rep::do_matrix_assignment 
 		   rhs.is_real_type ());
 }
 
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i,
 					 idx_vector& jv)
 {
   REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
+
   for (int j = 0; j < jv.capacity (); j++)
     REP_ELEM_ASSIGN (i, jv.elem (j), rhs_m.elem (0, j),
 		     rhs_cm.elem (0, j), rhs.is_real_type ());
 }
 
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs, int i, Range& rj)
 {
@@ -1388,17 +1464,17 @@ tree_constant_rep::do_matrix_assignment 
   else if (rhs.is_matrix_type ())
     {
       REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
       for (int j = 0; j < nc; j++)
 	REP_ELEM_ASSIGN (i, j, rhs_m.elem (0, j), rhs_cm.elem (0, j),
 			 rhs.is_real_type ());
     }
-  else if (rhs.const_type () == scalar_constant && nc == 1)
+  else if (rhs.is_scalar_type () && nc == 1)
     {
       REP_ELEM_ASSIGN (i, 0, rhs.double_value (),
 		       rhs.complex_value (), rhs.is_real_type ()); 
     }
   else
     panic_impossible ();
 }
   
@@ -1594,17 +1670,17 @@ tree_constant_rep::do_matrix_assignment 
   else if (rhs.is_matrix_type ())
     {
       REP_RHS_MATRIX (rhs, rhs_m, rhs_cm, rhs_nr, rhs_nc);
 
       for (int i = 0; i < nr; i++)
 	REP_ELEM_ASSIGN (i, j, rhs_m.elem (i, 0),
 			 rhs_cm.elem (i, 0), rhs.is_real_type ());
     }
-  else if (rhs.const_type () == scalar_constant && nr == 1)
+  else if (rhs.is_scalar_type () && nr == 1)
     {
       REP_ELEM_ASSIGN (0, j, rhs.double_value (),
 		       rhs.complex_value (), rhs.is_real_type ());
     }
   else
     panic_impossible ();
 }
 
