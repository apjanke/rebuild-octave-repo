# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274089979 -7200
#      Mon May 17 11:52:59 2010 +0200
# Node ID c170eb1c067f161c05121d6007c46ebddd46036b
# Parent  d1978e7364ad4309a86b3a5a8b34330b91a05c20
remove deprecated Array method

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -346,24 +346,16 @@ Array<T>::page (octave_idx_type k) const
     gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
 #endif
 
   return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
 }
 
 template <class T>
 Array<T>
-Array<T>::linearize (void) const
-{
-  octave_idx_type n = numel ();
-  return Array<T> (*this, dim_vector (n, 1), 0, n);
-}
-
-template <class T>
-Array<T>
 Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
 {
 #ifdef BOUNDS_CHECKING
   if (lo < 0)
     gripe_index_out_of_range (1, 1, lo+1, numel ());
   if (up > numel ())
     gripe_index_out_of_range (1, 1, up, numel ());
 #endif
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -418,19 +418,16 @@ public:
   // Fast extractors. All of these produce shallow copies.
   // Warning: none of these do check bounds, unless BOUNDS_CHECKING is on!
 
   // Extract column: A(:,k+1).
   Array<T> column (octave_idx_type k) const;
   // Extract page: A(:,:,k+1).
   Array<T> page (octave_idx_type k) const;
 
-  // Give this array as a column vector: A(:).
-  Array<T> linearize (void) const;
-
   // Extract a slice from this array as a column vector: A(:)(lo+1:up).
   // Must be 0 <= lo && up <= numel. May be up < lo.
   Array<T> linear_slice (octave_idx_type lo, octave_idx_type up) const;
 
   Array<T> reshape (octave_idx_type nr, octave_idx_type nc) const
     { return Array<T> (*this, nr, nc); }
 
   Array<T> reshape (const dim_vector& new_dims) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::linearize): Remove.
+	* Array.h (Array<T>::linearize): Remove decl.
+
 2010-05-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::lssolve): Remove warnings about rank.
 	* fMatrix.cc (FloatMatrix::lssolve): Ditto.
 	* CMatrix.cc (ComplexMatrix::lssolve): Ditto.
 	* fCMatrix.cc (FloatComplexMatrix::lssolve): Ditto.
 
 2010-05-11  Jaroslav Hajek  <highegg@gmail.com>
