# HG changeset patch
# User jwe
# Date 1159906076 0
#      Tue Oct 03 20:07:56 2006 +0000
# Node ID 068e52f1c005983f0492ab77a54590e01c0bd46a
# Parent  31bf61b463ce15bf63bd9511422a97007d4ee84c
[project @ 2006-10-03 20:07:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2006-10-03  David Bateman <dbateman@free.fr>
+
+	* MatrixType.cc (MatrixType::MatrixType): Avoid crash if np == 0
+	or p == 0.
+
 2006-10-02  John W. Eaton  <jwe@octave.org>
 
 	* dbleDET.cc (DET::initialize2): Ensure arg to log10 is double.
 	* CmplxDET.cc (ComplexDET::initialize2): Likewise.
 
 2006-09-22  David Bateman <dbateman@free.fr>
 
 	* MatrixType.h (MatrixType::MatrixType(const SparseComplexMatrix&)): 
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -842,17 +842,18 @@ MatrixType::MatrixType (const matrix_typ
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type np,
 			const octave_idx_type *p, bool _full)
   : typ (MatrixType::Unknown),
     sp_bandden (octave_sparse_params::get_key ("bandden")),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
-  if (t == MatrixType::Permuted_Upper || t == MatrixType::Permuted_Lower)
+  if ((t == MatrixType::Permuted_Upper || t == MatrixType::Permuted_Lower) &&
+      np > 0 && p != 0)
     {
       typ = t;
       nperm = np;
       perm = new octave_idx_type [nperm];
       for (octave_idx_type i = 0; i < nperm; i++)
 	perm[i] = p[i];
     }
   else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2006-10-03  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/luinc.cc (Fluinc): Avoid crash if SparseLU or
+	SparseComplexLU constructor fails.
+
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx):
 	Delete unused variable.
 
 2006-10-03  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in (OCT_LINK_DEPS) Include $(CAMD_LIBS) in the list.
 	(octave$(EXEEXT)): Include $(CAMD_LIBS) in link command.
 
diff --git a/src/DLD-FUNCTIONS/luinc.cc b/src/DLD-FUNCTIONS/luinc.cc
--- a/src/DLD-FUNCTIONS/luinc.cc
+++ b/src/DLD-FUNCTIONS/luinc.cc
@@ -163,51 +163,60 @@ are the same as for @dfn{lu}.\n\
 		    {
 		    case 0:
 		    case 1:
 		    case 2:
 		      {
 			SparseLU fact (sm, Qinit, thresh, true, droptol,
 				       milu, udiag);
 
-			SparseMatrix P = fact.Pr ();
-			SparseMatrix L = P.transpose () * fact.L ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (L, MatrixType 
-						  (MatrixType::Permuted_Lower, 
-						   sm_nr, fact.row_perm ()));
+			if (! error_state)
+			  {
+			    SparseMatrix P = fact.Pr ();
+			    SparseMatrix L = P.transpose () * fact.L ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (L, MatrixType 
+						      (MatrixType::Permuted_Lower, 
+						       sm_nr, fact.row_perm ()));
+			  }
 		      }
 		      break;
 
 		    case 3:
 		      {
 			SparseLU fact (sm, Qinit, thresh, true, droptol,
 				       milu, udiag);
 
-			retval(2) = fact.Pr ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (fact.L (),
-				  MatrixType (MatrixType::Lower));
+			if (! error_state)
+			  {
+			    retval(2) = fact.Pr ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (fact.L (),
+						      MatrixType (MatrixType::Lower));
+			  }
 		      }
 		      break;
 
 		    case 4:
 		    default:
 		      {
 			SparseLU fact (sm, Qinit, thresh, false, droptol,
 				       milu, udiag);
 
-			retval(3) = fact.Pc ();
-			retval(2) = fact.Pr ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (fact.L (),
-				  MatrixType (MatrixType::Lower));
+			if (! error_state)
+			  {
+			    retval(3) = fact.Pc ();
+			    retval(2) = fact.Pr ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (fact.L (),
+						      MatrixType (MatrixType::Lower));
+			  }
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else if (args(0).type_name () == "sparse complex matrix") 
 	    {
 	      SparseComplexMatrix sm = 
@@ -225,51 +234,61 @@ are the same as for @dfn{lu}.\n\
 		    {
 		    case 0:
 		    case 1:
 		    case 2:
 		      {
 			SparseComplexLU fact (sm, Qinit, thresh, true, 
 					      droptol, milu, udiag);
 
-			SparseMatrix P = fact.Pr ();
-			SparseComplexMatrix L = P.transpose () * fact.L ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (L, MatrixType 
-						  (MatrixType::Permuted_Lower, 
-						   sm_nr, fact.row_perm ()));
+
+			if (! error_state)
+			  {
+			    SparseMatrix P = fact.Pr ();
+			    SparseComplexMatrix L = P.transpose () * fact.L ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (L, MatrixType 
+						      (MatrixType::Permuted_Lower, 
+						       sm_nr, fact.row_perm ()));
+			  }
 		      }
 		      break;
 
 		    case 3:
 		      {
 			SparseComplexLU fact (sm, Qinit, thresh, true,
 					      droptol, milu, udiag);
 
-			retval(2) = fact.Pr ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (fact.L (),
-				  MatrixType (MatrixType::Lower));
+			if (! error_state)
+			  {
+			    retval(2) = fact.Pr ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (fact.L (),
+						      MatrixType (MatrixType::Lower));
+			  }
 		      }
 		      break;
 
 		    case 4:
 		    default:
 		      {
 			SparseComplexLU fact (sm, Qinit, thresh, false,
 					      droptol, milu, udiag);
 
-			retval(3) = fact.Pc ();
-			retval(2) = fact.Pr ();
-			retval(1) = octave_value (fact.U (),
-				  MatrixType (MatrixType::Upper));
-			retval(0) = octave_value (fact.L (),
-				  MatrixType (MatrixType::Lower));
+			if (! error_state)
+			  {
+			    retval(3) = fact.Pc ();
+			    retval(2) = fact.Pr ();
+			    retval(1) = octave_value (fact.U (),
+						      MatrixType (MatrixType::Upper));
+			    retval(0) = octave_value (fact.L (),
+						      MatrixType (MatrixType::Lower));
+			  }
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    error ("luinc: first argument must be sparse");
 	}
