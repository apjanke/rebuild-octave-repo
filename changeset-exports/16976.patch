# HG changeset patch
# User Rik <rik@octave.org>
# Date 1373751917 25200
#      Sat Jul 13 14:45:17 2013 -0700
# Node ID 13affad7347c268c1f54e03dfaa275b5a7a05932
# Parent  47cc8e3d9183b6070f2cbfab194806cc44102537
test.m: Use the syntax "BLOCK_NAME failed" for error/warnings blocks.

* scripts/testfun/test.m: Use the syntax "BLOCK_NAME failed" for error/warnings
blocks in analogy with 'test failed' for %!test blocks.

diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -387,17 +387,21 @@ function [__ret1, __ret2, __ret3, __ret4
 
     elseif (strcmp (__type, "error") || strcmp (__type, "warning"))
       __istest = 1;
       __warning = strcmp (__type, "warning");
       [__pattern, __id, __code] = getpattern (__code);
       if (__id)
         __patstr = ["id=",__id];
       else
-        __patstr = ["<",__pattern,">"];
+        if (! strcmp (__pattern, '.'))
+          __patstr = ["<",__pattern,">"];
+        else
+          __patstr = "an error";
+        endif
       endif
       try
         eval (sprintf ("function __test__(%s)\n%s\nendfunction",
                        __shared, __code));
       catch
         __success = 0;
         __msg = sprintf ("%stest failed: syntax error\n%s",
                          __signal_fail, lasterr ());
@@ -405,52 +409,54 @@ function [__ret1, __ret2, __ret3, __ret4
 
       if (__success)
         __success = 0;
         __warnstate = warning ("query", "quiet");
         warning ("on", "quiet");
         try
           eval (sprintf ("__test__(%s);", __shared));
           if (! __warning)
-            __msg = sprintf ("%sexpected %s but got no error\n",
+            __msg = sprintf ("%serror failed.\nExpected %s but got no error\n",
                              __signal_fail, __patstr);
           else
             if (! isempty (__id))
               [~, __err] = lastwarn;
               __mismatch = ! strcmp (__err, __id);
             else
               __err = trimerr (lastwarn, "warning");
               __mismatch = isempty (regexp (__err, __pattern, "once"));
             endif
             warning (__warnstate.state, "quiet");
             if (isempty (__err))
-              __msg = sprintf ("%sexpected %s but got no warning\n",
-                             __signal_fail, __patstr);
+              __msg = sprintf (["%swarning failed.\n" \
+                                "Expected %s but got no warning\n"],
+                               __signal_fail, __patstr);
             elseif (__mismatch)
-              __msg = sprintf ("%sexpected %s but got %s\n",
+              __msg = sprintf ("%serror failed.\nExpected %s but got <%s>\n",
                                __signal_fail, __patstr, __err);
             else
               __success = 1;
             endif
           endif
 
         catch
           if (! isempty (__id))
             [~, __err] = lasterr;
             __mismatch = ! strcmp (__err, __id);
           else
             __err = trimerr (lasterr, "error");
             __mismatch = isempty (regexp (__err, __pattern, "once"));
           endif
           warning (__warnstate.state, "quiet");
           if (__warning)
-            __msg = sprintf ("%sexpected warning %s but got error %s\n",
+            __msg = sprintf (["%swarning failed.\n" \
+                              "Expected warning %s but got error <%s>\n"],
                              __signal_fail, __patstr, __err);
           elseif (__mismatch)
-            __msg = sprintf ("%sexpected %s but got %s\n",
+            __msg = sprintf ("%serror failed.\nExpected %s but got <%s>\n",
                              __signal_fail, __patstr, __err);
           else
             __success = 1;
           endif
         end_try_catch
         clear __test__;
       endif
       ## Code already processed.
