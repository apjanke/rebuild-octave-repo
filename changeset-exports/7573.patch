# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204989277 18000
#      Sat Mar 08 10:14:37 2008 -0500
# Node ID 755bf7ecc29b4b4367c103ece4c80908abe5cb31
# Parent  85da2ab0c6fd626a891fdcb9185ba2d80f96ca0e
eliminate one_zero stuff from idx_vector

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2069,22 +2069,16 @@ Array<T>::index1 (idx_vector& idx_arg, i
       if (idx_arg.is_colon_equiv (len))
 	{
 	  retval = *this;
 	}
       else if (n == 0)
 	{
 	  retval.resize_no_fill (0);
 	}
-      else if (len == 1 && n > 1
-	       && idx_arg.one_zero_only ()
-	       && idx_arg.ones_count () == n)
-	{
-	  retval.resize_and_fill (n, elem (0));
-	}
       else
 	{
 	  retval.resize_no_fill (n);
 
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      octave_idx_type ii = idx_arg.elem (i);
 	      if (ii >= len)
@@ -2128,66 +2122,54 @@ Array<T>::index2 (idx_vector& idx_arg, i
       retval = Array<T> (*this, dim_vector (result_nr, result_nc));
     }
   else if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index1 (idx_arg, resize_ok);
 
       octave_idx_type len = tmp.length ();
 
-      if (len == 0 && idx_arg.one_zero_only ())
-	retval = Array<T> (tmp, dim_vector (0, 0));
-      else if (len >= idx_orig_dims.numel ())
+      if (len >= idx_orig_dims.numel ())
 	retval = Array<T> (tmp, idx_orig_dims);
     }
   else if (nr == 1 || nc == 1)
     {
       // If indexing a vector with a matrix, return value has same
       // shape as the index.  Otherwise, it has same orientation as
       // indexed object.
 
       Array<T> tmp = Array<T>::index1 (idx_arg, resize_ok);
 
       octave_idx_type len = tmp.length ();
 
-      if ((len != 0 && idx_arg.one_zero_only ())
-	  || idx_orig_rows == 1 || idx_orig_columns == 1)
+      if (idx_orig_rows == 1 || idx_orig_columns == 1)
 	{
 	  if (nr == 1)
 	    retval = Array<T> (tmp, dim_vector (1, len));
 	  else
 	    retval = Array<T> (tmp, dim_vector (len, 1));
 	}
       else if (len >= idx_orig_dims.numel ())
 	retval = Array<T> (tmp, idx_orig_dims);
     }
   else
     {
-      if (! (idx_arg.one_zero_only ()
-	     && idx_orig_rows == nr
-	     && idx_orig_columns == nc))
-	(*current_liboctave_warning_with_id_handler)
-	  ("Octave:fortran-indexing", "single index used for matrix");
+      (*current_liboctave_warning_with_id_handler)
+	("Octave:fortran-indexing", "single index used for matrix");
 
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
       idx_arg.freeze (nr * nc, "matrix", resize_ok);
 
       if (idx_arg)
 	{
 	  octave_idx_type result_nr = idx_orig_rows;
 	  octave_idx_type result_nc = idx_orig_columns;
 
-	  if (idx_arg.one_zero_only ())
-	    {
-	      result_nr = idx_arg.ones_count ();
-	      result_nc = (result_nr > 0 ? 1 : 0);
-	    }
-
 	  retval.resize_no_fill (result_nr, result_nc);
 
 	  octave_idx_type k = 0;
 	  for (octave_idx_type j = 0; j < result_nc; j++)
 	    {
 	      for (octave_idx_type i = 0; i < result_nr; i++)
 		{
 		  octave_idx_type ii = idx_arg.elem (k++);
@@ -2227,19 +2209,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
       // Fast magic colon processing.
 
       retval = Array<T> (*this, dim_vector (orig_len, 1));
     }
   else
     {
       bool vec_equiv = vector_equivalent (dv);
 
-      if (! vec_equiv
-	  && ! (ra_idx.is_colon ()
-		|| (ra_idx.one_zero_only () && idx_orig_dims == dv)))
+      if (! (vec_equiv || ra_idx.is_colon ()))
 	(*current_liboctave_warning_with_id_handler)
 	  ("Octave:fortran-indexing", "single index used for N-d array");
 
       octave_idx_type frozen_len
 	= ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
 	{
@@ -2257,24 +2237,16 @@ Array<T>::indexN (idx_vector& ra_idx, in
 		      result_dims(i) = frozen_len;
 		      break;
 		    }
 		}
 	    }
 	  else
 	    result_dims = idx_orig_dims;
 
-	  if (ra_idx.one_zero_only ())
-	    {
-	      result_dims.resize (2);
-	      octave_idx_type ntot = ra_idx.ones_count ();
-	      result_dims(0) = ntot;
-	      result_dims(1) = (ntot > 0 ? 1 : 0);
-	    }
-
 	  result_dims.chop_trailing_singletons ();
 
 	  retval.resize (result_dims);
 
 	  octave_idx_type n = result_dims.numel ();
 
 	  octave_idx_type k = 0;
 
@@ -3062,20 +3034,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else
 	{
-	  if (! (idx_i.is_colon ()
-		 || (idx_i.one_zero_only ()
-		     && idx_i.orig_rows () == lhs_nr
-		     && idx_i.orig_columns () == lhs_nc)))
+	  if (! idx_i.is_colon ())
 	    (*current_liboctave_warning_with_id_handler)
 	      ("Octave:fortran-indexing", "single index used for matrix");
 
 	  octave_idx_type len = idx_i.freeze (lhs_nr * lhs_nc, "matrix");
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
@@ -3177,19 +3146,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 
       retval = 0;
     }
   else if (n_idx == 1)
     {
       idx_vector iidx = idx(0);
       int iidx_is_colon = iidx.is_colon ();
 
-      if (! (iidx_is_colon
-	     || (iidx.one_zero_only ()
-		 && iidx.orig_dimensions () == lhs.dims ())))
+      if (! iidx_is_colon)
 	(*current_liboctave_warning_with_id_handler)
 	  ("Octave:fortran-indexing", "single index used for N-d array");
 
       octave_idx_type lhs_len = lhs.length ();
 
       octave_idx_type len = iidx.freeze (lhs_len, "N-d arrray");
 
       if (iidx)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2008-03-08  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse<T>::index, assign): Likewise.
+	* Array.cc (Array<T>::index1, Array<T>::index2, Array<T>::indexN,
+	assign2): Eliminate use of idx_vector::is_one_zero method.
+	* idx-vector.cc, idx-vector.h
+	(idx_vector::maybe_convert_one_zero_to_idx,
+	IDX_VEC_REP::maybe_convert_one_zero_to_idx): Delete unused function.
+	(IDX_VEC_REP::one_zero): Delete data member.
+	(IDX_VEC_REP::is_colon_equiv): Delete one_zero check.
+	(idx_vector::is_one_zero, IDX_VEC_REP::is_one_zero): Delete function.
+
 2008-03-07  John W. Eaton  <jwe@octave.org>
 
 	* idx-vector.cc (IDX_VEC_REP::idx_vector_rep (bool),
 	IDX_VEC_REP::idx_vector_rep (const boolNDArray&)):
 	Simply perform the equivalent of "find" on the bool argument here,
 	set one_zero to 0 and orig_dims to size of resulting index vector.
 	(IDX_VEC_REP::freeze): Don't call maybe_convert_one_zero_to_idx here.
 
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1509,19 +1509,17 @@ Sparse<T>::index (idx_vector& idx_arg, i
     {
       // You have to be pretty sick to get to this bit of code,
       // since you have a scalar stored as a sparse matrix, and
       // then want to make a dense matrix with sparse 
       // representation. Ok, we'll do it, but you deserve what 
       // you get!!
       octave_idx_type n = idx_arg.freeze (length (), "sparse vector", resize_ok);
       if (n == 0)
-	if (idx_arg.one_zero_only ())
-	  retval = Sparse<T> (dim_vector (0, 0));
-	else
+
 	  retval = Sparse<T> (idx_orig_dims);
       else if (nz < 1)
 	if (n >= idx_orig_dims.numel ())
 	  retval = Sparse<T> (idx_orig_dims);
 	else
 	  retval = Sparse<T> (dim_vector (n, 1));
       else if (n >= idx_orig_dims.numel ())
 	{
@@ -1573,18 +1571,17 @@ Sparse<T>::index (idx_vector& idx_arg, i
       octave_idx_type n = idx_arg.freeze (len, "sparse vector", resize_ok);
 
       if (n == 0)
 	if (nr == 1)
 	  retval = Sparse<T> (dim_vector (1, 0));
 	else
 	  retval = Sparse<T> (dim_vector (0, 1));
       else if (nz < 1)
-	if ((n != 0 && idx_arg.one_zero_only ())
-	    || idx_orig_rows == 1 || idx_orig_columns == 1)
+	if (idx_orig_rows == 1 || idx_orig_columns == 1)
 	  retval = Sparse<T> ((nr == 1 ? 1 : n), (nr == 1 ? n : 1));
 	else
 	  retval = Sparse<T> (idx_orig_dims);
       else
 	{
 
 	  octave_idx_type new_nzmx = 0;
 	  if (nr == 1)
@@ -1608,18 +1605,17 @@ Sparse<T>::index (idx_vector& idx_arg, i
 
 		      if (ridx(j) == ii)
 			new_nzmx++;
 		      if (ridx(j) >= ii)
 			break;
 		    }
 	      }
 
-	  if (idx_arg.one_zero_only () || idx_orig_rows == 1 || 
-	      idx_orig_columns == 1)
+	  if (idx_orig_rows == 1 || idx_orig_columns == 1)
 	    {
 	      if (nr == 1)
 		{
 		  retval = Sparse<T> (1, n, new_nzmx);
 		  octave_idx_type jj = 0;
 		  retval.xcidx(0) = 0;
 		  for (octave_idx_type i = 0; i < n; i++)
 		    {
@@ -1718,40 +1714,31 @@ Sparse<T>::index (idx_vector& idx_arg, i
 		      retval.xcidx(i/new_nr+1) = jj;
 		    }
 		}
 	    }
 	}
     }
   else
     {
-      if (! (idx_arg.one_zero_only ()
-	     && idx_orig_rows == nr
-	     && idx_orig_columns == nc))
-	(*current_liboctave_warning_with_id_handler) 
-	  ("Octave:fortran-indexing", "single index used for sparse matrix");
+      (*current_liboctave_warning_with_id_handler) 
+	("Octave:fortran-indexing", "single index used for sparse matrix");
 
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
       idx_arg.freeze (nr * nc, "matrix", resize_ok);
 
       if (idx_arg)
 	{
 	  octave_idx_type result_nr = idx_orig_rows;
 	  octave_idx_type result_nc = idx_orig_columns;
 
-	  if (idx_arg.one_zero_only ())
-	    {
-	      result_nr = idx_arg.ones_count ();
-	      result_nc = (result_nr > 0 ? 1 : 0);
-	    }
-
 	  if (nz < 1)
-	      retval = Sparse<T> (result_nr, result_nc);
+	    retval = Sparse<T> (result_nr, result_nc);
 	  else
 	    {
 	      // Count number of non-zero elements
 	      octave_idx_type new_nzmx = 0;
 	      octave_idx_type kk = 0;
 	      for (octave_idx_type j = 0; j < result_nc; j++)
 		{
 		  for (octave_idx_type i = 0; i < result_nr; i++)
@@ -3123,20 +3110,17 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 		lhs.maybe_delete_elements (idx_i);
 	      else if (! assign1 (lhs, rhs))
 		retval = 0;
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else
 	{
-	  if (! (idx_i.is_colon ()
-		 || (idx_i.one_zero_only ()
-		     && idx_i.orig_rows () == lhs_nr
-		     && idx_i.orig_columns () == lhs_nc)))
+	  if (! idx_i.is_colon ())
 	    (*current_liboctave_warning_with_id_handler)
 	      ("Octave:fortran-indexing", "single index used for matrix");
 
 	  octave_idx_type lhs_len = lhs.length ();
 
 	  octave_idx_type len = idx_i.freeze (lhs_nr * lhs_nc, "matrix");
 
 	  if (idx_i)
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -40,19 +40,18 @@ along with Octave; see the file COPYING.
 
 #define IDX_VEC_REP idx_vector::idx_vector_rep
 
 IDX_VEC_REP::idx_vector_rep (const IDX_VEC_REP& a)
   : data (0), len (a.len), num_zeros (a.num_zeros), num_ones (a.num_ones),
     range_base (a.range_base), range_step (a.range_step),
     max_val (a.max_val), min_val (a.min_val),
     frozen_at_z_len (a.frozen_at_z_len), frozen_len (a.frozen_len),
-    colon (a.colon), range(a.range), one_zero (a.one_zero),
-    initialized (a.initialized), frozen (a.frozen),
-    colon_equiv_checked (a.colon_equiv_checked),
+    colon (a.colon), range(a.range), initialized (a.initialized),
+    frozen (a.frozen), colon_equiv_checked (a.colon_equiv_checked),
     colon_equiv (a.colon_equiv), orig_dims (a.orig_dims)
 {
   if (len > 0)
     {
       if (! range)
 	{
 	  data = new octave_idx_type [len];
 
@@ -100,17 +99,17 @@ idx_is_inf_or_nan (double x)
 
   return retval;
 }
 
 IDX_VEC_REP::idx_vector_rep (const ColumnVector& v)
   : data (0), len (v.length ()), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0), count (1),
     frozen_at_z_len (0), frozen_len (0), colon (0), range(0),
-    one_zero (0), initialized (0), frozen (0), colon_equiv_checked (0),
+    initialized (0), frozen (0), colon_equiv_checked (0),
     colon_equiv (0), orig_dims (len, 1)
 {
   if (len == 0)
     {
       initialized = 1;
       return;
     }
   else
@@ -135,17 +134,17 @@ IDX_VEC_REP::idx_vector_rep (const Colum
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const NDArray& nda)
   : data (0), len (nda.length ()), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0), count (1),
     frozen_at_z_len (0), frozen_len (0), colon (0), range(0),
-    one_zero (0), initialized (0), frozen (0), colon_equiv_checked (0),
+    initialized (0), frozen (0), colon_equiv_checked (0),
     colon_equiv (0), orig_dims (nda.dims ())
 {
   if (len == 0)
     {
       initialized = 1;
       return;
     }
   else
@@ -171,17 +170,17 @@ IDX_VEC_REP::idx_vector_rep (const NDArr
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const Range& r)
   : data (0), len (r.nelem ()), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0), 
     count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-    range(1), one_zero (0), initialized (0), frozen (0),
+    range(1), initialized (0), frozen (0),
     colon_equiv_checked (0), colon_equiv (0), orig_dims (1, len)
 {
   if (len < 0)
     {
       (*current_liboctave_error_handler) ("invalid range used as index");
       return;
     }
   else if (len == 0)
@@ -201,18 +200,18 @@ IDX_VEC_REP::idx_vector_rep (const Range
     (*current_liboctave_error_handler)
       ("expecting integer index, found non integer Range");
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
   : data (0), len (1), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0), 
     count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-    range(1), one_zero (0), initialized (0), frozen (0),
-    colon_equiv_checked (0), colon_equiv (0), orig_dims (1, 1)
+    range(1), initialized (0), frozen (0), colon_equiv_checked (0),
+    colon_equiv (0), orig_dims (1, 1)
 {
   if (idx_is_inf_or_nan (d))
     return;
   else
     {
       bool conversion_error = false;
 
       range_base = tree_to_mat_idx (d, conversion_error);
@@ -224,57 +223,56 @@ IDX_VEC_REP::idx_vector_rep (double d)
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (octave_idx_type i)
   : data (0), len (1), num_zeros (0), num_ones (0),
     range_base (tree_to_mat_idx (i)), range_step (1), 
     max_val (0), min_val (0), count (1), frozen_at_z_len (0),
-    frozen_len (0), colon (0), range(1), one_zero (0),
-    initialized (0), frozen (0), colon_equiv_checked (0),
-    colon_equiv (0), orig_dims (1, 1)
+    frozen_len (0), colon (0), range(1), initialized (0),
+    frozen (0), colon_equiv_checked (0), colon_equiv (0), orig_dims (1, 1)
 {
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (char c)
   : data (0), len (0), num_zeros (0), num_ones (0), range_base (0),
     range_step (0), max_val (0), min_val (0), count (1),
     frozen_at_z_len (0), frozen_len (0), colon (1), range(0),
-    one_zero (0), initialized (0), frozen (0), colon_equiv_checked (0),
+    initialized (0), frozen (0), colon_equiv_checked (0),
     colon_equiv (0), orig_dims (0, 0)
 {
   assert (c == ':');
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (bool b)
   : data (0), len (b ? 1 : 0), num_zeros (0), num_ones (0), range_base (0),
     range_step (0), max_val (0), min_val (0), count (1),
     frozen_at_z_len (0), frozen_len (0), colon (0), range(0),
-    one_zero (0), initialized (0), frozen (0), colon_equiv_checked (0),
+    initialized (0), frozen (0), colon_equiv_checked (0),
     colon_equiv (0), orig_dims (len, len)
 {
   if (len == 0)
     initialized = 1;
   else
     {
       data = new octave_idx_type [len];
       data[0] = 0;
       init_state ();
     }
 }
 
 IDX_VEC_REP::idx_vector_rep (const boolNDArray& bnda)
   : data (0), len (bnda.nnz ()), num_zeros (0), num_ones (0),
     range_base (0), range_step (0), max_val (0), min_val (0),
     count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-    range(0), one_zero (0), initialized (0), frozen (0),
+    range(0), initialized (0), frozen (0),
     colon_equiv_checked (0), colon_equiv (0), orig_dims ()
 {
   if (len == 0)
     {
       orig_dims = dim_vector (0, 0);
       initialized = 1;
     }
   else
@@ -319,17 +317,16 @@ IDX_VEC_REP::operator = (const IDX_VEC_R
       range_base = a.range_base;
       range_step = a.range_step;
       max_val = a.max_val;
       min_val = a.min_val;
       frozen_at_z_len = a.frozen_at_z_len;
       frozen_len = a.frozen_len;
       colon = a.colon;
       range = a.range;
-      one_zero = a.one_zero;
       initialized = a.initialized;
       frozen = a.frozen;
       colon_equiv_checked = a.colon_equiv_checked;
       colon_equiv = a.colon_equiv;
       orig_dims = a.orig_dims;
     }
 
   return *this;
@@ -386,59 +383,16 @@ IDX_VEC_REP::init_state (void)
 	    min_val = data[i];
 	}
       while (++i < len);
     }
 
   initialized = 1;
 }
 
-void
-IDX_VEC_REP::maybe_convert_one_zero_to_idx (octave_idx_type z_len)
-{
-  if (one_zero && (z_len == len || z_len == 0))
-    {
-      if (num_ones == 0)
-	{
-	  len = 0;
-	  max_val = 0;
-	  min_val = 0;
-	  delete [] data;
-	  data = 0;
-	}
-      else
-	{
-	  assert (num_ones + num_zeros == len);
-
-	  octave_idx_type *new_data = new octave_idx_type [num_ones];
-	  octave_idx_type k = 0;
-	  for (octave_idx_type i = 0; i < len; i++)
-	    if (data[i] == 0)
-	      new_data[k++] = i;
-
-	  delete [] data;
-	  len = num_ones;
-	  data = new_data;
-
-	  min_val = max_val = data[0];
-
-	  octave_idx_type i = 0;
-	  do
-	    {
-	      if (data[i] > max_val)
-		max_val = data[i];
-
-	      if (data[i] < min_val)
-		min_val = data[i];
-	    }
-	  while (++i < len);
-	}
-    }
-}
-
 octave_idx_type
 IDX_VEC_REP::checkelem (octave_idx_type n) const
 {
   if (n < 0 || n >= len)
     {
       (*current_liboctave_error_handler) ("idx-vector: index out of range");
       return 0;
     }
@@ -500,21 +454,17 @@ IDX_VEC_REP::is_colon_equiv (octave_idx_
 	{
 	  colon_equiv = (range_base == 0
 			 && len == n
 			 && (range_step == 1
 			     || (range_step == -1 && sort_uniq)));
 	}
       else if (static_cast<octave_idx_type> (len) > 1)
 	{
-	  if (one_zero)
-	    {
-	      colon_equiv = (len == n && ones_count () == n);
-	    }
-	  else if (sort_uniq)
+	  if (sort_uniq)
 	    {
 	      octave_idx_type *tmp_data = copy_data (data, len);
 
 	      sort_data (tmp_data, len);
 
 	      octave_idx_type tmp_len = make_uniq (tmp_data, len);
 
 	      colon_equiv = (tmp_len == n
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -46,29 +46,29 @@ private:
   idx_vector_rep
   {
   public:
 
     idx_vector_rep (void)
       : data (0), len (0), num_zeros (0), num_ones (0),
         range_base (0), range_step (0), max_val (0),
 	min_val (0), count (1), frozen_at_z_len (0), frozen_len (0),
-	colon (0), range(0), one_zero (0), initialized (0), frozen (0),
+	colon (0), range(0), initialized (0), frozen (0),
 	colon_equiv_checked (0), colon_equiv (0), orig_dims () { }
 
     idx_vector_rep (const ColumnVector& v);
 
     idx_vector_rep (const NDArray& nda);
 
     template <class U>
     idx_vector_rep (const intNDArray<U>& inda)
       : data (0), len (inda.length ()), num_zeros (0), num_ones (0),
 	range_base (0), range_step (0), max_val (0), min_val (0),
         count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-        range(0), one_zero (0), initialized (0), frozen (0),
+        range(0), initialized (0), frozen (0),
         colon_equiv_checked (0), colon_equiv (0), orig_dims (inda.dims ())
     {
       if (len == 0)
 	{
 	  initialized = 1;
 	  return;
 	}
       else
@@ -92,17 +92,17 @@ private:
 
     idx_vector_rep (bool b);
 
     template <class U>
     idx_vector_rep (const octave_int<U>& i)
       : data (0), len (1), num_zeros (0), num_ones (0),
 	range_base (0), range_step (0), max_val (0), min_val (0),
         count (1), frozen_at_z_len (0), frozen_len (0), colon (0),
-        range(0), one_zero (0), initialized (0), frozen (0),
+        range(0), initialized (0), frozen (0),
         colon_equiv_checked (0), colon_equiv (0), orig_dims (1, 1)
     {
       data = new octave_idx_type [len];
 
       data[0] = tree_to_mat_idx (i);
 
       init_state ();
     }
@@ -126,17 +126,16 @@ private:
     }
 
     octave_idx_type checkelem (octave_idx_type n) const;
     octave_idx_type operator () (octave_idx_type n) const { return checkelem (n); }
 
     octave_idx_type max (void) const { return max_val; }
     octave_idx_type min (void) const { return min_val; }
 
-    int one_zero_only (void) const { return one_zero; }
     octave_idx_type zeros_count (void) const { return num_zeros; }
     octave_idx_type ones_count (void) const { return num_ones; }
 
     int is_colon (void) const { return colon; }
     int is_colon_equiv (octave_idx_type n, int sort_uniq);
 
     void sort (bool uniq);
 
@@ -166,28 +165,25 @@ private:
 
     int count;
 
     octave_idx_type frozen_at_z_len;
     octave_idx_type frozen_len;
 
     unsigned int colon : 1;
     unsigned int range : 1;
-    unsigned int one_zero : 1;
     unsigned int initialized : 1;
     unsigned int frozen : 1;
     unsigned int colon_equiv_checked : 1;
     unsigned int colon_equiv : 1;
 
     dim_vector orig_dims;
  
     void init_state (void);
 
-    void maybe_convert_one_zero_to_idx (octave_idx_type z_len);
-
     octave_idx_type tree_to_mat_idx (double x, bool& conversion_error);
 
     octave_idx_type tree_to_mat_idx (octave_idx_type i) { return i - 1; }
 
     template <class U> octave_idx_type tree_to_mat_idx (const octave_int<U>& i)
       { return i.value () - 1; }
   };
 
@@ -245,17 +241,17 @@ public:
 
   octave_idx_type elem (octave_idx_type n) const { return rep->elem (n); }
   octave_idx_type checkelem (octave_idx_type n) const { return rep->checkelem (n); }
   octave_idx_type operator () (octave_idx_type n) const { return rep->operator () (n); }
 
   octave_idx_type max (void) const { return rep->max (); }
   octave_idx_type min (void) const { return rep->min (); }
 
-  int one_zero_only (void) const { return rep->one_zero_only (); }
+  int one_zero_only (void) const { return 0; }
   octave_idx_type zeros_count (void) const { return rep->zeros_count (); }
   octave_idx_type ones_count (void) const { return rep->ones_count (); }
 
   int is_colon (void) const { return rep->is_colon (); }
   int is_colon_equiv (octave_idx_type n, int sort_uniq = 0) const
     { return rep->is_colon_equiv (n, sort_uniq); }
 
   void sort (bool uniq = false) { rep->sort (uniq); }
@@ -276,19 +272,16 @@ public:
   octave_idx_type freeze (octave_idx_type z_len, const char *tag, bool resize_ok = false)
     { return rep->freeze (z_len, tag, resize_ok); }
 
   std::ostream& print (std::ostream& os) const { return rep->print (os); }
 
   friend std::ostream& operator << (std::ostream& os, const idx_vector& a)
     { return a.print (os); }
 
-  void maybe_convert_one_zero_to_idx (octave_idx_type z_len)
-    { rep->maybe_convert_one_zero_to_idx (z_len); }
-
 private:
 
   idx_vector_rep *rep;
 
   void init_state (void) { rep->init_state (); }
 };
 
 #endif
