# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1424536315 18000
#      Sat Feb 21 11:31:55 2015 -0500
# Node ID f9ca80482c41c919855f48333fee86ce457e12e1
# Parent  f24d9486e66be4aaa461f759cc6aa9af5aee55cc
audiowrite: Scale integer inputs before writing to an audio file

* audioread.cc (Faudiowrite): Check for recognized integer input types
and scale accordingly to the range [-1,1] before writing.  Add clipping
of values outside the range [-1,1] after normalizing.

diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -306,33 +306,51 @@ Comment.\n\
   if (error_state)
     return retval;
 
   const Matrix audio = args(1).matrix_value ();
 
   if (error_state)
     return retval;
 
+  double bias = 0.0;
+  double scale = 1.0;
+
+  if (args(1).is_uint8_type ())
+    bias = scale = std::pow (2.0, 7);
+  else if (args(1).is_int16_type ())
+    scale = std::pow (2.0, 15);
+  else if (args(1).is_int32_type ())
+    scale = std::pow (2.0, 31);
+  else if (args(1).is_integer_type ())
+    {
+      gripe_wrong_type_arg ("audiowrite", args(1));
+      return retval;
+    }
+
   int samplerate = args(2).int_value ();
 
   if (error_state)
     return retval;
 
   std::string ext = filename.substr (filename.find_last_of (".") + 1);
   std::transform (ext.begin (), ext.end (), ext.begin (), ::tolower);
 
   sf_count_t items_to_write = audio.rows () * audio.columns ();
 
   OCTAVE_LOCAL_BUFFER (float, data, items_to_write);
 
   sf_count_t idx = 0;
   for (int i = 0; i < audio.rows (); i++)
     {
       for (int j = 0; j < audio.columns (); j++)
-        data[idx++] = audio.xelem (i, j);
+        {
+          double elem = (audio.xelem (i, j) - bias) / scale;
+          data[idx++] = std::min (std::max (elem, -1.0), 1.0);
+        }
     }
 
   SF_INFO info;
 
   memset (&info, 0, sizeof (info)) ;
 
   sf_count_t chunk_size = 0;
 
