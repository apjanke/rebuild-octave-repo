# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1415661080 0
#      Mon Nov 10 23:11:20 2014 +0000
# Node ID 50922b1c74df83761a2612e6c80715965c8c40ac
# Parent  3746b92739f748a4a9eb63376206c7c76f395d97
liboctave: confirm that matrices constructors are limited to 2 dimensions.

* liboctave/array/boolMatrix.h, liboctave/array/chMatrix.h
(boolMatrix::boolMatrix(dim_vector),boolMatrix::boolMatrix(dim_vector,bool),
charMatrix::charMatrix(dim_vector),charMatrix::charMatrix(dim_vector,char)):
call redim(2) on the dim_vector argument to the constructor, the same that
happens in the other typeMatrix classes.
* liboctave/array/fCMatrix.h: simplify code to reshape NDArray input into
matrix form (should have no effect).

diff --git a/liboctave/array/boolMatrix.h b/liboctave/array/boolMatrix.h
--- a/liboctave/array/boolMatrix.h
+++ b/liboctave/array/boolMatrix.h
@@ -39,19 +39,20 @@ public:
   boolMatrix (void) : boolNDArray () { }
 
   boolMatrix (octave_idx_type r, octave_idx_type c)
     : boolNDArray (dim_vector (r, c)) { }
 
   boolMatrix (octave_idx_type r, octave_idx_type c, bool val)
     : boolNDArray (dim_vector (r, c), val) { }
 
-  boolMatrix (const dim_vector& dv) : boolNDArray (dv) { }
+  boolMatrix (const dim_vector& dv) : boolNDArray (dv.redim (2)) { }
 
-  boolMatrix (const dim_vector& dv, bool val) : boolNDArray (dv, val) { }
+  boolMatrix (const dim_vector& dv, bool val)
+    : boolNDArray (dv.redim (2), val) { }
 
   boolMatrix (const Array<bool>& a) : boolNDArray (a.as_matrix ()) { }
 
   boolMatrix (const boolMatrix& a) : boolNDArray (a) { }
 
   bool operator == (const boolMatrix& a) const;
   bool operator != (const boolMatrix& a) const;
 
diff --git a/liboctave/array/chMatrix.h b/liboctave/array/chMatrix.h
--- a/liboctave/array/chMatrix.h
+++ b/liboctave/array/chMatrix.h
@@ -44,19 +44,20 @@ public:
   charMatrix (void) : charNDArray () { }
 
   charMatrix (octave_idx_type r, octave_idx_type c)
     : charNDArray (dim_vector (r, c)) { }
 
   charMatrix (octave_idx_type r, octave_idx_type c, char val)
     : charNDArray (dim_vector (r, c), val) { }
 
-  charMatrix (const dim_vector& dv) : charNDArray (dv) { }
+  charMatrix (const dim_vector& dv) : charNDArray (dv.redim (2)) { }
 
-  charMatrix (const dim_vector& dv, char val) : charNDArray (dv, val) { }
+  charMatrix (const dim_vector& dv, char val)
+    : charNDArray (dv.redim (2), val) { }
 
   charMatrix (const Array<char>& a) : charNDArray (a.as_matrix ()) { }
 
   charMatrix (const charMatrix& a) : charNDArray (a) { }
 
   charMatrix (char c) : charNDArray (c) {}
 
   charMatrix (const char *s) : charNDArray (s) {}
diff --git a/liboctave/array/fCMatrix.h b/liboctave/array/fCMatrix.h
--- a/liboctave/array/fCMatrix.h
+++ b/liboctave/array/fCMatrix.h
@@ -59,21 +59,21 @@ public:
   FloatComplexMatrix (const dim_vector& dv, const FloatComplex& val)
     : FloatComplexNDArray (dv.redim (2), val) { }
 
   FloatComplexMatrix (const FloatComplexMatrix& a)
     : FloatComplexNDArray (a) { }
 
   template <class U>
   FloatComplexMatrix (const MArray<U>& a)
-    : FloatComplexNDArray (a.reshape (a.dims ().redim (2))) { }
+    : FloatComplexNDArray (a.as_matrix ()) { }
 
   template <class U>
   FloatComplexMatrix (const Array<U>& a)
-    : FloatComplexNDArray (a.reshape (a.dims ().redim (2))) { }
+    : FloatComplexNDArray (a.as_matrix ()) { }
 
   explicit FloatComplexMatrix (const FloatMatrix& a);
 
   explicit FloatComplexMatrix (const FloatRowVector& rv);
 
   explicit FloatComplexMatrix (const FloatColumnVector& cv);
 
   explicit FloatComplexMatrix (const FloatDiagMatrix& a);
