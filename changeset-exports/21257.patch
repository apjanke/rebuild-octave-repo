# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455470533 28800
#      Sun Feb 14 09:22:13 2016 -0800
# Node ID af8118df8292158073998ab2d532049c1c4d42e7
# Parent  076876f0a83a251565bf8981f45042839057f81d
# Parent  a93fa1b0796e347fed23a9b2e650a57ac02dc3c2
maint: merge stable to default.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -810,32 +810,45 @@ Sparse<T>::reshape (const dim_vector& ne
           octave_idx_type new_nr = dims2 (0);
           octave_idx_type new_nc = dims2 (1);
           octave_idx_type old_nr = rows ();
           octave_idx_type old_nc = cols ();
           retval = Sparse<T> (new_nr, new_nc, new_nnz);
 
           octave_idx_type kk = 0;
           retval.xcidx (0) = 0;
+          // quotient and remainder of  i * old_nr divided by new_nr
+          // Track them individually to avoid overflow (bug #42850).
+          octave_idx_type i_old_qu = 0;
+          octave_idx_type i_old_rm = static_cast<octave_idx_type> (-old_nr);
           for (octave_idx_type i = 0; i < old_nc; i++)
-            for (octave_idx_type j = cidx (i); j < cidx (i+1); j++)
-              {
-                octave_idx_type tmp = i * old_nr + ridx (j);
-                if (tmp < 0)
-                  (*current_liboctave_error_handler)
-                    ("reshape: overflow in octave_idx_type prevents reshaping array");
-
-                octave_idx_type ii = tmp % new_nr;
-                octave_idx_type jj = (tmp - ii) / new_nr;
-                for (octave_idx_type k = kk; k < jj; k++)
-                  retval.xcidx (k+1) = j;
-                kk = jj;
-                retval.xdata (j) = data (j);
-                retval.xridx (j) = ii;
-              }
+            {
+              i_old_rm += old_nr;
+              if (i_old_rm >= new_nr)
+                {
+                  i_old_qu += i_old_rm / new_nr;
+                  i_old_rm = i_old_rm % new_nr;
+                }
+              for (octave_idx_type j = cidx (i); j < cidx (i+1); j++)
+                {
+                  octave_idx_type ii, jj;
+                  ii = (i_old_rm + ridx (j)) % new_nr;
+                  jj = i_old_qu + (i_old_rm + ridx (j)) / new_nr;
+
+                  // Original calculation subject to overflow
+                  // ii = (i*old_nr + ridx (j)) % new_nr
+                  // jj = (i*old_nr + ridx (j)) / new_nr
+
+                  for (octave_idx_type k = kk; k < jj; k++)
+                    retval.xcidx (k+1) = j;
+                  kk = jj;
+                  retval.xdata (j) = data (j);
+                  retval.xridx (j) = ii;
+                }
+            }
           for (octave_idx_type k = kk; k < new_nc; k++)
             retval.xcidx (k+1) = new_nnz;
         }
       else
         {
           std::string dimensions_str = dimensions.str ();
           std::string new_dims_str = new_dims.str ();
 
@@ -2019,20 +2032,20 @@ Sparse<T>::assign (const idx_vector& idx
 
               if (new_nz >= nz && new_nz <= nzmax ())
                 {
                   // Adding/overwriting elements, enough capacity allocated.
 
                   if (new_nz > nz)
                     {
                       // Make room first.
-                      std::copy (data () + ui, data () + nz,
-                                 data () + li + rnz);
-                      std::copy (ridx () + ui, ridx () + nz,
-                                 ridx () + li + rnz);
+                      std::copy_backward (data () + ui, data () + nz,
+                                          data () + new_nz);
+                      std::copy_backward (ridx () + ui, ridx () + nz,
+                                          ridx () + new_nz);
                       mx_inline_add2 (nc - ub, cidx () + ub + 1, new_nz - nz);
                     }
 
                   // Copy data and indices from rhs.
                   std::copy (rhs.data (), rhs.data () + rnz, data () + li);
                   std::copy (rhs.ridx (), rhs.ridx () + rnz, ridx () + li);
                   mx_inline_add (ub - lb, cidx () + lb + 1, rhs.cidx () + 1,
                                  li);
