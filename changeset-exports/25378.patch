# HG changeset patch
# User Rik <rik@octave.org>
# Date 1526409985 25200
#      Tue May 15 11:46:25 2018 -0700
# Branch stable
# Node ID 8e30ef611002fa1f610cf8460ff82f7ff38898f2
# Parent  cc40e47d3a44b39d923b709ec7f59872bcde0f73
residue.m: Use a pre-conditioner on final matrix division for numerical stability (bug #53869)

* residue.m: Use a pre-conditioner for final 'A \ B' division.
Adjust BIST test for new behavior.

diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -256,18 +256,21 @@ function [r, p, k, e] = residue (b, a, v
   B = prepad (reshape (b, [numel(b), 1]), border+1, 0);
   for ip = 1:numel (p)
     ri = zeros (size (p));
     ri(ip) = 1;
     A(:,ip) = prepad (rresidue (ri, p, [], toler), border+1, 0).';
   endfor
 
   ## Solve for the residues.
-
-  r = A \ B;
+  ## FIXME: Use a pre-conditioner d to make A \ B work better (bug #53869).
+  ##        It would be better to construct A and B so they are not close to
+  ##        singular in the first place.
+  d = max (abs (A), [], 2);
+  r = (diag (d) \ A) \ (B ./ d);
 
 endfunction
 
 function [pnum, pden, e] = rresidue (r, p, k, toler, e)
 
   ## Reconstitute the numerator and denominator polynomials from the
   ## residues, poles, and direct term.
 
@@ -368,17 +371,17 @@ endfunction
 %! [r, p, k, e] = residue (b, a);
 %! r1 = [-5i; 12; +5i; 12]/54;
 %! p1 = [+3i; +3i; -3i; -3i];
 %! assert (r, r1, 1e-12);
 %! assert (p, p1, 1e-12);
 %! assert (isempty (k));
 %! assert (e, [1; 2; 1; 2]);
 %! [br, ar] = residue (r, p, k);
-%! assert (br, [0,b], 1e-12);
+%! assert (br, b, 1e-12);
 %! assert (ar, a, 1e-12);
 
 %!test
 %! r = [7; 3; -2];
 %! p = [2; 1; 2];
 %! k = [1 0];
 %! e = [2; 1; 1];
 %! [b, a] = residue (r, p, k, e);
