# HG changeset patch
# User jwe
# Date 949555697 0
#      Thu Feb 03 05:28:17 2000 +0000
# Node ID e3e8cfe73935ddf5b9f6c5d179e2522b38818f4c
# Parent  12d7ec415f35c0a813dfcc137a2147b216532b86
[project @ 2000-02-03 05:28:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-procbuf.h: Include fstream, not streambuf.h.
+
 	* load-save.cc (Fsave): Call pubseekoff instead of seekoff.	
 	* oct-strstrm.cc (octave_base_strstream::tell): Likewise.
 	(octave_base_strstream::seek): Likewise.
 
 	* oct-stream.cc (octave_base_stream::read): Rename count to char_count.
 	(octave_base_stream::do_gets): Likewise.
 
 	* octave-stream.cc (octave_base_stream::write): Rename flt_fmt to ffmt.
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -61,17 +61,17 @@ int
 octave_fstream::seek (std::streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (! fs.bad ())
     {
       fs.clear ();
 
-      filebuf *fb = fs.rdbuf ();
+      std::filebuf *fb = fs.rdbuf ();
 
       if (fb)
 	{
 	  fb->seekoff (offset, origin);
 	  retval = fs.bad () ? -1 : 0;
 	}
     }
 
@@ -82,17 +82,17 @@ octave_fstream::seek (std::streamoff off
 
 long
 octave_fstream::tell (void) const
 {
   long retval = -1;
 
   if (fs)
     {
-      filebuf *fb = fs.rdbuf ();
+      std::filebuf *fb = fs.rdbuf ();
       retval = static_cast<long> (fb->seekoff (0, std::ios::cur));
     }
 
   return retval;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
diff --git a/src/oct-procbuf.h b/src/oct-procbuf.h
--- a/src/oct-procbuf.h
+++ b/src/oct-procbuf.h
@@ -21,40 +21,40 @@ Software Foundation, 59 Temple Place - S
 */
 
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
 
 #if !defined (octave_octave_procbuf_h)
 #define octave_octave_procbuf_h 1
 
-#include <streambuf.h>
+#include <fstream>
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 class
-octave_procbuf : public filebuf
+octave_procbuf : public std::filebuf
 {
 public:
 
   octave_procbuf (void)
-    : filebuf (), wstatus (-1), proc_pid (-1), next (0) { }
+    : std::filebuf (), wstatus (-1), proc_pid (-1), next (0) { }
 
   octave_procbuf (const char *command, int mode)
-    : filebuf (), wstatus (-1), proc_pid (-1), next (0)
+    : std::filebuf (), wstatus (-1), proc_pid (-1), next (0)
   { open (command, mode); }
 
   ~octave_procbuf (void) { close (); }
 
   octave_procbuf *open (const char *command, int mode);
 
   octave_procbuf *close (void)
-    { return static_cast<octave_procbuf *> (filebuf::close ()); }
+    { return static_cast<octave_procbuf *> (std::filebuf::close ()); }
 
   virtual int sys_close (void);
 
   int wait_status (void) const { return wstatus; }
 
   pid_t pid (void) { return proc_pid; }
 
 protected:
