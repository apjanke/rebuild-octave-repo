# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1260425014 18000
#      Thu Dec 10 01:03:34 2009 -0500
# Node ID 7cd2e1b372e577e23b44ced03336969ce1815cb0
# Parent  d64d15e12e6bfdbcb030b296dc8f805bd549918e
allow scanf to store ASCII NUL values

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-12-10  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (BEGIN_C_CONVERSION, BEGIN_S_CONVERSION):
+	Store characters directly in appropriately sized std::string object.
+	(FINISH_CHARACTER_CONVERSION): Do store ASCII NUL values.
+
 2009-12-09  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fltk_backend.cc: Style fixes.
 
 2009-12-09  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::print): Print immediatly.
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1550,78 +1550,68 @@ do_scanf_conv (std::istream&, const scan
     } \
   while (0)
 
 #define BEGIN_C_CONVERSION() \
   is.unsetf (std::ios::skipws); \
  \
   int width = elt->width ? elt->width : 1; \
  \
-  char *tbuf = new char[width + 1]; \
+  std::string tmp (width, '\0'); \
  \
   int c = EOF; \
   int n = 0; \
  \
   while (is && n < width && (c = is.get ()) != EOF) \
-    tbuf[n++] = static_cast<char> (c);		    \
- \
-  tbuf[n] = '\0'; \
+    tmp[n++] = static_cast<char> (c); \
  \
   if (n > 0 && c == EOF) \
-    is.clear (); \
- \
-  std::string tmp = tbuf; \
- \
-  delete [] tbuf
+    is.clear ()
 
 // For a `%s' format, skip initial whitespace and then read until the
 // next whitespace character or until WIDTH characters have been read.
 #define BEGIN_S_CONVERSION() \
   int width = elt->width; \
  \
   std::string tmp; \
  \
   do \
     { \
       if (width) \
         { \
-          char *tbuf = new char [width+1]; \
+          std::string tmp (width, '\0'); \
  \
           int c = EOF; \
  \
           int n = 0; \
  \
           while (is && (c = is.get ()) != EOF) \
             { \
               if (! isspace (c)) \
                 { \
-                  tbuf[n++] = static_cast<char> (c); \
+                  tmp[n++] = static_cast<char> (c); \
                   break; \
                 } \
             } \
  \
           while (is && n < width && (c = is.get ()) != EOF) \
             { \
               if (isspace (c)) \
                 { \
                   is.putback (c); \
                   break; \
                 } \
               else \
-                tbuf[n++] = static_cast<char> (c); \
+                tmp[n++] = static_cast<char> (c); \
             } \
  \
-          tbuf[n] = '\0'; \
- \
           if (n > 0 && c == EOF) \
             is.clear (); \
  \
-          tmp = tbuf; \
- \
-          delete [] tbuf; \
+          tmp.resize (n); \
         } \
       else \
         { \
           is >> std::ws >> tmp; \
         } \
     } \
   while (0)
 
@@ -1675,17 +1665,17 @@ do_scanf_conv (std::istream&, const scan
       if (is) \
 	{ \
 	  int i = 0; \
  \
 	  if (! discard) \
 	    { \
 	      conversion_count++; \
  \
-	      while (i < width && tmp[i] != '\0') \
+	      while (i < width) \
 		{ \
 		  if (data_index == max_size) \
 		    { \
 		      max_size *= 2; \
  \
 		      if (all_char_conv) \
 			{ \
 			  if (one_elt_size_spec) \
