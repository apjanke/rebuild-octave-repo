# HG changeset patch
# User Rik <rik@octave.org>
# Date 1383766955 28800
#      Wed Nov 06 11:42:35 2013 -0800
# Node ID 870f3e12e16322ac290a9b20e23b6df80931d86b
# Parent  93edd282a2bc72c6e2a714dd00d797278832c185
maint: Use phrase "FIXME:" for problem areas in code.

* libinterp/corefcn/betainc.cc, libinterp/corefcn/bitfcns.cc,
libinterp/corefcn/display.cc, libinterp/corefcn/gammainc.cc,
libinterp/corefcn/gl2ps-renderer.cc, libinterp/corefcn/graphics.cc,
libinterp/corefcn/load-save.cc, libinterp/corefcn/ls-hdf5.cc,
libinterp/corefcn/ls-mat5.cc, libinterp/corefcn/ls-oct-binary.cc,
libinterp/corefcn/luinc.cc, libinterp/corefcn/mex.cc,
libinterp/corefcn/regexp.cc, libinterp/corefcn/sighandlers.cc,
libinterp/corefcn/sparse-xpow.cc, libinterp/corefcn/urlwrite.cc,
libinterp/corefcn/variables.cc, libinterp/dldfcn/__init_fltk__.cc,
libinterp/dldfcn/__magick_read__.cc, libinterp/dldfcn/chol.cc,
libinterp/octave-value/ov-bool-sparse.cc,
libinterp/octave-value/ov-fcn-inline.cc,
libinterp/octave-value/ov-flt-re-mat.cc, libinterp/octave-value/ov-re-mat.cc,
libinterp/octave-value/ov-str-mat.cc, libinterp/parse-tree/lex.ll,
liboctave/numeric/SparseCmplxQR.cc, liboctave/numeric/SparseQR.cc,
liboctave/numeric/sparse-dmsolve.cc, liboctave/util/lo-utils.cc,
liboctave/util/sparse-util.cc, liboctave/util/url-transfer.cc:
maint: Use phrase "FIXME:" for problem areas in code.

diff --git a/libinterp/corefcn/betainc.cc b/libinterp/corefcn/betainc.cc
--- a/libinterp/corefcn/betainc.cc
+++ b/libinterp/corefcn/betainc.cc
@@ -70,17 +70,17 @@ compatible dimensions.\n\
   int nargin = args.length ();
 
   if (nargin == 3)
     {
       octave_value x_arg = args(0);
       octave_value a_arg = args(1);
       octave_value b_arg = args(2);
 
-      // FIXME Can we make a template version of the duplicated code below
+      // FIXME: Can we make a template version of the duplicated code below
       if (x_arg.is_single_type () || a_arg.is_single_type () ||
           b_arg.is_single_type ())
         {
           if (x_arg.is_scalar_type ())
             {
               float x = x_arg.float_value ();
 
               if (a_arg.is_scalar_type ())
diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -512,17 +512,17 @@ bitshift (eye (3), 1)\n\
 @group\n\
 2 0 0\n\
 0 2 0\n\
 0 0 2\n\
 @end group\n\
 \n\
 bitshift (10, [-2, -1, 0, 1, 2])\n\
 @result{} 2   5  10  20  40\n\
-@c FIXME -- restore this example when third arg is allowed to be an array.\n\
+@c FIXME: restore this example when third arg is allowed to be an array.\n\
 @c\n\
 @c\n\
 @c bitshift ([1, 10], 2, [3,4])\n\
 @c @result{} 4  8\n\
 @end group\n\
 @end example\n\
 @seealso{bitand, bitor, bitxor, bitset, bitget, bitcmp, bitmax}\n\
 @end deftypefn")
diff --git a/libinterp/corefcn/display.cc b/libinterp/corefcn/display.cc
--- a/libinterp/corefcn/display.cc
+++ b/libinterp/corefcn/display.cc
@@ -37,17 +37,17 @@ along with Octave; see the file COPYING.
 #include "singleton-cleanup.h"
 
 #include "display.h"
 #include "error.h"
 
 display_info *display_info::instance = 0;
 
 #if defined (HAVE_FRAMEWORK_CARBON) && ! defined (HAVE_CARBON_CGDISPLAYBITSPERPIXEL)
-// FIXME - This will only work for MacOS > 10.5. For earlier versions
+// FIXME: This will only work for MacOS > 10.5. For earlier versions
 // this code is not needed (use CGDisplayBitsPerPixel instead).
 size_t DisplayBitsPerPixel (CGDirectDisplayID display)
 {
   CGDisplayModeRef mode = CGDisplayCopyDisplayMode (display);
   CFStringRef pixelEncoding = CGDisplayModeCopyPixelEncoding (mode);
 
   if (CFStringCompare (pixelEncoding, CFSTR (IO32BitDirectPixels), 0) == 0)
     return 32;
diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -96,17 +96,17 @@ gammainc (@var{x}, @var{a}) @equiv{} 1 -
 
     }
 
   if (!error_state && nargin >= 2  && nargin <= 3)
     {
       octave_value x_arg = args(0);
       octave_value a_arg = args(1);
 
-      // FIXME Can we make a template version of the duplicated code below
+      // FIXME: Can we make a template version of the duplicated code below
       if (x_arg.is_single_type () || a_arg.is_single_type ())
         {
           if (x_arg.is_scalar_type ())
             {
               float x = x_arg.float_value ();
 
               if (! error_state)
                 {
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -152,18 +152,18 @@ glps_renderer::render_text (const std::s
 {
   if (txt.empty ())
     return Matrix (1, 4, 0.0);
 
   glRasterPos3d (x, y, z);
   gl2psTextOpt (txt.c_str (), fontname.c_str (), fontsize,
                 alignment_to_mode (ha, va), rotation);
 
-  // FIXME? -- we have no way of getting a bounding box from gl2ps, so
-  // we use freetype
+  // FIXME?
+  // We have no way of getting a bounding box from gl2ps, so we use freetype.
   Matrix bbox;
   uint8NDArray pixels;
   text_to_pixels (txt, pixels, bbox, 0, 0, rotation);
   return bbox;
 }
 
 void
 glps_renderer::set_font (const base_properties& props)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3125,17 +3125,17 @@ figure::properties::set_integerhandle (c
 
           this_go.update (integerhandle.get_id ());
 
           mark_modified ();
         }
     }
 }
 
-// FIXME This should update monitorpositions and pointerlocation, but
+// FIXME: This should update monitorpositions and pointerlocation, but
 // as these properties are yet used, and so it doesn't matter that they
 // aren't set yet.
 void
 root_figure::properties::update_units (void)
 {
   caseless_str xunits = get_units ();
 
   Matrix ss = default_screensize ();
@@ -6201,17 +6201,17 @@ axes::properties::get_axis_limits (doubl
         }
       else
         {
           if (min_val == 0 && max_val == 0)
             {
               min_val = -1;
               max_val = 1;
             }
-          // FIXME -- maybe this test should also be relative?
+          // FIXME: maybe this test should also be relative?
           else if (std::abs (min_val - max_val)
                    < sqrt (std::numeric_limits<double>::epsilon ()))
             {
               min_val -= 0.1 * std::abs (min_val);
               max_val += 0.1 * std::abs (max_val);
             }
 
           double tick_sep = calc_tick_sep (min_val , max_val);
@@ -6241,17 +6241,17 @@ axes::properties::calc_ticks_and_lims (a
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ()) (0);
   double hi = (lims.get ().matrix_value ()) (1);
   bool is_negative = lo < 0 && hi < 0;
   double tmp;
-  // FIXME should this be checked for somewhere else? (i.e. set{x,y,z}lim)
+  // FIXME: should this be checked for somewhere else? (i.e. set{x,y,z}lim)
   if (hi < lo)
     {
       tmp = hi;
       hi = lo;
       lo = tmp;
     }
 
   if (is_logscale)
@@ -6268,17 +6268,17 @@ axes::properties::calc_ticks_and_lims (a
           lo = std::log10 (lo);
         }
     }
 
   double tick_sep = calc_tick_sep (lo , hi);
 
   if (is_logscale && ! (xisinf (hi) || xisinf (lo)))
     {
-      // FIXME - what if (hi-lo) < tick_sep?
+      // FIXME: what if (hi-lo) < tick_sep?
       //         ex: loglog ([1 1.1])
       tick_sep = std::max (tick_sep, 1.);
       tick_sep = std::ceil (tick_sep);
     }
 
   int i1 = static_cast<int> (gnulib::floor (lo / tick_sep));
   int i2 = static_cast<int> (std::ceil (hi / tick_sep));
 
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -761,20 +761,20 @@ Force Octave to assume the file is in Oc
 
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
         error ("load: cannot read HDF5 format from stdin");
       else
 #endif /* HAVE_HDF5 */
       if (format != LS_UNKNOWN)
         {
-          // FIXME -- if we have already seen EOF on a
-          // previous call, how do we fix up the state of std::cin so
-          // that we can get additional input?  I'm afraid that we
-          // can't fix this using std::cin only.
+          // FIXME: if we have already seen EOF on a previous call,
+          // how do we fix up the state of std::cin so that we can get
+          // additional input?  I'm afraid that we can't fix this
+          // using std::cin only.
 
           retval = do_load (std::cin, orig_fname, format, flt_fmt,
                             list_only, swap, verbose, argv, i, argc,
                             nargout);
         }
       else
         error ("load: must specify file format if reading from stdin");
     }
@@ -1708,17 +1708,17 @@ the file @file{data} in Octave's binary 
           || format == LS_MAT_BINARY
           || format == LS_MAT5_BINARY
           || format == LS_MAT7_BINARY)
         mode |= std::ios::binary;
 
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
         {
-          // FIXME. It should be possible to append to HDF5 files.
+          // FIXME: It should be possible to append to HDF5 files.
           if (append)
             {
               error ("save: appending to HDF5 files is not implemented");
               return retval;
             }
 
           bool write_header_info = ! (append &&
                                       H5Fis_hdf5 (fname.c_str ()) > 0);
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -393,17 +393,17 @@ hdf5_read_next_data (hid_t group_id, con
 
           H5Sclose (space_id);
         }
       else if (type_class_id == H5T_INTEGER)
         {
           // What integer type do we really have..
           std::string int_typ;
 #ifdef HAVE_H5T_GET_NATIVE_TYPE
-          // FIXME test this code and activated with an autoconf
+          // FIXME: test this code and activated with an autoconf
           // test!! It is also incorrect for 64-bit indexing!!
 
           switch (H5Tget_native_type (type_id, H5T_DIR_ASCEND))
             {
             case H5T_NATIVE_CHAR:
               int_typ = "int8 ";
               break;
 
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -167,17 +167,17 @@ read_mat5_binary_data (std::istream& is,
     case miDOUBLE:
       read_doubles (is, data, LS_DOUBLE, count, swap, flt_fmt);
       break;
 
     case miRESERVE2:
     case miRESERVE3:
       break;
 
-    // FIXME -- how are the 64-bit cases supposed to work here?
+    // FIXME: how are the 64-bit cases supposed to work here?
     case miINT64:
       read_doubles (is, data, LS_LONG, count, swap, flt_fmt);
       break;
 
     case miUINT64:
       read_doubles (is, data, LS_U_LONG, count, swap, flt_fmt);
       break;
 
@@ -232,17 +232,17 @@ read_mat5_binary_data (std::istream& is,
     case miDOUBLE:
       read_floats (is, data, LS_DOUBLE, count, swap, flt_fmt);
       break;
 
     case miRESERVE2:
     case miRESERVE3:
       break;
 
-    // FIXME -- how are the 64-bit cases supposed to work here?
+    // FIXME: how are the 64-bit cases supposed to work here?
     case miINT64:
       read_floats (is, data, LS_LONG, count, swap, flt_fmt);
       break;
 
     case miUINT64:
       read_floats (is, data, LS_U_LONG, count, swap, flt_fmt);
       break;
 
diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -200,17 +200,17 @@ read_binary_data (std::istream& is, bool
       break;
 
     case 4:
       tc = octave_value_typeinfo::lookup_type ("complex matrix");
       break;
 
     case 5:
       {
-        // FIXMEX
+        // FIXME:
         // This is cruft, since its for a save type that is old. Maybe
         // this is taking backward compatability too far!!
         int32_t len;
         if (! is.read (reinterpret_cast<char *> (&len), 4))
           goto data_read_error;
         if (swap)
           swap_bytes<4> (&len);
         OCTAVE_LOCAL_BUFFER (char, s, len+1);
diff --git a/libinterp/corefcn/luinc.cc b/libinterp/corefcn/luinc.cc
--- a/libinterp/corefcn/luinc.cc
+++ b/libinterp/corefcn/luinc.cc
@@ -181,17 +181,17 @@ values of @var{p} @var{q} as vector valu
             {
               if (tmp.compare ("vector") == 0)
                 vecout = true;
               else
                 error ("luinc: unrecognized string argument");
             }
         }
 
-      // FIXME Add code for zero-level factorization
+      // FIXME: Add code for zero-level factorization
       if (zero_level)
         error ("luinc: zero-level factorization not implemented");
 
       if (!error_state)
         {
           if (args(0).type_name () == "sparse matrix")
             {
               SparseMatrix sm = args(0).sparse_matrix_value ();
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -1040,17 +1040,17 @@ public:
     pi (0)
   {
     mxChar *cpr = static_cast<mxChar *> (pr);
     mwSize nel = get_number_of_elements ();
     for (mwIndex i = 0; i < nel; i++)
       cpr[i] = str[i];
   }
 
-  // FIXME??
+  // FIXME: ???
   mxArray_number (mwSize m, const char **str)
     : mxArray_matlab (mxCHAR_CLASS, m, max_str_len (m, str)),
       pr (mxArray::calloc (get_number_of_elements (), get_element_size ())),
       pi (0)
   {
     mxChar *cpr = static_cast<mxChar *> (pr);
 
     mwSize *dv = get_dimensions ();
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -73,20 +73,20 @@ do_regexp_ptn_string_escapes (const std:
             // Translate \< and \> to PCRE word boundary
             case '<': // begin word boundary
             case '>': // end word boundary
               retval[i] = '\\';
               retval[++i] = 'b';
               break;
 
 #if 0
-// FIXME : To be complete, we need to handle \oN, \o{N}.
-//         The PCRE library already handles \N where N
-//         is an octal number.  New code needs to merely
-//         replace \oN or \o{N} with \N.
+// FIXME: To be complete, we need to handle \oN, \o{N}.
+//        The PCRE library already handles \N where N
+//        is an octal number.  New code needs to merely
+//        replace \oN or \o{N} with \N.
             case 'o': // octal number
 #endif
 
             default:  // pass escape sequence through
               retval[i] = '\\';
               retval[++i] = s[j];
               break;
             }
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -218,17 +218,17 @@ octave_set_signal_handler (int sig, sig_
       act.sa_flags |= SA_INTERRUPT;
 #endif
     }
 #endif
 #if defined (SA_RESTART)
 #if defined (SIGALRM)
   else
 #endif
-  // FIXME -- Do we also need to explicitly disable SA_RESTART?
+  // FIXME: Do we also need to explicitly disable SA_RESTART?
   if (restart_syscalls)
     act.sa_flags |= SA_RESTART;
 #endif
 
   GNULIB_NAMESPACE::sigemptyset (&act.sa_mask);
   GNULIB_NAMESPACE::sigemptyset (&oact.sa_mask);
 
   GNULIB_NAMESPACE::sigaction (sig, &act, &oact);
diff --git a/libinterp/corefcn/sparse-xpow.cc b/libinterp/corefcn/sparse-xpow.cc
--- a/libinterp/corefcn/sparse-xpow.cc
+++ b/libinterp/corefcn/sparse-xpow.cc
@@ -320,19 +320,19 @@ elem_xpow (double a, const SparseComplex
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const SparseMatrix& a, double b)
 {
-  // FIXME What should a .^ 0 give?? Matlab gives a
+  // FIXME: What should a .^ 0 give?  Matlab gives a
   // sparse matrix with same structure as a, which is strictly
-  // incorrect. Keep compatiability.
+  // incorrect. Keep compatibility.
 
   octave_value retval;
 
   octave_idx_type nz = a.nnz ();
 
   if (b <= 0.0)
     {
       octave_idx_type nr = a.rows ();
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -1050,17 +1050,17 @@ Undocumented internal function\n\
                       if (! curl.good ())
                         {
                           error ("__ftp_mput__: %s", curl.lasterror().c_str());
                           break;
                         }
                     }
                   else
                     {
-                      // FIXME Does ascii mode need to be flagged here?
+                      // FIXME: Does ascii mode need to be flagged here?
                       std::ifstream ifile (file.c_str (), std::ios::in |
                                            std::ios::binary);
 
                       if (! ifile.is_open ())
                         {
                           error ("__ftp_mput__: unable to open file");
                           break;
                         }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1558,17 +1558,17 @@ do_who (int argc, const string_vector& a
   bool global_only = false;
   bool have_regexp = false;
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-file")
         {
-          // FIXME. This is an inefficient manner to implement this as the
+          // FIXME: This is an inefficient manner to implement this as the
           // variables are loaded in to a temporary context and then treated.
           // It would be better to refecat symbol_info_list to not store the
           // symbol records and then use it in load-save.cc (do_load) to
           // implement this option there so that the variables are never
           // stored at all.
           if (i == argc - 1)
             error ("whos: -file argument must be followed by a file name");
           else
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -816,27 +816,27 @@ public:
     mark_modified ();
     Fl::wait (fltk_maxtime);
   }
 
   void show_menubar (void)
   {
     if (!uimenu->is_visible ())
       {
-        // FIXME - Toolbar and menubar do not update
+        // FIXME: Toolbar and menubar do not update
         uimenu->show ();
         mark_modified ();
       }
   }
 
   void hide_menubar (void)
   {
     if (uimenu->is_visible ())
       {
-        // FIXME - Toolbar and menubar do not update
+        // FIXME: Toolbar and menubar do not update
         uimenu->hide ();
         mark_modified ();
       }
   }
 
   void uimenu_update (const graphics_handle& gh, int id)
   {
     graphics_object uimenu_obj = gh_manager::get_object (gh);
@@ -1214,17 +1214,17 @@ private:
     pos(2) = ww;
     pos(3) = hh - menu_dy () - status_h;
 
     fp.set_boundingbox (pos, true);
   }
 
   void draw (void)
   {
-    // FIXME - Toolbar and menubar do not update properly
+    // FIXME: Toolbar and menubar do not update properly
     Matrix pos = fp.get_boundingbox (true);
     int canvas_h = pos(3);
     int canvas_w = pos(2);
     int canvas_y = menu_dy ();
     int toolbar_y = menu_dy () + canvas_h;
     pos(1) = pos(1) - menu_dy ();
     pos(3) = pos(3) + menu_dy () + status_h;
 
@@ -2045,17 +2045,17 @@ public:
         figure_manager::close_all ();
 
         octave_value_list args = input_event_hook_fcn_id;
         args.append (false);
         Fremove_input_event_hook (args, 0);
 
         input_event_hook_fcn_id = octave_value_list ();
 
-        // FIXME ???
+        // FIXME: ???
         Fl::wait (fltk_maxtime);
       }
   }
 
   void set_input_event_hook_id (const octave_value_list& id)
   {
     input_event_hook_fcn_id = id;
   }
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1453,17 +1453,17 @@ use @code{imwrite}.\n\
         return retval;
       if (ini_imvec.size () > 0)
         {
           ini_imvec.insert (ini_imvec.end (), imvec.begin (), imvec.end ());
           ini_imvec.swap (imvec);
         }
     }
 
-  // FIXME - LoopCount or animationIterations
+  // FIXME: LoopCount or animationIterations
   //  How it should work:
   //
   // This value is only set for the first image in the sequence. Trying
   // to set this value with the append mode should have no effect, the
   // value used with the first image is the one that counts (that would
   // also be Matlab compatible). Thus, the right way to do this would be
   // to have an else block on the condition above, and set this only
   // when creating a new file. Since Matlab does not interpret a 4D
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -155,18 +155,18 @@ sparse matrices.\n\
     {
       std::string tmp = args(n++).string_value ();
 
       if (! error_state )
         {
           if (tmp.compare ("vector") == 0)
             vecout = true;
           else if (tmp.compare ("lower") == 0)
-            // FIXME currently the option "lower" is handled by transposing the
-            //  matrix, factorizing it with the lapack function
+            // FIXME: currently the option "lower" is handled by transposing
+            //  the matrix, factorizing it with the lapack function
             //  DPOTRF ('U', ...) and finally transposing the factor.  It would
             //  be more efficient to use DPOTRF ('L', ...) in this case.
             LLt = true;
           else if (tmp.compare ("upper") == 0)
             LLt = false;
           else
             error ("chol: unexpected second or third input");
         }
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -139,17 +139,17 @@ octave_sparse_bool_matrix::complex_value
 octave_value
 octave_sparse_bool_matrix::convert_to_str_internal (bool pad, bool force,
                                                     char type) const
 {
   octave_value tmp = octave_value (array_value ());
   return tmp.convert_to_str (pad, force, type);
 }
 
-// FIXME These are inefficient ways of creating full matrices
+// FIXME: These are inefficient ways of creating full matrices
 
 Matrix
 octave_sparse_bool_matrix::matrix_value (bool) const
 {
   return Matrix (matrix.matrix_value ());
 }
 
 ComplexMatrix
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -289,18 +289,18 @@ octave_fcn_inline::save_hdf5 (hid_t loc_
   size_t len = 0;
   for (int i = 0; i < ifargs.length (); i++)
     if (len < ifargs(i).length ())
       len = ifargs(i).length ();
 
   hid_t space_hid = -1, data_hid = -1, type_hid = -1;;
   bool retval = true;
 
-  // FIXME Is there a better way of saving string vectors, than a
-  // null padded matrix?
+  // FIXME: Is there a better way of saving string vectors,
+  //        than a null padded matrix?
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, 2);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   hdims[1] = ifargs.length ();
   hdims[0] = len + 1;
 
   space_hid = H5Screate_simple (2, hdims, 0);
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -236,18 +236,18 @@ SparseMatrix
 octave_float_matrix::sparse_matrix_value (bool) const
 {
   return SparseMatrix (matrix_value ());
 }
 
 SparseComplexMatrix
 octave_float_matrix::sparse_complex_matrix_value (bool) const
 {
-  // FIXME Need a SparseComplexMatrix (Matrix) constructor to make
-  // this function more efficient. Then this should become
+  // FIXME: Need a SparseComplexMatrix (Matrix) constructor to make
+  // this function more efficient.  Then this should become
   // return SparseComplexMatrix (matrix.matrix_value ());
   return SparseComplexMatrix (sparse_matrix_value ());
 }
 
 octave_value
 octave_float_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -245,18 +245,18 @@ SparseMatrix
 octave_matrix::sparse_matrix_value (bool) const
 {
   return SparseMatrix (matrix.matrix_value ());
 }
 
 SparseComplexMatrix
 octave_matrix::sparse_complex_matrix_value (bool) const
 {
-  // FIXME Need a SparseComplexMatrix (Matrix) constructor to make
-  // this function more efficient. Then this should become
+  // FIXME: Need a SparseComplexMatrix (Matrix) constructor to make
+  // this function more efficient.  Then this should become
   // return SparseComplexMatrix (matrix.matrix_value ());
   return SparseComplexMatrix (sparse_matrix_value ());
 }
 
 octave_value
 octave_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -230,17 +230,17 @@ std::string
 octave_char_matrix_str::string_value (bool) const
 {
   std::string retval;
 
   if (matrix.ndims () == 2)
     {
       charMatrix chm = matrix.matrix_value ();
 
-      retval = chm.row_as_string (0);  // FIXME???
+      retval = chm.row_as_string (0);  // FIXME?
     }
   else
     error ("invalid conversion of charNDArray to string");
 
   return retval;
 }
 
 Array<std::string>
@@ -274,17 +274,17 @@ std::string
 octave_char_matrix_str::short_disp (void) const
 {
   std::string retval;
 
   if (matrix.ndims () == 2 && numel () > 0)
     {
       retval = string_value ();
 
-      // FIXME -- should this be configurable?
+      // FIXME: should this be configurable?
 
       if (retval.length () > 100)
         retval = retval.substr (0, 100);
     }
 
   return retval;
 }
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -366,34 +366,34 @@ ANY_INCLUDING_NL (.|{NL})
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 //
 // It's also a pain in the ass to decide whether to insert a comma
 // after seeing a ']' character...
 
-// FIXME -- we need to handle block comments here.
+// FIXME: we need to handle block comments here.
 %}
 
 <MATRIX_START>\] {
     curr_lexer->lexer_debug ("<MATRIX_START>\\]");
 
     curr_lexer->looking_at_object_index.pop_front ();
 
     curr_lexer->looking_for_object_index = true;
     curr_lexer->at_beginning_of_statement = false;
 
     curr_lexer->handle_close_bracket (']');
 
     return curr_lexer->count_token (']');
   }
 
 %{
-// FIXME -- we need to handle block comments here.
+// FIXME: we need to handle block comments here.
 %}
 
 <MATRIX_START>\} {
     curr_lexer->lexer_debug ("<MATRIX_START>\\}*");
 
     curr_lexer->looking_at_object_index.pop_front ();
 
     curr_lexer->looking_for_object_index = true;
diff --git a/liboctave/numeric/SparseCmplxQR.cc b/liboctave/numeric/SparseCmplxQR.cc
--- a/liboctave/numeric/SparseCmplxQR.cc
+++ b/liboctave/numeric/SparseCmplxQR.cc
@@ -94,17 +94,17 @@ SparseComplexQR::SparseComplexQR_rep::~S
 #endif
 }
 
 SparseComplexMatrix
 SparseComplexQR::SparseComplexQR_rep::V (void) const
 {
 #ifdef HAVE_CXSPARSE
   // Drop zeros from V and sort
-  // FIXME Is the double transpose to sort necessary?
+  // FIXME: Is the double transpose to sort necessary?
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   CXSPARSE_ZNAME (_dropzeros) (N->L);
   CXSPARSE_ZNAME () *D = CXSPARSE_ZNAME (_transpose) (N->L, 1);
   CXSPARSE_ZNAME (_spfree) (N->L);
   N->L = CXSPARSE_ZNAME (_transpose) (D, 1);
   CXSPARSE_ZNAME (_spfree) (D);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
@@ -158,17 +158,17 @@ SparseComplexQR::SparseComplexQR_rep::P 
 #endif
 }
 
 SparseComplexMatrix
 SparseComplexQR::SparseComplexQR_rep::R (const bool econ) const
 {
 #ifdef HAVE_CXSPARSE
   // Drop zeros from R and sort
-  // FIXME Is the double transpose to sort necessary?
+  // FIXME: Is the double transpose to sort necessary?
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   CXSPARSE_ZNAME (_dropzeros) (N->U);
   CXSPARSE_ZNAME () *D = CXSPARSE_ZNAME (_transpose) (N->U, 1);
   CXSPARSE_ZNAME (_spfree) (N->U);
   N->U = CXSPARSE_ZNAME (_transpose) (D, 1);
   CXSPARSE_ZNAME (_spfree) (D);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
diff --git a/liboctave/numeric/SparseQR.cc b/liboctave/numeric/SparseQR.cc
--- a/liboctave/numeric/SparseQR.cc
+++ b/liboctave/numeric/SparseQR.cc
@@ -74,17 +74,17 @@ SparseQR::SparseQR_rep::~SparseQR_rep (v
 #endif
 }
 
 SparseMatrix
 SparseQR::SparseQR_rep::V (void) const
 {
 #ifdef HAVE_CXSPARSE
   // Drop zeros from V and sort
-  // FIXME Is the double transpose to sort necessary?
+  // FIXME: Is the double transpose to sort necessary?
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   CXSPARSE_DNAME (_dropzeros) (N->L);
   CXSPARSE_DNAME () *D = CXSPARSE_DNAME (_transpose) (N->L, 1);
   CXSPARSE_DNAME (_spfree) (N->L);
   N->L = CXSPARSE_DNAME (_transpose) (D, 1);
   CXSPARSE_DNAME (_spfree) (D);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
@@ -138,17 +138,17 @@ SparseQR::SparseQR_rep::P (void) const
 #endif
 }
 
 SparseMatrix
 SparseQR::SparseQR_rep::R (const bool econ) const
 {
 #ifdef HAVE_CXSPARSE
   // Drop zeros from R and sort
-  // FIXME Is the double transpose to sort necessary?
+  // FIXME: Is the double transpose to sort necessary?
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   CXSPARSE_DNAME (_dropzeros) (N->U);
   CXSPARSE_DNAME () *D = CXSPARSE_DNAME (_transpose) (N->U, 1);
   CXSPARSE_DNAME (_spfree) (N->U);
   N->U = CXSPARSE_DNAME (_transpose) (D, 1);
   CXSPARSE_DNAME (_spfree) (D);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
diff --git a/liboctave/numeric/sparse-dmsolve.cc b/liboctave/numeric/sparse-dmsolve.cc
--- a/liboctave/numeric/sparse-dmsolve.cc
+++ b/liboctave/numeric/sparse-dmsolve.cc
@@ -432,17 +432,17 @@ dmsolve (const ST &a, const T &b, octave
               nnz_remaining -= m.nnz ();
               RT ctmp = dmsolve_extract (btmp, 0, 0, 0,
                                          dm->rr[2], 0, b_nc);
               btmp.insert (ctmp - m * mtmp, 0, 0);
             }
         }
 
       // Structurally non-singular blocks
-      // FIXME Should use fine Dulmange-Mendelsohn decomposition here.
+      // FIXME: Should use fine Dulmange-Mendelsohn decomposition here.
       if (dm->rr[1] < dm->rr[2] && dm->cc[2] < dm->cc[3] && !info)
         {
           ST m = dmsolve_extract (a, pinv, q, dm->rr[1], dm->rr[2],
                                   dm->cc[2], dm->cc[3], nnz_remaining, false);
           nnz_remaining -= m.nnz ();
           RT btmp2 = dmsolve_extract (btmp, 0, 0, dm->rr[1], dm->rr[2],
                                       0, b_nc);
           double rcond = 0.0;
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -85,18 +85,17 @@ strsave (const char *s)
   char *tmp = new char [len+1];
   tmp = strcpy (tmp, s);
   return tmp;
 }
 
 // This function was adapted from xputenv from Karl Berry's kpathsearch
 // library.
 
-// FIXME -- make this do the right thing if we don't have a
-// SMART_PUTENV.
+// FIXME: make this do the right thing if we don't have a SMART_PUTENV.
 
 void
 octave_putenv (const std::string& name, const std::string& value)
 {
   int new_len = name.length () + value.length () + 2;
 
   char *new_item = static_cast<char*> (gnulib::malloc (new_len));
 
diff --git a/liboctave/util/sparse-util.cc b/liboctave/util/sparse-util.cc
--- a/liboctave/util/sparse-util.cc
+++ b/liboctave/util/sparse-util.cc
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <stdio.h>
 #include <stdarg.h>
 #include "lo-error.h"
 #include "oct-sparse.h"
 #include "sparse-util.h"
 
-// FIXME this overload is here due to API change in SuiteSparse (3.1 -> 3.2)
+// FIXME: this overload is here due to API change in SuiteSparse (3.1 -> 3.2)
 
 #ifdef HAVE_CHOLMOD
 
 void
 SparseCholError (int status, char *file, int line, char *message)
 {
   SparseCholError (status, file, line, message);
 }
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -175,17 +175,17 @@ base_url_transfer::mput_directory (const
                 {
                   file_list.append (mput_directory (realdir, file));
 
                   if (! good ())
                     break;
                 }
               else
                 {
-                  // FIXME Does ascii mode need to be flagged here?
+                  // FIXME: Does ascii mode need to be flagged here?
                   std::ifstream ifile (realfile.c_str (), std::ios::in |
                                        std::ios::binary);
 
                   if (! ifile.is_open ())
                     {
                       ok = false;
                       errmsg = "__ftp_mput__: unable to open file '"
                                + realfile + "'";
