# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375056937 25200
#      Sun Jul 28 17:15:37 2013 -0700
# Node ID c2b2c7ddf93cbbfe70da6906f771a0576b9c93c4
# Parent  ae78728166114f629e2fa95213de100552d9d94f
shading.m: Don't apply shading to contour hggroups.

* scripts/plot/shading.m: Search through graphic handle
hierarchy and apply shading to patch and surface objects
which are *NOT* in contour hggroups.

diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -13,34 +13,37 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} shading (@var{type})
-## @deftypefnx {Function File} {} shading (@var{ax}, @var{type})
-## Set the shading of surface or patch graphic objects.  Valid arguments
-## for @var{type} are
+## @deftypefnx {Function File} {} shading (@var{hax}, @var{type})
+## Set the shading of surface or patch graphic objects.
+##
+## Valid arguments for @var{type} are
 ##
 ## @table @asis
 ## @item "flat"
 ## Single colored patches with invisible edges.
 ##
 ## @item "faceted"
 ## Single colored patches with visible edges.
 ##
 ## @item "interp"
 ## Color between patch vertices are interpolated and the patch edges are
 ## invisible.
 ## @end table
 ##
-## If @var{hax} is given the shading is applied to axis @var{hax} instead
-## of the current axis.
+## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## rather than the current axes returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then operate on
+## this axis rather than the current axes returned by @code{gca}.
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function shading (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("shading", varargin{:});
 
@@ -49,30 +52,51 @@ function shading (varargin)
   endif
 
   mode = varargin{1};
 
   if (isempty (hax))
     hax = gca ();
   endif
 
-  hp = findobj (hax, "type", "patch");
-  hs = findobj (hax, "type", "surface");
-  hall = [hp(:); hs(:)];
+  ## Find all patch and surface objects that are descendants of hax
+  ## and  which are not part of a contour plot hggroup.
+  hlist = [];
+  kids = get (hax, "children");
+  while (! isempty (kids))
+    types = get (kids, "type");
+    hlist = [hlist; kids(strcmp(types, "patch"))];
+    hlist = [hlist; kids(strcmp(types, "surface"))];
+    parents = kids(strcmp(types, "axes"));
+    hglist = kids(strcmp (types, "hggroup"));
+    for i = 1 : numel (hglist)
+      props = get (hglist(i));
+      if (! isfield (props, "levelstep"))
+        parents(end+1) = hglist(i); 
+      endif
+    endfor
+    kids = get (parents, "children");
+  endwhile
+
+  ## FIXME: This is the old, simple code.
+  ##        Unfortunately, it also shades contour plots which is not desirable.
+  ##hp = findobj (hax, "type", "patch");
+  ##hs = findobj (hax, "type", "surface");
+  ##hlist = [hp(:); hs(:)];
 
   switch (lower (mode))
     case "flat"
-      set (hall, "facecolor", "flat");
-      set (hall, "edgecolor", "none");
+      set (hlist, "facecolor", "flat");
+      set (hlist, "edgecolor", "none");
     case "interp"
-      set (hall, "facecolor", "interp");
-      set (hall, "edgecolor", "none");
+      set (hlist, "facecolor", "interp");
+      set (hlist, "edgecolor", "none");
     case "faceted"
-      set (hall, "facecolor", "flat");
-      set (hall, "edgecolor", [0 0 0]);
+      set (hlist, "facecolor", "flat");
+      set (hlist, "edgecolor", [0 0 0]);
     otherwise
       error ('shading: Invalid MODE "%s"', mode);
   endswitch
 
 endfunction
 
 
 %!demo
