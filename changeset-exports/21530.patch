# HG changeset patch
# User Rik <rik@octave.org>
# Date 1458859511 25200
#      Thu Mar 24 15:45:11 2016 -0700
# Node ID 7c143e73e9215bb9c19cd1d536afb7ae13ecafc7
# Parent  8d894e463de65209790221316a675b7318ec9721
doc: Don't create end-of-sentence period with "etc." in Texinfo.

* external.txi, genpropdoc.m, oop.txi, strread.m,
slice.m: Use "@:" following "etc." to create a period which does
not end the sentence.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -135,17 +135,17 @@ bridge to hardware resources which often
 @node Getting Started with Oct-Files
 @subsection Getting Started with Oct-Files
 
 Oct-files are pieces of C++ code that have been compiled with the Octave
 API into a dynamically loadable object.  They take their name from the file
 which contains the object which has the extension @file{.oct}.
 
 Finding a C++ compiler, using the correct switches, adding the right include
-paths for header files, etc. is a difficult task.  Octave automates this by
+paths for header files, etc.@: is a difficult task.  Octave automates this by
 providing the @code{mkoctfile} command with which to build oct-files.  The
 command is available from within Octave or at the shell command line.
 
 @DOCSTRING(mkoctfile)
 
 Consider the following short example which introduces the basics of
 writing a C++ function that can be linked to Octave.
 
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -613,17 +613,17 @@ to be the same as the length of 2 units 
 
       case "gridlinestyle"
 
       case "labelfontsizemultiplier"
         s.doc = doc_unused;
 
       case "layer"
         s.doc = "Control whether the axes is drawn below child graphics \
-objects (ticks, labels, etc. covered by plotted objects) or above.";
+objects (ticks, labels, etc.@: covered by plotted objects) or above.";
 
       case "linestyleorder"
         s.doc = doc_unused;
 
       case "linestyleorderindex"
         s.doc = doc_unused;
 
       case "linewidth"
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -67,17 +67,17 @@ a0 + a1 * x + a2 * x^2 + @dots{} + an * 
 
 @end ifnottex
 @noindent
 where
 @tex
 $a_0$, $a_1$, etc. are elements of $\Re$.
 @end tex
 @ifnottex
-a0, a1, etc. are real scalars.
+a0, a1, etc.@: are real scalars.
 @end ifnottex
 Thus the polynomial can be represented by a vector
 
 @example
 a = [a0, a1, a2, @dots{}, an];
 @end example
 
 This is a sufficient specification to begin writing the constructor for the
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -45,17 +45,17 @@
 ## @item  %d
 ## @itemx %u
 ## The word is parsed as a number and converted to int32.
 ##
 ## @item %*', '%*f', '%*s
 ## The word is skipped.
 ##
 ## For %s and %d, %f, %n, %u and the associated %*s @dots{} specifiers an
-## optional width can be specified as %Ns, etc. where N is an integer > 1.
+## optional width can be specified as %Ns, etc.@: where N is an integer > 1.
 ## For %f, format specifiers like %N.Mf are allowed.
 ##
 ## @item literals
 ## In addition the format may contain literal character strings; these will be
 ## skipped during reading.
 ## @end table
 ##
 ## Parsed word corresponding to the first specifier are returned in the first
diff --git a/scripts/plot/draw/slice.m b/scripts/plot/draw/slice.m
--- a/scripts/plot/draw/slice.m
+++ b/scripts/plot/draw/slice.m
@@ -25,17 +25,17 @@
 ## @deftypefnx {} {} slice (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} slice (@dots{})
 ## Plot slices of 3-D data/scalar fields.
 ##
 ## Each element of the 3-dimensional array @var{v} represents a scalar value at
 ## a location given by the parameters @var{x}, @var{y}, and @var{z}.  The
 ## parameters @var{x}, @var{x}, and @var{z} are either 3-dimensional arrays of
 ## the same size as the array @var{v} in the @qcode{"meshgrid"} format or
-## vectors.  The parameters @var{xi}, etc. respect a similar format to
+## vectors.  The parameters @var{xi}, etc.@: respect a similar format to
 ## @var{x}, etc., and they represent the points at which the array @var{vi}
 ## is interpolated using interp3.  The vectors @var{sx}, @var{sy}, and
 ## @var{sz} contain points of orthogonal slices of the respective axes.
 ##
 ## If @var{x}, @var{y}, @var{z} are omitted, they are assumed to be
 ## @code{x = 1:size (@var{v}, 2)}, @code{y = 1:size (@var{v}, 1)} and
 ## @code{z = 1:size (@var{v}, 3)}.
 ##
