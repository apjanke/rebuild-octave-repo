# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1336351009 -7200
#      Mon May 07 02:36:49 2012 +0200
# Branch gui
# Node ID c8453a013000e4dc27db517f77206f09f9d2d134
# Parent  772ce0204b3f2cf232fb580f1a1ac0fe90cea0c9
Cleaned up code. Fixed bug that causes the GUI to freeze when launching another editor.

* FileEditor: Now the call of another process returns immediately. Adjusted text when closing a file.
* MainWindow: Moved creating a lexer into the constructor.

diff --git a/gui/src/FileEditor.cpp b/gui/src/FileEditor.cpp
--- a/gui/src/FileEditor.cpp
+++ b/gui/src/FileEditor.cpp
@@ -33,28 +33,33 @@ FileEditor::FileEditor (QWidget * parent
 
 FileEditor::~FileEditor ()
 {
 }
 
 void
 FileEditor::closeEvent(QCloseEvent *event)
 {
-  if ( m_mainWindow->isCloseApplication() )
+  if ( m_mainWindow->closing () )
     {
       // close wohle application: save file or not if modified
-      checkFileModified ("Close Octave GUI",0); // no cancel possible
+      checkFileModified ("Closing Octave", 0); // no cancel possible
+      event->accept ();
     }
   else
     {
       // ignore close event if file is not saved and user cancels closing this window
-      if (checkFileModified ("Close File",QMessageBox::Cancel)==QMessageBox::Cancel)
-        event->ignore();
+      if (checkFileModified ("Close File",QMessageBox::Cancel) == QMessageBox::Cancel)
+        {
+          event->ignore ();
+        }
       else
-        event->accept();
+        {
+          event->accept();
+        }
     }
 }
 
 void
 FileEditor::handleMarginClicked(int margin, int line, Qt::KeyboardModifiers state)
 {
   Q_UNUSED (state);
   if ( margin == 1 )  // marker margin
diff --git a/gui/src/FilesDockWidget.cpp b/gui/src/FilesDockWidget.cpp
--- a/gui/src/FilesDockWidget.cpp
+++ b/gui/src/FilesDockWidget.cpp
@@ -120,17 +120,17 @@ FilesDockWidget::itemDoubleClicked (cons
     {
       // Check if the user wants to use a custom file editor.
       QSettings *settings = ResourceManager::instance ()->settings ();
       if (settings->value ("useCustomFileEditor").toBool ())
         {
           QString editor = settings->value ("customFileEditor").toString ();
           QStringList arguments;
           arguments << fileInfo.filePath ();
-          QProcess::execute (editor, arguments);
+          QProcess::startDetached (editor, arguments);
         }
       else
         {
           emit openFile (fileInfo.filePath ());
         }
     }
 }
 
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -50,50 +50,19 @@ MainWindow::newFile ()
   newEditorWindow(QString());
 }
 
 void
 MainWindow::newEditorWindow (QString fileName)
 {
   FileEditor *fileEditor = new FileEditor ();
   fileEditor->setAttribute (Qt::WA_DeleteOnClose);
-  // check whether lexer is already prepared and prepare it if not
-  if ( m_lexer == NULL )
-    {
-      // this has to be done only once, not for each editor
-      m_lexer = new LexerOctaveGui();
-      // Editor font (default or from settings)
-      QSettings *settings = ResourceManager::instance ()->settings ();
-      m_lexer->setDefaultFont( QFont(
-                  settings->value ("editor/fontName","Courier").toString (),
-                  settings->value ("editor/fontSize",10).toInt () ) );
-      // TODO: Autoindent not working as it should
-      m_lexer->setAutoIndentStyle(QsciScintilla::AiMaintain ||
-                                  QsciScintilla::AiOpening  ||
-                                  QsciScintilla::AiClosing);
-      // The API info that is used for auto completion
-      // TODO: Where to store a file with API info (raw or prepared?)?
-      // TODO: Also provide infos on octave-forge functions?
-      // TODO: Also provide infos on function parameters?
-      // By now, use the keywords-list from syntax highlighting
-       m_lexerAPI = new QsciAPIs(m_lexer);
-       QString keyword;
-       QStringList keywordList;
-       keyword     = m_lexer->keywords(1);  // get whole string with all keywords
-       keywordList = keyword.split(QRegExp("\\s+"));  // split into single strings
-       int i;
-       for ( i=0; i<keywordList.size(); i++ )
-         {
-           m_lexerAPI->add(keywordList.at(i));  // add single strings to the API
-         }
-       m_lexerAPI->prepare();           // prepare API info ... this make take some time
-    }
   fileEditor->initEditor(m_terminalView, m_lexer, this);   // init necessary informations for editor
 
-  if ( fileName.isEmpty() )
+  if (fileName.isEmpty ())
     fileEditor->newFile ();
   else
     fileEditor->loadFile (fileName);
 }
 
 
 void
 MainWindow::reportStatusMessage (QString statusMessage)
@@ -200,17 +169,17 @@ MainWindow::showAboutOctave ()
   QMessageBox::about (this, tr ("About Octave"), message);
 }
 
 void
 MainWindow::closeEvent (QCloseEvent * closeEvent)
 {
   reportStatusMessage (tr ("Saving data and shutting down."));
   writeSettings ();
-  m_closeApplication = true;  // inform editor window that whole application is closed
+  m_closing = true;  // inform editor window that whole application is closed
   OctaveLink::instance ()->terminateOctave();
 
   QMainWindow::closeEvent (closeEvent);
 }
 
 void
 MainWindow::readSettings ()
 {
@@ -227,17 +196,17 @@ MainWindow::writeSettings ()
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->setValue ("MainWindow/windowState", saveState ());
 }
 
 void
 MainWindow::construct ()
 {
   // TODO: Check this.
-  m_closeApplication = false;   // flag for editor files when closed
+  m_closing = false;   // flag for editor files when closed
   setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Octave));
 
   // Setup dockable widgets and the status bar.
   m_workspaceView = new WorkspaceView (this);
   m_workspaceView->setStatusTip (tr ("View the variables in the active workspace."));
   m_historyDockWidget = new HistoryDockWidget (this);
   m_historyDockWidget->setStatusTip (tr ("Browse and search the command history."));
   m_filesDockWidget = new FilesDockWidget (this);
@@ -310,12 +279,44 @@ MainWindow::construct ()
 
   setWindowTitle ("Octave");
 
   addDockWidget (Qt::LeftDockWidgetArea, m_workspaceView);
   addDockWidget (Qt::LeftDockWidgetArea, m_historyDockWidget);
   addDockWidget (Qt::RightDockWidgetArea, m_filesDockWidget);
   setStatusBar (m_statusBar);
 
+  // this has to be done only once, not for each editor
+  m_lexer = new LexerOctaveGui ();
+
+  // Editor font (default or from settings)
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  m_lexer->setDefaultFont (QFont (
+              settings->value ("editor/fontName","Courier").toString (),
+              settings->value ("editor/fontSize",10).toInt ()));
+
+  // TODO: Autoindent not working as it should
+  m_lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
+                               QsciScintilla::AiOpening  ||
+                               QsciScintilla::AiClosing);
+
+  // The API info that is used for auto completion
+  // TODO: Where to store a file with API info (raw or prepared?)?
+  // TODO: Also provide infos on octave-forge functions?
+  // TODO: Also provide infos on function parameters?
+  // By now, use the keywords-list from syntax highlighting
+   m_lexerAPI = new QsciAPIs (m_lexer);
+
+   QString keyword;
+   QStringList keywordList;
+   keyword = m_lexer->keywords (1);  // get whole string with all keywords
+   keywordList = keyword.split (QRegExp ("\\s+"));  // split into single strings
+   int i;
+   for (i=0; i<keywordList.size(); i++)
+     {
+       m_lexerAPI->add (keywordList.at (i));  // add single strings to the API
+     }
+   m_lexerAPI->prepare ();           // prepare API info ... this make take some time
+
   readSettings ();
   updateTerminalFont();
 }
 
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -62,19 +62,19 @@ Q_OBJECT public:
   HistoryDockWidget *historyDockWidget ()
   {
     return m_historyDockWidget;
   }
   FilesDockWidget *filesDockWidget ()
   {
     return m_filesDockWidget;
   }
-  bool isCloseApplication ()
+  bool closing ()
   {
-    return m_closeApplication;
+    return m_closing;
   }
 
 signals:
   void settingsChanged ();
 
 public slots:
   void openExistingFile (QString fileName);
   void reportStatusMessage (QString statusMessage);
@@ -110,12 +110,12 @@ private:
   // Editor's lexer
   LexerOctaveGui *m_lexer;
   QsciAPIs *m_lexerAPI;
 
   // Toolbars.
   QStatusBar *m_statusBar;
 
   // Flag for closing whole application
-  bool m_closeApplication;
+  bool m_closing;
 };
 
 #endif // MAINWINDOW_H
