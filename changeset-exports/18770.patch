# HG changeset patch
# User Rik <rik@octave.org>
# Date 1400448024 25200
#      Sun May 18 14:20:24 2014 -0700
# Node ID be8d7721ac16058852e5446f021f593672555cc0
# Parent  ff39ddf84a1972b0132198d5b58f02c69ca81695
Use OpenGL line smoothing when multisample is not available.

* gl-render.cc (opengl_renderer::init_gl_context): Check whether multisample is
enabled and use GL_LINE_SMOOTH if it is not.
* gl-render.cc (opengl_renderer::setup_opengl_transformation).  Remove call to
disable GL_LINE_SMOOTH.
* gl-render.cc (opengl_renderer::draw_axes_children): Remove call to enable
GL_LINE_SMOOTH.
* gl-render.cc (opengl_renderer::draw_axes): Disable GL_LINE_SMOOTH for axes
lines, but re-enable for axes children.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -617,17 +617,27 @@ opengl_renderer::init_gl_context (bool e
   glDepthFunc (GL_LEQUAL);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glAlphaFunc (GL_GREATER, 0.0f);
   glEnable (GL_NORMALIZE);
 
   if (enhanced)
     {
       glEnable (GL_BLEND);
-      glEnable (GL_LINE_SMOOTH);
+      glEnable (GL_MULTISAMPLE);
+      GLint iMultiSample, iNumSamples;
+      glGetIntegerv (GL_SAMPLE_BUFFERS, &iMultiSample);
+      glGetIntegerv (GL_SAMPLES, &iNumSamples);
+      if (iMultiSample != GL_TRUE || iNumSamples == 0)
+        {
+          // MultiSample not implemented.  Use old-style anti-aliasing
+          glDisable (GL_MULTISAMPLE);
+          glEnable (GL_LINE_SMOOTH);
+          glHint (GL_LINE_SMOOTH_HINT, GL_NICEST);
+        }
     }
   else
     {
       glDisable (GL_BLEND);
       glDisable (GL_LINE_SMOOTH);
     }
 
   // Clear background
@@ -812,18 +822,16 @@ opengl_renderer::setup_opengl_transforma
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
   glMultMatrixd (x_mat2.data ());
   glMatrixMode (GL_MODELVIEW);
 
   glClear (GL_DEPTH_BUFFER_BIT);
 
-  glDisable (GL_LINE_SMOOTH);
-
   // store axes transformation data
 
   xform = props.get_transform ();
 }
 
 void
 opengl_renderer::draw_axes_planes (const axes::properties& props)
 {
@@ -1335,22 +1343,16 @@ opengl_renderer::draw_axes_z_grid (const
     gh_manager::get_object (props.get_zlabel ()).set ("visible", "off");
 }
 
 void
 opengl_renderer::draw_axes_children (const axes::properties& props)
 {
   // Children
 
-  GLboolean antialias;
-  glGetBooleanv (GL_LINE_SMOOTH, &antialias);
-
-  if (antialias == GL_TRUE)
-    glEnable (GL_LINE_SMOOTH);
-
   Matrix children = props.get_all_children ();
   std::list<graphics_object> obj_list;
   std::list<graphics_object>::iterator it;
 
   // 1st pass: draw light objects
 
   // Start with the last element of the array of child objects to
   // display them in the order they were added to the array.
@@ -1424,31 +1426,41 @@ opengl_renderer::draw_axes (const axes::
       || x_min < -floatmax || y_min < -floatmax || z_min < -floatmax)
     {
       warning ("opengl_renderer: data values greater than float capacity.  (1) Scale data, or (2) Use gnuplot");
       return;
     }
 
   setup_opengl_transformation (props);
 
+  // Disable line smoothing for axes 
+  GLboolean antialias;
+  glGetBooleanv (GL_LINE_SMOOTH, &antialias);
+  if (antialias == GL_TRUE)
+    glDisable (GL_LINE_SMOOTH);
+
   // draw axes object
 
   draw_axes_planes (props);
   draw_axes_boxes (props);
 
   set_font (props);
 
   draw_axes_x_grid (props);
   draw_axes_y_grid (props);
   draw_axes_z_grid (props);
 
   set_linestyle ("-");
 
   set_clipbox (x_min, x_max, y_min, y_max, z_min, z_max);
 
+  // Re-enable line smoothing for children
+  if (antialias == GL_TRUE)
+    glEnable (GL_LINE_SMOOTH);
+
   draw_axes_children (props);
 }
 
 void
 opengl_renderer::draw_line (const line::properties& props)
 {
   Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
   Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
