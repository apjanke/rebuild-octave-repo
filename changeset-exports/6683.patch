# HG changeset patch
# User dbateman
# Date 1180739456 0
#      Fri Jun 01 23:10:56 2007 +0000
# Node ID a2f697dca2a4179709a005237e8485e5f3d16c59
# Parent  1e440ccda1caf936a338573a3614215e53c4c832
[project @ 2007-06-01 23:10:24 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2007-06-01  David Bateman  <dbateman@free.fr>
+
+	* pkg.m (pkg:is_superuser): Remove function used in one place and
+	incorporate into main pkg function.
+	(pkg:install): Check for existence of files to install before
+	globbing and warn the user if they don't exist.
+
 2007-05-31  David Bateman  <dbateman@free.fr>
 
 	* miscellaneous/copyfile.m: Split copying of multiple files to a 
 	directory over several copy command to limit the line length.
 	* miscellaneous/movefile.m: Ditto.
 	
 	* pkg.m: Add build option to allow binary Octave packages to be
 	built from source packages. Probe absolute path of prefix, global
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -173,17 +173,22 @@ function [local_packages, global_package
   ## Installation prefix (XXX: what should these be on windows?)
   persistent user_prefix = false;
   persistent prefix = -1;
   persistent local_list = tilde_expand (fullfile("~", ".octave_packages"));
   persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave",
 				     "octave_packages");
   mlock ();
 
-  global_install = issuperuser ();
+  if (ispc () && ! isunix ())
+    global_install = 1;
+  else
+    global_install = (geteuid() == 0);
+  endif
+
   if (prefix == -1)
     if (global_install)
       prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
     else
       prefix = fullfile ("~", "octave");
     endif
     prefix = tilde_expand (prefix);
   endif
@@ -459,16 +464,24 @@ function install (files, handle_deps, au
     packages = global_packages;
   else
     packages = local_packages;
   endif
 
   ## Uncompress the packages and read the DESCRIPTION files
   tmpdirs = packdirs = descriptions = {};
   try
+
+    ## Warn about non existent files 
+    for i = 1:length (files)
+      if (isempty (glob(files{i}))) 
+	warning ("file %s does not exist", files{i});
+      endif
+    endfor
+
     ## Unpack the package files and read the DESCRIPTION files
     files = glob (files);
     packages_to_uninstall = [];
     for i = 1:length (files)
       tgz = files{i};
 
       if (exist (tgz, "file"))
 	## Create a temporary directory 
@@ -526,18 +539,16 @@ function install (files, handle_deps, au
 	  ## Are any of the new packages already installed?
 	  ## If so we'll remove the old version.
 	  for j = 1:length (packages)
 	    if (strcmp (packages{j}.name, desc.name))
 	      packages_to_uninstall(end+1) = j;
 	    endif
 	  endfor
 	endfor        
-      else
-	warning ("file %s does not exist", tgz);
       endif
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     rethrow (lasterror ());
@@ -1237,25 +1248,16 @@ function finish_installation (desc, pack
       cd (wd);
       rm_rf (desc.dir);
       error ("the post_install function returned the following error: %s",
 	     lasterr ());
     end_try_catch
   endif
 endfunction
 
-function out = issuperuser ()
-  if (ispc () && ! isunix ())
-    out = 1;
-  else
-    ## Need to be a bit presistent in probing superuser
-    out = (geteuid() == 0);
-  endif
-endfunction
-
 ## This function makes sure the package contains the
 ## essential files.
 function verify_directory (dir)
   needed_files = {"COPYING", "DESCRIPTION"};
   for f = needed_files
     if (! exist (fullfile (dir, f{1}), "file"))
       error ("package is missing file: %s", f{1});
     endif
