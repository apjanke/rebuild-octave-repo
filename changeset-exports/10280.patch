# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265697361 -3600
#      Tue Feb 09 07:36:01 2010 +0100
# Node ID b122dd3075ce6331331c794fee092f22d7467ab9
# Parent  323c9cbbd02a487c0294122cbbb7f67acaf72e73
vectorize substruct

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* miscellaneous/substruct.m: Vectorize.
+
 2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Document complexity.
 
 2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Add new test that also forces index cache
 	generation for faster sorting.
diff --git a/scripts/miscellaneous/substruct.m b/scripts/miscellaneous/substruct.m
--- a/scripts/miscellaneous/substruct.m
+++ b/scripts/miscellaneous/substruct.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2006, 2007 John W. Eaton
+## Copyright (C) 2010 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -45,56 +46,45 @@
 
 ## Author:  jwe
 
 function retval = substruct (varargin)
 
   nargs = nargin;
 
   if (nargs > 1 && mod (nargs, 2) == 0)
-    narg_pairs = nargs / 2;
-    typ = cell (1, narg_pairs);
-    sub = cell (1, narg_pairs);
-    k = 1;
-    for i = 1:2:nargs
-      t = varargin{i};
-      dot = false;
-      switch (t)
-	case { "()", "{}" }
-	case "."
-	  dot = true;
-	otherwise
-	  error ("substruct: expecting type to be one of \"()\", \"{}\", or \".\"");
-      endswitch
-      s = varargin{i+1};
-      if (dot)
-	if (! ischar (s))
-	  error ("substruct: for type == %s, subs must be a character string", t);
-	endif
-      elseif (! (iscell (s) || (ischar (s) && strcmp (s, ":"))))
-	error ("substruct: for type == %s, subs must be a cell array or \":\"",
-	       t);
+    typ = varargin(1:2:nargs);
+    sub = varargin(2:2:nargs);
+    braces = strcmp (typ, "()") | strcmp (typ, "{}");
+    dots = strcmp (typ, ".");
+    if (all (braces | dots))
+      cells = cellfun ("isclass", sub, "cell");
+      chars = cellfun ("isclass", sub, "char");
+      if (any (braces &! cells))
+	error ("substruct: for type == () or {}, subs must be a cell array");
+      elseif (any (dots &! chars))
+        error ("substruct: for type == ., subs must be a character string");
       endif
-      typ{k} = t;
-      sub{k} = s;
-      k++;
-    endfor
+    else
+      error ("substruct: expecting type to be one of \"()\", \"{}\", or \".\"");
+    endif
+
     retval = struct ("type", typ, "subs", sub);
   else
     print_usage ();
   endif
 
 endfunction
 
 %!test
 %! x(1,1).type = "()";
 %! x(1,2).type = "{}";
 %! x(1,3).type = ".";
 %! x(1,1).subs = {1,2,3};
-%! x(1,2).subs = ":";
+%! x(1,2).subs = {":"};
 %! x(1,3).subs = "foo";
-%! y = substruct ("()", {1,2,3}, "{}", ":", ".", "foo");
+%! y = substruct ("()", {1,2,3}, "{}", {":"}, ".", "foo");
 %! assert(x,y);
 %!error assert(substruct);
 %!error assert(substruct (1, 2, 3));
 %!error assert(substruct ("x", 1));
 %!error assert(substruct ("()", [1,2,3]));
 %!error assert(substruct (".", {1,2,3}));
