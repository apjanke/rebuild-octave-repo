# HG changeset patch
# User jwe
# Date 1134075710 0
#      Thu Dec 08 21:01:50 2005 +0000
# Node ID 3074a549d64455f28783591c40c9007f42ecf8bf
# Parent  f7b4dfd541d13a2fc6cd8a4fafea03fb2784771a
[project @ 2005-12-08 21:01:50 by jwe]

diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -110,16 +110,41 @@ Cell::assign (const octave_value_list& i
     set_index (idx_arg(i).index_vector ());
 
   ::assign (*this, rhs, fill_val);
 
   return *this;
 }
 
 Cell
+Cell::column (octave_idx_type i) const
+{
+  Cell retval;
+
+  if (ndims () < 3)
+    {
+      if (i < 0 || i >= cols ())
+	error ("invalid column selection");
+      else
+	{
+	  octave_idx_type nr = rows ();
+
+	  retval.resize (dim_vector (nr, 1));
+
+	  for (octave_idx_type j = 0; j < nr; j++)
+	    retval.xelem (j) = elem (j, i);
+	}
+    }
+  else
+    error ("Cell::column: requires 2-d cell array");
+
+  return retval;
+}
+
+Cell
 Cell::concat (const Cell& rb, const Array<octave_idx_type>& ra_idx)
 {
   return insert (rb, ra_idx);
 }
 
 Cell&
 Cell::insert (const Cell& a, octave_idx_type r, octave_idx_type c)
 {
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -85,16 +85,18 @@ public:
     { return Cell (ArrayN<octave_value>::index (ra_idx, resize_ok, rfv)); }
 
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = octave_value ());
 
   Cell reshape (const dim_vector& new_dims) const
     { return ArrayN<octave_value>::reshape (new_dims); }
 
+  Cell column (octave_idx_type i) const;
+
   // XXX FIXME XXX
   boolMatrix all (int /* dim */ = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
   boolMatrix any (int /* dim */ = 0) const { return boolMatrix (); }
 
   Cell concat (const Cell& rb, const Array<octave_idx_type>& ra_idx);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
+2005-12-08  John W. Eaton  <jwe@octave.org>
+
+	* Cell.cc (Cell::column): New function.
+	* pt-loop.cc (DO_ND_LOOP): Simplify.
+	(simple_for_loop_command::eval): Correctly handle N-d numeric and
+	cell arrays when only the first dimension is 0.
+
 2005-12-07  John W. Eaton  <jwe@octave.org>
 
+	* lex.l (NL): Also accept '\r'.
+
 	* error.cc (Vbacktrace_on_warning, warning_options,
 	Vlast_warning_id, Vlast_error_id): New file-scope variables.
 	(Vwarning_frequency, Vwarning_option): Delete unused variables.
 	(set_warning_option): Delete unused function.
 	(Fwarning): Update for compatibility.  Use DEFCMD, not DEFUN.
 	(warning_enabled, check_state): New functions.
 	(warning (const char *fmt, ...)): Use it.
 	(init_warning_options): New function.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -270,17 +270,17 @@ static void gripe_matlab_incompatible (c
 static void maybe_gripe_matlab_incompatible_comment (char c);
 static void gripe_matlab_incompatible_continuation (void);
 static void gripe_matlab_incompatible_operator (const std::string& op);
 
 %}
 
 D	[0-9]
 S	[ \t]
-NL	((\n)|(\r\n))
+NL	((\n)|(\r)|(\r\n))
 SNL	({S}|{NL})
 EL	(\.\.\.)
 BS	(\\)
 CONT	({EL}|{BS})
 Im	[iIjJ]
 CCHAR	[#%]
 COMMENT	({CCHAR}.*{NL})
 SNLCMT	({SNL}|{COMMENT})
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -233,47 +233,44 @@ tree_simple_for_command::do_for_loop_onc
 	  do_for_loop_once (ult, val, quit); \
  \
 	  if (quit) \
 	    break; \
 	} \
     } \
   while (0)
 
-#define DO_ND_LOOP(arg) \
+#define DO_ND_LOOP(TYPE, ARG) \
   do \
     { \
-      int ndims = dv.length (); \
-      Array<idx_vector> idx; \
-      octave_idx_type steps = dv.numel () / dv (0); \
-      idx.resize (ndims, idx_vector (static_cast<octave_idx_type> (1))); \
-      idx (0) = idx_vector (':'); \
+      octave_idx_type steps = dv(1); \
  \
       for (octave_idx_type i = 0; i < steps; i++) \
 	{ \
 	  MAYBE_DO_BREAKPOINT; \
  \
-	  octave_value val (arg.index(idx)); \
+          TYPE tmp; \
+ \
+          int nr = ARG.rows (); \
+ \
+	  tmp.resize (dim_vector (nr, 1)); \
+ \
+	  for (int j = 0; j < nr; j++) \
+	    tmp.xelem (j) = ARG.xelem (j, i); \
+ \
+          octave_value val (tmp); \
  \
 	  bool quit = false; \
  \
 	  do_for_loop_once (ult, val, quit); \
 	  quit = (i == steps - 1 ? true : quit); \
  \
 	  if (quit) \
 	    break; \
  \
-	  for (int j = 1; j < ndims; j++) \
-	    { \
-	      idx(j) = idx_vector (idx(j)(0) + 2); \
-	      if (idx(j)(0) < dv(j)) \
-		break; \
-	      else \
-		idx(j) = idx_vector (static_cast<octave_idx_type> (1)); \
-	    } \
 	} \
     } \
   while (0)
 
 void
 tree_simple_for_command::eval (void)
 {
   if (error_state)
@@ -377,22 +374,37 @@ tree_simple_for_command::eval (void)
 	  {
 	    cm_tmp = rhs.complex_array_value ();
 	    dv = cm_tmp.dims ();
 	  }
 
 	if (error_state)
 	  goto cleanup;
 
-	if (dv.numel () > 0)
+	// XXX FIXME XXX -- maybe we need a function for this?
+	int ndims = dv.length ();
+	for (int i = 2; i < ndims; i++)
+	  dv(1) *= dv(i);
+
+	if (dv(1) > 0)
 	  {
 	    if (rhs.is_real_type ())
-	      DO_ND_LOOP(m_tmp);
+	      {
+		if (ndims > 2)
+		  m_tmp = m_tmp.reshape (dv);
+
+		DO_ND_LOOP(NDArray, m_tmp);
+	      }
 	    else
-	      DO_ND_LOOP(cm_tmp);
+	      {
+		if (ndims > 2)
+		  cm_tmp = cm_tmp.reshape (dv);
+
+		DO_ND_LOOP(ComplexNDArray, cm_tmp);
+	      }
 	  }
       }
     else if (rhs.is_map ())
       {
 	Octave_map tmp_val (rhs.map_value ());
 
 	for (Octave_map::iterator p = tmp_val.begin ();
 	     p != tmp_val.end ();
@@ -414,18 +426,28 @@ tree_simple_for_command::eval (void)
 	  }
       }
     else if (rhs.is_cell ())
       {
 	Cell c_tmp = rhs.cell_value ();
 
 	dim_vector dv = c_tmp.dims ();
 
-	if (dv.numel () > 0)
-	  DO_ND_LOOP(c_tmp);
+	// XXX FIXME XXX -- maybe we need a function for this?
+	int ndims = dv.length ();
+	for (int i = 2; i < ndims; i++)
+	  dv(1) *= dv(i);
+
+	if (dv(1) > 0)
+	  {
+	    if (ndims > 2)
+	      c_tmp = c_tmp.reshape (dv);
+
+	    DO_ND_LOOP(Cell, c_tmp);
+	  }
       }
     else
       {
 	::error ("invalid type in for loop expression near line %d, column %d",
 		 line (), column ());
       }
   }
 
