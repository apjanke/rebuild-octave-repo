# HG changeset patch
# User Rik <rik@octave.org>
# Date 1386288674 28800
#      Thu Dec 05 16:11:14 2013 -0800
# Node ID b560bac0fca29b7af17d6caa52f9de3e9c1264f9
# Parent  2217bc116aa96530e0ad145af57a6d3ee9ce2fc9
maint: Don't use space between 'args' and '(' when doing indexing.

* libinterp/corefcn/__contourc__.cc, libinterp/corefcn/__pchip_deriv__.cc,
libinterp/corefcn/besselj.cc, libinterp/corefcn/bsxfun.cc,
libinterp/corefcn/cellfun.cc, libinterp/corefcn/data.cc,
libinterp/corefcn/dlmread.cc, libinterp/corefcn/file-io.cc,
libinterp/corefcn/graphics.cc, libinterp/corefcn/help.cc,
libinterp/corefcn/lu.cc, libinterp/corefcn/matrix_type.cc,
libinterp/corefcn/pr-output.cc, libinterp/corefcn/sparse.cc,
libinterp/corefcn/strfns.cc, libinterp/corefcn/syscalls.cc,
libinterp/corefcn/tril.cc:
maint: Don't use space between 'args' and '(' when indexing.

diff --git a/libinterp/corefcn/__contourc__.cc b/libinterp/corefcn/__contourc__.cc
--- a/libinterp/corefcn/__contourc__.cc
+++ b/libinterp/corefcn/__contourc__.cc
@@ -302,20 +302,20 @@ DEFUN (__contourc__, args, ,
 @deftypefn {Built-in Function} {} __contourc__ (@var{x}, @var{y}, @var{z}, @var{levels})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 4)
     {
-      RowVector X = args (0).row_vector_value ();
-      RowVector Y = args (1).row_vector_value ();
-      Matrix Z = args (2).matrix_value ();
-      RowVector L = args (3).row_vector_value ();
+      RowVector X = args(0).row_vector_value ();
+      RowVector Y = args(1).row_vector_value ();
+      Matrix Z = args(2).matrix_value ();
+      RowVector L = args(3).row_vector_value ();
 
       if (! error_state)
         {
           contourc.resize (2, 0);
 
           for (int i = 0; i < L.length (); i++)
             cntr (X, Y, Z, L (i));
 
diff --git a/libinterp/corefcn/__pchip_deriv__.cc b/libinterp/corefcn/__pchip_deriv__.cc
--- a/libinterp/corefcn/__pchip_deriv__.cc
+++ b/libinterp/corefcn/__pchip_deriv__.cc
@@ -54,17 +54,17 @@ DEFUN (__pchip_deriv__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __pchip_deriv__ (@var{x}, @var{y}, @var{dim})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
   const int nargin = args.length ();
 
-  bool rows = (nargin == 3 && args (2).uint_value () == 2);
+  bool rows = (nargin == 3 && args(2).uint_value () == 2);
 
   if (nargin >= 2)
     {
       if (args(0).is_single_type () || args(1).is_single_type ())
         {
           FloatColumnVector xvec (args(0).float_vector_value ());
           FloatMatrix ymat (args(1).float_matrix_value ());
 
diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -593,17 +593,17 @@ return @code{NaN}.\n\
           else
             error ("airy: K must be an integer value");
         }
 
       if (! error_state)
         {
           int idx = nargin == 1 ? 0 : 1;
 
-          if (args (idx).is_single_type ())
+          if (args(idx).is_single_type ())
             {
               FloatComplexNDArray z = args(idx).float_complex_array_value ();
 
               if (! error_state)
                 {
                   Array<octave_idx_type> ierr;
                   octave_value result;
 
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -347,18 +347,18 @@ dimensionality as the other array.\n\
           func = symbol_table::find_function (name);
           if (func.is_undefined ())
             error ("bsxfun: invalid function name: %s", name.c_str ());
         }
       else if (! (args(0).is_function_handle ()
                || args(0).is_inline_function ()))
         error ("bsxfun: F must be a string or function handle");
 
-      const octave_value A = args (1);
-      const octave_value B = args (2);
+      const octave_value A = args(1);
+      const octave_value B = args(2);
 
       if (func.is_builtin_function ()
           || (func.is_function_handle ()
               && ! A.is_object () && ! B.is_object ()))
         {
           // This may break if the default behavior is overriden.  But if you
           // override arithmetic operators for builtin classes, you should
           // expect mayhem anyway (constant folding etc).  Querying
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1897,17 +1897,17 @@ num2cell ([1,2;3,4],1)\n\
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   else
     {
       octave_value array = args(0);
       Array<int> dimv;
       if (nargin > 1)
-        dimv = args (1).int_vector_value (true);
+        dimv = args(1).int_vector_value (true);
 
       if (error_state)
         ;
       else if (array.is_bool_type ())
         retval = do_num2cell (array.bool_array_value (), dimv);
       else if (array.is_char_matrix ())
         retval = do_num2cell (array.char_array_value (), dimv);
       else if (array.is_numeric_type ())
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1832,36 +1832,36 @@ do_cat (const octave_value_list& xargs, 
           // an empty matrix and copy all data.
           //
           // We might also start with a empty octave_value using
           //   tmp = octave_value_typeinfo::lookup_type
           //                                (args(1).type_name());
           // and then directly resize. However, for some types there might
           // be some additional setup needed, and so this should be avoided.
 
-          octave_value tmp = args (0);
+          octave_value tmp = args(0);
           tmp = tmp.resize (dim_vector (0,0)).resize (dv);
 
           if (error_state)
             return retval;
 
           int dv_len = dv.length ();
           Array<octave_idx_type> ra_idx (dim_vector (dv_len, 1), 0);
 
           for (int j = 0; j < n_args; j++)
             {
               // Can't fast return here to skip empty matrices as something
               // like cat (1,[],single ([])) must return an empty matrix of
               // the right type.
-              tmp = do_cat_op (tmp, args (j), ra_idx);
+              tmp = do_cat_op (tmp, args(j), ra_idx);
 
               if (error_state)
                 return retval;
 
-              dim_vector dv_tmp = args (j).dims ();
+              dim_vector dv_tmp = args(j).dims ();
 
               if (dim >= dv_len)
                 {
                   if (j > 1)
                     error ("%s: indexing error", fname.c_str ());
                   break;
                 }
               else
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -267,17 +267,17 @@ fill empty fields.  The default is zero.
   octave_idx_type r0 = 0;
   octave_idx_type c0 = 0;
   octave_idx_type r1 = idx_max-1;
   octave_idx_type c1 = idx_max-1;
   if (nargin > 2)
     {
       if (nargin == 3)
         {
-          if (!parse_range_spec (args (2), r0, c0, r1, c1))
+          if (!parse_range_spec (args(2), r0, c0, r1, c1))
             error ("dlmread: error parsing RANGE");
         }
       else if (nargin == 4)
         {
           r0 = args(2).idx_type_value ();
           c0 = args(3).idx_type_value ();
 
           if (error_state)
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -266,17 +266,17 @@ Clear the stream state for the specified
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      int fid = octave_stream_list::get_file_number (args (0));
+      int fid = octave_stream_list::get_file_number (args(0));
 
       octave_stream os = octave_stream_list::lookup (fid, "fclear");
 
       if (! error_state)
         os.clearerr ();
     }
   else
     print_usage ();
@@ -300,17 +300,17 @@ stream before calling @code{input}.\n\
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       // FIXME: any way to avoid special case for stdout?
 
-      int fid = octave_stream_list::get_file_number (args (0));
+      int fid = octave_stream_list::get_file_number (args(0));
 
       if (fid == 1)
         {
           flush_octave_stdout ();
 
           retval = 0;
         }
       else
@@ -1333,17 +1333,17 @@ programs.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   octave_value_list tmp_args (nargin+1, octave_value ());
 
   tmp_args (0) = 0.0;
   for (int i = 0; i < nargin; i++)
-    tmp_args (i+1) = args (i);
+    tmp_args(i+1) = args(i);
 
   return Ffscanf (tmp_args, nargout);
 }
 
 static octave_value
 do_fread (octave_stream& os, const octave_value& size_arg,
           const octave_value& prec_arg, const octave_value& skip_arg,
           const octave_value& arch_arg, octave_idx_type& count)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9389,17 +9389,17 @@ Undocumented internal function.\n\
   gh_manager::auto_lock guard;
 
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       graphics_handle h = octave_NaN;
 
-      const NDArray vals = args (0).array_value ();
+      const NDArray vals = args(0).array_value ();
 
       if (! error_state)
         {
           // Check is all the handles to delete are valid first
           // as callbacks might delete one of the handles we
           // later want to delete
           for (octave_idx_type i = 0; i < vals.numel (); i++)
             {
@@ -10186,17 +10186,17 @@ set_property_in_handle (double handle, c
     error ("%s: invalid handle (= %g)", func.c_str (), handle);
 
   return ret;
 }
 
 static bool
 compare_property_values (const octave_value& o1, const octave_value& o2)
 {
-  octave_value_list args (2);
+  octave_value_list args(2);
 
   args(0) = o1;
   args(1) = o2;
 
   octave_value_list result = feval ("isequal", args, 1);
 
   if (! error_state && result.length () > 0)
     return result(0).bool_value ();
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -1070,17 +1070,17 @@ The raw help text is returned in @var{te
 The format is a string which is one of @qcode{\"texinfo\"},\n\
 @qcode{\"html\"}, or @qcode{\"plain text\"}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
-      const std::string name = args (0).string_value ();
+      const std::string name = args(0).string_value ();
 
       if (! error_state)
         {
           std::string text;
           std::string format;
 
           do_get_help_text (name, text, format);
 
@@ -1359,17 +1359,17 @@ Undocumented internal function.\n\
   // Get list of functions
   string_vector ffl = load_path::fcn_names ();
   string_vector afl = autoloaded_functions ();
 
   if (args.length () == 0)
     retval = Cell (ffl.append (afl));
   else
     {
-      std::string dir = args (0).string_value ();
+      std::string dir = args(0).string_value ();
 
       if (! error_state)
         {
           string_vector fl = load_path::files (dir, true);
 
           if (! error_state)
             {
               // Return a sorted list with unique entries (in case of
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -153,17 +153,17 @@ information.\n\
     }
 
   bool vecout = false;
   Matrix thres;
 
   int n = 1;
   while (n < nargin && ! error_state)
     {
-      if (args (n).is_string ())
+      if (args(n).is_string ())
         {
           std::string tmp = args(n++).string_value ();
 
           if (! error_state )
             {
               if (tmp.compare ("vector") == 0)
                 vecout = true;
               else
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -276,17 +276,17 @@ LU@tie{}factorization.  Once the matrix 
                     error ("matrix_type: Unknown matrix type %s", str_typ.c_str ());
 
                   if (! error_state)
                     {
                       if (nargin == 3
                           && (str_typ == "upper" || str_typ == "lower"))
                         {
                           const ColumnVector perm =
-                            ColumnVector (args (2).vector_value ());
+                            ColumnVector (args(2).vector_value ());
 
                           if (error_state)
                             error ("matrix_type: Invalid permutation vector PERM");
                           else
                             {
                               octave_idx_type len = perm.length ();
                               dim_vector dv = args(0).dims ();
 
@@ -449,17 +449,17 @@ LU@tie{}factorization.  Once the matrix 
                            str_typ.c_str ());
 
                   if (! error_state)
                     {
                       if (nargin == 3 && (str_typ == "upper"
                                           || str_typ == "lower"))
                         {
                           const ColumnVector perm =
-                            ColumnVector (args (2).vector_value ());
+                            ColumnVector (args(2).vector_value ());
 
                           if (error_state)
                             error ("matrix_type: Invalid permutation vector PERM");
                           else
                             {
                               octave_idx_type len = perm.length ();
                               dim_vector dv = args(0).dims ();
 
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3537,17 +3537,17 @@ Note that the output from @code{fdisp} a
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      int fid = octave_stream_list::get_file_number (args (0));
+      int fid = octave_stream_list::get_file_number (args(0));
 
       octave_stream os = octave_stream_list::lookup (fid, "fdisp");
 
       if (! error_state)
         {
           std::ostream *osp = os.output_stream ();
 
           if (osp)
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -108,17 +108,17 @@ to have a common size.\n\
 
   // Temporarily disable sparse_auto_mutate if set (it's obsolete anyway).
   unwind_protect frame;
   frame.protect_var (Vsparse_auto_mutate);
   Vsparse_auto_mutate = false;
 
   if (nargin == 1)
     {
-      octave_value arg = args (0);
+      octave_value arg = args(0);
       if (arg.is_bool_type ())
         retval = arg.sparse_bool_matrix_value ();
       else if (arg.is_complex_type ())
         retval = arg.sparse_complex_matrix_value ();
       else if (arg.is_numeric_type ())
         retval = arg.sparse_matrix_value ();
       else
         gripe_wrong_type_arg ("sparse", arg);
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -580,17 +580,17 @@ function returns 1 if the character stri
 This is just the opposite of the corresponding C library function.\n\
 @seealso{strcmpi, strncmp, strncmpi}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 2)
     {
-      retval = do_strcmp_fun (args (0), args (1), 0,
+      retval = do_strcmp_fun (args(0), args(1), 0,
                               "strcmp", strcmp_array_op, strcmp_str_op);
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -778,17 +778,17 @@ This is just the opposite of the corresp
 @strong{Caution:} National alphabets are not supported.\n\
 @seealso{strcmp, strncmp, strncmpi}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 2)
     {
-      retval = do_strcmp_fun (args (0), args (1), 0,
+      retval = do_strcmp_fun (args(0), args(1), 0,
                               "strcmpi", strcmpi_array_op, strcmpi_str_op);
     }
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -506,17 +506,17 @@ system-dependent error message.\n\
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 3)
     {
-      octave_stream strm = octave_stream_list::lookup (args (0), "fcntl");
+      octave_stream strm = octave_stream_list::lookup (args(0), "fcntl");
 
       if (! error_state)
         {
           int fid = strm.file_number ();
 
           int req = args(1).int_value (true);
           int arg = args(2).int_value (true);
 
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -208,17 +208,17 @@ do_trilu (const std::string& name,
       if (error_state)
         return retval;
     }
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   else
     {
-      octave_value arg = args (0);
+      octave_value arg = args(0);
 
       dim_vector dims = arg.dims ();
       if (dims.length () != 2)
         error ("%s: need a 2-D matrix", name.c_str ());
       else if (k < -dims (0) || k > dims(1))
         error ("%s: requested diagonal out of range", name.c_str ());
       else
         {
