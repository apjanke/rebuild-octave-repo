# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259062226 -3600
#      Tue Nov 24 12:30:26 2009 +0100
# Node ID 47c5af1868dfc0c7ead15f5a8f4e0f168f44f5d4
# Parent  43a7adf62534bad7f3f84fdf671871f17230e747
move idx_add methods to MArrayN

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* MArrayN.cc (MArrayN::idx_add): New methods.
+	* MArrayN.h: Declare them.
+	* MArray.cc, MArray.h: Remove from here.
+
 2009-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::safe_numel): New method.
 	* Array.h (Array<T>::Array (const dim_vector&),
 	Array<T>::Array (const dim_vector&, const T&),
 	Array<T>::Array (T *, const dim_vector&)): Use it here.
 	* Array.cc (Array<T>::clear (const dim_vector&)): Also here.
 	(Array<T>::get_size): Remove.
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -49,72 +49,16 @@ float
 MArray<T>::norm (float) const
 {
   (*current_liboctave_error_handler)
     ("norm: only implemented for double and complex values");
 
   return 0;
 }
 
-template <class T>
-struct _idxadds_helper
-{
-  T *array;
-  T val;
-  _idxadds_helper (T *a, T v) : array (a), val (v) { }
-  void operator () (octave_idx_type i)
-    { array[i] += val; }
-};
-
-template <class T>
-struct _idxadda_helper
-{
-  T *array;
-  const T *vals;
-  _idxadda_helper (T *a, const T *v) : array (a), vals (v) { }
-  void operator () (octave_idx_type i)
-    { array[i] += *vals++; }
-};
-
-template <class T>
-void
-MArray<T>::idx_add (const idx_vector& idx, T val)
-{
-  octave_idx_type n = this->length ();
-  octave_idx_type ext = idx.extent (n);
-  if (ext > n)
-    {
-      this->resize (ext);
-      n = ext;
-    }
-
-  OCTAVE_QUIT;
-
-  octave_idx_type len = idx.length (n);
-  idx.loop (len, _idxadds_helper<T> (this->fortran_vec (), val));
-}
-
-template <class T>
-void
-MArray<T>::idx_add (const idx_vector& idx, const MArray<T>& vals)
-{
-  octave_idx_type n = this->length ();
-  octave_idx_type ext = idx.extent (n);
-  if (ext > n)
-    {
-      this->resize (ext);
-      n = ext;
-    }
-
-  OCTAVE_QUIT;
-
-  octave_idx_type len = std::min (idx.length (n), vals.length ());
-  idx.loop (len, _idxadda_helper<T> (this->fortran_vec (), vals.data ()));
-}
-
 // Element by element MArray by scalar ops.
 
 template <class T>
 MArray<T>&
 operator += (MArray<T>& a, const T& s)
 {
   if (a.is_shared ())
     a = a + s;
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -99,22 +99,16 @@ public:
   map (U (&fcn) (T)) const
   { return Array<T>::template map<U> (fcn); }
 
   template <class U>
   MArray<U>
   map (U (&fcn) (const T&)) const
   { return Array<T>::template map<U> (fcn); }
 
-  // Performs indexed accumulative addition.
-
-  void idx_add (const idx_vector& idx, T val);
-
-  void idx_add (const idx_vector& idx, const MArray<T>& vals);
-
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 #endif
 
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -26,16 +26,72 @@ along with Octave; see the file COPYING.
 
 #include "MArrayN.h"
 #include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
 #include "mx-inlines.cc"
 
+template <class T>
+struct _idxadds_helper
+{
+  T *array;
+  T val;
+  _idxadds_helper (T *a, T v) : array (a), val (v) { }
+  void operator () (octave_idx_type i)
+    { array[i] += val; }
+};
+
+template <class T>
+struct _idxadda_helper
+{
+  T *array;
+  const T *vals;
+  _idxadda_helper (T *a, const T *v) : array (a), vals (v) { }
+  void operator () (octave_idx_type i)
+    { array[i] += *vals++; }
+};
+
+template <class T>
+void
+MArrayN<T>::idx_add (const idx_vector& idx, T val)
+{
+  octave_idx_type n = this->length ();
+  octave_idx_type ext = idx.extent (n);
+  if (ext > n)
+    {
+      this->resize (ext);
+      n = ext;
+    }
+
+  OCTAVE_QUIT;
+
+  octave_idx_type len = idx.length (n);
+  idx.loop (len, _idxadds_helper<T> (this->fortran_vec (), val));
+}
+
+template <class T>
+void
+MArrayN<T>::idx_add (const idx_vector& idx, const MArrayN<T>& vals)
+{
+  octave_idx_type n = this->length ();
+  octave_idx_type ext = idx.extent (n);
+  if (ext > n)
+    {
+      this->resize (ext);
+      n = ext;
+    }
+
+  OCTAVE_QUIT;
+
+  octave_idx_type len = std::min (idx.length (n), vals.length ());
+  idx.loop (len, _idxadda_helper<T> (this->fortran_vec (), vals.data ()));
+}
+
 // N-dimensional array with math ops.
 template <class T>
 void
 MArrayN<T>::changesign (void)
 {
   if (Array<T>::is_shared ())
     *this = - *this;
   else
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -99,16 +99,22 @@ public:
 
   MArrayN squeeze (void) const { return Array<T>::squeeze (); }
 
   MArrayN<T> diag (octave_idx_type k) const
   {
     return Array<T>::diag (k);
   }
 
+  // Performs indexed accumulative addition.
+
+  void idx_add (const idx_vector& idx, T val);
+
+  void idx_add (const idx_vector& idx, const MArrayN<T>& vals);
+
   void changesign (void);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (do_accumarray_sum): Simplify.
+
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (octave_struct::save_binary): Save dimensions for
 	structs.
 	(octave_struct::load_binary): Load dimensions if present, 
 	use 1x1 otherwise.
 
 2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6325,34 +6325,26 @@ do_accumarray_sum (const idx_vector& idx
                    octave_idx_type n = -1)
 {
   typedef typename NDT::element_type T;
   if (n < 0)
     n = idx.extent (0);
   else if (idx.extent (n) > n)
     error ("accumarray: index out of range");
 
-  // FIXME: the class tree in liboctave is overly complicated, hence the
-  // following type gymnastics.
-  MArray<T> array;
+  NDT retval (dim_vector (n, 1), T());
 
   if (vals.numel () == 1)
-    {
-      array = MArray<T> (n, T ());
-      array.idx_add (idx, vals (0));
-    }
-  else if (vals.length () == idx.length (n))
-    {
-      array = MArray<T> (n, T ());
-      array.idx_add (idx, MArray<T> (vals));
-    }
+    retval.idx_add (idx, vals (0));
+  else if (vals.numel () == idx.length (n))
+    retval.idx_add (idx, vals);
   else
     error ("accumarray: dimensions mismatch");
 
-  return NDT (MArrayN<T> (Array<T> (array)));
+  return retval;
 }
 
 DEFUN (__accumarray_sum__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __accumarray_sum__ (@var{idx}, @var{vals}, @var{n})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
