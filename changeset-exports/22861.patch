# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480768674 18000
#      Sat Dec 03 07:37:54 2016 -0500
# Node ID 0ab9c3548b1f068179efd1a3c8b71c377c617e4c
# Parent  0b1e25cc4457faf668922f1e3e07e2d041d5ec08
avoid some double to float conversion warnings

* ov-bool.h, ov-scalar.h: Use explicit cast from double to float to
avoid warnings.

diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -155,20 +155,20 @@ public:
 
   Matrix matrix_value (bool = false) const
   { return Matrix (1, 1, scalar); }
 
   FloatMatrix float_matrix_value (bool = false) const
   { return FloatMatrix (1, 1, scalar); }
 
   NDArray array_value (bool = false) const
-  { return NDArray (dim_vector (1, 1), static_cast<double> (scalar)); }
+  { return NDArray (dim_vector (1, 1), double_value ()); }
 
   FloatNDArray float_array_value (bool = false) const
-  { return FloatNDArray (dim_vector (1, 1), static_cast<double> (scalar)); }
+  { return FloatNDArray (dim_vector (1, 1), float_value ()); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   FloatComplex float_complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
   { return ComplexMatrix (1, 1, Complex (scalar)); }
 
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -145,54 +145,58 @@ public:
   double double_value (bool = false) const { return scalar; }
 
   float float_value (bool = false) const
   { return static_cast<float> (scalar); }
 
   double scalar_value (bool = false) const { return scalar; }
 
   float float_scalar_value (bool = false) const
-  { return static_cast<float> (scalar); }
+  { return float_value (); }
 
   Matrix matrix_value (bool = false) const
   { return Matrix (1, 1, scalar); }
 
   FloatMatrix float_matrix_value (bool = false) const
-  { return FloatMatrix (1, 1, scalar); }
+  { return FloatMatrix (1, 1, float_value ()); }
 
   NDArray array_value (bool = false) const
   { return NDArray (dim_vector (1, 1), scalar); }
 
   FloatNDArray float_array_value (bool = false) const
-  { return FloatNDArray (dim_vector (1, 1), scalar); }
+  { return FloatNDArray (dim_vector (1, 1), float_value ()); }
 
   SparseMatrix sparse_matrix_value (bool = false) const
   { return SparseMatrix (Matrix (1, 1, scalar)); }
 
   // FIXME: Need SparseComplexMatrix (Matrix) constructor!
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (sparse_matrix_value ()); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const { return scalar; }
 
-  FloatComplex float_complex_value (bool = false) const { return scalar; }
+  FloatComplex float_complex_value (bool = false) const
+  { return FloatComplex (float_value ()); }
 
   ComplexMatrix complex_matrix_value (bool = false) const
   { return ComplexMatrix (1, 1, Complex (scalar)); }
 
   FloatComplexMatrix float_complex_matrix_value (bool = false) const
-  { return FloatComplexMatrix (1, 1, FloatComplex (scalar)); }
+  { return FloatComplexMatrix (1, 1, FloatComplex (float_value ())); }
 
   ComplexNDArray complex_array_value (bool = false) const
   { return ComplexNDArray (dim_vector (1, 1), Complex (scalar)); }
 
   FloatComplexNDArray float_complex_array_value (bool = false) const
-  { return FloatComplexNDArray (dim_vector (1, 1), FloatComplex (scalar)); }
+  {
+    return FloatComplexNDArray (dim_vector (1, 1),
+                                FloatComplex (float_value ()));
+  }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
     retval(0) = static_cast<char> (scalar);
     return retval;
   }
