# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1303032030 -7200
#      Sun Apr 17 11:20:30 2011 +0200
# Node ID 6b66ab238c26cc61f2bb2ac81a8f0a2ddbc8375c
# Parent  16d26344c2a29d77bf4b19d0237e2f727fb56f41
Removed unnecessay code.

diff --git a/gui//Quint.pro b/gui//Quint.pro
--- a/gui//Quint.pro
+++ b/gui//Quint.pro
@@ -69,17 +69,16 @@ HEADERS += \
         src/kprocess.h \
         src/kprocess_p.h \
         src/kptydevice.h \
         src/Session.h \
         src/ShellCommand.h \
         src/QTerminalWidget.h \
     	src/MainWindow.h \
         src/OctaveLink.h \
-        src/konsole_export.h \
         src/ProcessInfo.h \
         src/kpty_export.h \
     src/OctaveTerminal.h \
     src/VariablesDockWidget.h \
     src/HistoryDockWidget.h \
     src/FilesDockWidget.h \
     src/FileEditorMdiSubWindow.h \
     src/SyntaxHighlighter.h \
diff --git a/gui//src/Emulation.cpp b/gui//src/Emulation.cpp
--- a/gui//src/Emulation.cpp
+++ b/gui//src/Emulation.cpp
@@ -189,17 +189,17 @@ void Emulation::receiveChar(int c)
 void Emulation::sendKeyEvent( QKeyEvent* ev )
 {
   emit stateSet(NOTIFYNORMAL);
   
   if (!ev->text().isEmpty())
   { // A block of text
     // Note that the text is proper unicode.
     // We should do a conversion here
-    emit sendData(ev->text().toUtf8(),ev->text().length());
+    emit sendData(ev->text().toUtf8(), ev->text().length());
   }
 }
 
 void Emulation::sendString(const char*,int)
 {
     // default implementation does nothing
 }
 
diff --git a/gui//src/Emulation.h b/gui//src/Emulation.h
--- a/gui//src/Emulation.h
+++ b/gui//src/Emulation.h
@@ -23,23 +23,20 @@
 #ifndef EMULATION_H
 #define EMULATION_H
 
 // System
 #include <stdio.h>
 
 // Qt 
 #include <QtGui/QKeyEvent>
-//#include <QPointer>
 #include <QtCore/QTextCodec>
 #include <QtCore/QTextStream>
 #include <QtCore/QTimer>
 
-// Konsole
-#include "konsole_export.h"
 
 class KeyboardTranslator;
 class HistoryType;
 class Screen;
 class ScreenWindow;
 class TerminalCharacterDecoder;
 
 /** 
@@ -111,17 +108,17 @@ enum
  * The emulation also maintains an activity state, which specifies whether
  * terminal is currently active ( when data is received ), normal
  * ( when the terminal is idle or receiving user input ) or trying
  * to alert the user ( also known as a "Bell" event ).  The stateSet() signal
  * is emitted whenever the activity state is set.  This can be used to determine
  * how long the emulation has been active/idle for and also respond to
  * a 'bell' event in different ways.
  */
-class KONSOLEPRIVATE_EXPORT Emulation : public QObject
+class Emulation : public QObject
 { 
 Q_OBJECT
 
 public:
  
    /** Constructs a new terminal emulation */ 
    Emulation();
   ~Emulation();
diff --git a/gui//src/KeyboardTranslator.cpp b/gui//src/KeyboardTranslator.cpp
--- a/gui//src/KeyboardTranslator.cpp
+++ b/gui//src/KeyboardTranslator.cpp
@@ -32,23 +32,16 @@
 #include <QtCore/QFileInfo>
 #include <QtCore/QTextStream>
 #include <QtGui/QKeySequence>
 #include <QtCore/QDir>
 #include <QtCore/QStringList>
 #include <QtCore/QDebug>
 #include <QtCore/QDataStream>
 
-// KDE
-#include "konsole_export.h"
-//#include <KDebug>
-//#include <KLocale>
-//#include <KStandardDirs>
-//#include "kdebug.h"
-
 const QByteArray KeyboardTranslatorManager::defaultTranslatorText(
 "keyboard \"Fallback Key Translator\"\n"
 "key Tab : \"\\t\""
 );
 
 KeyboardTranslatorManager::KeyboardTranslatorManager()
     : _haveLoadedAll(false)
 {
@@ -236,17 +229,17 @@ KeyboardTranslatorReader::KeyboardTransl
     : _source(source)
     , _hasNext(false)
 {
    // read input until we find the description
    while ( _description.isEmpty() && !source->atEnd() )
    {
         QList<Token> tokens = tokenize( QString(source->readLine()) );
         if ( !tokens.isEmpty() && tokens.first().type == Token::TitleKeyword )
-            _description = i18n(tokens[1].text.toLatin1().data());
+            _description = QString(tokens[1].text.toLatin1().data());
    }
    // read first entry (if any)
    readNext();
 }
 void KeyboardTranslatorReader::readNext() 
 {
     // find next entry
     while ( !_source->atEnd() )
diff --git a/gui//src/KeyboardTranslator.h b/gui//src/KeyboardTranslator.h
--- a/gui//src/KeyboardTranslator.h
+++ b/gui//src/KeyboardTranslator.h
@@ -24,19 +24,16 @@
 
 // Qt
 #include <QtCore/QHash>
 #include <QtCore/QList>
 #include <QtGui/QKeySequence>
 #include <QtCore/QMetaType>
 #include <QtCore/QVarLengthArray>
 
-// Konsole
-#include "konsole_export.h"
-
 class QIODevice;
 class QTextStream;
 
 /** 
  * A convertor which maps between key sequences pressed by the user and the
  * character strings which should be sent to the terminal and commands
  * which should be invoked when those character sequences are pressed.
  *
@@ -434,17 +431,17 @@ private:
     QIODevice* _destination;  
     QTextStream* _writer;
 };
 
 /**
  * Manages the keyboard translations available for use by terminal sessions,
  * see KeyboardTranslator.
  */
-class KONSOLEPRIVATE_EXPORT KeyboardTranslatorManager
+class KeyboardTranslatorManager
 {
 public:
     /** 
      * Constructs a new KeyboardTranslatorManager and loads the list of
      * available keyboard translations.
      *
      * The keyboard translations themselves are not loaded until they are
      * first requested via a call to findTranslator()
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -132,18 +132,17 @@ class OctaveMainThread : public QThread 
 public:
     OctaveMainThread(QObject *parent)
         : QThread(parent) {
     }
 protected:
     void run() {
         int argc = 3;
         const char* argv[] = {"octave", "--interactive", "--line-editing"};
-        octave_main(argc, (char**)argv,1);
-        switch_to_buffer(create_buffer(get_input_from_stdin()));
+        octave_main(argc, (char**)argv, 1);
         main_loop();
         clean_up_and_exit(0);
     }
 };
 
 class OctaveCallbackThread : public QThread {
     Q_OBJECT
 public:
diff --git a/gui//src/Pty.h b/gui//src/Pty.h
--- a/gui//src/Pty.h
+++ b/gui//src/Pty.h
@@ -25,38 +25,34 @@
 
 // Qt
 #include <QtCore/QStringList>
 #include <QtCore/QVector>
 #include <QtCore/QList>
 #include <QtCore/QSize>
 
 // KDE
-//#include <KPtyProcess>
 #include "kprocess.h"
 #include "kptyprocess.h"
 
-// Konsole
-#include "konsole_export.h"
-
 /**
  * The Pty class is used to start the terminal process, 
  * send data to it, receive data from it and manipulate 
  * various properties of the pseudo-teletype interface
  * used to communicate with the process.
  *
  * To use this class, construct an instance and connect
  * to the sendData slot and receivedData signal to
  * send data to or receive data from the process.
  *
  * To start the terminal process, call the start() method
  * with the program name and appropriate arguments. 
  */
 //class KONSOLEPRIVATE_EXPORT Pty: public KPtyProcess
-class KONSOLEPRIVATE_EXPORT Pty: public KPtyProcess
+class Pty: public KPtyProcess
 {
 Q_OBJECT
 
   public:
     
     /** 
      * Constructs a new Pty.
      * 
diff --git a/gui//src/Session.cpp b/gui//src/Session.cpp
--- a/gui//src/Session.cpp
+++ b/gui//src/Session.cpp
@@ -377,18 +377,17 @@ QString Session::checkProgram(const QStr
 
   return exec;
   */
   return program;
 }
 
 void Session::terminalWarning(const QString& message)
 {
-  //static const QByteArray warningText = i18nc("@info:shell Alert the user with red color text", "Warning: ").toLocal8Bit(); 
-  static const QByteArray warningText = i18nc("@info:shell Alert the user with red color text", "Warning: "); 
+  static const QByteArray warningText = QByteArray("@info:shell Alert the user with red color text");
     QByteArray messageText = message.toLocal8Bit();
 
     static const char redPenOn[] = "\033[1m\033[31m";
     static const char redPenOff[] = "\033[0m";
 
     _emulation->receiveData(redPenOn,strlen(redPenOn));
     _emulation->receiveData("\n\r\n\r",4);
     _emulation->receiveData(warningText.constData(),strlen(warningText.constData()));
@@ -441,17 +440,17 @@ void Session::run()
     QTextStream msgStream(&msg);
     msgStream << "Could not find '" << _program << "', starting '" << exec << "' instead. Please check your profile settings.";
     terminalWarning(msg);
     //terminalWarning(i18n("Could not find '%1', starting '%2' instead.  Please check your profile settings.",_program.toLatin1().data(),exec.toLatin1().data())); 
   }
   // if none of the choices are available, print a warning
   else if (choice == CHOICE_COUNT)
   {
-      terminalWarning(i18n("Could not find an interactive shell to start."));
+      terminalWarning(QString("Could not find an interactive shell to start."));
       return;
   }
   
   // if no arguments are specified, fall back to program name
   QStringList arguments = _arguments.join(QChar(' ')).isEmpty() ?
                                                    QStringList() << exec : _arguments;
 
   // JPS: commented out for lack of DBUS support by default on OSX
@@ -627,17 +626,17 @@ void Session::updateFlowControlState(boo
         foreach(TerminalDisplay* display,_views)
             display->outputSuspended(false);
     }   
 }
 void Session::activityStateSet(int state)
 {
   if (state==NOTIFYBELL)
   {
-      emit bellRequest( i18n("Bell in session '%1'",_nameTitle.toLatin1().data()) );
+      emit bellRequest(QString("Bell in session '%1'").arg(_nameTitle.toLatin1().data()));
   }
   else if (state==NOTIFYACTIVITY)
   {
     if (_monitorSilence) {
       _monitorTimer->start(_silenceSeconds*1000);
     }
 
     if ( _monitorActivity ) {
@@ -782,17 +781,17 @@ Session::~Session()
   delete _shellProcess;
   //delete _zmodemProc;
 }
 
 void Session::done(int exitStatus)
 {
   if (!_autoClose)
   {
-    _userTitle = i18n("@info:shell This session is done", "Finished");
+    _userTitle = QString("@info:shell This session is done");
     emit titleChanged();
     return;
   }
 
   QString message;
   QTextStream msgStream(&message);
   if (!_wantedClose || exitStatus != 0)
   {
@@ -947,55 +946,16 @@ QString Session::getDynamicTitle()
         title = sshInfo.format(tabTitleFormat(Session::RemoteTabTitle));
     }
     else
         title = process->format(tabTitleFormat(Session::LocalTabTitle));
 
     return title;
 }
 
-/*
-KUrl Session::getUrl()
-{
-    QString path;
-    
-    updateSessionProcessInfo();
-    if (_sessionProcessInfo->isValid())
-    {
-        bool ok = false;
-
-        // check if foreground process is bookmark-able
-        if (isForegroundProcessActive())
-        {
-            // for remote connections, save the user and host
-            // bright ideas to get the directory at the other end are welcome :)
-            if (_foregroundProcessInfo->name(&ok) == "ssh" && ok)
-            {
-                SSHProcessInfo sshInfo(*_foregroundProcessInfo);
-                path = "ssh://" + sshInfo.userName() + '@' + sshInfo.host();
-            }
-            else
-            {
-                path = _foregroundProcessInfo->currentDir(&ok);
-                if (!ok)
-                    path.clear();
-            }
-        }
-        else // otherwise use the current working directory of the shell process
-        {
-            path = _sessionProcessInfo->currentDir(&ok);
-            if (!ok)
-                path.clear();
-        }
-    }
-
-    return KUrl(path);
-}
-*/
-
 void Session::setIconName(const QString& iconName)
 {
     if ( iconName != _iconName )
     {
         _iconName = iconName;
         emit titleChanged();
     }
 }
@@ -1093,132 +1053,16 @@ void Session::setFlowControlEnabled(bool
 bool Session::flowControlEnabled() const
 {
     if (_shellProcess)
             return _shellProcess->flowControlEnabled();
     else
             return _flowControl;
 }
 
-/*
-void Session::fireZModemDetected()
-{
-  if (!_zmodemBusy)
-  {
-    QTimer::singleShot(10, this, SIGNAL(zmodemDetected()));
-    _zmodemBusy = true;
-  }
-}
-
-void Session::cancelZModem()
-{
-  _shellProcess->sendData("\030\030\030\030", 4); // Abort
-  _zmodemBusy = false;
-}
-
-void Session::startZModem(const QString &zmodem, const QString &dir, const QStringList &list)
-{
-  _zmodemBusy = true;
-  _zmodemProc = new KProcess();
-  _zmodemProc->setOutputChannelMode( KProcess::SeparateChannels );
-
-  *_zmodemProc << zmodem << "-v" << list;
-
-  if (!dir.isEmpty())
-     _zmodemProc->setWorkingDirectory(dir);
-
-  connect(_zmodemProc,SIGNAL (readyReadStandardOutput()),
-          this, SLOT(zmodemReadAndSendBlock()));
-  connect(_zmodemProc,SIGNAL (readyReadStandardError()),
-          this, SLOT(zmodemReadStatus()));
-  connect(_zmodemProc,SIGNAL (finished(int,QProcess::ExitStatus)),
-          this, SLOT(zmodemFinished()));
-
-  _zmodemProc->start();
-  
-  disconnect( _shellProcess,SIGNAL(receivedData(const char*,int)), this, SLOT(onReceiveBlock(const char*,int)) );
-  connect( _shellProcess,SIGNAL(receivedData(const char*,int)), this, SLOT(zmodemRcvBlock(const char*,int)) );
-
-  _zmodemProgress = new ZModemDialog(QApplication::activeWindow(), false,
-                                    i18n("ZModem Progress"));
-
-  connect(_zmodemProgress, SIGNAL(user1Clicked()),
-          this, SLOT(zmodemFinished()));
-
-  _zmodemProgress->show();
-}
-
-void Session::zmodemReadAndSendBlock()
-{
-  _zmodemProc->setReadChannel( QProcess::StandardOutput );
-  QByteArray data = _zmodemProc->readAll();
-
-  if ( data.count() == 0 )
-      return;
-
-  _shellProcess->sendData(data.constData(),data.count());
-}
-
-void Session::zmodemReadStatus()
-{
-  _zmodemProc->setReadChannel( QProcess::StandardError );
-  QByteArray msg = _zmodemProc->readAll();
-  while(!msg.isEmpty())
-  {
-     int i = msg.indexOf('\015');
-     int j = msg.indexOf('\012');
-     QByteArray txt;
-     if ((i != -1) && ((j == -1) || (i < j)))
-     {
-       msg = msg.mid(i+1);
-     }
-     else if (j != -1)
-     {
-       txt = msg.left(j);
-       msg = msg.mid(j+1);
-     }
-     else
-     {
-       txt = msg;
-       msg.truncate(0);
-     }
-     if (!txt.isEmpty())
-       _zmodemProgress->addProgressText(QString::fromLocal8Bit(txt));
-  }
-}
-
-void Session::zmodemRcvBlock(const char *data, int len)
-{
-  QByteArray ba( data, len );
-
-  _zmodemProc->write( ba );
-}
-
-void Session::zmodemFinished()
-{
-  // zmodemFinished() is called by QProcess's finished() and
-  //    ZModemDialog's user1Clicked(). Therefore, an invocation by
-  //    user1Clicked() will recursively invoke this function again
-  //    when the KProcess is deleted!
-  if (_zmodemProc) {
-    KProcess* process = _zmodemProc;
-    _zmodemProc = 0;   // Set _zmodemProc to 0 avoid recursive invocations!
-    _zmodemBusy = false;
-    delete process;    // Now, the KProcess may be disposed safely.
-
-    disconnect( _shellProcess,SIGNAL(receivedData(const char*,int)), this ,SLOT(zmodemRcvBlock(const char*,int)) );
-    connect( _shellProcess,SIGNAL(receivedData(const char*,int)), this, SLOT(onReceiveBlock(const char*,int)) );
-
-    _shellProcess->sendData("\030\030\030\030", 4); // Abort
-    _shellProcess->sendData("\001\013\n", 3); // Try to get prompt back
-    _zmodemProgress->transferDone();
-  }
-}
-*/
-
 void Session::onReceiveBlock( const char* buf, int len )
 {
     _emulation->receiveData( buf, len );
     emit receivedData( QString::fromLatin1( buf, len ) );
 }
 
 QSize Session::size()
 {
diff --git a/gui//src/Session.h b/gui//src/Session.h
--- a/gui//src/Session.h
+++ b/gui//src/Session.h
@@ -26,21 +26,16 @@
 
 // Qt
 #include <QtCore/QStringList>
 #include <QtCore/QByteRef>
 #include <QtCore/QSize>
 #include <QUuid>
 #include <QWidget>
 
-// KDE
-//#include <KApplication>
-//#include <KMainWindow>
-#include "konsole_export.h"
-
 // Konsole
 #include "History.h"
 
 class KProcess;
 class KUrl;
 class Emulation;
 class Pty;
 class ProcessInfo;
diff --git a/gui//src/TerminalDisplay.cpp b/gui//src/TerminalDisplay.cpp
--- a/gui//src/TerminalDisplay.cpp
+++ b/gui//src/TerminalDisplay.cpp
@@ -1122,18 +1122,18 @@ void TerminalDisplay::showResizeNotifica
   if (_terminalSizeHint && isVisible())
   {
      if (_terminalSizeStartup) {
                _terminalSizeStartup=false;
        return;
      }
      if (!_resizeWidget)
      {
-        _resizeWidget = new QLabel(i18n("Size: XXX x XXX"), this);
-        _resizeWidget->setMinimumWidth(_resizeWidget->fontMetrics().width(i18n("Size: XXX x XXX")));
+        _resizeWidget = new QLabel(QString("Size: XXX x XXX"), this);
+        _resizeWidget->setMinimumWidth(_resizeWidget->fontMetrics().width(QString("Size: XXX x XXX")));
         _resizeWidget->setMinimumHeight(_resizeWidget->sizeHint().height());
         _resizeWidget->setAlignment(Qt::AlignCenter);
 
         _resizeWidget->setStyleSheet("background-color:palette(window);border-style:solid;border-width:1px;border-color:palette(dark)");
 
         _resizeTimer = new QTimer(this);
         _resizeTimer->setSingleShot(true);
         connect(_resizeTimer, SIGNAL(timeout()), _resizeWidget, SLOT(hide()));
@@ -2879,17 +2879,17 @@ void TerminalDisplay::outputSuspended(bo
     //create the label when this function is first called
     if (!_outputSuspendedLabel)
     {
             //This label includes a link to an English language website
             //describing the 'flow control' (Xon/Xoff) feature found in almost 
             //all terminal emulators.
             //If there isn't a suitable article available in the target language the link
             //can simply be removed.
-            _outputSuspendedLabel = new QLabel( i18n("<qt>Output has been "
+            _outputSuspendedLabel = new QLabel( QString("<qt>Output has been "
                                                 "<a href=\"http://en.wikipedia.org/wiki/Flow_control\">suspended</a>"
                                                 " by pressing Ctrl+S."
                                                "  Press <b>Ctrl+Q</b> to resume.</qt>"),
                                                this );
 
             QPalette palette(_outputSuspendedLabel->palette());
             //KColorScheme::adjustBackground(palette,KColorScheme::NeutralBackground);
             _outputSuspendedLabel->setPalette(palette);
diff --git a/gui//src/TerminalDisplay.h b/gui//src/TerminalDisplay.h
--- a/gui//src/TerminalDisplay.h
+++ b/gui//src/TerminalDisplay.h
@@ -24,17 +24,16 @@
 // Qt
 #include <QtGui/QColor>
 #include <QtCore/QPointer>
 #include <QtGui/QWidget>
 
 // Konsole
 #include "Filter.h"
 #include "Character.h"
-#include "konsole_export.h"
 
 class QDrag;
 class QDragEnterEvent;
 class QDropEvent;
 class QLabel;
 class QTimer;
 class QEvent;
 class QGridLayout;
diff --git a/gui//src/Vt102Emulation.cpp b/gui//src/Vt102Emulation.cpp
--- a/gui//src/Vt102Emulation.cpp
+++ b/gui//src/Vt102Emulation.cpp
@@ -953,17 +953,17 @@ void Vt102Emulation::sendKeyEvent( QKeyE
             textToSend += _codec->fromUnicode(event->text());
 
         sendData( textToSend.constData() , textToSend.length() );
     }
     else
     {
         // print an error message to the terminal if no key translator has been
         // set
-        QString translatorError =  i18n("No keyboard translator available.  "
+        QString translatorError =  QString("No keyboard translator available.  "
                                          "The information needed to convert key presses "
                                          "into characters to send to the terminal " 
                                          "is missing.");
         reset();
         receiveData( translatorError.toAscii().constData() , translatorError.count() );
     }
 }
 
