# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1382044054 -7200
#      Thu Oct 17 23:07:34 2013 +0200
# Node ID c81debf315e06f57af5f9eed800598f852c8b22f
# Parent  26bd7d18a50ce83a64967a34ffee6dc18f2e9890
Avoid use of numel in sparse matrix min/max functions

* dSparse.cc (SparseMatrix SparseMatrix::max (Array<octave_idx-type>&, int)) :
  Remove use of numel
  (SparseMatrix SparseMatrix::min (Array<octave_idx-type>&, int)) : ditto

* CSparse.cc (SparseComplexMatrix SparseComplexMatrix::max (
  Array<octave_idx-type>&, int)) : Remove use of numel
  (SparseComplexMatrix SparseComplexMatrix::min (Array<octave_idx-type>&,
  int)) : ditto

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -253,26 +253,25 @@ SparseComplexMatrix::max (int dim) const
   return max (dummy_idx, dim);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::max (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseComplexMatrix result;
   dim_vector dv = dims ();
-
-  if (dv.numel () == 0 || dim >= dv.length ())
+  octave_idx_type nr = dv(0);
+  octave_idx_type nc = dv(1);
+
+  if (nr == 0 || nc == 0 || dim >= dv.length ())
     return result;
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
-  octave_idx_type nr = dv(0);
-  octave_idx_type nc = dv(1);
-
   if (dim == 0)
     {
       idx_arg.clear (1, nc);
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           Complex tmp_max;
           double abs_max = octave_NaN;
@@ -408,26 +407,25 @@ SparseComplexMatrix::min (int dim) const
   return min (dummy_idx, dim);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::min (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseComplexMatrix result;
   dim_vector dv = dims ();
-
-  if (dv.numel () == 0 || dim >= dv.length ())
+  octave_idx_type nr = dv(0);
+  octave_idx_type nc = dv(1);
+
+  if (nr == 0 || nc == 0 || dim >= dv.length ())
     return result;
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
-  octave_idx_type nr = dv(0);
-  octave_idx_type nc = dv(1);
-
   if (dim == 0)
     {
       idx_arg.clear (1, nc);
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           Complex tmp_min;
           double abs_min = octave_NaN;
@@ -551,16 +549,23 @@ SparseComplexMatrix::min (Array<octave_i
                 }
             }
         }
     }
 
   return result;
 }
 
+/*
+
+%!assert (max (max (speye (65536) * 1i)), sparse (1i)) 
+%!assert (min (min (speye (65536) * 1i)), sparse (0)) 
+
+*/
+
 ComplexRowVector
 SparseComplexMatrix::row (octave_idx_type i) const
 {
   octave_idx_type nc = columns ();
   ComplexRowVector retval (nc, 0);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -271,26 +271,25 @@ SparseMatrix::max (int dim) const
   return max (dummy_idx, dim);
 }
 
 SparseMatrix
 SparseMatrix::max (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseMatrix result;
   dim_vector dv = dims ();
-
-  if (dv.numel () == 0 || dim >= dv.length ())
+  octave_idx_type nr = dv(0);
+  octave_idx_type nc = dv(1);
+
+  if (nr == 0 || nc == 0 || dim >= dv.length ())
     return result;
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
-  octave_idx_type nr = dv(0);
-  octave_idx_type nc = dv(1);
-
   if (dim == 0)
     {
       idx_arg.clear (1, nc);
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           double tmp_max = octave_NaN;
           octave_idx_type idx_j = 0;
@@ -420,26 +419,25 @@ SparseMatrix::min (int dim) const
   return min (dummy_idx, dim);
 }
 
 SparseMatrix
 SparseMatrix::min (Array<octave_idx_type>& idx_arg, int dim) const
 {
   SparseMatrix result;
   dim_vector dv = dims ();
-
-  if (dv.numel () == 0 || dim >= dv.length ())
+  octave_idx_type nr = dv(0);
+  octave_idx_type nc = dv(1);
+
+  if (nr == 0 || nc == 0 || dim >= dv.length ())
     return result;
 
   if (dim < 0)
     dim = dv.first_non_singleton ();
 
-  octave_idx_type nr = dv(0);
-  octave_idx_type nc = dv(1);
-
   if (dim == 0)
     {
       idx_arg.clear (1, nc);
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nc; j++)
         {
           double tmp_min = octave_NaN;
           octave_idx_type idx_j = 0;
@@ -557,16 +555,23 @@ SparseMatrix::min (Array<octave_idx_type
                 }
             }
         }
     }
 
   return result;
 }
 
+/*
+
+%!assert (max (max (speye (65536))), sparse (1)) 
+%!assert (min (min (speye (65536))), sparse (0)) 
+
+*/
+
 RowVector
 SparseMatrix::row (octave_idx_type i) const
 {
   octave_idx_type nc = columns ();
   RowVector retval (nc, 0);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type k = cidx (j); k < cidx (j+1); k++)
