# HG changeset patch
# User jwe
# Date 1198135442 0
#      Thu Dec 20 07:24:02 2007 +0000
# Node ID d0784e593d39c67a69152d3a44e6e77673259d38
# Parent  9af6f0a214ee3088b47bb9541ba22a3bc77bd081
[project @ 2007-12-20 07:24:02 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-19  Soren Hauberg  <hauberg@gmail.com>
+
+	* image/imshow.m: Store uint8 images as doubles.  Handle default
+	display ranges correctly.
+
 2007-12-19  Alexander Barth  <barth.alexander@gmail.com>
 	    Peter A. Gustafson  <petegus@umich.edu>
 
 	* scripts/contourc.m: Allow usage of irregular spaced x, y data.
 
 2007-12-19  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/edit.m: New function.
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -53,17 +53,17 @@
 ## Adapted-By: jwe
 
 function h = imshow (im, varargin)
 
   if (nargin == 0)
     print_usage ();
   endif
 
-  display_range = [];
+  display_range = NA;
   true_color = false;
   indexed = false;
 
   ## Get the image.
   if (ischar (im))
     ## Eventually, this should be imread.
     [im, map] = loadimage (im);
     indexed = true;
@@ -111,25 +111,28 @@ function h = imshow (im, varargin)
 	  narg++;
       endswitch
     else
       error ("imshow: argument number %d is invalid", narg+1);
     endif
   endwhile
 
   ## Set default display range.
-  if (true_color || isempty (display_range))
+  if (isempty (display_range))
     display_range = [min(im(:)), max(im(:))];
   else
     t = class (im);
     switch (t)
       case {"double", "single", "logical"}
 	display_range = [0, 1];
       case {"int8", "int16", "int32", "uint8", "uint16", "uint32"}
-	display_range = [intmin(t), intmax(t)];
+	## For compatibility, uint8 data should not be handled as
+	## double.  Doing so is a quick fix to allow the images to be
+	## displayed correctly.
+	display_range = double ([intmin(t), intmax(t)]);
       otherwise
 	error ("imshow: invalid data type for image");
     endswitch
   endif
 
   ## Check for complex images.
   if (iscomplex (im))
     warning ("imshow: only showing real part of complex image");
@@ -139,27 +142,25 @@ function h = imshow (im, varargin)
   nans = isnan (im(:));
   if (any (nans))
     warning ("Octave:imshow-NaN",
 	     "imshow: pixels with NaN or NA values are set to minimum pixel value");
     im(nans) = display_range(1);
   endif
 
   ## This is for compatibility.
-  if (ismember (class (im), {"int8", "int16", "uint32", "int32", "single"}))
+  if (! indexed || islogical (im))
     im = double (im);
   endif
 
   ## Scale the image to the interval [0, 1] according to display_range.
   if (! (true_color || indexed || islogical (im)))
-    class (im)
-im
-    low = display_range(1)
-    high = display_range(2)
-    im = (im-low)/(high-low)
+    low = display_range(1);
+    high = display_range(2);
+    im = (im-low)/(high-low);
     im(im < 0) = 0;
     im(im > 1) = 1;
   endif
 
   if (true_color)
     tmp = __img__ ([], [], im);
   else
     tmp = image (round ((rows (colormap ()) - 1) * im));
