# HG changeset patch
# User jwe
# Date 1172605416 0
#      Tue Feb 27 19:43:36 2007 +0000
# Node ID ccdb8ffbb99496a32a836ceb50aedb454e59c4f2
# Parent  0d41cafd2e0dd0835ff2dab230705d5464334478
[project @ 2007-02-27 19:43:35 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2007-02-27  John W. Eaton  <jwe@octave.org>
+
+	* run-octave.in (run-octave.in): Use --no-initial-path.
+	Rename to qargs to args.  Use $args not "$args" when invoking Octave.
+	Try harder to get quoting right when passing args to Octave.
+
 2007-02-26  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (DISTDIRS): Eliminate variable.
 
 2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
 
 	* octMakefile.in, dlfcn/Makefile.in, emacs/Makefile.in:
 	Use $(LN_S) instead of ln or ln -s.
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -25,24 +25,23 @@ d4_list=$(find "$d4" -type d -a ! \( \( 
 d1_path=$(echo "$d1_list" | $AWK '{ s = sprintf ("%s%s", s, $0); } END { sub (/:$/, "", s); print s; }')
 d2_path=$(echo "$d2_list" | $AWK '{ s = sprintf ("%s%s", s, $0); } END { sub (/:$/, "", s); print s; }')
 d3_path=$(echo "$d3_list" | $AWK '{ s = sprintf ("%s%s", s, $0); } END { sub (/:$/, "", s); print s; }')
 d4_path=$(echo "$d4_list" | $AWK '{ s = sprintf ("%s%s", s, $0); } END { sub (/:$/, "", s); print s; }')
 
 LOADPATH="$d1_path:$d2_path:$d3_path:$d4_path"
 IMAGEPATH="$top_srcdir/scripts/image"
 
-args="--path=$LOADPATH --image-path=$IMAGEPATH"
-qargs="--path=\"$LOADPATH\" --image-path=\"$IMAGEPATH\""
+args="--no-initial-path --path=\"$LOADPATH\" --image-path=\"$IMAGEPATH\""
 
 if [ $# -gt 0 ]; then
   if [ "x$1" = "x-g" ]; then
     driver="gdb"
     if [ $(/bin/pwd) = "$builddir" ]; then
-      sed "s|^set args.*$|set args $qargs|" .gdbinit > .gdbinit-tmp
+      sed "s|^set args.*$|set args $args|" .gdbinit > .gdbinit-tmp
       mv .gdbinit-tmp .gdbinit
     fi
     args=""
     shift
   elif [ "x$1" = "x-valgrind" ]; then
     driver="valgrind --tool=memcheck"
     shift
   elif [ "x$1" = "x-strace" ]; then
@@ -50,15 +49,15 @@ if [ $# -gt 0 ]; then
     shift
   fi
 fi
 
 if [ -n "$args" ]; then
   OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
   LD_PRELOAD="$liboctinterp $liboctave $libcruft" \
   %library_path_var%="$builddir/src:$builddir/liboctave:$builddir/libcruft:$%library_path_var%" \
-    exec $driver "$builddir/src/octave" "$args" "$@"
+    exec $driver "$builddir/src/octave" --no-initial-path --path="$LOADPATH" --image-path="$IMAGEPATH" "$@"
 else
   OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
   LD_PRELOAD="$liboctinterp $liboctave $libcruft" \
   %library_path_var%="$builddir/src:$builddir/liboctave:$builddir/libcruft:$%library_path_var%" \
     exec $driver "$builddir/src/octave" "$@"
 fi
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-27  John W. Eaton  <jwe@octave.org>
+
+	* testfun/test.m (test): Handle possibility of file_in_loadpath
+	returning an empty cell array.
+
 2007-02-27  From Michael Goffioul  <michael.goffioul@swing.be>
 
 	* pkg/pkg.m: Use fullfile to create filenames from parts.
 
 2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in, audio/Makefile.in, control/Makefile.in,
 	control/base/Makefile.in, control/hinf/Makefile.in,
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -149,18 +149,22 @@ function [__ret1, __ret2] = test (__name
   __file = file_in_loadpath (__name, "all");
   if (isempty (__file))
     __file = file_in_loadpath ([__name, ".m"], "all");
   endif
   if (isempty (__file))
     __file = file_in_loadpath ([__name, ".cc"], "all");
   endif
   if (iscell (__file))
-    ## If repeats, return first in path.
-    __file = __file{1};
+      ## If repeats, return first in path.
+    if (isempty (__file))
+      __file = "";
+    else
+      __file = __file{1};
+    endif
   endif
   if (isempty (__file))
     if (__grabdemo)
       __ret1 = "";
       __ret2 = [];
     else
       fprintf(__fid, "%s%s does not exist in path\n", __signal_empty, __name);
       fflush (__fid);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2007-02-27  John W. Eaton  <jwe@octave.org>
+
+	* load-path.h, (load_path::initialize, load_path::do_initialize):
+	New arg, set_initial_path.
+	* load-path.cc (load_path::do_initialize): Don't add system
+	directories to apth if set_initial_path is false.
+	* octave.cc (set_initial_path): New static variable.
+	(NO_INITIAL_PATH_OPTION): New define.
+	(usage_string): Include --no-initial-path in message.
+	(long_opts): Include no-initial-path/NO_INITIAL_PATH_OPTION here.
+	(octave_main): Handle NO_INITIAL_PATH_OPTION.
+	Pass set_initial_path to load_path::initialize.
+
+	* parse.y (Fautoload): Warn about duplicate entries.  Only insert
+	the first found.
+
 2007-02-27  David Bateman  <dbateman@free.fr>
 
 	* error.cc (Vlast_error_file, Vlast_erro_name, Vlast_error_row,
 	Vlast_error_column): New static variables.
 	(verror): Use them to store the location of last error.
 	(rethrow_error, Frethrow, Flasterror): New functions.
 
         * DLD-FUNCTIONS/regexp.cc (octcellregexp): Wrapper to octregexp
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -347,28 +347,31 @@ maybe_add_path_elts (std::string& path, 
 {
   std::string tpath = genpath (dir);
 
   if (! tpath.empty ())
     path += dir_path::path_sep_str + tpath;
 }
 
 void
-load_path::do_initialize (void)
+load_path::do_initialize (bool set_initial_path)
 {
   Vsystem_path = dir_path::path_sep_str;
 
-  maybe_add_path_elts (Vsystem_path, Vlocal_ver_oct_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vlocal_api_oct_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vlocal_oct_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vlocal_ver_fcn_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vlocal_api_fcn_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vlocal_fcn_file_dir);
-  maybe_add_path_elts (Vsystem_path, Voct_file_dir);
-  maybe_add_path_elts (Vsystem_path, Vfcn_file_dir);
+  if (set_initial_path)
+    {
+      maybe_add_path_elts (Vsystem_path, Vlocal_ver_oct_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vlocal_api_oct_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vlocal_oct_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vlocal_ver_fcn_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vlocal_api_fcn_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vlocal_fcn_file_dir);
+      maybe_add_path_elts (Vsystem_path, Voct_file_dir);
+      maybe_add_path_elts (Vsystem_path, Vfcn_file_dir);
+    }
 
   std::string tpath = load_path::command_line_path;
 
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_LOADPATH");
 
   std::string xpath = ".";
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -41,20 +41,20 @@ protected:
   load_path (void) : dir_info_list (), fcn_map () { }
 
 public:
 
   typedef void (*hook_function_ptr) (const std::string& dir);
 
   ~load_path (void) { }
 
-  static void initialize (void)
+  static void initialize (bool set_initial_path = false)
   {
     if (instance_ok ())
-      instance->do_initialize ();
+      instance->do_initialize (set_initial_path);
   }
 
   static void clear (void)
   {
     if (instance_ok ())
       instance->do_clear ();
   }
 
@@ -290,17 +290,17 @@ private:
 
   const_dir_info_list_iterator find_dir_info (const std::string& dir) const;
   dir_info_list_iterator find_dir_info (const std::string& dir);
 
   bool contains (const std::string& dir) const;
 
   void move (std::list<dir_info>::iterator i, bool at_end);
 
-  void do_initialize (void);
+  void do_initialize (bool set_initial_path);
 
   void do_clear (void);
 
   void do_set (const std::string& p, bool warn);
 
   void do_append (const std::string& dir, bool warn);
 
   void do_prepend (const std::string& dir, bool warn);
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -101,16 +101,20 @@ static std::string octave_program_name;
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
 // TRUE means we read the site-wide octaverc files.
 // (--norc; --no-site-file; -f)
 static bool read_site_files = true;
 
+// TRUE means we set the initial path to configured defaults.
+// (--no-initial-path)
+static bool set_initial_path = true;
+
 // TRUE means we don't print the usual startup message.
 // (--quiet; --silent; -q)
 static bool inhibit_startup_message = false;
 
 // TRUE means we turn on compatibility options.
 // (--traditional)
 static bool traditional = false;
 
@@ -118,18 +122,18 @@ static bool traditional = false;
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
        [--exec-path path] [--help] [--image-path path] [--info-file file]\n\
        [--info-program prog] [--interactive] [--no-history] [--no-init-file]\n\
-       [--no-line-editing] [--no-site-file] [-p path] [--path path]\n\
-       [--silent] [--traditional] [--verbose] [--version] [file]";
+       [--no-line-editing] [--no-site-file] [--no-init-path] [-p path]\n\
+       [--path path] [--silent] [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?HVdfhip:qvx";
 
 // The code to evaluate at startup (--eval CODE)
 static std::string code_to_eval;
@@ -142,34 +146,36 @@ static bool persist = false;
 #define EVAL_OPTION 1
 #define EXEC_PATH_OPTION 2
 #define IMAGE_PATH_OPTION 3
 #define INFO_FILE_OPTION 4
 #define INFO_PROG_OPTION 5
 #define NO_INIT_FILE_OPTION 6
 #define NO_LINE_EDITING_OPTION 7
 #define NO_SITE_FILE_OPTION 8
-#define PERSIST_OPTION 9
-#define TRADITIONAL_OPTION 10
+#define NO_INITIAL_PATH_OPTION 9
+#define PERSIST_OPTION 10
+#define TRADITIONAL_OPTION 11
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "eval",             prog_args::required_arg, 0, EVAL_OPTION },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
     { "image-path",       prog_args::required_arg, 0, IMAGE_PATH_OPTION },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
     { "no-history",       prog_args::no_arg,       0, 'H' },
     { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
+    { "no-initial-path",  prog_args::no_arg,       0, NO_INITIAL_PATH_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
     { "persist",          prog_args::no_arg,       0, PERSIST_OPTION },
     { "quiet",            prog_args::no_arg,       0, 'q' },
     { "silent",           prog_args::no_arg,       0, 'q' },
     { "traditional",      prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "verbose",          prog_args::no_arg,       0, 'V' },
     { "version",          prog_args::no_arg,       0, 'v' },
@@ -641,16 +647,20 @@ octave_main (int argc, char **argv, int 
 	case NO_LINE_EDITING_OPTION:
 	  line_editing = false;
 	  break;
 
 	case NO_SITE_FILE_OPTION:
 	  read_site_files = 0;
 	  break;
 
+	case NO_INITIAL_PATH_OPTION:
+	  set_initial_path = false;
+	  break;
+
 	case TRADITIONAL_OPTION:
 	  traditional = true;
 	  break;
 
 	case PERSIST_OPTION:
 	  persist = true;
 	  break;
 
@@ -678,17 +688,17 @@ octave_main (int argc, char **argv, int 
 
   if (traditional)
     maximum_braindamage ();
 
   octave_interpreter_ready = true;
 
   initialize_version_info ();
 
-  load_path::initialize ();
+  load_path::initialize (set_initial_path);
 
   execute_startup_files ();
 
   initialize_history ();
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3536,17 +3536,23 @@ currently autoloaded functions.\n\
 
       retval = m;
     }
   else if (nargin == 2)
     {
       string_vector argv = args.make_argv ("autoload");
 
       if (! error_state)
-	autoload_map[argv[1]] = argv[2];
+        {
+	  if (autoload_map.find (argv[1]) != autoload_map.end ())
+	    warning ("autoload: not replacing existing entry for %s => %s",
+		     argv[1].c_str (), argv[2].c_str ());
+	  else
+	    autoload_map[argv[1]] = argv[2];
+	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
 void
