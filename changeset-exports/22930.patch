# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482449499 28800
#      Thu Dec 22 15:31:39 2016 -0800
# Node ID f2d2edab5c6624060569480bd7cad32b70be3b0d
# Parent  dec22bceafa2d90f6235548ccd6fdbc3444b8aa5
Change basevalue of bar charts when axes scale changed to log (bug #41944).

* __bar__.m (__bar__): Set basevalue to 0 (linear) or 1 (log) based on yscale
property of axes.  Add listener on axes yscale property to call
update_basevalue_logscale.
* __bar__.m (update_basevalue_logscale): New call back function which sets basevalue
to 0 if yscale is "linear" or 1 if yscale is "log".

* graphics.cc (axes::properties::get_axis_limits): Call warning_with_id and
ID="Octave:negative-data-log-axis" when non-positive data found for log axes
object.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6899,17 +6899,18 @@ axes::properties::get_axis_limits (doubl
               //        Is there another way?
               retval = default_lim ();
               retval(0) = pow (10., retval(0));
               retval(1) = pow (10., retval(1));
               return retval;
             }
           if (min_val <= 0 && max_val > 0)
             {
-              warning ("axis: omitting non-positive data in log plot");
+              warning_with_id ("Octave:negative-data-log-axis",
+                               "axis: omitting non-positive data in log plot");
               min_val = min_pos;
             }
           // FIXME: maybe this test should also be relative?
           if (std::abs (min_val - max_val)
               < sqrt (std::numeric_limits<double>::epsilon ()))
             {
               // Widen range when too small
               if (min_val >= 0)
diff --git a/scripts/plot/draw/private/__bar__.m b/scripts/plot/draw/private/__bar__.m
--- a/scripts/plot/draw/private/__bar__.m
+++ b/scripts/plot/draw/private/__bar__.m
@@ -25,17 +25,22 @@
 
 function varargout = __bar__ (vertical, func, varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ (func, varargin{:});
 
   width = 0.8;
   group = true;
   histc = NA;
-  bv = 0;  # BaseValue
+  ## BaseValue
+  if (strcmp (get (hax, "yscale"), "log"))
+    bv = 1;
+  else
+    bv = 0;
+  endif
 
   if (nargin > 1 && isnumeric (varargin{2}))
     x = varargin{1};
     if (isvector (x))
       x = x(:);
     endif
     y = varargin{2};
     if (isvector (y))
@@ -331,16 +336,17 @@ function hglist = bars (hax, vertical, x
       set (hg, args{:});
     endif
   endfor
 
   update_xlim (hax, []);
   ## Add listeners outside of for loop to prevent constant updating during
   ## creation of plot when patch objects are added.
   addlistener (hax, "xlim", @update_xlim);
+  addlistener (hax, "yscale", {@update_basevalue_logscale, hg});
   addlistener (h_baseline, "ydata", @update_baseline);
   addlistener (h_baseline, "visible", @update_baseline);
 
 endfunction
 
 function update_xlim (h, ~)
 
   kids = get (h, "children");
@@ -352,16 +358,30 @@ function update_xlim (h, ~)
       if (any (get (obj.baseline, "xdata") != xlim))
         set (obj.baseline, "xdata", xlim);
       endif
     endif
   endfor
 
 endfunction
 
+function update_basevalue_logscale (hax, ~, hg)
+  if (strcmp (get (hax, "yscale"), "log"))
+    warning ("off", "Octave:negative-data-log-axis", "local");
+    if (get (hg, "basevalue") == 0)
+      set (hg, "basevalue", 1);
+    endif
+  else
+#    warning ("off", "Octave:negative-data-log-axis", "local");
+    if (get (hg, "basevalue") == 1)
+      set (hg, "basevalue", 0);
+    endif
+  endif
+endfunction
+
 function update_baseline (h, ~)
 
   visible = get (h, "visible");
   ydata = get (h, "ydata")(1);
 
   ## Search axis for a bargroup that contains this baseline handle
   kids = get (get (h, "parent"), "children");
   for i = 1 : length (kids)
