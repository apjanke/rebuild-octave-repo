# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1343062784 14400
#      Mon Jul 23 12:59:44 2012 -0400
# Node ID ea69976576142602e3314aba2987db2188948906
# Parent  1f5dbfc23fc2c61b29d1594ba0cb8399c77b699d
which: provide source file name for built-in functions

* defun-int.h, defun.cc (install_builtin_function): New arg, FILE.
Pass file to octave_builtin constructor.
* mkbuiltins: Redefine XDEFUN_FILE_NAME to create a local FILE
variable.  Pass FILE to install_builtin_function.
* ov-builtin.h (octave_builtin::file): New member variable.
(octave_builtin::octave_builtin): Handle file name.
(octave_builtin::fcn_file_name): New function.
* ov-fcn-handle.cc (octave_fcn_handle::set_fcn): Only attempt to load
functions from .oct, .mex, or .m files.

diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -34,17 +34,17 @@ class octave_value;
 
 extern OCTINTERP_API void print_usage (void);
 extern OCTINTERP_API void print_usage (const std::string&);
 
 extern OCTINTERP_API void check_version (const std::string& version, const std::string& fcn);
 
 extern OCTINTERP_API void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
-                          const std::string& doc,
+                          const std::string& file, const std::string& doc,
                           bool can_hide_function = true);
 
 extern OCTINTERP_API void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
                       const octave_shlib& shl, const std::string& doc,
                       bool relative = false);
 
 extern OCTINTERP_API void
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -75,20 +75,20 @@ check_version (const std::string& versio
              version.c_str (), fcn.c_str (), OCTAVE_API_VERSION);
     }
 }
 
 // Install variables and functions in the symbol tables.
 
 void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
-                          const std::string& doc,
+                          const std::string& file, const std::string& doc,
                           bool /* can_hide_function -- not yet implemented */)
 {
-  octave_value fcn (new octave_builtin (f, name, doc));
+  octave_value fcn (new octave_builtin (f, name, file, doc));
 
   symbol_table::install_built_in_function (name, fcn);
 }
 
 void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
                       const octave_shlib& shl, const std::string& doc,
                       bool relative)
diff --git a/src/mkbuiltins b/src/mkbuiltins
--- a/src/mkbuiltins
+++ b/src/mkbuiltins
@@ -52,29 +52,30 @@ cat << \EOF
 #define XDEFUN_DLD_INTERNAL(name, args_name, nargout_name, doc) \
   XDEFUN_INTERNAL(name, args_name, nargout_name, doc)
 
 #define XDEFUNX_DLD_INTERNAL(name, fname, args_name, nargout_name, doc) \
   XDEFUNX_INTERNAL(name, fname, args_name, nargout_name, doc)
 
 #endif
 
-#define XDEFUN_FILE_NAME(name)
+#define XDEFUN_FILE_NAME(name) \
+  std::string file = name;
 
 #define XDEFUN_INTERNAL(name, args_name, nargout_name, doc) \
   extern DECLARE_FUN (name, args_name, nargout_name); \
-  install_builtin_function (F ## name, #name, doc); \
+  install_builtin_function (F ## name, #name, file, doc); \
 
 #define XDEFCONSTFUN_INTERNAL(name, args_name, nargout_name, doc) \
   extern DECLARE_FUN (name, args_name, nargout_name); \
-  install_builtin_function (F ## name, #name, doc, false); \
+  install_builtin_function (F ## name, #name, file, doc, false); \
 
 #define XDEFUNX_INTERNAL(name, fname, args_name, nargout_name, doc) \
   extern DECLARE_FUNX (fname, args_name, nargout_name); \
-  install_builtin_function (fname, name, doc); \
+  install_builtin_function (fname, name, file, doc); \
 
 #define XDEFALIAS_INTERNAL(alias, name) \
   alias_builtin (#alias, #name);
 
 #define XDEFCONST_INTERNAL(name, defn, doc)
 
 EOF
 
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -35,26 +35,32 @@ class jit_type;
 // Builtin functions.
 
 class
 OCTINTERP_API
 octave_builtin : public octave_function
 {
 public:
 
-  octave_builtin (void) : octave_function (), f (0), jtype (0) { }
+  octave_builtin (void) : octave_function (), f (0), file (), jtype (0) { }
 
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
                   const std::string& ds = std::string ())
-    : octave_function (nm, ds), f (ff), jtype (0) { }
+    : octave_function (nm, ds), f (ff), file (), jtype (0) { }
+
+  octave_builtin (fcn ff, const std::string& nm, const std::string& fnm,
+                  const std::string& ds)
+    : octave_function (nm, ds), f (ff), file (fnm), jtype (0) { }
 
   ~octave_builtin (void) { }
 
+  std::string fcn_file_name (void) const { return file; }
+
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
     {
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
@@ -84,16 +90,19 @@ public:
 
   static const std::list<octave_lvalue> *curr_lvalue_list;
 
 protected:
 
   // A pointer to the actual function.
   fcn f;
 
+  // The name of the file where this function was defined.
+  std::string file;
+
   // A pointer to the jit type that represents the function.
   jit_type *jtype;
 
 private:
 
   // No copying!
 
   octave_builtin (const octave_builtin& ob);
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -308,35 +308,34 @@ octave_fcn_handle::set_fcn (const std::s
             {
               error ("function handle points to non-existent function");
               success = false;
             }
         }
     }
   else
     {
-      if (fpath.length () > 0)
+      size_t fpath_len = fpath.length ();
+
+      if ((fpath_len > 4 && fpath.substr (fpath_len-4) == ".oct")
+          || (fpath_len > 4 && fpath.substr (fpath_len-4) == ".mex")
+          || (fpath_len > 2 && fpath.substr (fpath_len-4) == ".m"))
         {
           size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars ());
 
           std::string dir_name = fpath.substr (0, xpos);
 
           octave_function *xfcn = load_fcn_from_file (fpath, dir_name, "", nm);
 
           if (xfcn)
             {
               octave_value tmp (xfcn);
 
               fcn = octave_value (new octave_fcn_handle (tmp, nm));
             }
-          else
-            {
-              error ("function handle points to non-existent function");
-              success = false;
-            }
         }
       else
         {
           fcn = symbol_table::find_function (nm);
 
           if (! fcn.is_function ())
             {
               error ("function handle points to non-existent function");
@@ -379,19 +378,20 @@ octave_fcn_handle::save_ascii (std::ostr
                 return os;
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = f ? f->fcn_file_name () : std::string ();
+      bool is_builtin = f && f->is_builtin_function ();
 
       os << "# octaveroot: " << OCTAVE_EXEC_PREFIX << "\n";
-      if (! fnm.empty ())
+      if (! (is_builtin || fnm.empty ()))
         os << "# path: " << fnm << "\n";
       os << nm << "\n";
     }
 
   return true;
 }
 
 bool
