# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1444443260 25200
#      Fri Oct 09 19:14:20 2015 -0700
# Branch stable
# Node ID 45759620a9a541c5e512d64d39d33ff851b8bb96
# Parent  db32862013471fe41719af13d63c158534f820e5
quantile.m: Fix operation along a singleton dimension (bug #45455).

* quantile.m: Add isempty() to input validation.

* quantile.m (__quantile__): Sort x explicitly along dimension 1.

diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -108,18 +108,18 @@
 ##              distribution.
 
 function q = quantile (x, p = [], dim, method = 5)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
-  if (! (isnumeric (x) || islogical (x)))
-    error ("quantile: X must be a numeric vector or matrix");
+  if (! (isnumeric (x) || islogical (x)) || isempty (x))
+    error ("quantile: X must be a non-empty numeric vector or matrix");
   endif
 
   if (isempty (p))
     p = [0.00 0.25, 0.50, 0.75, 1.00];
   endif
 
   if (! (isnumeric (p) && isvector (p)))
     error ("quantile: P must be a numeric vector");
@@ -316,16 +316,19 @@ endfunction
 %! sx = [2, 3, 4];
 %! x = rand (sx);
 %! dim = 2;
 %! p = 0.5;
 %! yobs = quantile (x, p, dim);
 %! yexp = median (x, dim);
 %! assert (yobs, yexp);
 
+## Bug #45455 
+%!assert (quantile ([1 3 2], 0.5, 1), [1 3 2])
+
 ## Test input validation
 %!error quantile ()
 %!error quantile (1, 2, 3, 4, 5)
 %!error quantile (['A'; 'B'], 10)
 %!error quantile (1:10, [true, false])
 %!error quantile (1:10, ones (2,2))
 %!error quantile (1, 1, 1.5)
 %!error quantile (1, 1, 0)
@@ -353,18 +356,17 @@ function inv = __quantile__ (x, p, metho
   if (isinteger (x) || islogical (x))
     x = double (x);
   endif
 
   ## set shape of quantiles to column vector.
   p = p(:);
 
   ## Save length and set shape of samples.
-  ## FIXME: does sort guarantee that NaN's come at the end?
-  x = sort (x);
+  x = sort (x, 1);
   m = sum (! isnan (x));
   [xr, xc] = size (x);
 
   ## Initialize output values.
   inv = Inf (class (x)) * (-(p < 0) + (p > 1));
   inv = repmat (inv, 1, xc);
 
   ## Do the work.
@@ -426,17 +428,17 @@ function inv = __quantile__ (x, p, metho
             ## Approximately unbiased respecting order statistics.
             p = kron (p, m+0.25) + 0.375;
 
           otherwise
             error ("quantile: Unknown METHOD, '%d'", method);
         endswitch
 
         ## Duplicate single values.
-        imm1 = (mm == 1);
+        imm1 = (mm(1,:) == 1);
         x(2,imm1) = x(1,imm1);
 
         ## Interval indices.
         pi = max (min (floor (p), mm-1), 1);
         pr = max (min (p - pi, 1), 0);
         pi += pcd;
         inv(k,:) = (1-pr) .* x(pi) + pr .* x(pi+1);
     endswitch
